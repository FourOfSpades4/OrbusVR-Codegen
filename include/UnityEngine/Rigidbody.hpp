// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: CollisionDetectionMode
  struct CollisionDetectionMode;
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: RigidbodyInterpolation
  struct RigidbodyInterpolation;
  // Forward declaring type: ForceMode
  struct ForceMode;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rigidbody
  class Rigidbody;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Rigidbody);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rigidbody*, "UnityEngine", "Rigidbody");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rigidbody
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: A810E0
  // [RequireComponent] Offset: A810E0
  class Rigidbody : public ::UnityEngine::Component {
    public:
    // public System.Void .ctor()
    // Offset: 0x2876F24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Rigidbody* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Rigidbody::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Rigidbody*, creationType>()));
    }
    // public UnityEngine.Vector3 get_velocity()
    // Offset: 0x2876F2C
    ::UnityEngine::Vector3 get_velocity();
    // public System.Void set_velocity(UnityEngine.Vector3 value)
    // Offset: 0x2876FD0
    void set_velocity(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_angularVelocity()
    // Offset: 0x287706C
    ::UnityEngine::Vector3 get_angularVelocity();
    // public System.Void set_angularVelocity(UnityEngine.Vector3 value)
    // Offset: 0x2877110
    void set_angularVelocity(::UnityEngine::Vector3 value);
    // public System.Single get_drag()
    // Offset: 0x28771AC
    float get_drag();
    // public System.Void set_drag(System.Single value)
    // Offset: 0x2877218
    void set_drag(float value);
    // public System.Single get_mass()
    // Offset: 0x287728C
    float get_mass();
    // public System.Void set_mass(System.Single value)
    // Offset: 0x28772F8
    void set_mass(float value);
    // public System.Boolean get_useGravity()
    // Offset: 0x287736C
    bool get_useGravity();
    // public System.Void set_useGravity(System.Boolean value)
    // Offset: 0x28773D8
    void set_useGravity(bool value);
    // public System.Boolean get_isKinematic()
    // Offset: 0x287744C
    bool get_isKinematic();
    // public System.Void set_isKinematic(System.Boolean value)
    // Offset: 0x28774B8
    void set_isKinematic(bool value);
    // public System.Void set_freezeRotation(System.Boolean value)
    // Offset: 0x287752C
    void set_freezeRotation(bool value);
    // public System.Void set_collisionDetectionMode(UnityEngine.CollisionDetectionMode value)
    // Offset: 0x28775A0
    void set_collisionDetectionMode(::UnityEngine::CollisionDetectionMode value);
    // public UnityEngine.Vector3 get_centerOfMass()
    // Offset: 0x2877614
    ::UnityEngine::Vector3 get_centerOfMass();
    // public UnityEngine.Vector3 get_worldCenterOfMass()
    // Offset: 0x28776B8
    ::UnityEngine::Vector3 get_worldCenterOfMass();
    // public System.Void set_detectCollisions(System.Boolean value)
    // Offset: 0x287775C
    void set_detectCollisions(bool value);
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x28777D0
    ::UnityEngine::Vector3 get_position();
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x2877874
    void set_position(::UnityEngine::Vector3 value);
    // public System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0x2877910
    void set_rotation(::UnityEngine::Quaternion value);
    // public System.Void set_interpolation(UnityEngine.RigidbodyInterpolation value)
    // Offset: 0x28779AC
    void set_interpolation(::UnityEngine::RigidbodyInterpolation value);
    // public System.Single get_maxAngularVelocity()
    // Offset: 0x2877A20
    float get_maxAngularVelocity();
    // public System.Void set_maxAngularVelocity(System.Single value)
    // Offset: 0x2877A8C
    void set_maxAngularVelocity(float value);
    // public System.Void MovePosition(UnityEngine.Vector3 position)
    // Offset: 0x2877B00
    void MovePosition(::UnityEngine::Vector3 position);
    // public System.Void MoveRotation(UnityEngine.Quaternion rot)
    // Offset: 0x2877B9C
    void MoveRotation(::UnityEngine::Quaternion rot);
    // public System.Void Sleep()
    // Offset: 0x2877C38
    void Sleep();
    // public System.Void WakeUp()
    // Offset: 0x2877CA4
    void WakeUp();
    // public UnityEngine.Vector3 GetPointVelocity(UnityEngine.Vector3 worldPoint)
    // Offset: 0x2877D10
    ::UnityEngine::Vector3 GetPointVelocity(::UnityEngine::Vector3 worldPoint);
    // public System.Void AddForce(UnityEngine.Vector3 force, UnityEngine.ForceMode mode)
    // Offset: 0x2877DD0
    void AddForce(::UnityEngine::Vector3 force, ::UnityEngine::ForceMode mode);
    // public System.Void AddForce(UnityEngine.Vector3 force)
    // Offset: 0x2877E84
    void AddForce(::UnityEngine::Vector3 force);
    // public System.Void AddTorque(UnityEngine.Vector3 torque, UnityEngine.ForceMode mode)
    // Offset: 0x2877EB0
    void AddTorque(::UnityEngine::Vector3 torque, ::UnityEngine::ForceMode mode);
    // public System.Void AddTorque(UnityEngine.Vector3 torque)
    // Offset: 0x2877F64
    void AddTorque(::UnityEngine::Vector3 torque);
    // public System.Void AddForceAtPosition(UnityEngine.Vector3 force, UnityEngine.Vector3 position, UnityEngine.ForceMode mode)
    // Offset: 0x2877F90
    void AddForceAtPosition(::UnityEngine::Vector3 force, ::UnityEngine::Vector3 position, ::UnityEngine::ForceMode mode);
    // public System.Void AddExplosionForce(System.Single explosionForce, UnityEngine.Vector3 explosionPosition, System.Single explosionRadius, System.Single upwardsModifier, UnityEngine.ForceMode mode)
    // Offset: 0x2878058
    void AddExplosionForce(float explosionForce, ::UnityEngine::Vector3 explosionPosition, float explosionRadius, float upwardsModifier, ::UnityEngine::ForceMode mode);
    // public System.Void AddExplosionForce(System.Single explosionForce, UnityEngine.Vector3 explosionPosition, System.Single explosionRadius)
    // Offset: 0x2878134
    void AddExplosionForce(float explosionForce, ::UnityEngine::Vector3 explosionPosition, float explosionRadius);
    // private System.Void get_velocity_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x2876F5C
    void get_velocity_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_velocity_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x2876FF8
    void set_velocity_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_angularVelocity_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x287709C
    void get_angularVelocity_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_angularVelocity_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x2877138
    void set_angularVelocity_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void get_centerOfMass_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x2877644
    void get_centerOfMass_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void get_worldCenterOfMass_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x28776E8
    void get_worldCenterOfMass_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void get_position_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x2877800
    void get_position_Injected(ByRef<::UnityEngine::Vector3> ret);
    // private System.Void set_position_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x287789C
    void set_position_Injected(ByRef<::UnityEngine::Vector3> value);
    // private System.Void set_rotation_Injected(ref UnityEngine.Quaternion value)
    // Offset: 0x2877938
    void set_rotation_Injected(ByRef<::UnityEngine::Quaternion> value);
    // private System.Void MovePosition_Injected(ref UnityEngine.Vector3 position)
    // Offset: 0x2877B28
    void MovePosition_Injected(ByRef<::UnityEngine::Vector3> position);
    // private System.Void MoveRotation_Injected(ref UnityEngine.Quaternion rot)
    // Offset: 0x2877BC4
    void MoveRotation_Injected(ByRef<::UnityEngine::Quaternion> rot);
    // private System.Void GetPointVelocity_Injected(ref UnityEngine.Vector3 worldPoint, out UnityEngine.Vector3 ret)
    // Offset: 0x2877D4C
    void GetPointVelocity_Injected(ByRef<::UnityEngine::Vector3> worldPoint, ByRef<::UnityEngine::Vector3> ret);
    // private System.Void AddForce_Injected(ref UnityEngine.Vector3 force, UnityEngine.ForceMode mode)
    // Offset: 0x2877E00
    void AddForce_Injected(ByRef<::UnityEngine::Vector3> force, ::UnityEngine::ForceMode mode);
    // private System.Void AddTorque_Injected(ref UnityEngine.Vector3 torque, UnityEngine.ForceMode mode)
    // Offset: 0x2877EE0
    void AddTorque_Injected(ByRef<::UnityEngine::Vector3> torque, ::UnityEngine::ForceMode mode);
    // private System.Void AddForceAtPosition_Injected(ref UnityEngine.Vector3 force, ref UnityEngine.Vector3 position, UnityEngine.ForceMode mode)
    // Offset: 0x2877FCC
    void AddForceAtPosition_Injected(ByRef<::UnityEngine::Vector3> force, ByRef<::UnityEngine::Vector3> position, ::UnityEngine::ForceMode mode);
    // private System.Void AddExplosionForce_Injected(System.Single explosionForce, ref UnityEngine.Vector3 explosionPosition, System.Single explosionRadius, System.Single upwardsModifier, UnityEngine.ForceMode mode)
    // Offset: 0x2878090
    void AddExplosionForce_Injected(float explosionForce, ByRef<::UnityEngine::Vector3> explosionPosition, float explosionRadius, float upwardsModifier, ::UnityEngine::ForceMode mode);
  }; // UnityEngine.Rigidbody
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rigidbody::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_velocity
// Il2CppName: get_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_velocity
// Il2CppName: set_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::set_velocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_angularVelocity
// Il2CppName: get_angularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_angularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_angularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_angularVelocity
// Il2CppName: set_angularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::set_angularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_angularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_drag
// Il2CppName: get_drag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_drag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_drag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_drag
// Il2CppName: set_drag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::set_drag)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_drag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_mass
// Il2CppName: get_mass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_mass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_mass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_mass
// Il2CppName: set_mass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::set_mass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_mass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_useGravity
// Il2CppName: get_useGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_useGravity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_useGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_useGravity
// Il2CppName: set_useGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(bool)>(&UnityEngine::Rigidbody::set_useGravity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_useGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_isKinematic
// Il2CppName: get_isKinematic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_isKinematic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_isKinematic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_isKinematic
// Il2CppName: set_isKinematic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(bool)>(&UnityEngine::Rigidbody::set_isKinematic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_isKinematic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_freezeRotation
// Il2CppName: set_freezeRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(bool)>(&UnityEngine::Rigidbody::set_freezeRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_freezeRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_collisionDetectionMode
// Il2CppName: set_collisionDetectionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::CollisionDetectionMode)>(&UnityEngine::Rigidbody::set_collisionDetectionMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "CollisionDetectionMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_collisionDetectionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_centerOfMass
// Il2CppName: get_centerOfMass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_centerOfMass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_centerOfMass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_worldCenterOfMass
// Il2CppName: get_worldCenterOfMass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_worldCenterOfMass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_worldCenterOfMass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_detectCollisions
// Il2CppName: set_detectCollisions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(bool)>(&UnityEngine::Rigidbody::set_detectCollisions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_detectCollisions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::set_position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Quaternion)>(&UnityEngine::Rigidbody::set_rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_interpolation
// Il2CppName: set_interpolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::RigidbodyInterpolation)>(&UnityEngine::Rigidbody::set_interpolation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "RigidbodyInterpolation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_interpolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_maxAngularVelocity
// Il2CppName: get_maxAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::get_maxAngularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_maxAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_maxAngularVelocity
// Il2CppName: set_maxAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float)>(&UnityEngine::Rigidbody::set_maxAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_maxAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::MovePosition
// Il2CppName: MovePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::MovePosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "MovePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::MoveRotation
// Il2CppName: MoveRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Quaternion)>(&UnityEngine::Rigidbody::MoveRotation)> {
  static const MethodInfo* get() {
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "MoveRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rot});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::Sleep
// Il2CppName: Sleep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::Sleep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "Sleep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::WakeUp
// Il2CppName: WakeUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)()>(&UnityEngine::Rigidbody::WakeUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "WakeUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::GetPointVelocity
// Il2CppName: GetPointVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::GetPointVelocity)> {
  static const MethodInfo* get() {
    static auto* worldPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "GetPointVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPoint});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddForce
// Il2CppName: AddForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddForce)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddForce
// Il2CppName: AddForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::AddForce)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddTorque
// Il2CppName: AddTorque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddTorque)> {
  static const MethodInfo* get() {
    static auto* torque = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddTorque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{torque, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddTorque
// Il2CppName: AddTorque
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3)>(&UnityEngine::Rigidbody::AddTorque)> {
  static const MethodInfo* get() {
    static auto* torque = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddTorque", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{torque});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddForceAtPosition
// Il2CppName: AddForceAtPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddForceAtPosition)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddForceAtPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force, position, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddExplosionForce
// Il2CppName: AddExplosionForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, ::UnityEngine::Vector3, float, float, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddExplosionForce)> {
  static const MethodInfo* get() {
    static auto* explosionForce = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* explosionPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* explosionRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* upwardsModifier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddExplosionForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{explosionForce, explosionPosition, explosionRadius, upwardsModifier, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddExplosionForce
// Il2CppName: AddExplosionForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, ::UnityEngine::Vector3, float)>(&UnityEngine::Rigidbody::AddExplosionForce)> {
  static const MethodInfo* get() {
    static auto* explosionForce = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* explosionPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* explosionRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddExplosionForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{explosionForce, explosionPosition, explosionRadius});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_velocity_Injected
// Il2CppName: get_velocity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::get_velocity_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_velocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_velocity_Injected
// Il2CppName: set_velocity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::set_velocity_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_velocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_angularVelocity_Injected
// Il2CppName: get_angularVelocity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::get_angularVelocity_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_angularVelocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_angularVelocity_Injected
// Il2CppName: set_angularVelocity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::set_angularVelocity_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_angularVelocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_centerOfMass_Injected
// Il2CppName: get_centerOfMass_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::get_centerOfMass_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_centerOfMass_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_worldCenterOfMass_Injected
// Il2CppName: get_worldCenterOfMass_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::get_worldCenterOfMass_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_worldCenterOfMass_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::get_position_Injected
// Il2CppName: get_position_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::get_position_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "get_position_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_position_Injected
// Il2CppName: set_position_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::set_position_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_position_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::set_rotation_Injected
// Il2CppName: set_rotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Rigidbody::set_rotation_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "set_rotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::MovePosition_Injected
// Il2CppName: MovePosition_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::MovePosition_Injected)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "MovePosition_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::MoveRotation_Injected
// Il2CppName: MoveRotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Quaternion>)>(&UnityEngine::Rigidbody::MoveRotation_Injected)> {
  static const MethodInfo* get() {
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "MoveRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rot});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::GetPointVelocity_Injected
// Il2CppName: GetPointVelocity_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::Rigidbody::GetPointVelocity_Injected)> {
  static const MethodInfo* get() {
    static auto* worldPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "GetPointVelocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPoint, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddForce_Injected
// Il2CppName: AddForce_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddForce_Injected)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddForce_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddTorque_Injected
// Il2CppName: AddTorque_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddTorque_Injected)> {
  static const MethodInfo* get() {
    static auto* torque = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddTorque_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{torque, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddForceAtPosition_Injected
// Il2CppName: AddForceAtPosition_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddForceAtPosition_Injected)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddForceAtPosition_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force, position, mode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rigidbody::AddExplosionForce_Injected
// Il2CppName: AddExplosionForce_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Rigidbody::*)(float, ByRef<::UnityEngine::Vector3>, float, float, ::UnityEngine::ForceMode)>(&UnityEngine::Rigidbody::AddExplosionForce_Injected)> {
  static const MethodInfo* get() {
    static auto* explosionForce = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* explosionPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* explosionRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* upwardsModifier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "ForceMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rigidbody*), "AddExplosionForce_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{explosionForce, explosionPosition, explosionRadius, upwardsModifier, mode});
  }
};
