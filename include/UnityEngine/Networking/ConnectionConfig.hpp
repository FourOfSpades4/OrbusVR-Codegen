// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Networking.ConnectionAcksType
#include "UnityEngine/Networking/ConnectionAcksType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Forward declaring namespace: UnityEngine::Networking
namespace UnityEngine::Networking {
  // Forward declaring type: ChannelQOS
  class ChannelQOS;
  // Forward declaring type: QosType
  struct QosType;
}
// Completed forward declares
// Type namespace: UnityEngine.Networking
namespace UnityEngine::Networking {
  // Forward declaring type: ConnectionConfig
  class ConnectionConfig;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Networking::ConnectionConfig);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Networking::ConnectionConfig*, "UnityEngine.Networking", "ConnectionConfig");
// Type namespace: UnityEngine.Networking
namespace UnityEngine::Networking {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Networking.ConnectionConfig
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: AA581C
  class ConnectionConfig : public ::Il2CppObject {
    public:
    public:
    // private System.UInt16 m_PacketSize
    // Size: 0x2
    // Offset: 0x10
    uint16_t m_PacketSize;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.UInt16 m_FragmentSize
    // Size: 0x2
    // Offset: 0x12
    uint16_t m_FragmentSize;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.UInt32 m_ResendTimeout
    // Size: 0x4
    // Offset: 0x14
    uint m_ResendTimeout;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_DisconnectTimeout
    // Size: 0x4
    // Offset: 0x18
    uint m_DisconnectTimeout;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_ConnectTimeout
    // Size: 0x4
    // Offset: 0x1C
    uint m_ConnectTimeout;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_MinUpdateTimeout
    // Size: 0x4
    // Offset: 0x20
    uint m_MinUpdateTimeout;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_PingTimeout
    // Size: 0x4
    // Offset: 0x24
    uint m_PingTimeout;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_ReducedPingTimeout
    // Size: 0x4
    // Offset: 0x28
    uint m_ReducedPingTimeout;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_AllCostTimeout
    // Size: 0x4
    // Offset: 0x2C
    uint m_AllCostTimeout;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Byte m_NetworkDropThreshold
    // Size: 0x1
    // Offset: 0x30
    uint8_t m_NetworkDropThreshold;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_OverflowDropThreshold
    // Size: 0x1
    // Offset: 0x31
    uint8_t m_OverflowDropThreshold;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_MaxConnectionAttempt
    // Size: 0x1
    // Offset: 0x32
    uint8_t m_MaxConnectionAttempt;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: m_MaxConnectionAttempt and: m_AckDelay
    char __padding11[0x1] = {};
    // private System.UInt32 m_AckDelay
    // Size: 0x4
    // Offset: 0x34
    uint m_AckDelay;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_SendDelay
    // Size: 0x4
    // Offset: 0x38
    uint m_SendDelay;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt16 m_MaxCombinedReliableMessageSize
    // Size: 0x2
    // Offset: 0x3C
    uint16_t m_MaxCombinedReliableMessageSize;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.UInt16 m_MaxCombinedReliableMessageCount
    // Size: 0x2
    // Offset: 0x3E
    uint16_t m_MaxCombinedReliableMessageCount;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.UInt16 m_MaxSentMessageQueueSize
    // Size: 0x2
    // Offset: 0x40
    uint16_t m_MaxSentMessageQueueSize;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: m_MaxSentMessageQueueSize and: m_AcksType
    char __padding16[0x2] = {};
    // private UnityEngine.Networking.ConnectionAcksType m_AcksType
    // Size: 0x4
    // Offset: 0x44
    ::UnityEngine::Networking::ConnectionAcksType m_AcksType;
    // Field size check
    static_assert(sizeof(::UnityEngine::Networking::ConnectionAcksType) == 0x4);
    // private System.Boolean m_UsePlatformSpecificProtocols
    // Size: 0x1
    // Offset: 0x48
    bool m_UsePlatformSpecificProtocols;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UsePlatformSpecificProtocols and: m_InitialBandwidth
    char __padding18[0x3] = {};
    // private System.UInt32 m_InitialBandwidth
    // Size: 0x4
    // Offset: 0x4C
    uint m_InitialBandwidth;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Single m_BandwidthPeakFactor
    // Size: 0x4
    // Offset: 0x50
    float m_BandwidthPeakFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.UInt16 m_WebSocketReceiveBufferMaxSize
    // Size: 0x2
    // Offset: 0x54
    uint16_t m_WebSocketReceiveBufferMaxSize;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: m_WebSocketReceiveBufferMaxSize and: m_UdpSocketReceiveBufferMaxSize
    char __padding21[0x2] = {};
    // private System.UInt32 m_UdpSocketReceiveBufferMaxSize
    // Size: 0x4
    // Offset: 0x58
    uint m_UdpSocketReceiveBufferMaxSize;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: m_UdpSocketReceiveBufferMaxSize and: m_SSLCertFilePath
    char __padding22[0x4] = {};
    // private System.String m_SSLCertFilePath
    // Size: 0x8
    // Offset: 0x60
    ::StringW m_SSLCertFilePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_SSLPrivateKeyFilePath
    // Size: 0x8
    // Offset: 0x68
    ::StringW m_SSLPrivateKeyFilePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_SSLCAFilePath
    // Size: 0x8
    // Offset: 0x70
    ::StringW m_SSLCAFilePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Collections.Generic.List`1<UnityEngine.Networking.ChannelQOS> m_Channels
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::UnityEngine::Networking::ChannelQOS*>* m_Channels;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Networking::ChannelQOS*>*) == 0x8);
    // System.Collections.Generic.List`1<System.Collections.Generic.List`1<System.Byte>> m_SharedOrderChannels
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<uint8_t>*>* m_SharedOrderChannels;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<uint8_t>*>*) == 0x8);
    public:
    // Get instance field reference: private System.UInt16 m_PacketSize
    [[deprecated("Use field access instead!")]] uint16_t& dyn_m_PacketSize();
    // Get instance field reference: private System.UInt16 m_FragmentSize
    [[deprecated("Use field access instead!")]] uint16_t& dyn_m_FragmentSize();
    // Get instance field reference: private System.UInt32 m_ResendTimeout
    [[deprecated("Use field access instead!")]] uint& dyn_m_ResendTimeout();
    // Get instance field reference: private System.UInt32 m_DisconnectTimeout
    [[deprecated("Use field access instead!")]] uint& dyn_m_DisconnectTimeout();
    // Get instance field reference: private System.UInt32 m_ConnectTimeout
    [[deprecated("Use field access instead!")]] uint& dyn_m_ConnectTimeout();
    // Get instance field reference: private System.UInt32 m_MinUpdateTimeout
    [[deprecated("Use field access instead!")]] uint& dyn_m_MinUpdateTimeout();
    // Get instance field reference: private System.UInt32 m_PingTimeout
    [[deprecated("Use field access instead!")]] uint& dyn_m_PingTimeout();
    // Get instance field reference: private System.UInt32 m_ReducedPingTimeout
    [[deprecated("Use field access instead!")]] uint& dyn_m_ReducedPingTimeout();
    // Get instance field reference: private System.UInt32 m_AllCostTimeout
    [[deprecated("Use field access instead!")]] uint& dyn_m_AllCostTimeout();
    // Get instance field reference: private System.Byte m_NetworkDropThreshold
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_NetworkDropThreshold();
    // Get instance field reference: private System.Byte m_OverflowDropThreshold
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_OverflowDropThreshold();
    // Get instance field reference: private System.Byte m_MaxConnectionAttempt
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_MaxConnectionAttempt();
    // Get instance field reference: private System.UInt32 m_AckDelay
    [[deprecated("Use field access instead!")]] uint& dyn_m_AckDelay();
    // Get instance field reference: private System.UInt32 m_SendDelay
    [[deprecated("Use field access instead!")]] uint& dyn_m_SendDelay();
    // Get instance field reference: private System.UInt16 m_MaxCombinedReliableMessageSize
    [[deprecated("Use field access instead!")]] uint16_t& dyn_m_MaxCombinedReliableMessageSize();
    // Get instance field reference: private System.UInt16 m_MaxCombinedReliableMessageCount
    [[deprecated("Use field access instead!")]] uint16_t& dyn_m_MaxCombinedReliableMessageCount();
    // Get instance field reference: private System.UInt16 m_MaxSentMessageQueueSize
    [[deprecated("Use field access instead!")]] uint16_t& dyn_m_MaxSentMessageQueueSize();
    // Get instance field reference: private UnityEngine.Networking.ConnectionAcksType m_AcksType
    [[deprecated("Use field access instead!")]] ::UnityEngine::Networking::ConnectionAcksType& dyn_m_AcksType();
    // Get instance field reference: private System.Boolean m_UsePlatformSpecificProtocols
    [[deprecated("Use field access instead!")]] bool& dyn_m_UsePlatformSpecificProtocols();
    // Get instance field reference: private System.UInt32 m_InitialBandwidth
    [[deprecated("Use field access instead!")]] uint& dyn_m_InitialBandwidth();
    // Get instance field reference: private System.Single m_BandwidthPeakFactor
    [[deprecated("Use field access instead!")]] float& dyn_m_BandwidthPeakFactor();
    // Get instance field reference: private System.UInt16 m_WebSocketReceiveBufferMaxSize
    [[deprecated("Use field access instead!")]] uint16_t& dyn_m_WebSocketReceiveBufferMaxSize();
    // Get instance field reference: private System.UInt32 m_UdpSocketReceiveBufferMaxSize
    [[deprecated("Use field access instead!")]] uint& dyn_m_UdpSocketReceiveBufferMaxSize();
    // Get instance field reference: private System.String m_SSLCertFilePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_SSLCertFilePath();
    // Get instance field reference: private System.String m_SSLPrivateKeyFilePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_SSLPrivateKeyFilePath();
    // Get instance field reference: private System.String m_SSLCAFilePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_SSLCAFilePath();
    // Get instance field reference: System.Collections.Generic.List`1<UnityEngine.Networking.ChannelQOS> m_Channels
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Networking::ChannelQOS*>*& dyn_m_Channels();
    // Get instance field reference: System.Collections.Generic.List`1<System.Collections.Generic.List`1<System.Byte>> m_SharedOrderChannels
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<uint8_t>*>*& dyn_m_SharedOrderChannels();
    // public System.Void .ctor()
    // Offset: 0x2889320
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConnectionConfig* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Networking::ConnectionConfig::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConnectionConfig*, creationType>()));
    }
    // public System.Void .ctor(UnityEngine.Networking.ConnectionConfig config)
    // Offset: 0x2889434
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConnectionConfig* New_ctor(::UnityEngine::Networking::ConnectionConfig* config) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Networking::ConnectionConfig::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConnectionConfig*, creationType>(config)));
    }
    // static public System.Void Validate(UnityEngine.Networking.ConnectionConfig config)
    // Offset: 0x288982C
    static void Validate(::UnityEngine::Networking::ConnectionConfig* config);
    // public System.UInt16 get_PacketSize()
    // Offset: 0x2889998
    uint16_t get_PacketSize();
    // public System.UInt16 get_FragmentSize()
    // Offset: 0x28899A0
    uint16_t get_FragmentSize();
    // public System.UInt32 get_ResendTimeout()
    // Offset: 0x28899A8
    uint get_ResendTimeout();
    // public System.UInt32 get_DisconnectTimeout()
    // Offset: 0x28899B0
    uint get_DisconnectTimeout();
    // public System.UInt32 get_ConnectTimeout()
    // Offset: 0x28899B8
    uint get_ConnectTimeout();
    // public System.UInt32 get_MinUpdateTimeout()
    // Offset: 0x28899C0
    uint get_MinUpdateTimeout();
    // public System.UInt32 get_PingTimeout()
    // Offset: 0x28899C8
    uint get_PingTimeout();
    // public System.UInt32 get_ReducedPingTimeout()
    // Offset: 0x28899D0
    uint get_ReducedPingTimeout();
    // public System.UInt32 get_AllCostTimeout()
    // Offset: 0x28899D8
    uint get_AllCostTimeout();
    // public System.Byte get_NetworkDropThreshold()
    // Offset: 0x28899E0
    uint8_t get_NetworkDropThreshold();
    // public System.Byte get_OverflowDropThreshold()
    // Offset: 0x28899E8
    uint8_t get_OverflowDropThreshold();
    // public System.Byte get_MaxConnectionAttempt()
    // Offset: 0x28899F0
    uint8_t get_MaxConnectionAttempt();
    // public System.UInt32 get_AckDelay()
    // Offset: 0x28899F8
    uint get_AckDelay();
    // public System.UInt32 get_SendDelay()
    // Offset: 0x2889A00
    uint get_SendDelay();
    // public System.UInt16 get_MaxCombinedReliableMessageSize()
    // Offset: 0x2889824
    uint16_t get_MaxCombinedReliableMessageSize();
    // public System.UInt16 get_MaxCombinedReliableMessageCount()
    // Offset: 0x2889A08
    uint16_t get_MaxCombinedReliableMessageCount();
    // public System.UInt16 get_MaxSentMessageQueueSize()
    // Offset: 0x2889A10
    uint16_t get_MaxSentMessageQueueSize();
    // public UnityEngine.Networking.ConnectionAcksType get_AcksType()
    // Offset: 0x2889A18
    ::UnityEngine::Networking::ConnectionAcksType get_AcksType();
    // public System.Boolean get_UsePlatformSpecificProtocols()
    // Offset: 0x2889A20
    bool get_UsePlatformSpecificProtocols();
    // public System.UInt32 get_InitialBandwidth()
    // Offset: 0x2889A28
    uint get_InitialBandwidth();
    // public System.Single get_BandwidthPeakFactor()
    // Offset: 0x2889A30
    float get_BandwidthPeakFactor();
    // public System.UInt16 get_WebSocketReceiveBufferMaxSize()
    // Offset: 0x2889A38
    uint16_t get_WebSocketReceiveBufferMaxSize();
    // public System.UInt32 get_UdpSocketReceiveBufferMaxSize()
    // Offset: 0x2889A40
    uint get_UdpSocketReceiveBufferMaxSize();
    // public System.String get_SSLCertFilePath()
    // Offset: 0x2889A48
    ::StringW get_SSLCertFilePath();
    // public System.String get_SSLPrivateKeyFilePath()
    // Offset: 0x2889A50
    ::StringW get_SSLPrivateKeyFilePath();
    // public System.String get_SSLCAFilePath()
    // Offset: 0x2889A58
    ::StringW get_SSLCAFilePath();
    // public System.Int32 get_ChannelCount()
    // Offset: 0x2889A60
    int get_ChannelCount();
    // public System.Int32 get_SharedOrderChannelCount()
    // Offset: 0x2889AC0
    int get_SharedOrderChannelCount();
    // public System.Byte AddChannel(UnityEngine.Networking.QosType value)
    // Offset: 0x2889B20
    uint8_t AddChannel(::UnityEngine::Networking::QosType value);
    // public UnityEngine.Networking.QosType GetChannel(System.Byte idx)
    // Offset: 0x2889D4C
    ::UnityEngine::Networking::QosType GetChannel(uint8_t idx);
    // public System.Collections.Generic.IList`1<System.Byte> GetSharedOrderChannels(System.Byte idx)
    // Offset: 0x2889E44
    ::System::Collections::Generic::IList_1<uint8_t>* GetSharedOrderChannels(uint8_t idx);
  }; // UnityEngine.Networking.ConnectionConfig
  #pragma pack(pop)
  static check_size<sizeof(ConnectionConfig), 128 + sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<uint8_t>*>*)> __UnityEngine_Networking_ConnectionConfigSizeCheck;
  static_assert(sizeof(ConnectionConfig) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Networking::ConnectionConfig*)>(&UnityEngine::Networking::ConnectionConfig::Validate)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "ConnectionConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_PacketSize
// Il2CppName: get_PacketSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_PacketSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_PacketSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_FragmentSize
// Il2CppName: get_FragmentSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_FragmentSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_FragmentSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_ResendTimeout
// Il2CppName: get_ResendTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_ResendTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_ResendTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_DisconnectTimeout
// Il2CppName: get_DisconnectTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_DisconnectTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_DisconnectTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_ConnectTimeout
// Il2CppName: get_ConnectTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_ConnectTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_ConnectTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_MinUpdateTimeout
// Il2CppName: get_MinUpdateTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_MinUpdateTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_MinUpdateTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_PingTimeout
// Il2CppName: get_PingTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_PingTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_PingTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_ReducedPingTimeout
// Il2CppName: get_ReducedPingTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_ReducedPingTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_ReducedPingTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_AllCostTimeout
// Il2CppName: get_AllCostTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_AllCostTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_AllCostTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_NetworkDropThreshold
// Il2CppName: get_NetworkDropThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_NetworkDropThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_NetworkDropThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_OverflowDropThreshold
// Il2CppName: get_OverflowDropThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_OverflowDropThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_OverflowDropThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_MaxConnectionAttempt
// Il2CppName: get_MaxConnectionAttempt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_MaxConnectionAttempt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_MaxConnectionAttempt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_AckDelay
// Il2CppName: get_AckDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_AckDelay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_AckDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_SendDelay
// Il2CppName: get_SendDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_SendDelay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_SendDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_MaxCombinedReliableMessageSize
// Il2CppName: get_MaxCombinedReliableMessageSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_MaxCombinedReliableMessageSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_MaxCombinedReliableMessageSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_MaxCombinedReliableMessageCount
// Il2CppName: get_MaxCombinedReliableMessageCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_MaxCombinedReliableMessageCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_MaxCombinedReliableMessageCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_MaxSentMessageQueueSize
// Il2CppName: get_MaxSentMessageQueueSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_MaxSentMessageQueueSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_MaxSentMessageQueueSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_AcksType
// Il2CppName: get_AcksType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Networking::ConnectionAcksType (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_AcksType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_AcksType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_UsePlatformSpecificProtocols
// Il2CppName: get_UsePlatformSpecificProtocols
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_UsePlatformSpecificProtocols)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_UsePlatformSpecificProtocols", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_InitialBandwidth
// Il2CppName: get_InitialBandwidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_InitialBandwidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_InitialBandwidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_BandwidthPeakFactor
// Il2CppName: get_BandwidthPeakFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_BandwidthPeakFactor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_BandwidthPeakFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_WebSocketReceiveBufferMaxSize
// Il2CppName: get_WebSocketReceiveBufferMaxSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_WebSocketReceiveBufferMaxSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_WebSocketReceiveBufferMaxSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_UdpSocketReceiveBufferMaxSize
// Il2CppName: get_UdpSocketReceiveBufferMaxSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_UdpSocketReceiveBufferMaxSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_UdpSocketReceiveBufferMaxSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_SSLCertFilePath
// Il2CppName: get_SSLCertFilePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_SSLCertFilePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_SSLCertFilePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_SSLPrivateKeyFilePath
// Il2CppName: get_SSLPrivateKeyFilePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_SSLPrivateKeyFilePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_SSLPrivateKeyFilePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_SSLCAFilePath
// Il2CppName: get_SSLCAFilePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_SSLCAFilePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_SSLCAFilePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_ChannelCount
// Il2CppName: get_ChannelCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_ChannelCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_ChannelCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::get_SharedOrderChannelCount
// Il2CppName: get_SharedOrderChannelCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Networking::ConnectionConfig::*)()>(&UnityEngine::Networking::ConnectionConfig::get_SharedOrderChannelCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "get_SharedOrderChannelCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::AddChannel
// Il2CppName: AddChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (UnityEngine::Networking::ConnectionConfig::*)(::UnityEngine::Networking::QosType)>(&UnityEngine::Networking::ConnectionConfig::AddChannel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "QosType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "AddChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::GetChannel
// Il2CppName: GetChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Networking::QosType (UnityEngine::Networking::ConnectionConfig::*)(uint8_t)>(&UnityEngine::Networking::ConnectionConfig::GetChannel)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "GetChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: UnityEngine::Networking::ConnectionConfig::GetSharedOrderChannels
// Il2CppName: GetSharedOrderChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IList_1<uint8_t>* (UnityEngine::Networking::ConnectionConfig::*)(uint8_t)>(&UnityEngine::Networking::ConnectionConfig::GetSharedOrderChannels)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Networking::ConnectionConfig*), "GetSharedOrderChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
