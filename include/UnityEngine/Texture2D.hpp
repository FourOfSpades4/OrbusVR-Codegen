// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.TextureFormat
#include "UnityEngine/TextureFormat.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: GraphicsFormat
  struct GraphicsFormat;
  // Forward declaring type: TextureCreationFlags
  struct TextureCreationFlags;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Texture2D);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Texture2D*, "UnityEngine", "Texture2D");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Texture2D
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: A70D50
  // [UsedByNativeCodeAttribute] Offset: A70D50
  // [NativeHeaderAttribute] Offset: A70D50
  class Texture2D : public ::UnityEngine::Texture {
    public:
    // System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat textureFormat, System.Boolean mipChain, System.Boolean linear, System.IntPtr nativeTex)
    // Offset: 0x1F9D5D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, ::UnityEngine::TextureFormat textureFormat, bool mipChain, bool linear, ::System::IntPtr nativeTex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, textureFormat, mipChain, linear, nativeTex)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat textureFormat, System.Boolean mipChain, System.Boolean linear)
    // Offset: 0x1F9D76C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, ::UnityEngine::TextureFormat textureFormat, bool mipChain, bool linear) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, textureFormat, mipChain, linear)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat textureFormat, System.Boolean mipChain)
    // Offset: 0x1F9D7F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, ::UnityEngine::TextureFormat textureFormat, bool mipChain) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, textureFormat, mipChain)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height)
    // Offset: 0x1F9D870
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height)));
    }
    // public System.Int32 get_mipmapCount()
    // Offset: 0x1F9D8DC
    int get_mipmapCount();
    // public UnityEngine.TextureFormat get_format()
    // Offset: 0x1F8BFCC
    ::UnityEngine::TextureFormat get_format();
    // static public UnityEngine.Texture2D get_whiteTexture()
    // Offset: 0x1F9D948
    static ::UnityEngine::Texture2D* get_whiteTexture();
    // static public UnityEngine.Texture2D get_blackTexture()
    // Offset: 0x1F9D9A0
    static ::UnityEngine::Texture2D* get_blackTexture();
    // static private System.Boolean Internal_CreateImpl(UnityEngine.Texture2D mono, System.Int32 w, System.Int32 h, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, System.IntPtr nativeTex)
    // Offset: 0x1F9D9F8
    static bool Internal_CreateImpl(::UnityEngine::Texture2D* mono, int w, int h, ::UnityEngine::Experimental::Rendering::GraphicsFormat format, ::UnityEngine::Experimental::Rendering::TextureCreationFlags flags, ::System::IntPtr nativeTex);
    // static private System.Void Internal_Create(UnityEngine.Texture2D mono, System.Int32 w, System.Int32 h, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, System.IntPtr nativeTex)
    // Offset: 0x1F9D69C
    static void Internal_Create(::UnityEngine::Texture2D* mono, int w, int h, ::UnityEngine::Experimental::Rendering::GraphicsFormat format, ::UnityEngine::Experimental::Rendering::TextureCreationFlags flags, ::System::IntPtr nativeTex);
    // private System.Void ApplyImpl(System.Boolean updateMipmaps, System.Boolean makeNoLongerReadable)
    // Offset: 0x1F9DB08
    void ApplyImpl(bool updateMipmaps, bool makeNoLongerReadable);
    // private System.Void SetPixelImpl(System.Int32 image, System.Int32 x, System.Int32 y, UnityEngine.Color color)
    // Offset: 0x1F9DB8C
    void SetPixelImpl(int image, int x, int y, ::UnityEngine::Color color);
    // private UnityEngine.Color GetPixelImpl(System.Int32 image, System.Int32 x, System.Int32 y)
    // Offset: 0x1F9DC50
    ::UnityEngine::Color GetPixelImpl(int image, int x, int y);
    // private UnityEngine.Color GetPixelBilinearImpl(System.Int32 image, System.Single x, System.Single y)
    // Offset: 0x1F9DD18
    ::UnityEngine::Color GetPixelBilinearImpl(int image, float x, float y);
    // private System.Boolean ResizeWithFormatImpl(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat format, System.Boolean hasMipMap)
    // Offset: 0x1F9DDE0
    bool ResizeWithFormatImpl(int width, int height, ::UnityEngine::TextureFormat format, bool hasMipMap);
    // private System.Void ReadPixelsImpl(UnityEngine.Rect source, System.Int32 destX, System.Int32 destY, System.Boolean recalculateMipMaps)
    // Offset: 0x1F9DE7C
    void ReadPixelsImpl(::UnityEngine::Rect source, int destX, int destY, bool recalculateMipMaps);
    // private System.Void SetPixelsImpl(System.Int32 x, System.Int32 y, System.Int32 w, System.Int32 h, UnityEngine.Color[] pixel, System.Int32 miplevel, System.Int32 frame)
    // Offset: 0x1F9DF54
    void SetPixelsImpl(int x, int y, int w, int h, ::ArrayW<::UnityEngine::Color> pixel, int miplevel, int frame);
    // private System.Boolean LoadRawTextureDataImpl(System.IntPtr data, System.Int32 size)
    // Offset: 0x1F9E010
    bool LoadRawTextureDataImpl(::System::IntPtr data, int size);
    // public System.Void UpdateExternalTexture(System.IntPtr nativeTex)
    // Offset: 0x1F9E094
    void UpdateExternalTexture(::System::IntPtr nativeTex);
    // private System.Void SetAllPixels32(UnityEngine.Color32[] colors, System.Int32 miplevel)
    // Offset: 0x1F9E108
    void SetAllPixels32(::ArrayW<::UnityEngine::Color32> colors, int miplevel);
    // public System.Byte[] GetRawTextureData()
    // Offset: 0x1F8BD64
    ::ArrayW<uint8_t> GetRawTextureData();
    // public UnityEngine.Color[] GetPixels(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight, System.Int32 miplevel)
    // Offset: 0x1F9E18C
    ::ArrayW<::UnityEngine::Color> GetPixels(int x, int y, int blockWidth, int blockHeight, int miplevel);
    // public UnityEngine.Color[] GetPixels(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight)
    // Offset: 0x1F9E230
    ::ArrayW<::UnityEngine::Color> GetPixels(int x, int y, int blockWidth, int blockHeight);
    // public UnityEngine.Color32[] GetPixels32(System.Int32 miplevel)
    // Offset: 0x1F9E238
    ::ArrayW<::UnityEngine::Color32> GetPixels32(int miplevel);
    // public UnityEngine.Color32[] GetPixels32()
    // Offset: 0x1F9E2AC
    ::ArrayW<::UnityEngine::Color32> GetPixels32();
    // public UnityEngine.Rect[] PackTextures(UnityEngine.Texture2D[] textures, System.Int32 padding, System.Int32 maximumAtlasSize, System.Boolean makeNoLongerReadable)
    // Offset: 0x1F9E2B4
    ::ArrayW<::UnityEngine::Rect> PackTextures(::ArrayW<::UnityEngine::Texture2D*> textures, int padding, int maximumAtlasSize, bool makeNoLongerReadable);
    // static public UnityEngine.Texture2D CreateExternalTexture(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat format, System.Boolean mipChain, System.Boolean linear, System.IntPtr nativeTex)
    // Offset: 0x1F9E350
    static ::UnityEngine::Texture2D* CreateExternalTexture(int width, int height, ::UnityEngine::TextureFormat format, bool mipChain, bool linear, ::System::IntPtr nativeTex);
    // public System.Void SetPixel(System.Int32 x, System.Int32 y, UnityEngine.Color color)
    // Offset: 0x1F9E448
    void SetPixel(int x, int y, ::UnityEngine::Color color);
    // public System.Void SetPixels(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight, UnityEngine.Color[] colors, System.Int32 miplevel)
    // Offset: 0x1F9E514
    void SetPixels(int x, int y, int blockWidth, int blockHeight, ::ArrayW<::UnityEngine::Color> colors, int miplevel);
    // public System.Void SetPixels(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight, UnityEngine.Color[] colors)
    // Offset: 0x1F9E5E4
    void SetPixels(int x, int y, int blockWidth, int blockHeight, ::ArrayW<::UnityEngine::Color> colors);
    // public System.Void SetPixels(UnityEngine.Color[] colors, System.Int32 miplevel)
    // Offset: 0x1F9E5EC
    void SetPixels(::ArrayW<::UnityEngine::Color> colors, int miplevel);
    // public System.Void SetPixels(UnityEngine.Color[] colors)
    // Offset: 0x1F9E674
    void SetPixels(::ArrayW<::UnityEngine::Color> colors);
    // public UnityEngine.Color GetPixel(System.Int32 x, System.Int32 y)
    // Offset: 0x1F9E6DC
    ::UnityEngine::Color GetPixel(int x, int y);
    // public UnityEngine.Color GetPixelBilinear(System.Single x, System.Single y)
    // Offset: 0x1F9E78C
    ::UnityEngine::Color GetPixelBilinear(float x, float y);
    // public System.Void LoadRawTextureData(System.IntPtr data, System.Int32 size)
    // Offset: 0x1F9E83C
    void LoadRawTextureData(::System::IntPtr data, int size);
    // public System.Void Apply(System.Boolean updateMipmaps, System.Boolean makeNoLongerReadable)
    // Offset: 0x1F9E968
    void Apply(bool updateMipmaps, bool makeNoLongerReadable);
    // public System.Void Apply(System.Boolean updateMipmaps)
    // Offset: 0x1F9E9F8
    void Apply(bool updateMipmaps);
    // public System.Void Apply()
    // Offset: 0x1F9EA04
    void Apply();
    // public System.Boolean Resize(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat format, System.Boolean hasMipMap)
    // Offset: 0x1F9EA10
    bool Resize(int width, int height, ::UnityEngine::TextureFormat format, bool hasMipMap);
    // public System.Void ReadPixels(UnityEngine.Rect source, System.Int32 destX, System.Int32 destY, System.Boolean recalculateMipMaps)
    // Offset: 0x1F9EAB8
    void ReadPixels(::UnityEngine::Rect source, int destX, int destY, bool recalculateMipMaps);
    // public System.Void ReadPixels(UnityEngine.Rect source, System.Int32 destX, System.Int32 destY)
    // Offset: 0x1F9EB90
    void ReadPixels(::UnityEngine::Rect source, int destX, int destY);
    // public System.Void SetPixels32(UnityEngine.Color32[] colors, System.Int32 miplevel)
    // Offset: 0x1F9EB98
    void SetPixels32(::ArrayW<::UnityEngine::Color32> colors, int miplevel);
    // public System.Void SetPixels32(UnityEngine.Color32[] colors)
    // Offset: 0x1F9EB9C
    void SetPixels32(::ArrayW<::UnityEngine::Color32> colors);
    // public UnityEngine.Color[] GetPixels(System.Int32 miplevel)
    // Offset: 0x1F9EBA4
    ::ArrayW<::UnityEngine::Color> GetPixels(int miplevel);
    // public UnityEngine.Color[] GetPixels()
    // Offset: 0x1F9EC1C
    ::ArrayW<::UnityEngine::Color> GetPixels();
    // private System.Void SetPixelImpl_Injected(System.Int32 image, System.Int32 x, System.Int32 y, ref UnityEngine.Color color)
    // Offset: 0x1F9DBB4
    void SetPixelImpl_Injected(int image, int x, int y, ByRef<::UnityEngine::Color> color);
    // private System.Void GetPixelImpl_Injected(System.Int32 image, System.Int32 x, System.Int32 y, out UnityEngine.Color ret)
    // Offset: 0x1F9DC7C
    void GetPixelImpl_Injected(int image, int x, int y, ByRef<::UnityEngine::Color> ret);
    // private System.Void GetPixelBilinearImpl_Injected(System.Int32 image, System.Single x, System.Single y, out UnityEngine.Color ret)
    // Offset: 0x1F9DD44
    void GetPixelBilinearImpl_Injected(int image, float x, float y, ByRef<::UnityEngine::Color> ret);
    // private System.Void ReadPixelsImpl_Injected(ref UnityEngine.Rect source, System.Int32 destX, System.Int32 destY, System.Boolean recalculateMipMaps)
    // Offset: 0x1F9DEB8
    void ReadPixelsImpl_Injected(ByRef<::UnityEngine::Rect> source, int destX, int destY, bool recalculateMipMaps);
    // public override System.Boolean get_isReadable()
    // Offset: 0x1F9DA9C
    // Implemented from: UnityEngine.Texture
    // Base method: System.Boolean Texture::get_isReadable()
    bool get_isReadable();
  }; // UnityEngine.Texture2D
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Texture2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Texture2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Texture2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Texture2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_mipmapCount
// Il2CppName: get_mipmapCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::get_mipmapCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_mipmapCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_format
// Il2CppName: get_format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TextureFormat (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::get_format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_whiteTexture
// Il2CppName: get_whiteTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)()>(&UnityEngine::Texture2D::get_whiteTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_whiteTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_blackTexture
// Il2CppName: get_blackTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)()>(&UnityEngine::Texture2D::get_blackTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_blackTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::Internal_CreateImpl
// Il2CppName: Internal_CreateImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Texture2D*, int, int, ::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::Experimental::Rendering::TextureCreationFlags, ::System::IntPtr)>(&UnityEngine::Texture2D::Internal_CreateImpl)> {
  static const MethodInfo* get() {
    static auto* mono = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* h = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "TextureCreationFlags")->byval_arg;
    static auto* nativeTex = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "Internal_CreateImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mono, w, h, format, flags, nativeTex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::Internal_Create
// Il2CppName: Internal_Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture2D*, int, int, ::UnityEngine::Experimental::Rendering::GraphicsFormat, ::UnityEngine::Experimental::Rendering::TextureCreationFlags, ::System::IntPtr)>(&UnityEngine::Texture2D::Internal_Create)> {
  static const MethodInfo* get() {
    static auto* mono = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* h = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "GraphicsFormat")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "TextureCreationFlags")->byval_arg;
    static auto* nativeTex = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "Internal_Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mono, w, h, format, flags, nativeTex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::ApplyImpl
// Il2CppName: ApplyImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(bool, bool)>(&UnityEngine::Texture2D::ApplyImpl)> {
  static const MethodInfo* get() {
    static auto* updateMipmaps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* makeNoLongerReadable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "ApplyImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateMipmaps, makeNoLongerReadable});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixelImpl
// Il2CppName: SetPixelImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, int, ::UnityEngine::Color)>(&UnityEngine::Texture2D::SetPixelImpl)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixelImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image, x, y, color});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixelImpl
// Il2CppName: GetPixelImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::Texture2D::*)(int, int, int)>(&UnityEngine::Texture2D::GetPixelImpl)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixelImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image, x, y});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixelBilinearImpl
// Il2CppName: GetPixelBilinearImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::Texture2D::*)(int, float, float)>(&UnityEngine::Texture2D::GetPixelBilinearImpl)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixelBilinearImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image, x, y});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::ResizeWithFormatImpl
// Il2CppName: ResizeWithFormatImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)(int, int, ::UnityEngine::TextureFormat, bool)>(&UnityEngine::Texture2D::ResizeWithFormatImpl)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureFormat")->byval_arg;
    static auto* hasMipMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "ResizeWithFormatImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, format, hasMipMap});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::ReadPixelsImpl
// Il2CppName: ReadPixelsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::UnityEngine::Rect, int, int, bool)>(&UnityEngine::Texture2D::ReadPixelsImpl)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* destX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* recalculateMipMaps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "ReadPixelsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destX, destY, recalculateMipMaps});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixelsImpl
// Il2CppName: SetPixelsImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, int, int, ::ArrayW<::UnityEngine::Color>, int, int)>(&UnityEngine::Texture2D::SetPixelsImpl)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* w = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* h = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pixel = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frame = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixelsImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, w, h, pixel, miplevel, frame});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::LoadRawTextureDataImpl
// Il2CppName: LoadRawTextureDataImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)(::System::IntPtr, int)>(&UnityEngine::Texture2D::LoadRawTextureDataImpl)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "LoadRawTextureDataImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, size});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::UpdateExternalTexture
// Il2CppName: UpdateExternalTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::System::IntPtr)>(&UnityEngine::Texture2D::UpdateExternalTexture)> {
  static const MethodInfo* get() {
    static auto* nativeTex = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "UpdateExternalTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nativeTex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetAllPixels32
// Il2CppName: SetAllPixels32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::ArrayW<::UnityEngine::Color32>, int)>(&UnityEngine::Texture2D::SetAllPixels32)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetAllPixels32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors, miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetRawTextureData
// Il2CppName: GetRawTextureData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::GetRawTextureData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetRawTextureData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixels
// Il2CppName: GetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color> (UnityEngine::Texture2D::*)(int, int, int, int, int)>(&UnityEngine::Texture2D::GetPixels)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, blockWidth, blockHeight, miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixels
// Il2CppName: GetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color> (UnityEngine::Texture2D::*)(int, int, int, int)>(&UnityEngine::Texture2D::GetPixels)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, blockWidth, blockHeight});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixels32
// Il2CppName: GetPixels32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color32> (UnityEngine::Texture2D::*)(int)>(&UnityEngine::Texture2D::GetPixels32)> {
  static const MethodInfo* get() {
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixels32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixels32
// Il2CppName: GetPixels32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color32> (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::GetPixels32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixels32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::PackTextures
// Il2CppName: PackTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Rect> (UnityEngine::Texture2D::*)(::ArrayW<::UnityEngine::Texture2D*>, int, int, bool)>(&UnityEngine::Texture2D::PackTextures)> {
  static const MethodInfo* get() {
    static auto* textures = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D"), 1)->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maximumAtlasSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* makeNoLongerReadable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "PackTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textures, padding, maximumAtlasSize, makeNoLongerReadable});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::CreateExternalTexture
// Il2CppName: CreateExternalTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)(int, int, ::UnityEngine::TextureFormat, bool, bool, ::System::IntPtr)>(&UnityEngine::Texture2D::CreateExternalTexture)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureFormat")->byval_arg;
    static auto* mipChain = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* linear = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* nativeTex = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "CreateExternalTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, format, mipChain, linear, nativeTex});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixel
// Il2CppName: SetPixel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, ::UnityEngine::Color)>(&UnityEngine::Texture2D::SetPixel)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, color});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixels
// Il2CppName: SetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, int, int, ::ArrayW<::UnityEngine::Color>, int)>(&UnityEngine::Texture2D::SetPixels)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, blockWidth, blockHeight, colors, miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixels
// Il2CppName: SetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, int, int, ::ArrayW<::UnityEngine::Color>)>(&UnityEngine::Texture2D::SetPixels)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blockHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, blockWidth, blockHeight, colors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixels
// Il2CppName: SetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::ArrayW<::UnityEngine::Color>, int)>(&UnityEngine::Texture2D::SetPixels)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors, miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixels
// Il2CppName: SetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::ArrayW<::UnityEngine::Color>)>(&UnityEngine::Texture2D::SetPixels)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixel
// Il2CppName: GetPixel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::Texture2D::*)(int, int)>(&UnityEngine::Texture2D::GetPixel)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixelBilinear
// Il2CppName: GetPixelBilinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (UnityEngine::Texture2D::*)(float, float)>(&UnityEngine::Texture2D::GetPixelBilinear)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixelBilinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::LoadRawTextureData
// Il2CppName: LoadRawTextureData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::System::IntPtr, int)>(&UnityEngine::Texture2D::LoadRawTextureData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "LoadRawTextureData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, size});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(bool, bool)>(&UnityEngine::Texture2D::Apply)> {
  static const MethodInfo* get() {
    static auto* updateMipmaps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* makeNoLongerReadable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateMipmaps, makeNoLongerReadable});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(bool)>(&UnityEngine::Texture2D::Apply)> {
  static const MethodInfo* get() {
    static auto* updateMipmaps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateMipmaps});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::Apply)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)(int, int, ::UnityEngine::TextureFormat, bool)>(&UnityEngine::Texture2D::Resize)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextureFormat")->byval_arg;
    static auto* hasMipMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, format, hasMipMap});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::ReadPixels
// Il2CppName: ReadPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::UnityEngine::Rect, int, int, bool)>(&UnityEngine::Texture2D::ReadPixels)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* destX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* recalculateMipMaps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "ReadPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destX, destY, recalculateMipMaps});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::ReadPixels
// Il2CppName: ReadPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::UnityEngine::Rect, int, int)>(&UnityEngine::Texture2D::ReadPixels)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* destX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "ReadPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destX, destY});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixels32
// Il2CppName: SetPixels32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::ArrayW<::UnityEngine::Color32>, int)>(&UnityEngine::Texture2D::SetPixels32)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixels32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors, miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixels32
// Il2CppName: SetPixels32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(::ArrayW<::UnityEngine::Color32>)>(&UnityEngine::Texture2D::SetPixels32)> {
  static const MethodInfo* get() {
    static auto* colors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixels32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colors});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixels
// Il2CppName: GetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color> (UnityEngine::Texture2D::*)(int)>(&UnityEngine::Texture2D::GetPixels)> {
  static const MethodInfo* get() {
    static auto* miplevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{miplevel});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixels
// Il2CppName: GetPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color> (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::GetPixels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::SetPixelImpl_Injected
// Il2CppName: SetPixelImpl_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, int, ByRef<::UnityEngine::Color>)>(&UnityEngine::Texture2D::SetPixelImpl_Injected)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "SetPixelImpl_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image, x, y, color});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixelImpl_Injected
// Il2CppName: GetPixelImpl_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, int, int, ByRef<::UnityEngine::Color>)>(&UnityEngine::Texture2D::GetPixelImpl_Injected)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixelImpl_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image, x, y, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::GetPixelBilinearImpl_Injected
// Il2CppName: GetPixelBilinearImpl_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(int, float, float, ByRef<::UnityEngine::Color>)>(&UnityEngine::Texture2D::GetPixelBilinearImpl_Injected)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "GetPixelBilinearImpl_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image, x, y, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::ReadPixelsImpl_Injected
// Il2CppName: ReadPixelsImpl_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Texture2D::*)(ByRef<::UnityEngine::Rect>, int, int, bool)>(&UnityEngine::Texture2D::ReadPixelsImpl_Injected)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* destX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* recalculateMipMaps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "ReadPixelsImpl_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destX, destY, recalculateMipMaps});
  }
};
// Writing MetadataGetter for method: UnityEngine::Texture2D::get_isReadable
// Il2CppName: get_isReadable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Texture2D::*)()>(&UnityEngine::Texture2D::get_isReadable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Texture2D*), "get_isReadable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
