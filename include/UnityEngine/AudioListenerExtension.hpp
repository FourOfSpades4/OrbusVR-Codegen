// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioListener
  class AudioListener;
  // Forward declaring type: PropertyName
  struct PropertyName;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioListenerExtension
  class AudioListenerExtension;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::AudioListenerExtension);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::AudioListenerExtension*, "UnityEngine", "AudioListenerExtension");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.AudioListenerExtension
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioListenerExtension : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // private UnityEngine.AudioListener m_audioListener
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AudioListener* m_audioListener;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioListener*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.AudioListener m_audioListener
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioListener*& dyn_m_audioListener();
    // public System.Void .ctor()
    // Offset: 0x284BC00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioListenerExtension* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AudioListenerExtension::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioListenerExtension*, creationType>()));
    }
    // public UnityEngine.AudioListener get_audioListener()
    // Offset: 0x284AD4C
    ::UnityEngine::AudioListener* get_audioListener();
    // public System.Void set_audioListener(UnityEngine.AudioListener value)
    // Offset: 0x284AB38
    void set_audioListener(::UnityEngine::AudioListener* value);
    // public System.Single ReadExtensionProperty(UnityEngine.PropertyName propertyName)
    // Offset: 0x284BC08
    float ReadExtensionProperty(::UnityEngine::PropertyName propertyName);
    // public System.Void WriteExtensionProperty(UnityEngine.PropertyName propertyName, System.Single propertyValue)
    // Offset: 0x284BC10
    void WriteExtensionProperty(::UnityEngine::PropertyName propertyName, float propertyValue);
    // public System.Void ExtensionUpdate()
    // Offset: 0x284BC14
    void ExtensionUpdate();
  }; // UnityEngine.AudioListenerExtension
  #pragma pack(pop)
  static check_size<sizeof(AudioListenerExtension), 24 + sizeof(::UnityEngine::AudioListener*)> __UnityEngine_AudioListenerExtensionSizeCheck;
  static_assert(sizeof(AudioListenerExtension) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AudioListenerExtension::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AudioListenerExtension::get_audioListener
// Il2CppName: get_audioListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioListener* (UnityEngine::AudioListenerExtension::*)()>(&UnityEngine::AudioListenerExtension::get_audioListener)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioListenerExtension*), "get_audioListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioListenerExtension::set_audioListener
// Il2CppName: set_audioListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioListenerExtension::*)(::UnityEngine::AudioListener*)>(&UnityEngine::AudioListenerExtension::set_audioListener)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioListener")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioListenerExtension*), "set_audioListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioListenerExtension::ReadExtensionProperty
// Il2CppName: ReadExtensionProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::AudioListenerExtension::*)(::UnityEngine::PropertyName)>(&UnityEngine::AudioListenerExtension::ReadExtensionProperty)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("UnityEngine", "PropertyName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioListenerExtension*), "ReadExtensionProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioListenerExtension::WriteExtensionProperty
// Il2CppName: WriteExtensionProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioListenerExtension::*)(::UnityEngine::PropertyName, float)>(&UnityEngine::AudioListenerExtension::WriteExtensionProperty)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("UnityEngine", "PropertyName")->byval_arg;
    static auto* propertyValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioListenerExtension*), "WriteExtensionProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName, propertyValue});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioListenerExtension::ExtensionUpdate
// Il2CppName: ExtensionUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioListenerExtension::*)()>(&UnityEngine::AudioListenerExtension::ExtensionUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioListenerExtension*), "ExtensionUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
