// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: PropertyName
  struct PropertyName;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSourceExtension
  class AudioSourceExtension;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::AudioSourceExtension);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::AudioSourceExtension*, "UnityEngine", "AudioSourceExtension");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.AudioSourceExtension
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioSourceExtension : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // private UnityEngine.AudioSource m_audioSource
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AudioSource* m_audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // System.Int32 m_ExtensionManagerUpdateIndex
    // Size: 0x4
    // Offset: 0x20
    int m_ExtensionManagerUpdateIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.AudioSource m_audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_m_audioSource();
    // Get instance field reference: System.Int32 m_ExtensionManagerUpdateIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_ExtensionManagerUpdateIndex();
    // public System.Void .ctor()
    // Offset: 0x284DCD8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioSourceExtension* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AudioSourceExtension::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioSourceExtension*, creationType>()));
    }
    // public UnityEngine.AudioSource get_audioSource()
    // Offset: 0x284A5E4
    ::UnityEngine::AudioSource* get_audioSource();
    // public System.Void set_audioSource(UnityEngine.AudioSource value)
    // Offset: 0x284A01C
    void set_audioSource(::UnityEngine::AudioSource* value);
    // public System.Single ReadExtensionProperty(UnityEngine.PropertyName propertyName)
    // Offset: 0x284DCE8
    float ReadExtensionProperty(::UnityEngine::PropertyName propertyName);
    // public System.Void WriteExtensionProperty(UnityEngine.PropertyName propertyName, System.Single propertyValue)
    // Offset: 0x284DCF0
    void WriteExtensionProperty(::UnityEngine::PropertyName propertyName, float propertyValue);
    // public System.Void Play()
    // Offset: 0x284DCF4
    void Play();
    // public System.Void Stop()
    // Offset: 0x284DCF8
    void Stop();
    // public System.Void ExtensionUpdate()
    // Offset: 0x284DCFC
    void ExtensionUpdate();
    // public System.Void OnDestroy()
    // Offset: 0x284DD00
    void OnDestroy();
  }; // UnityEngine.AudioSourceExtension
  #pragma pack(pop)
  static check_size<sizeof(AudioSourceExtension), 32 + sizeof(int)> __UnityEngine_AudioSourceExtensionSizeCheck;
  static_assert(sizeof(AudioSourceExtension) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AudioSourceExtension::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::AudioSourceExtension::get_audioSource
// Il2CppName: get_audioSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioSource* (UnityEngine::AudioSourceExtension::*)()>(&UnityEngine::AudioSourceExtension::get_audioSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSourceExtension*), "get_audioSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSourceExtension::set_audioSource
// Il2CppName: set_audioSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSourceExtension::*)(::UnityEngine::AudioSource*)>(&UnityEngine::AudioSourceExtension::set_audioSource)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSourceExtension*), "set_audioSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSourceExtension::ReadExtensionProperty
// Il2CppName: ReadExtensionProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::AudioSourceExtension::*)(::UnityEngine::PropertyName)>(&UnityEngine::AudioSourceExtension::ReadExtensionProperty)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("UnityEngine", "PropertyName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSourceExtension*), "ReadExtensionProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSourceExtension::WriteExtensionProperty
// Il2CppName: WriteExtensionProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSourceExtension::*)(::UnityEngine::PropertyName, float)>(&UnityEngine::AudioSourceExtension::WriteExtensionProperty)> {
  static const MethodInfo* get() {
    static auto* propertyName = &::il2cpp_utils::GetClassFromName("UnityEngine", "PropertyName")->byval_arg;
    static auto* propertyValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSourceExtension*), "WriteExtensionProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyName, propertyValue});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSourceExtension::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSourceExtension::*)()>(&UnityEngine::AudioSourceExtension::Play)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSourceExtension*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSourceExtension::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSourceExtension::*)()>(&UnityEngine::AudioSourceExtension::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSourceExtension*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSourceExtension::ExtensionUpdate
// Il2CppName: ExtensionUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSourceExtension::*)()>(&UnityEngine::AudioSourceExtension::ExtensionUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSourceExtension*), "ExtensionUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSourceExtension::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSourceExtension::*)()>(&UnityEngine::AudioSourceExtension::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSourceExtension*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
