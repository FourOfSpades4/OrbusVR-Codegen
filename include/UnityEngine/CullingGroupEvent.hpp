// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CullingGroupEvent
  struct CullingGroupEvent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::CullingGroupEvent, "UnityEngine", "CullingGroupEvent");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x6
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.CullingGroupEvent
  // [TokenAttribute] Offset: FFFFFFFF
  struct CullingGroupEvent/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 m_Index
    // Size: 0x4
    // Offset: 0x0
    int m_Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Byte m_PrevState
    // Size: 0x1
    // Offset: 0x4
    uint8_t m_PrevState;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_ThisState
    // Size: 0x1
    // Offset: 0x5
    uint8_t m_ThisState;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: CullingGroupEvent
    constexpr CullingGroupEvent(int m_Index_ = {}, uint8_t m_PrevState_ = {}, uint8_t m_ThisState_ = {}) noexcept : m_Index{m_Index_}, m_PrevState{m_PrevState_}, m_ThisState{m_ThisState_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int32 m_Index
    [[deprecated("Use field access instead!")]] int& dyn_m_Index();
    // Get instance field reference: private System.Byte m_PrevState
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_PrevState();
    // Get instance field reference: private System.Byte m_ThisState
    [[deprecated("Use field access instead!")]] uint8_t& dyn_m_ThisState();
    // public System.Int32 get_index()
    // Offset: 0xBB7628
    int get_index();
    // public System.Int32 get_currentDistance()
    // Offset: 0xBB7630
    int get_currentDistance();
  }; // UnityEngine.CullingGroupEvent
  #pragma pack(pop)
  static check_size<sizeof(CullingGroupEvent), 5 + sizeof(uint8_t)> __UnityEngine_CullingGroupEventSizeCheck;
  static_assert(sizeof(CullingGroupEvent) == 0x6);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::CullingGroupEvent::get_index
// Il2CppName: get_index
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::CullingGroupEvent::*)()>(&UnityEngine::CullingGroupEvent::get_index)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::CullingGroupEvent), "get_index", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::CullingGroupEvent::get_currentDistance
// Il2CppName: get_currentDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::CullingGroupEvent::*)()>(&UnityEngine::CullingGroupEvent::get_currentDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::CullingGroupEvent), "get_currentDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
