// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioExtensionDefinition
  class AudioExtensionDefinition;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::AudioExtensionDefinition);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::AudioExtensionDefinition*, "UnityEngine", "AudioExtensionDefinition");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.AudioExtensionDefinition
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioExtensionDefinition : public ::Il2CppObject {
    public:
    public:
    // private System.String assemblyName
    // Size: 0x8
    // Offset: 0x10
    ::StringW assemblyName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String extensionNamespace
    // Size: 0x8
    // Offset: 0x18
    ::StringW extensionNamespace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String extensionTypeName
    // Size: 0x8
    // Offset: 0x20
    ::StringW extensionTypeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Type extensionType
    // Size: 0x8
    // Offset: 0x28
    ::System::Type* extensionType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Get instance field reference: private System.String assemblyName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_assemblyName();
    // Get instance field reference: private System.String extensionNamespace
    [[deprecated("Use field access instead!")]] ::StringW& dyn_extensionNamespace();
    // Get instance field reference: private System.String extensionTypeName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_extensionTypeName();
    // Get instance field reference: private System.Type extensionType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_extensionType();
    // public System.Type GetExtensionType()
    // Offset: 0x28498C4
    ::System::Type* GetExtensionType();
  }; // UnityEngine.AudioExtensionDefinition
  #pragma pack(pop)
  static check_size<sizeof(AudioExtensionDefinition), 40 + sizeof(::System::Type*)> __UnityEngine_AudioExtensionDefinitionSizeCheck;
  static_assert(sizeof(AudioExtensionDefinition) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AudioExtensionDefinition::GetExtensionType
// Il2CppName: GetExtensionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (UnityEngine::AudioExtensionDefinition::*)()>(&UnityEngine::AudioExtensionDefinition::GetExtensionType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioExtensionDefinition*), "GetExtensionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
