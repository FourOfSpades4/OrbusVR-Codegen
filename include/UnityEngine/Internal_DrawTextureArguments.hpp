// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Internal_DrawTextureArguments
  struct Internal_DrawTextureArguments;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Internal_DrawTextureArguments, "UnityEngine", "Internal_DrawTextureArguments");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x78
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Internal_DrawTextureArguments
  // [TokenAttribute] Offset: FFFFFFFF
  // [VisibleToOtherModulesAttribute] Offset: A6EBB4
  struct Internal_DrawTextureArguments/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Rect screenRect
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Rect screenRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // public UnityEngine.Rect sourceRect
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Rect sourceRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // public System.Int32 leftBorder
    // Size: 0x4
    // Offset: 0x20
    int leftBorder;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 rightBorder
    // Size: 0x4
    // Offset: 0x24
    int rightBorder;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 topBorder
    // Size: 0x4
    // Offset: 0x28
    int topBorder;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 bottomBorder
    // Size: 0x4
    // Offset: 0x2C
    int bottomBorder;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Color color
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Vector4 borderWidths
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Vector4 borderWidths;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public UnityEngine.Vector4 cornerRadiuses
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Vector4 cornerRadiuses;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public System.Int32 pass
    // Size: 0x4
    // Offset: 0x60
    int pass;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: pass and: texture
    char __padding9[0x4] = {};
    // public UnityEngine.Texture texture
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Texture* texture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public UnityEngine.Material mat
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Material* mat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    public:
    // Creating value type constructor for type: Internal_DrawTextureArguments
    constexpr Internal_DrawTextureArguments(::UnityEngine::Rect screenRect_ = {}, ::UnityEngine::Rect sourceRect_ = {}, int leftBorder_ = {}, int rightBorder_ = {}, int topBorder_ = {}, int bottomBorder_ = {}, ::UnityEngine::Color color_ = {}, ::UnityEngine::Vector4 borderWidths_ = {}, ::UnityEngine::Vector4 cornerRadiuses_ = {}, int pass_ = {}, ::UnityEngine::Texture* texture_ = {}, ::UnityEngine::Material* mat_ = {}) noexcept : screenRect{screenRect_}, sourceRect{sourceRect_}, leftBorder{leftBorder_}, rightBorder{rightBorder_}, topBorder{topBorder_}, bottomBorder{bottomBorder_}, color{color_}, borderWidths{borderWidths_}, cornerRadiuses{cornerRadiuses_}, pass{pass_}, texture{texture_}, mat{mat_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Rect screenRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_screenRect();
    // Get instance field reference: public UnityEngine.Rect sourceRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_sourceRect();
    // Get instance field reference: public System.Int32 leftBorder
    [[deprecated("Use field access instead!")]] int& dyn_leftBorder();
    // Get instance field reference: public System.Int32 rightBorder
    [[deprecated("Use field access instead!")]] int& dyn_rightBorder();
    // Get instance field reference: public System.Int32 topBorder
    [[deprecated("Use field access instead!")]] int& dyn_topBorder();
    // Get instance field reference: public System.Int32 bottomBorder
    [[deprecated("Use field access instead!")]] int& dyn_bottomBorder();
    // Get instance field reference: public UnityEngine.Color color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_color();
    // Get instance field reference: public UnityEngine.Vector4 borderWidths
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_borderWidths();
    // Get instance field reference: public UnityEngine.Vector4 cornerRadiuses
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_cornerRadiuses();
    // Get instance field reference: public System.Int32 pass
    [[deprecated("Use field access instead!")]] int& dyn_pass();
    // Get instance field reference: public UnityEngine.Texture texture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_texture();
    // Get instance field reference: public UnityEngine.Material mat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_mat();
  }; // UnityEngine.Internal_DrawTextureArguments
  #pragma pack(pop)
  static check_size<sizeof(Internal_DrawTextureArguments), 112 + sizeof(::UnityEngine::Material*)> __UnityEngine_Internal_DrawTextureArgumentsSizeCheck;
  static_assert(sizeof(Internal_DrawTextureArguments) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
