// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ParticleSystem::ShapeModule, "UnityEngine", "ParticleSystem/ShapeModule");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ParticleSystem/ShapeModule
  // [TokenAttribute] Offset: FFFFFFFF
  struct ParticleSystem::ShapeModule/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.ParticleSystem m_ParticleSystem
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::ParticleSystem* m_ParticleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    public:
    // Creating value type constructor for type: ShapeModule
    constexpr ShapeModule(::UnityEngine::ParticleSystem* m_ParticleSystem_ = {}) noexcept : m_ParticleSystem{m_ParticleSystem_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::ParticleSystem*
    constexpr operator ::UnityEngine::ParticleSystem*() const noexcept {
      return m_ParticleSystem;
    }
    // Get instance field reference: private UnityEngine.ParticleSystem m_ParticleSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_m_ParticleSystem();
    // System.Void .ctor(UnityEngine.ParticleSystem particleSystem)
    // Offset: 0xBD3824
    // ABORTED: conflicts with another method.  ShapeModule(::UnityEngine::ParticleSystem* particleSystem);
    // public System.Void set_enabled(System.Boolean value)
    // Offset: 0xBD382C
    void set_enabled(bool value);
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0xBD3838
    void set_position(::UnityEngine::Vector3 value);
    // public System.Void set_rotation(UnityEngine.Vector3 value)
    // Offset: 0xBD3864
    void set_rotation(::UnityEngine::Vector3 value);
    // public System.Void set_scale(UnityEngine.Vector3 value)
    // Offset: 0xBD3890
    void set_scale(::UnityEngine::Vector3 value);
    // static private System.Void SetEnabled(UnityEngine.ParticleSystem system, System.Boolean value)
    // Offset: 0x2896594
    static void SetEnabled(::UnityEngine::ParticleSystem* system, bool value);
    // static private System.Void SetPosition(UnityEngine.ParticleSystem system, UnityEngine.Vector3 value)
    // Offset: 0x2896634
    static void SetPosition(::UnityEngine::ParticleSystem* system, ::UnityEngine::Vector3 value);
    // static private System.Void INTERNAL_CALL_SetPosition(UnityEngine.ParticleSystem system, ref UnityEngine.Vector3 value)
    // Offset: 0x2896704
    static void INTERNAL_CALL_SetPosition(::UnityEngine::ParticleSystem* system, ByRef<::UnityEngine::Vector3> value);
    // static private System.Void SetRotation(UnityEngine.ParticleSystem system, UnityEngine.Vector3 value)
    // Offset: 0x2896688
    static void SetRotation(::UnityEngine::ParticleSystem* system, ::UnityEngine::Vector3 value);
    // static private System.Void INTERNAL_CALL_SetRotation(UnityEngine.ParticleSystem system, ref UnityEngine.Vector3 value)
    // Offset: 0x2896778
    static void INTERNAL_CALL_SetRotation(::UnityEngine::ParticleSystem* system, ByRef<::UnityEngine::Vector3> value);
    // static private System.Void SetScale(UnityEngine.ParticleSystem system, UnityEngine.Vector3 value)
    // Offset: 0x28966DC
    static void SetScale(::UnityEngine::ParticleSystem* system, ::UnityEngine::Vector3 value);
    // static private System.Void INTERNAL_CALL_SetScale(UnityEngine.ParticleSystem system, ref UnityEngine.Vector3 value)
    // Offset: 0x28967EC
    static void INTERNAL_CALL_SetScale(::UnityEngine::ParticleSystem* system, ByRef<::UnityEngine::Vector3> value);
  }; // UnityEngine.ParticleSystem/ShapeModule
  #pragma pack(pop)
  static check_size<sizeof(ParticleSystem::ShapeModule), 0 + sizeof(::UnityEngine::ParticleSystem*)> __UnityEngine_ParticleSystem_ShapeModuleSizeCheck;
  static_assert(sizeof(ParticleSystem::ShapeModule) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ShapeModule::ShapeModule
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ShapeModule::set_enabled
// Il2CppName: set_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::ShapeModule::*)(bool)>(&UnityEngine::ParticleSystem::ShapeModule::set_enabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::ShapeModule), "set_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ShapeModule::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::ShapeModule::*)(::UnityEngine::Vector3)>(&UnityEngine::ParticleSystem::ShapeModule::set_position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::ShapeModule), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ShapeModule::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::ShapeModule::*)(::UnityEngine::Vector3)>(&UnityEngine::ParticleSystem::ShapeModule::set_rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::ShapeModule), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ShapeModule::set_scale
// Il2CppName: set_scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::ShapeModule::*)(::UnityEngine::Vector3)>(&UnityEngine::ParticleSystem::ShapeModule::set_scale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::ShapeModule), "set_scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ShapeModule::SetEnabled
// Il2CppName: SetEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::ParticleSystem*, bool)>(&UnityEngine::ParticleSystem::ShapeModule::SetEnabled)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::ShapeModule), "SetEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ShapeModule::SetPosition
// Il2CppName: SetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::ParticleSystem*, ::UnityEngine::Vector3)>(&UnityEngine::ParticleSystem::ShapeModule::SetPosition)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::ShapeModule), "SetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ShapeModule::INTERNAL_CALL_SetPosition
// Il2CppName: INTERNAL_CALL_SetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::ParticleSystem*, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ParticleSystem::ShapeModule::INTERNAL_CALL_SetPosition)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::ShapeModule), "INTERNAL_CALL_SetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ShapeModule::SetRotation
// Il2CppName: SetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::ParticleSystem*, ::UnityEngine::Vector3)>(&UnityEngine::ParticleSystem::ShapeModule::SetRotation)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::ShapeModule), "SetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ShapeModule::INTERNAL_CALL_SetRotation
// Il2CppName: INTERNAL_CALL_SetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::ParticleSystem*, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ParticleSystem::ShapeModule::INTERNAL_CALL_SetRotation)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::ShapeModule), "INTERNAL_CALL_SetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ShapeModule::SetScale
// Il2CppName: SetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::ParticleSystem*, ::UnityEngine::Vector3)>(&UnityEngine::ParticleSystem::ShapeModule::SetScale)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::ShapeModule), "SetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ShapeModule::INTERNAL_CALL_SetScale
// Il2CppName: INTERNAL_CALL_SetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::ParticleSystem*, ByRef<::UnityEngine::Vector3>)>(&UnityEngine::ParticleSystem::ShapeModule::INTERNAL_CALL_SetScale)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::ShapeModule), "INTERNAL_CALL_SetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, value});
  }
};
