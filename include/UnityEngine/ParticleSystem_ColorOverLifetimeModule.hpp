// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::ParticleSystem::ColorOverLifetimeModule, "UnityEngine", "ParticleSystem/ColorOverLifetimeModule");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ParticleSystem/ColorOverLifetimeModule
  // [TokenAttribute] Offset: FFFFFFFF
  struct ParticleSystem::ColorOverLifetimeModule/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.ParticleSystem m_ParticleSystem
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::ParticleSystem* m_ParticleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    public:
    // Creating value type constructor for type: ColorOverLifetimeModule
    constexpr ColorOverLifetimeModule(::UnityEngine::ParticleSystem* m_ParticleSystem_ = {}) noexcept : m_ParticleSystem{m_ParticleSystem_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::ParticleSystem*
    constexpr operator ::UnityEngine::ParticleSystem*() const noexcept {
      return m_ParticleSystem;
    }
    // Get instance field reference: private UnityEngine.ParticleSystem m_ParticleSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_m_ParticleSystem();
    // System.Void .ctor(UnityEngine.ParticleSystem particleSystem)
    // Offset: 0xBD3328
    // ABORTED: conflicts with another method.  ColorOverLifetimeModule(::UnityEngine::ParticleSystem* particleSystem);
    // public System.Void set_color(UnityEngine.ParticleSystem/MinMaxGradient value)
    // Offset: 0xBD3330
    void set_color(::UnityEngine::ParticleSystem::MinMaxGradient value);
    // public UnityEngine.ParticleSystem/MinMaxGradient get_color()
    // Offset: 0xBD3374
    ::UnityEngine::ParticleSystem::MinMaxGradient get_color();
    // static private System.Void SetColor(UnityEngine.ParticleSystem system, ref UnityEngine.ParticleSystem/MinMaxGradient gradient)
    // Offset: 0x28959E4
    static void SetColor(::UnityEngine::ParticleSystem* system, ByRef<::UnityEngine::ParticleSystem::MinMaxGradient> gradient);
    // static private System.Void GetColor(UnityEngine.ParticleSystem system, ref UnityEngine.ParticleSystem/MinMaxGradient gradient)
    // Offset: 0x2895AB4
    static void GetColor(::UnityEngine::ParticleSystem* system, ByRef<::UnityEngine::ParticleSystem::MinMaxGradient> gradient);
  }; // UnityEngine.ParticleSystem/ColorOverLifetimeModule
  #pragma pack(pop)
  static check_size<sizeof(ParticleSystem::ColorOverLifetimeModule), 0 + sizeof(::UnityEngine::ParticleSystem*)> __UnityEngine_ParticleSystem_ColorOverLifetimeModuleSizeCheck;
  static_assert(sizeof(ParticleSystem::ColorOverLifetimeModule) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ColorOverLifetimeModule::ColorOverLifetimeModule
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ColorOverLifetimeModule::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ParticleSystem::ColorOverLifetimeModule::*)(::UnityEngine::ParticleSystem::MinMaxGradient)>(&UnityEngine::ParticleSystem::ColorOverLifetimeModule::set_color)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxGradient")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::ColorOverLifetimeModule), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ColorOverLifetimeModule::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ParticleSystem::MinMaxGradient (UnityEngine::ParticleSystem::ColorOverLifetimeModule::*)()>(&UnityEngine::ParticleSystem::ColorOverLifetimeModule::get_color)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::ColorOverLifetimeModule), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ColorOverLifetimeModule::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::ParticleSystem*, ByRef<::UnityEngine::ParticleSystem::MinMaxGradient>)>(&UnityEngine::ParticleSystem::ColorOverLifetimeModule::SetColor)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem")->byval_arg;
    static auto* gradient = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxGradient")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::ColorOverLifetimeModule), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, gradient});
  }
};
// Writing MetadataGetter for method: UnityEngine::ParticleSystem::ColorOverLifetimeModule::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::ParticleSystem*, ByRef<::UnityEngine::ParticleSystem::MinMaxGradient>)>(&UnityEngine::ParticleSystem::ColorOverLifetimeModule::GetColor)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem")->byval_arg;
    static auto* gradient = &::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/MinMaxGradient")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ParticleSystem::ColorOverLifetimeModule), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, gradient});
  }
};
