// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Analytics.DataPrivacy
#include "UnityEngine/Analytics/DataPrivacy.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Analytics::DataPrivacy::UserPostData, "UnityEngine.Analytics", "DataPrivacy/UserPostData");
// Type namespace: UnityEngine.Analytics
namespace UnityEngine::Analytics {
  // Size: 0x48
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Analytics.DataPrivacy/UserPostData
  // [TokenAttribute] Offset: FFFFFFFF
  struct DataPrivacy::UserPostData/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String appid
    // Size: 0x8
    // Offset: 0x0
    ::StringW appid;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String userid
    // Size: 0x8
    // Offset: 0x8
    ::StringW userid;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int64 sessionid
    // Size: 0x8
    // Offset: 0x10
    int64_t sessionid;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.String platform
    // Size: 0x8
    // Offset: 0x18
    ::StringW platform;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.UInt32 platformid
    // Size: 0x4
    // Offset: 0x20
    uint platformid;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: platformid and: sdk_ver
    char __padding4[0x4] = {};
    // public System.String sdk_ver
    // Size: 0x8
    // Offset: 0x28
    ::StringW sdk_ver;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean debug_device
    // Size: 0x1
    // Offset: 0x30
    bool debug_device;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debug_device and: deviceid
    char __padding6[0x7] = {};
    // public System.String deviceid
    // Size: 0x8
    // Offset: 0x38
    ::StringW deviceid;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String plugin_ver
    // Size: 0x8
    // Offset: 0x40
    ::StringW plugin_ver;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: UserPostData
    constexpr UserPostData(::StringW appid_ = {}, ::StringW userid_ = {}, int64_t sessionid_ = {}, ::StringW platform_ = {}, uint platformid_ = {}, ::StringW sdk_ver_ = {}, bool debug_device_ = {}, ::StringW deviceid_ = {}, ::StringW plugin_ver_ = {}) noexcept : appid{appid_}, userid{userid_}, sessionid{sessionid_}, platform{platform_}, platformid{platformid_}, sdk_ver{sdk_ver_}, debug_device{debug_device_}, deviceid{deviceid_}, plugin_ver{plugin_ver_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String appid
    [[deprecated("Use field access instead!")]] ::StringW& dyn_appid();
    // Get instance field reference: public System.String userid
    [[deprecated("Use field access instead!")]] ::StringW& dyn_userid();
    // Get instance field reference: public System.Int64 sessionid
    [[deprecated("Use field access instead!")]] int64_t& dyn_sessionid();
    // Get instance field reference: public System.String platform
    [[deprecated("Use field access instead!")]] ::StringW& dyn_platform();
    // Get instance field reference: public System.UInt32 platformid
    [[deprecated("Use field access instead!")]] uint& dyn_platformid();
    // Get instance field reference: public System.String sdk_ver
    [[deprecated("Use field access instead!")]] ::StringW& dyn_sdk_ver();
    // Get instance field reference: public System.Boolean debug_device
    [[deprecated("Use field access instead!")]] bool& dyn_debug_device();
    // Get instance field reference: public System.String deviceid
    [[deprecated("Use field access instead!")]] ::StringW& dyn_deviceid();
    // Get instance field reference: public System.String plugin_ver
    [[deprecated("Use field access instead!")]] ::StringW& dyn_plugin_ver();
  }; // UnityEngine.Analytics.DataPrivacy/UserPostData
  #pragma pack(pop)
  static check_size<sizeof(DataPrivacy::UserPostData), 64 + sizeof(::StringW)> __UnityEngine_Analytics_DataPrivacy_UserPostDataSizeCheck;
  static_assert(sizeof(DataPrivacy::UserPostData) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
