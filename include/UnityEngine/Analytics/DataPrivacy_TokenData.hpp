// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Analytics.DataPrivacy
#include "UnityEngine/Analytics/DataPrivacy.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Analytics::DataPrivacy::TokenData, "UnityEngine.Analytics", "DataPrivacy/TokenData");
// Type namespace: UnityEngine.Analytics
namespace UnityEngine::Analytics {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Analytics.DataPrivacy/TokenData
  // [TokenAttribute] Offset: FFFFFFFF
  struct DataPrivacy::TokenData/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String url
    // Size: 0x8
    // Offset: 0x0
    ::StringW url;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String token
    // Size: 0x8
    // Offset: 0x8
    ::StringW token;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: TokenData
    constexpr TokenData(::StringW url_ = {}, ::StringW token_ = {}) noexcept : url{url_}, token{token_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String url
    [[deprecated("Use field access instead!")]] ::StringW& dyn_url();
    // Get instance field reference: public System.String token
    [[deprecated("Use field access instead!")]] ::StringW& dyn_token();
  }; // UnityEngine.Analytics.DataPrivacy/TokenData
  #pragma pack(pop)
  static check_size<sizeof(DataPrivacy::TokenData), 8 + sizeof(::StringW)> __UnityEngine_Analytics_DataPrivacy_TokenDataSizeCheck;
  static_assert(sizeof(DataPrivacy::TokenData) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
