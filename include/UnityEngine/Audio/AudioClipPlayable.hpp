// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Playables.IPlayable
#include "UnityEngine/Playables/IPlayable.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Playables.PlayableHandle
#include "UnityEngine/Playables/PlayableHandle.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
  // Forward declaring type: Playable
  struct Playable;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: UnityEngine.Audio
namespace UnityEngine::Audio {
  // Forward declaring type: AudioClipPlayable
  struct AudioClipPlayable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Audio::AudioClipPlayable, "UnityEngine.Audio", "AudioClipPlayable");
// Type namespace: UnityEngine.Audio
namespace UnityEngine::Audio {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Audio.AudioClipPlayable
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: A85CA8
  // [NativeHeaderAttribute] Offset: A85CA8
  // [StaticAccessorAttribute] Offset: A85CA8
  // [RequiredByNativeCodeAttribute] Offset: A85CA8
  // [NativeHeaderAttribute] Offset: A85CA8
  struct AudioClipPlayable/*, public ::System::ValueType, public ::UnityEngine::Playables::IPlayable, public ::System::IEquatable_1<::UnityEngine::Audio::AudioClipPlayable>*/ {
    public:
    public:
    // private UnityEngine.Playables.PlayableHandle m_Handle
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Playables::PlayableHandle m_Handle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableHandle) == 0xC);
    public:
    // Creating value type constructor for type: AudioClipPlayable
    constexpr AudioClipPlayable(::UnityEngine::Playables::PlayableHandle m_Handle_ = {}) noexcept : m_Handle{m_Handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Playables::IPlayable
    operator ::UnityEngine::Playables::IPlayable() noexcept {
      return *reinterpret_cast<::UnityEngine::Playables::IPlayable*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Audio::AudioClipPlayable>
    operator ::System::IEquatable_1<::UnityEngine::Audio::AudioClipPlayable>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Audio::AudioClipPlayable>*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::Playables::PlayableHandle
    constexpr operator ::UnityEngine::Playables::PlayableHandle() const noexcept {
      return m_Handle;
    }
    // Get instance field reference: private UnityEngine.Playables.PlayableHandle m_Handle
    [[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableHandle& dyn_m_Handle();
    // System.Void .ctor(UnityEngine.Playables.PlayableHandle handle)
    // Offset: 0xBD147C
    // ABORTED: conflicts with another method.  AudioClipPlayable(::UnityEngine::Playables::PlayableHandle handle);
    // static public UnityEngine.Audio.AudioClipPlayable Create(UnityEngine.Playables.PlayableGraph graph, UnityEngine.AudioClip clip, System.Boolean looping)
    // Offset: 0x2847054
    static ::UnityEngine::Audio::AudioClipPlayable Create(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::AudioClip* clip, bool looping);
    // static private UnityEngine.Playables.PlayableHandle CreateHandle(UnityEngine.Playables.PlayableGraph graph, UnityEngine.AudioClip clip, System.Boolean looping)
    // Offset: 0x2847160
    static ::UnityEngine::Playables::PlayableHandle CreateHandle(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::AudioClip* clip, bool looping);
    // public UnityEngine.Playables.PlayableHandle GetHandle()
    // Offset: 0xBD1484
    ::UnityEngine::Playables::PlayableHandle GetHandle();
    // static public UnityEngine.Audio.AudioClipPlayable op_Explicit(UnityEngine.Playables.Playable playable)
    // Offset: 0x2847368
    explicit AudioClipPlayable(::UnityEngine::Playables::Playable& playable);
    // public System.Boolean Equals(UnityEngine.Audio.AudioClipPlayable other)
    // Offset: 0xBD1490
    bool Equals(::UnityEngine::Audio::AudioClipPlayable other);
    // public UnityEngine.AudioClip GetClip()
    // Offset: 0xBD1498
    ::UnityEngine::AudioClip* GetClip();
    // public System.Boolean GetLooped()
    // Offset: 0xBD14A0
    bool GetLooped();
    // public System.Boolean IsPlaying()
    // Offset: 0xBD14A8
    bool IsPlaying();
    // public System.Boolean IsChannelPlaying()
    // Offset: 0xBD14B0
    bool IsChannelPlaying();
    // public System.Double GetStartDelay()
    // Offset: 0xBD14B8
    double GetStartDelay();
    // public System.Double GetPauseDelay()
    // Offset: 0xBD14C0
    double GetPauseDelay();
    // public System.Void Seek(System.Double startTime, System.Double startDelay, System.Double duration)
    // Offset: 0xBD14C8
    void Seek(double startTime, double startDelay, double duration);
    // static private UnityEngine.AudioClip GetClipInternal(ref UnityEngine.Playables.PlayableHandle hdl)
    // Offset: 0x284743C
    static ::UnityEngine::AudioClip* GetClipInternal(ByRef<::UnityEngine::Playables::PlayableHandle> hdl);
    // static private System.Boolean GetLoopedInternal(ref UnityEngine.Playables.PlayableHandle hdl)
    // Offset: 0x28474AC
    static bool GetLoopedInternal(ByRef<::UnityEngine::Playables::PlayableHandle> hdl);
    // static private System.Boolean GetIsChannelPlayingInternal(ref UnityEngine.Playables.PlayableHandle hdl)
    // Offset: 0x2847520
    static bool GetIsChannelPlayingInternal(ByRef<::UnityEngine::Playables::PlayableHandle> hdl);
    // static private System.Double GetStartDelayInternal(ref UnityEngine.Playables.PlayableHandle hdl)
    // Offset: 0x2847590
    static double GetStartDelayInternal(ByRef<::UnityEngine::Playables::PlayableHandle> hdl);
    // static private System.Void SetStartDelayInternal(ref UnityEngine.Playables.PlayableHandle hdl, System.Double delay)
    // Offset: 0x2847704
    static void SetStartDelayInternal(ByRef<::UnityEngine::Playables::PlayableHandle> hdl, double delay);
    // static private System.Double GetPauseDelayInternal(ref UnityEngine.Playables.PlayableHandle hdl)
    // Offset: 0x2847600
    static double GetPauseDelayInternal(ByRef<::UnityEngine::Playables::PlayableHandle> hdl);
    // static private System.Void SetPauseDelayInternal(ref UnityEngine.Playables.PlayableHandle hdl, System.Double delay)
    // Offset: 0x2847778
    static void SetPauseDelayInternal(ByRef<::UnityEngine::Playables::PlayableHandle> hdl, double delay);
    // static private System.Boolean InternalCreateAudioClipPlayable(ref UnityEngine.Playables.PlayableGraph graph, UnityEngine.AudioClip clip, System.Boolean looping, ref UnityEngine.Playables.PlayableHandle handle)
    // Offset: 0x2847294
    static bool InternalCreateAudioClipPlayable(ByRef<::UnityEngine::Playables::PlayableGraph> graph, ::UnityEngine::AudioClip* clip, bool looping, ByRef<::UnityEngine::Playables::PlayableHandle> handle);
  }; // UnityEngine.Audio.AudioClipPlayable
  #pragma pack(pop)
  static check_size<sizeof(AudioClipPlayable), 0 + sizeof(::UnityEngine::Playables::PlayableHandle)> __UnityEngine_Audio_AudioClipPlayableSizeCheck;
  static_assert(sizeof(AudioClipPlayable) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::AudioClipPlayable
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Audio::AudioClipPlayable (*)(::UnityEngine::Playables::PlayableGraph, ::UnityEngine::AudioClip*, bool)>(&UnityEngine::Audio::AudioClipPlayable::Create)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* looping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, clip, looping});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::CreateHandle
// Il2CppName: CreateHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::PlayableHandle (*)(::UnityEngine::Playables::PlayableGraph, ::UnityEngine::AudioClip*, bool)>(&UnityEngine::Audio::AudioClipPlayable::CreateHandle)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* looping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "CreateHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, clip, looping});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::PlayableHandle (UnityEngine::Audio::AudioClipPlayable::*)()>(&UnityEngine::Audio::AudioClipPlayable::GetHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::AudioClipPlayable
// Il2CppName: op_Explicit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Audio::AudioClipPlayable::*)(::UnityEngine::Audio::AudioClipPlayable)>(&UnityEngine::Audio::AudioClipPlayable::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Audio", "AudioClipPlayable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::GetClip
// Il2CppName: GetClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::Audio::AudioClipPlayable::*)()>(&UnityEngine::Audio::AudioClipPlayable::GetClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "GetClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::GetLooped
// Il2CppName: GetLooped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Audio::AudioClipPlayable::*)()>(&UnityEngine::Audio::AudioClipPlayable::GetLooped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "GetLooped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::IsPlaying
// Il2CppName: IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Audio::AudioClipPlayable::*)()>(&UnityEngine::Audio::AudioClipPlayable::IsPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::IsChannelPlaying
// Il2CppName: IsChannelPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Audio::AudioClipPlayable::*)()>(&UnityEngine::Audio::AudioClipPlayable::IsChannelPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "IsChannelPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::GetStartDelay
// Il2CppName: GetStartDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Audio::AudioClipPlayable::*)()>(&UnityEngine::Audio::AudioClipPlayable::GetStartDelay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "GetStartDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::GetPauseDelay
// Il2CppName: GetPauseDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Audio::AudioClipPlayable::*)()>(&UnityEngine::Audio::AudioClipPlayable::GetPauseDelay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "GetPauseDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Audio::AudioClipPlayable::*)(double, double, double)>(&UnityEngine::Audio::AudioClipPlayable::Seek)> {
  static const MethodInfo* get() {
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* startDelay = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startTime, startDelay, duration});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::GetClipInternal
// Il2CppName: GetClipInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (*)(ByRef<::UnityEngine::Playables::PlayableHandle>)>(&UnityEngine::Audio::AudioClipPlayable::GetClipInternal)> {
  static const MethodInfo* get() {
    static auto* hdl = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "GetClipInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hdl});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::GetLoopedInternal
// Il2CppName: GetLoopedInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Playables::PlayableHandle>)>(&UnityEngine::Audio::AudioClipPlayable::GetLoopedInternal)> {
  static const MethodInfo* get() {
    static auto* hdl = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "GetLoopedInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hdl});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::GetIsChannelPlayingInternal
// Il2CppName: GetIsChannelPlayingInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Playables::PlayableHandle>)>(&UnityEngine::Audio::AudioClipPlayable::GetIsChannelPlayingInternal)> {
  static const MethodInfo* get() {
    static auto* hdl = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "GetIsChannelPlayingInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hdl});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::GetStartDelayInternal
// Il2CppName: GetStartDelayInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(ByRef<::UnityEngine::Playables::PlayableHandle>)>(&UnityEngine::Audio::AudioClipPlayable::GetStartDelayInternal)> {
  static const MethodInfo* get() {
    static auto* hdl = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "GetStartDelayInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hdl});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::SetStartDelayInternal
// Il2CppName: SetStartDelayInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Playables::PlayableHandle>, double)>(&UnityEngine::Audio::AudioClipPlayable::SetStartDelayInternal)> {
  static const MethodInfo* get() {
    static auto* hdl = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableHandle")->this_arg;
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "SetStartDelayInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hdl, delay});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::GetPauseDelayInternal
// Il2CppName: GetPauseDelayInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(ByRef<::UnityEngine::Playables::PlayableHandle>)>(&UnityEngine::Audio::AudioClipPlayable::GetPauseDelayInternal)> {
  static const MethodInfo* get() {
    static auto* hdl = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "GetPauseDelayInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hdl});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::SetPauseDelayInternal
// Il2CppName: SetPauseDelayInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Playables::PlayableHandle>, double)>(&UnityEngine::Audio::AudioClipPlayable::SetPauseDelayInternal)> {
  static const MethodInfo* get() {
    static auto* hdl = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableHandle")->this_arg;
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "SetPauseDelayInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hdl, delay});
  }
};
// Writing MetadataGetter for method: UnityEngine::Audio::AudioClipPlayable::InternalCreateAudioClipPlayable
// Il2CppName: InternalCreateAudioClipPlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::Playables::PlayableGraph>, ::UnityEngine::AudioClip*, bool, ByRef<::UnityEngine::Playables::PlayableHandle>)>(&UnityEngine::Audio::AudioClipPlayable::InternalCreateAudioClipPlayable)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->this_arg;
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* looping = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableHandle")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Audio::AudioClipPlayable), "InternalCreateAudioClipPlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, clip, looping, handle});
  }
};
