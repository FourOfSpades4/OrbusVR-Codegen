// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Plane
#include "UnityEngine/Plane.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Bounds
  struct Bounds;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GeometryUtility
  class GeometryUtility;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::GeometryUtility);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::GeometryUtility*, "UnityEngine", "GeometryUtility");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.GeometryUtility
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: A6E84C
  // [StaticAccessorAttribute] Offset: A6E84C
  class GeometryUtility : public ::Il2CppObject {
    public:
    // static public UnityEngine.Plane[] CalculateFrustumPlanes(UnityEngine.Camera camera)
    // Offset: 0x1CB92E4
    static ::ArrayW<::UnityEngine::Plane> CalculateFrustumPlanes(::UnityEngine::Camera* camera);
    // static public System.Void CalculateFrustumPlanes(UnityEngine.Camera camera, UnityEngine.Plane[] planes)
    // Offset: 0x1CB934C
    static void CalculateFrustumPlanes(::UnityEngine::Camera* camera, ::ArrayW<::UnityEngine::Plane> planes);
    // static public System.Void CalculateFrustumPlanes(UnityEngine.Matrix4x4 worldToProjectionMatrix, UnityEngine.Plane[] planes)
    // Offset: 0x1CB97B8
    static void CalculateFrustumPlanes(::UnityEngine::Matrix4x4 worldToProjectionMatrix, ::ArrayW<::UnityEngine::Plane> planes);
    // static public System.Boolean TestPlanesAABB(UnityEngine.Plane[] planes, UnityEngine.Bounds bounds)
    // Offset: 0x1CB98C8
    static bool TestPlanesAABB(::ArrayW<::UnityEngine::Plane> planes, ::UnityEngine::Bounds bounds);
    // static private System.Void Internal_ExtractPlanes(out UnityEngine.Plane[] planes, UnityEngine.Matrix4x4 worldToProjectionMatrix)
    // Offset: 0x1CB98C4
    static void Internal_ExtractPlanes(ByRef<::ArrayW<::UnityEngine::Plane>> planes, ::UnityEngine::Matrix4x4 worldToProjectionMatrix);
    // static private System.Boolean TestPlanesAABB_Injected(UnityEngine.Plane[] planes, ref UnityEngine.Bounds bounds)
    // Offset: 0x1CB98CC
    static bool TestPlanesAABB_Injected(::ArrayW<::UnityEngine::Plane> planes, ByRef<::UnityEngine::Bounds> bounds);
    // static private System.Void Internal_ExtractPlanes_Injected(out UnityEngine.Plane[] planes, ref UnityEngine.Matrix4x4 worldToProjectionMatrix)
    // Offset: 0x1CB9940
    static void Internal_ExtractPlanes_Injected(ByRef<::ArrayW<::UnityEngine::Plane>> planes, ByRef<::UnityEngine::Matrix4x4> worldToProjectionMatrix);
  }; // UnityEngine.GeometryUtility
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::GeometryUtility::CalculateFrustumPlanes
// Il2CppName: CalculateFrustumPlanes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Plane> (*)(::UnityEngine::Camera*)>(&UnityEngine::GeometryUtility::CalculateFrustumPlanes)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GeometryUtility*), "CalculateFrustumPlanes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
// Writing MetadataGetter for method: UnityEngine::GeometryUtility::CalculateFrustumPlanes
// Il2CppName: CalculateFrustumPlanes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ::ArrayW<::UnityEngine::Plane>)>(&UnityEngine::GeometryUtility::CalculateFrustumPlanes)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* planes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Plane"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GeometryUtility*), "CalculateFrustumPlanes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, planes});
  }
};
// Writing MetadataGetter for method: UnityEngine::GeometryUtility::CalculateFrustumPlanes
// Il2CppName: CalculateFrustumPlanes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Matrix4x4, ::ArrayW<::UnityEngine::Plane>)>(&UnityEngine::GeometryUtility::CalculateFrustumPlanes)> {
  static const MethodInfo* get() {
    static auto* worldToProjectionMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* planes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Plane"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GeometryUtility*), "CalculateFrustumPlanes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldToProjectionMatrix, planes});
  }
};
// Writing MetadataGetter for method: UnityEngine::GeometryUtility::TestPlanesAABB
// Il2CppName: TestPlanesAABB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::UnityEngine::Plane>, ::UnityEngine::Bounds)>(&UnityEngine::GeometryUtility::TestPlanesAABB)> {
  static const MethodInfo* get() {
    static auto* planes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Plane"), 1)->byval_arg;
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GeometryUtility*), "TestPlanesAABB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{planes, bounds});
  }
};
// Writing MetadataGetter for method: UnityEngine::GeometryUtility::Internal_ExtractPlanes
// Il2CppName: Internal_ExtractPlanes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::ArrayW<::UnityEngine::Plane>>, ::UnityEngine::Matrix4x4)>(&UnityEngine::GeometryUtility::Internal_ExtractPlanes)> {
  static const MethodInfo* get() {
    static auto* planes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Plane"), 1)->this_arg;
    static auto* worldToProjectionMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GeometryUtility*), "Internal_ExtractPlanes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{planes, worldToProjectionMatrix});
  }
};
// Writing MetadataGetter for method: UnityEngine::GeometryUtility::TestPlanesAABB_Injected
// Il2CppName: TestPlanesAABB_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::UnityEngine::Plane>, ByRef<::UnityEngine::Bounds>)>(&UnityEngine::GeometryUtility::TestPlanesAABB_Injected)> {
  static const MethodInfo* get() {
    static auto* planes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Plane"), 1)->byval_arg;
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GeometryUtility*), "TestPlanesAABB_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{planes, bounds});
  }
};
// Writing MetadataGetter for method: UnityEngine::GeometryUtility::Internal_ExtractPlanes_Injected
// Il2CppName: Internal_ExtractPlanes_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::ArrayW<::UnityEngine::Plane>>, ByRef<::UnityEngine::Matrix4x4>)>(&UnityEngine::GeometryUtility::Internal_ExtractPlanes_Injected)> {
  static const MethodInfo* get() {
    static auto* planes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Plane"), 1)->this_arg;
    static auto* worldToProjectionMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GeometryUtility*), "Internal_ExtractPlanes_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{planes, worldToProjectionMatrix});
  }
};
