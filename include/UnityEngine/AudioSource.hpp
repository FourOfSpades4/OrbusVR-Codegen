// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.AudioBehaviour
#include "UnityEngine/AudioBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSourceExtension
  class AudioSourceExtension;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: AudioVelocityUpdateMode
  struct AudioVelocityUpdateMode;
  // Forward declaring type: AudioSourceCurveType
  struct AudioSourceCurveType;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: AudioRolloffMode
  struct AudioRolloffMode;
  // Forward declaring type: PropertyName
  struct PropertyName;
}
// Forward declaring namespace: UnityEngine::Audio
namespace UnityEngine::Audio {
  // Forward declaring type: AudioMixerGroup
  class AudioMixerGroup;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::AudioSource);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::AudioSource*, "UnityEngine", "AudioSource");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.AudioSource
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: A85F90
  class AudioSource : public ::UnityEngine::AudioBehaviour {
    public:
    public:
    // UnityEngine.AudioSourceExtension spatializerExtension
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AudioSourceExtension* spatializerExtension;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSourceExtension*) == 0x8);
    // UnityEngine.AudioSourceExtension ambisonicExtension
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioSourceExtension* ambisonicExtension;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSourceExtension*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: UnityEngine.AudioSourceExtension spatializerExtension
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSourceExtension*& dyn_spatializerExtension();
    // Get instance field reference: UnityEngine.AudioSourceExtension ambisonicExtension
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSourceExtension*& dyn_ambisonicExtension();
    // public System.Single get_volume()
    // Offset: 0x284C5D4
    float get_volume();
    // public System.Void set_volume(System.Single value)
    // Offset: 0x284C640
    void set_volume(float value);
    // public System.Single get_pitch()
    // Offset: 0x284C6B4
    float get_pitch();
    // public System.Void set_pitch(System.Single value)
    // Offset: 0x284C720
    void set_pitch(float value);
    // public System.Single get_time()
    // Offset: 0x284C794
    float get_time();
    // public System.Void set_time(System.Single value)
    // Offset: 0x284C800
    void set_time(float value);
    // public System.Int32 get_timeSamples()
    // Offset: 0x284C874
    int get_timeSamples();
    // public System.Void set_timeSamples(System.Int32 value)
    // Offset: 0x284C8E0
    void set_timeSamples(int value);
    // public UnityEngine.AudioClip get_clip()
    // Offset: 0x284C4B0
    ::UnityEngine::AudioClip* get_clip();
    // public System.Void set_clip(UnityEngine.AudioClip value)
    // Offset: 0x284C954
    void set_clip(::UnityEngine::AudioClip* value);
    // public System.Void set_outputAudioMixerGroup(UnityEngine.Audio.AudioMixerGroup value)
    // Offset: 0x284C9C8
    void set_outputAudioMixerGroup(::UnityEngine::Audio::AudioMixerGroup* value);
    // public System.Void Play(System.UInt64 delay)
    // Offset: 0x284CA3C
    void Play(uint64_t delay);
    // public System.Void Play()
    // Offset: 0x284CAB0
    void Play();
    // public System.Void PlayDelayed(System.Single delay)
    // Offset: 0x284CAB8
    void PlayDelayed(float delay);
    // public System.Void Stop()
    // Offset: 0x284CB2C
    void Stop();
    // public System.Void Pause()
    // Offset: 0x284CB98
    void Pause();
    // static private System.Void INTERNAL_CALL_Pause(UnityEngine.AudioSource self)
    // Offset: 0x284CB9C
    static void INTERNAL_CALL_Pause(::UnityEngine::AudioSource* self);
    // public System.Void UnPause()
    // Offset: 0x284CC08
    void UnPause();
    // static private System.Void INTERNAL_CALL_UnPause(UnityEngine.AudioSource self)
    // Offset: 0x284CC0C
    static void INTERNAL_CALL_UnPause(::UnityEngine::AudioSource* self);
    // public System.Boolean get_isPlaying()
    // Offset: 0x284B6AC
    bool get_isPlaying();
    // public System.Void PlayOneShot(UnityEngine.AudioClip clip)
    // Offset: 0x284CC78
    void PlayOneShot(::UnityEngine::AudioClip* clip);
    // public System.Void PlayOneShot(UnityEngine.AudioClip clip, System.Single volumeScale)
    // Offset: 0x284CC80
    void PlayOneShot(::UnityEngine::AudioClip* clip, float volumeScale);
    // private System.Void PlayOneShotHelper(UnityEngine.AudioClip clip, System.Single volumeScale)
    // Offset: 0x284CDAC
    void PlayOneShotHelper(::UnityEngine::AudioClip* clip, float volumeScale);
    // static public System.Void PlayClipAtPoint(UnityEngine.AudioClip clip, UnityEngine.Vector3 position, System.Single volume)
    // Offset: 0x284CE38
    static void PlayClipAtPoint(::UnityEngine::AudioClip* clip, ::UnityEngine::Vector3 position, float volume);
    // public System.Boolean get_loop()
    // Offset: 0x284D11C
    bool get_loop();
    // public System.Void set_loop(System.Boolean value)
    // Offset: 0x284D188
    void set_loop(bool value);
    // public System.Boolean get_playOnAwake()
    // Offset: 0x284D1FC
    bool get_playOnAwake();
    // public System.Void set_playOnAwake(System.Boolean value)
    // Offset: 0x284D268
    void set_playOnAwake(bool value);
    // public UnityEngine.AudioVelocityUpdateMode get_velocityUpdateMode()
    // Offset: 0x284D2DC
    ::UnityEngine::AudioVelocityUpdateMode get_velocityUpdateMode();
    // public System.Void set_velocityUpdateMode(UnityEngine.AudioVelocityUpdateMode value)
    // Offset: 0x284D348
    void set_velocityUpdateMode(::UnityEngine::AudioVelocityUpdateMode value);
    // public System.Void set_spatialBlend(System.Single value)
    // Offset: 0x284D0A8
    void set_spatialBlend(float value);
    // System.Boolean get_spatializeInternal()
    // Offset: 0x284D3BC
    bool get_spatializeInternal();
    // System.Void set_spatializeInternal(System.Boolean value)
    // Offset: 0x284D428
    void set_spatializeInternal(bool value);
    // public System.Boolean get_spatialize()
    // Offset: 0x2849E28
    bool get_spatialize();
    // public System.Void set_spatialize(System.Boolean value)
    // Offset: 0x284D49C
    void set_spatialize(bool value);
    // public System.Void set_spatializePostEffects(System.Boolean value)
    // Offset: 0x284D5A4
    void set_spatializePostEffects(bool value);
    // public System.Void SetCustomCurve(UnityEngine.AudioSourceCurveType type, UnityEngine.AnimationCurve curve)
    // Offset: 0x284D618
    void SetCustomCurve(::UnityEngine::AudioSourceCurveType type, ::UnityEngine::AnimationCurve* curve);
    // public System.Void set_dopplerLevel(System.Single value)
    // Offset: 0x284D69C
    void set_dopplerLevel(float value);
    // public System.Void set_spread(System.Single value)
    // Offset: 0x284D710
    void set_spread(float value);
    // public System.Boolean get_mute()
    // Offset: 0x284D784
    bool get_mute();
    // public System.Void set_mute(System.Boolean value)
    // Offset: 0x284D7F0
    void set_mute(bool value);
    // public System.Void set_minDistance(System.Single value)
    // Offset: 0x284D864
    void set_minDistance(float value);
    // public System.Void set_maxDistance(System.Single value)
    // Offset: 0x284D8D8
    void set_maxDistance(float value);
    // public System.Void set_rolloffMode(UnityEngine.AudioRolloffMode value)
    // Offset: 0x284D94C
    void set_rolloffMode(::UnityEngine::AudioRolloffMode value);
    // System.Int32 GetNumExtensionProperties()
    // Offset: 0x284A6B0
    int GetNumExtensionProperties();
    // UnityEngine.PropertyName ReadExtensionName(System.Int32 sourceIndex)
    // Offset: 0x284A5EC
    ::UnityEngine::PropertyName ReadExtensionName(int sourceIndex);
    // static private System.Void INTERNAL_CALL_ReadExtensionName(UnityEngine.AudioSource self, System.Int32 sourceIndex, out UnityEngine.PropertyName value)
    // Offset: 0x284D9C0
    static void INTERNAL_CALL_ReadExtensionName(::UnityEngine::AudioSource* self, int sourceIndex, ByRef<::UnityEngine::PropertyName> value);
    // UnityEngine.PropertyName ReadExtensionPropertyName(System.Int32 sourceIndex)
    // Offset: 0x284A614
    ::UnityEngine::PropertyName ReadExtensionPropertyName(int sourceIndex);
    // static private System.Void INTERNAL_CALL_ReadExtensionPropertyName(UnityEngine.AudioSource self, System.Int32 sourceIndex, out UnityEngine.PropertyName value)
    // Offset: 0x284DA44
    static void INTERNAL_CALL_ReadExtensionPropertyName(::UnityEngine::AudioSource* self, int sourceIndex, ByRef<::UnityEngine::PropertyName> value);
    // System.Single ReadExtensionPropertyValue(System.Int32 sourceIndex)
    // Offset: 0x284A63C
    float ReadExtensionPropertyValue(int sourceIndex);
    // System.Void ClearExtensionProperties(UnityEngine.PropertyName extensionName)
    // Offset: 0x284A71C
    void ClearExtensionProperties(::UnityEngine::PropertyName extensionName);
    // static private System.Void INTERNAL_CALL_ClearExtensionProperties(UnityEngine.AudioSource self, ref UnityEngine.PropertyName extensionName)
    // Offset: 0x284DAC8
    static void INTERNAL_CALL_ClearExtensionProperties(::UnityEngine::AudioSource* self, ByRef<::UnityEngine::PropertyName> extensionName);
    // UnityEngine.AudioSourceExtension AddSpatializerExtension(System.Type extensionType)
    // Offset: 0x2849F40
    ::UnityEngine::AudioSourceExtension* AddSpatializerExtension(::System::Type* extensionType);
    // UnityEngine.AudioSourceExtension AddAmbisonicExtension(System.Type extensionType)
    // Offset: 0x284A508
    ::UnityEngine::AudioSourceExtension* AddAmbisonicExtension(::System::Type* extensionType);
    // public System.Boolean SetSpatializerFloat(System.Int32 index, System.Single value)
    // Offset: 0x284DB3C
    bool SetSpatializerFloat(int index, float value);
    // public System.Boolean SetAmbisonicDecoderFloat(System.Int32 index, System.Single value)
    // Offset: 0x284DBC8
    bool SetAmbisonicDecoderFloat(int index, float value);
    // public System.Boolean GetAmbisonicDecoderFloat(System.Int32 index, out System.Single value)
    // Offset: 0x284DC54
    bool GetAmbisonicDecoderFloat(int index, ByRef<float> value);
    // public System.Void .ctor()
    // Offset: 0x284C5C8
    // Implemented from: UnityEngine.AudioBehaviour
    // Base method: System.Void AudioBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::AudioSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioSource*, creationType>()));
    }
  }; // UnityEngine.AudioSource
  #pragma pack(pop)
  static check_size<sizeof(AudioSource), 32 + sizeof(::UnityEngine::AudioSourceExtension*)> __UnityEngine_AudioSourceSizeCheck;
  static_assert(sizeof(AudioSource) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::AudioSource::get_volume
// Il2CppName: get_volume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::get_volume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "get_volume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_volume
// Il2CppName: set_volume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(float)>(&UnityEngine::AudioSource::set_volume)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_volume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::get_pitch
// Il2CppName: get_pitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::get_pitch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "get_pitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_pitch
// Il2CppName: set_pitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(float)>(&UnityEngine::AudioSource::set_pitch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_pitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::get_time)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(float)>(&UnityEngine::AudioSource::set_time)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::get_timeSamples
// Il2CppName: get_timeSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::get_timeSamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "get_timeSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_timeSamples
// Il2CppName: set_timeSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(int)>(&UnityEngine::AudioSource::set_timeSamples)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_timeSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::get_clip
// Il2CppName: get_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::get_clip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "get_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_clip
// Il2CppName: set_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(::UnityEngine::AudioClip*)>(&UnityEngine::AudioSource::set_clip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_outputAudioMixerGroup
// Il2CppName: set_outputAudioMixerGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(::UnityEngine::Audio::AudioMixerGroup*)>(&UnityEngine::AudioSource::set_outputAudioMixerGroup)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Audio", "AudioMixerGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_outputAudioMixerGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(uint64_t)>(&UnityEngine::AudioSource::Play)> {
  static const MethodInfo* get() {
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delay});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::Play)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::PlayDelayed
// Il2CppName: PlayDelayed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(float)>(&UnityEngine::AudioSource::PlayDelayed)> {
  static const MethodInfo* get() {
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "PlayDelayed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delay});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::Pause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::INTERNAL_CALL_Pause
// Il2CppName: INTERNAL_CALL_Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AudioSource*)>(&UnityEngine::AudioSource::INTERNAL_CALL_Pause)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "INTERNAL_CALL_Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::UnPause
// Il2CppName: UnPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::UnPause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "UnPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::INTERNAL_CALL_UnPause
// Il2CppName: INTERNAL_CALL_UnPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AudioSource*)>(&UnityEngine::AudioSource::INTERNAL_CALL_UnPause)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "INTERNAL_CALL_UnPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::get_isPlaying
// Il2CppName: get_isPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::get_isPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "get_isPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::PlayOneShot
// Il2CppName: PlayOneShot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(::UnityEngine::AudioClip*)>(&UnityEngine::AudioSource::PlayOneShot)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "PlayOneShot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::PlayOneShot
// Il2CppName: PlayOneShot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(::UnityEngine::AudioClip*, float)>(&UnityEngine::AudioSource::PlayOneShot)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* volumeScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "PlayOneShot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip, volumeScale});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::PlayOneShotHelper
// Il2CppName: PlayOneShotHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(::UnityEngine::AudioClip*, float)>(&UnityEngine::AudioSource::PlayOneShotHelper)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* volumeScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "PlayOneShotHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip, volumeScale});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::PlayClipAtPoint
// Il2CppName: PlayClipAtPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AudioClip*, ::UnityEngine::Vector3, float)>(&UnityEngine::AudioSource::PlayClipAtPoint)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "PlayClipAtPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip, position, volume});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::get_loop
// Il2CppName: get_loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::get_loop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "get_loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_loop
// Il2CppName: set_loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(bool)>(&UnityEngine::AudioSource::set_loop)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::get_playOnAwake
// Il2CppName: get_playOnAwake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::get_playOnAwake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "get_playOnAwake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_playOnAwake
// Il2CppName: set_playOnAwake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(bool)>(&UnityEngine::AudioSource::set_playOnAwake)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_playOnAwake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::get_velocityUpdateMode
// Il2CppName: get_velocityUpdateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioVelocityUpdateMode (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::get_velocityUpdateMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "get_velocityUpdateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_velocityUpdateMode
// Il2CppName: set_velocityUpdateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(::UnityEngine::AudioVelocityUpdateMode)>(&UnityEngine::AudioSource::set_velocityUpdateMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioVelocityUpdateMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_velocityUpdateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_spatialBlend
// Il2CppName: set_spatialBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(float)>(&UnityEngine::AudioSource::set_spatialBlend)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_spatialBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::get_spatializeInternal
// Il2CppName: get_spatializeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::get_spatializeInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "get_spatializeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_spatializeInternal
// Il2CppName: set_spatializeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(bool)>(&UnityEngine::AudioSource::set_spatializeInternal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_spatializeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::get_spatialize
// Il2CppName: get_spatialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::get_spatialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "get_spatialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_spatialize
// Il2CppName: set_spatialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(bool)>(&UnityEngine::AudioSource::set_spatialize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_spatialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_spatializePostEffects
// Il2CppName: set_spatializePostEffects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(bool)>(&UnityEngine::AudioSource::set_spatializePostEffects)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_spatializePostEffects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::SetCustomCurve
// Il2CppName: SetCustomCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(::UnityEngine::AudioSourceCurveType, ::UnityEngine::AnimationCurve*)>(&UnityEngine::AudioSource::SetCustomCurve)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSourceCurveType")->byval_arg;
    static auto* curve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "SetCustomCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, curve});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_dopplerLevel
// Il2CppName: set_dopplerLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(float)>(&UnityEngine::AudioSource::set_dopplerLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_dopplerLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_spread
// Il2CppName: set_spread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(float)>(&UnityEngine::AudioSource::set_spread)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_spread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::get_mute
// Il2CppName: get_mute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::get_mute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "get_mute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_mute
// Il2CppName: set_mute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(bool)>(&UnityEngine::AudioSource::set_mute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_mute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_minDistance
// Il2CppName: set_minDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(float)>(&UnityEngine::AudioSource::set_minDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_minDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_maxDistance
// Il2CppName: set_maxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(float)>(&UnityEngine::AudioSource::set_maxDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_maxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::set_rolloffMode
// Il2CppName: set_rolloffMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(::UnityEngine::AudioRolloffMode)>(&UnityEngine::AudioSource::set_rolloffMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioRolloffMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "set_rolloffMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::GetNumExtensionProperties
// Il2CppName: GetNumExtensionProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::AudioSource::*)()>(&UnityEngine::AudioSource::GetNumExtensionProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "GetNumExtensionProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::ReadExtensionName
// Il2CppName: ReadExtensionName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::PropertyName (UnityEngine::AudioSource::*)(int)>(&UnityEngine::AudioSource::ReadExtensionName)> {
  static const MethodInfo* get() {
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "ReadExtensionName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::INTERNAL_CALL_ReadExtensionName
// Il2CppName: INTERNAL_CALL_ReadExtensionName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AudioSource*, int, ByRef<::UnityEngine::PropertyName>)>(&UnityEngine::AudioSource::INTERNAL_CALL_ReadExtensionName)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->byval_arg;
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "PropertyName")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "INTERNAL_CALL_ReadExtensionName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, sourceIndex, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::ReadExtensionPropertyName
// Il2CppName: ReadExtensionPropertyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::PropertyName (UnityEngine::AudioSource::*)(int)>(&UnityEngine::AudioSource::ReadExtensionPropertyName)> {
  static const MethodInfo* get() {
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "ReadExtensionPropertyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::INTERNAL_CALL_ReadExtensionPropertyName
// Il2CppName: INTERNAL_CALL_ReadExtensionPropertyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AudioSource*, int, ByRef<::UnityEngine::PropertyName>)>(&UnityEngine::AudioSource::INTERNAL_CALL_ReadExtensionPropertyName)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->byval_arg;
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "PropertyName")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "INTERNAL_CALL_ReadExtensionPropertyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, sourceIndex, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::ReadExtensionPropertyValue
// Il2CppName: ReadExtensionPropertyValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::AudioSource::*)(int)>(&UnityEngine::AudioSource::ReadExtensionPropertyValue)> {
  static const MethodInfo* get() {
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "ReadExtensionPropertyValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::ClearExtensionProperties
// Il2CppName: ClearExtensionProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AudioSource::*)(::UnityEngine::PropertyName)>(&UnityEngine::AudioSource::ClearExtensionProperties)> {
  static const MethodInfo* get() {
    static auto* extensionName = &::il2cpp_utils::GetClassFromName("UnityEngine", "PropertyName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "ClearExtensionProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{extensionName});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::INTERNAL_CALL_ClearExtensionProperties
// Il2CppName: INTERNAL_CALL_ClearExtensionProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AudioSource*, ByRef<::UnityEngine::PropertyName>)>(&UnityEngine::AudioSource::INTERNAL_CALL_ClearExtensionProperties)> {
  static const MethodInfo* get() {
    static auto* self = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->byval_arg;
    static auto* extensionName = &::il2cpp_utils::GetClassFromName("UnityEngine", "PropertyName")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "INTERNAL_CALL_ClearExtensionProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{self, extensionName});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::AddSpatializerExtension
// Il2CppName: AddSpatializerExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioSourceExtension* (UnityEngine::AudioSource::*)(::System::Type*)>(&UnityEngine::AudioSource::AddSpatializerExtension)> {
  static const MethodInfo* get() {
    static auto* extensionType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "AddSpatializerExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{extensionType});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::AddAmbisonicExtension
// Il2CppName: AddAmbisonicExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioSourceExtension* (UnityEngine::AudioSource::*)(::System::Type*)>(&UnityEngine::AudioSource::AddAmbisonicExtension)> {
  static const MethodInfo* get() {
    static auto* extensionType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "AddAmbisonicExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{extensionType});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::SetSpatializerFloat
// Il2CppName: SetSpatializerFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AudioSource::*)(int, float)>(&UnityEngine::AudioSource::SetSpatializerFloat)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "SetSpatializerFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::SetAmbisonicDecoderFloat
// Il2CppName: SetAmbisonicDecoderFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AudioSource::*)(int, float)>(&UnityEngine::AudioSource::SetAmbisonicDecoderFloat)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "SetAmbisonicDecoderFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::GetAmbisonicDecoderFloat
// Il2CppName: GetAmbisonicDecoderFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AudioSource::*)(int, ByRef<float>)>(&UnityEngine::AudioSource::GetAmbisonicDecoderFloat)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AudioSource*), "GetAmbisonicDecoderFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::AudioSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
