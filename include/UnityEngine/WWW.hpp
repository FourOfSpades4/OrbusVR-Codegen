// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.CustomYieldInstruction
#include "UnityEngine/CustomYieldInstruction.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Networking
namespace UnityEngine::Networking {
  // Forward declaring type: UnityWebRequest
  class UnityWebRequest;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: WWW
  class WWW;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::WWW);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::WWW*, "UnityEngine", "WWW");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.WWW
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: AA89DC
  class WWW : public ::UnityEngine::CustomYieldInstruction/*, public ::System::IDisposable*/ {
    public:
    public:
    // private UnityEngine.Networking.UnityWebRequest _uwr
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Networking::UnityWebRequest* uwr;
    // Field size check
    static_assert(sizeof(::UnityEngine::Networking::UnityWebRequest*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::Networking::UnityWebRequest*
    constexpr operator ::UnityEngine::Networking::UnityWebRequest*() const noexcept {
      return uwr;
    }
    // Get instance field reference: private UnityEngine.Networking.UnityWebRequest _uwr
    [[deprecated("Use field access instead!")]] ::UnityEngine::Networking::UnityWebRequest*& dyn__uwr();
    // public System.Void .ctor(System.String url)
    // Offset: 0x28A08E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WWW* New_ctor(::StringW url) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::WWW::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WWW*, creationType>(url)));
    }
    // public System.Void .ctor(System.String url, System.Byte[] postData, System.Collections.Hashtable headers)
    // Offset: 0x28A0934
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WWW* New_ctor(::StringW url, ::ArrayW<uint8_t> postData, ::System::Collections::Hashtable* headers) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::WWW::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WWW*, creationType>(url, postData, headers)));
    }
    // public System.Void .ctor(System.String url, System.Byte[] postData, System.Collections.Generic.Dictionary`2<System.String,System.String> headers)
    // Offset: 0x28A0E24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WWW* New_ctor(::StringW url, ::ArrayW<uint8_t> postData, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* headers) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::WWW::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WWW*, creationType>(url, postData, headers)));
    }
    // public System.Byte[] get_bytes()
    // Offset: 0x28A10DC
    ::ArrayW<uint8_t> get_bytes();
    // public System.String get_error()
    // Offset: 0x28A1280
    ::StringW get_error();
    // public System.Boolean get_isDone()
    // Offset: 0x28A13D8
    bool get_isDone();
    // public System.Single get_progress()
    // Offset: 0x28A1408
    float get_progress();
    // public System.String get_text()
    // Offset: 0x28A1444
    ::StringW get_text();
    // private UnityEngine.Texture2D CreateTextureFromDownloadedData(System.Boolean markNonReadable)
    // Offset: 0x28A14EC
    ::UnityEngine::Texture2D* CreateTextureFromDownloadedData(bool markNonReadable);
    // public UnityEngine.Texture2D get_texture()
    // Offset: 0x28A1604
    ::UnityEngine::Texture2D* get_texture();
    // public System.String get_url()
    // Offset: 0x28A160C
    ::StringW get_url();
    // public System.Void Dispose()
    // Offset: 0x28A166C
    void Dispose();
    // private System.Boolean WaitUntilDoneIfPossible()
    // Offset: 0x28A118C
    bool WaitUntilDoneIfPossible();
    // public override System.Boolean get_keepWaiting()
    // Offset: 0x28A163C
    // Implemented from: UnityEngine.CustomYieldInstruction
    // Base method: System.Boolean CustomYieldInstruction::get_keepWaiting()
    bool get_keepWaiting();
  }; // UnityEngine.WWW
  #pragma pack(pop)
  static check_size<sizeof(WWW), 16 + sizeof(::UnityEngine::Networking::UnityWebRequest*)> __UnityEngine_WWWSizeCheck;
  static_assert(sizeof(WWW) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::WWW::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::WWW::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::WWW::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::WWW::get_bytes
// Il2CppName: get_bytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (UnityEngine::WWW::*)()>(&UnityEngine::WWW::get_bytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::WWW*), "get_bytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::WWW::get_error
// Il2CppName: get_error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::WWW::*)()>(&UnityEngine::WWW::get_error)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::WWW*), "get_error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::WWW::get_isDone
// Il2CppName: get_isDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::WWW::*)()>(&UnityEngine::WWW::get_isDone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::WWW*), "get_isDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::WWW::get_progress
// Il2CppName: get_progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::WWW::*)()>(&UnityEngine::WWW::get_progress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::WWW*), "get_progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::WWW::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::WWW::*)()>(&UnityEngine::WWW::get_text)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::WWW*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::WWW::CreateTextureFromDownloadedData
// Il2CppName: CreateTextureFromDownloadedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (UnityEngine::WWW::*)(bool)>(&UnityEngine::WWW::CreateTextureFromDownloadedData)> {
  static const MethodInfo* get() {
    static auto* markNonReadable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::WWW*), "CreateTextureFromDownloadedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{markNonReadable});
  }
};
// Writing MetadataGetter for method: UnityEngine::WWW::get_texture
// Il2CppName: get_texture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (UnityEngine::WWW::*)()>(&UnityEngine::WWW::get_texture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::WWW*), "get_texture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::WWW::get_url
// Il2CppName: get_url
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::WWW::*)()>(&UnityEngine::WWW::get_url)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::WWW*), "get_url", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::WWW::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::WWW::*)()>(&UnityEngine::WWW::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::WWW*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::WWW::WaitUntilDoneIfPossible
// Il2CppName: WaitUntilDoneIfPossible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::WWW::*)()>(&UnityEngine::WWW::WaitUntilDoneIfPossible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::WWW*), "WaitUntilDoneIfPossible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::WWW::get_keepWaiting
// Il2CppName: get_keepWaiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::WWW::*)()>(&UnityEngine::WWW::get_keepWaiting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::WWW*), "get_keepWaiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
