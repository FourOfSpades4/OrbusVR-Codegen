// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.LightmapBakeType
#include "UnityEngine/LightmapBakeType.hpp"
// Including type: UnityEngine.LightmapsMode
#include "UnityEngine/LightmapsMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Skipping declaration: LightmapMixedBakeMode because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MixedLightingMode
  struct MixedLightingMode;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: SupportedRenderingFeatures
  class SupportedRenderingFeatures;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures*, "UnityEngine.Experimental.Rendering", "SupportedRenderingFeatures");
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Experimental.Rendering.SupportedRenderingFeatures
  // [TokenAttribute] Offset: FFFFFFFF
  class SupportedRenderingFeatures : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::ReflectionProbeSupportFlags
    struct ReflectionProbeSupportFlags;
    // Nested type: ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode
    struct LightmapMixedBakeMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/ReflectionProbeSupportFlags
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct ReflectionProbeSupportFlags/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ReflectionProbeSupportFlags
      constexpr ReflectionProbeSupportFlags(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/ReflectionProbeSupportFlags None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/ReflectionProbeSupportFlags None
      static ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::ReflectionProbeSupportFlags _get_None();
      // Set static field: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/ReflectionProbeSupportFlags None
      static void _set_None(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::ReflectionProbeSupportFlags value);
      // static field const value: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/ReflectionProbeSupportFlags Rotation
      static constexpr const int Rotation = 1;
      // Get static field: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/ReflectionProbeSupportFlags Rotation
      static ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::ReflectionProbeSupportFlags _get_Rotation();
      // Set static field: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/ReflectionProbeSupportFlags Rotation
      static void _set_Rotation(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::ReflectionProbeSupportFlags value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/ReflectionProbeSupportFlags
    #pragma pack(pop)
    static check_size<sizeof(SupportedRenderingFeatures::ReflectionProbeSupportFlags), 0 + sizeof(int)> __UnityEngine_Experimental_Rendering_SupportedRenderingFeatures_ReflectionProbeSupportFlagsSizeCheck;
    static_assert(sizeof(SupportedRenderingFeatures::ReflectionProbeSupportFlags) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct LightmapMixedBakeMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: LightmapMixedBakeMode
      constexpr LightmapMixedBakeMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode None
      static ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode _get_None();
      // Set static field: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode None
      static void _set_None(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode value);
      // static field const value: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode IndirectOnly
      static constexpr const int IndirectOnly = 1;
      // Get static field: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode IndirectOnly
      static ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode _get_IndirectOnly();
      // Set static field: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode IndirectOnly
      static void _set_IndirectOnly(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode value);
      // static field const value: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode Subtractive
      static constexpr const int Subtractive = 2;
      // Get static field: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode Subtractive
      static ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode _get_Subtractive();
      // Set static field: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode Subtractive
      static void _set_Subtractive(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode value);
      // static field const value: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode Shadowmask
      static constexpr const int Shadowmask = 4;
      // Get static field: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode Shadowmask
      static ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode _get_Shadowmask();
      // Set static field: static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode Shadowmask
      static void _set_Shadowmask(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode
    #pragma pack(pop)
    static check_size<sizeof(SupportedRenderingFeatures::LightmapMixedBakeMode), 0 + sizeof(int)> __UnityEngine_Experimental_Rendering_SupportedRenderingFeatures_LightmapMixedBakeModeSizeCheck;
    static_assert(sizeof(SupportedRenderingFeatures::LightmapMixedBakeMode) == 0x4);
    public:
    // [CompilerGeneratedAttribute] Offset: 0xA740E8
    // [DebuggerBrowsableAttribute] Offset: 0xA740E8
    // private UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/ReflectionProbeSupportFlags <reflectionProbeSupportFlags>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::ReflectionProbeSupportFlags reflectionProbeSupportFlags;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::ReflectionProbeSupportFlags) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0xA74124
    // [CompilerGeneratedAttribute] Offset: 0xA74124
    // private UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode <defaultMixedLightingMode>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode defaultMixedLightingMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xA74160
    // [DebuggerBrowsableAttribute] Offset: 0xA74160
    // private UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode <supportedMixedLightingModes>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode supportedMixedLightingModes;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xA7419C
    // [DebuggerBrowsableAttribute] Offset: 0xA7419C
    // private UnityEngine.LightmapBakeType <supportedLightmapBakeTypes>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    ::UnityEngine::LightmapBakeType supportedLightmapBakeTypes;
    // Field size check
    static_assert(sizeof(::UnityEngine::LightmapBakeType) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xA741D8
    // [DebuggerBrowsableAttribute] Offset: 0xA741D8
    // private UnityEngine.LightmapsMode <supportedLightmapsModes>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::LightmapsMode supportedLightmapsModes;
    // Field size check
    static_assert(sizeof(::UnityEngine::LightmapsMode) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0xA74214
    // [CompilerGeneratedAttribute] Offset: 0xA74214
    // private System.Boolean <rendererSupportsLightProbeProxyVolumes>k__BackingField
    // Size: 0x1
    // Offset: 0x24
    bool rendererSupportsLightProbeProxyVolumes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xA74250
    // [DebuggerBrowsableAttribute] Offset: 0xA74250
    // private System.Boolean <rendererSupportsMotionVectors>k__BackingField
    // Size: 0x1
    // Offset: 0x25
    bool rendererSupportsMotionVectors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [DebuggerBrowsableAttribute] Offset: 0xA7428C
    // [CompilerGeneratedAttribute] Offset: 0xA7428C
    // private System.Boolean <rendererSupportsReceiveShadows>k__BackingField
    // Size: 0x1
    // Offset: 0x26
    bool rendererSupportsReceiveShadows;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xA742C8
    // [DebuggerBrowsableAttribute] Offset: 0xA742C8
    // private System.Boolean <rendererSupportsReflectionProbes>k__BackingField
    // Size: 0x1
    // Offset: 0x27
    bool rendererSupportsReflectionProbes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [DebuggerBrowsableAttribute] Offset: 0xA74304
    // [CompilerGeneratedAttribute] Offset: 0xA74304
    // private System.Boolean <rendererSupportsRendererPriority>k__BackingField
    // Size: 0x1
    // Offset: 0x28
    bool rendererSupportsRendererPriority;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xA74340
    // [DebuggerBrowsableAttribute] Offset: 0xA74340
    // private System.Boolean <rendererOverridesEnvironmentLighting>k__BackingField
    // Size: 0x1
    // Offset: 0x29
    bool rendererOverridesEnvironmentLighting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xA7437C
    // [DebuggerBrowsableAttribute] Offset: 0xA7437C
    // private System.Boolean <rendererOverridesFog>k__BackingField
    // Size: 0x1
    // Offset: 0x2A
    bool rendererOverridesFog;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xA743B8
    // [DebuggerBrowsableAttribute] Offset: 0xA743B8
    // private System.Boolean <rendererOverridesOtherLightingSettings>k__BackingField
    // Size: 0x1
    // Offset: 0x2B
    bool rendererOverridesOtherLightingSettings;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private UnityEngine.Experimental.Rendering.SupportedRenderingFeatures s_Active
    static ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures* _get_s_Active();
    // Set static field: static private UnityEngine.Experimental.Rendering.SupportedRenderingFeatures s_Active
    static void _set_s_Active(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures* value);
    // Get instance field reference: private UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/ReflectionProbeSupportFlags <reflectionProbeSupportFlags>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::ReflectionProbeSupportFlags& dyn_$reflectionProbeSupportFlags$k__BackingField();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode <defaultMixedLightingMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode& dyn_$defaultMixedLightingMode$k__BackingField();
    // Get instance field reference: private UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode <supportedMixedLightingModes>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode& dyn_$supportedMixedLightingModes$k__BackingField();
    // Get instance field reference: private UnityEngine.LightmapBakeType <supportedLightmapBakeTypes>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::LightmapBakeType& dyn_$supportedLightmapBakeTypes$k__BackingField();
    // Get instance field reference: private UnityEngine.LightmapsMode <supportedLightmapsModes>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::LightmapsMode& dyn_$supportedLightmapsModes$k__BackingField();
    // Get instance field reference: private System.Boolean <rendererSupportsLightProbeProxyVolumes>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$rendererSupportsLightProbeProxyVolumes$k__BackingField();
    // Get instance field reference: private System.Boolean <rendererSupportsMotionVectors>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$rendererSupportsMotionVectors$k__BackingField();
    // Get instance field reference: private System.Boolean <rendererSupportsReceiveShadows>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$rendererSupportsReceiveShadows$k__BackingField();
    // Get instance field reference: private System.Boolean <rendererSupportsReflectionProbes>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$rendererSupportsReflectionProbes$k__BackingField();
    // Get instance field reference: private System.Boolean <rendererSupportsRendererPriority>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$rendererSupportsRendererPriority$k__BackingField();
    // Get instance field reference: private System.Boolean <rendererOverridesEnvironmentLighting>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$rendererOverridesEnvironmentLighting$k__BackingField();
    // Get instance field reference: private System.Boolean <rendererOverridesFog>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$rendererOverridesFog$k__BackingField();
    // Get instance field reference: private System.Boolean <rendererOverridesOtherLightingSettings>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$rendererOverridesOtherLightingSettings$k__BackingField();
    // public System.Void .ctor()
    // Offset: 0x1CB6728
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SupportedRenderingFeatures* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SupportedRenderingFeatures*, creationType>()));
    }
    // static public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures get_active()
    // Offset: 0x1CB7344
    static ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures* get_active();
    // static public System.Void set_active(UnityEngine.Experimental.Rendering.SupportedRenderingFeatures value)
    // Offset: 0x1CB6750
    static void set_active(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures* value);
    // public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode get_defaultMixedLightingMode()
    // Offset: 0x1CB7428
    ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode get_defaultMixedLightingMode();
    // public UnityEngine.Experimental.Rendering.SupportedRenderingFeatures/LightmapMixedBakeMode get_supportedMixedLightingModes()
    // Offset: 0x1CB7430
    ::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode get_supportedMixedLightingModes();
    // public UnityEngine.LightmapBakeType get_supportedLightmapBakeTypes()
    // Offset: 0x1CB7438
    ::UnityEngine::LightmapBakeType get_supportedLightmapBakeTypes();
    // public UnityEngine.LightmapsMode get_supportedLightmapsModes()
    // Offset: 0x1CB7440
    ::UnityEngine::LightmapsMode get_supportedLightmapsModes();
    // static System.Void FallbackMixedLightingModeByRef(System.IntPtr fallbackModePtr)
    // Offset: 0x1CB7448
    static void FallbackMixedLightingModeByRef(::System::IntPtr fallbackModePtr);
    // static System.Boolean IsMixedLightingModeSupported(UnityEngine.MixedLightingMode mixedMode)
    // Offset: 0x1CB75D8
    static bool IsMixedLightingModeSupported(::UnityEngine::MixedLightingMode mixedMode);
    // static System.Void IsMixedLightingModeSupportedByRef(UnityEngine.MixedLightingMode mixedMode, System.IntPtr isSupportedPtr)
    // Offset: 0x1CB7668
    static void IsMixedLightingModeSupportedByRef(::UnityEngine::MixedLightingMode mixedMode, ::System::IntPtr isSupportedPtr);
    // static System.Boolean IsLightmapBakeTypeSupported(UnityEngine.LightmapBakeType bakeType)
    // Offset: 0x1CB77AC
    static bool IsLightmapBakeTypeSupported(::UnityEngine::LightmapBakeType bakeType);
    // static System.Void IsLightmapBakeTypeSupportedByRef(UnityEngine.LightmapBakeType bakeType, System.IntPtr isSupportedPtr)
    // Offset: 0x1CB783C
    static void IsLightmapBakeTypeSupportedByRef(::UnityEngine::LightmapBakeType bakeType, ::System::IntPtr isSupportedPtr);
    // static System.Void IsLightmapsModeSupportedByRef(UnityEngine.LightmapsMode mode, System.IntPtr isSupportedPtr)
    // Offset: 0x1CB7944
    static void IsLightmapsModeSupportedByRef(::UnityEngine::LightmapsMode mode, ::System::IntPtr isSupportedPtr);
    // static private System.Void .cctor()
    // Offset: 0x1CB79E4
    static void _cctor();
  }; // UnityEngine.Experimental.Rendering.SupportedRenderingFeatures
  #pragma pack(pop)
  static check_size<sizeof(SupportedRenderingFeatures), 43 + sizeof(bool)> __UnityEngine_Experimental_Rendering_SupportedRenderingFeaturesSizeCheck;
  static_assert(sizeof(SupportedRenderingFeatures) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode, "UnityEngine.Experimental.Rendering", "SupportedRenderingFeatures/LightmapMixedBakeMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::ReflectionProbeSupportFlags, "UnityEngine.Experimental.Rendering", "SupportedRenderingFeatures/ReflectionProbeSupportFlags");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::get_active
// Il2CppName: get_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures* (*)()>(&UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::get_active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::SupportedRenderingFeatures*), "get_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::set_active
// Il2CppName: set_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures*)>(&UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::set_active)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "SupportedRenderingFeatures")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::SupportedRenderingFeatures*), "set_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::get_defaultMixedLightingMode
// Il2CppName: get_defaultMixedLightingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode (UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::*)()>(&UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::get_defaultMixedLightingMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::SupportedRenderingFeatures*), "get_defaultMixedLightingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::get_supportedMixedLightingModes
// Il2CppName: get_supportedMixedLightingModes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::LightmapMixedBakeMode (UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::*)()>(&UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::get_supportedMixedLightingModes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::SupportedRenderingFeatures*), "get_supportedMixedLightingModes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::get_supportedLightmapBakeTypes
// Il2CppName: get_supportedLightmapBakeTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LightmapBakeType (UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::*)()>(&UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::get_supportedLightmapBakeTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::SupportedRenderingFeatures*), "get_supportedLightmapBakeTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::get_supportedLightmapsModes
// Il2CppName: get_supportedLightmapsModes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LightmapsMode (UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::*)()>(&UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::get_supportedLightmapsModes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::SupportedRenderingFeatures*), "get_supportedLightmapsModes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::FallbackMixedLightingModeByRef
// Il2CppName: FallbackMixedLightingModeByRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::FallbackMixedLightingModeByRef)> {
  static const MethodInfo* get() {
    static auto* fallbackModePtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::SupportedRenderingFeatures*), "FallbackMixedLightingModeByRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fallbackModePtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::IsMixedLightingModeSupported
// Il2CppName: IsMixedLightingModeSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::MixedLightingMode)>(&UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::IsMixedLightingModeSupported)> {
  static const MethodInfo* get() {
    static auto* mixedMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "MixedLightingMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::SupportedRenderingFeatures*), "IsMixedLightingModeSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mixedMode});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::IsMixedLightingModeSupportedByRef
// Il2CppName: IsMixedLightingModeSupportedByRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::MixedLightingMode, ::System::IntPtr)>(&UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::IsMixedLightingModeSupportedByRef)> {
  static const MethodInfo* get() {
    static auto* mixedMode = &::il2cpp_utils::GetClassFromName("UnityEngine", "MixedLightingMode")->byval_arg;
    static auto* isSupportedPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::SupportedRenderingFeatures*), "IsMixedLightingModeSupportedByRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mixedMode, isSupportedPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::IsLightmapBakeTypeSupported
// Il2CppName: IsLightmapBakeTypeSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::LightmapBakeType)>(&UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::IsLightmapBakeTypeSupported)> {
  static const MethodInfo* get() {
    static auto* bakeType = &::il2cpp_utils::GetClassFromName("UnityEngine", "LightmapBakeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::SupportedRenderingFeatures*), "IsLightmapBakeTypeSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bakeType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::IsLightmapBakeTypeSupportedByRef
// Il2CppName: IsLightmapBakeTypeSupportedByRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::LightmapBakeType, ::System::IntPtr)>(&UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::IsLightmapBakeTypeSupportedByRef)> {
  static const MethodInfo* get() {
    static auto* bakeType = &::il2cpp_utils::GetClassFromName("UnityEngine", "LightmapBakeType")->byval_arg;
    static auto* isSupportedPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::SupportedRenderingFeatures*), "IsLightmapBakeTypeSupportedByRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bakeType, isSupportedPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::IsLightmapsModeSupportedByRef
// Il2CppName: IsLightmapsModeSupportedByRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::LightmapsMode, ::System::IntPtr)>(&UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::IsLightmapsModeSupportedByRef)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "LightmapsMode")->byval_arg;
    static auto* isSupportedPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::SupportedRenderingFeatures*), "IsLightmapsModeSupportedByRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode, isSupportedPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Experimental::Rendering::SupportedRenderingFeatures::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::SupportedRenderingFeatures*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
