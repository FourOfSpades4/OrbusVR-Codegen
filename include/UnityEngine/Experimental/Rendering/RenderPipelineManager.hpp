// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: IRenderPipelineAsset
  class IRenderPipelineAsset;
  // Forward declaring type: IRenderPipeline
  class IRenderPipeline;
  // Forward declaring type: ScriptableRenderContext
  struct ScriptableRenderContext;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Forward declaring type: RenderPipelineManager
  class RenderPipelineManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::Rendering::RenderPipelineManager);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Rendering::RenderPipelineManager*, "UnityEngine.Experimental.Rendering", "RenderPipelineManager");
// Type namespace: UnityEngine.Experimental.Rendering
namespace UnityEngine::Experimental::Rendering {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Experimental.Rendering.RenderPipelineManager
  // [TokenAttribute] Offset: FFFFFFFF
  class RenderPipelineManager : public ::Il2CppObject {
    public:
    // Get static field: static private UnityEngine.Experimental.Rendering.IRenderPipelineAsset s_CurrentPipelineAsset
    static ::UnityEngine::Experimental::Rendering::IRenderPipelineAsset* _get_s_CurrentPipelineAsset();
    // Set static field: static private UnityEngine.Experimental.Rendering.IRenderPipelineAsset s_CurrentPipelineAsset
    static void _set_s_CurrentPipelineAsset(::UnityEngine::Experimental::Rendering::IRenderPipelineAsset* value);
    // Get static field: static private UnityEngine.Camera[] s_Cameras
    static ::ArrayW<::UnityEngine::Camera*> _get_s_Cameras();
    // Set static field: static private UnityEngine.Camera[] s_Cameras
    static void _set_s_Cameras(::ArrayW<::UnityEngine::Camera*> value);
    // Get static field: static private System.Int32 s_CameraCapacity
    static int _get_s_CameraCapacity();
    // Set static field: static private System.Int32 s_CameraCapacity
    static void _set_s_CameraCapacity(int value);
    // [CompilerGeneratedAttribute] Offset: 0xA740AC
    // [DebuggerBrowsableAttribute] Offset: 0xA740AC
    // Get static field: static private UnityEngine.Experimental.Rendering.IRenderPipeline <currentPipeline>k__BackingField
    static ::UnityEngine::Experimental::Rendering::IRenderPipeline* _get_$currentPipeline$k__BackingField();
    // Set static field: static private UnityEngine.Experimental.Rendering.IRenderPipeline <currentPipeline>k__BackingField
    static void _set_$currentPipeline$k__BackingField(::UnityEngine::Experimental::Rendering::IRenderPipeline* value);
    // static public UnityEngine.Experimental.Rendering.IRenderPipeline get_currentPipeline()
    // Offset: 0x1CB64DC
    static ::UnityEngine::Experimental::Rendering::IRenderPipeline* get_currentPipeline();
    // static private System.Void set_currentPipeline(UnityEngine.Experimental.Rendering.IRenderPipeline value)
    // Offset: 0x1CB6544
    static void set_currentPipeline(::UnityEngine::Experimental::Rendering::IRenderPipeline* value);
    // static System.Void CleanupRenderPipeline()
    // Offset: 0x1CB65B0
    static void CleanupRenderPipeline();
    // static private System.Void GetCameras(UnityEngine.Experimental.Rendering.ScriptableRenderContext context)
    // Offset: 0x1CB67BC
    static void GetCameras(::UnityEngine::Experimental::Rendering::ScriptableRenderContext context);
    // static private System.Void DoRenderLoop_Internal(UnityEngine.Experimental.Rendering.IRenderPipelineAsset pipe, System.IntPtr loopPtr)
    // Offset: 0x1CB69B0
    static void DoRenderLoop_Internal(::UnityEngine::Experimental::Rendering::IRenderPipelineAsset* pipe, ::System::IntPtr loopPtr);
    // static private System.Void PrepareRenderPipeline(UnityEngine.Experimental.Rendering.IRenderPipelineAsset pipe)
    // Offset: 0x1CB6B40
    static void PrepareRenderPipeline(::UnityEngine::Experimental::Rendering::IRenderPipelineAsset* pipe);
    // static private System.Void .cctor()
    // Offset: 0x1CB6D9C
    static void _cctor();
  }; // UnityEngine.Experimental.Rendering.RenderPipelineManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderPipelineManager::get_currentPipeline
// Il2CppName: get_currentPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Experimental::Rendering::IRenderPipeline* (*)()>(&UnityEngine::Experimental::Rendering::RenderPipelineManager::get_currentPipeline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderPipelineManager*), "get_currentPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderPipelineManager::set_currentPipeline
// Il2CppName: set_currentPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Experimental::Rendering::IRenderPipeline*)>(&UnityEngine::Experimental::Rendering::RenderPipelineManager::set_currentPipeline)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "IRenderPipeline")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderPipelineManager*), "set_currentPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderPipelineManager::CleanupRenderPipeline
// Il2CppName: CleanupRenderPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Experimental::Rendering::RenderPipelineManager::CleanupRenderPipeline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderPipelineManager*), "CleanupRenderPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderPipelineManager::GetCameras
// Il2CppName: GetCameras
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Experimental::Rendering::ScriptableRenderContext)>(&UnityEngine::Experimental::Rendering::RenderPipelineManager::GetCameras)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "ScriptableRenderContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderPipelineManager*), "GetCameras", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderPipelineManager::DoRenderLoop_Internal
// Il2CppName: DoRenderLoop_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Experimental::Rendering::IRenderPipelineAsset*, ::System::IntPtr)>(&UnityEngine::Experimental::Rendering::RenderPipelineManager::DoRenderLoop_Internal)> {
  static const MethodInfo* get() {
    static auto* pipe = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "IRenderPipelineAsset")->byval_arg;
    static auto* loopPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderPipelineManager*), "DoRenderLoop_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pipe, loopPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderPipelineManager::PrepareRenderPipeline
// Il2CppName: PrepareRenderPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Experimental::Rendering::IRenderPipelineAsset*)>(&UnityEngine::Experimental::Rendering::RenderPipelineManager::PrepareRenderPipeline)> {
  static const MethodInfo* get() {
    static auto* pipe = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Rendering", "IRenderPipelineAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderPipelineManager*), "PrepareRenderPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pipe});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Rendering::RenderPipelineManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Experimental::Rendering::RenderPipelineManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Rendering::RenderPipelineManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
