// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Experimental.ISubsystemDescriptor
#include "UnityEngine/Experimental/ISubsystemDescriptor.hpp"
// Including type: UnityEngine.Experimental.ISubsystemDescriptorImpl
#include "UnityEngine/Experimental/ISubsystemDescriptorImpl.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.Experimental
namespace UnityEngine::Experimental {
  // Forward declaring type: IntegratedSubsystemDescriptor
  class IntegratedSubsystemDescriptor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::IntegratedSubsystemDescriptor);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::IntegratedSubsystemDescriptor*, "UnityEngine.Experimental", "IntegratedSubsystemDescriptor");
// Type namespace: UnityEngine.Experimental
namespace UnityEngine::Experimental {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Experimental.IntegratedSubsystemDescriptor
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: A8E8FC
  class IntegratedSubsystemDescriptor : public ::Il2CppObject/*, public ::UnityEngine::Experimental::ISubsystemDescriptor, public ::UnityEngine::Experimental::ISubsystemDescriptorImpl*/ {
    public:
    public:
    // System.IntPtr m_Ptr
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr m_Ptr;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::Experimental::ISubsystemDescriptor
    operator ::UnityEngine::Experimental::ISubsystemDescriptor() noexcept {
      return *reinterpret_cast<::UnityEngine::Experimental::ISubsystemDescriptor*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Experimental::ISubsystemDescriptorImpl
    operator ::UnityEngine::Experimental::ISubsystemDescriptorImpl() noexcept {
      return *reinterpret_cast<::UnityEngine::Experimental::ISubsystemDescriptorImpl*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return m_Ptr;
    }
    // Get instance field reference: System.IntPtr m_Ptr
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_m_Ptr();
    // public System.Void .ctor()
    // Offset: 0x287DBA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IntegratedSubsystemDescriptor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::IntegratedSubsystemDescriptor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IntegratedSubsystemDescriptor*, creationType>()));
    }
    // private System.Void UnityEngine.Experimental.ISubsystemDescriptorImpl.set_ptr(System.IntPtr value)
    // Offset: 0x287DBAC
    void UnityEngine_Experimental_ISubsystemDescriptorImpl_set_ptr(::System::IntPtr value);
  }; // UnityEngine.Experimental.IntegratedSubsystemDescriptor
  #pragma pack(pop)
  static check_size<sizeof(IntegratedSubsystemDescriptor), 16 + sizeof(::System::IntPtr)> __UnityEngine_Experimental_IntegratedSubsystemDescriptorSizeCheck;
  static_assert(sizeof(IntegratedSubsystemDescriptor) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::IntegratedSubsystemDescriptor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Experimental::IntegratedSubsystemDescriptor::UnityEngine_Experimental_ISubsystemDescriptorImpl_set_ptr
// Il2CppName: UnityEngine.Experimental.ISubsystemDescriptorImpl.set_ptr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::IntegratedSubsystemDescriptor::*)(::System::IntPtr)>(&UnityEngine::Experimental::IntegratedSubsystemDescriptor::UnityEngine_Experimental_ISubsystemDescriptorImpl_set_ptr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::IntegratedSubsystemDescriptor*), "UnityEngine.Experimental.ISubsystemDescriptorImpl.set_ptr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
