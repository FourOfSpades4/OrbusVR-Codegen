// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Experimental.Animations.IAnimationJobPlayable
#include "UnityEngine/Experimental/Animations/IAnimationJobPlayable.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Playables.PlayableHandle
#include "UnityEngine/Playables/PlayableHandle.hpp"
// Completed includes
// Type namespace: UnityEngine.Experimental.Animations
namespace UnityEngine::Experimental::Animations {
  // Forward declaring type: AnimationScriptPlayable
  struct AnimationScriptPlayable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::Animations::AnimationScriptPlayable, "UnityEngine.Experimental.Animations", "AnimationScriptPlayable");
// Type namespace: UnityEngine.Experimental.Animations
namespace UnityEngine::Experimental::Animations {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Experimental.Animations.AnimationScriptPlayable
  // [TokenAttribute] Offset: FFFFFFFF
  // [StaticAccessorAttribute] Offset: A92C38
  // [RequiredByNativeCodeAttribute] Offset: A92C38
  // [NativeHeaderAttribute] Offset: A92C38
  // [NativeHeaderAttribute] Offset: A92C38
  // [NativeHeaderAttribute] Offset: A92C38
  struct AnimationScriptPlayable/*, public ::System::ValueType, public ::UnityEngine::Experimental::Animations::IAnimationJobPlayable, public ::System::IEquatable_1<::UnityEngine::Experimental::Animations::AnimationScriptPlayable>*/ {
    public:
    public:
    // private UnityEngine.Playables.PlayableHandle m_Handle
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Playables::PlayableHandle m_Handle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableHandle) == 0xC);
    public:
    // Creating value type constructor for type: AnimationScriptPlayable
    constexpr AnimationScriptPlayable(::UnityEngine::Playables::PlayableHandle m_Handle_ = {}) noexcept : m_Handle{m_Handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Experimental::Animations::IAnimationJobPlayable
    operator ::UnityEngine::Experimental::Animations::IAnimationJobPlayable() noexcept {
      return *reinterpret_cast<::UnityEngine::Experimental::Animations::IAnimationJobPlayable*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Experimental::Animations::AnimationScriptPlayable>
    operator ::System::IEquatable_1<::UnityEngine::Experimental::Animations::AnimationScriptPlayable>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Experimental::Animations::AnimationScriptPlayable>*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::Playables::PlayableHandle
    constexpr operator ::UnityEngine::Playables::PlayableHandle() const noexcept {
      return m_Handle;
    }
    // Get static field: static private readonly UnityEngine.Experimental.Animations.AnimationScriptPlayable m_NullPlayable
    static ::UnityEngine::Experimental::Animations::AnimationScriptPlayable _get_m_NullPlayable();
    // Set static field: static private readonly UnityEngine.Experimental.Animations.AnimationScriptPlayable m_NullPlayable
    static void _set_m_NullPlayable(::UnityEngine::Experimental::Animations::AnimationScriptPlayable value);
    // Get instance field reference: private UnityEngine.Playables.PlayableHandle m_Handle
    [[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableHandle& dyn_m_Handle();
    // System.Void .ctor(UnityEngine.Playables.PlayableHandle handle)
    // Offset: 0xBD1E28
    // ABORTED: conflicts with another method.  AnimationScriptPlayable(::UnityEngine::Playables::PlayableHandle handle);
    // public UnityEngine.Playables.PlayableHandle GetHandle()
    // Offset: 0xBD1E30
    ::UnityEngine::Playables::PlayableHandle GetHandle();
    // public System.Boolean Equals(UnityEngine.Experimental.Animations.AnimationScriptPlayable other)
    // Offset: 0xBD1E3C
    bool Equals(::UnityEngine::Experimental::Animations::AnimationScriptPlayable other);
    // static private System.Void .cctor()
    // Offset: 0x2864494
    static void _cctor();
  }; // UnityEngine.Experimental.Animations.AnimationScriptPlayable
  #pragma pack(pop)
  static check_size<sizeof(AnimationScriptPlayable), 0 + sizeof(::UnityEngine::Playables::PlayableHandle)> __UnityEngine_Experimental_Animations_AnimationScriptPlayableSizeCheck;
  static_assert(sizeof(AnimationScriptPlayable) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::Animations::AnimationScriptPlayable::AnimationScriptPlayable
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Experimental::Animations::AnimationScriptPlayable::GetHandle
// Il2CppName: GetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::PlayableHandle (UnityEngine::Experimental::Animations::AnimationScriptPlayable::*)()>(&UnityEngine::Experimental::Animations::AnimationScriptPlayable::GetHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Animations::AnimationScriptPlayable), "GetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Animations::AnimationScriptPlayable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Experimental::Animations::AnimationScriptPlayable::*)(::UnityEngine::Experimental::Animations::AnimationScriptPlayable)>(&UnityEngine::Experimental::Animations::AnimationScriptPlayable::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.Animations", "AnimationScriptPlayable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Animations::AnimationScriptPlayable), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::Animations::AnimationScriptPlayable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Experimental::Animations::AnimationScriptPlayable::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::Animations::AnimationScriptPlayable), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
