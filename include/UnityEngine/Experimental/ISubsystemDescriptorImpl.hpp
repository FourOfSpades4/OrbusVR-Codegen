// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental
namespace UnityEngine::Experimental {
  // Forward declaring type: ISubsystemDescriptorImpl
  class ISubsystemDescriptorImpl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::ISubsystemDescriptorImpl);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::ISubsystemDescriptorImpl*, "UnityEngine.Experimental", "ISubsystemDescriptorImpl");
// Type namespace: UnityEngine.Experimental
namespace UnityEngine::Experimental {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Experimental.ISubsystemDescriptorImpl
  // [TokenAttribute] Offset: FFFFFFFF
  class ISubsystemDescriptorImpl {
    public:
    // public System.Void set_ptr(System.IntPtr value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_ptr(::System::IntPtr value);
  }; // UnityEngine.Experimental.ISubsystemDescriptorImpl
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::ISubsystemDescriptorImpl::set_ptr
// Il2CppName: set_ptr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::ISubsystemDescriptorImpl::*)(::System::IntPtr)>(&UnityEngine::Experimental::ISubsystemDescriptorImpl::set_ptr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::ISubsystemDescriptorImpl*), "set_ptr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
