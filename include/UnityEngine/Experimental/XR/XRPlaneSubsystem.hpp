// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Experimental.IntegratedSubsystem`1
#include "UnityEngine/Experimental/IntegratedSubsystem_1.hpp"
// Including type: UnityEngine.Experimental.XR.PlaneAddedEventArgs
#include "UnityEngine/Experimental/XR/PlaneAddedEventArgs.hpp"
// Including type: UnityEngine.Experimental.XR.PlaneUpdatedEventArgs
#include "UnityEngine/Experimental/XR/PlaneUpdatedEventArgs.hpp"
// Including type: UnityEngine.Experimental.XR.PlaneRemovedEventArgs
#include "UnityEngine/Experimental/XR/PlaneRemovedEventArgs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::XR
namespace UnityEngine::Experimental::XR {
  // Forward declaring type: XRPlaneSubsystemDescriptor
  class XRPlaneSubsystemDescriptor;
  // Skipping declaration: BoundedPlane because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.XR
namespace UnityEngine::Experimental::XR {
  // Forward declaring type: XRPlaneSubsystem
  class XRPlaneSubsystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::XR::XRPlaneSubsystem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::XR::XRPlaneSubsystem*, "UnityEngine.Experimental.XR", "XRPlaneSubsystem");
// Type namespace: UnityEngine.Experimental.XR
namespace UnityEngine::Experimental::XR {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Experimental.XR.XRPlaneSubsystem
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: A8F094
  // [UsedByNativeCodeAttribute] Offset: A8F094
  // [NativeHeaderAttribute] Offset: A8F094
  // [NativeConditionalAttribute] Offset: A8F094
  class XRPlaneSubsystem : public ::UnityEngine::Experimental::IntegratedSubsystem_1<::UnityEngine::Experimental::XR::XRPlaneSubsystemDescriptor*> {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xA8FA1C
    // [DebuggerBrowsableAttribute] Offset: 0xA8FA1C
    // private System.Action`1<UnityEngine.Experimental.XR.PlaneAddedEventArgs> PlaneAdded
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_1<::UnityEngine::Experimental::XR::PlaneAddedEventArgs>* PlaneAdded;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Experimental::XR::PlaneAddedEventArgs>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xA8FA58
    // [DebuggerBrowsableAttribute] Offset: 0xA8FA58
    // private System.Action`1<UnityEngine.Experimental.XR.PlaneUpdatedEventArgs> PlaneUpdated
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_1<::UnityEngine::Experimental::XR::PlaneUpdatedEventArgs>* PlaneUpdated;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Experimental::XR::PlaneUpdatedEventArgs>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xA8FA94
    // [DebuggerBrowsableAttribute] Offset: 0xA8FA94
    // private System.Action`1<UnityEngine.Experimental.XR.PlaneRemovedEventArgs> PlaneRemoved
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<::UnityEngine::Experimental::XR::PlaneRemovedEventArgs>* PlaneRemoved;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Experimental::XR::PlaneRemovedEventArgs>*) == 0x8);
    public:
    // Get instance field reference: private System.Action`1<UnityEngine.Experimental.XR.PlaneAddedEventArgs> PlaneAdded
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Experimental::XR::PlaneAddedEventArgs>*& dyn_PlaneAdded();
    // Get instance field reference: private System.Action`1<UnityEngine.Experimental.XR.PlaneUpdatedEventArgs> PlaneUpdated
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Experimental::XR::PlaneUpdatedEventArgs>*& dyn_PlaneUpdated();
    // Get instance field reference: private System.Action`1<UnityEngine.Experimental.XR.PlaneRemovedEventArgs> PlaneRemoved
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Experimental::XR::PlaneRemovedEventArgs>*& dyn_PlaneRemoved();
    // private System.Void InvokePlaneAddedEvent(UnityEngine.Experimental.XR.BoundedPlane plane)
    // Offset: 0x287F330
    void InvokePlaneAddedEvent(::UnityEngine::Experimental::XR::BoundedPlane plane);
    // private System.Void InvokePlaneUpdatedEvent(UnityEngine.Experimental.XR.BoundedPlane plane)
    // Offset: 0x287F3D0
    void InvokePlaneUpdatedEvent(::UnityEngine::Experimental::XR::BoundedPlane plane);
    // private System.Void InvokePlaneRemovedEvent(UnityEngine.Experimental.XR.BoundedPlane removedPlane)
    // Offset: 0x287F470
    void InvokePlaneRemovedEvent(::UnityEngine::Experimental::XR::BoundedPlane removedPlane);
    // public System.Void .ctor()
    // Offset: 0x287F2E0
    // Implemented from: UnityEngine.Experimental.IntegratedSubsystem`1
    // Base method: System.Void IntegratedSubsystem_1::.ctor()
    // Base method: System.Void IntegratedSubsystem::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRPlaneSubsystem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::XR::XRPlaneSubsystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRPlaneSubsystem*, creationType>()));
    }
  }; // UnityEngine.Experimental.XR.XRPlaneSubsystem
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::XR::XRPlaneSubsystem::InvokePlaneAddedEvent
// Il2CppName: InvokePlaneAddedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::XR::XRPlaneSubsystem::*)(::UnityEngine::Experimental::XR::BoundedPlane)>(&UnityEngine::Experimental::XR::XRPlaneSubsystem::InvokePlaneAddedEvent)> {
  static const MethodInfo* get() {
    static auto* plane = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.XR", "BoundedPlane")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::XR::XRPlaneSubsystem*), "InvokePlaneAddedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{plane});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::XR::XRPlaneSubsystem::InvokePlaneUpdatedEvent
// Il2CppName: InvokePlaneUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::XR::XRPlaneSubsystem::*)(::UnityEngine::Experimental::XR::BoundedPlane)>(&UnityEngine::Experimental::XR::XRPlaneSubsystem::InvokePlaneUpdatedEvent)> {
  static const MethodInfo* get() {
    static auto* plane = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.XR", "BoundedPlane")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::XR::XRPlaneSubsystem*), "InvokePlaneUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{plane});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::XR::XRPlaneSubsystem::InvokePlaneRemovedEvent
// Il2CppName: InvokePlaneRemovedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::XR::XRPlaneSubsystem::*)(::UnityEngine::Experimental::XR::BoundedPlane)>(&UnityEngine::Experimental::XR::XRPlaneSubsystem::InvokePlaneRemovedEvent)> {
  static const MethodInfo* get() {
    static auto* removedPlane = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.XR", "BoundedPlane")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::XR::XRPlaneSubsystem*), "InvokePlaneRemovedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{removedPlane});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::XR::XRPlaneSubsystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
