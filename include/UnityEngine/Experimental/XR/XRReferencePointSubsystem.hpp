// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Experimental.IntegratedSubsystem`1
#include "UnityEngine/Experimental/IntegratedSubsystem_1.hpp"
// Including type: UnityEngine.Experimental.XR.ReferencePointUpdatedEventArgs
#include "UnityEngine/Experimental/XR/ReferencePointUpdatedEventArgs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::XR
namespace UnityEngine::Experimental::XR {
  // Forward declaring type: XRReferencePointSubsystemDescriptor
  class XRReferencePointSubsystemDescriptor;
  // Skipping declaration: ReferencePoint because it is already included!
  // Skipping declaration: TrackingState because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Pose because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.XR
namespace UnityEngine::Experimental::XR {
  // Forward declaring type: XRReferencePointSubsystem
  class XRReferencePointSubsystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::XR::XRReferencePointSubsystem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::XR::XRReferencePointSubsystem*, "UnityEngine.Experimental.XR", "XRReferencePointSubsystem");
// Type namespace: UnityEngine.Experimental.XR
namespace UnityEngine::Experimental::XR {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Experimental.XR.XRReferencePointSubsystem
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: A8F24C
  // [NativeConditionalAttribute] Offset: A8F24C
  // [NativeHeaderAttribute] Offset: A8F24C
  // [UsedByNativeCodeAttribute] Offset: A8F24C
  class XRReferencePointSubsystem : public ::UnityEngine::Experimental::IntegratedSubsystem_1<::UnityEngine::Experimental::XR::XRReferencePointSubsystemDescriptor*> {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xA8FC38
    // [DebuggerBrowsableAttribute] Offset: 0xA8FC38
    // private System.Action`1<UnityEngine.Experimental.XR.ReferencePointUpdatedEventArgs> ReferencePointUpdated
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_1<::UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs>* ReferencePointUpdated;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Action_1<::UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs>*
    constexpr operator ::System::Action_1<::UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs>*() const noexcept {
      return ReferencePointUpdated;
    }
    // Get instance field reference: private System.Action`1<UnityEngine.Experimental.XR.ReferencePointUpdatedEventArgs> ReferencePointUpdated
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs>*& dyn_ReferencePointUpdated();
    // private System.Void InvokeReferencePointUpdatedEvent(UnityEngine.Experimental.XR.ReferencePoint updatedReferencePoint, UnityEngine.Experimental.XR.TrackingState previousTrackingState, UnityEngine.Pose previousPose)
    // Offset: 0x287F5B0
    void InvokeReferencePointUpdatedEvent(::UnityEngine::Experimental::XR::ReferencePoint updatedReferencePoint, ::UnityEngine::Experimental::XR::TrackingState previousTrackingState, ::UnityEngine::Pose previousPose);
    // public System.Void .ctor()
    // Offset: 0x287F560
    // Implemented from: UnityEngine.Experimental.IntegratedSubsystem`1
    // Base method: System.Void IntegratedSubsystem_1::.ctor()
    // Base method: System.Void IntegratedSubsystem::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRReferencePointSubsystem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::XR::XRReferencePointSubsystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRReferencePointSubsystem*, creationType>()));
    }
  }; // UnityEngine.Experimental.XR.XRReferencePointSubsystem
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::XR::XRReferencePointSubsystem::InvokeReferencePointUpdatedEvent
// Il2CppName: InvokeReferencePointUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::XR::XRReferencePointSubsystem::*)(::UnityEngine::Experimental::XR::ReferencePoint, ::UnityEngine::Experimental::XR::TrackingState, ::UnityEngine::Pose)>(&UnityEngine::Experimental::XR::XRReferencePointSubsystem::InvokeReferencePointUpdatedEvent)> {
  static const MethodInfo* get() {
    static auto* updatedReferencePoint = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.XR", "ReferencePoint")->byval_arg;
    static auto* previousTrackingState = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.XR", "TrackingState")->byval_arg;
    static auto* previousPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::XR::XRReferencePointSubsystem*), "InvokeReferencePointUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updatedReferencePoint, previousTrackingState, previousPose});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::XR::XRReferencePointSubsystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
