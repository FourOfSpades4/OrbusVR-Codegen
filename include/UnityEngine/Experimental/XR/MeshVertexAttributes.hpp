// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: UnityEngine.Experimental.XR
namespace UnityEngine::Experimental::XR {
  // Forward declaring type: MeshVertexAttributes
  struct MeshVertexAttributes;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::XR::MeshVertexAttributes, "UnityEngine.Experimental.XR", "MeshVertexAttributes");
// Type namespace: UnityEngine.Experimental.XR
namespace UnityEngine::Experimental::XR {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Experimental.XR.MeshVertexAttributes
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: A8EE38
  // [UsedByNativeCodeAttribute] Offset: A8EE38
  struct MeshVertexAttributes/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: MeshVertexAttributes
    constexpr MeshVertexAttributes(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public UnityEngine.Experimental.XR.MeshVertexAttributes None
    static constexpr const int None = 0;
    // Get static field: static public UnityEngine.Experimental.XR.MeshVertexAttributes None
    static ::UnityEngine::Experimental::XR::MeshVertexAttributes _get_None();
    // Set static field: static public UnityEngine.Experimental.XR.MeshVertexAttributes None
    static void _set_None(::UnityEngine::Experimental::XR::MeshVertexAttributes value);
    // static field const value: static public UnityEngine.Experimental.XR.MeshVertexAttributes Normals
    static constexpr const int Normals = 1;
    // Get static field: static public UnityEngine.Experimental.XR.MeshVertexAttributes Normals
    static ::UnityEngine::Experimental::XR::MeshVertexAttributes _get_Normals();
    // Set static field: static public UnityEngine.Experimental.XR.MeshVertexAttributes Normals
    static void _set_Normals(::UnityEngine::Experimental::XR::MeshVertexAttributes value);
    // static field const value: static public UnityEngine.Experimental.XR.MeshVertexAttributes Tangents
    static constexpr const int Tangents = 2;
    // Get static field: static public UnityEngine.Experimental.XR.MeshVertexAttributes Tangents
    static ::UnityEngine::Experimental::XR::MeshVertexAttributes _get_Tangents();
    // Set static field: static public UnityEngine.Experimental.XR.MeshVertexAttributes Tangents
    static void _set_Tangents(::UnityEngine::Experimental::XR::MeshVertexAttributes value);
    // static field const value: static public UnityEngine.Experimental.XR.MeshVertexAttributes UVs
    static constexpr const int UVs = 4;
    // Get static field: static public UnityEngine.Experimental.XR.MeshVertexAttributes UVs
    static ::UnityEngine::Experimental::XR::MeshVertexAttributes _get_UVs();
    // Set static field: static public UnityEngine.Experimental.XR.MeshVertexAttributes UVs
    static void _set_UVs(::UnityEngine::Experimental::XR::MeshVertexAttributes value);
    // static field const value: static public UnityEngine.Experimental.XR.MeshVertexAttributes Colors
    static constexpr const int Colors = 8;
    // Get static field: static public UnityEngine.Experimental.XR.MeshVertexAttributes Colors
    static ::UnityEngine::Experimental::XR::MeshVertexAttributes _get_Colors();
    // Set static field: static public UnityEngine.Experimental.XR.MeshVertexAttributes Colors
    static void _set_Colors(::UnityEngine::Experimental::XR::MeshVertexAttributes value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // UnityEngine.Experimental.XR.MeshVertexAttributes
  #pragma pack(pop)
  static check_size<sizeof(MeshVertexAttributes), 0 + sizeof(int)> __UnityEngine_Experimental_XR_MeshVertexAttributesSizeCheck;
  static_assert(sizeof(MeshVertexAttributes) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
