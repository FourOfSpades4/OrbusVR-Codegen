// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Experimental.XR.TrackingState
#include "UnityEngine/Experimental/XR/TrackingState.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::XR
namespace UnityEngine::Experimental::XR {
  // Forward declaring type: XRSessionSubsystem
  class XRSessionSubsystem;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.XR
namespace UnityEngine::Experimental::XR {
  // Forward declaring type: SessionTrackingStateChangedEventArgs
  struct SessionTrackingStateChangedEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::XR::SessionTrackingStateChangedEventArgs, "UnityEngine.Experimental.XR", "SessionTrackingStateChangedEventArgs");
// Type namespace: UnityEngine.Experimental.XR
namespace UnityEngine::Experimental::XR {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Experimental.XR.SessionTrackingStateChangedEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  struct SessionTrackingStateChangedEventArgs/*, public ::System::ValueType*/ {
    public:
    public:
    // UnityEngine.Experimental.XR.XRSessionSubsystem m_Session
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Experimental::XR::XRSessionSubsystem* m_Session;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::XR::XRSessionSubsystem*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xA8FC74
    // [DebuggerBrowsableAttribute] Offset: 0xA8FC74
    // private UnityEngine.Experimental.XR.TrackingState <NewState>k__BackingField
    // Size: 0x4
    // Offset: 0x8
    ::UnityEngine::Experimental::XR::TrackingState NewState;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::XR::TrackingState) == 0x4);
    public:
    // Creating value type constructor for type: SessionTrackingStateChangedEventArgs
    constexpr SessionTrackingStateChangedEventArgs(::UnityEngine::Experimental::XR::XRSessionSubsystem* m_Session_ = {}, ::UnityEngine::Experimental::XR::TrackingState NewState_ = {}) noexcept : m_Session{m_Session_}, NewState{NewState_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: UnityEngine.Experimental.XR.XRSessionSubsystem m_Session
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::XR::XRSessionSubsystem*& dyn_m_Session();
    // Get instance field reference: private UnityEngine.Experimental.XR.TrackingState <NewState>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::XR::TrackingState& dyn_$NewState$k__BackingField();
    // public System.Void set_NewState(UnityEngine.Experimental.XR.TrackingState value)
    // Offset: 0xBD2508
    void set_NewState(::UnityEngine::Experimental::XR::TrackingState value);
  }; // UnityEngine.Experimental.XR.SessionTrackingStateChangedEventArgs
  #pragma pack(pop)
  static check_size<sizeof(SessionTrackingStateChangedEventArgs), 8 + sizeof(::UnityEngine::Experimental::XR::TrackingState)> __UnityEngine_Experimental_XR_SessionTrackingStateChangedEventArgsSizeCheck;
  static_assert(sizeof(SessionTrackingStateChangedEventArgs) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::XR::SessionTrackingStateChangedEventArgs::set_NewState
// Il2CppName: set_NewState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::XR::SessionTrackingStateChangedEventArgs::*)(::UnityEngine::Experimental::XR::TrackingState)>(&UnityEngine::Experimental::XR::SessionTrackingStateChangedEventArgs::set_NewState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.XR", "TrackingState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::XR::SessionTrackingStateChangedEventArgs), "set_NewState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
