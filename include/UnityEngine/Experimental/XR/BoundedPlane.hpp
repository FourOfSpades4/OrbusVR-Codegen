// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Experimental.XR.TrackableId
#include "UnityEngine/Experimental/XR/TrackableId.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Experimental.XR.PlaneAlignment
#include "UnityEngine/Experimental/XR/PlaneAlignment.hpp"
// Completed includes
// Type namespace: UnityEngine.Experimental.XR
namespace UnityEngine::Experimental::XR {
  // Forward declaring type: BoundedPlane
  struct BoundedPlane;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::XR::BoundedPlane, "UnityEngine.Experimental.XR", "BoundedPlane");
// Type namespace: UnityEngine.Experimental.XR
namespace UnityEngine::Experimental::XR {
  // Size: 0x5C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Experimental.XR.BoundedPlane
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: A8EFDC
  // [NativeConditionalAttribute] Offset: A8EFDC
  // [NativeHeaderAttribute] Offset: A8EFDC
  // [UsedByNativeCodeAttribute] Offset: A8EFDC
  // [NativeHeaderAttribute] Offset: A8EFDC
  struct BoundedPlane/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.UInt32 m_InstanceId
    // Size: 0x4
    // Offset: 0x0
    uint m_InstanceId;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: m_InstanceId and: Id
    char __padding0[0x4] = {};
    // [DebuggerBrowsableAttribute] Offset: 0xA8F74C
    // [CompilerGeneratedAttribute] Offset: 0xA8F74C
    // private UnityEngine.Experimental.XR.TrackableId <Id>k__BackingField
    // Size: 0x10
    // Offset: 0x8
    ::UnityEngine::Experimental::XR::TrackableId Id;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::XR::TrackableId) == 0x10);
    // [DebuggerBrowsableAttribute] Offset: 0xA8F788
    // [CompilerGeneratedAttribute] Offset: 0xA8F788
    // private UnityEngine.Experimental.XR.TrackableId <SubsumedById>k__BackingField
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Experimental::XR::TrackableId SubsumedById;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::XR::TrackableId) == 0x10);
    // [CompilerGeneratedAttribute] Offset: 0xA8F7C4
    // [DebuggerBrowsableAttribute] Offset: 0xA8F7C4
    // private UnityEngine.Pose <Pose>k__BackingField
    // Size: 0x1C
    // Offset: 0x28
    ::UnityEngine::Pose Pose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // [DebuggerBrowsableAttribute] Offset: 0xA8F800
    // [CompilerGeneratedAttribute] Offset: 0xA8F800
    // private UnityEngine.Vector3 <Center>k__BackingField
    // Size: 0xC
    // Offset: 0x44
    ::UnityEngine::Vector3 Center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [DebuggerBrowsableAttribute] Offset: 0xA8F83C
    // [CompilerGeneratedAttribute] Offset: 0xA8F83C
    // private UnityEngine.Vector2 <Size>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Vector2 Size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0xA8F878
    // [CompilerGeneratedAttribute] Offset: 0xA8F878
    // private UnityEngine.Experimental.XR.PlaneAlignment <Alignment>k__BackingField
    // Size: 0x4
    // Offset: 0x58
    ::UnityEngine::Experimental::XR::PlaneAlignment Alignment;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::XR::PlaneAlignment) == 0x4);
    public:
    // Creating value type constructor for type: BoundedPlane
    constexpr BoundedPlane(uint m_InstanceId_ = {}, ::UnityEngine::Experimental::XR::TrackableId Id_ = {}, ::UnityEngine::Experimental::XR::TrackableId SubsumedById_ = {}, ::UnityEngine::Pose Pose_ = {}, ::UnityEngine::Vector3 Center_ = {}, ::UnityEngine::Vector2 Size_ = {}, ::UnityEngine::Experimental::XR::PlaneAlignment Alignment_ = {}) noexcept : m_InstanceId{m_InstanceId_}, Id{Id_}, SubsumedById{SubsumedById_}, Pose{Pose_}, Center{Center_}, Size{Size_}, Alignment{Alignment_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.UInt32 m_InstanceId
    [[deprecated("Use field access instead!")]] uint& dyn_m_InstanceId();
    // Get instance field reference: private UnityEngine.Experimental.XR.TrackableId <Id>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::XR::TrackableId& dyn_$Id$k__BackingField();
    // Get instance field reference: private UnityEngine.Experimental.XR.TrackableId <SubsumedById>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::XR::TrackableId& dyn_$SubsumedById$k__BackingField();
    // Get instance field reference: private UnityEngine.Pose <Pose>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_$Pose$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <Center>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$Center$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector2 <Size>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$Size$k__BackingField();
    // Get instance field reference: private UnityEngine.Experimental.XR.PlaneAlignment <Alignment>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::XR::PlaneAlignment& dyn_$Alignment$k__BackingField();
  }; // UnityEngine.Experimental.XR.BoundedPlane
  #pragma pack(pop)
  static check_size<sizeof(BoundedPlane), 88 + sizeof(::UnityEngine::Experimental::XR::PlaneAlignment)> __UnityEngine_Experimental_XR_BoundedPlaneSizeCheck;
  static_assert(sizeof(BoundedPlane) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
