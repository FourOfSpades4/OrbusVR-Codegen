// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Experimental.XR.ReferencePoint
#include "UnityEngine/Experimental/XR/ReferencePoint.hpp"
// Completed includes
// Type namespace: UnityEngine.Experimental.XR
namespace UnityEngine::Experimental::XR {
  // Forward declaring type: ReferencePointUpdatedEventArgs
  struct ReferencePointUpdatedEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs, "UnityEngine.Experimental.XR", "ReferencePointUpdatedEventArgs");
// Type namespace: UnityEngine.Experimental.XR
namespace UnityEngine::Experimental::XR {
  // Size: 0x50
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Experimental.XR.ReferencePointUpdatedEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: A8F214
  struct ReferencePointUpdatedEventArgs/*, public ::System::ValueType*/ {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xA8FB84
    // [DebuggerBrowsableAttribute] Offset: 0xA8FB84
    // private UnityEngine.Experimental.XR.ReferencePoint <ReferencePoint>k__BackingField
    // Size: 0x30
    // Offset: 0x0
    ::UnityEngine::Experimental::XR::ReferencePoint ReferencePoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::XR::ReferencePoint) == 0x30);
    // [CompilerGeneratedAttribute] Offset: 0xA8FBC0
    // [DebuggerBrowsableAttribute] Offset: 0xA8FBC0
    // private UnityEngine.Experimental.XR.TrackingState <PreviousTrackingState>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    ::UnityEngine::Experimental::XR::TrackingState PreviousTrackingState;
    // Field size check
    static_assert(sizeof(::UnityEngine::Experimental::XR::TrackingState) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0xA8FBFC
    // [CompilerGeneratedAttribute] Offset: 0xA8FBFC
    // private UnityEngine.Pose <PreviousPose>k__BackingField
    // Size: 0x1C
    // Offset: 0x34
    ::UnityEngine::Pose PreviousPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    public:
    // Creating value type constructor for type: ReferencePointUpdatedEventArgs
    constexpr ReferencePointUpdatedEventArgs(::UnityEngine::Experimental::XR::ReferencePoint ReferencePoint_ = {}, ::UnityEngine::Experimental::XR::TrackingState PreviousTrackingState_ = {}, ::UnityEngine::Pose PreviousPose_ = {}) noexcept : ReferencePoint{ReferencePoint_}, PreviousTrackingState{PreviousTrackingState_}, PreviousPose{PreviousPose_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private UnityEngine.Experimental.XR.ReferencePoint <ReferencePoint>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::XR::ReferencePoint& dyn_$ReferencePoint$k__BackingField();
    // Get instance field reference: private UnityEngine.Experimental.XR.TrackingState <PreviousTrackingState>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Experimental::XR::TrackingState& dyn_$PreviousTrackingState$k__BackingField();
    // Get instance field reference: private UnityEngine.Pose <PreviousPose>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_$PreviousPose$k__BackingField();
    // System.Void set_ReferencePoint(UnityEngine.Experimental.XR.ReferencePoint value)
    // Offset: 0xBD2484
    void set_ReferencePoint(::UnityEngine::Experimental::XR::ReferencePoint value);
    // System.Void set_PreviousTrackingState(UnityEngine.Experimental.XR.TrackingState value)
    // Offset: 0xBD2498
    void set_PreviousTrackingState(::UnityEngine::Experimental::XR::TrackingState value);
    // System.Void set_PreviousPose(UnityEngine.Pose value)
    // Offset: 0xBD24A0
    void set_PreviousPose(::UnityEngine::Pose value);
  }; // UnityEngine.Experimental.XR.ReferencePointUpdatedEventArgs
  #pragma pack(pop)
  static check_size<sizeof(ReferencePointUpdatedEventArgs), 52 + sizeof(::UnityEngine::Pose)> __UnityEngine_Experimental_XR_ReferencePointUpdatedEventArgsSizeCheck;
  static_assert(sizeof(ReferencePointUpdatedEventArgs) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs::set_ReferencePoint
// Il2CppName: set_ReferencePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs::*)(::UnityEngine::Experimental::XR::ReferencePoint)>(&UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs::set_ReferencePoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.XR", "ReferencePoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs), "set_ReferencePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs::set_PreviousTrackingState
// Il2CppName: set_PreviousTrackingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs::*)(::UnityEngine::Experimental::XR::TrackingState)>(&UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs::set_PreviousTrackingState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Experimental.XR", "TrackingState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs), "set_PreviousTrackingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs::set_PreviousPose
// Il2CppName: set_PreviousPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs::*)(::UnityEngine::Pose)>(&UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs::set_PreviousPose)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::XR::ReferencePointUpdatedEventArgs), "set_PreviousPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
