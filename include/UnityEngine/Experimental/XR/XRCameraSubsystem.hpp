// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Experimental.IntegratedSubsystem`1
#include "UnityEngine/Experimental/IntegratedSubsystem_1.hpp"
// Including type: UnityEngine.Experimental.XR.FrameReceivedEventArgs
#include "UnityEngine/Experimental/XR/FrameReceivedEventArgs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::XR
namespace UnityEngine::Experimental::XR {
  // Forward declaring type: XRCameraSubsystemDescriptor
  class XRCameraSubsystemDescriptor;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.XR
namespace UnityEngine::Experimental::XR {
  // Forward declaring type: XRCameraSubsystem
  class XRCameraSubsystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Experimental::XR::XRCameraSubsystem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Experimental::XR::XRCameraSubsystem*, "UnityEngine.Experimental.XR", "XRCameraSubsystem");
// Type namespace: UnityEngine.Experimental.XR
namespace UnityEngine::Experimental::XR {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Experimental.XR.XRCameraSubsystem
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: A8EB2C
  // [NativeTypeAttribute] Offset: A8EB2C
  // [UsedByNativeCodeAttribute] Offset: A8EB2C
  // [NativeConditionalAttribute] Offset: A8EB2C
  class XRCameraSubsystem : public ::UnityEngine::Experimental::IntegratedSubsystem_1<::UnityEngine::Experimental::XR::XRCameraSubsystemDescriptor*> {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0xA8F5A8
    // [CompilerGeneratedAttribute] Offset: 0xA8F5A8
    // private System.Action`1<UnityEngine.Experimental.XR.FrameReceivedEventArgs> FrameReceived
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_1<::UnityEngine::Experimental::XR::FrameReceivedEventArgs>* FrameReceived;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Experimental::XR::FrameReceivedEventArgs>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Action_1<::UnityEngine::Experimental::XR::FrameReceivedEventArgs>*
    constexpr operator ::System::Action_1<::UnityEngine::Experimental::XR::FrameReceivedEventArgs>*() const noexcept {
      return FrameReceived;
    }
    // Get instance field reference: private System.Action`1<UnityEngine.Experimental.XR.FrameReceivedEventArgs> FrameReceived
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Experimental::XR::FrameReceivedEventArgs>*& dyn_FrameReceived();
    // private System.Void InvokeFrameReceivedEvent()
    // Offset: 0x287EFF0
    void InvokeFrameReceivedEvent();
    // public System.Void .ctor()
    // Offset: 0x287EFA0
    // Implemented from: UnityEngine.Experimental.IntegratedSubsystem`1
    // Base method: System.Void IntegratedSubsystem_1::.ctor()
    // Base method: System.Void IntegratedSubsystem::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XRCameraSubsystem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Experimental::XR::XRCameraSubsystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XRCameraSubsystem*, creationType>()));
    }
  }; // UnityEngine.Experimental.XR.XRCameraSubsystem
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Experimental::XR::XRCameraSubsystem::InvokeFrameReceivedEvent
// Il2CppName: InvokeFrameReceivedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Experimental::XR::XRCameraSubsystem::*)()>(&UnityEngine::Experimental::XR::XRCameraSubsystem::InvokeFrameReceivedEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Experimental::XR::XRCameraSubsystem*), "InvokeFrameReceivedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Experimental::XR::XRCameraSubsystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
