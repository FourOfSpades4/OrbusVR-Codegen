// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableAsset
#include "UnityEngine/Playables/PlayableAsset.hpp"
// Including type: UnityEngine.Timeline.IPropertyPreview
#include "UnityEngine/Timeline/IPropertyPreview.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: UnityEngine.Timeline.DiscreteTime
#include "UnityEngine/Timeline/DiscreteTime.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Timeline
namespace UnityEngine::Timeline {
  // Forward declaring type: TimelineClip
  class TimelineClip;
  // Forward declaring type: TrackBindingTypeAttribute
  class TrackBindingTypeAttribute;
  // Forward declaring type: TimelineAsset
  class TimelineAsset;
  // Forward declaring type: RuntimeElement
  class RuntimeElement;
  // Forward declaring type: IPropertyCollector
  class IPropertyCollector;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationClip
  class AnimationClip;
  // Skipping declaration: ScriptableObject because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: IntervalTree`1<T>
  template<typename T>
  class IntervalTree_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
  // Forward declaring type: Comparison`1<T>
  template<typename T>
  class Comparison_1;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
  // Skipping declaration: IPlayableAsset because it is already included!
  // Forward declaring type: PlayableDirector
  class PlayableDirector;
}
// Completed forward declares
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // Forward declaring type: TrackAsset
  class TrackAsset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Timeline::TrackAsset);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Timeline::TrackAsset*, "UnityEngine.Timeline", "TrackAsset");
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // Size: 0x7C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Timeline.TrackAsset
  // [TokenAttribute] Offset: FFFFFFFF
  // [IgnoreOnPlayableTrackAttribute] Offset: FFFFFFFF
  class TrackAsset : public ::UnityEngine::Playables::PlayableAsset/*, public ::UnityEngine::Timeline::IPropertyPreview, public ::UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    // Nested type: ::UnityEngine::Timeline::TrackAsset::$$c__Iterator0
    class $$c__Iterator0;
    public:
    // private System.Boolean m_Locked
    // Size: 0x1
    // Offset: 0x18
    bool m_Locked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_Muted
    // Size: 0x1
    // Offset: 0x19
    bool m_Muted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Muted and: m_CustomPlayableFullTypename
    char __padding1[0x6] = {};
    // private System.String m_CustomPlayableFullTypename
    // Size: 0x8
    // Offset: 0x20
    ::StringW m_CustomPlayableFullTypename;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xAAD5A4
    // private UnityEngine.AnimationClip m_AnimClip
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AnimationClip* m_AnimClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // private UnityEngine.Playables.PlayableAsset m_Parent
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Playables::PlayableAsset* m_Parent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableAsset*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.ScriptableObject> m_Children
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>* m_Children;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>*) == 0x8);
    // private System.Int32 m_ItemsHash
    // Size: 0x4
    // Offset: 0x40
    int m_ItemsHash;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_ItemsHash and: m_ClipsCache
    char __padding6[0x4] = {};
    // private UnityEngine.Timeline.TimelineClip[] m_ClipsCache
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Timeline::TimelineClip*> m_ClipsCache;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Timeline::TimelineClip*>) == 0x8);
    // private UnityEngine.Timeline.DiscreteTime m_Start
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Timeline::DiscreteTime m_Start;
    // Field size check
    static_assert(sizeof(::UnityEngine::Timeline::DiscreteTime) == 0x8);
    // private UnityEngine.Timeline.DiscreteTime m_End
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Timeline::DiscreteTime m_End;
    // Field size check
    static_assert(sizeof(::UnityEngine::Timeline::DiscreteTime) == 0x8);
    // private System.Boolean m_CacheSorted
    // Size: 0x1
    // Offset: 0x60
    bool m_CacheSorted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_CacheSorted and: m_ChildTrackCache
    char __padding10[0x7] = {};
    // private System.Collections.Generic.IEnumerable`1<UnityEngine.Timeline.TrackAsset> m_ChildTrackCache
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TrackAsset*>* m_ChildTrackCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TrackAsset*>*) == 0x8);
    // protected internal System.Collections.Generic.List`1<UnityEngine.Timeline.TimelineClip> m_Clips
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::UnityEngine::Timeline::TimelineClip*>* m_Clips;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Timeline::TimelineClip*>*) == 0x8);
    // private System.Int32 m_Version
    // Size: 0x4
    // Offset: 0x78
    int m_Version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::Timeline::IPropertyPreview
    operator ::UnityEngine::Timeline::IPropertyPreview() noexcept {
      return *reinterpret_cast<::UnityEngine::Timeline::IPropertyPreview*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private UnityEngine.Timeline.TrackAsset[] s_EmptyCache
    static ::ArrayW<::UnityEngine::Timeline::TrackAsset*> _get_s_EmptyCache();
    // Set static field: static private UnityEngine.Timeline.TrackAsset[] s_EmptyCache
    static void _set_s_EmptyCache(::ArrayW<::UnityEngine::Timeline::TrackAsset*> value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.Type,UnityEngine.Timeline.TrackBindingTypeAttribute> s_TrackBindingTypeAttributeCache
    static ::System::Collections::Generic::Dictionary_2<::System::Type*, ::UnityEngine::Timeline::TrackBindingTypeAttribute*>* _get_s_TrackBindingTypeAttributeCache();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.Type,UnityEngine.Timeline.TrackBindingTypeAttribute> s_TrackBindingTypeAttributeCache
    static void _set_s_TrackBindingTypeAttributeCache(::System::Collections::Generic::Dictionary_2<::System::Type*, ::UnityEngine::Timeline::TrackBindingTypeAttribute*>* value);
    // [DebuggerBrowsableAttribute] Offset: 0xAAD6A8
    // [CompilerGeneratedAttribute] Offset: 0xAAD6A8
    // Get static field: static private System.Action`3<UnityEngine.Timeline.TimelineClip,UnityEngine.GameObject,UnityEngine.Playables.Playable> OnPlayableCreate
    static ::System::Action_3<::UnityEngine::Timeline::TimelineClip*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>* _get_OnPlayableCreate();
    // Set static field: static private System.Action`3<UnityEngine.Timeline.TimelineClip,UnityEngine.GameObject,UnityEngine.Playables.Playable> OnPlayableCreate
    static void _set_OnPlayableCreate(::System::Action_3<::UnityEngine::Timeline::TimelineClip*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>* value);
    // static field const value: static protected internal System.Int32 k_LatestVersion
    static constexpr const int k_LatestVersion = 2;
    // Get static field: static protected internal System.Int32 k_LatestVersion
    static int _get_k_LatestVersion();
    // Set static field: static protected internal System.Int32 k_LatestVersion
    static void _set_k_LatestVersion(int value);
    // [CompilerGeneratedAttribute] Offset: 0xAAD71C
    // Get static field: static private System.Comparison`1<UnityEngine.Timeline.TimelineClip> <>f__am$cache0
    static ::System::Comparison_1<::UnityEngine::Timeline::TimelineClip*>* _get_$$f__am$cache0();
    // Set static field: static private System.Comparison`1<UnityEngine.Timeline.TimelineClip> <>f__am$cache0
    static void _set_$$f__am$cache0(::System::Comparison_1<::UnityEngine::Timeline::TimelineClip*>* value);
    // Get instance field reference: private System.Boolean m_Locked
    [[deprecated("Use field access instead!")]] bool& dyn_m_Locked();
    // Get instance field reference: private System.Boolean m_Muted
    [[deprecated("Use field access instead!")]] bool& dyn_m_Muted();
    // Get instance field reference: private System.String m_CustomPlayableFullTypename
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_CustomPlayableFullTypename();
    // Get instance field reference: private UnityEngine.AnimationClip m_AnimClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn_m_AnimClip();
    // Get instance field reference: private UnityEngine.Playables.PlayableAsset m_Parent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableAsset*& dyn_m_Parent();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.ScriptableObject> m_Children
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>*& dyn_m_Children();
    // Get instance field reference: private System.Int32 m_ItemsHash
    [[deprecated("Use field access instead!")]] int& dyn_m_ItemsHash();
    // Get instance field reference: private UnityEngine.Timeline.TimelineClip[] m_ClipsCache
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Timeline::TimelineClip*>& dyn_m_ClipsCache();
    // Get instance field reference: private UnityEngine.Timeline.DiscreteTime m_Start
    [[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::DiscreteTime& dyn_m_Start();
    // Get instance field reference: private UnityEngine.Timeline.DiscreteTime m_End
    [[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::DiscreteTime& dyn_m_End();
    // Get instance field reference: private System.Boolean m_CacheSorted
    [[deprecated("Use field access instead!")]] bool& dyn_m_CacheSorted();
    // Get instance field reference: private System.Collections.Generic.IEnumerable`1<UnityEngine.Timeline.TrackAsset> m_ChildTrackCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TrackAsset*>*& dyn_m_ChildTrackCache();
    // Get instance field reference: protected internal System.Collections.Generic.List`1<UnityEngine.Timeline.TimelineClip> m_Clips
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Timeline::TimelineClip*>*& dyn_m_Clips();
    // Get instance field reference: private System.Int32 m_Version
    [[deprecated("Use field access instead!")]] int& dyn_m_Version();
    // protected System.Void .ctor()
    // Offset: 0x1D8AB68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrackAsset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrackAsset*, creationType>()));
    }
    // public System.Double get_start()
    // Offset: 0x1DA0A50
    double get_start();
    // public System.Double get_end()
    // Offset: 0x1D9BCFC
    double get_end();
    // public System.Boolean get_muted()
    // Offset: 0x1D8D454
    bool get_muted();
    // public System.Void set_muted(System.Boolean value)
    // Offset: 0x1DA0B48
    void set_muted(bool value);
    // public UnityEngine.Timeline.TimelineAsset get_timelineAsset()
    // Offset: 0x1D9C12C
    ::UnityEngine::Timeline::TimelineAsset* get_timelineAsset();
    // public UnityEngine.Playables.PlayableAsset get_parent()
    // Offset: 0x1D8F9AC
    ::UnityEngine::Playables::PlayableAsset* get_parent();
    // System.Void set_parent(UnityEngine.Playables.PlayableAsset value)
    // Offset: 0x1D9B61C
    void set_parent(::UnityEngine::Playables::PlayableAsset* value);
    // public System.Collections.Generic.IEnumerable`1<UnityEngine.Timeline.TimelineClip> GetClips()
    // Offset: 0x1D9032C
    ::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TimelineClip*>* GetClips();
    // UnityEngine.Timeline.TimelineClip[] get_clips()
    // Offset: 0x1D8D888
    ::ArrayW<::UnityEngine::Timeline::TimelineClip*> get_clips();
    // public System.Boolean get_isEmpty()
    // Offset: 0x1DA0B54
    bool get_isEmpty();
    // System.Boolean get_hasClips()
    // Offset: 0x1DA0B70
    bool get_hasClips();
    // public System.Boolean get_isSubTrack()
    // Offset: 0x1D8DE84
    bool get_isSubTrack();
    // public System.Collections.Generic.IEnumerable`1<UnityEngine.Timeline.TrackAsset> GetChildTracks()
    // Offset: 0x1D8D78C
    ::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TrackAsset*>* GetChildTracks();
    // System.String get_customPlayableTypename()
    // Offset: 0x1DA0E58
    ::StringW get_customPlayableTypename();
    // System.Void set_customPlayableTypename(System.String value)
    // Offset: 0x1DA0E60
    void set_customPlayableTypename(::StringW value);
    // UnityEngine.AnimationClip get_animClip()
    // Offset: 0x1D8D45C
    ::UnityEngine::AnimationClip* get_animClip();
    // System.Void set_animClip(UnityEngine.AnimationClip value)
    // Offset: 0x1DA0E68
    void set_animClip(::UnityEngine::AnimationClip* value);
    // System.Collections.Generic.List`1<UnityEngine.ScriptableObject> get_subTracksObjects()
    // Offset: 0x1D9C510
    ::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>* get_subTracksObjects();
    // public System.Boolean get_locked()
    // Offset: 0x1DA0E70
    bool get_locked();
    // public System.Void set_locked(System.Boolean value)
    // Offset: 0x1DA0E78
    void set_locked(bool value);
    // public System.Boolean get_lockedInHierarchy()
    // Offset: 0x1DA0E84
    bool get_lockedInHierarchy();
    // System.Boolean get_parentLocked()
    // Offset: 0x1DA0E98
    bool get_parentLocked();
    // System.Boolean get_compilable()
    // Offset: 0x1D8AC4C
    bool get_compilable();
    // private System.Void __internalAwake()
    // Offset: 0x1DA0F80
    void __internalAwake();
    // public UnityEngine.Playables.Playable CreateTrackMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, System.Int32 inputCount)
    // Offset: 0x1DA1040
    ::UnityEngine::Playables::Playable CreateTrackMixer(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go, int inputCount);
    // public UnityEngine.Timeline.TimelineClip CreateDefaultClip()
    // Offset: 0x1D90DE4
    ::UnityEngine::Timeline::TimelineClip* CreateDefaultClip();
    // public UnityEngine.Timeline.TimelineClip CreateClip()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::UnityEngine::Timeline::TimelineClip* CreateClip() {
      static_assert(std::is_convertible_v<T, ::UnityEngine::ScriptableObject*> && std::is_convertible_v<std::remove_pointer_t<T>, ::UnityEngine::Playables::IPlayableAsset>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TrackAsset::CreateClip");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateClip", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Timeline::TimelineClip*, false>(this, ___generic__method);
    }
    // UnityEngine.Timeline.TimelineClip CreateClip(System.Type requestedType)
    // Offset: 0x1DA1154
    ::UnityEngine::Timeline::TimelineClip* CreateClip(::System::Type* requestedType);
    // UnityEngine.Timeline.TimelineClip CreateAndAddNewClipOfType(System.Type requestedType)
    // Offset: 0x1DA1120
    ::UnityEngine::Timeline::TimelineClip* CreateAndAddNewClipOfType(::System::Type* requestedType);
    // UnityEngine.Timeline.TimelineClip CreateClipOfType(System.Type requestedType)
    // Offset: 0x1DA15EC
    ::UnityEngine::Timeline::TimelineClip* CreateClipOfType(::System::Type* requestedType);
    // UnityEngine.Timeline.TimelineClip CreateClipFromPlayableAsset(UnityEngine.Playables.IPlayableAsset asset)
    // Offset: 0x1DA1B90
    ::UnityEngine::Timeline::TimelineClip* CreateClipFromPlayableAsset(::UnityEngine::Playables::IPlayableAsset* asset);
    // private UnityEngine.Timeline.TimelineClip CreateClipFromAsset(UnityEngine.ScriptableObject playableAsset)
    // Offset: 0x1DA18B4
    ::UnityEngine::Timeline::TimelineClip* CreateClipFromAsset(::UnityEngine::ScriptableObject* playableAsset);
    // System.Void AddClip(UnityEngine.Timeline.TimelineClip newClip)
    // Offset: 0x1D9E494
    void AddClip(::UnityEngine::Timeline::TimelineClip* newClip);
    // UnityEngine.Playables.Playable CreatePlayableGraph(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, UnityEngine.IntervalTree`1<UnityEngine.Timeline.RuntimeElement> tree)
    // Offset: 0x1DA0274
    ::UnityEngine::Playables::Playable CreatePlayableGraph(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go, ::UnityEngine::IntervalTree_1<::UnityEngine::Timeline::RuntimeElement*>* tree);
    // UnityEngine.Playables.Playable OnCreatePlayableGraph(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, UnityEngine.IntervalTree`1<UnityEngine.Timeline.RuntimeElement> tree)
    // Offset: 0x1DA2130
    ::UnityEngine::Playables::Playable OnCreatePlayableGraph(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go, ::UnityEngine::IntervalTree_1<::UnityEngine::Timeline::RuntimeElement*>* tree);
    // System.Void SortClips()
    // Offset: 0x1D9F700
    void SortClips();
    // System.Void ClearClipsInternal()
    // Offset: 0x1DA2480
    void ClearClipsInternal();
    // System.Void ClearSubTracksInternal()
    // Offset: 0x1DA24EC
    void ClearSubTracksInternal();
    // System.Void OnClipMove()
    // Offset: 0x1D9E47C
    void OnClipMove();
    // UnityEngine.Timeline.TimelineClip CreateNewClipContainerInternal()
    // Offset: 0x1DA1E44
    ::UnityEngine::Timeline::TimelineClip* CreateNewClipContainerInternal();
    // System.Void AddChild(UnityEngine.Timeline.TrackAsset child)
    // Offset: 0x1D9D5F4
    void AddChild(::UnityEngine::Timeline::TrackAsset* child);
    // System.Boolean AddChildAfter(UnityEngine.Timeline.TrackAsset child, UnityEngine.Timeline.TrackAsset other)
    // Offset: 0x1DA25F4
    bool AddChildAfter(::UnityEngine::Timeline::TrackAsset* child, ::UnityEngine::Timeline::TrackAsset* other);
    // System.Boolean RemoveSubTrack(UnityEngine.Timeline.TrackAsset child)
    // Offset: 0x1D9B754
    bool RemoveSubTrack(::UnityEngine::Timeline::TrackAsset* child);
    // System.Void RemoveClip(UnityEngine.Timeline.TimelineClip clip)
    // Offset: 0x1D9CFAC
    void RemoveClip(::UnityEngine::Timeline::TimelineClip* clip);
    // System.Void GetEvaluationTime(out System.Double outStart, out System.Double outDuration)
    // Offset: 0x1D8FA98
    void GetEvaluationTime(ByRef<double> outStart, ByRef<double> outDuration);
    // System.Void GetSequenceTime(out System.Double outStart, out System.Double outDuration)
    // Offset: 0x1D8FDB0
    void GetSequenceTime(ByRef<double> outStart, ByRef<double> outDuration);
    // public System.Void GatherProperties(UnityEngine.Playables.PlayableDirector director, UnityEngine.Timeline.IPropertyCollector driver)
    // Offset: 0x1DA2754
    void GatherProperties(::UnityEngine::Playables::PlayableDirector* director, ::UnityEngine::Timeline::IPropertyCollector* driver);
    // UnityEngine.GameObject GetGameObjectBinding(UnityEngine.Playables.PlayableDirector director)
    // Offset: 0x1D8AEBC
    ::UnityEngine::GameObject* GetGameObjectBinding(::UnityEngine::Playables::PlayableDirector* director);
    // System.Boolean ValidateClipType(System.Type clipType)
    // Offset: 0x1DA12F8
    bool ValidateClipType(::System::Type* clipType);
    // protected System.Void OnCreateClip(UnityEngine.Timeline.TimelineClip clip)
    // Offset: 0x1D8B0AC
    void OnCreateClip(::UnityEngine::Timeline::TimelineClip* clip);
    // protected internal System.Void UpdateDuration()
    // Offset: 0x1DA2E54
    void UpdateDuration();
    // static System.Void add_OnPlayableCreate(System.Action`3<UnityEngine.Timeline.TimelineClip,UnityEngine.GameObject,UnityEngine.Playables.Playable> value)
    // Offset: 0x1DA3178
    static void add_OnPlayableCreate(::System::Action_3<::UnityEngine::Timeline::TimelineClip*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>* value);
    // static System.Void remove_OnPlayableCreate(System.Action`3<UnityEngine.Timeline.TimelineClip,UnityEngine.GameObject,UnityEngine.Playables.Playable> value)
    // Offset: 0x1DA32B8
    static void remove_OnPlayableCreate(::System::Action_3<::UnityEngine::Timeline::TimelineClip*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>* value);
    // protected UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject gameObject, UnityEngine.Timeline.TimelineClip clip)
    // Offset: 0x1DA33F8
    ::UnityEngine::Playables::Playable CreatePlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* gameObject, ::UnityEngine::Timeline::TimelineClip* clip);
    // System.Void Invalidate()
    // Offset: 0x1DA2558
    void Invalidate();
    // private System.Void UpdateChildTrackCache()
    // Offset: 0x1DA0C64
    void UpdateChildTrackCache();
    // protected internal System.Int32 Hash()
    // Offset: 0x1DA3680
    int Hash();
    // private System.Int32 GetClipsHash()
    // Offset: 0x1DA3028
    int GetClipsHash();
    // protected System.Void OnBeforeTrackSerialize()
    // Offset: 0x1DA36AC
    void OnBeforeTrackSerialize();
    // protected System.Void OnAfterTrackDeserialize()
    // Offset: 0x1DA36B0
    void OnAfterTrackDeserialize();
    // protected internal System.Void OnUpgradeFromVersion(System.Int32 oldVersion)
    // Offset: 0x1DA36B4
    void OnUpgradeFromVersion(int oldVersion);
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
    // Offset: 0x1DA36B8
    void UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize();
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
    // Offset: 0x1DA3838
    void UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize();
    // private System.Void UpgradeToLatestVersion()
    // Offset: 0x1DA388C
    void UpgradeToLatestVersion();
    // static private System.Void .cctor()
    // Offset: 0x1DA3890
    static void _cctor();
    // static private System.Int32 <SortClips>m__0(UnityEngine.Timeline.TimelineClip clip1, UnityEngine.Timeline.TimelineClip clip2)
    // Offset: 0x1DA3924
    static int $SortClips$m__0(::UnityEngine::Timeline::TimelineClip* clip1, ::UnityEngine::Timeline::TimelineClip* clip2);
    // public override System.Double get_duration()
    // Offset: 0x1DA0ACC
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: System.Double PlayableAsset::get_duration()
    double get_duration();
    // public override System.Collections.Generic.IEnumerable`1<UnityEngine.Playables.PlayableBinding> get_outputs()
    // Offset: 0x1DA0BD0
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: System.Collections.Generic.IEnumerable`1<UnityEngine.Playables.PlayableBinding> PlayableAsset::get_outputs()
    ::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>* get_outputs();
    // public override UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go)
    // Offset: 0x1DA10C0
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: UnityEngine.Playables.Playable PlayableAsset::CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go)
    ::UnityEngine::Playables::Playable CreatePlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* go);
  }; // UnityEngine.Timeline.TrackAsset
  #pragma pack(pop)
  static check_size<sizeof(TrackAsset), 120 + sizeof(int)> __UnityEngine_Timeline_TrackAssetSizeCheck;
  static_assert(sizeof(TrackAsset) == 0x7C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_start
// Il2CppName: get_start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_end
// Il2CppName: get_end
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_end)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_end", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_muted
// Il2CppName: get_muted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_muted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_muted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::set_muted
// Il2CppName: set_muted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)(bool)>(&UnityEngine::Timeline::TrackAsset::set_muted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "set_muted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_timelineAsset
// Il2CppName: get_timelineAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TimelineAsset* (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_timelineAsset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_timelineAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_parent
// Il2CppName: get_parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::PlayableAsset* (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_parent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::set_parent
// Il2CppName: set_parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::Playables::PlayableAsset*)>(&UnityEngine::Timeline::TrackAsset::set_parent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "set_parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::GetClips
// Il2CppName: GetClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TimelineClip*>* (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::GetClips)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "GetClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_clips
// Il2CppName: get_clips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Timeline::TimelineClip*> (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_clips)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_clips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_isEmpty
// Il2CppName: get_isEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_isEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_isEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_hasClips
// Il2CppName: get_hasClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_hasClips)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_hasClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_isSubTrack
// Il2CppName: get_isSubTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_isSubTrack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_isSubTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::GetChildTracks
// Il2CppName: GetChildTracks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Timeline::TrackAsset*>* (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::GetChildTracks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "GetChildTracks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_customPlayableTypename
// Il2CppName: get_customPlayableTypename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_customPlayableTypename)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_customPlayableTypename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::set_customPlayableTypename
// Il2CppName: set_customPlayableTypename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)(::StringW)>(&UnityEngine::Timeline::TrackAsset::set_customPlayableTypename)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "set_customPlayableTypename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_animClip
// Il2CppName: get_animClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationClip* (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_animClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_animClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::set_animClip
// Il2CppName: set_animClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::AnimationClip*)>(&UnityEngine::Timeline::TrackAsset::set_animClip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "set_animClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_subTracksObjects
// Il2CppName: get_subTracksObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::ScriptableObject*>* (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_subTracksObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_subTracksObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_locked
// Il2CppName: get_locked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_locked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_locked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::set_locked
// Il2CppName: set_locked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)(bool)>(&UnityEngine::Timeline::TrackAsset::set_locked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "set_locked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_lockedInHierarchy
// Il2CppName: get_lockedInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_lockedInHierarchy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_lockedInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_parentLocked
// Il2CppName: get_parentLocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_parentLocked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_parentLocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_compilable
// Il2CppName: get_compilable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_compilable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_compilable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::__internalAwake
// Il2CppName: __internalAwake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::__internalAwake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "__internalAwake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::CreateTrackMixer
// Il2CppName: CreateTrackMixer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::Playable (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::Playables::PlayableGraph, ::UnityEngine::GameObject*, int)>(&UnityEngine::Timeline::TrackAsset::CreateTrackMixer)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* inputCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "CreateTrackMixer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, go, inputCount});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::CreateDefaultClip
// Il2CppName: CreateDefaultClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TimelineClip* (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::CreateDefaultClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "CreateDefaultClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::CreateClip
// Il2CppName: CreateClip
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::CreateClip
// Il2CppName: CreateClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TimelineClip* (UnityEngine::Timeline::TrackAsset::*)(::System::Type*)>(&UnityEngine::Timeline::TrackAsset::CreateClip)> {
  static const MethodInfo* get() {
    static auto* requestedType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "CreateClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestedType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::CreateAndAddNewClipOfType
// Il2CppName: CreateAndAddNewClipOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TimelineClip* (UnityEngine::Timeline::TrackAsset::*)(::System::Type*)>(&UnityEngine::Timeline::TrackAsset::CreateAndAddNewClipOfType)> {
  static const MethodInfo* get() {
    static auto* requestedType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "CreateAndAddNewClipOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestedType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::CreateClipOfType
// Il2CppName: CreateClipOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TimelineClip* (UnityEngine::Timeline::TrackAsset::*)(::System::Type*)>(&UnityEngine::Timeline::TrackAsset::CreateClipOfType)> {
  static const MethodInfo* get() {
    static auto* requestedType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "CreateClipOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestedType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::CreateClipFromPlayableAsset
// Il2CppName: CreateClipFromPlayableAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TimelineClip* (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::Playables::IPlayableAsset*)>(&UnityEngine::Timeline::TrackAsset::CreateClipFromPlayableAsset)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "IPlayableAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "CreateClipFromPlayableAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::CreateClipFromAsset
// Il2CppName: CreateClipFromAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TimelineClip* (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::ScriptableObject*)>(&UnityEngine::Timeline::TrackAsset::CreateClipFromAsset)> {
  static const MethodInfo* get() {
    static auto* playableAsset = &::il2cpp_utils::GetClassFromName("UnityEngine", "ScriptableObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "CreateClipFromAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playableAsset});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::AddClip
// Il2CppName: AddClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::Timeline::TimelineClip*)>(&UnityEngine::Timeline::TrackAsset::AddClip)> {
  static const MethodInfo* get() {
    static auto* newClip = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TimelineClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "AddClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newClip});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::CreatePlayableGraph
// Il2CppName: CreatePlayableGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::Playable (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::Playables::PlayableGraph, ::UnityEngine::GameObject*, ::UnityEngine::IntervalTree_1<::UnityEngine::Timeline::RuntimeElement*>*)>(&UnityEngine::Timeline::TrackAsset::CreatePlayableGraph)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* tree = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine", "IntervalTree`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "RuntimeElement")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "CreatePlayableGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, go, tree});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::OnCreatePlayableGraph
// Il2CppName: OnCreatePlayableGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::Playable (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::Playables::PlayableGraph, ::UnityEngine::GameObject*, ::UnityEngine::IntervalTree_1<::UnityEngine::Timeline::RuntimeElement*>*)>(&UnityEngine::Timeline::TrackAsset::OnCreatePlayableGraph)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* tree = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine", "IntervalTree`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "RuntimeElement")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "OnCreatePlayableGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, go, tree});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::SortClips
// Il2CppName: SortClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::SortClips)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "SortClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::ClearClipsInternal
// Il2CppName: ClearClipsInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::ClearClipsInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "ClearClipsInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::ClearSubTracksInternal
// Il2CppName: ClearSubTracksInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::ClearSubTracksInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "ClearSubTracksInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::OnClipMove
// Il2CppName: OnClipMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::OnClipMove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "OnClipMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::CreateNewClipContainerInternal
// Il2CppName: CreateNewClipContainerInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TimelineClip* (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::CreateNewClipContainerInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "CreateNewClipContainerInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::AddChild
// Il2CppName: AddChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::Timeline::TrackAsset*)>(&UnityEngine::Timeline::TrackAsset::AddChild)> {
  static const MethodInfo* get() {
    static auto* child = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TrackAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "AddChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{child});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::AddChildAfter
// Il2CppName: AddChildAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::Timeline::TrackAsset*, ::UnityEngine::Timeline::TrackAsset*)>(&UnityEngine::Timeline::TrackAsset::AddChildAfter)> {
  static const MethodInfo* get() {
    static auto* child = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TrackAsset")->byval_arg;
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TrackAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "AddChildAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{child, other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::RemoveSubTrack
// Il2CppName: RemoveSubTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::Timeline::TrackAsset*)>(&UnityEngine::Timeline::TrackAsset::RemoveSubTrack)> {
  static const MethodInfo* get() {
    static auto* child = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TrackAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "RemoveSubTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{child});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::RemoveClip
// Il2CppName: RemoveClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::Timeline::TimelineClip*)>(&UnityEngine::Timeline::TrackAsset::RemoveClip)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TimelineClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "RemoveClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::GetEvaluationTime
// Il2CppName: GetEvaluationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)(ByRef<double>, ByRef<double>)>(&UnityEngine::Timeline::TrackAsset::GetEvaluationTime)> {
  static const MethodInfo* get() {
    static auto* outStart = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    static auto* outDuration = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "GetEvaluationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outStart, outDuration});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::GetSequenceTime
// Il2CppName: GetSequenceTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)(ByRef<double>, ByRef<double>)>(&UnityEngine::Timeline::TrackAsset::GetSequenceTime)> {
  static const MethodInfo* get() {
    static auto* outStart = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    static auto* outDuration = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "GetSequenceTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outStart, outDuration});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::GatherProperties
// Il2CppName: GatherProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::Playables::PlayableDirector*, ::UnityEngine::Timeline::IPropertyCollector*)>(&UnityEngine::Timeline::TrackAsset::GatherProperties)> {
  static const MethodInfo* get() {
    static auto* director = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableDirector")->byval_arg;
    static auto* driver = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "IPropertyCollector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "GatherProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{director, driver});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::GetGameObjectBinding
// Il2CppName: GetGameObjectBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::Playables::PlayableDirector*)>(&UnityEngine::Timeline::TrackAsset::GetGameObjectBinding)> {
  static const MethodInfo* get() {
    static auto* director = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableDirector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "GetGameObjectBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{director});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::ValidateClipType
// Il2CppName: ValidateClipType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TrackAsset::*)(::System::Type*)>(&UnityEngine::Timeline::TrackAsset::ValidateClipType)> {
  static const MethodInfo* get() {
    static auto* clipType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "ValidateClipType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipType});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::OnCreateClip
// Il2CppName: OnCreateClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::Timeline::TimelineClip*)>(&UnityEngine::Timeline::TrackAsset::OnCreateClip)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TimelineClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "OnCreateClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::UpdateDuration
// Il2CppName: UpdateDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::UpdateDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "UpdateDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::add_OnPlayableCreate
// Il2CppName: add_OnPlayableCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_3<::UnityEngine::Timeline::TimelineClip*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>*)>(&UnityEngine::Timeline::TrackAsset::add_OnPlayableCreate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TimelineClip"), ::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), ::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "add_OnPlayableCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::remove_OnPlayableCreate
// Il2CppName: remove_OnPlayableCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_3<::UnityEngine::Timeline::TimelineClip*, ::UnityEngine::GameObject*, ::UnityEngine::Playables::Playable>*)>(&UnityEngine::Timeline::TrackAsset::remove_OnPlayableCreate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TimelineClip"), ::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), ::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "remove_OnPlayableCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::Playable (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::Playables::PlayableGraph, ::UnityEngine::GameObject*, ::UnityEngine::Timeline::TimelineClip*)>(&UnityEngine::Timeline::TrackAsset::CreatePlayable)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TimelineClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, gameObject, clip});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::Invalidate
// Il2CppName: Invalidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::Invalidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "Invalidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::UpdateChildTrackCache
// Il2CppName: UpdateChildTrackCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::UpdateChildTrackCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "UpdateChildTrackCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::Hash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::GetClipsHash
// Il2CppName: GetClipsHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::GetClipsHash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "GetClipsHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::OnBeforeTrackSerialize
// Il2CppName: OnBeforeTrackSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::OnBeforeTrackSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "OnBeforeTrackSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::OnAfterTrackDeserialize
// Il2CppName: OnAfterTrackDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::OnAfterTrackDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "OnAfterTrackDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::OnUpgradeFromVersion
// Il2CppName: OnUpgradeFromVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)(int)>(&UnityEngine::Timeline::TrackAsset::OnUpgradeFromVersion)> {
  static const MethodInfo* get() {
    static auto* oldVersion = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "OnUpgradeFromVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldVersion});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::UpgradeToLatestVersion
// Il2CppName: UpgradeToLatestVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::UpgradeToLatestVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "UpgradeToLatestVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Timeline::TrackAsset::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::$SortClips$m__0
// Il2CppName: <SortClips>m__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::Timeline::TimelineClip*, ::UnityEngine::Timeline::TimelineClip*)>(&UnityEngine::Timeline::TrackAsset::$SortClips$m__0)> {
  static const MethodInfo* get() {
    static auto* clip1 = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TimelineClip")->byval_arg;
    static auto* clip2 = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TimelineClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "<SortClips>m__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip1, clip2});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_duration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::get_outputs
// Il2CppName: get_outputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::Playables::PlayableBinding>* (UnityEngine::Timeline::TrackAsset::*)()>(&UnityEngine::Timeline::TrackAsset::get_outputs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "get_outputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TrackAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::Playable (UnityEngine::Timeline::TrackAsset::*)(::UnityEngine::Playables::PlayableGraph, ::UnityEngine::GameObject*)>(&UnityEngine::Timeline::TrackAsset::CreatePlayable)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TrackAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, go});
  }
};
