// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.RaycastHit2D
#include "UnityEngine/RaycastHit2D.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Ray
  struct Ray;
  // Skipping declaration: Vector2 because it is already included!
  // Forward declaring type: ContactFilter2D
  struct ContactFilter2D;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Collider2D
  class Collider2D;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: PhysicsScene2D
  struct PhysicsScene2D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::PhysicsScene2D, "UnityEngine", "PhysicsScene2D");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.PhysicsScene2D
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: A9F8E0
  struct PhysicsScene2D/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::PhysicsScene2D>*/ {
    public:
    public:
    // private System.Int32 m_Handle
    // Size: 0x4
    // Offset: 0x0
    int m_Handle;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: PhysicsScene2D
    constexpr PhysicsScene2D(int m_Handle_ = {}) noexcept : m_Handle{m_Handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::PhysicsScene2D>
    operator ::System::IEquatable_1<::UnityEngine::PhysicsScene2D>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::PhysicsScene2D>*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return m_Handle;
    }
    // Get instance field reference: private System.Int32 m_Handle
    [[deprecated("Use field access instead!")]] int& dyn_m_Handle();
    // public System.Boolean Equals(UnityEngine.PhysicsScene2D other)
    // Offset: 0xBD3020
    bool Equals(::UnityEngine::PhysicsScene2D other);
    // public UnityEngine.RaycastHit2D Linecast(UnityEngine.Vector2 start, UnityEngine.Vector2 end, UnityEngine.ContactFilter2D contactFilter)
    // Offset: 0xBD3030
    ::UnityEngine::RaycastHit2D Linecast(::UnityEngine::Vector2 start, ::UnityEngine::Vector2 end, ::UnityEngine::ContactFilter2D contactFilter);
    // static private UnityEngine.RaycastHit2D Linecast_Internal(UnityEngine.PhysicsScene2D physicsScene, UnityEngine.Vector2 start, UnityEngine.Vector2 end, UnityEngine.ContactFilter2D contactFilter)
    // Offset: 0x289430C
    static ::UnityEngine::RaycastHit2D Linecast_Internal(::UnityEngine::PhysicsScene2D physicsScene, ::UnityEngine::Vector2 start, ::UnityEngine::Vector2 end, ::UnityEngine::ContactFilter2D contactFilter);
    // public UnityEngine.RaycastHit2D Raycast(UnityEngine.Vector2 origin, UnityEngine.Vector2 direction, System.Single distance, System.Int32 layerMask)
    // Offset: 0xBD30A8
    ::UnityEngine::RaycastHit2D Raycast(::UnityEngine::Vector2 origin, ::UnityEngine::Vector2 direction, float distance, int layerMask);
    // public UnityEngine.RaycastHit2D Raycast(UnityEngine.Vector2 origin, UnityEngine.Vector2 direction, System.Single distance, UnityEngine.ContactFilter2D contactFilter)
    // Offset: 0xBD30B0
    ::UnityEngine::RaycastHit2D Raycast(::UnityEngine::Vector2 origin, ::UnityEngine::Vector2 direction, float distance, ::UnityEngine::ContactFilter2D contactFilter);
    // static private UnityEngine.RaycastHit2D Raycast_Internal(UnityEngine.PhysicsScene2D physicsScene, UnityEngine.Vector2 origin, UnityEngine.Vector2 direction, System.Single distance, UnityEngine.ContactFilter2D contactFilter)
    // Offset: 0x2894418
    static ::UnityEngine::RaycastHit2D Raycast_Internal(::UnityEngine::PhysicsScene2D physicsScene, ::UnityEngine::Vector2 origin, ::UnityEngine::Vector2 direction, float distance, ::UnityEngine::ContactFilter2D contactFilter);
    // public System.Int32 Raycast(UnityEngine.Vector2 origin, UnityEngine.Vector2 direction, System.Single distance, UnityEngine.ContactFilter2D contactFilter, UnityEngine.RaycastHit2D[] results)
    // Offset: 0xBD3128
    int Raycast(::UnityEngine::Vector2 origin, ::UnityEngine::Vector2 direction, float distance, ::UnityEngine::ContactFilter2D contactFilter, ::ArrayW<::UnityEngine::RaycastHit2D> results);
    // static private System.Int32 RaycastNonAlloc_Internal(UnityEngine.PhysicsScene2D physicsScene, UnityEngine.Vector2 origin, UnityEngine.Vector2 direction, System.Single distance, UnityEngine.ContactFilter2D contactFilter, out UnityEngine.RaycastHit2D[] results)
    // Offset: 0x2894530
    static int RaycastNonAlloc_Internal(::UnityEngine::PhysicsScene2D physicsScene, ::UnityEngine::Vector2 origin, ::UnityEngine::Vector2 direction, float distance, ::UnityEngine::ContactFilter2D contactFilter, ByRef<::ArrayW<::UnityEngine::RaycastHit2D>> results);
    // public UnityEngine.RaycastHit2D CircleCast(UnityEngine.Vector2 origin, System.Single radius, UnityEngine.Vector2 direction, System.Single distance, UnityEngine.ContactFilter2D contactFilter)
    // Offset: 0xBD315C
    ::UnityEngine::RaycastHit2D CircleCast(::UnityEngine::Vector2 origin, float radius, ::UnityEngine::Vector2 direction, float distance, ::UnityEngine::ContactFilter2D contactFilter);
    // static private UnityEngine.RaycastHit2D CircleCast_Internal(UnityEngine.PhysicsScene2D physicsScene, UnityEngine.Vector2 origin, System.Single radius, UnityEngine.Vector2 direction, System.Single distance, UnityEngine.ContactFilter2D contactFilter)
    // Offset: 0x289461C
    static ::UnityEngine::RaycastHit2D CircleCast_Internal(::UnityEngine::PhysicsScene2D physicsScene, ::UnityEngine::Vector2 origin, float radius, ::UnityEngine::Vector2 direction, float distance, ::UnityEngine::ContactFilter2D contactFilter);
    // public System.Int32 GetRayIntersection(UnityEngine.Ray ray, System.Single distance, UnityEngine.RaycastHit2D[] results, System.Int32 layerMask)
    // Offset: 0xBD31D4
    int GetRayIntersection(::UnityEngine::Ray ray, float distance, ::ArrayW<::UnityEngine::RaycastHit2D> results, int layerMask);
    // static private System.Int32 GetRayIntersectionNonAlloc_Internal(UnityEngine.PhysicsScene2D physicsScene, UnityEngine.Vector3 origin, UnityEngine.Vector3 direction, System.Single distance, System.Int32 layerMask, out UnityEngine.RaycastHit2D[] results)
    // Offset: 0x2894748
    static int GetRayIntersectionNonAlloc_Internal(::UnityEngine::PhysicsScene2D physicsScene, ::UnityEngine::Vector3 origin, ::UnityEngine::Vector3 direction, float distance, int layerMask, ByRef<::ArrayW<::UnityEngine::RaycastHit2D>> results);
    // public UnityEngine.Collider2D OverlapPoint(UnityEngine.Vector2 point, UnityEngine.ContactFilter2D contactFilter)
    // Offset: 0xBD3208
    ::UnityEngine::Collider2D* OverlapPoint(::UnityEngine::Vector2 point, ::UnityEngine::ContactFilter2D contactFilter);
    // static private UnityEngine.Collider2D OverlapPoint_Internal(UnityEngine.PhysicsScene2D physicsScene, UnityEngine.Vector2 point, UnityEngine.ContactFilter2D contactFilter)
    // Offset: 0x289483C
    static ::UnityEngine::Collider2D* OverlapPoint_Internal(::UnityEngine::PhysicsScene2D physicsScene, ::UnityEngine::Vector2 point, ::UnityEngine::ContactFilter2D contactFilter);
    // public UnityEngine.Collider2D OverlapCircle(UnityEngine.Vector2 point, System.Single radius, UnityEngine.ContactFilter2D contactFilter)
    // Offset: 0xBD325C
    ::UnityEngine::Collider2D* OverlapCircle(::UnityEngine::Vector2 point, float radius, ::UnityEngine::ContactFilter2D contactFilter);
    // static private UnityEngine.Collider2D OverlapCircle_Internal(UnityEngine.PhysicsScene2D physicsScene, UnityEngine.Vector2 point, System.Single radius, UnityEngine.ContactFilter2D contactFilter)
    // Offset: 0x28948F4
    static ::UnityEngine::Collider2D* OverlapCircle_Internal(::UnityEngine::PhysicsScene2D physicsScene, ::UnityEngine::Vector2 point, float radius, ::UnityEngine::ContactFilter2D contactFilter);
    // static private System.Void Linecast_Internal_Injected(ref UnityEngine.PhysicsScene2D physicsScene, ref UnityEngine.Vector2 start, ref UnityEngine.Vector2 end, ref UnityEngine.ContactFilter2D contactFilter, out UnityEngine.RaycastHit2D ret)
    // Offset: 0x289437C
    static void Linecast_Internal_Injected(ByRef<::UnityEngine::PhysicsScene2D> physicsScene, ByRef<::UnityEngine::Vector2> start, ByRef<::UnityEngine::Vector2> end, ByRef<::UnityEngine::ContactFilter2D> contactFilter, ByRef<::UnityEngine::RaycastHit2D> ret);
    // static private System.Void Raycast_Internal_Injected(ref UnityEngine.PhysicsScene2D physicsScene, ref UnityEngine.Vector2 origin, ref UnityEngine.Vector2 direction, System.Single distance, ref UnityEngine.ContactFilter2D contactFilter, out UnityEngine.RaycastHit2D ret)
    // Offset: 0x289448C
    static void Raycast_Internal_Injected(ByRef<::UnityEngine::PhysicsScene2D> physicsScene, ByRef<::UnityEngine::Vector2> origin, ByRef<::UnityEngine::Vector2> direction, float distance, ByRef<::UnityEngine::ContactFilter2D> contactFilter, ByRef<::UnityEngine::RaycastHit2D> ret);
    // static private System.Int32 RaycastNonAlloc_Internal_Injected(ref UnityEngine.PhysicsScene2D physicsScene, ref UnityEngine.Vector2 origin, ref UnityEngine.Vector2 direction, System.Single distance, ref UnityEngine.ContactFilter2D contactFilter, out UnityEngine.RaycastHit2D[] results)
    // Offset: 0x2894578
    static int RaycastNonAlloc_Internal_Injected(ByRef<::UnityEngine::PhysicsScene2D> physicsScene, ByRef<::UnityEngine::Vector2> origin, ByRef<::UnityEngine::Vector2> direction, float distance, ByRef<::UnityEngine::ContactFilter2D> contactFilter, ByRef<::ArrayW<::UnityEngine::RaycastHit2D>> results);
    // static private System.Void CircleCast_Internal_Injected(ref UnityEngine.PhysicsScene2D physicsScene, ref UnityEngine.Vector2 origin, System.Single radius, ref UnityEngine.Vector2 direction, System.Single distance, ref UnityEngine.ContactFilter2D contactFilter, out UnityEngine.RaycastHit2D ret)
    // Offset: 0x2894694
    static void CircleCast_Internal_Injected(ByRef<::UnityEngine::PhysicsScene2D> physicsScene, ByRef<::UnityEngine::Vector2> origin, float radius, ByRef<::UnityEngine::Vector2> direction, float distance, ByRef<::UnityEngine::ContactFilter2D> contactFilter, ByRef<::UnityEngine::RaycastHit2D> ret);
    // static private System.Int32 GetRayIntersectionNonAlloc_Internal_Injected(ref UnityEngine.PhysicsScene2D physicsScene, ref UnityEngine.Vector3 origin, ref UnityEngine.Vector3 direction, System.Single distance, System.Int32 layerMask, out UnityEngine.RaycastHit2D[] results)
    // Offset: 0x2894798
    static int GetRayIntersectionNonAlloc_Internal_Injected(ByRef<::UnityEngine::PhysicsScene2D> physicsScene, ByRef<::UnityEngine::Vector3> origin, ByRef<::UnityEngine::Vector3> direction, float distance, int layerMask, ByRef<::ArrayW<::UnityEngine::RaycastHit2D>> results);
    // static private UnityEngine.Collider2D OverlapPoint_Internal_Injected(ref UnityEngine.PhysicsScene2D physicsScene, ref UnityEngine.Vector2 point, ref UnityEngine.ContactFilter2D contactFilter)
    // Offset: 0x2894870
    static ::UnityEngine::Collider2D* OverlapPoint_Internal_Injected(ByRef<::UnityEngine::PhysicsScene2D> physicsScene, ByRef<::UnityEngine::Vector2> point, ByRef<::UnityEngine::ContactFilter2D> contactFilter);
    // static private UnityEngine.Collider2D OverlapCircle_Internal_Injected(ref UnityEngine.PhysicsScene2D physicsScene, ref UnityEngine.Vector2 point, System.Single radius, ref UnityEngine.ContactFilter2D contactFilter)
    // Offset: 0x289492C
    static ::UnityEngine::Collider2D* OverlapCircle_Internal_Injected(ByRef<::UnityEngine::PhysicsScene2D> physicsScene, ByRef<::UnityEngine::Vector2> point, float radius, ByRef<::UnityEngine::ContactFilter2D> contactFilter);
    // public override System.String ToString()
    // Offset: 0xBD3008
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Int32 GetHashCode()
    // Offset: 0xBD3010
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object other)
    // Offset: 0xBD3018
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object other)
    bool Equals(::Il2CppObject* other);
  }; // UnityEngine.PhysicsScene2D
  #pragma pack(pop)
  static check_size<sizeof(PhysicsScene2D), 0 + sizeof(int)> __UnityEngine_PhysicsScene2DSizeCheck;
  static_assert(sizeof(PhysicsScene2D) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::PhysicsScene2D::*)(::UnityEngine::PhysicsScene2D)>(&UnityEngine::PhysicsScene2D::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicsScene2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RaycastHit2D (UnityEngine::PhysicsScene2D::*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::ContactFilter2D)>(&UnityEngine::PhysicsScene2D::Linecast)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, contactFilter});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::Linecast_Internal
// Il2CppName: Linecast_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RaycastHit2D (*)(::UnityEngine::PhysicsScene2D, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::ContactFilter2D)>(&UnityEngine::PhysicsScene2D::Linecast_Internal)> {
  static const MethodInfo* get() {
    static auto* physicsScene = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicsScene2D")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "Linecast_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsScene, start, end, contactFilter});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RaycastHit2D (UnityEngine::PhysicsScene2D::*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, float, int)>(&UnityEngine::PhysicsScene2D::Raycast)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, direction, distance, layerMask});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RaycastHit2D (UnityEngine::PhysicsScene2D::*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, float, ::UnityEngine::ContactFilter2D)>(&UnityEngine::PhysicsScene2D::Raycast)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, direction, distance, contactFilter});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::Raycast_Internal
// Il2CppName: Raycast_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RaycastHit2D (*)(::UnityEngine::PhysicsScene2D, ::UnityEngine::Vector2, ::UnityEngine::Vector2, float, ::UnityEngine::ContactFilter2D)>(&UnityEngine::PhysicsScene2D::Raycast_Internal)> {
  static const MethodInfo* get() {
    static auto* physicsScene = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicsScene2D")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "Raycast_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsScene, origin, direction, distance, contactFilter});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::PhysicsScene2D::*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, float, ::UnityEngine::ContactFilter2D, ::ArrayW<::UnityEngine::RaycastHit2D>)>(&UnityEngine::PhysicsScene2D::Raycast)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->byval_arg;
    static auto* results = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit2D"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, direction, distance, contactFilter, results});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::RaycastNonAlloc_Internal
// Il2CppName: RaycastNonAlloc_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::PhysicsScene2D, ::UnityEngine::Vector2, ::UnityEngine::Vector2, float, ::UnityEngine::ContactFilter2D, ByRef<::ArrayW<::UnityEngine::RaycastHit2D>>)>(&UnityEngine::PhysicsScene2D::RaycastNonAlloc_Internal)> {
  static const MethodInfo* get() {
    static auto* physicsScene = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicsScene2D")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->byval_arg;
    static auto* results = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit2D"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "RaycastNonAlloc_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsScene, origin, direction, distance, contactFilter, results});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::CircleCast
// Il2CppName: CircleCast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RaycastHit2D (UnityEngine::PhysicsScene2D::*)(::UnityEngine::Vector2, float, ::UnityEngine::Vector2, float, ::UnityEngine::ContactFilter2D)>(&UnityEngine::PhysicsScene2D::CircleCast)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "CircleCast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, radius, direction, distance, contactFilter});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::CircleCast_Internal
// Il2CppName: CircleCast_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RaycastHit2D (*)(::UnityEngine::PhysicsScene2D, ::UnityEngine::Vector2, float, ::UnityEngine::Vector2, float, ::UnityEngine::ContactFilter2D)>(&UnityEngine::PhysicsScene2D::CircleCast_Internal)> {
  static const MethodInfo* get() {
    static auto* physicsScene = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicsScene2D")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "CircleCast_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsScene, origin, radius, direction, distance, contactFilter});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::GetRayIntersection
// Il2CppName: GetRayIntersection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::PhysicsScene2D::*)(::UnityEngine::Ray, float, ::ArrayW<::UnityEngine::RaycastHit2D>, int)>(&UnityEngine::PhysicsScene2D::GetRayIntersection)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* results = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit2D"), 1)->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "GetRayIntersection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, distance, results, layerMask});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::GetRayIntersectionNonAlloc_Internal
// Il2CppName: GetRayIntersectionNonAlloc_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::PhysicsScene2D, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float, int, ByRef<::ArrayW<::UnityEngine::RaycastHit2D>>)>(&UnityEngine::PhysicsScene2D::GetRayIntersectionNonAlloc_Internal)> {
  static const MethodInfo* get() {
    static auto* physicsScene = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicsScene2D")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* results = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit2D"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "GetRayIntersectionNonAlloc_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsScene, origin, direction, distance, layerMask, results});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::OverlapPoint
// Il2CppName: OverlapPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider2D* (UnityEngine::PhysicsScene2D::*)(::UnityEngine::Vector2, ::UnityEngine::ContactFilter2D)>(&UnityEngine::PhysicsScene2D::OverlapPoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "OverlapPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, contactFilter});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::OverlapPoint_Internal
// Il2CppName: OverlapPoint_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider2D* (*)(::UnityEngine::PhysicsScene2D, ::UnityEngine::Vector2, ::UnityEngine::ContactFilter2D)>(&UnityEngine::PhysicsScene2D::OverlapPoint_Internal)> {
  static const MethodInfo* get() {
    static auto* physicsScene = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicsScene2D")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "OverlapPoint_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsScene, point, contactFilter});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::OverlapCircle
// Il2CppName: OverlapCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider2D* (UnityEngine::PhysicsScene2D::*)(::UnityEngine::Vector2, float, ::UnityEngine::ContactFilter2D)>(&UnityEngine::PhysicsScene2D::OverlapCircle)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "OverlapCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, radius, contactFilter});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::OverlapCircle_Internal
// Il2CppName: OverlapCircle_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider2D* (*)(::UnityEngine::PhysicsScene2D, ::UnityEngine::Vector2, float, ::UnityEngine::ContactFilter2D)>(&UnityEngine::PhysicsScene2D::OverlapCircle_Internal)> {
  static const MethodInfo* get() {
    static auto* physicsScene = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicsScene2D")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "OverlapCircle_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsScene, point, radius, contactFilter});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::Linecast_Internal_Injected
// Il2CppName: Linecast_Internal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::PhysicsScene2D>, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::ContactFilter2D>, ByRef<::UnityEngine::RaycastHit2D>)>(&UnityEngine::PhysicsScene2D::Linecast_Internal_Injected)> {
  static const MethodInfo* get() {
    static auto* physicsScene = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicsScene2D")->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit2D")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "Linecast_Internal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsScene, start, end, contactFilter, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::Raycast_Internal_Injected
// Il2CppName: Raycast_Internal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::PhysicsScene2D>, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>, float, ByRef<::UnityEngine::ContactFilter2D>, ByRef<::UnityEngine::RaycastHit2D>)>(&UnityEngine::PhysicsScene2D::Raycast_Internal_Injected)> {
  static const MethodInfo* get() {
    static auto* physicsScene = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicsScene2D")->this_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit2D")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "Raycast_Internal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsScene, origin, direction, distance, contactFilter, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::RaycastNonAlloc_Internal_Injected
// Il2CppName: RaycastNonAlloc_Internal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::UnityEngine::PhysicsScene2D>, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>, float, ByRef<::UnityEngine::ContactFilter2D>, ByRef<::ArrayW<::UnityEngine::RaycastHit2D>>)>(&UnityEngine::PhysicsScene2D::RaycastNonAlloc_Internal_Injected)> {
  static const MethodInfo* get() {
    static auto* physicsScene = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicsScene2D")->this_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->this_arg;
    static auto* results = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit2D"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "RaycastNonAlloc_Internal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsScene, origin, direction, distance, contactFilter, results});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::CircleCast_Internal_Injected
// Il2CppName: CircleCast_Internal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::PhysicsScene2D>, ByRef<::UnityEngine::Vector2>, float, ByRef<::UnityEngine::Vector2>, float, ByRef<::UnityEngine::ContactFilter2D>, ByRef<::UnityEngine::RaycastHit2D>)>(&UnityEngine::PhysicsScene2D::CircleCast_Internal_Injected)> {
  static const MethodInfo* get() {
    static auto* physicsScene = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicsScene2D")->this_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->this_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit2D")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "CircleCast_Internal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsScene, origin, radius, direction, distance, contactFilter, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::GetRayIntersectionNonAlloc_Internal_Injected
// Il2CppName: GetRayIntersectionNonAlloc_Internal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::UnityEngine::PhysicsScene2D>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, float, int, ByRef<::ArrayW<::UnityEngine::RaycastHit2D>>)>(&UnityEngine::PhysicsScene2D::GetRayIntersectionNonAlloc_Internal_Injected)> {
  static const MethodInfo* get() {
    static auto* physicsScene = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicsScene2D")->this_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* results = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit2D"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "GetRayIntersectionNonAlloc_Internal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsScene, origin, direction, distance, layerMask, results});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::OverlapPoint_Internal_Injected
// Il2CppName: OverlapPoint_Internal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider2D* (*)(ByRef<::UnityEngine::PhysicsScene2D>, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::ContactFilter2D>)>(&UnityEngine::PhysicsScene2D::OverlapPoint_Internal_Injected)> {
  static const MethodInfo* get() {
    static auto* physicsScene = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicsScene2D")->this_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "OverlapPoint_Internal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsScene, point, contactFilter});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::OverlapCircle_Internal_Injected
// Il2CppName: OverlapCircle_Internal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider2D* (*)(ByRef<::UnityEngine::PhysicsScene2D>, ByRef<::UnityEngine::Vector2>, float, ByRef<::UnityEngine::ContactFilter2D>)>(&UnityEngine::PhysicsScene2D::OverlapCircle_Internal_Injected)> {
  static const MethodInfo* get() {
    static auto* physicsScene = &::il2cpp_utils::GetClassFromName("UnityEngine", "PhysicsScene2D")->this_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* contactFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "ContactFilter2D")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "OverlapCircle_Internal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsScene, point, radius, contactFilter});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::PhysicsScene2D::*)()>(&UnityEngine::PhysicsScene2D::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::PhysicsScene2D::*)()>(&UnityEngine::PhysicsScene2D::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::PhysicsScene2D::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::PhysicsScene2D::*)(::Il2CppObject*)>(&UnityEngine::PhysicsScene2D::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::PhysicsScene2D), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
