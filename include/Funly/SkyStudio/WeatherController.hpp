// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Funly::SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: RainDownfallController
  class RainDownfallController;
  // Forward declaring type: RainSplashController
  class RainSplashController;
  // Forward declaring type: LightningController
  class LightningController;
  // Forward declaring type: WeatherEnclosure
  class WeatherEnclosure;
  // Forward declaring type: WeatherEnclosureDetector
  class WeatherEnclosureDetector;
  // Forward declaring type: SkyProfile
  class SkyProfile;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Completed forward declares
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: WeatherController
  class WeatherController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::WeatherController);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::WeatherController*, "Funly.SkyStudio", "WeatherController");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: Funly.SkyStudio.WeatherController
  // [TokenAttribute] Offset: FFFFFFFF
  class WeatherController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xAE2B18
    // private Funly.SkyStudio.RainDownfallController <rainDownfallController>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::Funly::SkyStudio::RainDownfallController* rainDownfallController;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::RainDownfallController*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAE2B28
    // private Funly.SkyStudio.RainSplashController <rainSplashController>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::Funly::SkyStudio::RainSplashController* rainSplashController;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::RainSplashController*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAE2B38
    // private Funly.SkyStudio.LightningController <lightningController>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Funly::SkyStudio::LightningController* lightningController;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::LightningController*) == 0x8);
    // private Funly.SkyStudio.WeatherEnclosure m_Enclosure
    // Size: 0x8
    // Offset: 0x30
    ::Funly::SkyStudio::WeatherEnclosure* m_Enclosure;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::WeatherEnclosure*) == 0x8);
    // private UnityEngine.MeshRenderer m_EnclosureMeshRenderer
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::MeshRenderer* m_EnclosureMeshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private Funly.SkyStudio.WeatherEnclosureDetector detector
    // Size: 0x8
    // Offset: 0x40
    ::Funly::SkyStudio::WeatherEnclosureDetector* detector;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::WeatherEnclosureDetector*) == 0x8);
    // private Funly.SkyStudio.SkyProfile m_Profile
    // Size: 0x8
    // Offset: 0x48
    ::Funly::SkyStudio::SkyProfile* m_Profile;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::SkyProfile*) == 0x8);
    // private System.Single m_TimeOfDay
    // Size: 0x4
    // Offset: 0x50
    float m_TimeOfDay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Funly.SkyStudio.RainDownfallController <rainDownfallController>k__BackingField
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::RainDownfallController*& dyn_$rainDownfallController$k__BackingField();
    // Get instance field reference: private Funly.SkyStudio.RainSplashController <rainSplashController>k__BackingField
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::RainSplashController*& dyn_$rainSplashController$k__BackingField();
    // Get instance field reference: private Funly.SkyStudio.LightningController <lightningController>k__BackingField
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::LightningController*& dyn_$lightningController$k__BackingField();
    // Get instance field reference: private Funly.SkyStudio.WeatherEnclosure m_Enclosure
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::WeatherEnclosure*& dyn_m_Enclosure();
    // Get instance field reference: private UnityEngine.MeshRenderer m_EnclosureMeshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_m_EnclosureMeshRenderer();
    // Get instance field reference: private Funly.SkyStudio.WeatherEnclosureDetector detector
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::WeatherEnclosureDetector*& dyn_detector();
    // Get instance field reference: private Funly.SkyStudio.SkyProfile m_Profile
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::SkyProfile*& dyn_m_Profile();
    // Get instance field reference: private System.Single m_TimeOfDay
    [[deprecated("Use field access instead!")]] float& dyn_m_TimeOfDay();
    // public Funly.SkyStudio.RainDownfallController get_rainDownfallController()
    // Offset: 0x1525F50
    ::Funly::SkyStudio::RainDownfallController* get_rainDownfallController();
    // protected System.Void set_rainDownfallController(Funly.SkyStudio.RainDownfallController value)
    // Offset: 0x1525F58
    void set_rainDownfallController(::Funly::SkyStudio::RainDownfallController* value);
    // public Funly.SkyStudio.RainSplashController get_rainSplashController()
    // Offset: 0x1525F60
    ::Funly::SkyStudio::RainSplashController* get_rainSplashController();
    // protected System.Void set_rainSplashController(Funly.SkyStudio.RainSplashController value)
    // Offset: 0x1525F68
    void set_rainSplashController(::Funly::SkyStudio::RainSplashController* value);
    // public Funly.SkyStudio.LightningController get_lightningController()
    // Offset: 0x1525F70
    ::Funly::SkyStudio::LightningController* get_lightningController();
    // protected System.Void set_lightningController(Funly.SkyStudio.LightningController value)
    // Offset: 0x1525F78
    void set_lightningController(::Funly::SkyStudio::LightningController* value);
    // private System.Void Awake()
    // Offset: 0x1525F80
    void Awake();
    // private System.Void Start()
    // Offset: 0x1526024
    void Start();
    // private System.Void OnEnable()
    // Offset: 0x1526028
    void OnEnable();
    // private System.Void DiscoverWeatherControllers()
    // Offset: 0x1525F84
    void DiscoverWeatherControllers();
    // private System.Void OnDisable()
    // Offset: 0x15261CC
    void OnDisable();
    // public System.Void UpdateForTimeOfDay(Funly.SkyStudio.SkyProfile skyProfile, System.Single timeOfDay)
    // Offset: 0x1526324
    void UpdateForTimeOfDay(::Funly::SkyStudio::SkyProfile* skyProfile, float timeOfDay);
    // private System.Void LateUpdate()
    // Offset: 0x1526494
    void LateUpdate();
    // private System.Void OnEnclosureDidChange(Funly.SkyStudio.WeatherEnclosure enclosure)
    // Offset: 0x1526498
    void OnEnclosureDidChange(::Funly::SkyStudio::WeatherEnclosure* enclosure);
    // public System.Void .ctor()
    // Offset: 0x1526570
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WeatherController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::WeatherController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WeatherController*, creationType>()));
    }
  }; // Funly.SkyStudio.WeatherController
  #pragma pack(pop)
  static check_size<sizeof(WeatherController), 80 + sizeof(float)> __Funly_SkyStudio_WeatherControllerSizeCheck;
  static_assert(sizeof(WeatherController) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherController::get_rainDownfallController
// Il2CppName: get_rainDownfallController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Funly::SkyStudio::RainDownfallController* (Funly::SkyStudio::WeatherController::*)()>(&Funly::SkyStudio::WeatherController::get_rainDownfallController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherController*), "get_rainDownfallController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherController::set_rainDownfallController
// Il2CppName: set_rainDownfallController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherController::*)(::Funly::SkyStudio::RainDownfallController*)>(&Funly::SkyStudio::WeatherController::set_rainDownfallController)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "RainDownfallController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherController*), "set_rainDownfallController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherController::get_rainSplashController
// Il2CppName: get_rainSplashController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Funly::SkyStudio::RainSplashController* (Funly::SkyStudio::WeatherController::*)()>(&Funly::SkyStudio::WeatherController::get_rainSplashController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherController*), "get_rainSplashController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherController::set_rainSplashController
// Il2CppName: set_rainSplashController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherController::*)(::Funly::SkyStudio::RainSplashController*)>(&Funly::SkyStudio::WeatherController::set_rainSplashController)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "RainSplashController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherController*), "set_rainSplashController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherController::get_lightningController
// Il2CppName: get_lightningController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Funly::SkyStudio::LightningController* (Funly::SkyStudio::WeatherController::*)()>(&Funly::SkyStudio::WeatherController::get_lightningController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherController*), "get_lightningController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherController::set_lightningController
// Il2CppName: set_lightningController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherController::*)(::Funly::SkyStudio::LightningController*)>(&Funly::SkyStudio::WeatherController::set_lightningController)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "LightningController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherController*), "set_lightningController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherController::*)()>(&Funly::SkyStudio::WeatherController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherController::*)()>(&Funly::SkyStudio::WeatherController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherController::*)()>(&Funly::SkyStudio::WeatherController::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherController::DiscoverWeatherControllers
// Il2CppName: DiscoverWeatherControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherController::*)()>(&Funly::SkyStudio::WeatherController::DiscoverWeatherControllers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherController*), "DiscoverWeatherControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherController::*)()>(&Funly::SkyStudio::WeatherController::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherController::UpdateForTimeOfDay
// Il2CppName: UpdateForTimeOfDay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherController::*)(::Funly::SkyStudio::SkyProfile*, float)>(&Funly::SkyStudio::WeatherController::UpdateForTimeOfDay)> {
  static const MethodInfo* get() {
    static auto* skyProfile = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "SkyProfile")->byval_arg;
    static auto* timeOfDay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherController*), "UpdateForTimeOfDay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{skyProfile, timeOfDay});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherController::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherController::*)()>(&Funly::SkyStudio::WeatherController::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherController*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherController::OnEnclosureDidChange
// Il2CppName: OnEnclosureDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherController::*)(::Funly::SkyStudio::WeatherEnclosure*)>(&Funly::SkyStudio::WeatherController::OnEnclosureDidChange)> {
  static const MethodInfo* get() {
    static auto* enclosure = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "WeatherEnclosure")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherController*), "OnEnclosureDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enclosure});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
