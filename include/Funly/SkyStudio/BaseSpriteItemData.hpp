// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Funly::SkyStudio
namespace Funly::SkyStudio {
  // Skipping declaration: SpriteState because it is already included!
  // Forward declaring type: SpriteSheetData
  class SpriteSheetData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: BaseSpriteItemData
  class BaseSpriteItemData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::BaseSpriteItemData);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::BaseSpriteItemData*, "Funly.SkyStudio", "BaseSpriteItemData");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Size: 0x74
  #pragma pack(push, 1)
  // Autogenerated type: Funly.SkyStudio.BaseSpriteItemData
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseSpriteItemData : public ::Il2CppObject {
    public:
    // Nested type: ::Funly::SkyStudio::BaseSpriteItemData::SpriteState
    struct SpriteState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Funly.SkyStudio.BaseSpriteItemData/SpriteState
    // [TokenAttribute] Offset: FFFFFFFF
    struct SpriteState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SpriteState
      constexpr SpriteState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Funly.SkyStudio.BaseSpriteItemData/SpriteState Unknown
      static constexpr const int Unknown = 0;
      // Get static field: static public Funly.SkyStudio.BaseSpriteItemData/SpriteState Unknown
      static ::Funly::SkyStudio::BaseSpriteItemData::SpriteState _get_Unknown();
      // Set static field: static public Funly.SkyStudio.BaseSpriteItemData/SpriteState Unknown
      static void _set_Unknown(::Funly::SkyStudio::BaseSpriteItemData::SpriteState value);
      // static field const value: static public Funly.SkyStudio.BaseSpriteItemData/SpriteState NotStarted
      static constexpr const int NotStarted = 1;
      // Get static field: static public Funly.SkyStudio.BaseSpriteItemData/SpriteState NotStarted
      static ::Funly::SkyStudio::BaseSpriteItemData::SpriteState _get_NotStarted();
      // Set static field: static public Funly.SkyStudio.BaseSpriteItemData/SpriteState NotStarted
      static void _set_NotStarted(::Funly::SkyStudio::BaseSpriteItemData::SpriteState value);
      // static field const value: static public Funly.SkyStudio.BaseSpriteItemData/SpriteState Animating
      static constexpr const int Animating = 2;
      // Get static field: static public Funly.SkyStudio.BaseSpriteItemData/SpriteState Animating
      static ::Funly::SkyStudio::BaseSpriteItemData::SpriteState _get_Animating();
      // Set static field: static public Funly.SkyStudio.BaseSpriteItemData/SpriteState Animating
      static void _set_Animating(::Funly::SkyStudio::BaseSpriteItemData::SpriteState value);
      // static field const value: static public Funly.SkyStudio.BaseSpriteItemData/SpriteState Complete
      static constexpr const int Complete = 3;
      // Get static field: static public Funly.SkyStudio.BaseSpriteItemData/SpriteState Complete
      static ::Funly::SkyStudio::BaseSpriteItemData::SpriteState _get_Complete();
      // Set static field: static public Funly.SkyStudio.BaseSpriteItemData/SpriteState Complete
      static void _set_Complete(::Funly::SkyStudio::BaseSpriteItemData::SpriteState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Funly.SkyStudio.BaseSpriteItemData/SpriteState
    #pragma pack(pop)
    static check_size<sizeof(BaseSpriteItemData::SpriteState), 0 + sizeof(int)> __Funly_SkyStudio_BaseSpriteItemData_SpriteStateSizeCheck;
    static_assert(sizeof(BaseSpriteItemData::SpriteState) == 0x4);
    public:
    // public Funly.SkyStudio.SpriteSheetData spriteSheetData
    // Size: 0x8
    // Offset: 0x10
    ::Funly::SkyStudio::SpriteSheetData* spriteSheetData;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::SpriteSheetData*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAE2994
    // private UnityEngine.Matrix4x4 <modelMatrix>k__BackingField
    // Size: 0x40
    // Offset: 0x18
    ::UnityEngine::Matrix4x4 modelMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // [CompilerGeneratedAttribute] Offset: 0xAE29A4
    // private Funly.SkyStudio.BaseSpriteItemData/SpriteState <state>k__BackingField
    // Size: 0x4
    // Offset: 0x58
    ::Funly::SkyStudio::BaseSpriteItemData::SpriteState state;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::BaseSpriteItemData::SpriteState) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAE29B4
    // private UnityEngine.Vector3 <spritePosition>k__BackingField
    // Size: 0xC
    // Offset: 0x5C
    ::UnityEngine::Vector3 spritePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [CompilerGeneratedAttribute] Offset: 0xAE29C4
    // private System.Single <startTime>k__BackingField
    // Size: 0x4
    // Offset: 0x68
    float startTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAE29D4
    // private System.Single <endTime>k__BackingField
    // Size: 0x4
    // Offset: 0x6C
    float endTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single delay
    // Size: 0x4
    // Offset: 0x70
    float delay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public Funly.SkyStudio.SpriteSheetData spriteSheetData
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::SpriteSheetData*& dyn_spriteSheetData();
    // Get instance field reference: private UnityEngine.Matrix4x4 <modelMatrix>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_$modelMatrix$k__BackingField();
    // Get instance field reference: private Funly.SkyStudio.BaseSpriteItemData/SpriteState <state>k__BackingField
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::BaseSpriteItemData::SpriteState& dyn_$state$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <spritePosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$spritePosition$k__BackingField();
    // Get instance field reference: private System.Single <startTime>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$startTime$k__BackingField();
    // Get instance field reference: private System.Single <endTime>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$endTime$k__BackingField();
    // Get instance field reference: public System.Single delay
    [[deprecated("Use field access instead!")]] float& dyn_delay();
    // public UnityEngine.Matrix4x4 get_modelMatrix()
    // Offset: 0x150DFF0
    ::UnityEngine::Matrix4x4 get_modelMatrix();
    // protected System.Void set_modelMatrix(UnityEngine.Matrix4x4 value)
    // Offset: 0x150E618
    void set_modelMatrix(::UnityEngine::Matrix4x4 value);
    // public Funly.SkyStudio.BaseSpriteItemData/SpriteState get_state()
    // Offset: 0x150DFE0
    ::Funly::SkyStudio::BaseSpriteItemData::SpriteState get_state();
    // protected System.Void set_state(Funly.SkyStudio.BaseSpriteItemData/SpriteState value)
    // Offset: 0x150E634
    void set_state(::Funly::SkyStudio::BaseSpriteItemData::SpriteState value);
    // public UnityEngine.Vector3 get_spritePosition()
    // Offset: 0x150E63C
    ::UnityEngine::Vector3 get_spritePosition();
    // public System.Void set_spritePosition(UnityEngine.Vector3 value)
    // Offset: 0x150E648
    void set_spritePosition(::UnityEngine::Vector3 value);
    // public System.Single get_startTime()
    // Offset: 0x150DFE8
    float get_startTime();
    // protected System.Void set_startTime(System.Single value)
    // Offset: 0x150E654
    void set_startTime(float value);
    // public System.Single get_endTime()
    // Offset: 0x150E014
    float get_endTime();
    // protected System.Void set_endTime(System.Single value)
    // Offset: 0x150E65C
    void set_endTime(float value);
    // public System.Void .ctor()
    // Offset: 0x150E664
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseSpriteItemData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::BaseSpriteItemData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseSpriteItemData*, creationType>()));
    }
    // public System.Void SetTRSMatrix(UnityEngine.Vector3 worldPosition, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale)
    // Offset: 0x150DE08
    void SetTRSMatrix(::UnityEngine::Vector3 worldPosition, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 scale);
    // public System.Void Start()
    // Offset: 0x150DF14
    void Start();
    // public System.Void Continue()
    // Offset: 0x150DF9C
    void Continue();
    // public System.Void Reset()
    // Offset: 0x150D420
    void Reset();
    // static public System.Single CalculateStartTimeWithDelay(System.Single delay)
    // Offset: 0x150E690
    static float CalculateStartTimeWithDelay(float delay);
    // static public System.Single CalculateEndTime(System.Single startTime, System.Int32 itemCount, System.Int32 animationSpeed)
    // Offset: 0x150E6B8
    static float CalculateEndTime(float startTime, int itemCount, int animationSpeed);
  }; // Funly.SkyStudio.BaseSpriteItemData
  #pragma pack(pop)
  static check_size<sizeof(BaseSpriteItemData), 112 + sizeof(float)> __Funly_SkyStudio_BaseSpriteItemDataSizeCheck;
  static_assert(sizeof(BaseSpriteItemData) == 0x74);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::BaseSpriteItemData::SpriteState, "Funly.SkyStudio", "BaseSpriteItemData/SpriteState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::get_modelMatrix
// Il2CppName: get_modelMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (Funly::SkyStudio::BaseSpriteItemData::*)()>(&Funly::SkyStudio::BaseSpriteItemData::get_modelMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "get_modelMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::set_modelMatrix
// Il2CppName: set_modelMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteItemData::*)(::UnityEngine::Matrix4x4)>(&Funly::SkyStudio::BaseSpriteItemData::set_modelMatrix)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "set_modelMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::get_state
// Il2CppName: get_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Funly::SkyStudio::BaseSpriteItemData::SpriteState (Funly::SkyStudio::BaseSpriteItemData::*)()>(&Funly::SkyStudio::BaseSpriteItemData::get_state)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "get_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::set_state
// Il2CppName: set_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteItemData::*)(::Funly::SkyStudio::BaseSpriteItemData::SpriteState)>(&Funly::SkyStudio::BaseSpriteItemData::set_state)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "BaseSpriteItemData/SpriteState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "set_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::get_spritePosition
// Il2CppName: get_spritePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Funly::SkyStudio::BaseSpriteItemData::*)()>(&Funly::SkyStudio::BaseSpriteItemData::get_spritePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "get_spritePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::set_spritePosition
// Il2CppName: set_spritePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteItemData::*)(::UnityEngine::Vector3)>(&Funly::SkyStudio::BaseSpriteItemData::set_spritePosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "set_spritePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::get_startTime
// Il2CppName: get_startTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Funly::SkyStudio::BaseSpriteItemData::*)()>(&Funly::SkyStudio::BaseSpriteItemData::get_startTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "get_startTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::set_startTime
// Il2CppName: set_startTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteItemData::*)(float)>(&Funly::SkyStudio::BaseSpriteItemData::set_startTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "set_startTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::get_endTime
// Il2CppName: get_endTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Funly::SkyStudio::BaseSpriteItemData::*)()>(&Funly::SkyStudio::BaseSpriteItemData::get_endTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "get_endTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::set_endTime
// Il2CppName: set_endTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteItemData::*)(float)>(&Funly::SkyStudio::BaseSpriteItemData::set_endTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "set_endTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::SetTRSMatrix
// Il2CppName: SetTRSMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteItemData::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3)>(&Funly::SkyStudio::BaseSpriteItemData::SetTRSMatrix)> {
  static const MethodInfo* get() {
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "SetTRSMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPosition, rotation, scale});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteItemData::*)()>(&Funly::SkyStudio::BaseSpriteItemData::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::Continue
// Il2CppName: Continue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteItemData::*)()>(&Funly::SkyStudio::BaseSpriteItemData::Continue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "Continue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteItemData::*)()>(&Funly::SkyStudio::BaseSpriteItemData::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::CalculateStartTimeWithDelay
// Il2CppName: CalculateStartTimeWithDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Funly::SkyStudio::BaseSpriteItemData::CalculateStartTimeWithDelay)> {
  static const MethodInfo* get() {
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "CalculateStartTimeWithDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delay});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteItemData::CalculateEndTime
// Il2CppName: CalculateEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, int, int)>(&Funly::SkyStudio::BaseSpriteItemData::CalculateEndTime)> {
  static const MethodInfo* get() {
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* itemCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* animationSpeed = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteItemData*), "CalculateEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startTime, itemCount, animationSpeed});
  }
};
