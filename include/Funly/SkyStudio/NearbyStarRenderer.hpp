// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BaseStarDataRenderer
#include "GlobalNamespace/BaseStarDataRenderer.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Funly::SkyStudio
namespace Funly::SkyStudio {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: RenderTextureFormat
  struct RenderTextureFormat;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Vector4
  struct Vector4;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: NearbyStarRenderer
  class NearbyStarRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::NearbyStarRenderer);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::NearbyStarRenderer*, "Funly.SkyStudio", "NearbyStarRenderer");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: Funly.SkyStudio.NearbyStarRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  class NearbyStarRenderer : public ::GlobalNamespace::BaseStarDataRenderer {
    public:
    // Nested type: ::Funly::SkyStudio::NearbyStarRenderer::$ComputeStarData$d__7
    class $ComputeStarData$d__7;
    // static field const value: static private System.Int32 kMaxStars
    static constexpr const int kMaxStars = 2000;
    // Get static field: static private System.Int32 kMaxStars
    static int _get_kMaxStars();
    // Set static field: static private System.Int32 kMaxStars
    static void _set_kMaxStars(int value);
    // static field const value: static private System.Int32 kStarPointTextureWidth
    static constexpr const int kStarPointTextureWidth = 2048;
    // Get static field: static private System.Int32 kStarPointTextureWidth
    static int _get_kStarPointTextureWidth();
    // Set static field: static private System.Int32 kStarPointTextureWidth
    static void _set_kStarPointTextureWidth(int value);
    // static field const value: static private System.Single kStarPaddingRadiusMultipler
    static constexpr const float kStarPaddingRadiusMultipler = 2.1;
    // Get static field: static private System.Single kStarPaddingRadiusMultipler
    static float _get_kStarPaddingRadiusMultipler();
    // Set static field: static private System.Single kStarPaddingRadiusMultipler
    static void _set_kStarPaddingRadiusMultipler(float value);
    // private UnityEngine.RenderTexture CreateRenderTexture(System.String name, System.Int32 renderTextureSize, UnityEngine.RenderTextureFormat format)
    // Offset: 0x15123C8
    ::UnityEngine::RenderTexture* CreateRenderTexture(::StringW name, int renderTextureSize, ::UnityEngine::RenderTextureFormat format);
    // private UnityEngine.Material GetNearbyStarMaterial(UnityEngine.Vector4 randomSeed, System.Int32 starCount)
    // Offset: 0x1512470
    ::UnityEngine::Material* GetNearbyStarMaterial(::UnityEngine::Vector4 randomSeed, int starCount);
    // private System.Void WriteDebugTexture(UnityEngine.RenderTexture rt, System.String path)
    // Offset: 0x1512678
    void WriteDebugTexture(::UnityEngine::RenderTexture* rt, ::StringW path);
    // private UnityEngine.Texture2D GetStarListTexture(System.String starTexKey, out System.Int32 validStarPixelCount)
    // Offset: 0x1512880
    ::UnityEngine::Texture2D* GetStarListTexture(::StringW starTexKey, ByRef<int> validStarPixelCount);
    // private UnityEngine.Texture2D ConvertToTexture2D(UnityEngine.RenderTexture rt)
    // Offset: 0x15126AC
    ::UnityEngine::Texture2D* ConvertToTexture2D(::UnityEngine::RenderTexture* rt);
    // public override System.Collections.IEnumerator ComputeStarData()
    // Offset: 0x1512BA4
    // Implemented from: BaseStarDataRenderer
    // Base method: System.Collections.IEnumerator BaseStarDataRenderer::ComputeStarData()
    ::System::Collections::IEnumerator* ComputeStarData();
    // public System.Void .ctor()
    // Offset: 0x1512C44
    // Implemented from: BaseStarDataRenderer
    // Base method: System.Void BaseStarDataRenderer::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NearbyStarRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::NearbyStarRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NearbyStarRenderer*, creationType>()));
    }
  }; // Funly.SkyStudio.NearbyStarRenderer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::NearbyStarRenderer::CreateRenderTexture
// Il2CppName: CreateRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTexture* (Funly::SkyStudio::NearbyStarRenderer::*)(::StringW, int, ::UnityEngine::RenderTextureFormat)>(&Funly::SkyStudio::NearbyStarRenderer::CreateRenderTexture)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* renderTextureSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::NearbyStarRenderer*), "CreateRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, renderTextureSize, format});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::NearbyStarRenderer::GetNearbyStarMaterial
// Il2CppName: GetNearbyStarMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (Funly::SkyStudio::NearbyStarRenderer::*)(::UnityEngine::Vector4, int)>(&Funly::SkyStudio::NearbyStarRenderer::GetNearbyStarMaterial)> {
  static const MethodInfo* get() {
    static auto* randomSeed = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* starCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::NearbyStarRenderer*), "GetNearbyStarMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{randomSeed, starCount});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::NearbyStarRenderer::WriteDebugTexture
// Il2CppName: WriteDebugTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::NearbyStarRenderer::*)(::UnityEngine::RenderTexture*, ::StringW)>(&Funly::SkyStudio::NearbyStarRenderer::WriteDebugTexture)> {
  static const MethodInfo* get() {
    static auto* rt = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::NearbyStarRenderer*), "WriteDebugTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rt, path});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::NearbyStarRenderer::GetStarListTexture
// Il2CppName: GetStarListTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (Funly::SkyStudio::NearbyStarRenderer::*)(::StringW, ByRef<int>)>(&Funly::SkyStudio::NearbyStarRenderer::GetStarListTexture)> {
  static const MethodInfo* get() {
    static auto* starTexKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* validStarPixelCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::NearbyStarRenderer*), "GetStarListTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{starTexKey, validStarPixelCount});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::NearbyStarRenderer::ConvertToTexture2D
// Il2CppName: ConvertToTexture2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (Funly::SkyStudio::NearbyStarRenderer::*)(::UnityEngine::RenderTexture*)>(&Funly::SkyStudio::NearbyStarRenderer::ConvertToTexture2D)> {
  static const MethodInfo* get() {
    static auto* rt = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::NearbyStarRenderer*), "ConvertToTexture2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rt});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::NearbyStarRenderer::ComputeStarData
// Il2CppName: ComputeStarData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Funly::SkyStudio::NearbyStarRenderer::*)()>(&Funly::SkyStudio::NearbyStarRenderer::ComputeStarData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::NearbyStarRenderer*), "ComputeStarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::NearbyStarRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
