// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: Funly.SkyStudio.IBaseKeyframe
#include "Funly/SkyStudio/IBaseKeyframe.hpp"
// Including type: Funly.SkyStudio.InterpolationCurve
#include "Funly/SkyStudio/InterpolationCurve.hpp"
// Including type: Funly.SkyStudio.InterpolationDirection
#include "Funly/SkyStudio/InterpolationDirection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: BaseKeyframe
  class BaseKeyframe;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::BaseKeyframe);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::BaseKeyframe*, "Funly.SkyStudio", "BaseKeyframe");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: Funly.SkyStudio.BaseKeyframe
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseKeyframe : public ::Il2CppObject/*, public ::System::IComparable, public ::Funly::SkyStudio::IBaseKeyframe*/ {
    public:
    public:
    // public System.String m_Id
    // Size: 0x8
    // Offset: 0x10
    ::StringW m_Id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single m_Time
    // Size: 0x4
    // Offset: 0x18
    float m_Time;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Funly.SkyStudio.InterpolationCurve m_InterpolationCurve
    // Size: 0x4
    // Offset: 0x1C
    ::Funly::SkyStudio::InterpolationCurve m_InterpolationCurve;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::InterpolationCurve) == 0x4);
    // private Funly.SkyStudio.InterpolationDirection m_InterpolationDirection
    // Size: 0x4
    // Offset: 0x20
    ::Funly::SkyStudio::InterpolationDirection m_InterpolationDirection;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::InterpolationDirection) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IComparable
    operator ::System::IComparable() noexcept {
      return *reinterpret_cast<::System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator ::Funly::SkyStudio::IBaseKeyframe
    operator ::Funly::SkyStudio::IBaseKeyframe() noexcept {
      return *reinterpret_cast<::Funly::SkyStudio::IBaseKeyframe*>(this);
    }
    // Get instance field reference: public System.String m_Id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Id();
    // Get instance field reference: private System.Single m_Time
    [[deprecated("Use field access instead!")]] float& dyn_m_Time();
    // Get instance field reference: private Funly.SkyStudio.InterpolationCurve m_InterpolationCurve
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::InterpolationCurve& dyn_m_InterpolationCurve();
    // Get instance field reference: private Funly.SkyStudio.InterpolationDirection m_InterpolationDirection
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::InterpolationDirection& dyn_m_InterpolationDirection();
    // public System.String get_id()
    // Offset: 0x150CDC8
    ::StringW get_id();
    // public System.Void set_id(System.String value)
    // Offset: 0x150CDD0
    void set_id(::StringW value);
    // public System.Single get_time()
    // Offset: 0x150CDD8
    float get_time();
    // public System.Void set_time(System.Single value)
    // Offset: 0x150CDE0
    void set_time(float value);
    // public Funly.SkyStudio.InterpolationCurve get_interpolationCurve()
    // Offset: 0x150CDE8
    ::Funly::SkyStudio::InterpolationCurve get_interpolationCurve();
    // public System.Void set_interpolationCurve(Funly.SkyStudio.InterpolationCurve value)
    // Offset: 0x150CDF0
    void set_interpolationCurve(::Funly::SkyStudio::InterpolationCurve value);
    // public Funly.SkyStudio.InterpolationDirection get_interpolationDirection()
    // Offset: 0x150CDF8
    ::Funly::SkyStudio::InterpolationDirection get_interpolationDirection();
    // public System.Void set_interpolationDirection(Funly.SkyStudio.InterpolationDirection value)
    // Offset: 0x150CE00
    void set_interpolationDirection(::Funly::SkyStudio::InterpolationDirection value);
    // public System.Void .ctor(System.Single time)
    // Offset: 0x150CE08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseKeyframe* New_ctor(float time) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::BaseKeyframe::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseKeyframe*, creationType>(time)));
    }
    // public System.Int32 CompareTo(System.Object other)
    // Offset: 0x150CEAC
    int CompareTo(::Il2CppObject* other);
  }; // Funly.SkyStudio.BaseKeyframe
  #pragma pack(pop)
  static check_size<sizeof(BaseKeyframe), 32 + sizeof(::Funly::SkyStudio::InterpolationDirection)> __Funly_SkyStudio_BaseKeyframeSizeCheck;
  static_assert(sizeof(BaseKeyframe) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::BaseKeyframe::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Funly::SkyStudio::BaseKeyframe::*)()>(&Funly::SkyStudio::BaseKeyframe::get_id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseKeyframe*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseKeyframe::set_id
// Il2CppName: set_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseKeyframe::*)(::StringW)>(&Funly::SkyStudio::BaseKeyframe::set_id)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseKeyframe*), "set_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseKeyframe::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Funly::SkyStudio::BaseKeyframe::*)()>(&Funly::SkyStudio::BaseKeyframe::get_time)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseKeyframe*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseKeyframe::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseKeyframe::*)(float)>(&Funly::SkyStudio::BaseKeyframe::set_time)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseKeyframe*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseKeyframe::get_interpolationCurve
// Il2CppName: get_interpolationCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Funly::SkyStudio::InterpolationCurve (Funly::SkyStudio::BaseKeyframe::*)()>(&Funly::SkyStudio::BaseKeyframe::get_interpolationCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseKeyframe*), "get_interpolationCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseKeyframe::set_interpolationCurve
// Il2CppName: set_interpolationCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseKeyframe::*)(::Funly::SkyStudio::InterpolationCurve)>(&Funly::SkyStudio::BaseKeyframe::set_interpolationCurve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "InterpolationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseKeyframe*), "set_interpolationCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseKeyframe::get_interpolationDirection
// Il2CppName: get_interpolationDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Funly::SkyStudio::InterpolationDirection (Funly::SkyStudio::BaseKeyframe::*)()>(&Funly::SkyStudio::BaseKeyframe::get_interpolationDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseKeyframe*), "get_interpolationDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseKeyframe::set_interpolationDirection
// Il2CppName: set_interpolationDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseKeyframe::*)(::Funly::SkyStudio::InterpolationDirection)>(&Funly::SkyStudio::BaseKeyframe::set_interpolationDirection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "InterpolationDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseKeyframe*), "set_interpolationDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseKeyframe::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Funly::SkyStudio::BaseKeyframe::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Funly::SkyStudio::BaseKeyframe::*)(::Il2CppObject*)>(&Funly::SkyStudio::BaseKeyframe::CompareTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseKeyframe*), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
