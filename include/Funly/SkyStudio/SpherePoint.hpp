// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: SpherePoint
  class SpherePoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::SpherePoint);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::SpherePoint*, "Funly.SkyStudio", "SpherePoint");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Funly.SkyStudio.SpherePoint
  // [TokenAttribute] Offset: FFFFFFFF
  class SpherePoint : public ::Il2CppObject {
    public:
    public:
    // public System.Single horizontalRotation
    // Size: 0x4
    // Offset: 0x10
    float horizontalRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single verticalRotation
    // Size: 0x4
    // Offset: 0x14
    float verticalRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // static field const value: static public System.Single MinHorizontalRotation
    static constexpr const float MinHorizontalRotation = -3.1415927;
    // Get static field: static public System.Single MinHorizontalRotation
    static float _get_MinHorizontalRotation();
    // Set static field: static public System.Single MinHorizontalRotation
    static void _set_MinHorizontalRotation(float value);
    // static field const value: static public System.Single MaxHorizontalRotation
    static constexpr const float MaxHorizontalRotation = 3.1415927;
    // Get static field: static public System.Single MaxHorizontalRotation
    static float _get_MaxHorizontalRotation();
    // Set static field: static public System.Single MaxHorizontalRotation
    static void _set_MaxHorizontalRotation(float value);
    // static field const value: static public System.Single MinVerticalRotation
    static constexpr const float MinVerticalRotation = -1.5707964;
    // Get static field: static public System.Single MinVerticalRotation
    static float _get_MinVerticalRotation();
    // Set static field: static public System.Single MinVerticalRotation
    static void _set_MinVerticalRotation(float value);
    // static field const value: static public System.Single MaxVerticalRotation
    static constexpr const float MaxVerticalRotation = 1.5707964;
    // Get static field: static public System.Single MaxVerticalRotation
    static float _get_MaxVerticalRotation();
    // Set static field: static public System.Single MaxVerticalRotation
    static void _set_MaxVerticalRotation(float value);
    // Get instance field reference: public System.Single horizontalRotation
    [[deprecated("Use field access instead!")]] float& dyn_horizontalRotation();
    // Get instance field reference: public System.Single verticalRotation
    [[deprecated("Use field access instead!")]] float& dyn_verticalRotation();
    // public System.Void .ctor(System.Single horizontalRotation, System.Single verticalRotation)
    // Offset: 0x15136BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpherePoint* New_ctor(float horizontalRotation, float verticalRotation) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::SpherePoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpherePoint*, creationType>(horizontalRotation, verticalRotation)));
    }
    // public System.Void .ctor(UnityEngine.Vector3 worldDirection)
    // Offset: 0x151BCA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpherePoint* New_ctor(::UnityEngine::Vector3 worldDirection) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::SpherePoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpherePoint*, creationType>(worldDirection)));
    }
    // public System.Void SetFromWorldDirection(UnityEngine.Vector3 worldDirection)
    // Offset: 0x151BE08
    void SetFromWorldDirection(::UnityEngine::Vector3 worldDirection);
    // public UnityEngine.Vector3 GetWorldDirection()
    // Offset: 0x15136F4
    ::UnityEngine::Vector3 GetWorldDirection();
  }; // Funly.SkyStudio.SpherePoint
  #pragma pack(pop)
  static check_size<sizeof(SpherePoint), 20 + sizeof(float)> __Funly_SkyStudio_SpherePointSizeCheck;
  static_assert(sizeof(SpherePoint) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::SpherePoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Funly::SkyStudio::SpherePoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Funly::SkyStudio::SpherePoint::SetFromWorldDirection
// Il2CppName: SetFromWorldDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::SpherePoint::*)(::UnityEngine::Vector3)>(&Funly::SkyStudio::SpherePoint::SetFromWorldDirection)> {
  static const MethodInfo* get() {
    static auto* worldDirection = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::SpherePoint*), "SetFromWorldDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldDirection});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::SpherePoint::GetWorldDirection
// Il2CppName: GetWorldDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Funly::SkyStudio::SpherePoint::*)()>(&Funly::SkyStudio::SpherePoint::GetWorldDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::SpherePoint*), "GetWorldDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
