// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Bounds
  struct Bounds;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: Funly::SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: BaseSpriteItemData
  class BaseSpriteItemData;
  // Forward declaring type: SpriteSheetData
  class SpriteSheetData;
}
// Completed forward declares
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: BaseSpriteInstancedRenderer
  class BaseSpriteInstancedRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::BaseSpriteInstancedRenderer);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::BaseSpriteInstancedRenderer*, "Funly.SkyStudio", "BaseSpriteInstancedRenderer");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: Funly.SkyStudio.BaseSpriteInstancedRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseSpriteInstancedRenderer : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xAE2904
    // private System.Int32 <maxSprites>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int maxSprites;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: maxSprites and: modelMesh
    char __padding0[0x4] = {};
    // [TooltipAttribute] Offset: 0xAE2914
    // public UnityEngine.Mesh modelMesh
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Mesh* modelMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // [TooltipAttribute] Offset: 0xAE294C
    // public UnityEngine.Material renderMaterial
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* renderMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // protected System.Collections.Generic.Queue`1<Funly.SkyStudio.BaseSpriteItemData> m_Available
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Queue_1<::Funly::SkyStudio::BaseSpriteItemData*>* m_Available;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Funly::SkyStudio::BaseSpriteItemData*>*) == 0x8);
    // protected System.Collections.Generic.HashSet`1<Funly.SkyStudio.BaseSpriteItemData> m_Active
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::HashSet_1<::Funly::SkyStudio::BaseSpriteItemData*>* m_Active;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Funly::SkyStudio::BaseSpriteItemData*>*) == 0x8);
    // private UnityEngine.MaterialPropertyBlock m_PropertyBlock
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::MaterialPropertyBlock* m_PropertyBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // private UnityEngine.Matrix4x4[] m_ModelMatrices
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Matrix4x4> m_ModelMatrices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Matrix4x4>) == 0x8);
    // private System.Single[] m_StartTimes
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<float> m_StartTimes;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] m_EndTimes
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<float> m_EndTimes;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // protected Funly.SkyStudio.SpriteSheetData m_SpriteSheetLayout
    // Size: 0x8
    // Offset: 0x60
    ::Funly::SkyStudio::SpriteSheetData* m_SpriteSheetLayout;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::SpriteSheetData*) == 0x8);
    // protected UnityEngine.Texture m_SpriteTexture
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Texture* m_SpriteTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // protected UnityEngine.Color m_TintColor
    // Size: 0x10
    // Offset: 0x70
    ::UnityEngine::Color m_TintColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [CompilerGeneratedAttribute] Offset: 0xAE2984
    // private UnityEngine.Camera <m_ViewerCamera>k__BackingField
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Camera* m_ViewerCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Int32 kArrayMaxSprites
    static constexpr const int kArrayMaxSprites = 1000;
    // Get static field: static public System.Int32 kArrayMaxSprites
    static int _get_kArrayMaxSprites();
    // Set static field: static public System.Int32 kArrayMaxSprites
    static void _set_kArrayMaxSprites(int value);
    // Get instance field reference: private System.Int32 <maxSprites>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$maxSprites$k__BackingField();
    // Get instance field reference: public UnityEngine.Mesh modelMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_modelMesh();
    // Get instance field reference: public UnityEngine.Material renderMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_renderMaterial();
    // Get instance field reference: protected System.Collections.Generic.Queue`1<Funly.SkyStudio.BaseSpriteItemData> m_Available
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Funly::SkyStudio::BaseSpriteItemData*>*& dyn_m_Available();
    // Get instance field reference: protected System.Collections.Generic.HashSet`1<Funly.SkyStudio.BaseSpriteItemData> m_Active
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Funly::SkyStudio::BaseSpriteItemData*>*& dyn_m_Active();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock m_PropertyBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_m_PropertyBlock();
    // Get instance field reference: private UnityEngine.Matrix4x4[] m_ModelMatrices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Matrix4x4>& dyn_m_ModelMatrices();
    // Get instance field reference: private System.Single[] m_StartTimes
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_StartTimes();
    // Get instance field reference: private System.Single[] m_EndTimes
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_EndTimes();
    // Get instance field reference: protected Funly.SkyStudio.SpriteSheetData m_SpriteSheetLayout
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::SpriteSheetData*& dyn_m_SpriteSheetLayout();
    // Get instance field reference: protected UnityEngine.Texture m_SpriteTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_m_SpriteTexture();
    // Get instance field reference: protected UnityEngine.Color m_TintColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_TintColor();
    // Get instance field reference: private UnityEngine.Camera <m_ViewerCamera>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_$m_ViewerCamera$k__BackingField();
    // public System.Int32 get_maxSprites()
    // Offset: 0x150D1D4
    int get_maxSprites();
    // protected System.Void set_maxSprites(System.Int32 value)
    // Offset: 0x150D1DC
    void set_maxSprites(int value);
    // protected UnityEngine.Camera get_m_ViewerCamera()
    // Offset: 0x150D1E4
    ::UnityEngine::Camera* get_m_ViewerCamera();
    // protected System.Void set_m_ViewerCamera(UnityEngine.Camera value)
    // Offset: 0x150D1EC
    void set_m_ViewerCamera(::UnityEngine::Camera* value);
    // private System.Void Start()
    // Offset: 0x150D1F4
    void Start();
    // protected UnityEngine.Bounds CalculateMeshBounds()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Bounds CalculateMeshBounds();
    // protected Funly.SkyStudio.BaseSpriteItemData CreateSpriteItemData()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Funly::SkyStudio::BaseSpriteItemData* CreateSpriteItemData();
    // protected System.Boolean IsRenderingEnabled()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsRenderingEnabled();
    // protected System.Int32 GetNextSpawnCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetNextSpawnCount();
    // protected System.Void CalculateSpriteTRS(Funly.SkyStudio.BaseSpriteItemData data, out UnityEngine.Vector3 spritePosition, out UnityEngine.Quaternion spriteRotation, out UnityEngine.Vector3 spriteScale)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CalculateSpriteTRS(::Funly::SkyStudio::BaseSpriteItemData* data, ByRef<::UnityEngine::Vector3> spritePosition, ByRef<::UnityEngine::Quaternion> spriteRotation, ByRef<::UnityEngine::Vector3> spriteScale);
    // protected System.Void ConfigureSpriteItemData(Funly.SkyStudio.BaseSpriteItemData data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ConfigureSpriteItemData(::Funly::SkyStudio::BaseSpriteItemData* data);
    // protected System.Void PrepareDataArraysForRendering(System.Int32 instanceId, Funly.SkyStudio.BaseSpriteItemData data)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void PrepareDataArraysForRendering(int instanceId, ::Funly::SkyStudio::BaseSpriteItemData* data);
    // protected System.Void PopulatePropertyBlockForRendering(ref UnityEngine.MaterialPropertyBlock propertyBlock)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void PopulatePropertyBlockForRendering(ByRef<::UnityEngine::MaterialPropertyBlock*> propertyBlock);
    // private Funly.SkyStudio.BaseSpriteItemData DequeueNextSpriteItemData()
    // Offset: 0x150D298
    ::Funly::SkyStudio::BaseSpriteItemData* DequeueNextSpriteItemData();
    // private System.Void ReturnSpriteItemData(Funly.SkyStudio.BaseSpriteItemData splash)
    // Offset: 0x150D368
    void ReturnSpriteItemData(::Funly::SkyStudio::BaseSpriteItemData* splash);
    // protected System.Void LateUpdate()
    // Offset: 0x150D438
    void LateUpdate();
    // private System.Void GenerateNewSprites()
    // Offset: 0x150D494
    void GenerateNewSprites();
    // private System.Void AdvanceAllSprites()
    // Offset: 0x150D5D4
    void AdvanceAllSprites();
    // private System.Void RenderAllSprites()
    // Offset: 0x150D768
    void RenderAllSprites();
    // protected UnityEngine.Mesh GenerateMesh()
    // Offset: 0x150E01C
    ::UnityEngine::Mesh* GenerateMesh();
    // protected System.Void .ctor()
    // Offset: 0x150E508
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseSpriteInstancedRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::BaseSpriteInstancedRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseSpriteInstancedRenderer*, creationType>()));
    }
  }; // Funly.SkyStudio.BaseSpriteInstancedRenderer
  #pragma pack(pop)
  static check_size<sizeof(BaseSpriteInstancedRenderer), 128 + sizeof(::UnityEngine::Camera*)> __Funly_SkyStudio_BaseSpriteInstancedRendererSizeCheck;
  static_assert(sizeof(BaseSpriteInstancedRenderer) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::get_maxSprites
// Il2CppName: get_maxSprites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)()>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::get_maxSprites)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "get_maxSprites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::set_maxSprites
// Il2CppName: set_maxSprites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)(int)>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::set_maxSprites)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "set_maxSprites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::get_m_ViewerCamera
// Il2CppName: get_m_ViewerCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)()>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::get_m_ViewerCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "get_m_ViewerCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::set_m_ViewerCamera
// Il2CppName: set_m_ViewerCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)(::UnityEngine::Camera*)>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::set_m_ViewerCamera)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "set_m_ViewerCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)()>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::CalculateMeshBounds
// Il2CppName: CalculateMeshBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)()>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::CalculateMeshBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "CalculateMeshBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::CreateSpriteItemData
// Il2CppName: CreateSpriteItemData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Funly::SkyStudio::BaseSpriteItemData* (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)()>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::CreateSpriteItemData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "CreateSpriteItemData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::IsRenderingEnabled
// Il2CppName: IsRenderingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)()>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::IsRenderingEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "IsRenderingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::GetNextSpawnCount
// Il2CppName: GetNextSpawnCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)()>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::GetNextSpawnCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "GetNextSpawnCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::CalculateSpriteTRS
// Il2CppName: CalculateSpriteTRS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)(::Funly::SkyStudio::BaseSpriteItemData*, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Vector3>)>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::CalculateSpriteTRS)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "BaseSpriteItemData")->byval_arg;
    static auto* spritePosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* spriteRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* spriteScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "CalculateSpriteTRS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, spritePosition, spriteRotation, spriteScale});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::ConfigureSpriteItemData
// Il2CppName: ConfigureSpriteItemData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)(::Funly::SkyStudio::BaseSpriteItemData*)>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::ConfigureSpriteItemData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "BaseSpriteItemData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "ConfigureSpriteItemData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::PrepareDataArraysForRendering
// Il2CppName: PrepareDataArraysForRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)(int, ::Funly::SkyStudio::BaseSpriteItemData*)>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::PrepareDataArraysForRendering)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "BaseSpriteItemData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "PrepareDataArraysForRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId, data});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::PopulatePropertyBlockForRendering
// Il2CppName: PopulatePropertyBlockForRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)(ByRef<::UnityEngine::MaterialPropertyBlock*>)>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::PopulatePropertyBlockForRendering)> {
  static const MethodInfo* get() {
    static auto* propertyBlock = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "PopulatePropertyBlockForRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyBlock});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::DequeueNextSpriteItemData
// Il2CppName: DequeueNextSpriteItemData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Funly::SkyStudio::BaseSpriteItemData* (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)()>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::DequeueNextSpriteItemData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "DequeueNextSpriteItemData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::ReturnSpriteItemData
// Il2CppName: ReturnSpriteItemData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)(::Funly::SkyStudio::BaseSpriteItemData*)>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::ReturnSpriteItemData)> {
  static const MethodInfo* get() {
    static auto* splash = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "BaseSpriteItemData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "ReturnSpriteItemData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{splash});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)()>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::GenerateNewSprites
// Il2CppName: GenerateNewSprites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)()>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::GenerateNewSprites)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "GenerateNewSprites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::AdvanceAllSprites
// Il2CppName: AdvanceAllSprites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)()>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::AdvanceAllSprites)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "AdvanceAllSprites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::RenderAllSprites
// Il2CppName: RenderAllSprites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)()>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::RenderAllSprites)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "RenderAllSprites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::GenerateMesh
// Il2CppName: GenerateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (Funly::SkyStudio::BaseSpriteInstancedRenderer::*)()>(&Funly::SkyStudio::BaseSpriteInstancedRenderer::GenerateMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::BaseSpriteInstancedRenderer*), "GenerateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::BaseSpriteInstancedRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
