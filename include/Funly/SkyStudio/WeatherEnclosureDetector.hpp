// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Funly::SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: WeatherEnclosure
  class WeatherEnclosure;
  // Forward declaring type: RainDownfallController
  class RainDownfallController;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: WeatherEnclosureDetector
  class WeatherEnclosureDetector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::WeatherEnclosureDetector);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::WeatherEnclosureDetector*, "Funly.SkyStudio", "WeatherEnclosureDetector");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Funly.SkyStudio.WeatherEnclosureDetector
  // [TokenAttribute] Offset: FFFFFFFF
  class WeatherEnclosureDetector : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [TooltipAttribute] Offset: 0xAE2B48
    // public Funly.SkyStudio.WeatherEnclosure mainEnclosure
    // Size: 0x8
    // Offset: 0x18
    ::Funly::SkyStudio::WeatherEnclosure* mainEnclosure;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::WeatherEnclosure*) == 0x8);
    // private System.Collections.Generic.List`1<Funly.SkyStudio.WeatherEnclosure> triggeredEnclosures
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::Funly::SkyStudio::WeatherEnclosure*>* triggeredEnclosures;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Funly::SkyStudio::WeatherEnclosure*>*) == 0x8);
    // public Funly.SkyStudio.RainDownfallController rainController
    // Size: 0x8
    // Offset: 0x28
    ::Funly::SkyStudio::RainDownfallController* rainController;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::RainDownfallController*) == 0x8);
    // public System.Action`1<Funly.SkyStudio.WeatherEnclosure> enclosureChangedCallback
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<::Funly::SkyStudio::WeatherEnclosure*>* enclosureChangedCallback;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Funly::SkyStudio::WeatherEnclosure*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public Funly.SkyStudio.WeatherEnclosure mainEnclosure
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::WeatherEnclosure*& dyn_mainEnclosure();
    // Get instance field reference: private System.Collections.Generic.List`1<Funly.SkyStudio.WeatherEnclosure> triggeredEnclosures
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Funly::SkyStudio::WeatherEnclosure*>*& dyn_triggeredEnclosures();
    // Get instance field reference: public Funly.SkyStudio.RainDownfallController rainController
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::RainDownfallController*& dyn_rainController();
    // Get instance field reference: public System.Action`1<Funly.SkyStudio.WeatherEnclosure> enclosureChangedCallback
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Funly::SkyStudio::WeatherEnclosure*>*& dyn_enclosureChangedCallback();
    // private System.Void Start()
    // Offset: 0x1526E38
    void Start();
    // private System.Void OnEnable()
    // Offset: 0x1526F9C
    void OnEnable();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x1526FA0
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0x15270EC
    void OnTriggerExit(::UnityEngine::Collider* other);
    // public System.Void ApplyEnclosure()
    // Offset: 0x1526E3C
    void ApplyEnclosure();
    // public System.Void .ctor()
    // Offset: 0x1527210
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WeatherEnclosureDetector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::WeatherEnclosureDetector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WeatherEnclosureDetector*, creationType>()));
    }
  }; // Funly.SkyStudio.WeatherEnclosureDetector
  #pragma pack(pop)
  static check_size<sizeof(WeatherEnclosureDetector), 48 + sizeof(::System::Action_1<::Funly::SkyStudio::WeatherEnclosure*>*)> __Funly_SkyStudio_WeatherEnclosureDetectorSizeCheck;
  static_assert(sizeof(WeatherEnclosureDetector) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherEnclosureDetector::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherEnclosureDetector::*)()>(&Funly::SkyStudio::WeatherEnclosureDetector::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherEnclosureDetector*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherEnclosureDetector::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherEnclosureDetector::*)()>(&Funly::SkyStudio::WeatherEnclosureDetector::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherEnclosureDetector*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherEnclosureDetector::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherEnclosureDetector::*)(::UnityEngine::Collider*)>(&Funly::SkyStudio::WeatherEnclosureDetector::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherEnclosureDetector*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherEnclosureDetector::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherEnclosureDetector::*)(::UnityEngine::Collider*)>(&Funly::SkyStudio::WeatherEnclosureDetector::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherEnclosureDetector*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherEnclosureDetector::ApplyEnclosure
// Il2CppName: ApplyEnclosure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::WeatherEnclosureDetector::*)()>(&Funly::SkyStudio::WeatherEnclosureDetector::ApplyEnclosure)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::WeatherEnclosureDetector*), "ApplyEnclosure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::WeatherEnclosureDetector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
