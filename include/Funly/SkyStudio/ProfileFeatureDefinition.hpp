// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: ProfileFeatureDefinition
  class ProfileFeatureDefinition;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::ProfileFeatureDefinition);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::ProfileFeatureDefinition*, "Funly.SkyStudio", "ProfileFeatureDefinition");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Size: 0x4A
  #pragma pack(push, 1)
  // Autogenerated type: Funly.SkyStudio.ProfileFeatureDefinition
  // [TokenAttribute] Offset: FFFFFFFF
  class ProfileFeatureDefinition : public ::Il2CppObject {
    public:
    // Nested type: ::Funly::SkyStudio::ProfileFeatureDefinition::FeatureType
    struct FeatureType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Funly.SkyStudio.ProfileFeatureDefinition/FeatureType
    // [TokenAttribute] Offset: FFFFFFFF
    struct FeatureType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: FeatureType
      constexpr FeatureType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Funly.SkyStudio.ProfileFeatureDefinition/FeatureType ShaderKeyword
      static constexpr const int ShaderKeyword = 0;
      // Get static field: static public Funly.SkyStudio.ProfileFeatureDefinition/FeatureType ShaderKeyword
      static ::Funly::SkyStudio::ProfileFeatureDefinition::FeatureType _get_ShaderKeyword();
      // Set static field: static public Funly.SkyStudio.ProfileFeatureDefinition/FeatureType ShaderKeyword
      static void _set_ShaderKeyword(::Funly::SkyStudio::ProfileFeatureDefinition::FeatureType value);
      // static field const value: static public Funly.SkyStudio.ProfileFeatureDefinition/FeatureType BooleanValue
      static constexpr const int BooleanValue = 1;
      // Get static field: static public Funly.SkyStudio.ProfileFeatureDefinition/FeatureType BooleanValue
      static ::Funly::SkyStudio::ProfileFeatureDefinition::FeatureType _get_BooleanValue();
      // Set static field: static public Funly.SkyStudio.ProfileFeatureDefinition/FeatureType BooleanValue
      static void _set_BooleanValue(::Funly::SkyStudio::ProfileFeatureDefinition::FeatureType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Funly.SkyStudio.ProfileFeatureDefinition/FeatureType
    #pragma pack(pop)
    static check_size<sizeof(ProfileFeatureDefinition::FeatureType), 0 + sizeof(int)> __Funly_SkyStudio_ProfileFeatureDefinition_FeatureTypeSizeCheck;
    static_assert(sizeof(ProfileFeatureDefinition::FeatureType) == 0x4);
    public:
    // public System.String featureKey
    // Size: 0x8
    // Offset: 0x10
    ::StringW featureKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Funly.SkyStudio.ProfileFeatureDefinition/FeatureType featureType
    // Size: 0x4
    // Offset: 0x18
    ::Funly::SkyStudio::ProfileFeatureDefinition::FeatureType featureType;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::ProfileFeatureDefinition::FeatureType) == 0x4);
    // Padding between fields: featureType and: shaderKeyword
    char __padding1[0x4] = {};
    // public System.String shaderKeyword
    // Size: 0x8
    // Offset: 0x20
    ::StringW shaderKeyword;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String name
    // Size: 0x8
    // Offset: 0x28
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean value
    // Size: 0x1
    // Offset: 0x30
    bool value;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: value and: tooltip
    char __padding4[0x7] = {};
    // public System.String tooltip
    // Size: 0x8
    // Offset: 0x38
    ::StringW tooltip;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String dependsOnFeature
    // Size: 0x8
    // Offset: 0x40
    ::StringW dependsOnFeature;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean dependsOnValue
    // Size: 0x1
    // Offset: 0x48
    bool dependsOnValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isShaderKeywordFeature
    // Size: 0x1
    // Offset: 0x49
    bool isShaderKeywordFeature;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.String featureKey
    [[deprecated("Use field access instead!")]] ::StringW& dyn_featureKey();
    // Get instance field reference: public Funly.SkyStudio.ProfileFeatureDefinition/FeatureType featureType
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::ProfileFeatureDefinition::FeatureType& dyn_featureType();
    // Get instance field reference: public System.String shaderKeyword
    [[deprecated("Use field access instead!")]] ::StringW& dyn_shaderKeyword();
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.Boolean value
    [[deprecated("Use field access instead!")]] bool& dyn_value();
    // Get instance field reference: public System.String tooltip
    [[deprecated("Use field access instead!")]] ::StringW& dyn_tooltip();
    // Get instance field reference: public System.String dependsOnFeature
    [[deprecated("Use field access instead!")]] ::StringW& dyn_dependsOnFeature();
    // Get instance field reference: public System.Boolean dependsOnValue
    [[deprecated("Use field access instead!")]] bool& dyn_dependsOnValue();
    // Get instance field reference: public System.Boolean isShaderKeywordFeature
    [[deprecated("Use field access instead!")]] bool& dyn_isShaderKeywordFeature();
    // static public Funly.SkyStudio.ProfileFeatureDefinition CreateShaderFeature(System.String featureKey, System.String shaderKeyword, System.Boolean value, System.String name, System.String dependsOnFeature, System.Boolean dependsOnValue, System.String tooltip)
    // Offset: 0x1513ACC
    static ::Funly::SkyStudio::ProfileFeatureDefinition* CreateShaderFeature(::StringW featureKey, ::StringW shaderKeyword, bool value, ::StringW name, ::StringW dependsOnFeature, bool dependsOnValue, ::StringW tooltip);
    // static public Funly.SkyStudio.ProfileFeatureDefinition CreateBooleanFeature(System.String featureKey, System.Boolean value, System.String name, System.String dependsOnFeature, System.Boolean dependsOnValue, System.String tooltip)
    // Offset: 0x1513C08
    static ::Funly::SkyStudio::ProfileFeatureDefinition* CreateBooleanFeature(::StringW featureKey, bool value, ::StringW name, ::StringW dependsOnFeature, bool dependsOnValue, ::StringW tooltip);
    // public System.Void .ctor()
    // Offset: 0x1513C00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProfileFeatureDefinition* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::ProfileFeatureDefinition::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProfileFeatureDefinition*, creationType>()));
    }
  }; // Funly.SkyStudio.ProfileFeatureDefinition
  #pragma pack(pop)
  static check_size<sizeof(ProfileFeatureDefinition), 73 + sizeof(bool)> __Funly_SkyStudio_ProfileFeatureDefinitionSizeCheck;
  static_assert(sizeof(ProfileFeatureDefinition) == 0x4A);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::ProfileFeatureDefinition::FeatureType, "Funly.SkyStudio", "ProfileFeatureDefinition/FeatureType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::ProfileFeatureDefinition::CreateShaderFeature
// Il2CppName: CreateShaderFeature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Funly::SkyStudio::ProfileFeatureDefinition* (*)(::StringW, ::StringW, bool, ::StringW, ::StringW, bool, ::StringW)>(&Funly::SkyStudio::ProfileFeatureDefinition::CreateShaderFeature)> {
  static const MethodInfo* get() {
    static auto* featureKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* shaderKeyword = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dependsOnFeature = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dependsOnValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tooltip = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::ProfileFeatureDefinition*), "CreateShaderFeature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{featureKey, shaderKeyword, value, name, dependsOnFeature, dependsOnValue, tooltip});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::ProfileFeatureDefinition::CreateBooleanFeature
// Il2CppName: CreateBooleanFeature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Funly::SkyStudio::ProfileFeatureDefinition* (*)(::StringW, bool, ::StringW, ::StringW, bool, ::StringW)>(&Funly::SkyStudio::ProfileFeatureDefinition::CreateBooleanFeature)> {
  static const MethodInfo* get() {
    static auto* featureKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dependsOnFeature = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dependsOnValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* tooltip = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::ProfileFeatureDefinition*), "CreateBooleanFeature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{featureKey, value, name, dependsOnFeature, dependsOnValue, tooltip});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::ProfileFeatureDefinition::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
