// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Funly.SkyStudio.KeyframeGroup`1
#include "Funly/SkyStudio/KeyframeGroup_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Funly::SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: NumberKeyframe
  class NumberKeyframe;
}
// Completed forward declares
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: NumberKeyframeGroup
  class NumberKeyframeGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::NumberKeyframeGroup);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::NumberKeyframeGroup*, "Funly.SkyStudio", "NumberKeyframeGroup");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // WARNING Size may be invalid!
  // Autogenerated type: Funly.SkyStudio.NumberKeyframeGroup
  // [TokenAttribute] Offset: FFFFFFFF
  class NumberKeyframeGroup : public ::Funly::SkyStudio::KeyframeGroup_1<::Funly::SkyStudio::NumberKeyframe*> {
    public:
    public:
    // public System.Single minValue
    // Size: 0x4
    // Offset: 0x28
    float minValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxValue
    // Size: 0x4
    // Offset: 0x2C
    float maxValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single minValue
    [[deprecated("Use field access instead!")]] float& dyn_minValue();
    // Get instance field reference: public System.Single maxValue
    [[deprecated("Use field access instead!")]] float& dyn_maxValue();
    // public System.Void .ctor(System.String name, System.Single min, System.Single max)
    // Offset: 0x151314C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NumberKeyframeGroup* New_ctor(::StringW name, float min, float max) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::NumberKeyframeGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NumberKeyframeGroup*, creationType>(name, min, max)));
    }
    // public System.Void .ctor(System.String name, System.Single min, System.Single max, Funly.SkyStudio.NumberKeyframe frame)
    // Offset: 0x15131C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NumberKeyframeGroup* New_ctor(::StringW name, float min, float max, ::Funly::SkyStudio::NumberKeyframe* frame) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::NumberKeyframeGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NumberKeyframeGroup*, creationType>(name, min, max, frame)));
    }
    // public System.Single GetFirstValue()
    // Offset: 0x1513254
    float GetFirstValue();
    // public System.Single ValueToPercent(System.Single value)
    // Offset: 0x15132BC
    float ValueToPercent(float value);
    // public System.Single ValuePercentAtTime(System.Single time)
    // Offset: 0x1513344
    float ValuePercentAtTime(float time);
    // public System.Single PercentToValue(System.Single percent)
    // Offset: 0x151358C
    float PercentToValue(float percent);
    // public System.Single NumericValueAtTime(System.Single time)
    // Offset: 0x1513368
    float NumericValueAtTime(float time);
  }; // Funly.SkyStudio.NumberKeyframeGroup
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::NumberKeyframeGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Funly::SkyStudio::NumberKeyframeGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Funly::SkyStudio::NumberKeyframeGroup::GetFirstValue
// Il2CppName: GetFirstValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Funly::SkyStudio::NumberKeyframeGroup::*)()>(&Funly::SkyStudio::NumberKeyframeGroup::GetFirstValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::NumberKeyframeGroup*), "GetFirstValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::NumberKeyframeGroup::ValueToPercent
// Il2CppName: ValueToPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Funly::SkyStudio::NumberKeyframeGroup::*)(float)>(&Funly::SkyStudio::NumberKeyframeGroup::ValueToPercent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::NumberKeyframeGroup*), "ValueToPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::NumberKeyframeGroup::ValuePercentAtTime
// Il2CppName: ValuePercentAtTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Funly::SkyStudio::NumberKeyframeGroup::*)(float)>(&Funly::SkyStudio::NumberKeyframeGroup::ValuePercentAtTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::NumberKeyframeGroup*), "ValuePercentAtTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::NumberKeyframeGroup::PercentToValue
// Il2CppName: PercentToValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Funly::SkyStudio::NumberKeyframeGroup::*)(float)>(&Funly::SkyStudio::NumberKeyframeGroup::PercentToValue)> {
  static const MethodInfo* get() {
    static auto* percent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::NumberKeyframeGroup*), "PercentToValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percent});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::NumberKeyframeGroup::NumericValueAtTime
// Il2CppName: NumericValueAtTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Funly::SkyStudio::NumberKeyframeGroup::*)(float)>(&Funly::SkyStudio::NumberKeyframeGroup::NumericValueAtTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::NumberKeyframeGroup*), "NumericValueAtTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
