// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Funly.SkyStudio.BaseSpriteInstancedRenderer
#include "Funly/SkyStudio/BaseSpriteInstancedRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Funly::SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: SkyProfile
  class SkyProfile;
  // Forward declaring type: LightningArtItem
  class LightningArtItem;
  // Forward declaring type: LightningSpawnArea
  class LightningSpawnArea;
  // Forward declaring type: BaseSpriteItemData
  class BaseSpriteItemData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Bounds
  struct Bounds;
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: LightningRenderer
  class LightningRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::LightningRenderer);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::LightningRenderer*, "Funly.SkyStudio", "LightningRenderer");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Size: 0xBC
  #pragma pack(push, 1)
  // Autogenerated type: Funly.SkyStudio.LightningRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD2744
  class LightningRenderer : public ::Funly::SkyStudio::BaseSpriteInstancedRenderer {
    public:
    public:
    // private System.Single m_LightningProbability
    // Size: 0x4
    // Offset: 0x88
    float m_LightningProbability;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_NextSpawnTime
    // Size: 0x4
    // Offset: 0x8C
    float m_NextSpawnTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Funly.SkyStudio.SkyProfile m_SkyProfile
    // Size: 0x8
    // Offset: 0x90
    ::Funly::SkyStudio::SkyProfile* m_SkyProfile;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::SkyProfile*) == 0x8);
    // private Funly.SkyStudio.LightningArtItem m_Style
    // Size: 0x8
    // Offset: 0x98
    ::Funly::SkyStudio::LightningArtItem* m_Style;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::LightningArtItem*) == 0x8);
    // private System.Single m_TimeOfDay
    // Size: 0x4
    // Offset: 0xA0
    float m_TimeOfDay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_TimeOfDay and: m_AudioSource
    char __padding4[0x4] = {};
    // private UnityEngine.AudioSource m_AudioSource
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::AudioSource* m_AudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Single m_LightningIntensity
    // Size: 0x4
    // Offset: 0xB0
    float m_LightningIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_ThunderSoundDelay
    // Size: 0x4
    // Offset: 0xB4
    float m_ThunderSoundDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_SpawnCoolDown
    // Size: 0x4
    // Offset: 0xB8
    float m_SpawnCoolDown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private System.Collections.Generic.List`1<Funly.SkyStudio.LightningSpawnArea> m_SpawnAreas
    static ::System::Collections::Generic::List_1<::Funly::SkyStudio::LightningSpawnArea*>* _get_m_SpawnAreas();
    // Set static field: static private System.Collections.Generic.List`1<Funly.SkyStudio.LightningSpawnArea> m_SpawnAreas
    static void _set_m_SpawnAreas(::System::Collections::Generic::List_1<::Funly::SkyStudio::LightningSpawnArea*>* value);
    // static field const value: static private System.Single k_ProbabiltyCheckInterval
    static constexpr const float k_ProbabiltyCheckInterval = 0.5;
    // Get static field: static private System.Single k_ProbabiltyCheckInterval
    static float _get_k_ProbabiltyCheckInterval();
    // Set static field: static private System.Single k_ProbabiltyCheckInterval
    static void _set_k_ProbabiltyCheckInterval(float value);
    // Get instance field reference: private System.Single m_LightningProbability
    [[deprecated("Use field access instead!")]] float& dyn_m_LightningProbability();
    // Get instance field reference: private System.Single m_NextSpawnTime
    [[deprecated("Use field access instead!")]] float& dyn_m_NextSpawnTime();
    // Get instance field reference: private Funly.SkyStudio.SkyProfile m_SkyProfile
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::SkyProfile*& dyn_m_SkyProfile();
    // Get instance field reference: private Funly.SkyStudio.LightningArtItem m_Style
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::LightningArtItem*& dyn_m_Style();
    // Get instance field reference: private System.Single m_TimeOfDay
    [[deprecated("Use field access instead!")]] float& dyn_m_TimeOfDay();
    // Get instance field reference: private UnityEngine.AudioSource m_AudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_m_AudioSource();
    // Get instance field reference: private System.Single m_LightningIntensity
    [[deprecated("Use field access instead!")]] float& dyn_m_LightningIntensity();
    // Get instance field reference: private System.Single m_ThunderSoundDelay
    [[deprecated("Use field access instead!")]] float& dyn_m_ThunderSoundDelay();
    // Get instance field reference: private System.Single m_SpawnCoolDown
    [[deprecated("Use field access instead!")]] float& dyn_m_SpawnCoolDown();
    // public System.Void UpdateForTimeOfDay(Funly.SkyStudio.SkyProfile skyProfile, System.Single timeOfDay, Funly.SkyStudio.LightningArtItem artItem)
    // Offset: 0x1510BD0
    void UpdateForTimeOfDay(::Funly::SkyStudio::SkyProfile* skyProfile, float timeOfDay, ::Funly::SkyStudio::LightningArtItem* artItem);
    // private System.Void SyncDataFromSkyProfile()
    // Offset: 0x15117D0
    void SyncDataFromSkyProfile();
    // private Funly.SkyStudio.LightningSpawnArea GetRandomLightningSpawnArea()
    // Offset: 0x15112D8
    ::Funly::SkyStudio::LightningSpawnArea* GetRandomLightningSpawnArea();
    // private System.Void PlayThunderBoltSound()
    // Offset: 0x1511C64
    void PlayThunderBoltSound();
    // static public System.Void AddSpawnArea(Funly.SkyStudio.LightningSpawnArea area)
    // Offset: 0x1511D90
    static void AddSpawnArea(::Funly::SkyStudio::LightningSpawnArea* area);
    // static public System.Void RemoveSpawnArea(Funly.SkyStudio.LightningSpawnArea area)
    // Offset: 0x1511E80
    static void RemoveSpawnArea(::Funly::SkyStudio::LightningSpawnArea* area);
    // private UnityEngine.Vector3 GetRandomWorldPositionInsideSpawnArea(Funly.SkyStudio.LightningSpawnArea area)
    // Offset: 0x15114C4
    ::UnityEngine::Vector3 GetRandomWorldPositionInsideSpawnArea(::Funly::SkyStudio::LightningSpawnArea* area);
    // private System.Single CalculateLightningBoltScaleForArea(Funly.SkyStudio.LightningSpawnArea area)
    // Offset: 0x1511454
    float CalculateLightningBoltScaleForArea(::Funly::SkyStudio::LightningSpawnArea* area);
    // static private System.Void .cctor()
    // Offset: 0x1511F74
    static void _cctor();
    // private System.Void Start()
    // Offset: 0x1510D7C
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Void BaseSpriteInstancedRenderer::Start()
    void Start();
    // protected override UnityEngine.Bounds CalculateMeshBounds()
    // Offset: 0x1510E2C
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: UnityEngine.Bounds BaseSpriteInstancedRenderer::CalculateMeshBounds()
    ::UnityEngine::Bounds CalculateMeshBounds();
    // protected override Funly.SkyStudio.BaseSpriteItemData CreateSpriteItemData()
    // Offset: 0x1510F04
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: Funly.SkyStudio.BaseSpriteItemData BaseSpriteInstancedRenderer::CreateSpriteItemData()
    ::Funly::SkyStudio::BaseSpriteItemData* CreateSpriteItemData();
    // protected override System.Boolean IsRenderingEnabled()
    // Offset: 0x1510F68
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Boolean BaseSpriteInstancedRenderer::IsRenderingEnabled()
    bool IsRenderingEnabled();
    // protected override System.Void CalculateSpriteTRS(Funly.SkyStudio.BaseSpriteItemData data, out UnityEngine.Vector3 spritePosition, out UnityEngine.Quaternion spriteRotation, out UnityEngine.Vector3 spriteScale)
    // Offset: 0x1511068
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Void BaseSpriteInstancedRenderer::CalculateSpriteTRS(Funly.SkyStudio.BaseSpriteItemData data, out UnityEngine.Vector3 spritePosition, out UnityEngine.Quaternion spriteRotation, out UnityEngine.Vector3 spriteScale)
    void CalculateSpriteTRS(::Funly::SkyStudio::BaseSpriteItemData* data, ByRef<::UnityEngine::Vector3> spritePosition, ByRef<::UnityEngine::Quaternion> spriteRotation, ByRef<::UnityEngine::Vector3> spriteScale);
    // protected override System.Void ConfigureSpriteItemData(Funly.SkyStudio.BaseSpriteItemData data)
    // Offset: 0x1511640
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Void BaseSpriteInstancedRenderer::ConfigureSpriteItemData(Funly.SkyStudio.BaseSpriteItemData data)
    void ConfigureSpriteItemData(::Funly::SkyStudio::BaseSpriteItemData* data);
    // protected override System.Void PrepareDataArraysForRendering(System.Int32 instanceId, Funly.SkyStudio.BaseSpriteItemData data)
    // Offset: 0x15116D0
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Void BaseSpriteInstancedRenderer::PrepareDataArraysForRendering(System.Int32 instanceId, Funly.SkyStudio.BaseSpriteItemData data)
    void PrepareDataArraysForRendering(int instanceId, ::Funly::SkyStudio::BaseSpriteItemData* data);
    // protected override System.Void PopulatePropertyBlockForRendering(ref UnityEngine.MaterialPropertyBlock propertyBlock)
    // Offset: 0x15116D4
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Void BaseSpriteInstancedRenderer::PopulatePropertyBlockForRendering(ref UnityEngine.MaterialPropertyBlock propertyBlock)
    void PopulatePropertyBlockForRendering(ByRef<::UnityEngine::MaterialPropertyBlock*> propertyBlock);
    // protected override System.Int32 GetNextSpawnCount()
    // Offset: 0x1511754
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Int32 BaseSpriteInstancedRenderer::GetNextSpawnCount()
    int GetNextSpawnCount();
    // public System.Void .ctor()
    // Offset: 0x1511F70
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Void BaseSpriteInstancedRenderer::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightningRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::LightningRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightningRenderer*, creationType>()));
    }
  }; // Funly.SkyStudio.LightningRenderer
  #pragma pack(pop)
  static check_size<sizeof(LightningRenderer), 184 + sizeof(float)> __Funly_SkyStudio_LightningRendererSizeCheck;
  static_assert(sizeof(LightningRenderer) == 0xBC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::UpdateForTimeOfDay
// Il2CppName: UpdateForTimeOfDay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::LightningRenderer::*)(::Funly::SkyStudio::SkyProfile*, float, ::Funly::SkyStudio::LightningArtItem*)>(&Funly::SkyStudio::LightningRenderer::UpdateForTimeOfDay)> {
  static const MethodInfo* get() {
    static auto* skyProfile = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "SkyProfile")->byval_arg;
    static auto* timeOfDay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* artItem = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "LightningArtItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "UpdateForTimeOfDay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{skyProfile, timeOfDay, artItem});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::SyncDataFromSkyProfile
// Il2CppName: SyncDataFromSkyProfile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::LightningRenderer::*)()>(&Funly::SkyStudio::LightningRenderer::SyncDataFromSkyProfile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "SyncDataFromSkyProfile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::GetRandomLightningSpawnArea
// Il2CppName: GetRandomLightningSpawnArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Funly::SkyStudio::LightningSpawnArea* (Funly::SkyStudio::LightningRenderer::*)()>(&Funly::SkyStudio::LightningRenderer::GetRandomLightningSpawnArea)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "GetRandomLightningSpawnArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::PlayThunderBoltSound
// Il2CppName: PlayThunderBoltSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::LightningRenderer::*)()>(&Funly::SkyStudio::LightningRenderer::PlayThunderBoltSound)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "PlayThunderBoltSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::AddSpawnArea
// Il2CppName: AddSpawnArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Funly::SkyStudio::LightningSpawnArea*)>(&Funly::SkyStudio::LightningRenderer::AddSpawnArea)> {
  static const MethodInfo* get() {
    static auto* area = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "LightningSpawnArea")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "AddSpawnArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{area});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::RemoveSpawnArea
// Il2CppName: RemoveSpawnArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Funly::SkyStudio::LightningSpawnArea*)>(&Funly::SkyStudio::LightningRenderer::RemoveSpawnArea)> {
  static const MethodInfo* get() {
    static auto* area = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "LightningSpawnArea")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "RemoveSpawnArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{area});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::GetRandomWorldPositionInsideSpawnArea
// Il2CppName: GetRandomWorldPositionInsideSpawnArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Funly::SkyStudio::LightningRenderer::*)(::Funly::SkyStudio::LightningSpawnArea*)>(&Funly::SkyStudio::LightningRenderer::GetRandomWorldPositionInsideSpawnArea)> {
  static const MethodInfo* get() {
    static auto* area = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "LightningSpawnArea")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "GetRandomWorldPositionInsideSpawnArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{area});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::CalculateLightningBoltScaleForArea
// Il2CppName: CalculateLightningBoltScaleForArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Funly::SkyStudio::LightningRenderer::*)(::Funly::SkyStudio::LightningSpawnArea*)>(&Funly::SkyStudio::LightningRenderer::CalculateLightningBoltScaleForArea)> {
  static const MethodInfo* get() {
    static auto* area = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "LightningSpawnArea")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "CalculateLightningBoltScaleForArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{area});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Funly::SkyStudio::LightningRenderer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::LightningRenderer::*)()>(&Funly::SkyStudio::LightningRenderer::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::CalculateMeshBounds
// Il2CppName: CalculateMeshBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Funly::SkyStudio::LightningRenderer::*)()>(&Funly::SkyStudio::LightningRenderer::CalculateMeshBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "CalculateMeshBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::CreateSpriteItemData
// Il2CppName: CreateSpriteItemData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Funly::SkyStudio::BaseSpriteItemData* (Funly::SkyStudio::LightningRenderer::*)()>(&Funly::SkyStudio::LightningRenderer::CreateSpriteItemData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "CreateSpriteItemData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::IsRenderingEnabled
// Il2CppName: IsRenderingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Funly::SkyStudio::LightningRenderer::*)()>(&Funly::SkyStudio::LightningRenderer::IsRenderingEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "IsRenderingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::CalculateSpriteTRS
// Il2CppName: CalculateSpriteTRS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::LightningRenderer::*)(::Funly::SkyStudio::BaseSpriteItemData*, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Vector3>)>(&Funly::SkyStudio::LightningRenderer::CalculateSpriteTRS)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "BaseSpriteItemData")->byval_arg;
    static auto* spritePosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* spriteRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* spriteScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "CalculateSpriteTRS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, spritePosition, spriteRotation, spriteScale});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::ConfigureSpriteItemData
// Il2CppName: ConfigureSpriteItemData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::LightningRenderer::*)(::Funly::SkyStudio::BaseSpriteItemData*)>(&Funly::SkyStudio::LightningRenderer::ConfigureSpriteItemData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "BaseSpriteItemData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "ConfigureSpriteItemData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::PrepareDataArraysForRendering
// Il2CppName: PrepareDataArraysForRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::LightningRenderer::*)(int, ::Funly::SkyStudio::BaseSpriteItemData*)>(&Funly::SkyStudio::LightningRenderer::PrepareDataArraysForRendering)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "BaseSpriteItemData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "PrepareDataArraysForRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId, data});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::PopulatePropertyBlockForRendering
// Il2CppName: PopulatePropertyBlockForRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::LightningRenderer::*)(ByRef<::UnityEngine::MaterialPropertyBlock*>)>(&Funly::SkyStudio::LightningRenderer::PopulatePropertyBlockForRendering)> {
  static const MethodInfo* get() {
    static auto* propertyBlock = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "PopulatePropertyBlockForRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyBlock});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::GetNextSpawnCount
// Il2CppName: GetNextSpawnCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Funly::SkyStudio::LightningRenderer::*)()>(&Funly::SkyStudio::LightningRenderer::GetNextSpawnCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::LightningRenderer*), "GetNextSpawnCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::LightningRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
