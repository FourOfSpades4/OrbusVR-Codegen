// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: SpriteArtItem
  class SpriteArtItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::SpriteArtItem);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::SpriteArtItem*, "Funly.SkyStudio", "SpriteArtItem");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Funly.SkyStudio.SpriteArtItem
  // [TokenAttribute] Offset: FFFFFFFF
  class SpriteArtItem : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public UnityEngine.Mesh mesh
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Mesh* mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // public UnityEngine.Material material
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Texture spriteSheetTexture
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Texture* spriteSheetTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public System.Int32 rows
    // Size: 0x4
    // Offset: 0x30
    int rows;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 columns
    // Size: 0x4
    // Offset: 0x34
    int columns;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 totalFrames
    // Size: 0x4
    // Offset: 0x38
    int totalFrames;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 animateSpeed
    // Size: 0x4
    // Offset: 0x3C
    int animateSpeed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0xAE194C
    // public UnityEngine.Color tintColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color tintColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Mesh mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_mesh();
    // Get instance field reference: public UnityEngine.Material material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
    // Get instance field reference: public UnityEngine.Texture spriteSheetTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_spriteSheetTexture();
    // Get instance field reference: public System.Int32 rows
    [[deprecated("Use field access instead!")]] int& dyn_rows();
    // Get instance field reference: public System.Int32 columns
    [[deprecated("Use field access instead!")]] int& dyn_columns();
    // Get instance field reference: public System.Int32 totalFrames
    [[deprecated("Use field access instead!")]] int& dyn_totalFrames();
    // Get instance field reference: public System.Int32 animateSpeed
    [[deprecated("Use field access instead!")]] int& dyn_animateSpeed();
    // Get instance field reference: public UnityEngine.Color tintColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_tintColor();
    // public System.Void .ctor()
    // Offset: 0x151033C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpriteArtItem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::SpriteArtItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpriteArtItem*, creationType>()));
    }
  }; // Funly.SkyStudio.SpriteArtItem
  #pragma pack(pop)
  static check_size<sizeof(SpriteArtItem), 64 + sizeof(::UnityEngine::Color)> __Funly_SkyStudio_SpriteArtItemSizeCheck;
  static_assert(sizeof(SpriteArtItem) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::SpriteArtItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
