// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Funly.SkyStudio.BaseKeyframe
#include "Funly/SkyStudio/BaseKeyframe.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: ColorKeyframe
  class ColorKeyframe;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::ColorKeyframe);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::ColorKeyframe*, "Funly.SkyStudio", "ColorKeyframe");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Funly.SkyStudio.ColorKeyframe
  // [TokenAttribute] Offset: FFFFFFFF
  class ColorKeyframe : public ::Funly::SkyStudio::BaseKeyframe {
    public:
    public:
    // public UnityEngine.Color color
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Creating conversion operator: operator ::UnityEngine::Color
    constexpr operator ::UnityEngine::Color() const noexcept {
      return color;
    }
    // Get instance field reference: public UnityEngine.Color color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_color();
    // public System.Void .ctor(UnityEngine.Color c, System.Single time)
    // Offset: 0x150EC10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorKeyframe* New_ctor(::UnityEngine::Color c, float time) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::ColorKeyframe::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorKeyframe*, creationType>(c, time)));
    }
    // public System.Void .ctor(Funly.SkyStudio.ColorKeyframe keyframe)
    // Offset: 0x150EC7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorKeyframe* New_ctor(::Funly::SkyStudio::ColorKeyframe* keyframe) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::ColorKeyframe::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorKeyframe*, creationType>(keyframe)));
    }
  }; // Funly.SkyStudio.ColorKeyframe
  #pragma pack(pop)
  static check_size<sizeof(ColorKeyframe), 36 + sizeof(::UnityEngine::Color)> __Funly_SkyStudio_ColorKeyframeSizeCheck;
  static_assert(sizeof(ColorKeyframe) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::ColorKeyframe::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Funly::SkyStudio::ColorKeyframe::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
