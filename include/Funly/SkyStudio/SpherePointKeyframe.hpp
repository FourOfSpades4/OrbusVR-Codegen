// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Funly.SkyStudio.BaseKeyframe
#include "Funly/SkyStudio/BaseKeyframe.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Funly::SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: SpherePoint
  class SpherePoint;
}
// Completed forward declares
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: SpherePointKeyframe
  class SpherePointKeyframe;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::SpherePointKeyframe);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::SpherePointKeyframe*, "Funly.SkyStudio", "SpherePointKeyframe");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Funly.SkyStudio.SpherePointKeyframe
  // [TokenAttribute] Offset: FFFFFFFF
  class SpherePointKeyframe : public ::Funly::SkyStudio::BaseKeyframe {
    public:
    // Writing base type padding for base size: 0x24 to desired offset: 0x28
    char ___base_padding[0x4] = {};
    public:
    // public Funly.SkyStudio.SpherePoint spherePoint
    // Size: 0x8
    // Offset: 0x28
    ::Funly::SkyStudio::SpherePoint* spherePoint;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::SpherePoint*) == 0x8);
    public:
    // Creating conversion operator: operator ::Funly::SkyStudio::SpherePoint*
    constexpr operator ::Funly::SkyStudio::SpherePoint*() const noexcept {
      return spherePoint;
    }
    // Get instance field reference: public Funly.SkyStudio.SpherePoint spherePoint
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::SpherePoint*& dyn_spherePoint();
    // public System.Void .ctor(Funly.SkyStudio.SpherePoint spherePoint, System.Single time)
    // Offset: 0x151B0FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpherePointKeyframe* New_ctor(::Funly::SkyStudio::SpherePoint* spherePoint, float time) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::SpherePointKeyframe::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpherePointKeyframe*, creationType>(spherePoint, time)));
    }
    // public System.Void .ctor(Funly.SkyStudio.SpherePointKeyframe keyframe)
    // Offset: 0x151BEFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpherePointKeyframe* New_ctor(::Funly::SkyStudio::SpherePointKeyframe* keyframe) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::SpherePointKeyframe::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpherePointKeyframe*, creationType>(keyframe)));
    }
  }; // Funly.SkyStudio.SpherePointKeyframe
  #pragma pack(pop)
  static check_size<sizeof(SpherePointKeyframe), 40 + sizeof(::Funly::SkyStudio::SpherePoint*)> __Funly_SkyStudio_SpherePointKeyframeSizeCheck;
  static_assert(sizeof(SpherePointKeyframe) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::SpherePointKeyframe::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Funly::SkyStudio::SpherePointKeyframe::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
