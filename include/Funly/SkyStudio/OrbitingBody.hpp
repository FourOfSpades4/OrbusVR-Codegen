// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Funly::SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: SpherePoint
  class SpherePoint;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Light
  class Light;
}
// Completed forward declares
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: OrbitingBody
  class OrbitingBody;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::OrbitingBody);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::OrbitingBody*, "Funly.SkyStudio", "OrbitingBody");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Funly.SkyStudio.OrbitingBody
  // [TokenAttribute] Offset: FFFFFFFF
  class OrbitingBody : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Funly.SkyStudio.SpherePoint m_SpherePoint
    // Size: 0x8
    // Offset: 0x18
    ::Funly::SkyStudio::SpherePoint* m_SpherePoint;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::SpherePoint*) == 0x8);
    // private UnityEngine.Vector3 m_CachedWorldDirection
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 m_CachedWorldDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: m_CachedWorldDirection and: m_BodyLight
    char __padding1[0x4] = {};
    // private UnityEngine.Light m_BodyLight
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Light* m_BodyLight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Light*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Funly.SkyStudio.SpherePoint m_SpherePoint
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::SpherePoint*& dyn_m_SpherePoint();
    // Get instance field reference: private UnityEngine.Vector3 m_CachedWorldDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_CachedWorldDirection();
    // Get instance field reference: private UnityEngine.Light m_BodyLight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Light*& dyn_m_BodyLight();
    // public Funly.SkyStudio.SpherePoint get_spherePoint()
    // Offset: 0x151361C
    ::Funly::SkyStudio::SpherePoint* get_spherePoint();
    // public System.Void set_spherePoint(Funly.SkyStudio.SpherePoint value)
    // Offset: 0x1513624
    void set_spherePoint(::Funly::SkyStudio::SpherePoint* value);
    // public UnityEngine.Vector3 get_BodyGlobalDirection()
    // Offset: 0x15138A8
    ::UnityEngine::Vector3 get_BodyGlobalDirection();
    // public UnityEngine.Light get_BodyLight()
    // Offset: 0x15138B4
    ::UnityEngine::Light* get_BodyLight();
    // public System.Void LayoutOribit()
    // Offset: 0x1513728
    void LayoutOribit();
    // private System.Void OnValidate()
    // Offset: 0x1513A2C
    void OnValidate();
    // public System.Void .ctor()
    // Offset: 0x1513A30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrbitingBody* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::OrbitingBody::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrbitingBody*, creationType>()));
    }
  }; // Funly.SkyStudio.OrbitingBody
  #pragma pack(pop)
  static check_size<sizeof(OrbitingBody), 48 + sizeof(::UnityEngine::Light*)> __Funly_SkyStudio_OrbitingBodySizeCheck;
  static_assert(sizeof(OrbitingBody) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::OrbitingBody::get_spherePoint
// Il2CppName: get_spherePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Funly::SkyStudio::SpherePoint* (Funly::SkyStudio::OrbitingBody::*)()>(&Funly::SkyStudio::OrbitingBody::get_spherePoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::OrbitingBody*), "get_spherePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::OrbitingBody::set_spherePoint
// Il2CppName: set_spherePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::OrbitingBody::*)(::Funly::SkyStudio::SpherePoint*)>(&Funly::SkyStudio::OrbitingBody::set_spherePoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "SpherePoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::OrbitingBody*), "set_spherePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::OrbitingBody::get_BodyGlobalDirection
// Il2CppName: get_BodyGlobalDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Funly::SkyStudio::OrbitingBody::*)()>(&Funly::SkyStudio::OrbitingBody::get_BodyGlobalDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::OrbitingBody*), "get_BodyGlobalDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::OrbitingBody::get_BodyLight
// Il2CppName: get_BodyLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Light* (Funly::SkyStudio::OrbitingBody::*)()>(&Funly::SkyStudio::OrbitingBody::get_BodyLight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::OrbitingBody*), "get_BodyLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::OrbitingBody::LayoutOribit
// Il2CppName: LayoutOribit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::OrbitingBody::*)()>(&Funly::SkyStudio::OrbitingBody::LayoutOribit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::OrbitingBody*), "LayoutOribit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::OrbitingBody::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::OrbitingBody::*)()>(&Funly::SkyStudio::OrbitingBody::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::OrbitingBody*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::OrbitingBody::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
