// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Funly.SkyStudio.IKeyframeGroup
#include "Funly/SkyStudio/IKeyframeGroup.hpp"
// Including type: Funly.SkyStudio.InterpolationCurve
#include "Funly/SkyStudio/InterpolationCurve.hpp"
// Including type: Funly.SkyStudio.InterpolationDirection
#include "Funly/SkyStudio/InterpolationDirection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Funly::SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: IBaseKeyframe
  class IBaseKeyframe;
  // Forward declaring type: BaseKeyframe
  class BaseKeyframe;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: KeyframeGroup`1<T>
  template<typename T>
  class KeyframeGroup_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Funly::SkyStudio::KeyframeGroup_1, "Funly.SkyStudio", "KeyframeGroup`1");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // WARNING Size may be invalid!
  // Autogenerated type: Funly.SkyStudio.KeyframeGroup`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class KeyframeGroup_1 : public ::Il2CppObject/*, public ::Funly::SkyStudio::IKeyframeGroup*/ {
    public:
    public:
    // public System.Collections.Generic.List`1<T> keyframes
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<T>* keyframes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<T>*) == 0x8);
    // private System.String m_Name
    // Size: 0x8
    // Offset: 0x0
    ::StringW m_Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_Id
    // Size: 0x8
    // Offset: 0x0
    ::StringW m_Id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Funly::SkyStudio::IKeyframeGroup
    operator ::Funly::SkyStudio::IKeyframeGroup() noexcept {
      return *reinterpret_cast<::Funly::SkyStudio::IKeyframeGroup*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Collections.Generic.List`1<T> keyframes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<T>*& dyn_keyframes() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::dyn_keyframes");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "keyframes"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.String m_Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Name() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::dyn_m_Name");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Name"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.String m_Id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Id() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::dyn_m_Id");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Id"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.String get_name()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_name() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::get_name");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Funly::SkyStudio::KeyframeGroup_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // public System.Void set_name(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_name(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::set_name");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Funly::SkyStudio::KeyframeGroup_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.String get_id()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_id() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::get_id");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Funly::SkyStudio::KeyframeGroup_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // public System.Void set_id(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_id(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::set_id");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor(System.String name)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static KeyframeGroup_1<T>* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<KeyframeGroup_1<T>*, creationType>(name)));
    }
    // public System.Void AddKeyFrame(T keyFrame)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddKeyFrame(T keyFrame) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::AddKeyFrame");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyFrame)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, keyFrame);
    }
    // public System.Void RemoveKeyFrame(T keyFrame)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveKeyFrame(T keyFrame) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::RemoveKeyFrame");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyFrame)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, keyFrame);
    }
    // public System.Void RemoveKeyFrame(Funly.SkyStudio.IBaseKeyframe keyframe)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveKeyFrame(::Funly::SkyStudio::IBaseKeyframe* keyframe) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::RemoveKeyFrame");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Funly::SkyStudio::KeyframeGroup_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, keyframe);
    }
    // public System.Int32 GetKeyFrameCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetKeyFrameCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::GetKeyFrameCount");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Funly::SkyStudio::KeyframeGroup_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public T GetKeyframe(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T GetKeyframe(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::GetKeyframe");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetKeyframe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, index);
    }
    // public System.Void SortKeyframes()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SortKeyframes() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::SortKeyframes");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Funly::SkyStudio::KeyframeGroup_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Single CurveAdjustedBlendingTime(Funly.SkyStudio.InterpolationCurve curve, System.Single t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    float CurveAdjustedBlendingTime(::Funly::SkyStudio::InterpolationCurve curve, float t) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::CurveAdjustedBlendingTime");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CurveAdjustedBlendingTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curve), ::il2cpp_utils::ExtractType(t)})));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, curve, t);
    }
    // public T GetPreviousKeyFrame(System.Single time)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T GetPreviousKeyFrame(float time) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::GetPreviousKeyFrame");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreviousKeyFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, time);
    }
    // public System.Boolean GetSurroundingKeyFrames(System.Single time, out T beforeKeyframe, out T afterKeyframe)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool GetSurroundingKeyFrames(float time, ByRef<T> beforeKeyframe, ByRef<T> afterKeyframe) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::GetSurroundingKeyFrames");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSurroundingKeyFrames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractIndependentType<T&>(), ::il2cpp_utils::ExtractIndependentType<T&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, time, byref(beforeKeyframe), byref(afterKeyframe));
    }
    // public System.Boolean GetSurroundingKeyFrames(System.Single time, out System.Int32 beforeIndex, out System.Int32 afterIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool GetSurroundingKeyFrames(float time, ByRef<int> beforeIndex, ByRef<int> afterIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::GetSurroundingKeyFrames");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSurroundingKeyFrames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, time, byref(beforeIndex), byref(afterIndex));
    }
    // static public System.Single ProgressBetweenSurroundingKeyframes(System.Single time, Funly.SkyStudio.BaseKeyframe beforeKey, Funly.SkyStudio.BaseKeyframe afterKey)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static float ProgressBetweenSurroundingKeyframes(float time, ::Funly::SkyStudio::BaseKeyframe* beforeKey, ::Funly::SkyStudio::BaseKeyframe* afterKey) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::ProgressBetweenSurroundingKeyframes");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<KeyframeGroup_1<T>*>::get(), "ProgressBetweenSurroundingKeyframes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(beforeKey), ::il2cpp_utils::ExtractType(afterKey)})));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time, beforeKey, afterKey);
    }
    // static public System.Single ProgressBetweenSurroundingKeyframes(System.Single time, System.Single beforeKeyTime, System.Single afterKeyTime)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static float ProgressBetweenSurroundingKeyframes(float time, float beforeKeyTime, float afterKeyTime) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::ProgressBetweenSurroundingKeyframes");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<KeyframeGroup_1<T>*>::get(), "ProgressBetweenSurroundingKeyframes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(beforeKeyTime), ::il2cpp_utils::ExtractType(afterKeyTime)})));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, time, beforeKeyTime, afterKeyTime);
    }
    // static public System.Single WidthBetweenCircularValues(System.Single begin, System.Single end)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static float WidthBetweenCircularValues(float begin, float end) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::WidthBetweenCircularValues");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<KeyframeGroup_1<T>*>::get(), "WidthBetweenCircularValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(begin), ::il2cpp_utils::ExtractType(end)})));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, begin, end);
    }
    // public System.Void TrimToSingleKeyframe()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void TrimToSingleKeyframe() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::TrimToSingleKeyframe");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Funly::SkyStudio::KeyframeGroup_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public Funly.SkyStudio.InterpolationDirection GetShortestInterpolationDirection(System.Single previousKeyValue, System.Single nextKeyValue, System.Single minValue, System.Single maxValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Funly::SkyStudio::InterpolationDirection GetShortestInterpolationDirection(float previousKeyValue, float nextKeyValue, float minValue, float maxValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::GetShortestInterpolationDirection");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetShortestInterpolationDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previousKeyValue), ::il2cpp_utils::ExtractType(nextKeyValue), ::il2cpp_utils::ExtractType(minValue), ::il2cpp_utils::ExtractType(maxValue)})));
      return ::il2cpp_utils::RunMethodRethrow<::Funly::SkyStudio::InterpolationDirection, false>(this, ___internal__method, previousKeyValue, nextKeyValue, minValue, maxValue);
    }
    // public System.Void CalculateCircularDistances(System.Single previousKeyValue, System.Single nextKeyValue, System.Single minValue, System.Single maxValue, out System.Single forwardDistance, out System.Single reverseDistance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CalculateCircularDistances(float previousKeyValue, float nextKeyValue, float minValue, float maxValue, ByRef<float> forwardDistance, ByRef<float> reverseDistance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::CalculateCircularDistances");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateCircularDistances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previousKeyValue), ::il2cpp_utils::ExtractType(nextKeyValue), ::il2cpp_utils::ExtractType(minValue), ::il2cpp_utils::ExtractType(maxValue), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, previousKeyValue, nextKeyValue, minValue, maxValue, byref(forwardDistance), byref(reverseDistance));
    }
    // public System.Single InterpolateFloat(Funly.SkyStudio.InterpolationCurve curve, Funly.SkyStudio.InterpolationDirection direction, System.Single time, System.Single beforeTime, System.Single nextTime, System.Single previousKeyValue, System.Single nextKeyValue, System.Single minValue, System.Single maxValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    float InterpolateFloat(::Funly::SkyStudio::InterpolationCurve curve, ::Funly::SkyStudio::InterpolationDirection direction, float time, float beforeTime, float nextTime, float previousKeyValue, float nextKeyValue, float minValue, float maxValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::InterpolateFloat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InterpolateFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curve), ::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(beforeTime), ::il2cpp_utils::ExtractType(nextTime), ::il2cpp_utils::ExtractType(previousKeyValue), ::il2cpp_utils::ExtractType(nextKeyValue), ::il2cpp_utils::ExtractType(minValue), ::il2cpp_utils::ExtractType(maxValue)})));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, curve, direction, time, beforeTime, nextTime, previousKeyValue, nextKeyValue, minValue, maxValue);
    }
    // public System.Single AutoInterpolation(System.Single curvedTime, System.Single previousValue, System.Single nextValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    float AutoInterpolation(float curvedTime, float previousValue, float nextValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::AutoInterpolation");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AutoInterpolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curvedTime), ::il2cpp_utils::ExtractType(previousValue), ::il2cpp_utils::ExtractType(nextValue)})));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, curvedTime, previousValue, nextValue);
    }
    // public System.Single ForwardInterpolation(System.Single time, System.Single previousKeyValue, System.Single nextKeyValue, System.Single minValue, System.Single maxValue, System.Single distance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    float ForwardInterpolation(float time, float previousKeyValue, float nextKeyValue, float minValue, float maxValue, float distance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::ForwardInterpolation");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForwardInterpolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(previousKeyValue), ::il2cpp_utils::ExtractType(nextKeyValue), ::il2cpp_utils::ExtractType(minValue), ::il2cpp_utils::ExtractType(maxValue), ::il2cpp_utils::ExtractType(distance)})));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, time, previousKeyValue, nextKeyValue, minValue, maxValue, distance);
    }
    // public System.Single ReverseInterpolation(System.Single time, System.Single previousKeyValue, System.Single nextKeyValue, System.Single minValue, System.Single maxValue, System.Single distance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    float ReverseInterpolation(float time, float previousKeyValue, float nextKeyValue, float minValue, float maxValue, float distance) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::KeyframeGroup_1::ReverseInterpolation");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReverseInterpolation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(previousKeyValue), ::il2cpp_utils::ExtractType(nextKeyValue), ::il2cpp_utils::ExtractType(minValue), ::il2cpp_utils::ExtractType(maxValue), ::il2cpp_utils::ExtractType(distance)})));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, time, previousKeyValue, nextKeyValue, minValue, maxValue, distance);
    }
  }; // Funly.SkyStudio.KeyframeGroup`1
  // Could not write size check! Type: Funly.SkyStudio.KeyframeGroup`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
