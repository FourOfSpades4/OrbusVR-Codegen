// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Funly.SkyStudio.KeyframeGroup`1
#include "Funly/SkyStudio/KeyframeGroup_1.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Funly::SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: SpherePointKeyframe
  class SpherePointKeyframe;
  // Forward declaring type: SpherePoint
  class SpherePoint;
}
// Completed forward declares
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: SpherePointKeyframeGroup
  class SpherePointKeyframeGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::SpherePointKeyframeGroup);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::SpherePointKeyframeGroup*, "Funly.SkyStudio", "SpherePointKeyframeGroup");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // WARNING Size may be invalid!
  // Autogenerated type: Funly.SkyStudio.SpherePointKeyframeGroup
  // [TokenAttribute] Offset: FFFFFFFF
  class SpherePointKeyframeGroup : public ::Funly::SkyStudio::KeyframeGroup_1<::Funly::SkyStudio::SpherePointKeyframe*> {
    public:
    // static field const value: static public System.Single MinHorizontalRotation
    static constexpr const float MinHorizontalRotation = -3.1415927;
    // Get static field: static public System.Single MinHorizontalRotation
    static float _get_MinHorizontalRotation();
    // Set static field: static public System.Single MinHorizontalRotation
    static void _set_MinHorizontalRotation(float value);
    // static field const value: static public System.Single MaxHorizontalRotation
    static constexpr const float MaxHorizontalRotation = 3.1415927;
    // Get static field: static public System.Single MaxHorizontalRotation
    static float _get_MaxHorizontalRotation();
    // Set static field: static public System.Single MaxHorizontalRotation
    static void _set_MaxHorizontalRotation(float value);
    // static field const value: static public System.Single MinVerticalRotation
    static constexpr const float MinVerticalRotation = -1.5707964;
    // Get static field: static public System.Single MinVerticalRotation
    static float _get_MinVerticalRotation();
    // Set static field: static public System.Single MinVerticalRotation
    static void _set_MinVerticalRotation(float value);
    // static field const value: static public System.Single MaxVerticalRotation
    static constexpr const float MaxVerticalRotation = 1.5707964;
    // Get static field: static public System.Single MaxVerticalRotation
    static float _get_MaxVerticalRotation();
    // Set static field: static public System.Single MaxVerticalRotation
    static void _set_MaxVerticalRotation(float value);
    // public System.Void .ctor(System.String name, Funly.SkyStudio.SpherePointKeyframe keyframe)
    // Offset: 0x151B1C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpherePointKeyframeGroup* New_ctor(::StringW name, ::Funly::SkyStudio::SpherePointKeyframe* keyframe) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::SpherePointKeyframeGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpherePointKeyframeGroup*, creationType>(name, keyframe)));
    }
    // public Funly.SkyStudio.SpherePoint SpherePointForTime(System.Single time)
    // Offset: 0x1519A10
    ::Funly::SkyStudio::SpherePoint* SpherePointForTime(float time);
    // public System.Void .ctor(System.String name)
    // Offset: 0x151BFE4
    // Implemented from: Funly.SkyStudio.KeyframeGroup`1
    // Base method: System.Void KeyframeGroup_1::.ctor(System.String name)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpherePointKeyframeGroup* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::SpherePointKeyframeGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpherePointKeyframeGroup*, creationType>(name)));
    }
  }; // Funly.SkyStudio.SpherePointKeyframeGroup
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::SpherePointKeyframeGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Funly::SkyStudio::SpherePointKeyframeGroup::SpherePointForTime
// Il2CppName: SpherePointForTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Funly::SkyStudio::SpherePoint* (Funly::SkyStudio::SpherePointKeyframeGroup::*)(float)>(&Funly::SkyStudio::SpherePointKeyframeGroup::SpherePointForTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::SpherePointKeyframeGroup*), "SpherePointForTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::SpherePointKeyframeGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
