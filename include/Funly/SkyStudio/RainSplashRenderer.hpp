// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Funly.SkyStudio.BaseSpriteInstancedRenderer
#include "Funly/SkyStudio/BaseSpriteInstancedRenderer.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Forward declaring namespace: Funly::SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: SkyProfile
  class SkyProfile;
  // Forward declaring type: RainSplashArtItem
  class RainSplashArtItem;
  // Forward declaring type: BaseSpriteItemData
  class BaseSpriteItemData;
}
// Completed forward declares
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: RainSplashRenderer
  class RainSplashRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::RainSplashRenderer);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::RainSplashRenderer*, "Funly.SkyStudio", "RainSplashRenderer");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Size: 0xF0
  #pragma pack(push, 1)
  // Autogenerated type: Funly.SkyStudio.RainSplashRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  class RainSplashRenderer : public ::Funly::SkyStudio::BaseSpriteInstancedRenderer {
    public:
    public:
    // private UnityEngine.Camera m_DepthCamera
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Camera* m_DepthCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private System.Single[] m_StartSplashYPositions
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<float> m_StartSplashYPositions;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] m_DepthUs
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<float> m_DepthUs;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single[] m_DepthVs
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<float> m_DepthVs;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single m_SplashAreaStart
    // Size: 0x4
    // Offset: 0xA8
    float m_SplashAreaStart;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_SplashAreaLength
    // Size: 0x4
    // Offset: 0xAC
    float m_SplashAreaLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_SplashScale
    // Size: 0x4
    // Offset: 0xB0
    float m_SplashScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_SplashScaleVarience
    // Size: 0x4
    // Offset: 0xB4
    float m_SplashScaleVarience;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_SplashItensity
    // Size: 0x4
    // Offset: 0xB8
    float m_SplashItensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_SplashSurfaceOffset
    // Size: 0x4
    // Offset: 0xBC
    float m_SplashSurfaceOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Funly.SkyStudio.SkyProfile m_SkyProfile
    // Size: 0x8
    // Offset: 0xC0
    ::Funly::SkyStudio::SkyProfile* m_SkyProfile;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::SkyProfile*) == 0x8);
    // private System.Single m_TimeOfDay
    // Size: 0x4
    // Offset: 0xC8
    float m_TimeOfDay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_TimeOfDay and: m_Style
    char __padding11[0x4] = {};
    // private Funly.SkyStudio.RainSplashArtItem m_Style
    // Size: 0x8
    // Offset: 0xD0
    ::Funly::SkyStudio::RainSplashArtItem* m_Style;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::RainSplashArtItem*) == 0x8);
    // private UnityEngine.Bounds m_Bounds
    // Size: 0x18
    // Offset: 0xD8
    ::UnityEngine::Bounds m_Bounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    public:
    // Get instance field reference: private UnityEngine.Camera m_DepthCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_m_DepthCamera();
    // Get instance field reference: private System.Single[] m_StartSplashYPositions
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_StartSplashYPositions();
    // Get instance field reference: private System.Single[] m_DepthUs
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_DepthUs();
    // Get instance field reference: private System.Single[] m_DepthVs
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_DepthVs();
    // Get instance field reference: private System.Single m_SplashAreaStart
    [[deprecated("Use field access instead!")]] float& dyn_m_SplashAreaStart();
    // Get instance field reference: private System.Single m_SplashAreaLength
    [[deprecated("Use field access instead!")]] float& dyn_m_SplashAreaLength();
    // Get instance field reference: private System.Single m_SplashScale
    [[deprecated("Use field access instead!")]] float& dyn_m_SplashScale();
    // Get instance field reference: private System.Single m_SplashScaleVarience
    [[deprecated("Use field access instead!")]] float& dyn_m_SplashScaleVarience();
    // Get instance field reference: private System.Single m_SplashItensity
    [[deprecated("Use field access instead!")]] float& dyn_m_SplashItensity();
    // Get instance field reference: private System.Single m_SplashSurfaceOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_SplashSurfaceOffset();
    // Get instance field reference: private Funly.SkyStudio.SkyProfile m_SkyProfile
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::SkyProfile*& dyn_m_SkyProfile();
    // Get instance field reference: private System.Single m_TimeOfDay
    [[deprecated("Use field access instead!")]] float& dyn_m_TimeOfDay();
    // Get instance field reference: private Funly.SkyStudio.RainSplashArtItem m_Style
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::RainSplashArtItem*& dyn_m_Style();
    // Get instance field reference: private UnityEngine.Bounds m_Bounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_m_Bounds();
    // public System.Void UpdateForTimeOfDay(Funly.SkyStudio.SkyProfile skyProfile, System.Single timeOfDay, Funly.SkyStudio.RainSplashArtItem style)
    // Offset: 0x15152CC
    void UpdateForTimeOfDay(::Funly::SkyStudio::SkyProfile* skyProfile, float timeOfDay, ::Funly::SkyStudio::RainSplashArtItem* style);
    // private System.Void SyncDataFromSkyProfile()
    // Offset: 0x1515DAC
    void SyncDataFromSkyProfile();
    // private UnityEngine.Vector3 CreateWorldSplashPoint()
    // Offset: 0x15158C8
    ::UnityEngine::Vector3 CreateWorldSplashPoint();
    // private System.Void Start()
    // Offset: 0x151541C
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Void BaseSpriteInstancedRenderer::Start()
    void Start();
    // protected override UnityEngine.Bounds CalculateMeshBounds()
    // Offset: 0x1515548
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: UnityEngine.Bounds BaseSpriteInstancedRenderer::CalculateMeshBounds()
    ::UnityEngine::Bounds CalculateMeshBounds();
    // protected override Funly.SkyStudio.BaseSpriteItemData CreateSpriteItemData()
    // Offset: 0x151555C
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: Funly.SkyStudio.BaseSpriteItemData BaseSpriteInstancedRenderer::CreateSpriteItemData()
    ::Funly::SkyStudio::BaseSpriteItemData* CreateSpriteItemData();
    // protected override System.Boolean IsRenderingEnabled()
    // Offset: 0x15155C0
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Boolean BaseSpriteInstancedRenderer::IsRenderingEnabled()
    bool IsRenderingEnabled();
    // protected override System.Int32 GetNextSpawnCount()
    // Offset: 0x15156DC
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Int32 BaseSpriteInstancedRenderer::GetNextSpawnCount()
    int GetNextSpawnCount();
    // protected override System.Void CalculateSpriteTRS(Funly.SkyStudio.BaseSpriteItemData data, out UnityEngine.Vector3 spritePosition, out UnityEngine.Quaternion spriteRotation, out UnityEngine.Vector3 spriteScale)
    // Offset: 0x151574C
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Void BaseSpriteInstancedRenderer::CalculateSpriteTRS(Funly.SkyStudio.BaseSpriteItemData data, out UnityEngine.Vector3 spritePosition, out UnityEngine.Quaternion spriteRotation, out UnityEngine.Vector3 spriteScale)
    void CalculateSpriteTRS(::Funly::SkyStudio::BaseSpriteItemData* data, ByRef<::UnityEngine::Vector3> spritePosition, ByRef<::UnityEngine::Quaternion> spriteRotation, ByRef<::UnityEngine::Vector3> spriteScale);
    // protected override System.Void ConfigureSpriteItemData(Funly.SkyStudio.BaseSpriteItemData data)
    // Offset: 0x1515854
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Void BaseSpriteInstancedRenderer::ConfigureSpriteItemData(Funly.SkyStudio.BaseSpriteItemData data)
    void ConfigureSpriteItemData(::Funly::SkyStudio::BaseSpriteItemData* data);
    // protected override System.Void PrepareDataArraysForRendering(System.Int32 instanceId, Funly.SkyStudio.BaseSpriteItemData data)
    // Offset: 0x1515A68
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Void BaseSpriteInstancedRenderer::PrepareDataArraysForRendering(System.Int32 instanceId, Funly.SkyStudio.BaseSpriteItemData data)
    void PrepareDataArraysForRendering(int instanceId, ::Funly::SkyStudio::BaseSpriteItemData* data);
    // protected override System.Void PopulatePropertyBlockForRendering(ref UnityEngine.MaterialPropertyBlock propertyBlock)
    // Offset: 0x1515C6C
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Void BaseSpriteInstancedRenderer::PopulatePropertyBlockForRendering(ref UnityEngine.MaterialPropertyBlock propertyBlock)
    void PopulatePropertyBlockForRendering(ByRef<::UnityEngine::MaterialPropertyBlock*> propertyBlock);
    // public System.Void .ctor()
    // Offset: 0x151611C
    // Implemented from: Funly.SkyStudio.BaseSpriteInstancedRenderer
    // Base method: System.Void BaseSpriteInstancedRenderer::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RainSplashRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::RainSplashRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RainSplashRenderer*, creationType>()));
    }
  }; // Funly.SkyStudio.RainSplashRenderer
  #pragma pack(pop)
  static check_size<sizeof(RainSplashRenderer), 216 + sizeof(::UnityEngine::Bounds)> __Funly_SkyStudio_RainSplashRendererSizeCheck;
  static_assert(sizeof(RainSplashRenderer) == 0xF0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::RainSplashRenderer::UpdateForTimeOfDay
// Il2CppName: UpdateForTimeOfDay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::RainSplashRenderer::*)(::Funly::SkyStudio::SkyProfile*, float, ::Funly::SkyStudio::RainSplashArtItem*)>(&Funly::SkyStudio::RainSplashRenderer::UpdateForTimeOfDay)> {
  static const MethodInfo* get() {
    static auto* skyProfile = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "SkyProfile")->byval_arg;
    static auto* timeOfDay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "RainSplashArtItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::RainSplashRenderer*), "UpdateForTimeOfDay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{skyProfile, timeOfDay, style});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::RainSplashRenderer::SyncDataFromSkyProfile
// Il2CppName: SyncDataFromSkyProfile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::RainSplashRenderer::*)()>(&Funly::SkyStudio::RainSplashRenderer::SyncDataFromSkyProfile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::RainSplashRenderer*), "SyncDataFromSkyProfile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::RainSplashRenderer::CreateWorldSplashPoint
// Il2CppName: CreateWorldSplashPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Funly::SkyStudio::RainSplashRenderer::*)()>(&Funly::SkyStudio::RainSplashRenderer::CreateWorldSplashPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::RainSplashRenderer*), "CreateWorldSplashPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::RainSplashRenderer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::RainSplashRenderer::*)()>(&Funly::SkyStudio::RainSplashRenderer::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::RainSplashRenderer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::RainSplashRenderer::CalculateMeshBounds
// Il2CppName: CalculateMeshBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Funly::SkyStudio::RainSplashRenderer::*)()>(&Funly::SkyStudio::RainSplashRenderer::CalculateMeshBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::RainSplashRenderer*), "CalculateMeshBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::RainSplashRenderer::CreateSpriteItemData
// Il2CppName: CreateSpriteItemData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Funly::SkyStudio::BaseSpriteItemData* (Funly::SkyStudio::RainSplashRenderer::*)()>(&Funly::SkyStudio::RainSplashRenderer::CreateSpriteItemData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::RainSplashRenderer*), "CreateSpriteItemData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::RainSplashRenderer::IsRenderingEnabled
// Il2CppName: IsRenderingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Funly::SkyStudio::RainSplashRenderer::*)()>(&Funly::SkyStudio::RainSplashRenderer::IsRenderingEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::RainSplashRenderer*), "IsRenderingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::RainSplashRenderer::GetNextSpawnCount
// Il2CppName: GetNextSpawnCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Funly::SkyStudio::RainSplashRenderer::*)()>(&Funly::SkyStudio::RainSplashRenderer::GetNextSpawnCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::RainSplashRenderer*), "GetNextSpawnCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::RainSplashRenderer::CalculateSpriteTRS
// Il2CppName: CalculateSpriteTRS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::RainSplashRenderer::*)(::Funly::SkyStudio::BaseSpriteItemData*, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Vector3>)>(&Funly::SkyStudio::RainSplashRenderer::CalculateSpriteTRS)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "BaseSpriteItemData")->byval_arg;
    static auto* spritePosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* spriteRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* spriteScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::RainSplashRenderer*), "CalculateSpriteTRS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, spritePosition, spriteRotation, spriteScale});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::RainSplashRenderer::ConfigureSpriteItemData
// Il2CppName: ConfigureSpriteItemData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::RainSplashRenderer::*)(::Funly::SkyStudio::BaseSpriteItemData*)>(&Funly::SkyStudio::RainSplashRenderer::ConfigureSpriteItemData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "BaseSpriteItemData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::RainSplashRenderer*), "ConfigureSpriteItemData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::RainSplashRenderer::PrepareDataArraysForRendering
// Il2CppName: PrepareDataArraysForRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::RainSplashRenderer::*)(int, ::Funly::SkyStudio::BaseSpriteItemData*)>(&Funly::SkyStudio::RainSplashRenderer::PrepareDataArraysForRendering)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("Funly.SkyStudio", "BaseSpriteItemData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::RainSplashRenderer*), "PrepareDataArraysForRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId, data});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::RainSplashRenderer::PopulatePropertyBlockForRendering
// Il2CppName: PopulatePropertyBlockForRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Funly::SkyStudio::RainSplashRenderer::*)(ByRef<::UnityEngine::MaterialPropertyBlock*>)>(&Funly::SkyStudio::RainSplashRenderer::PopulatePropertyBlockForRendering)> {
  static const MethodInfo* get() {
    static auto* propertyBlock = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Funly::SkyStudio::RainSplashRenderer*), "PopulatePropertyBlockForRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertyBlock});
  }
};
// Writing MetadataGetter for method: Funly::SkyStudio::RainSplashRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
