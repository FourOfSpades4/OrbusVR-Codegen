// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Funly.SkyStudio.SpriteArtItem
#include "Funly/SkyStudio/SpriteArtItem.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Forward declaring type: LightningArtItem
  class LightningArtItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Funly::SkyStudio::LightningArtItem);
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::LightningArtItem*, "Funly.SkyStudio", "LightningArtItem");
// Type namespace: Funly.SkyStudio
namespace Funly::SkyStudio {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: Funly.SkyStudio.LightningArtItem
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: AD2470
  class LightningArtItem : public ::Funly::SkyStudio::SpriteArtItem {
    public:
    // Nested type: ::Funly::SkyStudio::LightningArtItem::Alignment
    struct Alignment;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Funly.SkyStudio.LightningArtItem/Alignment
    // [TokenAttribute] Offset: FFFFFFFF
    struct Alignment/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Alignment
      constexpr Alignment(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Funly.SkyStudio.LightningArtItem/Alignment ScaleToFit
      static constexpr const int ScaleToFit = 0;
      // Get static field: static public Funly.SkyStudio.LightningArtItem/Alignment ScaleToFit
      static ::Funly::SkyStudio::LightningArtItem::Alignment _get_ScaleToFit();
      // Set static field: static public Funly.SkyStudio.LightningArtItem/Alignment ScaleToFit
      static void _set_ScaleToFit(::Funly::SkyStudio::LightningArtItem::Alignment value);
      // static field const value: static public Funly.SkyStudio.LightningArtItem/Alignment TopAlign
      static constexpr const int TopAlign = 1;
      // Get static field: static public Funly.SkyStudio.LightningArtItem/Alignment TopAlign
      static ::Funly::SkyStudio::LightningArtItem::Alignment _get_TopAlign();
      // Set static field: static public Funly.SkyStudio.LightningArtItem/Alignment TopAlign
      static void _set_TopAlign(::Funly::SkyStudio::LightningArtItem::Alignment value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Funly.SkyStudio.LightningArtItem/Alignment
    #pragma pack(pop)
    static check_size<sizeof(LightningArtItem::Alignment), 0 + sizeof(int)> __Funly_SkyStudio_LightningArtItem_AlignmentSizeCheck;
    static_assert(sizeof(LightningArtItem::Alignment) == 0x4);
    public:
    // [TooltipAttribute] Offset: 0xAE1774
    // public Funly.SkyStudio.LightningArtItem/Alignment alignment
    // Size: 0x4
    // Offset: 0x50
    ::Funly::SkyStudio::LightningArtItem::Alignment alignment;
    // Field size check
    static_assert(sizeof(::Funly::SkyStudio::LightningArtItem::Alignment) == 0x4);
    // Padding between fields: alignment and: thunderSound
    char __padding0[0x4] = {};
    // [TooltipAttribute] Offset: 0xAE17AC
    // public UnityEngine.AudioClip thunderSound
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AudioClip* thunderSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // [TooltipAttribute] Offset: 0xAE17E4
    // [RangeAttribute] Offset: 0xAE17E4
    // public System.Single strikeProbability
    // Size: 0x4
    // Offset: 0x60
    float strikeProbability;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAE1838
    // [RangeAttribute] Offset: 0xAE1838
    // public System.Single size
    // Size: 0x4
    // Offset: 0x64
    float size;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAE1890
    // [RangeAttribute] Offset: 0xAE1890
    // public System.Single intensity
    // Size: 0x4
    // Offset: 0x68
    float intensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public Funly.SkyStudio.LightningArtItem/Alignment alignment
    [[deprecated("Use field access instead!")]] ::Funly::SkyStudio::LightningArtItem::Alignment& dyn_alignment();
    // Get instance field reference: public UnityEngine.AudioClip thunderSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_thunderSound();
    // Get instance field reference: public System.Single strikeProbability
    [[deprecated("Use field access instead!")]] float& dyn_strikeProbability();
    // Get instance field reference: public System.Single size
    [[deprecated("Use field access instead!")]] float& dyn_size();
    // Get instance field reference: public System.Single intensity
    [[deprecated("Use field access instead!")]] float& dyn_intensity();
    // public System.Void .ctor()
    // Offset: 0x1510324
    // Implemented from: Funly.SkyStudio.SpriteArtItem
    // Base method: System.Void SpriteArtItem::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightningArtItem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Funly::SkyStudio::LightningArtItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightningArtItem*, creationType>()));
    }
  }; // Funly.SkyStudio.LightningArtItem
  #pragma pack(pop)
  static check_size<sizeof(LightningArtItem), 104 + sizeof(float)> __Funly_SkyStudio_LightningArtItemSizeCheck;
  static_assert(sizeof(LightningArtItem) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Funly::SkyStudio::LightningArtItem::Alignment, "Funly.SkyStudio", "LightningArtItem/Alignment");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Funly::SkyStudio::LightningArtItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
