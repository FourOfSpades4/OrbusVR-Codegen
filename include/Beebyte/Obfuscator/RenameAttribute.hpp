// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Beebyte.Obfuscator
namespace Beebyte::Obfuscator {
  // Forward declaring type: RenameAttribute
  class RenameAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Beebyte::Obfuscator::RenameAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Beebyte::Obfuscator::RenameAttribute*, "Beebyte.Obfuscator", "RenameAttribute");
// Type namespace: Beebyte.Obfuscator
namespace Beebyte::Obfuscator {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Beebyte.Obfuscator.RenameAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: AC2394
  class RenameAttribute : public ::System::Attribute {
    public:
    public:
    // private readonly System.String target
    // Size: 0x8
    // Offset: 0x10
    ::StringW target;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return target;
    }
    // Get instance field reference: private readonly System.String target
    [[deprecated("Use field access instead!")]] ::StringW& dyn_target();
    // private System.Void .ctor()
    // Offset: 0x1E5B630
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RenameAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Beebyte::Obfuscator::RenameAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RenameAttribute*, creationType>()));
    }
    // public System.Void .ctor(System.String target)
    // Offset: 0x1E5B638
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RenameAttribute* New_ctor(::StringW target) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Beebyte::Obfuscator::RenameAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RenameAttribute*, creationType>(target)));
    }
    // public System.String GetTarget()
    // Offset: 0x1E5B664
    ::StringW GetTarget();
  }; // Beebyte.Obfuscator.RenameAttribute
  #pragma pack(pop)
  static check_size<sizeof(RenameAttribute), 16 + sizeof(::StringW)> __Beebyte_Obfuscator_RenameAttributeSizeCheck;
  static_assert(sizeof(RenameAttribute) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Beebyte::Obfuscator::RenameAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Beebyte::Obfuscator::RenameAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Beebyte::Obfuscator::RenameAttribute::GetTarget
// Il2CppName: GetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Beebyte::Obfuscator::RenameAttribute::*)()>(&Beebyte::Obfuscator::RenameAttribute::GetTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Beebyte::Obfuscator::RenameAttribute*), "GetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
