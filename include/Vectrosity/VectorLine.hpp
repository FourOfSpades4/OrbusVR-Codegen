// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: Vectrosity.CanvasState
#include "Vectrosity/CanvasState.hpp"
// Including type: Vectrosity.LineType
#include "Vectrosity/LineType.hpp"
// Including type: Vectrosity.Joins
#include "Vectrosity/Joins.hpp"
// Including type: Vectrosity.EndCap
#include "Vectrosity/EndCap.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: PhysicsMaterial2D
  class PhysicsMaterial2D;
  // Forward declaring type: Canvas
  class Canvas;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Ray
  struct Ray;
  // Forward declaring type: Plane
  struct Plane;
  // Forward declaring type: PolygonCollider2D
  class PolygonCollider2D;
}
// Forward declaring namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: IVectorObject
  class IVectorObject;
  // Forward declaring type: LineManager
  class LineManager;
  // Forward declaring type: CapInfo
  class CapInfo;
}
// Completed forward declares
// Type namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: VectorLine
  class VectorLine;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Vectrosity::VectorLine);
DEFINE_IL2CPP_ARG_TYPE(::Vectrosity::VectorLine*, "Vectrosity", "VectorLine");
// Type namespace: Vectrosity
namespace Vectrosity {
  // Size: 0x189
  #pragma pack(push, 1)
  // Autogenerated type: Vectrosity.VectorLine
  // [TokenAttribute] Offset: FFFFFFFF
  class VectorLine : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Vector3[] m_lineVertices
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Vector3> m_lineVertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector2[] m_lineUVs
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Vector2> m_lineUVs;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private UnityEngine.Color32[] m_lineColors
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Color32> m_lineColors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color32>) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> m_lineTriangles
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<int>* m_lineTriangles;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Int32 m_vertexCount
    // Size: 0x4
    // Offset: 0x30
    int m_vertexCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_vertexCount and: m_go
    char __padding4[0x4] = {};
    // private UnityEngine.GameObject m_go
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* m_go;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.RectTransform m_rectTransform
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::RectTransform* m_rectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private Vectrosity.IVectorObject m_vectorObject
    // Size: 0x8
    // Offset: 0x48
    ::Vectrosity::IVectorObject* m_vectorObject;
    // Field size check
    static_assert(sizeof(::Vectrosity::IVectorObject*) == 0x8);
    // private UnityEngine.Color32 m_color
    // Size: 0x4
    // Offset: 0x50
    ::UnityEngine::Color32 m_color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // private Vectrosity.CanvasState m_canvasState
    // Size: 0x4
    // Offset: 0x54
    ::Vectrosity::CanvasState m_canvasState;
    // Field size check
    static_assert(sizeof(::Vectrosity::CanvasState) == 0x4);
    // private System.Boolean m_is2D
    // Size: 0x1
    // Offset: 0x58
    bool m_is2D;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_is2D and: m_points2
    char __padding10[0x7] = {};
    // private System.Collections.Generic.List`1<UnityEngine.Vector2> m_points2
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* m_points2;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector2>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> m_points3
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* m_points3;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // private System.Int32 m_pointsCount
    // Size: 0x4
    // Offset: 0x70
    int m_pointsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_pointsCount and: m_screenPoints
    char __padding13[0x4] = {};
    // private UnityEngine.Vector3[] m_screenPoints
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::UnityEngine::Vector3> m_screenPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Single[] m_lineWidths
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<float> m_lineWidths;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single m_lineWidth
    // Size: 0x4
    // Offset: 0x88
    float m_lineWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_maxWeldDistance
    // Size: 0x4
    // Offset: 0x8C
    float m_maxWeldDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single[] m_distances
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<float> m_distances;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.String m_name
    // Size: 0x8
    // Offset: 0x98
    ::StringW m_name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Material m_material
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Material* m_material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Texture m_originalTexture
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Texture* m_originalTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // private UnityEngine.Texture m_texture
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Texture* m_texture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // private System.Boolean m_active
    // Size: 0x1
    // Offset: 0xB8
    bool m_active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_active and: m_lineType
    char __padding23[0x3] = {};
    // private Vectrosity.LineType m_lineType
    // Size: 0x4
    // Offset: 0xBC
    ::Vectrosity::LineType m_lineType;
    // Field size check
    static_assert(sizeof(::Vectrosity::LineType) == 0x4);
    // private System.Single m_capLength
    // Size: 0x4
    // Offset: 0xC0
    float m_capLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_smoothWidth
    // Size: 0x1
    // Offset: 0xC4
    bool m_smoothWidth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_smoothColor
    // Size: 0x1
    // Offset: 0xC5
    bool m_smoothColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_smoothColor and: m_joins
    char __padding27[0x2] = {};
    // private Vectrosity.Joins m_joins
    // Size: 0x4
    // Offset: 0xC8
    ::Vectrosity::Joins m_joins;
    // Field size check
    static_assert(sizeof(::Vectrosity::Joins) == 0x4);
    // private System.Boolean m_isAutoDrawing
    // Size: 0x1
    // Offset: 0xCC
    bool m_isAutoDrawing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_isAutoDrawing and: m_drawStart
    char __padding29[0x3] = {};
    // private System.Int32 m_drawStart
    // Size: 0x4
    // Offset: 0xD0
    int m_drawStart;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_drawEnd
    // Size: 0x4
    // Offset: 0xD4
    int m_drawEnd;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_endPointsUpdate
    // Size: 0x4
    // Offset: 0xD8
    int m_endPointsUpdate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_useNormals
    // Size: 0x1
    // Offset: 0xDC
    bool m_useNormals;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_useTangents
    // Size: 0x1
    // Offset: 0xDD
    bool m_useTangents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_normalsCalculated
    // Size: 0x1
    // Offset: 0xDE
    bool m_normalsCalculated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_tangentsCalculated
    // Size: 0x1
    // Offset: 0xDF
    bool m_tangentsCalculated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Vectrosity.EndCap m_capType
    // Size: 0x4
    // Offset: 0xE0
    ::Vectrosity::EndCap m_capType;
    // Field size check
    static_assert(sizeof(::Vectrosity::EndCap) == 0x4);
    // Padding between fields: m_capType and: m_endCap
    char __padding37[0x4] = {};
    // private System.String m_endCap
    // Size: 0x8
    // Offset: 0xE8
    ::StringW m_endCap;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean m_useCapColors
    // Size: 0x1
    // Offset: 0xF0
    bool m_useCapColors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_useCapColors and: m_frontColor
    char __padding39[0x3] = {};
    // private UnityEngine.Color32 m_frontColor
    // Size: 0x4
    // Offset: 0xF4
    ::UnityEngine::Color32 m_frontColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // private UnityEngine.Color32 m_backColor
    // Size: 0x4
    // Offset: 0xF8
    ::UnityEngine::Color32 m_backColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // private System.Int32 m_frontEndCapIndex
    // Size: 0x4
    // Offset: 0xFC
    int m_frontEndCapIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_backEndCapIndex
    // Size: 0x4
    // Offset: 0x100
    int m_backEndCapIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_lineUVBottom
    // Size: 0x4
    // Offset: 0x104
    float m_lineUVBottom;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_lineUVTop
    // Size: 0x4
    // Offset: 0x108
    float m_lineUVTop;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_frontCapUVBottom
    // Size: 0x4
    // Offset: 0x10C
    float m_frontCapUVBottom;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_frontCapUVTop
    // Size: 0x4
    // Offset: 0x110
    float m_frontCapUVTop;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_backCapUVBottom
    // Size: 0x4
    // Offset: 0x114
    float m_backCapUVBottom;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_backCapUVTop
    // Size: 0x4
    // Offset: 0x118
    float m_backCapUVTop;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_continuousTexture
    // Size: 0x1
    // Offset: 0x11C
    bool m_continuousTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_continuousTexture and: m_drawTransform
    char __padding50[0x3] = {};
    // private UnityEngine.Transform m_drawTransform
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::Transform* m_drawTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean m_viewportDraw
    // Size: 0x1
    // Offset: 0x128
    bool m_viewportDraw;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_viewportDraw and: m_textureScale
    char __padding52[0x3] = {};
    // private System.Single m_textureScale
    // Size: 0x4
    // Offset: 0x12C
    float m_textureScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_useTextureScale
    // Size: 0x1
    // Offset: 0x130
    bool m_useTextureScale;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_useTextureScale and: m_textureOffset
    char __padding54[0x3] = {};
    // private System.Single m_textureOffset
    // Size: 0x4
    // Offset: 0x134
    float m_textureOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_useMatrix
    // Size: 0x1
    // Offset: 0x138
    bool m_useMatrix;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_useMatrix and: m_matrix
    char __padding56[0x3] = {};
    // private UnityEngine.Matrix4x4 m_matrix
    // Size: 0x40
    // Offset: 0x13C
    ::UnityEngine::Matrix4x4 m_matrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private System.Boolean m_collider
    // Size: 0x1
    // Offset: 0x17C
    bool m_collider;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_trigger
    // Size: 0x1
    // Offset: 0x17D
    bool m_trigger;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_trigger and: m_physicsMaterial
    char __padding59[0x2] = {};
    // private UnityEngine.PhysicsMaterial2D m_physicsMaterial
    // Size: 0x8
    // Offset: 0x180
    ::UnityEngine::PhysicsMaterial2D* m_physicsMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::PhysicsMaterial2D*) == 0x8);
    // private System.Boolean m_alignOddWidthToPixels
    // Size: 0x1
    // Offset: 0x188
    bool m_alignOddWidthToPixels;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private UnityEngine.Vector3 v3zero
    static ::UnityEngine::Vector3 _get_v3zero();
    // Set static field: static private UnityEngine.Vector3 v3zero
    static void _set_v3zero(::UnityEngine::Vector3 value);
    // Get static field: static private UnityEngine.Canvas m_canvas
    static ::UnityEngine::Canvas* _get_m_canvas();
    // Set static field: static private UnityEngine.Canvas m_canvas
    static void _set_m_canvas(::UnityEngine::Canvas* value);
    // Get static field: static private UnityEngine.Transform camTransform
    static ::UnityEngine::Transform* _get_camTransform();
    // Set static field: static private UnityEngine.Transform camTransform
    static void _set_camTransform(::UnityEngine::Transform* value);
    // Get static field: static private UnityEngine.Camera cam3D
    static ::UnityEngine::Camera* _get_cam3D();
    // Set static field: static private UnityEngine.Camera cam3D
    static void _set_cam3D(::UnityEngine::Camera* value);
    // Get static field: static private UnityEngine.Vector3 oldPosition
    static ::UnityEngine::Vector3 _get_oldPosition();
    // Set static field: static private UnityEngine.Vector3 oldPosition
    static void _set_oldPosition(::UnityEngine::Vector3 value);
    // Get static field: static private UnityEngine.Vector3 oldRotation
    static ::UnityEngine::Vector3 _get_oldRotation();
    // Set static field: static private UnityEngine.Vector3 oldRotation
    static void _set_oldRotation(::UnityEngine::Vector3 value);
    // Get static field: static private System.Boolean lineManagerCreated
    static bool _get_lineManagerCreated();
    // Set static field: static private System.Boolean lineManagerCreated
    static void _set_lineManagerCreated(bool value);
    // Get static field: static private Vectrosity.LineManager m_lineManager
    static ::Vectrosity::LineManager* _get_m_lineManager();
    // Set static field: static private Vectrosity.LineManager m_lineManager
    static void _set_m_lineManager(::Vectrosity::LineManager* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.String,Vectrosity.CapInfo> capDictionary
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::Vectrosity::CapInfo*>* _get_capDictionary();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.String,Vectrosity.CapInfo> capDictionary
    static void _set_capDictionary(::System::Collections::Generic::Dictionary_2<::StringW, ::Vectrosity::CapInfo*>* value);
    // Get static field: static private System.Int32 endianDiff1
    static int _get_endianDiff1();
    // Set static field: static private System.Int32 endianDiff1
    static void _set_endianDiff1(int value);
    // Get static field: static private System.Int32 endianDiff2
    static int _get_endianDiff2();
    // Set static field: static private System.Int32 endianDiff2
    static void _set_endianDiff2(int value);
    // Get static field: static private System.Byte[] byteBlock
    static ::ArrayW<uint8_t> _get_byteBlock();
    // Set static field: static private System.Byte[] byteBlock
    static void _set_byteBlock(::ArrayW<uint8_t> value);
    // Get static field: static private System.String[] functionNames
    static ::ArrayW<::StringW> _get_functionNames();
    // Set static field: static private System.String[] functionNames
    static void _set_functionNames(::ArrayW<::StringW> value);
    // Get instance field reference: private UnityEngine.Vector3[] m_lineVertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_lineVertices();
    // Get instance field reference: private UnityEngine.Vector2[] m_lineUVs
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_m_lineUVs();
    // Get instance field reference: private UnityEngine.Color32[] m_lineColors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color32>& dyn_m_lineColors();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> m_lineTriangles
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_m_lineTriangles();
    // Get instance field reference: private System.Int32 m_vertexCount
    [[deprecated("Use field access instead!")]] int& dyn_m_vertexCount();
    // Get instance field reference: private UnityEngine.GameObject m_go
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_go();
    // Get instance field reference: private UnityEngine.RectTransform m_rectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_m_rectTransform();
    // Get instance field reference: private Vectrosity.IVectorObject m_vectorObject
    [[deprecated("Use field access instead!")]] ::Vectrosity::IVectorObject*& dyn_m_vectorObject();
    // Get instance field reference: private UnityEngine.Color32 m_color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_color();
    // Get instance field reference: private Vectrosity.CanvasState m_canvasState
    [[deprecated("Use field access instead!")]] ::Vectrosity::CanvasState& dyn_m_canvasState();
    // Get instance field reference: private System.Boolean m_is2D
    [[deprecated("Use field access instead!")]] bool& dyn_m_is2D();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector2> m_points2
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector2>*& dyn_m_points2();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector3> m_points3
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_m_points3();
    // Get instance field reference: private System.Int32 m_pointsCount
    [[deprecated("Use field access instead!")]] int& dyn_m_pointsCount();
    // Get instance field reference: private UnityEngine.Vector3[] m_screenPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_screenPoints();
    // Get instance field reference: private System.Single[] m_lineWidths
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_lineWidths();
    // Get instance field reference: private System.Single m_lineWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_lineWidth();
    // Get instance field reference: private System.Single m_maxWeldDistance
    [[deprecated("Use field access instead!")]] float& dyn_m_maxWeldDistance();
    // Get instance field reference: private System.Single[] m_distances
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_distances();
    // Get instance field reference: private System.String m_name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_name();
    // Get instance field reference: private UnityEngine.Material m_material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_material();
    // Get instance field reference: private UnityEngine.Texture m_originalTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_m_originalTexture();
    // Get instance field reference: private UnityEngine.Texture m_texture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_m_texture();
    // Get instance field reference: private System.Boolean m_active
    [[deprecated("Use field access instead!")]] bool& dyn_m_active();
    // Get instance field reference: private Vectrosity.LineType m_lineType
    [[deprecated("Use field access instead!")]] ::Vectrosity::LineType& dyn_m_lineType();
    // Get instance field reference: private System.Single m_capLength
    [[deprecated("Use field access instead!")]] float& dyn_m_capLength();
    // Get instance field reference: private System.Boolean m_smoothWidth
    [[deprecated("Use field access instead!")]] bool& dyn_m_smoothWidth();
    // Get instance field reference: private System.Boolean m_smoothColor
    [[deprecated("Use field access instead!")]] bool& dyn_m_smoothColor();
    // Get instance field reference: private Vectrosity.Joins m_joins
    [[deprecated("Use field access instead!")]] ::Vectrosity::Joins& dyn_m_joins();
    // Get instance field reference: private System.Boolean m_isAutoDrawing
    [[deprecated("Use field access instead!")]] bool& dyn_m_isAutoDrawing();
    // Get instance field reference: private System.Int32 m_drawStart
    [[deprecated("Use field access instead!")]] int& dyn_m_drawStart();
    // Get instance field reference: private System.Int32 m_drawEnd
    [[deprecated("Use field access instead!")]] int& dyn_m_drawEnd();
    // Get instance field reference: private System.Int32 m_endPointsUpdate
    [[deprecated("Use field access instead!")]] int& dyn_m_endPointsUpdate();
    // Get instance field reference: private System.Boolean m_useNormals
    [[deprecated("Use field access instead!")]] bool& dyn_m_useNormals();
    // Get instance field reference: private System.Boolean m_useTangents
    [[deprecated("Use field access instead!")]] bool& dyn_m_useTangents();
    // Get instance field reference: private System.Boolean m_normalsCalculated
    [[deprecated("Use field access instead!")]] bool& dyn_m_normalsCalculated();
    // Get instance field reference: private System.Boolean m_tangentsCalculated
    [[deprecated("Use field access instead!")]] bool& dyn_m_tangentsCalculated();
    // Get instance field reference: private Vectrosity.EndCap m_capType
    [[deprecated("Use field access instead!")]] ::Vectrosity::EndCap& dyn_m_capType();
    // Get instance field reference: private System.String m_endCap
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_endCap();
    // Get instance field reference: private System.Boolean m_useCapColors
    [[deprecated("Use field access instead!")]] bool& dyn_m_useCapColors();
    // Get instance field reference: private UnityEngine.Color32 m_frontColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_frontColor();
    // Get instance field reference: private UnityEngine.Color32 m_backColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_backColor();
    // Get instance field reference: private System.Int32 m_frontEndCapIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_frontEndCapIndex();
    // Get instance field reference: private System.Int32 m_backEndCapIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_backEndCapIndex();
    // Get instance field reference: private System.Single m_lineUVBottom
    [[deprecated("Use field access instead!")]] float& dyn_m_lineUVBottom();
    // Get instance field reference: private System.Single m_lineUVTop
    [[deprecated("Use field access instead!")]] float& dyn_m_lineUVTop();
    // Get instance field reference: private System.Single m_frontCapUVBottom
    [[deprecated("Use field access instead!")]] float& dyn_m_frontCapUVBottom();
    // Get instance field reference: private System.Single m_frontCapUVTop
    [[deprecated("Use field access instead!")]] float& dyn_m_frontCapUVTop();
    // Get instance field reference: private System.Single m_backCapUVBottom
    [[deprecated("Use field access instead!")]] float& dyn_m_backCapUVBottom();
    // Get instance field reference: private System.Single m_backCapUVTop
    [[deprecated("Use field access instead!")]] float& dyn_m_backCapUVTop();
    // Get instance field reference: private System.Boolean m_continuousTexture
    [[deprecated("Use field access instead!")]] bool& dyn_m_continuousTexture();
    // Get instance field reference: private UnityEngine.Transform m_drawTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_drawTransform();
    // Get instance field reference: private System.Boolean m_viewportDraw
    [[deprecated("Use field access instead!")]] bool& dyn_m_viewportDraw();
    // Get instance field reference: private System.Single m_textureScale
    [[deprecated("Use field access instead!")]] float& dyn_m_textureScale();
    // Get instance field reference: private System.Boolean m_useTextureScale
    [[deprecated("Use field access instead!")]] bool& dyn_m_useTextureScale();
    // Get instance field reference: private System.Single m_textureOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_textureOffset();
    // Get instance field reference: private System.Boolean m_useMatrix
    [[deprecated("Use field access instead!")]] bool& dyn_m_useMatrix();
    // Get instance field reference: private UnityEngine.Matrix4x4 m_matrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_m_matrix();
    // Get instance field reference: private System.Boolean m_collider
    [[deprecated("Use field access instead!")]] bool& dyn_m_collider();
    // Get instance field reference: private System.Boolean m_trigger
    [[deprecated("Use field access instead!")]] bool& dyn_m_trigger();
    // Get instance field reference: private UnityEngine.PhysicsMaterial2D m_physicsMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::PhysicsMaterial2D*& dyn_m_physicsMaterial();
    // Get instance field reference: private System.Boolean m_alignOddWidthToPixels
    [[deprecated("Use field access instead!")]] bool& dyn_m_alignOddWidthToPixels();
    // public System.Void .ctor(System.String name, System.Collections.Generic.List`1<UnityEngine.Vector3> points, System.Single width, Vectrosity.LineType lineType)
    // Offset: 0x280263C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VectorLine* New_ctor(::StringW name, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* points, float width, ::Vectrosity::LineType lineType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Vectrosity::VectorLine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VectorLine*, creationType>(name, points, width, lineType)));
    }
    // public System.Void .ctor(System.String name, System.Collections.Generic.List`1<UnityEngine.Vector3> points, System.Single width, Vectrosity.LineType lineType, Vectrosity.Joins joins)
    // Offset: 0x2802CAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VectorLine* New_ctor(::StringW name, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* points, float width, ::Vectrosity::LineType lineType, ::Vectrosity::Joins joins) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Vectrosity::VectorLine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VectorLine*, creationType>(name, points, width, lineType, joins)));
    }
    // static private System.Void .cctor()
    // Offset: 0x2802D58
    static void _cctor();
    // public UnityEngine.Vector3[] get_lineVertices()
    // Offset: 0x2802FAC
    ::ArrayW<::UnityEngine::Vector3> get_lineVertices();
    // public UnityEngine.Vector2[] get_lineUVs()
    // Offset: 0x2802FB4
    ::ArrayW<::UnityEngine::Vector2> get_lineUVs();
    // public UnityEngine.Color32[] get_lineColors()
    // Offset: 0x2802FBC
    ::ArrayW<::UnityEngine::Color32> get_lineColors();
    // public System.Collections.Generic.List`1<System.Int32> get_lineTriangles()
    // Offset: 0x2802FC4
    ::System::Collections::Generic::List_1<int>* get_lineTriangles();
    // public UnityEngine.RectTransform get_rectTransform()
    // Offset: 0x2800808
    ::UnityEngine::RectTransform* get_rectTransform();
    // public UnityEngine.Color32 get_color()
    // Offset: 0x27FF47C
    ::UnityEngine::Color32 get_color();
    // public System.Void set_color(UnityEngine.Color32 value)
    // Offset: 0x2802FCC
    void set_color(::UnityEngine::Color32 value);
    // public System.Boolean get_is2D()
    // Offset: 0x2803038
    bool get_is2D();
    // public System.Collections.Generic.List`1<UnityEngine.Vector2> get_points2()
    // Offset: 0x2803040
    ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* get_points2();
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> get_points3()
    // Offset: 0x28030F4
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* get_points3();
    // public System.Void set_points3(System.Collections.Generic.List`1<UnityEngine.Vector3> value)
    // Offset: 0x28031A0
    void set_points3(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* value);
    // private System.Int32 get_pointsCount()
    // Offset: 0x2803258
    int get_pointsCount();
    // public System.String get_name()
    // Offset: 0x28030EC
    ::StringW get_name();
    // public System.Void set_name(System.String value)
    // Offset: 0x28032EC
    void set_name(::StringW value);
    // public UnityEngine.Texture get_texture()
    // Offset: 0x2803414
    ::UnityEngine::Texture* get_texture();
    // public System.Void set_layer(System.Int32 value)
    // Offset: 0x280341C
    void set_layer(int value);
    // public System.Boolean get_active()
    // Offset: 0x2803504
    bool get_active();
    // public System.Void set_active(System.Boolean value)
    // Offset: 0x27FFBE4
    void set_active(bool value);
    // public System.Boolean get_smoothWidth()
    // Offset: 0x280350C
    bool get_smoothWidth();
    // public System.Boolean get_isAutoDrawing()
    // Offset: 0x2803514
    bool get_isAutoDrawing();
    // public System.Int32 get_drawStart()
    // Offset: 0x280351C
    int get_drawStart();
    // public System.Int32 get_drawEnd()
    // Offset: 0x2803524
    int get_drawEnd();
    // public System.Void set_drawTransform(UnityEngine.Transform value)
    // Offset: 0x280352C
    void set_drawTransform(::UnityEngine::Transform* value);
    // public System.Void set_textureScale(System.Single value)
    // Offset: 0x2803534
    void set_textureScale(float value);
    // static public UnityEngine.Vector3 get_camTransformPosition()
    // Offset: 0x2803748
    static ::UnityEngine::Vector3 get_camTransformPosition();
    // static public System.Boolean get_camTransformExists()
    // Offset: 0x2800770
    static bool get_camTransformExists();
    // static public Vectrosity.LineManager get_lineManager()
    // Offset: 0x28037C4
    static ::Vectrosity::LineManager* get_lineManager();
    // protected System.Void SetupLine(System.String lineName, UnityEngine.Texture texture, System.Single width, Vectrosity.LineType lineType, Vectrosity.Joins joins, System.Boolean use2D)
    // Offset: 0x28026DC
    void SetupLine(::StringW lineName, ::UnityEngine::Texture* texture, float width, ::Vectrosity::LineType lineType, ::Vectrosity::Joins joins, bool use2D);
    // private System.Void SetupTriangles(System.Int32 startVert)
    // Offset: 0x2803E80
    void SetupTriangles(int startVert);
    // private System.Void SetLastFillTriangles()
    // Offset: 0x28044E0
    void SetLastFillTriangles();
    // private System.Void SetEndCapUVs()
    // Offset: 0x2804A50
    void SetEndCapUVs();
    // static private System.Void SetupTransform(UnityEngine.RectTransform rectTransform)
    // Offset: 0x2803A44
    static void SetupTransform(::UnityEngine::RectTransform* rectTransform);
    // private System.Void ResizeMeshArrays(System.Int32 newCount)
    // Offset: 0x2804F00
    void ResizeMeshArrays(int newCount);
    // private System.Void Resize()
    // Offset: 0x2804F90
    void Resize();
    // private System.Void ResizeLineWidths(System.Int32 newSize)
    // Offset: 0x2805354
    void ResizeLineWidths(int newSize);
    // private System.Void SetUVs(System.Int32 startIndex, System.Int32 endIndex)
    // Offset: 0x2803C2C
    void SetUVs(int startIndex, int endIndex);
    // private System.Boolean SetVertexCount()
    // Offset: 0x2803928
    bool SetVertexCount();
    // private System.Int32 MaxPoints()
    // Offset: 0x280533C
    int MaxPoints();
    // public UnityEngine.Vector4[] CalculateTangents(UnityEngine.Vector3[] normals)
    // Offset: 0x2805EA0
    ::ArrayW<::UnityEngine::Vector4> CalculateTangents(::ArrayW<::UnityEngine::Vector3> normals);
    // static public UnityEngine.GameObject SetupVectorCanvas()
    // Offset: 0x280683C
    static ::UnityEngine::GameObject* SetupVectorCanvas();
    // private System.Boolean CheckCamera3D()
    // Offset: 0x28069F4
    bool CheckCamera3D();
    // static public System.Void SetCamera3D()
    // Offset: 0x2806B34
    static void SetCamera3D();
    // static public System.Void SetCamera3D(UnityEngine.Camera camera)
    // Offset: 0x2806C24
    static void SetCamera3D(::UnityEngine::Camera* camera);
    // static public System.Boolean CameraHasMoved()
    // Offset: 0x2801A2C
    static bool CameraHasMoved();
    // static public System.Void UpdateCameraInfo()
    // Offset: 0x2801D60
    static void UpdateCameraInfo();
    // public System.Int32 GetSegmentNumber()
    // Offset: 0x2803BC8
    int GetSegmentNumber();
    // private System.Void SetEndCapColors()
    // Offset: 0x2805B5C
    void SetEndCapColors();
    // public System.Void SetColor(UnityEngine.Color32 color)
    // Offset: 0x2803004
    void SetColor(::UnityEngine::Color32 color);
    // public System.Void SetColor(UnityEngine.Color32 color, System.Int32 startIndex, System.Int32 endIndex)
    // Offset: 0x28054F4
    void SetColor(::UnityEngine::Color32 color, int startIndex, int endIndex);
    // private System.Void CheckNormals()
    // Offset: 0x2806DB8
    void CheckNormals();
    // private System.Void CheckLine(System.Boolean draw3D)
    // Offset: 0x2806F20
    void CheckLine(bool draw3D);
    // private System.Void DrawEndCap(System.Boolean draw3D)
    // Offset: 0x2806F7C
    void DrawEndCap(bool draw3D);
    // private System.Void ScaleCapVertices(System.Int32 offset, System.Single scale, UnityEngine.Vector3 center)
    // Offset: 0x28091C0
    void ScaleCapVertices(int offset, float scale, ::UnityEngine::Vector3 center);
    // private System.Void SetContinuousTexture()
    // Offset: 0x2808F0C
    void SetContinuousTexture();
    // private System.Boolean UseMatrix(out UnityEngine.Matrix4x4 thisMatrix)
    // Offset: 0x2809BD8
    bool UseMatrix(ByRef<::UnityEngine::Matrix4x4> thisMatrix);
    // private System.Boolean CheckPointCount()
    // Offset: 0x2809D18
    bool CheckPointCount();
    // private System.Void ClearTriangles()
    // Offset: 0x2809E18
    void ClearTriangles();
    // private System.Void SetupDrawStartEnd(out System.Int32 start, out System.Int32 end, System.Boolean clearVertices)
    // Offset: 0x2809EF0
    void SetupDrawStartEnd(ByRef<int> start, ByRef<int> end, bool clearVertices);
    // private System.Void ZeroVertices(System.Int32 startIndex, System.Int32 endIndex)
    // Offset: 0x280586C
    void ZeroVertices(int startIndex, int endIndex);
    // private System.Void SetupCanvasState(Vectrosity.CanvasState wantedState)
    // Offset: 0x2809FEC
    void SetupCanvasState(::Vectrosity::CanvasState wantedState);
    // public System.Void Draw()
    // Offset: 0x280A7B8
    void Draw();
    // private System.Void Line2D(System.Int32 start, System.Int32 end, UnityEngine.Matrix4x4 thisMatrix, System.Boolean useTransformMatrix)
    // Offset: 0x280B3CC
    void Line2D(int start, int end, ::UnityEngine::Matrix4x4 thisMatrix, bool useTransformMatrix);
    // private System.Void Line3D(System.Int32 start, System.Int32 end, UnityEngine.Matrix4x4 thisMatrix, System.Boolean useTransformMatrix)
    // Offset: 0x280BEB8
    void Line3D(int start, int end, ::UnityEngine::Matrix4x4 thisMatrix, bool useTransformMatrix);
    // private System.Void CheckDrawStartFill(System.Int32 start)
    // Offset: 0x280E524
    void CheckDrawStartFill(int start);
    // public System.Void Draw3D()
    // Offset: 0x280088C
    void Draw3D();
    // private System.Boolean IntersectAndDoSkip(ref UnityEngine.Vector3 pos1, ref UnityEngine.Vector3 pos2, ref UnityEngine.Vector3 p1, ref UnityEngine.Vector3 p2, ref System.Single screenHeight, ref UnityEngine.Ray ray, ref UnityEngine.Plane cameraPlane)
    // Offset: 0x280E754
    bool IntersectAndDoSkip(ByRef<::UnityEngine::Vector3> pos1, ByRef<::UnityEngine::Vector3> pos2, ByRef<::UnityEngine::Vector3> p1, ByRef<::UnityEngine::Vector3> p2, ByRef<float> screenHeight, ByRef<::UnityEngine::Ray> ray, ByRef<::UnityEngine::Plane> cameraPlane);
    // private UnityEngine.Vector3 PlaneIntersectionPoint(ref UnityEngine.Ray ray, ref UnityEngine.Plane plane, ref UnityEngine.Vector3 p1, ref UnityEngine.Vector3 p2)
    // Offset: 0x280F640
    ::UnityEngine::Vector3 PlaneIntersectionPoint(ByRef<::UnityEngine::Ray> ray, ByRef<::UnityEngine::Plane> plane, ByRef<::UnityEngine::Vector3> p1, ByRef<::UnityEngine::Vector3> p2);
    // private System.Void DrawPoints()
    // Offset: 0x280A9D4
    void DrawPoints();
    // private System.Void DrawPoints3D()
    // Offset: 0x280EA3C
    void DrawPoints3D();
    // private System.Void SkipQuad(ref System.Int32 idx, ref System.Int32 widthIdx, ref System.Int32 widthIdxAdd)
    // Offset: 0x280DF90
    void SkipQuad(ByRef<int> idx, ByRef<int> widthIdx, ByRef<int> widthIdxAdd);
    // private System.Void SkipQuad3D(ref System.Int32 idx, ref System.Int32 widthIdx, ref System.Int32 widthIdxAdd)
    // Offset: 0x280F080
    void SkipQuad3D(ByRef<int> idx, ByRef<int> widthIdx, ByRef<int> widthIdxAdd);
    // private System.Void WeldJoins(System.Int32 start, System.Int32 end, System.Boolean connectFirstAndLast)
    // Offset: 0x280E1D4
    void WeldJoins(int start, int end, bool connectFirstAndLast);
    // private System.Void WeldJoinsDiscrete(System.Int32 start, System.Int32 end, System.Boolean connectFirstAndLast)
    // Offset: 0x280E27C
    void WeldJoinsDiscrete(int start, int end, bool connectFirstAndLast);
    // private System.Void SetIntersectionPoint(System.Int32 p1, System.Int32 p2, System.Int32 p3, System.Int32 p4)
    // Offset: 0x280F768
    void SetIntersectionPoint(int p1, int p2, int p3, int p4);
    // private System.Void WeldJoins3D(System.Int32 start, System.Int32 end, System.Boolean connectFirstAndLast)
    // Offset: 0x280F3D8
    void WeldJoins3D(int start, int end, bool connectFirstAndLast);
    // private System.Void WeldJoinsDiscrete3D(System.Int32 start, System.Int32 end, System.Boolean connectFirstAndLast)
    // Offset: 0x280F480
    void WeldJoinsDiscrete3D(int start, int end, bool connectFirstAndLast);
    // private System.Void SetIntersectionPoint3D(System.Int32 p1, System.Int32 p2, System.Int32 p3, System.Int32 p4)
    // Offset: 0x280FC24
    void SetIntersectionPoint3D(int p1, int p2, int p3, int p4);
    // static public System.Void LineManagerCheckDistance()
    // Offset: 0x28100E4
    static void LineManagerCheckDistance();
    // static public System.Void LineManagerDisable()
    // Offset: 0x2810154
    static void LineManagerDisable();
    // static public System.Void LineManagerEnable()
    // Offset: 0x28101C4
    static void LineManagerEnable();
    // public System.Void Draw3DAuto()
    // Offset: 0x2810234
    void Draw3DAuto();
    // public System.Void Draw3DAuto(System.Single time)
    // Offset: 0x281023C
    void Draw3DAuto(float time);
    // public System.Void StopDrawing3DAuto()
    // Offset: 0x28102EC
    void StopDrawing3DAuto();
    // private System.Void SetTextureScale()
    // Offset: 0x280CC1C
    void SetTextureScale();
    // private System.Void ResetTextureScale()
    // Offset: 0x2803554
    void ResetTextureScale();
    // private System.Void SetCollider(System.Boolean convertToWorldSpace)
    // Offset: 0x280D7CC
    void SetCollider(bool convertToWorldSpace);
    // private System.Void SetPathVerticesContinuous(ref System.Int32 i, ref System.Int32 startIdx, ref System.Int32 endIdx, UnityEngine.Vector2[] path)
    // Offset: 0x2810878
    void SetPathVerticesContinuous(ByRef<int> i, ByRef<int> startIdx, ByRef<int> endIdx, ::ArrayW<::UnityEngine::Vector2> path);
    // private System.Void SetPathWorldVerticesContinuous(ref System.Int32 i, ref UnityEngine.Vector3 v3, ref System.Int32 startIdx, ref System.Int32 endIdx, UnityEngine.Vector2[] path)
    // Offset: 0x281036C
    void SetPathWorldVerticesContinuous(ByRef<int> i, ByRef<::UnityEngine::Vector3> v3, ByRef<int> startIdx, ByRef<int> endIdx, ::ArrayW<::UnityEngine::Vector2> path);
    // private System.Void SetPathVerticesDiscrete(ref System.Int32 i, ref System.Int32 pIdx, UnityEngine.Vector2[] path, UnityEngine.PolygonCollider2D collider)
    // Offset: 0x2811158
    void SetPathVerticesDiscrete(ByRef<int> i, ByRef<int> pIdx, ::ArrayW<::UnityEngine::Vector2> path, ::UnityEngine::PolygonCollider2D* collider);
    // private System.Void SetPathWorldVerticesDiscrete(ref System.Int32 i, ref UnityEngine.Vector3 v3, ref System.Int32 pIdx, UnityEngine.Vector2[] path, UnityEngine.PolygonCollider2D collider)
    // Offset: 0x2810C70
    void SetPathWorldVerticesDiscrete(ByRef<int> i, ByRef<::UnityEngine::Vector3> v3, ByRef<int> pIdx, ::ArrayW<::UnityEngine::Vector2> path, ::UnityEngine::PolygonCollider2D* collider);
    // static public System.Void Destroy(ref Vectrosity.VectorLine line)
    // Offset: 0x2800064
    static void Destroy(ByRef<::Vectrosity::VectorLine*> line);
    // static public System.Void Destroy(Vectrosity.VectorLine[] lines)
    // Offset: 0x2811640
    static void Destroy(::ArrayW<::Vectrosity::VectorLine*> lines);
    // static private System.Void DestroyLine(ref Vectrosity.VectorLine line)
    // Offset: 0x28114F0
    static void DestroyLine(ByRef<::Vectrosity::VectorLine*> line);
    // public System.Void SetDistances()
    // Offset: 0x2809564
    void SetDistances();
    // private System.Boolean Approximately(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2)
    // Offset: 0x280E190
    bool Approximately(::UnityEngine::Vector2 p1, ::UnityEngine::Vector2 p2);
    // private System.Boolean Approximately(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2)
    // Offset: 0x280E9D4
    bool Approximately(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2);
    // private System.Boolean Approximately(System.Single a, System.Single b)
    // Offset: 0x28116F8
    bool Approximately(float a, float b);
  }; // Vectrosity.VectorLine
  #pragma pack(pop)
  static check_size<sizeof(VectorLine), 392 + sizeof(bool)> __Vectrosity_VectorLineSizeCheck;
  static_assert(sizeof(VectorLine) == 0x189);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Vectrosity::VectorLine::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Vectrosity::VectorLine::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Vectrosity::VectorLine::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vectrosity::VectorLine::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_lineVertices
// Il2CppName: get_lineVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_lineVertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_lineVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_lineUVs
// Il2CppName: get_lineUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector2> (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_lineUVs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_lineUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_lineColors
// Il2CppName: get_lineColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color32> (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_lineColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_lineColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_lineTriangles
// Il2CppName: get_lineTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<int>* (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_lineTriangles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_lineTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_rectTransform
// Il2CppName: get_rectTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_rectTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_rectTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_color)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(::UnityEngine::Color32)>(&Vectrosity::VectorLine::set_color)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_is2D
// Il2CppName: get_is2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_is2D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_is2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_points2
// Il2CppName: get_points2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector2>* (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_points2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_points2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_points3
// Il2CppName: get_points3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>* (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_points3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_points3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::set_points3
// Il2CppName: set_points3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&Vectrosity::VectorLine::set_points3)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "set_points3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_pointsCount
// Il2CppName: get_pointsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_pointsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_pointsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::set_name
// Il2CppName: set_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(::StringW)>(&Vectrosity::VectorLine::set_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "set_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_texture
// Il2CppName: get_texture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture* (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_texture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_texture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::set_layer
// Il2CppName: set_layer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int)>(&Vectrosity::VectorLine::set_layer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "set_layer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_active
// Il2CppName: get_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::set_active
// Il2CppName: set_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(bool)>(&Vectrosity::VectorLine::set_active)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "set_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_smoothWidth
// Il2CppName: get_smoothWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_smoothWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_smoothWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_isAutoDrawing
// Il2CppName: get_isAutoDrawing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_isAutoDrawing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_isAutoDrawing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_drawStart
// Il2CppName: get_drawStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_drawStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_drawStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_drawEnd
// Il2CppName: get_drawEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::get_drawEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_drawEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::set_drawTransform
// Il2CppName: set_drawTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(::UnityEngine::Transform*)>(&Vectrosity::VectorLine::set_drawTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "set_drawTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::set_textureScale
// Il2CppName: set_textureScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(float)>(&Vectrosity::VectorLine::set_textureScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "set_textureScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_camTransformPosition
// Il2CppName: get_camTransformPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)()>(&Vectrosity::VectorLine::get_camTransformPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_camTransformPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_camTransformExists
// Il2CppName: get_camTransformExists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Vectrosity::VectorLine::get_camTransformExists)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_camTransformExists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::get_lineManager
// Il2CppName: get_lineManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Vectrosity::LineManager* (*)()>(&Vectrosity::VectorLine::get_lineManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "get_lineManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetupLine
// Il2CppName: SetupLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(::StringW, ::UnityEngine::Texture*, float, ::Vectrosity::LineType, ::Vectrosity::Joins, bool)>(&Vectrosity::VectorLine::SetupLine)> {
  static const MethodInfo* get() {
    static auto* lineName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lineType = &::il2cpp_utils::GetClassFromName("Vectrosity", "LineType")->byval_arg;
    static auto* joins = &::il2cpp_utils::GetClassFromName("Vectrosity", "Joins")->byval_arg;
    static auto* use2D = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetupLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineName, texture, width, lineType, joins, use2D});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetupTriangles
// Il2CppName: SetupTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int)>(&Vectrosity::VectorLine::SetupTriangles)> {
  static const MethodInfo* get() {
    static auto* startVert = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetupTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startVert});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetLastFillTriangles
// Il2CppName: SetLastFillTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::SetLastFillTriangles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetLastFillTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetEndCapUVs
// Il2CppName: SetEndCapUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::SetEndCapUVs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetEndCapUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetupTransform
// Il2CppName: SetupTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::RectTransform*)>(&Vectrosity::VectorLine::SetupTransform)> {
  static const MethodInfo* get() {
    static auto* rectTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetupTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTransform});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::ResizeMeshArrays
// Il2CppName: ResizeMeshArrays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int)>(&Vectrosity::VectorLine::ResizeMeshArrays)> {
  static const MethodInfo* get() {
    static auto* newCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "ResizeMeshArrays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newCount});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::Resize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::ResizeLineWidths
// Il2CppName: ResizeLineWidths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int)>(&Vectrosity::VectorLine::ResizeLineWidths)> {
  static const MethodInfo* get() {
    static auto* newSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "ResizeLineWidths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newSize});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetUVs
// Il2CppName: SetUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int, int)>(&Vectrosity::VectorLine::SetUVs)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex, endIndex});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetVertexCount
// Il2CppName: SetVertexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::SetVertexCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetVertexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::MaxPoints
// Il2CppName: MaxPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::MaxPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "MaxPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::CalculateTangents
// Il2CppName: CalculateTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector4> (Vectrosity::VectorLine::*)(::ArrayW<::UnityEngine::Vector3>)>(&Vectrosity::VectorLine::CalculateTangents)> {
  static const MethodInfo* get() {
    static auto* normals = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "CalculateTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{normals});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetupVectorCanvas
// Il2CppName: SetupVectorCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (*)()>(&Vectrosity::VectorLine::SetupVectorCanvas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetupVectorCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::CheckCamera3D
// Il2CppName: CheckCamera3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::CheckCamera3D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "CheckCamera3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetCamera3D
// Il2CppName: SetCamera3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vectrosity::VectorLine::SetCamera3D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetCamera3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetCamera3D
// Il2CppName: SetCamera3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*)>(&Vectrosity::VectorLine::SetCamera3D)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetCamera3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::CameraHasMoved
// Il2CppName: CameraHasMoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Vectrosity::VectorLine::CameraHasMoved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "CameraHasMoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::UpdateCameraInfo
// Il2CppName: UpdateCameraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vectrosity::VectorLine::UpdateCameraInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "UpdateCameraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::GetSegmentNumber
// Il2CppName: GetSegmentNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::GetSegmentNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "GetSegmentNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetEndCapColors
// Il2CppName: SetEndCapColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::SetEndCapColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetEndCapColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(::UnityEngine::Color32)>(&Vectrosity::VectorLine::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(::UnityEngine::Color32, int, int)>(&Vectrosity::VectorLine::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, startIndex, endIndex});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::CheckNormals
// Il2CppName: CheckNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::CheckNormals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "CheckNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::CheckLine
// Il2CppName: CheckLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(bool)>(&Vectrosity::VectorLine::CheckLine)> {
  static const MethodInfo* get() {
    static auto* draw3D = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "CheckLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{draw3D});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::DrawEndCap
// Il2CppName: DrawEndCap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(bool)>(&Vectrosity::VectorLine::DrawEndCap)> {
  static const MethodInfo* get() {
    static auto* draw3D = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "DrawEndCap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{draw3D});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::ScaleCapVertices
// Il2CppName: ScaleCapVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int, float, ::UnityEngine::Vector3)>(&Vectrosity::VectorLine::ScaleCapVertices)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "ScaleCapVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, scale, center});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetContinuousTexture
// Il2CppName: SetContinuousTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::SetContinuousTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetContinuousTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::UseMatrix
// Il2CppName: UseMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vectrosity::VectorLine::*)(ByRef<::UnityEngine::Matrix4x4>)>(&Vectrosity::VectorLine::UseMatrix)> {
  static const MethodInfo* get() {
    static auto* thisMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "UseMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thisMatrix});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::CheckPointCount
// Il2CppName: CheckPointCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::CheckPointCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "CheckPointCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::ClearTriangles
// Il2CppName: ClearTriangles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::ClearTriangles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "ClearTriangles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetupDrawStartEnd
// Il2CppName: SetupDrawStartEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(ByRef<int>, ByRef<int>, bool)>(&Vectrosity::VectorLine::SetupDrawStartEnd)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* clearVertices = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetupDrawStartEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, clearVertices});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::ZeroVertices
// Il2CppName: ZeroVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int, int)>(&Vectrosity::VectorLine::ZeroVertices)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "ZeroVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex, endIndex});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetupCanvasState
// Il2CppName: SetupCanvasState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(::Vectrosity::CanvasState)>(&Vectrosity::VectorLine::SetupCanvasState)> {
  static const MethodInfo* get() {
    static auto* wantedState = &::il2cpp_utils::GetClassFromName("Vectrosity", "CanvasState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetupCanvasState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wantedState});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::Draw
// Il2CppName: Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::Draw)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::Line2D
// Il2CppName: Line2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int, int, ::UnityEngine::Matrix4x4, bool)>(&Vectrosity::VectorLine::Line2D)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* thisMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* useTransformMatrix = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "Line2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, thisMatrix, useTransformMatrix});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::Line3D
// Il2CppName: Line3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int, int, ::UnityEngine::Matrix4x4, bool)>(&Vectrosity::VectorLine::Line3D)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* thisMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* useTransformMatrix = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "Line3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, thisMatrix, useTransformMatrix});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::CheckDrawStartFill
// Il2CppName: CheckDrawStartFill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int)>(&Vectrosity::VectorLine::CheckDrawStartFill)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "CheckDrawStartFill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::Draw3D
// Il2CppName: Draw3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::Draw3D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "Draw3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::IntersectAndDoSkip
// Il2CppName: IntersectAndDoSkip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vectrosity::VectorLine::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<float>, ByRef<::UnityEngine::Ray>, ByRef<::UnityEngine::Plane>)>(&Vectrosity::VectorLine::IntersectAndDoSkip)> {
  static const MethodInfo* get() {
    static auto* pos1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* pos2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* screenHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    static auto* cameraPlane = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "IntersectAndDoSkip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos1, pos2, p1, p2, screenHeight, ray, cameraPlane});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::PlaneIntersectionPoint
// Il2CppName: PlaneIntersectionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Vectrosity::VectorLine::*)(ByRef<::UnityEngine::Ray>, ByRef<::UnityEngine::Plane>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&Vectrosity::VectorLine::PlaneIntersectionPoint)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    static auto* plane = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->this_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "PlaneIntersectionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, plane, p1, p2});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::DrawPoints
// Il2CppName: DrawPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::DrawPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "DrawPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::DrawPoints3D
// Il2CppName: DrawPoints3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::DrawPoints3D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "DrawPoints3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SkipQuad
// Il2CppName: SkipQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(ByRef<int>, ByRef<int>, ByRef<int>)>(&Vectrosity::VectorLine::SkipQuad)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* widthIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* widthIdxAdd = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SkipQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, widthIdx, widthIdxAdd});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SkipQuad3D
// Il2CppName: SkipQuad3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(ByRef<int>, ByRef<int>, ByRef<int>)>(&Vectrosity::VectorLine::SkipQuad3D)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* widthIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* widthIdxAdd = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SkipQuad3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, widthIdx, widthIdxAdd});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::WeldJoins
// Il2CppName: WeldJoins
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int, int, bool)>(&Vectrosity::VectorLine::WeldJoins)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* connectFirstAndLast = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "WeldJoins", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, connectFirstAndLast});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::WeldJoinsDiscrete
// Il2CppName: WeldJoinsDiscrete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int, int, bool)>(&Vectrosity::VectorLine::WeldJoinsDiscrete)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* connectFirstAndLast = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "WeldJoinsDiscrete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, connectFirstAndLast});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetIntersectionPoint
// Il2CppName: SetIntersectionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int, int, int, int)>(&Vectrosity::VectorLine::SetIntersectionPoint)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* p4 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetIntersectionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2, p3, p4});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::WeldJoins3D
// Il2CppName: WeldJoins3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int, int, bool)>(&Vectrosity::VectorLine::WeldJoins3D)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* connectFirstAndLast = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "WeldJoins3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, connectFirstAndLast});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::WeldJoinsDiscrete3D
// Il2CppName: WeldJoinsDiscrete3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int, int, bool)>(&Vectrosity::VectorLine::WeldJoinsDiscrete3D)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* connectFirstAndLast = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "WeldJoinsDiscrete3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, connectFirstAndLast});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetIntersectionPoint3D
// Il2CppName: SetIntersectionPoint3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(int, int, int, int)>(&Vectrosity::VectorLine::SetIntersectionPoint3D)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* p4 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetIntersectionPoint3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2, p3, p4});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::LineManagerCheckDistance
// Il2CppName: LineManagerCheckDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vectrosity::VectorLine::LineManagerCheckDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "LineManagerCheckDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::LineManagerDisable
// Il2CppName: LineManagerDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vectrosity::VectorLine::LineManagerDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "LineManagerDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::LineManagerEnable
// Il2CppName: LineManagerEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vectrosity::VectorLine::LineManagerEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "LineManagerEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::Draw3DAuto
// Il2CppName: Draw3DAuto
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::Draw3DAuto)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "Draw3DAuto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::Draw3DAuto
// Il2CppName: Draw3DAuto
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(float)>(&Vectrosity::VectorLine::Draw3DAuto)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "Draw3DAuto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::StopDrawing3DAuto
// Il2CppName: StopDrawing3DAuto
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::StopDrawing3DAuto)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "StopDrawing3DAuto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetTextureScale
// Il2CppName: SetTextureScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::SetTextureScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetTextureScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::ResetTextureScale
// Il2CppName: ResetTextureScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::ResetTextureScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "ResetTextureScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetCollider
// Il2CppName: SetCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(bool)>(&Vectrosity::VectorLine::SetCollider)> {
  static const MethodInfo* get() {
    static auto* convertToWorldSpace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{convertToWorldSpace});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetPathVerticesContinuous
// Il2CppName: SetPathVerticesContinuous
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(ByRef<int>, ByRef<int>, ByRef<int>, ::ArrayW<::UnityEngine::Vector2>)>(&Vectrosity::VectorLine::SetPathVerticesContinuous)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* startIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* endIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* path = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetPathVerticesContinuous", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, startIdx, endIdx, path});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetPathWorldVerticesContinuous
// Il2CppName: SetPathWorldVerticesContinuous
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(ByRef<int>, ByRef<::UnityEngine::Vector3>, ByRef<int>, ByRef<int>, ::ArrayW<::UnityEngine::Vector2>)>(&Vectrosity::VectorLine::SetPathWorldVerticesContinuous)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* v3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* startIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* endIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* path = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetPathWorldVerticesContinuous", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, v3, startIdx, endIdx, path});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetPathVerticesDiscrete
// Il2CppName: SetPathVerticesDiscrete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(ByRef<int>, ByRef<int>, ::ArrayW<::UnityEngine::Vector2>, ::UnityEngine::PolygonCollider2D*)>(&Vectrosity::VectorLine::SetPathVerticesDiscrete)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* pIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* path = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "PolygonCollider2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetPathVerticesDiscrete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, pIdx, path, collider});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetPathWorldVerticesDiscrete
// Il2CppName: SetPathWorldVerticesDiscrete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)(ByRef<int>, ByRef<::UnityEngine::Vector3>, ByRef<int>, ::ArrayW<::UnityEngine::Vector2>, ::UnityEngine::PolygonCollider2D*)>(&Vectrosity::VectorLine::SetPathWorldVerticesDiscrete)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* v3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* pIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* path = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "PolygonCollider2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetPathWorldVerticesDiscrete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, v3, pIdx, path, collider});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Vectrosity::VectorLine*>)>(&Vectrosity::VectorLine::Destroy)> {
  static const MethodInfo* get() {
    static auto* line = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{line});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::Vectrosity::VectorLine*>)>(&Vectrosity::VectorLine::Destroy)> {
  static const MethodInfo* get() {
    static auto* lines = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lines});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::DestroyLine
// Il2CppName: DestroyLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Vectrosity::VectorLine*>)>(&Vectrosity::VectorLine::DestroyLine)> {
  static const MethodInfo* get() {
    static auto* line = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "DestroyLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{line});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::SetDistances
// Il2CppName: SetDistances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorLine::*)()>(&Vectrosity::VectorLine::SetDistances)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "SetDistances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::Approximately
// Il2CppName: Approximately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vectrosity::VectorLine::*)(::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Vectrosity::VectorLine::Approximately)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "Approximately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::Approximately
// Il2CppName: Approximately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vectrosity::VectorLine::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Vectrosity::VectorLine::Approximately)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "Approximately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorLine::Approximately
// Il2CppName: Approximately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vectrosity::VectorLine::*)(float, float)>(&Vectrosity::VectorLine::Approximately)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorLine*), "Approximately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
