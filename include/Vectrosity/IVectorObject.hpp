// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: VectorLine
  class VectorLine;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: IVectorObject
  class IVectorObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Vectrosity::IVectorObject);
DEFINE_IL2CPP_ARG_TYPE(::Vectrosity::IVectorObject*, "Vectrosity", "IVectorObject");
// Type namespace: Vectrosity
namespace Vectrosity {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Vectrosity.IVectorObject
  // [TokenAttribute] Offset: FFFFFFFF
  class IVectorObject {
    public:
    // public System.Void SetName(System.String name)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetName(::StringW name);
    // public System.Void UpdateVerts()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateVerts();
    // public System.Void UpdateUVs()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateUVs();
    // public System.Void UpdateColors()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateColors();
    // public System.Void UpdateTris()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateTris();
    // public System.Void UpdateNormals()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateNormals();
    // public System.Void UpdateTangents()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateTangents();
    // public System.Void UpdateMeshAttributes()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateMeshAttributes();
    // public System.Void ClearMesh()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ClearMesh();
    // public System.Void Enable(System.Boolean enable)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Enable(bool enable);
    // public System.Void SetVectorLine(Vectrosity.VectorLine vectorLine, UnityEngine.Texture texture, UnityEngine.Material material, System.Boolean useCustomMaterial)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetVectorLine(::Vectrosity::VectorLine* vectorLine, ::UnityEngine::Texture* texture, ::UnityEngine::Material* material, bool useCustomMaterial);
    // public System.Void Destroy()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Destroy();
    // public System.Int32 VertexCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int VertexCount();
  }; // Vectrosity.IVectorObject
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Vectrosity::IVectorObject::SetName
// Il2CppName: SetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::IVectorObject::*)(::StringW)>(&Vectrosity::IVectorObject::SetName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::IVectorObject*), "SetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Vectrosity::IVectorObject::UpdateVerts
// Il2CppName: UpdateVerts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::IVectorObject::*)()>(&Vectrosity::IVectorObject::UpdateVerts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::IVectorObject*), "UpdateVerts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::IVectorObject::UpdateUVs
// Il2CppName: UpdateUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::IVectorObject::*)()>(&Vectrosity::IVectorObject::UpdateUVs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::IVectorObject*), "UpdateUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::IVectorObject::UpdateColors
// Il2CppName: UpdateColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::IVectorObject::*)()>(&Vectrosity::IVectorObject::UpdateColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::IVectorObject*), "UpdateColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::IVectorObject::UpdateTris
// Il2CppName: UpdateTris
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::IVectorObject::*)()>(&Vectrosity::IVectorObject::UpdateTris)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::IVectorObject*), "UpdateTris", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::IVectorObject::UpdateNormals
// Il2CppName: UpdateNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::IVectorObject::*)()>(&Vectrosity::IVectorObject::UpdateNormals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::IVectorObject*), "UpdateNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::IVectorObject::UpdateTangents
// Il2CppName: UpdateTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::IVectorObject::*)()>(&Vectrosity::IVectorObject::UpdateTangents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::IVectorObject*), "UpdateTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::IVectorObject::UpdateMeshAttributes
// Il2CppName: UpdateMeshAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::IVectorObject::*)()>(&Vectrosity::IVectorObject::UpdateMeshAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::IVectorObject*), "UpdateMeshAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::IVectorObject::ClearMesh
// Il2CppName: ClearMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::IVectorObject::*)()>(&Vectrosity::IVectorObject::ClearMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::IVectorObject*), "ClearMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::IVectorObject::Enable
// Il2CppName: Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::IVectorObject::*)(bool)>(&Vectrosity::IVectorObject::Enable)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::IVectorObject*), "Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: Vectrosity::IVectorObject::SetVectorLine
// Il2CppName: SetVectorLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::IVectorObject::*)(::Vectrosity::VectorLine*, ::UnityEngine::Texture*, ::UnityEngine::Material*, bool)>(&Vectrosity::IVectorObject::SetVectorLine)> {
  static const MethodInfo* get() {
    static auto* vectorLine = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* useCustomMaterial = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::IVectorObject*), "SetVectorLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vectorLine, texture, material, useCustomMaterial});
  }
};
// Writing MetadataGetter for method: Vectrosity::IVectorObject::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::IVectorObject::*)()>(&Vectrosity::IVectorObject::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::IVectorObject*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::IVectorObject::VertexCount
// Il2CppName: VertexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vectrosity::IVectorObject::*)()>(&Vectrosity::IVectorObject::VertexCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::IVectorObject*), "VertexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
