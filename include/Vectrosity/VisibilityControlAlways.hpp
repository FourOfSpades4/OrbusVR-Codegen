// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: RefInt
  class RefInt;
  // Forward declaring type: VectorLine
  class VectorLine;
}
// Completed forward declares
// Type namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: VisibilityControlAlways
  class VisibilityControlAlways;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Vectrosity::VisibilityControlAlways);
DEFINE_IL2CPP_ARG_TYPE(::Vectrosity::VisibilityControlAlways*, "Vectrosity", "VisibilityControlAlways");
// Type namespace: Vectrosity
namespace Vectrosity {
  // Size: 0x2A
  #pragma pack(push, 1)
  // Autogenerated type: Vectrosity.VisibilityControlAlways
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: ABC7D8
  class VisibilityControlAlways : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Vectrosity.RefInt m_objectNumber
    // Size: 0x8
    // Offset: 0x18
    ::Vectrosity::RefInt* m_objectNumber;
    // Field size check
    static_assert(sizeof(::Vectrosity::RefInt*) == 0x8);
    // private Vectrosity.VectorLine m_vectorLine
    // Size: 0x8
    // Offset: 0x20
    ::Vectrosity::VectorLine* m_vectorLine;
    // Field size check
    static_assert(sizeof(::Vectrosity::VectorLine*) == 0x8);
    // private System.Boolean m_destroyed
    // Size: 0x1
    // Offset: 0x28
    bool m_destroyed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_dontDestroyLine
    // Size: 0x1
    // Offset: 0x29
    bool m_dontDestroyLine;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Vectrosity.RefInt m_objectNumber
    [[deprecated("Use field access instead!")]] ::Vectrosity::RefInt*& dyn_m_objectNumber();
    // Get instance field reference: private Vectrosity.VectorLine m_vectorLine
    [[deprecated("Use field access instead!")]] ::Vectrosity::VectorLine*& dyn_m_vectorLine();
    // Get instance field reference: private System.Boolean m_destroyed
    [[deprecated("Use field access instead!")]] bool& dyn_m_destroyed();
    // Get instance field reference: private System.Boolean m_dontDestroyLine
    [[deprecated("Use field access instead!")]] bool& dyn_m_dontDestroyLine();
    // public System.Void .ctor()
    // Offset: 0x2814A60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisibilityControlAlways* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Vectrosity::VisibilityControlAlways::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisibilityControlAlways*, creationType>()));
    }
    // public Vectrosity.RefInt get_objectNumber()
    // Offset: 0x2814A6C
    ::Vectrosity::RefInt* get_objectNumber();
    // public System.Void Setup(Vectrosity.VectorLine line)
    // Offset: 0x2814A74
    void Setup(::Vectrosity::VectorLine* line);
    // private System.Void OnDestroy()
    // Offset: 0x2814B20
    void OnDestroy();
    // public System.Void DontDestroyLine()
    // Offset: 0x2814BE8
    void DontDestroyLine();
  }; // Vectrosity.VisibilityControlAlways
  #pragma pack(pop)
  static check_size<sizeof(VisibilityControlAlways), 41 + sizeof(bool)> __Vectrosity_VisibilityControlAlwaysSizeCheck;
  static_assert(sizeof(VisibilityControlAlways) == 0x2A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Vectrosity::VisibilityControlAlways::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Vectrosity::VisibilityControlAlways::get_objectNumber
// Il2CppName: get_objectNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Vectrosity::RefInt* (Vectrosity::VisibilityControlAlways::*)()>(&Vectrosity::VisibilityControlAlways::get_objectNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlAlways*), "get_objectNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VisibilityControlAlways::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VisibilityControlAlways::*)(::Vectrosity::VectorLine*)>(&Vectrosity::VisibilityControlAlways::Setup)> {
  static const MethodInfo* get() {
    static auto* line = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlAlways*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{line});
  }
};
// Writing MetadataGetter for method: Vectrosity::VisibilityControlAlways::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VisibilityControlAlways::*)()>(&Vectrosity::VisibilityControlAlways::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlAlways*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VisibilityControlAlways::DontDestroyLine
// Il2CppName: DontDestroyLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VisibilityControlAlways::*)()>(&Vectrosity::VisibilityControlAlways::DontDestroyLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlAlways*), "DontDestroyLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
