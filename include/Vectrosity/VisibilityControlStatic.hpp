// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: RefInt
  class RefInt;
  // Forward declaring type: VectorLine
  class VectorLine;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: VisibilityControlStatic
  class VisibilityControlStatic;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Vectrosity::VisibilityControlStatic);
DEFINE_IL2CPP_ARG_TYPE(::Vectrosity::VisibilityControlStatic*, "Vectrosity", "VisibilityControlStatic");
// Type namespace: Vectrosity
namespace Vectrosity {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: Vectrosity.VisibilityControlStatic
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: ABC810
  class VisibilityControlStatic : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1
    class $WaitCheck$c__Iterator1;
    public:
    // private Vectrosity.RefInt m_objectNumber
    // Size: 0x8
    // Offset: 0x18
    ::Vectrosity::RefInt* m_objectNumber;
    // Field size check
    static_assert(sizeof(::Vectrosity::RefInt*) == 0x8);
    // private Vectrosity.VectorLine m_vectorLine
    // Size: 0x8
    // Offset: 0x20
    ::Vectrosity::VectorLine* m_vectorLine;
    // Field size check
    static_assert(sizeof(::Vectrosity::VectorLine*) == 0x8);
    // private System.Boolean m_destroyed
    // Size: 0x1
    // Offset: 0x28
    bool m_destroyed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_dontDestroyLine
    // Size: 0x1
    // Offset: 0x29
    bool m_dontDestroyLine;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_dontDestroyLine and: m_originalMatrix
    char __padding3[0x2] = {};
    // private UnityEngine.Matrix4x4 m_originalMatrix
    // Size: 0x40
    // Offset: 0x2C
    ::UnityEngine::Matrix4x4 m_originalMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Vectrosity.RefInt m_objectNumber
    [[deprecated("Use field access instead!")]] ::Vectrosity::RefInt*& dyn_m_objectNumber();
    // Get instance field reference: private Vectrosity.VectorLine m_vectorLine
    [[deprecated("Use field access instead!")]] ::Vectrosity::VectorLine*& dyn_m_vectorLine();
    // Get instance field reference: private System.Boolean m_destroyed
    [[deprecated("Use field access instead!")]] bool& dyn_m_destroyed();
    // Get instance field reference: private System.Boolean m_dontDestroyLine
    [[deprecated("Use field access instead!")]] bool& dyn_m_dontDestroyLine();
    // Get instance field reference: private UnityEngine.Matrix4x4 m_originalMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_m_originalMatrix();
    // public System.Void .ctor()
    // Offset: 0x2814BF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisibilityControlStatic* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Vectrosity::VisibilityControlStatic::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisibilityControlStatic*, creationType>()));
    }
    // public Vectrosity.RefInt get_objectNumber()
    // Offset: 0x2814C00
    ::Vectrosity::RefInt* get_objectNumber();
    // public System.Void Setup(Vectrosity.VectorLine line, System.Boolean makeBounds)
    // Offset: 0x2814C08
    void Setup(::Vectrosity::VectorLine* line, bool makeBounds);
    // private System.Collections.IEnumerator WaitCheck()
    // Offset: 0x2814E58
    ::System::Collections::IEnumerator* WaitCheck();
    // private System.Void OnBecameVisible()
    // Offset: 0x2814ED0
    void OnBecameVisible();
    // private System.Void OnBecameInvisible()
    // Offset: 0x2814F64
    void OnBecameInvisible();
    // private System.Void OnDestroy()
    // Offset: 0x2814F94
    void OnDestroy();
    // public System.Void DontDestroyLine()
    // Offset: 0x281505C
    void DontDestroyLine();
    // public UnityEngine.Matrix4x4 GetMatrix()
    // Offset: 0x2815068
    ::UnityEngine::Matrix4x4 GetMatrix();
  }; // Vectrosity.VisibilityControlStatic
  #pragma pack(pop)
  static check_size<sizeof(VisibilityControlStatic), 44 + sizeof(::UnityEngine::Matrix4x4)> __Vectrosity_VisibilityControlStaticSizeCheck;
  static_assert(sizeof(VisibilityControlStatic) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Vectrosity::VisibilityControlStatic::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Vectrosity::VisibilityControlStatic::get_objectNumber
// Il2CppName: get_objectNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Vectrosity::RefInt* (Vectrosity::VisibilityControlStatic::*)()>(&Vectrosity::VisibilityControlStatic::get_objectNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlStatic*), "get_objectNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VisibilityControlStatic::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VisibilityControlStatic::*)(::Vectrosity::VectorLine*, bool)>(&Vectrosity::VisibilityControlStatic::Setup)> {
  static const MethodInfo* get() {
    static auto* line = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->byval_arg;
    static auto* makeBounds = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlStatic*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{line, makeBounds});
  }
};
// Writing MetadataGetter for method: Vectrosity::VisibilityControlStatic::WaitCheck
// Il2CppName: WaitCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Vectrosity::VisibilityControlStatic::*)()>(&Vectrosity::VisibilityControlStatic::WaitCheck)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlStatic*), "WaitCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VisibilityControlStatic::OnBecameVisible
// Il2CppName: OnBecameVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VisibilityControlStatic::*)()>(&Vectrosity::VisibilityControlStatic::OnBecameVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlStatic*), "OnBecameVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VisibilityControlStatic::OnBecameInvisible
// Il2CppName: OnBecameInvisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VisibilityControlStatic::*)()>(&Vectrosity::VisibilityControlStatic::OnBecameInvisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlStatic*), "OnBecameInvisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VisibilityControlStatic::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VisibilityControlStatic::*)()>(&Vectrosity::VisibilityControlStatic::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlStatic*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VisibilityControlStatic::DontDestroyLine
// Il2CppName: DontDestroyLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VisibilityControlStatic::*)()>(&Vectrosity::VisibilityControlStatic::DontDestroyLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlStatic*), "DontDestroyLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VisibilityControlStatic::GetMatrix
// Il2CppName: GetMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (Vectrosity::VisibilityControlStatic::*)()>(&Vectrosity::VisibilityControlStatic::GetMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlStatic*), "GetMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
