// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Vectrosity.IVectorObject
#include "Vectrosity/IVectorObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Texture
  class Texture;
}
// Forward declaring namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: VectorLine
  class VectorLine;
}
// Completed forward declares
// Type namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: VectorObject3D
  class VectorObject3D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Vectrosity::VectorObject3D);
DEFINE_IL2CPP_ARG_TYPE(::Vectrosity::VectorObject3D*, "Vectrosity", "VectorObject3D");
// Type namespace: Vectrosity
namespace Vectrosity {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: Vectrosity.VectorObject3D
  // [TokenAttribute] Offset: FFFFFFFF
  class VectorObject3D : public ::UnityEngine::MonoBehaviour/*, public ::Vectrosity::IVectorObject*/ {
    public:
    public:
    // private System.Boolean m_updateVerts
    // Size: 0x1
    // Offset: 0x18
    bool m_updateVerts;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_updateUVs
    // Size: 0x1
    // Offset: 0x19
    bool m_updateUVs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_updateColors
    // Size: 0x1
    // Offset: 0x1A
    bool m_updateColors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_updateNormals
    // Size: 0x1
    // Offset: 0x1B
    bool m_updateNormals;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_updateTangents
    // Size: 0x1
    // Offset: 0x1C
    bool m_updateTangents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_updateTris
    // Size: 0x1
    // Offset: 0x1D
    bool m_updateTris;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_updateTris and: m_mesh
    char __padding5[0x2] = {};
    // private UnityEngine.Mesh m_mesh
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Mesh* m_mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private Vectrosity.VectorLine m_vectorLine
    // Size: 0x8
    // Offset: 0x28
    ::Vectrosity::VectorLine* m_vectorLine;
    // Field size check
    static_assert(sizeof(::Vectrosity::VectorLine*) == 0x8);
    // private UnityEngine.Material m_material
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* m_material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Boolean m_useCustomMaterial
    // Size: 0x1
    // Offset: 0x38
    bool m_useCustomMaterial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Vectrosity::IVectorObject
    operator ::Vectrosity::IVectorObject() noexcept {
      return *reinterpret_cast<::Vectrosity::IVectorObject*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean m_updateVerts
    [[deprecated("Use field access instead!")]] bool& dyn_m_updateVerts();
    // Get instance field reference: private System.Boolean m_updateUVs
    [[deprecated("Use field access instead!")]] bool& dyn_m_updateUVs();
    // Get instance field reference: private System.Boolean m_updateColors
    [[deprecated("Use field access instead!")]] bool& dyn_m_updateColors();
    // Get instance field reference: private System.Boolean m_updateNormals
    [[deprecated("Use field access instead!")]] bool& dyn_m_updateNormals();
    // Get instance field reference: private System.Boolean m_updateTangents
    [[deprecated("Use field access instead!")]] bool& dyn_m_updateTangents();
    // Get instance field reference: private System.Boolean m_updateTris
    [[deprecated("Use field access instead!")]] bool& dyn_m_updateTris();
    // Get instance field reference: private UnityEngine.Mesh m_mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_m_mesh();
    // Get instance field reference: private Vectrosity.VectorLine m_vectorLine
    [[deprecated("Use field access instead!")]] ::Vectrosity::VectorLine*& dyn_m_vectorLine();
    // Get instance field reference: private UnityEngine.Material m_material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_material();
    // Get instance field reference: private System.Boolean m_useCustomMaterial
    [[deprecated("Use field access instead!")]] bool& dyn_m_useCustomMaterial();
    // public System.Void .ctor()
    // Offset: 0x2813E10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VectorObject3D* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Vectrosity::VectorObject3D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VectorObject3D*, creationType>()));
    }
    // public System.Void SetVectorLine(Vectrosity.VectorLine vectorLine, UnityEngine.Texture tex, UnityEngine.Material mat, System.Boolean useCustomMaterial)
    // Offset: 0x2813E30
    void SetVectorLine(::Vectrosity::VectorLine* vectorLine, ::UnityEngine::Texture* tex, ::UnityEngine::Material* mat, bool useCustomMaterial);
    // public System.Void Destroy()
    // Offset: 0x2814030
    void Destroy();
    // public System.Void Enable(System.Boolean enable)
    // Offset: 0x28140E4
    void Enable(bool enable);
    // public System.Void SetTexture(UnityEngine.Texture tex)
    // Offset: 0x28141A0
    void SetTexture(::UnityEngine::Texture* tex);
    // public System.Void SetMaterial(UnityEngine.Material mat)
    // Offset: 0x2814230
    void SetMaterial(::UnityEngine::Material* mat);
    // private System.Void SetupMesh()
    // Offset: 0x2813F48
    void SetupMesh();
    // private System.Void LateUpdate()
    // Offset: 0x281430C
    void LateUpdate();
    // private System.Void SetVerts()
    // Offset: 0x2814514
    void SetVerts();
    // public System.Void SetName(System.String name)
    // Offset: 0x2814584
    void SetName(::StringW name);
    // public System.Void UpdateVerts()
    // Offset: 0x2814634
    void UpdateVerts();
    // public System.Void UpdateUVs()
    // Offset: 0x2814640
    void UpdateUVs();
    // public System.Void UpdateColors()
    // Offset: 0x281464C
    void UpdateColors();
    // public System.Void UpdateNormals()
    // Offset: 0x2814658
    void UpdateNormals();
    // public System.Void UpdateTangents()
    // Offset: 0x2814664
    void UpdateTangents();
    // public System.Void UpdateTris()
    // Offset: 0x2814670
    void UpdateTris();
    // public System.Void UpdateMeshAttributes()
    // Offset: 0x281467C
    void UpdateMeshAttributes();
    // public System.Void ClearMesh()
    // Offset: 0x28146C8
    void ClearMesh();
    // public System.Int32 VertexCount()
    // Offset: 0x2814764
    int VertexCount();
  }; // Vectrosity.VectorObject3D
  #pragma pack(pop)
  static check_size<sizeof(VectorObject3D), 56 + sizeof(bool)> __Vectrosity_VectorObject3DSizeCheck;
  static_assert(sizeof(VectorObject3D) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::SetVectorLine
// Il2CppName: SetVectorLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)(::Vectrosity::VectorLine*, ::UnityEngine::Texture*, ::UnityEngine::Material*, bool)>(&Vectrosity::VectorObject3D::SetVectorLine)> {
  static const MethodInfo* get() {
    static auto* vectorLine = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->byval_arg;
    static auto* tex = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* useCustomMaterial = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "SetVectorLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vectorLine, tex, mat, useCustomMaterial});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)()>(&Vectrosity::VectorObject3D::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::Enable
// Il2CppName: Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)(bool)>(&Vectrosity::VectorObject3D::Enable)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::SetTexture
// Il2CppName: SetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)(::UnityEngine::Texture*)>(&Vectrosity::VectorObject3D::SetTexture)> {
  static const MethodInfo* get() {
    static auto* tex = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "SetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tex});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::SetMaterial
// Il2CppName: SetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)(::UnityEngine::Material*)>(&Vectrosity::VectorObject3D::SetMaterial)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "SetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::SetupMesh
// Il2CppName: SetupMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)()>(&Vectrosity::VectorObject3D::SetupMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "SetupMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)()>(&Vectrosity::VectorObject3D::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::SetVerts
// Il2CppName: SetVerts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)()>(&Vectrosity::VectorObject3D::SetVerts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "SetVerts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::SetName
// Il2CppName: SetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)(::StringW)>(&Vectrosity::VectorObject3D::SetName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "SetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::UpdateVerts
// Il2CppName: UpdateVerts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)()>(&Vectrosity::VectorObject3D::UpdateVerts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "UpdateVerts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::UpdateUVs
// Il2CppName: UpdateUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)()>(&Vectrosity::VectorObject3D::UpdateUVs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "UpdateUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::UpdateColors
// Il2CppName: UpdateColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)()>(&Vectrosity::VectorObject3D::UpdateColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "UpdateColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::UpdateNormals
// Il2CppName: UpdateNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)()>(&Vectrosity::VectorObject3D::UpdateNormals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "UpdateNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::UpdateTangents
// Il2CppName: UpdateTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)()>(&Vectrosity::VectorObject3D::UpdateTangents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "UpdateTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::UpdateTris
// Il2CppName: UpdateTris
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)()>(&Vectrosity::VectorObject3D::UpdateTris)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "UpdateTris", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::UpdateMeshAttributes
// Il2CppName: UpdateMeshAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)()>(&Vectrosity::VectorObject3D::UpdateMeshAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "UpdateMeshAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::ClearMesh
// Il2CppName: ClearMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject3D::*)()>(&Vectrosity::VectorObject3D::ClearMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "ClearMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject3D::VertexCount
// Il2CppName: VertexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vectrosity::VectorObject3D::*)()>(&Vectrosity::VectorObject3D::VertexCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject3D*), "VertexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
