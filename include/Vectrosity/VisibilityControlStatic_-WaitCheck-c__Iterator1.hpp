// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Vectrosity.VisibilityControlStatic
#include "Vectrosity/VisibilityControlStatic.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1);
DEFINE_IL2CPP_ARG_TYPE(::Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1*, "Vectrosity", "VisibilityControlStatic/<WaitCheck>c__Iterator1");
// Type namespace: Vectrosity
namespace Vectrosity {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Vectrosity.VisibilityControlStatic/<WaitCheck>c__Iterator1
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: ABC848
  class VisibilityControlStatic::$WaitCheck$c__Iterator1 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
    public:
    public:
    // System.Int32 $PC
    // Size: 0x4
    // Offset: 0x10
    int $PC;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $PC and: $current
    char __padding0[0x4] = {};
    // System.Object $current
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* $current;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // Vectrosity.VisibilityControlStatic <>f__this
    // Size: 0x8
    // Offset: 0x20
    ::Vectrosity::VisibilityControlStatic* $$f__this;
    // Field size check
    static_assert(sizeof(::Vectrosity::VisibilityControlStatic*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
    }
    // Get instance field reference: System.Int32 $PC
    [[deprecated("Use field access instead!")]] int& dyn_$PC();
    // Get instance field reference: System.Object $current
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$current();
    // Get instance field reference: Vectrosity.VisibilityControlStatic <>f__this
    [[deprecated("Use field access instead!")]] ::Vectrosity::VisibilityControlStatic*& dyn_$$f__this();
    // public System.Void .ctor()
    // Offset: 0x2814EC8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisibilityControlStatic::$WaitCheck$c__Iterator1* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisibilityControlStatic::$WaitCheck$c__Iterator1*, creationType>()));
    }
    // private System.Object System.Collections.Generic.IEnumerator<object>.get_Current()
    // Offset: 0x281508C
    ::Il2CppObject* System_Collections_Generic_IEnumerator$object$_get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x2815094
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Boolean MoveNext()
    // Offset: 0x281509C
    bool MoveNext();
    // public System.Void Dispose()
    // Offset: 0x28151EC
    void Dispose();
    // public System.Void Reset()
    // Offset: 0x28151F8
    void Reset();
  }; // Vectrosity.VisibilityControlStatic/<WaitCheck>c__Iterator1
  #pragma pack(pop)
  static check_size<sizeof(VisibilityControlStatic::$WaitCheck$c__Iterator1), 32 + sizeof(::Vectrosity::VisibilityControlStatic*)> __Vectrosity_VisibilityControlStatic_$WaitCheck$c__Iterator1SizeCheck;
  static_assert(sizeof(VisibilityControlStatic::$WaitCheck$c__Iterator1) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::System_Collections_Generic_IEnumerator$object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::*)()>(&Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::System_Collections_Generic_IEnumerator$object$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1*), "System.Collections.Generic.IEnumerator<object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::*)()>(&Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::*)()>(&Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::*)()>(&Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::*)()>(&Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VisibilityControlStatic::$WaitCheck$c__Iterator1*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
