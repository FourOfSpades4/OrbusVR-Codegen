// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Vectrosity.EndCap
#include "Vectrosity/EndCap.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: CapInfo
  class CapInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Vectrosity::CapInfo);
DEFINE_IL2CPP_ARG_TYPE(::Vectrosity::CapInfo*, "Vectrosity", "CapInfo");
// Type namespace: Vectrosity
namespace Vectrosity {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Vectrosity.CapInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class CapInfo : public ::Il2CppObject {
    public:
    public:
    // public Vectrosity.EndCap capType
    // Size: 0x4
    // Offset: 0x10
    ::Vectrosity::EndCap capType;
    // Field size check
    static_assert(sizeof(::Vectrosity::EndCap) == 0x4);
    // Padding between fields: capType and: texture
    char __padding0[0x4] = {};
    // public UnityEngine.Texture texture
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Texture* texture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public System.Single ratio1
    // Size: 0x4
    // Offset: 0x20
    float ratio1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ratio2
    // Size: 0x4
    // Offset: 0x24
    float ratio2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single offset1
    // Size: 0x4
    // Offset: 0x28
    float offset1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single offset2
    // Size: 0x4
    // Offset: 0x2C
    float offset2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single scale1
    // Size: 0x4
    // Offset: 0x30
    float scale1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single scale2
    // Size: 0x4
    // Offset: 0x34
    float scale2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single[] uvHeights
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<float> uvHeights;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Get instance field reference: public Vectrosity.EndCap capType
    [[deprecated("Use field access instead!")]] ::Vectrosity::EndCap& dyn_capType();
    // Get instance field reference: public UnityEngine.Texture texture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_texture();
    // Get instance field reference: public System.Single ratio1
    [[deprecated("Use field access instead!")]] float& dyn_ratio1();
    // Get instance field reference: public System.Single ratio2
    [[deprecated("Use field access instead!")]] float& dyn_ratio2();
    // Get instance field reference: public System.Single offset1
    [[deprecated("Use field access instead!")]] float& dyn_offset1();
    // Get instance field reference: public System.Single offset2
    [[deprecated("Use field access instead!")]] float& dyn_offset2();
    // Get instance field reference: public System.Single scale1
    [[deprecated("Use field access instead!")]] float& dyn_scale1();
    // Get instance field reference: public System.Single scale2
    [[deprecated("Use field access instead!")]] float& dyn_scale2();
    // Get instance field reference: public System.Single[] uvHeights
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_uvHeights();
  }; // Vectrosity.CapInfo
  #pragma pack(pop)
  static check_size<sizeof(CapInfo), 56 + sizeof(::ArrayW<float>)> __Vectrosity_CapInfoSizeCheck;
  static_assert(sizeof(CapInfo) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
