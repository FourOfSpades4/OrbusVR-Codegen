// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: VectorLine
  class VectorLine;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: LineManager
  class LineManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Vectrosity::LineManager);
DEFINE_IL2CPP_ARG_TYPE(::Vectrosity::LineManager*, "Vectrosity", "LineManager");
// Type namespace: Vectrosity
namespace Vectrosity {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: Vectrosity.LineManager
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: ABC758
  class LineManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Vectrosity::LineManager::$DisableLine$c__Iterator0
    class $DisableLine$c__Iterator0;
    public:
    // private System.Boolean destroyed
    // Size: 0x1
    // Offset: 0x18
    bool destroyed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.Collections.Generic.List`1<Vectrosity.VectorLine> lines
    static ::System::Collections::Generic::List_1<::Vectrosity::VectorLine*>* _get_lines();
    // Set static field: static private System.Collections.Generic.List`1<Vectrosity.VectorLine> lines
    static void _set_lines(::System::Collections::Generic::List_1<::Vectrosity::VectorLine*>* value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Transform> transforms
    static ::System::Collections::Generic::List_1<::UnityEngine::Transform*>* _get_transforms();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Transform> transforms
    static void _set_transforms(::System::Collections::Generic::List_1<::UnityEngine::Transform*>* value);
    // Get static field: static private System.Int32 lineCount
    static int _get_lineCount();
    // Set static field: static private System.Int32 lineCount
    static void _set_lineCount(int value);
    // Get instance field reference: private System.Boolean destroyed
    [[deprecated("Use field access instead!")]] bool& dyn_destroyed();
    // public System.Void .ctor()
    // Offset: 0x28000C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LineManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Vectrosity::LineManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LineManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x28000D4
    static void _cctor();
    // private System.Void Awake()
    // Offset: 0x2800124
    void Awake();
    // private System.Void Initialize()
    // Offset: 0x2800128
    void Initialize();
    // public System.Void AddLine(Vectrosity.VectorLine vectorLine, UnityEngine.Transform thisTransform, System.Single time)
    // Offset: 0x2800204
    void AddLine(::Vectrosity::VectorLine* vectorLine, ::UnityEngine::Transform* thisTransform, float time);
    // public System.Void DisableLine(Vectrosity.VectorLine vectorLine, System.Single time)
    // Offset: 0x28004E0
    void DisableLine(::Vectrosity::VectorLine* vectorLine, float time);
    // private System.Collections.IEnumerator DisableLine(Vectrosity.VectorLine vectorLine, System.Single time, System.Boolean remove)
    // Offset: 0x28003D8
    ::System::Collections::IEnumerator* DisableLine(::Vectrosity::VectorLine* vectorLine, float time, bool remove);
    // private System.Void LateUpdate()
    // Offset: 0x2800518
    void LateUpdate();
    // private System.Void RemoveLine(System.Int32 i)
    // Offset: 0x2801948
    void RemoveLine(int i);
    // public System.Void RemoveLine(Vectrosity.VectorLine vectorLine)
    // Offset: 0x2802090
    void RemoveLine(::Vectrosity::VectorLine* vectorLine);
    // public System.Void DisableIfUnused()
    // Offset: 0x2801FB8
    void DisableIfUnused();
    // public System.Void EnableIfUsed()
    // Offset: 0x280225C
    void EnableIfUsed();
    // public System.Void StartCheckDistance()
    // Offset: 0x2802304
    void StartCheckDistance();
    // private System.Void CheckDistance()
    // Offset: 0x280238C
    void CheckDistance();
    // private System.Void OnDestroy()
    // Offset: 0x2802480
    void OnDestroy();
  }; // Vectrosity.LineManager
  #pragma pack(pop)
  static check_size<sizeof(LineManager), 24 + sizeof(bool)> __Vectrosity_LineManagerSizeCheck;
  static_assert(sizeof(LineManager) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Vectrosity::LineManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Vectrosity::LineManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vectrosity::LineManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::LineManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::LineManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::LineManager::*)()>(&Vectrosity::LineManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::LineManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::LineManager::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::LineManager::*)()>(&Vectrosity::LineManager::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::LineManager*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::LineManager::AddLine
// Il2CppName: AddLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::LineManager::*)(::Vectrosity::VectorLine*, ::UnityEngine::Transform*, float)>(&Vectrosity::LineManager::AddLine)> {
  static const MethodInfo* get() {
    static auto* vectorLine = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->byval_arg;
    static auto* thisTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::LineManager*), "AddLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vectorLine, thisTransform, time});
  }
};
// Writing MetadataGetter for method: Vectrosity::LineManager::DisableLine
// Il2CppName: DisableLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::LineManager::*)(::Vectrosity::VectorLine*, float)>(&Vectrosity::LineManager::DisableLine)> {
  static const MethodInfo* get() {
    static auto* vectorLine = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::LineManager*), "DisableLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vectorLine, time});
  }
};
// Writing MetadataGetter for method: Vectrosity::LineManager::DisableLine
// Il2CppName: DisableLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Vectrosity::LineManager::*)(::Vectrosity::VectorLine*, float, bool)>(&Vectrosity::LineManager::DisableLine)> {
  static const MethodInfo* get() {
    static auto* vectorLine = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* remove = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::LineManager*), "DisableLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vectorLine, time, remove});
  }
};
// Writing MetadataGetter for method: Vectrosity::LineManager::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::LineManager::*)()>(&Vectrosity::LineManager::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::LineManager*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::LineManager::RemoveLine
// Il2CppName: RemoveLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::LineManager::*)(int)>(&Vectrosity::LineManager::RemoveLine)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::LineManager*), "RemoveLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Vectrosity::LineManager::RemoveLine
// Il2CppName: RemoveLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::LineManager::*)(::Vectrosity::VectorLine*)>(&Vectrosity::LineManager::RemoveLine)> {
  static const MethodInfo* get() {
    static auto* vectorLine = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::LineManager*), "RemoveLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vectorLine});
  }
};
// Writing MetadataGetter for method: Vectrosity::LineManager::DisableIfUnused
// Il2CppName: DisableIfUnused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::LineManager::*)()>(&Vectrosity::LineManager::DisableIfUnused)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::LineManager*), "DisableIfUnused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::LineManager::EnableIfUsed
// Il2CppName: EnableIfUsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::LineManager::*)()>(&Vectrosity::LineManager::EnableIfUsed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::LineManager*), "EnableIfUsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::LineManager::StartCheckDistance
// Il2CppName: StartCheckDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::LineManager::*)()>(&Vectrosity::LineManager::StartCheckDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::LineManager*), "StartCheckDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::LineManager::CheckDistance
// Il2CppName: CheckDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::LineManager::*)()>(&Vectrosity::LineManager::CheckDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::LineManager*), "CheckDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::LineManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::LineManager::*)()>(&Vectrosity::LineManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::LineManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
