// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: RefInt
  class RefInt;
  // Forward declaring type: VectorLine
  class VectorLine;
}
// Completed forward declares
// Type namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: BrightnessControl
  class BrightnessControl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Vectrosity::BrightnessControl);
DEFINE_IL2CPP_ARG_TYPE(::Vectrosity::BrightnessControl*, "Vectrosity", "BrightnessControl");
// Type namespace: Vectrosity
namespace Vectrosity {
  // Size: 0x2A
  #pragma pack(push, 1)
  // Autogenerated type: Vectrosity.BrightnessControl
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: ABC720
  class BrightnessControl : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Vectrosity.RefInt m_objectNumber
    // Size: 0x8
    // Offset: 0x18
    ::Vectrosity::RefInt* m_objectNumber;
    // Field size check
    static_assert(sizeof(::Vectrosity::RefInt*) == 0x8);
    // private Vectrosity.VectorLine m_vectorLine
    // Size: 0x8
    // Offset: 0x20
    ::Vectrosity::VectorLine* m_vectorLine;
    // Field size check
    static_assert(sizeof(::Vectrosity::VectorLine*) == 0x8);
    // private System.Boolean m_useLine
    // Size: 0x1
    // Offset: 0x28
    bool m_useLine;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_destroyed
    // Size: 0x1
    // Offset: 0x29
    bool m_destroyed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Vectrosity.RefInt m_objectNumber
    [[deprecated("Use field access instead!")]] ::Vectrosity::RefInt*& dyn_m_objectNumber();
    // Get instance field reference: private Vectrosity.VectorLine m_vectorLine
    [[deprecated("Use field access instead!")]] ::Vectrosity::VectorLine*& dyn_m_vectorLine();
    // Get instance field reference: private System.Boolean m_useLine
    [[deprecated("Use field access instead!")]] bool& dyn_m_useLine();
    // Get instance field reference: private System.Boolean m_destroyed
    [[deprecated("Use field access instead!")]] bool& dyn_m_destroyed();
    // public System.Void .ctor()
    // Offset: 0x27FF30C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BrightnessControl* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Vectrosity::BrightnessControl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BrightnessControl*, creationType>()));
    }
    // public Vectrosity.RefInt get_objectNumber()
    // Offset: 0x27FF318
    ::Vectrosity::RefInt* get_objectNumber();
    // public System.Void Setup(Vectrosity.VectorLine line, System.Boolean m_useLine)
    // Offset: 0x27FF320
    void Setup(::Vectrosity::VectorLine* line, bool m_useLine);
    // public System.Void SetUseLine(System.Boolean useLine)
    // Offset: 0x27FFA78
    void SetUseLine(bool useLine);
    // private System.Void OnBecameVisible()
    // Offset: 0x27FFA84
    void OnBecameVisible();
    // public System.Void OnBecameInvisible()
    // Offset: 0x27FFCBC
    void OnBecameInvisible();
    // private System.Void OnDestroy()
    // Offset: 0x27FFCF8
    void OnDestroy();
  }; // Vectrosity.BrightnessControl
  #pragma pack(pop)
  static check_size<sizeof(BrightnessControl), 41 + sizeof(bool)> __Vectrosity_BrightnessControlSizeCheck;
  static_assert(sizeof(BrightnessControl) == 0x2A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Vectrosity::BrightnessControl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Vectrosity::BrightnessControl::get_objectNumber
// Il2CppName: get_objectNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Vectrosity::RefInt* (Vectrosity::BrightnessControl::*)()>(&Vectrosity::BrightnessControl::get_objectNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::BrightnessControl*), "get_objectNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::BrightnessControl::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::BrightnessControl::*)(::Vectrosity::VectorLine*, bool)>(&Vectrosity::BrightnessControl::Setup)> {
  static const MethodInfo* get() {
    static auto* line = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->byval_arg;
    static auto* m_useLine = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::BrightnessControl*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{line, m_useLine});
  }
};
// Writing MetadataGetter for method: Vectrosity::BrightnessControl::SetUseLine
// Il2CppName: SetUseLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::BrightnessControl::*)(bool)>(&Vectrosity::BrightnessControl::SetUseLine)> {
  static const MethodInfo* get() {
    static auto* useLine = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::BrightnessControl*), "SetUseLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useLine});
  }
};
// Writing MetadataGetter for method: Vectrosity::BrightnessControl::OnBecameVisible
// Il2CppName: OnBecameVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::BrightnessControl::*)()>(&Vectrosity::BrightnessControl::OnBecameVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::BrightnessControl*), "OnBecameVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::BrightnessControl::OnBecameInvisible
// Il2CppName: OnBecameInvisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::BrightnessControl::*)()>(&Vectrosity::BrightnessControl::OnBecameInvisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::BrightnessControl*), "OnBecameInvisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::BrightnessControl::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::BrightnessControl::*)()>(&Vectrosity::BrightnessControl::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::BrightnessControl*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
