// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: VectorLine
  class VectorLine;
  // Forward declaring type: RefInt
  class RefInt;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Bounds
  struct Bounds;
}
// Completed forward declares
// Type namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: VectorManager
  class VectorManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Vectrosity::VectorManager);
DEFINE_IL2CPP_ARG_TYPE(::Vectrosity::VectorManager*, "Vectrosity", "VectorManager");
// Type namespace: Vectrosity
namespace Vectrosity {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Vectrosity.VectorManager
  // [TokenAttribute] Offset: FFFFFFFF
  class VectorManager : public ::Il2CppObject {
    public:
    // Get static field: static public System.Single minBrightnessDistance
    static float _get_minBrightnessDistance();
    // Set static field: static public System.Single minBrightnessDistance
    static void _set_minBrightnessDistance(float value);
    // Get static field: static public System.Single maxBrightnessDistance
    static float _get_maxBrightnessDistance();
    // Set static field: static public System.Single maxBrightnessDistance
    static void _set_maxBrightnessDistance(float value);
    // Get static field: static private System.Int32 brightnessLevels
    static int _get_brightnessLevels();
    // Set static field: static private System.Int32 brightnessLevels
    static void _set_brightnessLevels(int value);
    // Get static field: static public System.Single distanceCheckFrequency
    static float _get_distanceCheckFrequency();
    // Set static field: static public System.Single distanceCheckFrequency
    static void _set_distanceCheckFrequency(float value);
    // Get static field: static private UnityEngine.Color fogColor
    static ::UnityEngine::Color _get_fogColor();
    // Set static field: static private UnityEngine.Color fogColor
    static void _set_fogColor(::UnityEngine::Color value);
    // Get static field: static public System.Boolean useDraw3D
    static bool _get_useDraw3D();
    // Set static field: static public System.Boolean useDraw3D
    static void _set_useDraw3D(bool value);
    // Get static field: static private System.Collections.Generic.List`1<Vectrosity.VectorLine> vectorLines
    static ::System::Collections::Generic::List_1<::Vectrosity::VectorLine*>* _get_vectorLines();
    // Set static field: static private System.Collections.Generic.List`1<Vectrosity.VectorLine> vectorLines
    static void _set_vectorLines(::System::Collections::Generic::List_1<::Vectrosity::VectorLine*>* value);
    // Get static field: static private System.Collections.Generic.List`1<Vectrosity.RefInt> objectNumbers
    static ::System::Collections::Generic::List_1<::Vectrosity::RefInt*>* _get_objectNumbers();
    // Set static field: static private System.Collections.Generic.List`1<Vectrosity.RefInt> objectNumbers
    static void _set_objectNumbers(::System::Collections::Generic::List_1<::Vectrosity::RefInt*>* value);
    // Get static field: static public System.Int32 _arrayCount
    static int _get__arrayCount();
    // Set static field: static public System.Int32 _arrayCount
    static void _set__arrayCount(int value);
    // Get static field: static private System.Collections.Generic.List`1<Vectrosity.VectorLine> vectorLines2
    static ::System::Collections::Generic::List_1<::Vectrosity::VectorLine*>* _get_vectorLines2();
    // Set static field: static private System.Collections.Generic.List`1<Vectrosity.VectorLine> vectorLines2
    static void _set_vectorLines2(::System::Collections::Generic::List_1<::Vectrosity::VectorLine*>* value);
    // Get static field: static private System.Collections.Generic.List`1<Vectrosity.RefInt> objectNumbers2
    static ::System::Collections::Generic::List_1<::Vectrosity::RefInt*>* _get_objectNumbers2();
    // Set static field: static private System.Collections.Generic.List`1<Vectrosity.RefInt> objectNumbers2
    static void _set_objectNumbers2(::System::Collections::Generic::List_1<::Vectrosity::RefInt*>* value);
    // Get static field: static private System.Int32 _arrayCount2
    static int _get__arrayCount2();
    // Set static field: static private System.Int32 _arrayCount2
    static void _set__arrayCount2(int value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Transform> transforms3
    static ::System::Collections::Generic::List_1<::UnityEngine::Transform*>* _get_transforms3();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Transform> transforms3
    static void _set_transforms3(::System::Collections::Generic::List_1<::UnityEngine::Transform*>* value);
    // Get static field: static private System.Collections.Generic.List`1<Vectrosity.VectorLine> vectorLines3
    static ::System::Collections::Generic::List_1<::Vectrosity::VectorLine*>* _get_vectorLines3();
    // Set static field: static private System.Collections.Generic.List`1<Vectrosity.VectorLine> vectorLines3
    static void _set_vectorLines3(::System::Collections::Generic::List_1<::Vectrosity::VectorLine*>* value);
    // Get static field: static private System.Collections.Generic.List`1<System.Int32> oldDistances
    static ::System::Collections::Generic::List_1<int>* _get_oldDistances();
    // Set static field: static private System.Collections.Generic.List`1<System.Int32> oldDistances
    static void _set_oldDistances(::System::Collections::Generic::List_1<int>* value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.Color> colors
    static ::System::Collections::Generic::List_1<::UnityEngine::Color>* _get_colors();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.Color> colors
    static void _set_colors(::System::Collections::Generic::List_1<::UnityEngine::Color>* value);
    // Get static field: static private System.Collections.Generic.List`1<Vectrosity.RefInt> objectNumbers3
    static ::System::Collections::Generic::List_1<::Vectrosity::RefInt*>* _get_objectNumbers3();
    // Set static field: static private System.Collections.Generic.List`1<Vectrosity.RefInt> objectNumbers3
    static void _set_objectNumbers3(::System::Collections::Generic::List_1<::Vectrosity::RefInt*>* value);
    // Get static field: static private System.Int32 _arrayCount3
    static int _get__arrayCount3();
    // Set static field: static private System.Int32 _arrayCount3
    static void _set__arrayCount3(int value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Mesh> meshTable
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Mesh*>* _get_meshTable();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Mesh> meshTable
    static void _set_meshTable(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Mesh*>* value);
    // static private System.Void .cctor()
    // Offset: 0x281187C
    static void _cctor();
    // static public System.Single GetBrightnessValue(UnityEngine.Vector3 pos)
    // Offset: 0x2811920
    static float GetBrightnessValue(::UnityEngine::Vector3 pos);
    // static public System.Int32 get_arrayCount()
    // Offset: 0x280218C
    static int get_arrayCount();
    // static public System.Void VisibilityStaticSetup(Vectrosity.VectorLine line, out Vectrosity.RefInt objectNum)
    // Offset: 0x2811AC0
    static void VisibilityStaticSetup(::Vectrosity::VectorLine* line, ByRef<::Vectrosity::RefInt*> objectNum);
    // static public System.Void VisibilityStaticRemove(System.Int32 objectNumber)
    // Offset: 0x2811C9C
    static void VisibilityStaticRemove(int objectNumber);
    // static public System.Int32 get_arrayCount2()
    // Offset: 0x28021F4
    static int get_arrayCount2();
    // static public System.Void VisibilitySetup(UnityEngine.Transform thisTransform, Vectrosity.VectorLine line, out Vectrosity.RefInt objectNum)
    // Offset: 0x2811ED0
    static void VisibilitySetup(::UnityEngine::Transform* thisTransform, ::Vectrosity::VectorLine* line, ByRef<::Vectrosity::RefInt*> objectNum);
    // static public System.Void VisibilityRemove(System.Int32 objectNumber)
    // Offset: 0x28120B8
    static void VisibilityRemove(int objectNumber);
    // static public System.Void CheckDistanceSetup(UnityEngine.Transform thisTransform, Vectrosity.VectorLine line, UnityEngine.Color color, Vectrosity.RefInt objectNum)
    // Offset: 0x27FF484
    static void CheckDistanceSetup(::UnityEngine::Transform* thisTransform, ::Vectrosity::VectorLine* line, ::UnityEngine::Color color, ::Vectrosity::RefInt* objectNum);
    // static public System.Void DistanceRemove(System.Int32 objectNumber)
    // Offset: 0x27FFDC0
    static void DistanceRemove(int objectNumber);
    // static public System.Void CheckDistance()
    // Offset: 0x28023E8
    static void CheckDistance();
    // static public System.Void SetOldDistance(System.Int32 objectNumber, System.Int32 val)
    // Offset: 0x27FFB48
    static void SetOldDistance(int objectNumber, int val);
    // static public System.Void SetDistanceColor(System.Int32 i)
    // Offset: 0x27FF7A8
    static void SetDistanceColor(int i);
    // static public System.Void DrawArrayLine(System.Int32 i)
    // Offset: 0x28122EC
    static void DrawArrayLine(int i);
    // static public System.Void DrawArrayLine2(System.Int32 i)
    // Offset: 0x281240C
    static void DrawArrayLine2(int i);
    // static public System.Void DrawArrayLines()
    // Offset: 0x2801BC8
    static void DrawArrayLines();
    // static public System.Void DrawArrayLines2()
    // Offset: 0x2801E20
    static void DrawArrayLines2();
    // static public UnityEngine.Bounds GetBounds(Vectrosity.VectorLine line)
    // Offset: 0x281252C
    static ::UnityEngine::Bounds GetBounds(::Vectrosity::VectorLine* line);
    // static public UnityEngine.Bounds GetBounds(System.Collections.Generic.List`1<UnityEngine.Vector3> points3)
    // Offset: 0x2812620
    static ::UnityEngine::Bounds GetBounds(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* points3);
    // static private UnityEngine.Mesh MakeBoundsMesh(UnityEngine.Bounds bounds)
    // Offset: 0x28128CC
    static ::UnityEngine::Mesh* MakeBoundsMesh(::UnityEngine::Bounds bounds);
    // static public System.Void SetupBoundsMesh(UnityEngine.GameObject go, Vectrosity.VectorLine line)
    // Offset: 0x2812F1C
    static void SetupBoundsMesh(::UnityEngine::GameObject* go, ::Vectrosity::VectorLine* line);
  }; // Vectrosity.VectorManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Vectrosity::VectorManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vectrosity::VectorManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::GetBrightnessValue
// Il2CppName: GetBrightnessValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3)>(&Vectrosity::VectorManager::GetBrightnessValue)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "GetBrightnessValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::get_arrayCount
// Il2CppName: get_arrayCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Vectrosity::VectorManager::get_arrayCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "get_arrayCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::VisibilityStaticSetup
// Il2CppName: VisibilityStaticSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Vectrosity::VectorLine*, ByRef<::Vectrosity::RefInt*>)>(&Vectrosity::VectorManager::VisibilityStaticSetup)> {
  static const MethodInfo* get() {
    static auto* line = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->byval_arg;
    static auto* objectNum = &::il2cpp_utils::GetClassFromName("Vectrosity", "RefInt")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "VisibilityStaticSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{line, objectNum});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::VisibilityStaticRemove
// Il2CppName: VisibilityStaticRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Vectrosity::VectorManager::VisibilityStaticRemove)> {
  static const MethodInfo* get() {
    static auto* objectNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "VisibilityStaticRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectNumber});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::get_arrayCount2
// Il2CppName: get_arrayCount2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Vectrosity::VectorManager::get_arrayCount2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "get_arrayCount2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::VisibilitySetup
// Il2CppName: VisibilitySetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ::Vectrosity::VectorLine*, ByRef<::Vectrosity::RefInt*>)>(&Vectrosity::VectorManager::VisibilitySetup)> {
  static const MethodInfo* get() {
    static auto* thisTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* line = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->byval_arg;
    static auto* objectNum = &::il2cpp_utils::GetClassFromName("Vectrosity", "RefInt")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "VisibilitySetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thisTransform, line, objectNum});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::VisibilityRemove
// Il2CppName: VisibilityRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Vectrosity::VectorManager::VisibilityRemove)> {
  static const MethodInfo* get() {
    static auto* objectNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "VisibilityRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectNumber});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::CheckDistanceSetup
// Il2CppName: CheckDistanceSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ::Vectrosity::VectorLine*, ::UnityEngine::Color, ::Vectrosity::RefInt*)>(&Vectrosity::VectorManager::CheckDistanceSetup)> {
  static const MethodInfo* get() {
    static auto* thisTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* line = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* objectNum = &::il2cpp_utils::GetClassFromName("Vectrosity", "RefInt")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "CheckDistanceSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thisTransform, line, color, objectNum});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::DistanceRemove
// Il2CppName: DistanceRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Vectrosity::VectorManager::DistanceRemove)> {
  static const MethodInfo* get() {
    static auto* objectNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "DistanceRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectNumber});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::CheckDistance
// Il2CppName: CheckDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vectrosity::VectorManager::CheckDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "CheckDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::SetOldDistance
// Il2CppName: SetOldDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int)>(&Vectrosity::VectorManager::SetOldDistance)> {
  static const MethodInfo* get() {
    static auto* objectNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "SetOldDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectNumber, val});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::SetDistanceColor
// Il2CppName: SetDistanceColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Vectrosity::VectorManager::SetDistanceColor)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "SetDistanceColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::DrawArrayLine
// Il2CppName: DrawArrayLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Vectrosity::VectorManager::DrawArrayLine)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "DrawArrayLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::DrawArrayLine2
// Il2CppName: DrawArrayLine2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Vectrosity::VectorManager::DrawArrayLine2)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "DrawArrayLine2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::DrawArrayLines
// Il2CppName: DrawArrayLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vectrosity::VectorManager::DrawArrayLines)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "DrawArrayLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::DrawArrayLines2
// Il2CppName: DrawArrayLines2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vectrosity::VectorManager::DrawArrayLines2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "DrawArrayLines2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::GetBounds
// Il2CppName: GetBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (*)(::Vectrosity::VectorLine*)>(&Vectrosity::VectorManager::GetBounds)> {
  static const MethodInfo* get() {
    static auto* line = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "GetBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{line});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::GetBounds
// Il2CppName: GetBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&Vectrosity::VectorManager::GetBounds)> {
  static const MethodInfo* get() {
    static auto* points3 = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "GetBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points3});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::MakeBoundsMesh
// Il2CppName: MakeBoundsMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (*)(::UnityEngine::Bounds)>(&Vectrosity::VectorManager::MakeBoundsMesh)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "MakeBoundsMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorManager::SetupBoundsMesh
// Il2CppName: SetupBoundsMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, ::Vectrosity::VectorLine*)>(&Vectrosity::VectorManager::SetupBoundsMesh)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* line = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorManager*), "SetupBoundsMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go, line});
  }
};
