// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UI.RawImage
#include "UnityEngine/UI/RawImage.hpp"
// Including type: Vectrosity.IVectorObject
#include "Vectrosity/IVectorObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: VectorLine
  class VectorLine;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: VertexHelper
  class VertexHelper;
}
// Completed forward declares
// Type namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: VectorObject2D
  class VectorObject2D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Vectrosity::VectorObject2D);
DEFINE_IL2CPP_ARG_TYPE(::Vectrosity::VectorObject2D*, "Vectrosity", "VectorObject2D");
// Type namespace: Vectrosity
namespace Vectrosity {
  // Size: 0xE0
  #pragma pack(push, 1)
  // Autogenerated type: Vectrosity.VectorObject2D
  // [TokenAttribute] Offset: FFFFFFFF
  class VectorObject2D : public ::UnityEngine::UI::RawImage/*, public ::Vectrosity::IVectorObject*/ {
    public:
    public:
    // private System.Boolean m_updateVerts
    // Size: 0x1
    // Offset: 0xC8
    bool m_updateVerts;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_updateUVs
    // Size: 0x1
    // Offset: 0xC9
    bool m_updateUVs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_updateColors
    // Size: 0x1
    // Offset: 0xCA
    bool m_updateColors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_updateNormals
    // Size: 0x1
    // Offset: 0xCB
    bool m_updateNormals;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_updateTangents
    // Size: 0x1
    // Offset: 0xCC
    bool m_updateTangents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_updateTris
    // Size: 0x1
    // Offset: 0xCD
    bool m_updateTris;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_updateTris and: m_mesh
    char __padding5[0x2] = {};
    // private UnityEngine.Mesh m_mesh
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::Mesh* m_mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // public Vectrosity.VectorLine vectorLine
    // Size: 0x8
    // Offset: 0xD8
    ::Vectrosity::VectorLine* vectorLine;
    // Field size check
    static_assert(sizeof(::Vectrosity::VectorLine*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Vectrosity::IVectorObject
    operator ::Vectrosity::IVectorObject() noexcept {
      return *reinterpret_cast<::Vectrosity::IVectorObject*>(this);
    }
    // Get static field: static private UnityEngine.UI.VertexHelper vertexHelper
    static ::UnityEngine::UI::VertexHelper* _get_vertexHelper();
    // Set static field: static private UnityEngine.UI.VertexHelper vertexHelper
    static void _set_vertexHelper(::UnityEngine::UI::VertexHelper* value);
    // Get instance field reference: private System.Boolean m_updateVerts
    [[deprecated("Use field access instead!")]] bool& dyn_m_updateVerts();
    // Get instance field reference: private System.Boolean m_updateUVs
    [[deprecated("Use field access instead!")]] bool& dyn_m_updateUVs();
    // Get instance field reference: private System.Boolean m_updateColors
    [[deprecated("Use field access instead!")]] bool& dyn_m_updateColors();
    // Get instance field reference: private System.Boolean m_updateNormals
    [[deprecated("Use field access instead!")]] bool& dyn_m_updateNormals();
    // Get instance field reference: private System.Boolean m_updateTangents
    [[deprecated("Use field access instead!")]] bool& dyn_m_updateTangents();
    // Get instance field reference: private System.Boolean m_updateTris
    [[deprecated("Use field access instead!")]] bool& dyn_m_updateTris();
    // Get instance field reference: private UnityEngine.Mesh m_mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_m_mesh();
    // Get instance field reference: public Vectrosity.VectorLine vectorLine
    [[deprecated("Use field access instead!")]] ::Vectrosity::VectorLine*& dyn_vectorLine();
    // public System.Void .ctor()
    // Offset: 0x28132A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VectorObject2D* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Vectrosity::VectorObject2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VectorObject2D*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x28132C0
    static void _cctor();
    // public System.Void SetVectorLine(Vectrosity.VectorLine vectorLine, UnityEngine.Texture tex, UnityEngine.Material mat, System.Boolean useCustomMaterial)
    // Offset: 0x2813310
    void SetVectorLine(::Vectrosity::VectorLine* vectorLine, ::UnityEngine::Texture* tex, ::UnityEngine::Material* mat, bool useCustomMaterial);
    // public System.Void Destroy()
    // Offset: 0x281336C
    void Destroy();
    // public System.Void Enable(System.Boolean enable)
    // Offset: 0x28133D8
    void Enable(bool enable);
    // public System.Void SetTexture(UnityEngine.Texture tex)
    // Offset: 0x2813354
    void SetTexture(::UnityEngine::Texture* tex);
    // public System.Void SetMaterial(UnityEngine.Material mat)
    // Offset: 0x281335C
    void SetMaterial(::UnityEngine::Material* mat);
    // private System.Void SetupMesh()
    // Offset: 0x281363C
    void SetupMesh();
    // private System.Void SetMeshBounds()
    // Offset: 0x28136F8
    void SetMeshBounds();
    // public System.Void SetName(System.String name)
    // Offset: 0x2813B30
    void SetName(::StringW name);
    // public System.Void UpdateVerts()
    // Offset: 0x2813BE0
    void UpdateVerts();
    // public System.Void UpdateUVs()
    // Offset: 0x2813BF8
    void UpdateUVs();
    // public System.Void UpdateColors()
    // Offset: 0x2813C10
    void UpdateColors();
    // public System.Void UpdateNormals()
    // Offset: 0x2813C28
    void UpdateNormals();
    // public System.Void UpdateTangents()
    // Offset: 0x2813C40
    void UpdateTangents();
    // public System.Void UpdateTris()
    // Offset: 0x2813C58
    void UpdateTris();
    // public System.Void UpdateMeshAttributes()
    // Offset: 0x2813C70
    void UpdateMeshAttributes();
    // public System.Void ClearMesh()
    // Offset: 0x2813D30
    void ClearMesh();
    // public System.Int32 VertexCount()
    // Offset: 0x2813DE0
    int VertexCount();
    // protected override System.Void UpdateGeometry()
    // Offset: 0x2813474
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::UpdateGeometry()
    void UpdateGeometry();
    // protected override System.Void OnPopulateMesh(UnityEngine.UI.VertexHelper vh)
    // Offset: 0x281384C
    // Implemented from: UnityEngine.UI.RawImage
    // Base method: System.Void RawImage::OnPopulateMesh(UnityEngine.UI.VertexHelper vh)
    void OnPopulateMesh(::UnityEngine::UI::VertexHelper* vh);
  }; // Vectrosity.VectorObject2D
  #pragma pack(pop)
  static check_size<sizeof(VectorObject2D), 216 + sizeof(::Vectrosity::VectorLine*)> __Vectrosity_VectorObject2DSizeCheck;
  static_assert(sizeof(VectorObject2D) == 0xE0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vectrosity::VectorObject2D::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::SetVectorLine
// Il2CppName: SetVectorLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)(::Vectrosity::VectorLine*, ::UnityEngine::Texture*, ::UnityEngine::Material*, bool)>(&Vectrosity::VectorObject2D::SetVectorLine)> {
  static const MethodInfo* get() {
    static auto* vectorLine = &::il2cpp_utils::GetClassFromName("Vectrosity", "VectorLine")->byval_arg;
    static auto* tex = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* useCustomMaterial = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "SetVectorLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vectorLine, tex, mat, useCustomMaterial});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)()>(&Vectrosity::VectorObject2D::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::Enable
// Il2CppName: Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)(bool)>(&Vectrosity::VectorObject2D::Enable)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::SetTexture
// Il2CppName: SetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)(::UnityEngine::Texture*)>(&Vectrosity::VectorObject2D::SetTexture)> {
  static const MethodInfo* get() {
    static auto* tex = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "SetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tex});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::SetMaterial
// Il2CppName: SetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)(::UnityEngine::Material*)>(&Vectrosity::VectorObject2D::SetMaterial)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "SetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::SetupMesh
// Il2CppName: SetupMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)()>(&Vectrosity::VectorObject2D::SetupMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "SetupMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::SetMeshBounds
// Il2CppName: SetMeshBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)()>(&Vectrosity::VectorObject2D::SetMeshBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "SetMeshBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::SetName
// Il2CppName: SetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)(::StringW)>(&Vectrosity::VectorObject2D::SetName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "SetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::UpdateVerts
// Il2CppName: UpdateVerts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)()>(&Vectrosity::VectorObject2D::UpdateVerts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "UpdateVerts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::UpdateUVs
// Il2CppName: UpdateUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)()>(&Vectrosity::VectorObject2D::UpdateUVs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "UpdateUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::UpdateColors
// Il2CppName: UpdateColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)()>(&Vectrosity::VectorObject2D::UpdateColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "UpdateColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::UpdateNormals
// Il2CppName: UpdateNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)()>(&Vectrosity::VectorObject2D::UpdateNormals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "UpdateNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::UpdateTangents
// Il2CppName: UpdateTangents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)()>(&Vectrosity::VectorObject2D::UpdateTangents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "UpdateTangents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::UpdateTris
// Il2CppName: UpdateTris
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)()>(&Vectrosity::VectorObject2D::UpdateTris)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "UpdateTris", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::UpdateMeshAttributes
// Il2CppName: UpdateMeshAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)()>(&Vectrosity::VectorObject2D::UpdateMeshAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "UpdateMeshAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::ClearMesh
// Il2CppName: ClearMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)()>(&Vectrosity::VectorObject2D::ClearMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "ClearMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::VertexCount
// Il2CppName: VertexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vectrosity::VectorObject2D::*)()>(&Vectrosity::VectorObject2D::VertexCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "VertexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::UpdateGeometry
// Il2CppName: UpdateGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)()>(&Vectrosity::VectorObject2D::UpdateGeometry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "UpdateGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vectrosity::VectorObject2D::OnPopulateMesh
// Il2CppName: OnPopulateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vectrosity::VectorObject2D::*)(::UnityEngine::UI::VertexHelper*)>(&Vectrosity::VectorObject2D::OnPopulateMesh)> {
  static const MethodInfo* get() {
    static auto* vh = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Vectrosity::VectorObject2D*), "OnPopulateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vh});
  }
};
