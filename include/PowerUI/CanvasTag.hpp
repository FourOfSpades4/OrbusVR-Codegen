// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.HtmlTagHandler
#include "PowerUI/HtmlTagHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: CanvasContext2D
  class CanvasContext2D;
  // Forward declaring type: CanvasContext
  class CanvasContext;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: CanvasTag
  class CanvasTag;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::CanvasTag);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::CanvasTag*, "PowerUI", "CanvasTag");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.CanvasTag
  // [TokenAttribute] Offset: FFFFFFFF
  class CanvasTag : public ::PowerUI::HtmlTagHandler {
    public:
    // Writing base type padding for base size: 0x33 to desired offset: 0x38
    char ___base_padding[0x5] = {};
    public:
    // private PowerUI.CanvasContext2D Context2D
    // Size: 0x8
    // Offset: 0x38
    ::PowerUI::CanvasContext2D* Context2D;
    // Field size check
    static_assert(sizeof(::PowerUI::CanvasContext2D*) == 0x8);
    public:
    // Creating conversion operator: operator ::PowerUI::CanvasContext2D*
    constexpr operator ::PowerUI::CanvasContext2D*() const noexcept {
      return Context2D;
    }
    // Get instance field reference: private PowerUI.CanvasContext2D Context2D
    [[deprecated("Use field access instead!")]] ::PowerUI::CanvasContext2D*& dyn_Context2D();
    // public PowerUI.CanvasContext getContext(System.String contextName)
    // Offset: 0xEBE7F8
    ::PowerUI::CanvasContext* getContext(::StringW contextName);
    // public PowerUI.CanvasContext2D get_context2D()
    // Offset: 0xEBE884
    ::PowerUI::CanvasContext2D* get_context2D();
    // public override System.String[] GetTags()
    // Offset: 0xEBE6E4
    // Implemented from: Wrench.TagHandler
    // Base method: System.String[] TagHandler::GetTags()
    ::ArrayW<::StringW> GetTags();
    // public override Wrench.TagHandler GetInstance()
    // Offset: 0xEBE794
    // Implemented from: Wrench.TagHandler
    // Base method: Wrench.TagHandler TagHandler::GetInstance()
    ::Wrench::TagHandler* GetInstance();
    // public override System.Void WidthChanged()
    // Offset: 0xEBE904
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::WidthChanged()
    void WidthChanged();
    // public override System.Void HeightChanged()
    // Offset: 0xEBE914
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::HeightChanged()
    void HeightChanged();
    // public System.Void .ctor()
    // Offset: 0xEBE7F0
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::.ctor()
    // Base method: System.Void TagHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CanvasTag* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::CanvasTag::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CanvasTag*, creationType>()));
    }
  }; // PowerUI.CanvasTag
  #pragma pack(pop)
  static check_size<sizeof(CanvasTag), 56 + sizeof(::PowerUI::CanvasContext2D*)> __PowerUI_CanvasTagSizeCheck;
  static_assert(sizeof(CanvasTag) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::CanvasTag::getContext
// Il2CppName: getContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::CanvasContext* (PowerUI::CanvasTag::*)(::StringW)>(&PowerUI::CanvasTag::getContext)> {
  static const MethodInfo* get() {
    static auto* contextName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasTag*), "getContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contextName});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasTag::get_context2D
// Il2CppName: get_context2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::CanvasContext2D* (PowerUI::CanvasTag::*)()>(&PowerUI::CanvasTag::get_context2D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasTag*), "get_context2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasTag::GetTags
// Il2CppName: GetTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (PowerUI::CanvasTag::*)()>(&PowerUI::CanvasTag::GetTags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasTag*), "GetTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasTag::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (PowerUI::CanvasTag::*)()>(&PowerUI::CanvasTag::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasTag*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasTag::WidthChanged
// Il2CppName: WidthChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasTag::*)()>(&PowerUI::CanvasTag::WidthChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasTag*), "WidthChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasTag::HeightChanged
// Il2CppName: HeightChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasTag::*)()>(&PowerUI::CanvasTag::HeightChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasTag*), "HeightChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasTag::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
