// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.HtmlTagHandler
#include "PowerUI/HtmlTagHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: ImagePackage
  class ImagePackage;
}
// Forward declaring namespace: PowerUI::Css
namespace PowerUI::Css {
  // Forward declaring type: Value
  class Value;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: ImgTag
  class ImgTag;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::ImgTag);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::ImgTag*, "PowerUI", "ImgTag");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.ImgTag
  // [TokenAttribute] Offset: FFFFFFFF
  class ImgTag : public ::PowerUI::HtmlTagHandler {
    public:
    // Writing base type padding for base size: 0x33 to desired offset: 0x34
    char ___base_padding[0x1] = {};
    public:
    // public System.Single AspectRatio
    // Size: 0x4
    // Offset: 0x34
    float AspectRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public PowerUI.ImagePackage Image
    // Size: 0x8
    // Offset: 0x38
    ::PowerUI::ImagePackage* Image;
    // Field size check
    static_assert(sizeof(::PowerUI::ImagePackage*) == 0x8);
    // public PowerUI.Css.Value TagWidth
    // Size: 0x8
    // Offset: 0x40
    ::PowerUI::Css::Value* TagWidth;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::Value*) == 0x8);
    // public PowerUI.Css.Value TagHeight
    // Size: 0x8
    // Offset: 0x48
    ::PowerUI::Css::Value* TagHeight;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::Value*) == 0x8);
    // public System.Single InverseAspectRatio
    // Size: 0x4
    // Offset: 0x50
    float InverseAspectRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single AspectRatio
    [[deprecated("Use field access instead!")]] float& dyn_AspectRatio();
    // Get instance field reference: public PowerUI.ImagePackage Image
    [[deprecated("Use field access instead!")]] ::PowerUI::ImagePackage*& dyn_Image();
    // Get instance field reference: public PowerUI.Css.Value TagWidth
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::Value*& dyn_TagWidth();
    // Get instance field reference: public PowerUI.Css.Value TagHeight
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::Value*& dyn_TagHeight();
    // Get instance field reference: public System.Single InverseAspectRatio
    [[deprecated("Use field access instead!")]] float& dyn_InverseAspectRatio();
    // public override System.String[] GetTags()
    // Offset: 0x1A4DDB4
    // Implemented from: Wrench.TagHandler
    // Base method: System.String[] TagHandler::GetTags()
    ::ArrayW<::StringW> GetTags();
    // public override Wrench.TagHandler GetInstance()
    // Offset: 0x1A4DE64
    // Implemented from: Wrench.TagHandler
    // Base method: Wrench.TagHandler TagHandler::GetInstance()
    ::Wrench::TagHandler* GetInstance();
    // public override System.Boolean SelfClosing()
    // Offset: 0x1A4DEC8
    // Implemented from: Wrench.TagHandler
    // Base method: System.Boolean TagHandler::SelfClosing()
    bool SelfClosing();
    // public override System.Boolean OnAttributeChange(System.String property)
    // Offset: 0x1A4DED0
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Boolean HtmlTagHandler::OnAttributeChange(System.String property)
    bool OnAttributeChange(::StringW property);
    // public override System.Void HeightChanged()
    // Offset: 0x1A4DFF8
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::HeightChanged()
    void HeightChanged();
    // public override System.Void WidthChanged()
    // Offset: 0x1A4E124
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::WidthChanged()
    void WidthChanged();
    // public override System.Void OnLoaded(System.String type)
    // Offset: 0x1A4E250
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::OnLoaded(System.String type)
    void OnLoaded(::StringW type);
    // public System.Void .ctor()
    // Offset: 0x1A4DEC0
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::.ctor()
    // Base method: System.Void TagHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImgTag* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::ImgTag::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImgTag*, creationType>()));
    }
  }; // PowerUI.ImgTag
  #pragma pack(pop)
  static check_size<sizeof(ImgTag), 80 + sizeof(float)> __PowerUI_ImgTagSizeCheck;
  static_assert(sizeof(ImgTag) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::ImgTag::GetTags
// Il2CppName: GetTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (PowerUI::ImgTag::*)()>(&PowerUI::ImgTag::GetTags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImgTag*), "GetTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImgTag::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (PowerUI::ImgTag::*)()>(&PowerUI::ImgTag::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImgTag*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImgTag::SelfClosing
// Il2CppName: SelfClosing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::ImgTag::*)()>(&PowerUI::ImgTag::SelfClosing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImgTag*), "SelfClosing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImgTag::OnAttributeChange
// Il2CppName: OnAttributeChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::ImgTag::*)(::StringW)>(&PowerUI::ImgTag::OnAttributeChange)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImgTag*), "OnAttributeChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: PowerUI::ImgTag::HeightChanged
// Il2CppName: HeightChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImgTag::*)()>(&PowerUI::ImgTag::HeightChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImgTag*), "HeightChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImgTag::WidthChanged
// Il2CppName: WidthChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImgTag::*)()>(&PowerUI::ImgTag::WidthChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImgTag*), "WidthChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImgTag::OnLoaded
// Il2CppName: OnLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImgTag::*)(::StringW)>(&PowerUI::ImgTag::OnLoaded)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImgTag*), "OnLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: PowerUI::ImgTag::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
