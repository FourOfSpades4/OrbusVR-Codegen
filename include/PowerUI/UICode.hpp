// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.Script
#include "Nitro/Script.hpp"
// Including type: Nitro.Void
#include "Nitro/Void.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Element
  class Element;
  // Forward declaring type: Window
  class Window;
  // Forward declaring type: Document
  class Document;
  // Forward declaring type: UITimer
  class UITimer;
}
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: NitroCode
  class NitroCode;
  // Forward declaring type: DynamicMethod`1<T>
  template<typename T>
  class DynamicMethod_1;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: UICode
  class UICode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::UICode);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::UICode*, "PowerUI", "UICode");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.UICode
  // [TokenAttribute] Offset: FFFFFFFF
  class UICode : public ::Nitro::Script {
    public:
    public:
    // public PowerUI.Element This
    // Size: 0x8
    // Offset: 0x10
    ::PowerUI::Element* This;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // public PowerUI.Window window
    // Size: 0x8
    // Offset: 0x18
    ::PowerUI::Window* window;
    // Field size check
    static_assert(sizeof(::PowerUI::Window*) == 0x8);
    // public PowerUI.Document document
    // Size: 0x8
    // Offset: 0x20
    ::PowerUI::Document* document;
    // Field size check
    static_assert(sizeof(::PowerUI::Document*) == 0x8);
    // public Nitro.NitroCode BaseScript
    // Size: 0x8
    // Offset: 0x28
    ::Nitro::NitroCode* BaseScript;
    // Field size check
    static_assert(sizeof(::Nitro::NitroCode*) == 0x8);
    public:
    // Get instance field reference: public PowerUI.Element This
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_This();
    // Get instance field reference: public PowerUI.Window window
    [[deprecated("Use field access instead!")]] ::PowerUI::Window*& dyn_window();
    // Get instance field reference: public PowerUI.Document document
    [[deprecated("Use field access instead!")]] ::PowerUI::Document*& dyn_document();
    // Get instance field reference: public Nitro.NitroCode BaseScript
    [[deprecated("Use field access instead!")]] ::Nitro::NitroCode*& dyn_BaseScript();
    // public System.Void OnWindowLoaded()
    // Offset: 0xE1865C
    void OnWindowLoaded();
    // public System.Void Start()
    // Offset: 0xE18660
    void Start();
    // public System.Void OnWindowClose()
    // Offset: 0xE18664
    void OnWindowClose();
    // public System.Boolean ContainsMethod(System.String methodName)
    // Offset: 0xE18668
    bool ContainsMethod(::StringW methodName);
    // public System.Boolean ContainsField(System.String fieldName)
    // Offset: 0xE187C4
    bool ContainsField(::StringW fieldName);
    // public System.Void alert(System.Object value)
    // Offset: 0xE18870
    void alert(::Il2CppObject* value);
    // public System.Void eval(System.String text)
    // Offset: 0xE1887C
    void eval(::StringW text);
    // public System.String escapeHTML(System.String html)
    // Offset: 0xE188C8
    ::StringW escapeHTML(::StringW html);
    // public System.Int32 parseInt(System.String text)
    // Offset: 0xE18930
    int parseInt(::StringW text);
    // public PowerUI.UITimer setInterval(Nitro.DynamicMethod`1<Nitro.Void> method, System.Int32 ms)
    // Offset: 0xE18974
    ::PowerUI::UITimer* setInterval(::Nitro::DynamicMethod_1<::Nitro::Void>* method, int ms);
    // public PowerUI.UITimer setTimeout(Nitro.DynamicMethod`1<Nitro.Void> method, System.Int32 ms)
    // Offset: 0xE18A3C
    ::PowerUI::UITimer* setTimeout(::Nitro::DynamicMethod_1<::Nitro::Void>* method, int ms);
    // public System.Void clearInterval(PowerUI.UITimer timer)
    // Offset: 0xE18ABC
    void clearInterval(::PowerUI::UITimer* timer);
    // public System.Void .ctor()
    // Offset: 0xE18B28
    // Implemented from: Nitro.Script
    // Base method: System.Void Script::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UICode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::UICode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UICode*, creationType>()));
    }
  }; // PowerUI.UICode
  #pragma pack(pop)
  static check_size<sizeof(UICode), 40 + sizeof(::Nitro::NitroCode*)> __PowerUI_UICodeSizeCheck;
  static_assert(sizeof(UICode) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::UICode::OnWindowLoaded
// Il2CppName: OnWindowLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UICode::*)()>(&PowerUI::UICode::OnWindowLoaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UICode*), "OnWindowLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UICode::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UICode::*)()>(&PowerUI::UICode::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UICode*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UICode::OnWindowClose
// Il2CppName: OnWindowClose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UICode::*)()>(&PowerUI::UICode::OnWindowClose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UICode*), "OnWindowClose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UICode::ContainsMethod
// Il2CppName: ContainsMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::UICode::*)(::StringW)>(&PowerUI::UICode::ContainsMethod)> {
  static const MethodInfo* get() {
    static auto* methodName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UICode*), "ContainsMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{methodName});
  }
};
// Writing MetadataGetter for method: PowerUI::UICode::ContainsField
// Il2CppName: ContainsField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::UICode::*)(::StringW)>(&PowerUI::UICode::ContainsField)> {
  static const MethodInfo* get() {
    static auto* fieldName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UICode*), "ContainsField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fieldName});
  }
};
// Writing MetadataGetter for method: PowerUI::UICode::alert
// Il2CppName: alert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UICode::*)(::Il2CppObject*)>(&PowerUI::UICode::alert)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UICode*), "alert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::UICode::eval
// Il2CppName: eval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UICode::*)(::StringW)>(&PowerUI::UICode::eval)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UICode*), "eval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: PowerUI::UICode::escapeHTML
// Il2CppName: escapeHTML
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::UICode::*)(::StringW)>(&PowerUI::UICode::escapeHTML)> {
  static const MethodInfo* get() {
    static auto* html = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UICode*), "escapeHTML", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{html});
  }
};
// Writing MetadataGetter for method: PowerUI::UICode::parseInt
// Il2CppName: parseInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::UICode::*)(::StringW)>(&PowerUI::UICode::parseInt)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UICode*), "parseInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: PowerUI::UICode::setInterval
// Il2CppName: setInterval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::UITimer* (PowerUI::UICode::*)(::Nitro::DynamicMethod_1<::Nitro::Void>*, int)>(&PowerUI::UICode::setInterval)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Nitro", "DynamicMethod`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Nitro", "Void")})->byval_arg;
    static auto* ms = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UICode*), "setInterval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method, ms});
  }
};
// Writing MetadataGetter for method: PowerUI::UICode::setTimeout
// Il2CppName: setTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::UITimer* (PowerUI::UICode::*)(::Nitro::DynamicMethod_1<::Nitro::Void>*, int)>(&PowerUI::UICode::setTimeout)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Nitro", "DynamicMethod`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Nitro", "Void")})->byval_arg;
    static auto* ms = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UICode*), "setTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method, ms});
  }
};
// Writing MetadataGetter for method: PowerUI::UICode::clearInterval
// Il2CppName: clearInterval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UICode::*)(::PowerUI::UITimer*)>(&PowerUI::UICode::clearInterval)> {
  static const MethodInfo* get() {
    static auto* timer = &::il2cpp_utils::GetClassFromName("PowerUI", "UITimer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UICode*), "clearInterval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timer});
  }
};
// Writing MetadataGetter for method: PowerUI::UICode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
