// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Wrench.TagHandler
#include "Wrench/TagHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Element
  class Element;
  // Forward declaring type: UIEvent
  class UIEvent;
  // Forward declaring type: KeyboardMode
  class KeyboardMode;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: HtmlTagHandler
  class HtmlTagHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::HtmlTagHandler);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::HtmlTagHandler*, "PowerUI", "HtmlTagHandler");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x33
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.HtmlTagHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class HtmlTagHandler : public ::Wrench::TagHandler {
    public:
    public:
    // public System.Boolean IsIsolated
    // Size: 0x1
    // Offset: 0x20
    bool IsIsolated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsIsolated and: Element
    char __padding0[0x7] = {};
    // public PowerUI.Element Element
    // Size: 0x8
    // Offset: 0x28
    ::PowerUI::Element* Element;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // public System.Boolean IgnoreClick
    // Size: 0x1
    // Offset: 0x30
    bool IgnoreClick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean IsFocusable
    // Size: 0x1
    // Offset: 0x31
    bool IsFocusable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean IgnoreSelfClick
    // Size: 0x1
    // Offset: 0x32
    bool IgnoreSelfClick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Boolean IsIsolated
    [[deprecated("Use field access instead!")]] bool& dyn_IsIsolated();
    // Get instance field reference: public PowerUI.Element Element
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_Element();
    // Get instance field reference: public System.Boolean IgnoreClick
    [[deprecated("Use field access instead!")]] bool& dyn_IgnoreClick();
    // Get instance field reference: public System.Boolean IsFocusable
    [[deprecated("Use field access instead!")]] bool& dyn_IsFocusable();
    // Get instance field reference: public System.Boolean IgnoreSelfClick
    [[deprecated("Use field access instead!")]] bool& dyn_IgnoreSelfClick();
    // public System.Void RequestLayout()
    // Offset: 0x1A4A2C4
    void RequestLayout();
    // public System.Boolean Junk()
    // Offset: 0x1A4A314
    bool Junk();
    // public System.Void OnResetAllVariables()
    // Offset: 0x1A4A31C
    void OnResetAllVariables();
    // public System.Void OnResetVariable(System.String name)
    // Offset: 0x1A4A320
    void OnResetVariable(::StringW name);
    // public System.Void OnRenderPass()
    // Offset: 0x1A4A324
    void OnRenderPass();
    // public System.Void HeightChanged()
    // Offset: 0x1A4A328
    void HeightChanged();
    // public System.Void WidthChanged()
    // Offset: 0x1A4A32C
    void WidthChanged();
    // public System.Void OnLayout()
    // Offset: 0x1A4A330
    void OnLayout();
    // public System.Void OnFocus()
    // Offset: 0x1A4A334
    void OnFocus();
    // public System.Void OnBlur()
    // Offset: 0x1A4A338
    void OnBlur();
    // public System.Void OnLoaded(System.String objectLoaded)
    // Offset: 0x1A4A33C
    void OnLoaded(::StringW objectLoaded);
    // public System.Void OnKeyPress(PowerUI.UIEvent pressEvent)
    // Offset: 0x1A4A340
    void OnKeyPress(::PowerUI::UIEvent* pressEvent);
    // public System.Void OnMouseMove(PowerUI.UIEvent moveEvent)
    // Offset: 0x1A4A374
    void OnMouseMove(::PowerUI::UIEvent* moveEvent);
    // public System.Boolean OnClick(PowerUI.UIEvent clickEvent)
    // Offset: 0x1A4A3A8
    bool OnClick(::PowerUI::UIEvent* clickEvent);
    // public PowerUI.KeyboardMode OnShowMobileKeyboard()
    // Offset: 0x1A4A3DC
    ::PowerUI::KeyboardMode* OnShowMobileKeyboard();
    // public System.Void OnChildrenLoaded()
    // Offset: 0x1A4A3E4
    void OnChildrenLoaded();
    // public override System.Boolean OnAttributeChange(System.String property)
    // Offset: 0x1A46C80
    // Implemented from: Wrench.TagHandler
    // Base method: System.Boolean TagHandler::OnAttributeChange(System.String property)
    bool OnAttributeChange(::StringW property);
    // public System.Void .ctor()
    // Offset: 0x1A425E0
    // Implemented from: Wrench.TagHandler
    // Base method: System.Void TagHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HtmlTagHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::HtmlTagHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HtmlTagHandler*, creationType>()));
    }
  }; // PowerUI.HtmlTagHandler
  #pragma pack(pop)
  static check_size<sizeof(HtmlTagHandler), 50 + sizeof(bool)> __PowerUI_HtmlTagHandlerSizeCheck;
  static_assert(sizeof(HtmlTagHandler) == 0x33);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::RequestLayout
// Il2CppName: RequestLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HtmlTagHandler::*)()>(&PowerUI::HtmlTagHandler::RequestLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "RequestLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::Junk
// Il2CppName: Junk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::HtmlTagHandler::*)()>(&PowerUI::HtmlTagHandler::Junk)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "Junk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::OnResetAllVariables
// Il2CppName: OnResetAllVariables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HtmlTagHandler::*)()>(&PowerUI::HtmlTagHandler::OnResetAllVariables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "OnResetAllVariables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::OnResetVariable
// Il2CppName: OnResetVariable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HtmlTagHandler::*)(::StringW)>(&PowerUI::HtmlTagHandler::OnResetVariable)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "OnResetVariable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::OnRenderPass
// Il2CppName: OnRenderPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HtmlTagHandler::*)()>(&PowerUI::HtmlTagHandler::OnRenderPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "OnRenderPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::HeightChanged
// Il2CppName: HeightChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HtmlTagHandler::*)()>(&PowerUI::HtmlTagHandler::HeightChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "HeightChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::WidthChanged
// Il2CppName: WidthChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HtmlTagHandler::*)()>(&PowerUI::HtmlTagHandler::WidthChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "WidthChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::OnLayout
// Il2CppName: OnLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HtmlTagHandler::*)()>(&PowerUI::HtmlTagHandler::OnLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "OnLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::OnFocus
// Il2CppName: OnFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HtmlTagHandler::*)()>(&PowerUI::HtmlTagHandler::OnFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "OnFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::OnBlur
// Il2CppName: OnBlur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HtmlTagHandler::*)()>(&PowerUI::HtmlTagHandler::OnBlur)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "OnBlur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::OnLoaded
// Il2CppName: OnLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HtmlTagHandler::*)(::StringW)>(&PowerUI::HtmlTagHandler::OnLoaded)> {
  static const MethodInfo* get() {
    static auto* objectLoaded = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "OnLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectLoaded});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::OnKeyPress
// Il2CppName: OnKeyPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HtmlTagHandler::*)(::PowerUI::UIEvent*)>(&PowerUI::HtmlTagHandler::OnKeyPress)> {
  static const MethodInfo* get() {
    static auto* pressEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "OnKeyPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pressEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::OnMouseMove
// Il2CppName: OnMouseMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HtmlTagHandler::*)(::PowerUI::UIEvent*)>(&PowerUI::HtmlTagHandler::OnMouseMove)> {
  static const MethodInfo* get() {
    static auto* moveEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "OnMouseMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{moveEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::OnClick
// Il2CppName: OnClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::HtmlTagHandler::*)(::PowerUI::UIEvent*)>(&PowerUI::HtmlTagHandler::OnClick)> {
  static const MethodInfo* get() {
    static auto* clickEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "OnClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clickEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::OnShowMobileKeyboard
// Il2CppName: OnShowMobileKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::KeyboardMode* (PowerUI::HtmlTagHandler::*)()>(&PowerUI::HtmlTagHandler::OnShowMobileKeyboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "OnShowMobileKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::OnChildrenLoaded
// Il2CppName: OnChildrenLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HtmlTagHandler::*)()>(&PowerUI::HtmlTagHandler::OnChildrenLoaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "OnChildrenLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::OnAttributeChange
// Il2CppName: OnAttributeChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::HtmlTagHandler::*)(::StringW)>(&PowerUI::HtmlTagHandler::OnAttributeChange)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HtmlTagHandler*), "OnAttributeChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: PowerUI::HtmlTagHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
