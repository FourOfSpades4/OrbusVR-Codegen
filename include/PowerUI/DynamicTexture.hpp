// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: FilterMode
  struct FilterMode;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: DynamicTexture
  class DynamicTexture;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::DynamicTexture);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::DynamicTexture*, "PowerUI", "DynamicTexture");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.DynamicTexture
  // [TokenAttribute] Offset: FFFFFFFF
  class DynamicTexture : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 Width
    // Size: 0x4
    // Offset: 0x10
    int Width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Height
    // Size: 0x4
    // Offset: 0x14
    int Height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.String Name
    // Size: 0x8
    // Offset: 0x18
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean Refreshing
    // Size: 0x1
    // Offset: 0x20
    bool Refreshing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Refreshing and: Pixels
    char __padding3[0x7] = {};
    // public UnityEngine.Color32[] Pixels
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Color32> Pixels;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color32>) == 0x8);
    // public System.Int32 ResizedWidth
    // Size: 0x4
    // Offset: 0x30
    int ResizedWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ResizedHeight
    // Size: 0x4
    // Offset: 0x34
    int ResizedHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Texture2D Texture
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Texture2D* Texture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    public:
    // Get static field: static public System.Boolean SomethingToUpdate
    static bool _get_SomethingToUpdate();
    // Set static field: static public System.Boolean SomethingToUpdate
    static void _set_SomethingToUpdate(bool value);
    // Get static field: static public System.Collections.Generic.Dictionary`2<System.String,PowerUI.DynamicTexture> Instances
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::DynamicTexture*>* _get_Instances();
    // Set static field: static public System.Collections.Generic.Dictionary`2<System.String,PowerUI.DynamicTexture> Instances
    static void _set_Instances(::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::DynamicTexture*>* value);
    // Get instance field reference: public System.Int32 Width
    [[deprecated("Use field access instead!")]] int& dyn_Width();
    // Get instance field reference: public System.Int32 Height
    [[deprecated("Use field access instead!")]] int& dyn_Height();
    // Get instance field reference: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public System.Boolean Refreshing
    [[deprecated("Use field access instead!")]] bool& dyn_Refreshing();
    // Get instance field reference: public UnityEngine.Color32[] Pixels
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color32>& dyn_Pixels();
    // Get instance field reference: public System.Int32 ResizedWidth
    [[deprecated("Use field access instead!")]] int& dyn_ResizedWidth();
    // Get instance field reference: public System.Int32 ResizedHeight
    [[deprecated("Use field access instead!")]] int& dyn_ResizedHeight();
    // Get instance field reference: private UnityEngine.Texture2D Texture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_Texture();
    // static public PowerUI.DynamicTexture Get(System.String byName)
    // Offset: 0x185A14C
    static ::PowerUI::DynamicTexture* Get(::StringW byName);
    // static public System.Void RemoveAll()
    // Offset: 0x185A1CC
    static void RemoveAll();
    // static public System.Void Update()
    // Offset: 0x185A228
    static void Update();
    // public System.Void .ctor(System.Int32 width, System.Int32 height, System.String name)
    // Offset: 0x185A434
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DynamicTexture* New_ctor(int width, int height, ::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::DynamicTexture::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DynamicTexture*, creationType>(width, height, name)));
    }
    // public System.Void .ctor()
    // Offset: 0x185A644
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DynamicTexture* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::DynamicTexture::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DynamicTexture*, creationType>()));
    }
    // public System.Void ResizeX(System.Int32 width)
    // Offset: 0x185A64C
    void ResizeX(int width);
    // public System.Void ResizeY(System.Int32 height)
    // Offset: 0x185A654
    void ResizeY(int height);
    // public System.Void Resize(System.Int32 width, System.Int32 height)
    // Offset: 0x185A650
    void Resize(int width, int height);
    // public UnityEngine.FilterMode get_FilterMode()
    // Offset: 0x185A658
    ::UnityEngine::FilterMode get_FilterMode();
    // public System.Void set_FilterMode(UnityEngine.FilterMode value)
    // Offset: 0x185A688
    void set_FilterMode(::UnityEngine::FilterMode value);
    // public System.Void Resize(System.Int32 width, System.Int32 height, System.Boolean createIfZero)
    // Offset: 0x185A524
    void Resize(int width, int height, bool createIfZero);
    // public UnityEngine.Texture2D GetTexture()
    // Offset: 0x185A708
    ::UnityEngine::Texture2D* GetTexture();
    // public UnityEngine.Texture2D GetTextureHolder()
    // Offset: 0x185A710
    ::UnityEngine::Texture2D* GetTextureHolder();
    // public System.Void DrawPixel(System.Int32 x, System.Int32 y, UnityEngine.Color32 colour)
    // Offset: 0x185A718
    void DrawPixel(int x, int y, ::UnityEngine::Color32 colour);
    // public System.Void DrawLine(System.Int32 x, System.Int32 y, System.Int32 x2, System.Int32 y2, UnityEngine.Color32 colour)
    // Offset: 0x185A7AC
    void DrawLine(int x, int y, int x2, int y2, ::UnityEngine::Color32 colour);
    // public System.Void DrawCircle(System.Int32 x0, System.Int32 y0, System.Int32 radius, UnityEngine.Color32 colour)
    // Offset: 0x185A8BC
    void DrawCircle(int x0, int y0, int radius, ::UnityEngine::Color32 colour);
    // public System.Void Clear()
    // Offset: 0x185A6C0
    void Clear();
    // public System.Void Clear(UnityEngine.Color32 clearColour)
    // Offset: 0x185AA20
    void Clear(::UnityEngine::Color32 clearColour);
    // public System.Void SetPixel(System.Int32 index, UnityEngine.Color32 colour)
    // Offset: 0x185A74C
    void SetPixel(int index, ::UnityEngine::Color32 colour);
    // public System.Void Refresh()
    // Offset: 0x185AAA8
    void Refresh();
    // private System.Void Redraw()
    // Offset: 0x185A3A4
    void Redraw();
    // public System.Void Flush()
    // Offset: 0x185AB04
    void Flush();
    // public System.Void FlushDirect()
    // Offset: 0x185AB08
    void FlushDirect();
  }; // PowerUI.DynamicTexture
  #pragma pack(pop)
  static check_size<sizeof(DynamicTexture), 56 + sizeof(::UnityEngine::Texture2D*)> __PowerUI_DynamicTextureSizeCheck;
  static_assert(sizeof(DynamicTexture) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::DynamicTexture::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::DynamicTexture* (*)(::StringW)>(&PowerUI::DynamicTexture::Get)> {
  static const MethodInfo* get() {
    static auto* byName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{byName});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::RemoveAll
// Il2CppName: RemoveAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::DynamicTexture::RemoveAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "RemoveAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::DynamicTexture::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::DynamicTexture::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::DynamicTexture::ResizeX
// Il2CppName: ResizeX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicTexture::*)(int)>(&PowerUI::DynamicTexture::ResizeX)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "ResizeX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::ResizeY
// Il2CppName: ResizeY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicTexture::*)(int)>(&PowerUI::DynamicTexture::ResizeY)> {
  static const MethodInfo* get() {
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "ResizeY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{height});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicTexture::*)(int, int)>(&PowerUI::DynamicTexture::Resize)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::get_FilterMode
// Il2CppName: get_FilterMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::FilterMode (PowerUI::DynamicTexture::*)()>(&PowerUI::DynamicTexture::get_FilterMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "get_FilterMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::set_FilterMode
// Il2CppName: set_FilterMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicTexture::*)(::UnityEngine::FilterMode)>(&PowerUI::DynamicTexture::set_FilterMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "set_FilterMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicTexture::*)(int, int, bool)>(&PowerUI::DynamicTexture::Resize)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* createIfZero = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, createIfZero});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::GetTexture
// Il2CppName: GetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (PowerUI::DynamicTexture::*)()>(&PowerUI::DynamicTexture::GetTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "GetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::GetTextureHolder
// Il2CppName: GetTextureHolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (PowerUI::DynamicTexture::*)()>(&PowerUI::DynamicTexture::GetTextureHolder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "GetTextureHolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::DrawPixel
// Il2CppName: DrawPixel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicTexture::*)(int, int, ::UnityEngine::Color32)>(&PowerUI::DynamicTexture::DrawPixel)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colour = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "DrawPixel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, colour});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::DrawLine
// Il2CppName: DrawLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicTexture::*)(int, int, int, int, ::UnityEngine::Color32)>(&PowerUI::DynamicTexture::DrawLine)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colour = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "DrawLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, x2, y2, colour});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::DrawCircle
// Il2CppName: DrawCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicTexture::*)(int, int, int, ::UnityEngine::Color32)>(&PowerUI::DynamicTexture::DrawCircle)> {
  static const MethodInfo* get() {
    static auto* x0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y0 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colour = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "DrawCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x0, y0, radius, colour});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicTexture::*)()>(&PowerUI::DynamicTexture::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicTexture::*)(::UnityEngine::Color32)>(&PowerUI::DynamicTexture::Clear)> {
  static const MethodInfo* get() {
    static auto* clearColour = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clearColour});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::SetPixel
// Il2CppName: SetPixel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicTexture::*)(int, ::UnityEngine::Color32)>(&PowerUI::DynamicTexture::SetPixel)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colour = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "SetPixel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, colour});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicTexture::*)()>(&PowerUI::DynamicTexture::Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::Redraw
// Il2CppName: Redraw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicTexture::*)()>(&PowerUI::DynamicTexture::Redraw)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "Redraw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicTexture::*)()>(&PowerUI::DynamicTexture::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicTexture::FlushDirect
// Il2CppName: FlushDirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicTexture::*)()>(&PowerUI::DynamicTexture::FlushDirect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicTexture*), "FlushDirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
