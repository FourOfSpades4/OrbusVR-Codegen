// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: FilePath
  class FilePath;
  // Forward declaring type: OnDataReady
  class OnDataReady;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: DataPackage
  class DataPackage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::DataPackage);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::DataPackage*, "PowerUI", "DataPackage");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.DataPackage
  // [TokenAttribute] Offset: FFFFFFFF
  class DataPackage : public ::Il2CppObject {
    public:
    public:
    // public System.Byte[] Data
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint8_t> Data;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.String Error
    // Size: 0x8
    // Offset: 0x18
    ::StringW Error;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public PowerUI.FilePath File
    // Size: 0x8
    // Offset: 0x20
    ::PowerUI::FilePath* File;
    // Field size check
    static_assert(sizeof(::PowerUI::FilePath*) == 0x8);
    // public System.String FileType
    // Size: 0x8
    // Offset: 0x28
    ::StringW FileType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Object ExtraData
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppObject* ExtraData;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADEDE4
    // private PowerUI.OnDataReady Ready
    // Size: 0x8
    // Offset: 0x38
    ::PowerUI::OnDataReady* Ready;
    // Field size check
    static_assert(sizeof(::PowerUI::OnDataReady*) == 0x8);
    public:
    // Get instance field reference: public System.Byte[] Data
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_Data();
    // Get instance field reference: public System.String Error
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Error();
    // Get instance field reference: public PowerUI.FilePath File
    [[deprecated("Use field access instead!")]] ::PowerUI::FilePath*& dyn_File();
    // Get instance field reference: public System.String FileType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_FileType();
    // Get instance field reference: public System.Object ExtraData
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_ExtraData();
    // Get instance field reference: private PowerUI.OnDataReady Ready
    [[deprecated("Use field access instead!")]] ::PowerUI::OnDataReady*& dyn_Ready();
    // public System.Void add_Ready(PowerUI.OnDataReady value)
    // Offset: 0x1853D6C
    void add_Ready(::PowerUI::OnDataReady* value);
    // public System.Void remove_Ready(PowerUI.OnDataReady value)
    // Offset: 0x1853E58
    void remove_Ready(::PowerUI::OnDataReady* value);
    // public System.Void .ctor(System.String src, System.String relativeTo)
    // Offset: 0x184BBC8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DataPackage* New_ctor(::StringW src, ::StringW relativeTo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::DataPackage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DataPackage*, creationType>(src, relativeTo)));
    }
    // public System.Void Get(PowerUI.OnDataReady ready)
    // Offset: 0x184BC08
    void Get(::PowerUI::OnDataReady* ready);
    // public System.String get_Url()
    // Offset: 0x184BFA0
    ::StringW get_Url();
    // private System.Void SetPath(System.String src, System.String relativeTo)
    // Offset: 0x1853F44
    void SetPath(::StringW src, ::StringW relativeTo);
    // public System.Void GotData(System.Byte[] data)
    // Offset: 0x1854014
    void GotData(::ArrayW<uint8_t> data);
    // public System.Void GotData(System.Byte[] data, System.String error)
    // Offset: 0x1853FF4
    void GotData(::ArrayW<uint8_t> data, ::StringW error);
    // public System.Boolean get_Ok()
    // Offset: 0x1854034
    bool get_Ok();
    // public System.Boolean get_Errored()
    // Offset: 0x184BF90
    bool get_Errored();
  }; // PowerUI.DataPackage
  #pragma pack(pop)
  static check_size<sizeof(DataPackage), 56 + sizeof(::PowerUI::OnDataReady*)> __PowerUI_DataPackageSizeCheck;
  static_assert(sizeof(DataPackage) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::DataPackage::add_Ready
// Il2CppName: add_Ready
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DataPackage::*)(::PowerUI::OnDataReady*)>(&PowerUI::DataPackage::add_Ready)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDataReady")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DataPackage*), "add_Ready", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::DataPackage::remove_Ready
// Il2CppName: remove_Ready
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DataPackage::*)(::PowerUI::OnDataReady*)>(&PowerUI::DataPackage::remove_Ready)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDataReady")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DataPackage*), "remove_Ready", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::DataPackage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::DataPackage::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DataPackage::*)(::PowerUI::OnDataReady*)>(&PowerUI::DataPackage::Get)> {
  static const MethodInfo* get() {
    static auto* ready = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDataReady")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DataPackage*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ready});
  }
};
// Writing MetadataGetter for method: PowerUI::DataPackage::get_Url
// Il2CppName: get_Url
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::DataPackage::*)()>(&PowerUI::DataPackage::get_Url)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DataPackage*), "get_Url", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DataPackage::SetPath
// Il2CppName: SetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DataPackage::*)(::StringW, ::StringW)>(&PowerUI::DataPackage::SetPath)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DataPackage*), "SetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, relativeTo});
  }
};
// Writing MetadataGetter for method: PowerUI::DataPackage::GotData
// Il2CppName: GotData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DataPackage::*)(::ArrayW<uint8_t>)>(&PowerUI::DataPackage::GotData)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DataPackage*), "GotData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: PowerUI::DataPackage::GotData
// Il2CppName: GotData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DataPackage::*)(::ArrayW<uint8_t>, ::StringW)>(&PowerUI::DataPackage::GotData)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DataPackage*), "GotData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, error});
  }
};
// Writing MetadataGetter for method: PowerUI::DataPackage::get_Ok
// Il2CppName: get_Ok
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::DataPackage::*)()>(&PowerUI::DataPackage::get_Ok)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DataPackage*), "get_Ok", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DataPackage::get_Errored
// Il2CppName: get_Errored
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::DataPackage::*)()>(&PowerUI::DataPackage::get_Errored)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DataPackage*), "get_Errored", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
