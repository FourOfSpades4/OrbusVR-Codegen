// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: ImageCache
  class ImageCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::ImageCache);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::ImageCache*, "PowerUI", "ImageCache");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.ImageCache
  // [TokenAttribute] Offset: FFFFFFFF
  class ImageCache : public ::Il2CppObject {
    public:
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Texture> Lookup
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Texture*>* _get_Lookup();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Texture> Lookup
    static void _set_Lookup(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::Texture*>* value);
    // static public System.Void Add(System.String address, UnityEngine.Texture image)
    // Offset: 0x1A4C4B0
    static void Add(::StringW address, ::UnityEngine::Texture* image);
    // static public UnityEngine.Texture Get(System.String address)
    // Offset: 0x1A4C54C
    static ::UnityEngine::Texture* Get(::StringW address);
    // static public System.Void Remove(System.String address)
    // Offset: 0x1A4C5F0
    static void Remove(::StringW address);
    // static public System.Void Clear()
    // Offset: 0x1A4C67C
    static void Clear();
    // static private System.Void .cctor()
    // Offset: 0x1A4C700
    static void _cctor();
  }; // PowerUI.ImageCache
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::ImageCache::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::UnityEngine::Texture*)>(&PowerUI::ImageCache::Add)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* image = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImageCache*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, image});
  }
};
// Writing MetadataGetter for method: PowerUI::ImageCache::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture* (*)(::StringW)>(&PowerUI::ImageCache::Get)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImageCache*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address});
  }
};
// Writing MetadataGetter for method: PowerUI::ImageCache::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&PowerUI::ImageCache::Remove)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImageCache*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address});
  }
};
// Writing MetadataGetter for method: PowerUI::ImageCache::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::ImageCache::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImageCache*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImageCache::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::ImageCache::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImageCache*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
