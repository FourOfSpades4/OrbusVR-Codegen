// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Blaze.AtlasEntity
#include "Blaze/AtlasEntity.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: SPA
  class SPA;
  // Forward declaring type: FilePath
  class FilePath;
  // Forward declaring type: SPAInstance
  class SPAInstance;
  // Forward declaring type: DynamicTexture
  class DynamicTexture;
  // Forward declaring type: OnImageReady
  class OnImageReady;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: TextureAtlas
  class TextureAtlas;
  // Forward declaring type: AtlasLocation
  class AtlasLocation;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: ImagePackage
  class ImagePackage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::ImagePackage);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::ImagePackage*, "PowerUI", "ImagePackage");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.ImagePackage
  // [TokenAttribute] Offset: FFFFFFFF
  class ImagePackage : public ::Il2CppObject/*, public ::Blaze::AtlasEntity*/ {
    public:
    public:
    // public PowerUI.SPA SPAFile
    // Size: 0x8
    // Offset: 0x10
    ::PowerUI::SPA* SPAFile;
    // Field size check
    static_assert(sizeof(::PowerUI::SPA*) == 0x8);
    // public System.Boolean IsVideo
    // Size: 0x1
    // Offset: 0x18
    bool IsVideo;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsVideo and: Error
    char __padding1[0x7] = {};
    // public System.String Error
    // Size: 0x8
    // Offset: 0x20
    ::StringW Error;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public PowerUI.FilePath File
    // Size: 0x8
    // Offset: 0x28
    ::PowerUI::FilePath* File;
    // Field size check
    static_assert(sizeof(::PowerUI::FilePath*) == 0x8);
    // public System.Boolean Animated
    // Size: 0x1
    // Offset: 0x30
    bool Animated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean IsDynamic
    // Size: 0x1
    // Offset: 0x31
    bool IsDynamic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsDynamic and: FileType
    char __padding5[0x6] = {};
    // public System.String FileType
    // Size: 0x8
    // Offset: 0x38
    ::StringW FileType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Texture Image
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Texture* Image;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public System.Object ExtraData
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppObject* ExtraData;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public PowerUI.SPAInstance Animation
    // Size: 0x8
    // Offset: 0x50
    ::PowerUI::SPAInstance* Animation;
    // Field size check
    static_assert(sizeof(::PowerUI::SPAInstance*) == 0x8);
    // public System.Boolean PixelPerfect
    // Size: 0x1
    // Offset: 0x58
    bool PixelPerfect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: PixelPerfect and: VideoMaterial
    char __padding10[0x7] = {};
    // private UnityEngine.Material _VideoMaterial
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Material* VideoMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public PowerUI.DynamicTexture DynamicImage
    // Size: 0x8
    // Offset: 0x68
    ::PowerUI::DynamicTexture* DynamicImage;
    // Field size check
    static_assert(sizeof(::PowerUI::DynamicTexture*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADEDF4
    // private PowerUI.OnImageReady ImageReady
    // Size: 0x8
    // Offset: 0x70
    ::PowerUI::OnImageReady* ImageReady;
    // Field size check
    static_assert(sizeof(::PowerUI::OnImageReady*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Blaze::AtlasEntity
    operator ::Blaze::AtlasEntity() noexcept {
      return *reinterpret_cast<::Blaze::AtlasEntity*>(this);
    }
    // Get instance field reference: public PowerUI.SPA SPAFile
    [[deprecated("Use field access instead!")]] ::PowerUI::SPA*& dyn_SPAFile();
    // Get instance field reference: public System.Boolean IsVideo
    [[deprecated("Use field access instead!")]] bool& dyn_IsVideo();
    // Get instance field reference: public System.String Error
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Error();
    // Get instance field reference: public PowerUI.FilePath File
    [[deprecated("Use field access instead!")]] ::PowerUI::FilePath*& dyn_File();
    // Get instance field reference: public System.Boolean Animated
    [[deprecated("Use field access instead!")]] bool& dyn_Animated();
    // Get instance field reference: public System.Boolean IsDynamic
    [[deprecated("Use field access instead!")]] bool& dyn_IsDynamic();
    // Get instance field reference: public System.String FileType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_FileType();
    // Get instance field reference: public UnityEngine.Texture Image
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_Image();
    // Get instance field reference: public System.Object ExtraData
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_ExtraData();
    // Get instance field reference: public PowerUI.SPAInstance Animation
    [[deprecated("Use field access instead!")]] ::PowerUI::SPAInstance*& dyn_Animation();
    // Get instance field reference: public System.Boolean PixelPerfect
    [[deprecated("Use field access instead!")]] bool& dyn_PixelPerfect();
    // Get instance field reference: private UnityEngine.Material _VideoMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__VideoMaterial();
    // Get instance field reference: public PowerUI.DynamicTexture DynamicImage
    [[deprecated("Use field access instead!")]] ::PowerUI::DynamicTexture*& dyn_DynamicImage();
    // Get instance field reference: private PowerUI.OnImageReady ImageReady
    [[deprecated("Use field access instead!")]] ::PowerUI::OnImageReady*& dyn_ImageReady();
    // public System.Void add_ImageReady(PowerUI.OnImageReady value)
    // Offset: 0x1A4CCD8
    void add_ImageReady(::PowerUI::OnImageReady* value);
    // public System.Void remove_ImageReady(PowerUI.OnImageReady value)
    // Offset: 0x1A4CDC4
    void remove_ImageReady(::PowerUI::OnImageReady* value);
    // public System.Void .ctor(System.String src, System.String relativeTo)
    // Offset: 0x1A4CEB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImagePackage* New_ctor(::StringW src, ::StringW relativeTo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::ImagePackage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImagePackage*, creationType>(src, relativeTo)));
    }
    // public System.Void .ctor(System.String src, System.String relativeTo, System.Boolean useResolution)
    // Offset: 0x1A4CFD4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImagePackage* New_ctor(::StringW src, ::StringW relativeTo, bool useResolution) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::ImagePackage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImagePackage*, creationType>(src, relativeTo, useResolution)));
    }
    // public System.Void .ctor(UnityEngine.Texture image)
    // Offset: 0x1A4D024
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImagePackage* New_ctor(::UnityEngine::Texture* image) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::ImagePackage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImagePackage*, creationType>(image)));
    }
    // public System.Void .ctor(PowerUI.DynamicTexture image)
    // Offset: 0x1A4D088
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImagePackage* New_ctor(::PowerUI::DynamicTexture* image) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::ImagePackage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImagePackage*, creationType>(image)));
    }
    // public UnityEngine.Material get_VideoMaterial()
    // Offset: 0x1A4D10C
    ::UnityEngine::Material* get_VideoMaterial();
    // public UnityEngine.Material get_ImageMaterial()
    // Offset: 0x1A4D110
    ::UnityEngine::Material* get_ImageMaterial();
    // public System.String get_Url()
    // Offset: 0x1A4D2AC
    ::StringW get_Url();
    // public System.Boolean MultiThreadDraw()
    // Offset: 0x1A4D2D8
    bool MultiThreadDraw();
    // public System.Void GetDimensionsOnAtlas(out System.Int32 width, out System.Int32 height)
    // Offset: 0x1A4D2E0
    void GetDimensionsOnAtlas(ByRef<int> width, ByRef<int> height);
    // public System.Boolean DrawToAtlas(Blaze.TextureAtlas atlas, Blaze.AtlasLocation location)
    // Offset: 0x1A4D418
    bool DrawToAtlas(::Blaze::TextureAtlas* atlas, ::Blaze::AtlasLocation* location);
    // public System.Int32 GetAtlasID()
    // Offset: 0x1A4D5A0
    int GetAtlasID();
    // private System.Void SetPath(System.String src, System.String relativeTo, System.Boolean useResolution)
    // Offset: 0x1A4CEFC
    void SetPath(::StringW src, ::StringW relativeTo, bool useResolution);
    // private System.Void SetPath(System.String src, System.String relativeTo)
    // Offset: 0x1A4D080
    void SetPath(::StringW src, ::StringW relativeTo);
    // public System.Void Get(PowerUI.OnImageReady imageReady)
    // Offset: 0x1A4D5D0
    void Get(::PowerUI::OnImageReady* imageReady);
    // public System.Boolean get_Ok()
    // Offset: 0x1A4D740
    bool get_Ok();
    // public System.Boolean get_Errored()
    // Offset: 0x1A4D750
    bool get_Errored();
    // public System.Void GotCached(PowerUI.ImagePackage package)
    // Offset: 0x1A4A984
    void GotCached(::PowerUI::ImagePackage* package);
    // public System.Void GotGraphic(System.String error)
    // Offset: 0x1A4BC24
    void GotGraphic(::StringW error);
    // public System.Void GotGraphic(PowerUI.DynamicTexture image)
    // Offset: 0x1A4D760
    void GotGraphic(::PowerUI::DynamicTexture* image);
    // public System.Void GotGraphic(PowerUI.SPA animation)
    // Offset: 0x1A4BD40
    void GotGraphic(::PowerUI::SPA* animation);
    // public System.Void GotGraphic(UnityEngine.Texture image)
    // Offset: 0x1A4BD94
    void GotGraphic(::UnityEngine::Texture* image);
    // public System.Void GoingOnDisplay()
    // Offset: 0x1A4D804
    void GoingOnDisplay();
    // public System.Void GoingOffDisplay()
    // Offset: 0x1A4D844
    void GoingOffDisplay();
    // private System.Void Clear()
    // Offset: 0x1A4D7B4
    void Clear();
    // public System.Boolean Loaded()
    // Offset: 0x1A4D87C
    bool Loaded();
    // public System.Int32 Width()
    // Offset: 0x1A4D320
    int Width();
    // public System.Int32 Height()
    // Offset: 0x1A4D39C
    int Height();
  }; // PowerUI.ImagePackage
  #pragma pack(pop)
  static check_size<sizeof(ImagePackage), 112 + sizeof(::PowerUI::OnImageReady*)> __PowerUI_ImagePackageSizeCheck;
  static_assert(sizeof(ImagePackage) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::ImagePackage::add_ImageReady
// Il2CppName: add_ImageReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImagePackage::*)(::PowerUI::OnImageReady*)>(&PowerUI::ImagePackage::add_ImageReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnImageReady")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "add_ImageReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::remove_ImageReady
// Il2CppName: remove_ImageReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImagePackage::*)(::PowerUI::OnImageReady*)>(&PowerUI::ImagePackage::remove_ImageReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnImageReady")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "remove_ImageReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::ImagePackage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::ImagePackage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::ImagePackage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::ImagePackage::get_VideoMaterial
// Il2CppName: get_VideoMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (PowerUI::ImagePackage::*)()>(&PowerUI::ImagePackage::get_VideoMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "get_VideoMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::get_ImageMaterial
// Il2CppName: get_ImageMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (PowerUI::ImagePackage::*)()>(&PowerUI::ImagePackage::get_ImageMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "get_ImageMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::get_Url
// Il2CppName: get_Url
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::ImagePackage::*)()>(&PowerUI::ImagePackage::get_Url)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "get_Url", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::MultiThreadDraw
// Il2CppName: MultiThreadDraw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::ImagePackage::*)()>(&PowerUI::ImagePackage::MultiThreadDraw)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "MultiThreadDraw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::GetDimensionsOnAtlas
// Il2CppName: GetDimensionsOnAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImagePackage::*)(ByRef<int>, ByRef<int>)>(&PowerUI::ImagePackage::GetDimensionsOnAtlas)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "GetDimensionsOnAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::DrawToAtlas
// Il2CppName: DrawToAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::ImagePackage::*)(::Blaze::TextureAtlas*, ::Blaze::AtlasLocation*)>(&PowerUI::ImagePackage::DrawToAtlas)> {
  static const MethodInfo* get() {
    static auto* atlas = &::il2cpp_utils::GetClassFromName("Blaze", "TextureAtlas")->byval_arg;
    static auto* location = &::il2cpp_utils::GetClassFromName("Blaze", "AtlasLocation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "DrawToAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{atlas, location});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::GetAtlasID
// Il2CppName: GetAtlasID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::ImagePackage::*)()>(&PowerUI::ImagePackage::GetAtlasID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "GetAtlasID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::SetPath
// Il2CppName: SetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImagePackage::*)(::StringW, ::StringW, bool)>(&PowerUI::ImagePackage::SetPath)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* useResolution = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "SetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, relativeTo, useResolution});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::SetPath
// Il2CppName: SetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImagePackage::*)(::StringW, ::StringW)>(&PowerUI::ImagePackage::SetPath)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "SetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, relativeTo});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImagePackage::*)(::PowerUI::OnImageReady*)>(&PowerUI::ImagePackage::Get)> {
  static const MethodInfo* get() {
    static auto* imageReady = &::il2cpp_utils::GetClassFromName("PowerUI", "OnImageReady")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{imageReady});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::get_Ok
// Il2CppName: get_Ok
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::ImagePackage::*)()>(&PowerUI::ImagePackage::get_Ok)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "get_Ok", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::get_Errored
// Il2CppName: get_Errored
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::ImagePackage::*)()>(&PowerUI::ImagePackage::get_Errored)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "get_Errored", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::GotCached
// Il2CppName: GotCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImagePackage::*)(::PowerUI::ImagePackage*)>(&PowerUI::ImagePackage::GotCached)> {
  static const MethodInfo* get() {
    static auto* package = &::il2cpp_utils::GetClassFromName("PowerUI", "ImagePackage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "GotCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{package});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::GotGraphic
// Il2CppName: GotGraphic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImagePackage::*)(::StringW)>(&PowerUI::ImagePackage::GotGraphic)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "GotGraphic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::GotGraphic
// Il2CppName: GotGraphic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImagePackage::*)(::PowerUI::DynamicTexture*)>(&PowerUI::ImagePackage::GotGraphic)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("PowerUI", "DynamicTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "GotGraphic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::GotGraphic
// Il2CppName: GotGraphic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImagePackage::*)(::PowerUI::SPA*)>(&PowerUI::ImagePackage::GotGraphic)> {
  static const MethodInfo* get() {
    static auto* animation = &::il2cpp_utils::GetClassFromName("PowerUI", "SPA")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "GotGraphic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animation});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::GotGraphic
// Il2CppName: GotGraphic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImagePackage::*)(::UnityEngine::Texture*)>(&PowerUI::ImagePackage::GotGraphic)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "GotGraphic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::GoingOnDisplay
// Il2CppName: GoingOnDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImagePackage::*)()>(&PowerUI::ImagePackage::GoingOnDisplay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "GoingOnDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::GoingOffDisplay
// Il2CppName: GoingOffDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImagePackage::*)()>(&PowerUI::ImagePackage::GoingOffDisplay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "GoingOffDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ImagePackage::*)()>(&PowerUI::ImagePackage::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::Loaded
// Il2CppName: Loaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::ImagePackage::*)()>(&PowerUI::ImagePackage::Loaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "Loaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::Width
// Il2CppName: Width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::ImagePackage::*)()>(&PowerUI::ImagePackage::Width)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "Width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ImagePackage::Height
// Il2CppName: Height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::ImagePackage::*)()>(&PowerUI::ImagePackage::Height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImagePackage*), "Height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
