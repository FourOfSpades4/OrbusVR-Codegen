// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: PowerUI.InputMode
#include "PowerUI/InputMode.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Element
  class Element;
  // Forward declaring type: MousePositionResolver2D
  class MousePositionResolver2D;
  // Forward declaring type: MousePositionResolver3D
  class MousePositionResolver3D;
  // Forward declaring type: UIEvent
  class UIEvent;
  // Forward declaring type: HitResult
  class HitResult;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Input
  class Input;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Input);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Input*, "PowerUI", "Input");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Input
  // [TokenAttribute] Offset: FFFFFFFF
  class Input : public ::Il2CppObject {
    public:
    // Get static field: static public System.String EventName
    static ::StringW _get_EventName();
    // Set static field: static public System.String EventName
    static void _set_EventName(::StringW value);
    // Get static field: static public System.Int32 MouseX
    static int _get_MouseX();
    // Set static field: static public System.Int32 MouseX
    static void _set_MouseX(int value);
    // Get static field: static public System.Int32 MouseY
    static int _get_MouseY();
    // Set static field: static public System.Int32 MouseY
    static void _set_MouseY(int value);
    // Get static field: static public PowerUI.Element Focused
    static ::PowerUI::Element* _get_Focused();
    // Set static field: static public PowerUI.Element Focused
    static void _set_Focused(::PowerUI::Element* value);
    // Get static field: static public PowerUI.Element Focusing
    static ::PowerUI::Element* _get_Focusing();
    // Set static field: static public PowerUI.Element Focusing
    static void _set_Focusing(::PowerUI::Element* value);
    // Get static field: static public UnityEngine.Vector2 MousePosition
    static ::UnityEngine::Vector2 _get_MousePosition();
    // Set static field: static public UnityEngine.Vector2 MousePosition
    static void _set_MousePosition(::UnityEngine::Vector2 value);
    // Get static field: static public UnityEngine.RaycastHit LatestRayHit
    static ::UnityEngine::RaycastHit _get_LatestRayHit();
    // Set static field: static public UnityEngine.RaycastHit LatestRayHit
    static void _set_LatestRayHit(::UnityEngine::RaycastHit value);
    // Get static field: static public UnityEngine.Camera CameraFor3DInput
    static ::UnityEngine::Camera* _get_CameraFor3DInput();
    // Set static field: static public UnityEngine.Camera CameraFor3DInput
    static void _set_CameraFor3DInput(::UnityEngine::Camera* value);
    // Get static field: static public PowerUI.InputMode Mode
    static ::PowerUI::InputMode _get_Mode();
    // Set static field: static public PowerUI.InputMode Mode
    static void _set_Mode(::PowerUI::InputMode value);
    // Get static field: static public PowerUI.MousePositionResolver2D OnResolve2D
    static ::PowerUI::MousePositionResolver2D* _get_OnResolve2D();
    // Set static field: static public PowerUI.MousePositionResolver2D OnResolve2D
    static void _set_OnResolve2D(::PowerUI::MousePositionResolver2D* value);
    // Get static field: static public PowerUI.MousePositionResolver3D OnResolve3D
    static ::PowerUI::MousePositionResolver3D* _get_OnResolve3D();
    // Set static field: static public PowerUI.MousePositionResolver3D OnResolve3D
    static void _set_OnResolve3D(::PowerUI::MousePositionResolver3D* value);
    // Get static field: static public PowerUI.InputMode WorldInputMode
    static ::PowerUI::InputMode _get_WorldInputMode();
    // Set static field: static public PowerUI.InputMode WorldInputMode
    static void _set_WorldInputMode(::PowerUI::InputMode value);
    // Get static field: static public System.Collections.Generic.List`1<PowerUI.Element> MouseOvers
    static ::System::Collections::Generic::List_1<::PowerUI::Element*>* _get_MouseOvers();
    // Set static field: static public System.Collections.Generic.List`1<PowerUI.Element> MouseOvers
    static void _set_MouseOvers(::System::Collections::Generic::List_1<::PowerUI::Element*>* value);
    // Get static field: static public System.Collections.Generic.List`1<PowerUI.Element> LastMouseDown
    static ::System::Collections::Generic::List_1<::PowerUI::Element*>* _get_LastMouseDown();
    // Set static field: static public System.Collections.Generic.List`1<PowerUI.Element> LastMouseDown
    static void _set_LastMouseDown(::System::Collections::Generic::List_1<::PowerUI::Element*>* value);
    // Get static field: static private System.Boolean mouseIsDown
    static bool _get_mouseIsDown();
    // Set static field: static private System.Boolean mouseIsDown
    static void _set_mouseIsDown(bool value);
    // static public System.Boolean get_MouseOverUI()
    // Offset: 0x1A4E4D4
    static bool get_MouseOverUI();
    // static public System.Void Clear()
    // Offset: 0x1A4E564
    static void Clear();
    // static public System.Void ClearMouseOvers(PowerUI.UIEvent mouseEvent, System.Int32 fromIndex)
    // Offset: 0x1A3ED64
    static void ClearMouseOvers(::PowerUI::UIEvent* mouseEvent, int fromIndex);
    // static public System.Void SetMousePosition(UnityEngine.Vector2 position)
    // Offset: 0x1A4E5F8
    static void SetMousePosition(::UnityEngine::Vector2 position);
    // static public System.Void Update()
    // Offset: 0x1A4E6C4
    static void Update();
    // static public System.Boolean OnKeyUp(System.Int32 keyCode, System.Char character)
    // Offset: 0x1A4EEDC
    static bool OnKeyUp(int keyCode, ::Il2CppChar character);
    // static public System.Boolean OnKeyDown(System.Int32 keyCode, System.Char character)
    // Offset: 0x1A4F180
    static bool OnKeyDown(int keyCode, ::Il2CppChar character);
    // static public System.Boolean OnKeyPress(System.Boolean down, System.Char character, System.Int32 keyCode)
    // Offset: 0x1A4EF54
    static bool OnKeyPress(bool down, ::Il2CppChar character, int keyCode);
    // static public System.Boolean OnMouseDown(System.Int32 x, System.Int32 y)
    // Offset: 0x1A4F1F8
    static bool OnMouseDown(int x, int y);
    // static public System.Boolean OnMouseUp(System.Int32 x, System.Int32 y)
    // Offset: 0x1A4FAA0
    static bool OnMouseUp(int x, int y);
    // static private System.Boolean RunClick(System.Int32 x, System.Int32 y, System.Boolean mouseDown, out PowerUI.UIEvent uiEvent)
    // Offset: 0x1A4F328
    static bool RunClick(int x, int y, bool mouseDown, ByRef<::PowerUI::UIEvent*> uiEvent);
    // static public System.Void ClickOn(PowerUI.Element element, PowerUI.UIEvent uiEvent)
    // Offset: 0x1A49B98
    static void ClickOn(::PowerUI::Element* element, ::PowerUI::UIEvent* uiEvent);
    // static public System.Void MouseOn(PowerUI.Element element, PowerUI.UIEvent uiEvent)
    // Offset: 0x1A49DA4
    static void MouseOn(::PowerUI::Element* element, ::PowerUI::UIEvent* uiEvent);
    // static public System.Boolean OnMouseOver(System.Int32 x, System.Int32 y)
    // Offset: 0x1A4E8AC
    static bool OnMouseOver(int x, int y);
    // static public PowerUI.HitResult HandleUIHit(UnityEngine.RaycastHit hit)
    // Offset: 0x1A4FBB0
    static ::PowerUI::HitResult* HandleUIHit(::UnityEngine::RaycastHit hit);
    // static public PowerUI.HitResult HandleWorldUIHit(UnityEngine.RaycastHit hit)
    // Offset: 0x1A4FC9C
    static ::PowerUI::HitResult* HandleWorldUIHit(::UnityEngine::RaycastHit hit);
    // static private System.Void .cctor()
    // Offset: 0x1A4FF04
    static void _cctor();
  }; // PowerUI.Input
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Input::get_MouseOverUI
// Il2CppName: get_MouseOverUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&PowerUI::Input::get_MouseOverUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "get_MouseOverUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::Input::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::ClearMouseOvers
// Il2CppName: ClearMouseOvers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*, int)>(&PowerUI::Input::ClearMouseOvers)> {
  static const MethodInfo* get() {
    static auto* mouseEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    static auto* fromIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "ClearMouseOvers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mouseEvent, fromIndex});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::SetMousePosition
// Il2CppName: SetMousePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector2)>(&PowerUI::Input::SetMousePosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "SetMousePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::Input::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::OnKeyUp
// Il2CppName: OnKeyUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::Il2CppChar)>(&PowerUI::Input::OnKeyUp)> {
  static const MethodInfo* get() {
    static auto* keyCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "OnKeyUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyCode, character});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::OnKeyDown
// Il2CppName: OnKeyDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::Il2CppChar)>(&PowerUI::Input::OnKeyDown)> {
  static const MethodInfo* get() {
    static auto* keyCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "OnKeyDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyCode, character});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::OnKeyPress
// Il2CppName: OnKeyPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool, ::Il2CppChar, int)>(&PowerUI::Input::OnKeyPress)> {
  static const MethodInfo* get() {
    static auto* down = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* keyCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "OnKeyPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{down, character, keyCode});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::OnMouseDown
// Il2CppName: OnMouseDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int)>(&PowerUI::Input::OnMouseDown)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "OnMouseDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::OnMouseUp
// Il2CppName: OnMouseUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int)>(&PowerUI::Input::OnMouseUp)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "OnMouseUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::RunClick
// Il2CppName: RunClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, bool, ByRef<::PowerUI::UIEvent*>)>(&PowerUI::Input::RunClick)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mouseDown = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* uiEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "RunClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, mouseDown, uiEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::ClickOn
// Il2CppName: ClickOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::Element*, ::PowerUI::UIEvent*)>(&PowerUI::Input::ClickOn)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    static auto* uiEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "ClickOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element, uiEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::MouseOn
// Il2CppName: MouseOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::Element*, ::PowerUI::UIEvent*)>(&PowerUI::Input::MouseOn)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    static auto* uiEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "MouseOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element, uiEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::OnMouseOver
// Il2CppName: OnMouseOver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int)>(&PowerUI::Input::OnMouseOver)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "OnMouseOver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::HandleUIHit
// Il2CppName: HandleUIHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::HitResult* (*)(::UnityEngine::RaycastHit)>(&PowerUI::Input::HandleUIHit)> {
  static const MethodInfo* get() {
    static auto* hit = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "HandleUIHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hit});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::HandleWorldUIHit
// Il2CppName: HandleWorldUIHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::HitResult* (*)(::UnityEngine::RaycastHit)>(&PowerUI::Input::HandleWorldUIHit)> {
  static const MethodInfo* get() {
    static auto* hit = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), "HandleWorldUIHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hit});
  }
};
// Writing MetadataGetter for method: PowerUI::Input::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::Input::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Input*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
