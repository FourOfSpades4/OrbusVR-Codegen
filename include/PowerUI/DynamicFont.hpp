// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: FontFamily
  class FontFamily;
  // Forward declaring type: Glyph
  class Glyph;
  // Forward declaring type: FontFaceFlags
  struct FontFaceFlags;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: DynamicFont
  class DynamicFont;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::DynamicFont);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::DynamicFont*, "PowerUI", "DynamicFont");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.DynamicFont
  // [TokenAttribute] Offset: FFFFFFFF
  class DynamicFont : public ::Il2CppObject {
    public:
    public:
    // public System.String Name
    // Size: 0x8
    // Offset: 0x10
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public InfiniText.FontFamily Family
    // Size: 0x8
    // Offset: 0x18
    ::InfiniText::FontFamily* Family;
    // Field size check
    static_assert(sizeof(::InfiniText::FontFamily*) == 0x8);
    // public System.Single Ascender
    // Size: 0x4
    // Offset: 0x20
    float Ascender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Descender
    // Size: 0x4
    // Offset: 0x24
    float Descender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single LineSize
    // Size: 0x4
    // Offset: 0x28
    float LineSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single StrikeSize
    // Size: 0x4
    // Offset: 0x2C
    float StrikeSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single StrikeOffset
    // Size: 0x4
    // Offset: 0x30
    float StrikeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: StrikeOffset and: Fallback
    char __padding6[0x4] = {};
    // public PowerUI.DynamicFont Fallback
    // Size: 0x8
    // Offset: 0x38
    ::PowerUI::DynamicFont* Fallback;
    // Field size check
    static_assert(sizeof(::PowerUI::DynamicFont*) == 0x8);
    // public System.Single SpaceSize
    // Size: 0x4
    // Offset: 0x40
    float SpaceSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static public PowerUI.DynamicFont DefaultFamily
    static ::PowerUI::DynamicFont* _get_DefaultFamily();
    // Set static field: static public PowerUI.DynamicFont DefaultFamily
    static void _set_DefaultFamily(::PowerUI::DynamicFont* value);
    // Get static field: static public System.String InternalFont
    static ::StringW _get_InternalFont();
    // Set static field: static public System.String InternalFont
    static void _set_InternalFont(::StringW value);
    // Get instance field reference: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public InfiniText.FontFamily Family
    [[deprecated("Use field access instead!")]] ::InfiniText::FontFamily*& dyn_Family();
    // Get instance field reference: public System.Single Ascender
    [[deprecated("Use field access instead!")]] float& dyn_Ascender();
    // Get instance field reference: public System.Single Descender
    [[deprecated("Use field access instead!")]] float& dyn_Descender();
    // Get instance field reference: public System.Single LineSize
    [[deprecated("Use field access instead!")]] float& dyn_LineSize();
    // Get instance field reference: public System.Single StrikeSize
    [[deprecated("Use field access instead!")]] float& dyn_StrikeSize();
    // Get instance field reference: public System.Single StrikeOffset
    [[deprecated("Use field access instead!")]] float& dyn_StrikeOffset();
    // Get instance field reference: public PowerUI.DynamicFont Fallback
    [[deprecated("Use field access instead!")]] ::PowerUI::DynamicFont*& dyn_Fallback();
    // Get instance field reference: public System.Single SpaceSize
    [[deprecated("Use field access instead!")]] float& dyn_SpaceSize();
    // static public PowerUI.DynamicFont Get(System.String name)
    // Offset: 0x1855D5C
    static ::PowerUI::DynamicFont* Get(::StringW name);
    // static public PowerUI.DynamicFont GetDefaultFamily()
    // Offset: 0x1843D48
    static ::PowerUI::DynamicFont* GetDefaultFamily();
    // static public System.Boolean LoadInternalFont()
    // Offset: 0x1858AE8
    static bool LoadInternalFont();
    // public System.Void .ctor(System.String name)
    // Offset: 0x184BFCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DynamicFont* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::DynamicFont::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DynamicFont*, creationType>(name)));
    }
    // public System.Boolean LoadFaces()
    // Offset: 0x18587DC
    bool LoadFaces();
    // public System.Void Load()
    // Offset: 0x1858B68
    void Load();
    // public System.Single GetDescend(System.Single fontSize)
    // Offset: 0x1858C5C
    float GetDescend(float fontSize);
    // public System.Single GetAscend(System.Single fontSize)
    // Offset: 0x184F5D0
    float GetAscend(float fontSize);
    // public System.Single GetHeight(System.Single fontSize)
    // Offset: 0x184F4E0
    float GetHeight(float fontSize);
    // public System.Single GetSpaceSize(System.Single fontSize)
    // Offset: 0x184F6C0
    float GetSpaceSize(float fontSize);
    // public InfiniText.Glyph GetCharacter(System.Int32 charcode, InfiniText.FontFaceFlags style)
    // Offset: 0x184F9A0
    ::InfiniText::Glyph* GetCharacter(int charcode, ::InfiniText::FontFaceFlags style);
    // public InfiniText.Glyph GetCharacterDirect(System.Int32 charcode, InfiniText.FontFaceFlags style, out System.Boolean firstTime)
    // Offset: 0x1858D4C
    ::InfiniText::Glyph* GetCharacterDirect(int charcode, ::InfiniText::FontFaceFlags style, ByRef<bool> firstTime);
    // static private System.Void .cctor()
    // Offset: 0x1858EA0
    static void _cctor();
  }; // PowerUI.DynamicFont
  #pragma pack(pop)
  static check_size<sizeof(DynamicFont), 64 + sizeof(float)> __PowerUI_DynamicFontSizeCheck;
  static_assert(sizeof(DynamicFont) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::DynamicFont::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::DynamicFont* (*)(::StringW)>(&PowerUI::DynamicFont::Get)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicFont*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicFont::GetDefaultFamily
// Il2CppName: GetDefaultFamily
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::DynamicFont* (*)()>(&PowerUI::DynamicFont::GetDefaultFamily)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicFont*), "GetDefaultFamily", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicFont::LoadInternalFont
// Il2CppName: LoadInternalFont
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&PowerUI::DynamicFont::LoadInternalFont)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicFont*), "LoadInternalFont", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicFont::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::DynamicFont::LoadFaces
// Il2CppName: LoadFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::DynamicFont::*)()>(&PowerUI::DynamicFont::LoadFaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicFont*), "LoadFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicFont::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicFont::*)()>(&PowerUI::DynamicFont::Load)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicFont*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicFont::GetDescend
// Il2CppName: GetDescend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::DynamicFont::*)(float)>(&PowerUI::DynamicFont::GetDescend)> {
  static const MethodInfo* get() {
    static auto* fontSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicFont*), "GetDescend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontSize});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicFont::GetAscend
// Il2CppName: GetAscend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::DynamicFont::*)(float)>(&PowerUI::DynamicFont::GetAscend)> {
  static const MethodInfo* get() {
    static auto* fontSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicFont*), "GetAscend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontSize});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicFont::GetHeight
// Il2CppName: GetHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::DynamicFont::*)(float)>(&PowerUI::DynamicFont::GetHeight)> {
  static const MethodInfo* get() {
    static auto* fontSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicFont*), "GetHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontSize});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicFont::GetSpaceSize
// Il2CppName: GetSpaceSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::DynamicFont::*)(float)>(&PowerUI::DynamicFont::GetSpaceSize)> {
  static const MethodInfo* get() {
    static auto* fontSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicFont*), "GetSpaceSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontSize});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicFont::GetCharacter
// Il2CppName: GetCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::InfiniText::Glyph* (PowerUI::DynamicFont::*)(int, ::InfiniText::FontFaceFlags)>(&PowerUI::DynamicFont::GetCharacter)> {
  static const MethodInfo* get() {
    static auto* charcode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("InfiniText", "FontFaceFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicFont*), "GetCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{charcode, style});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicFont::GetCharacterDirect
// Il2CppName: GetCharacterDirect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::InfiniText::Glyph* (PowerUI::DynamicFont::*)(int, ::InfiniText::FontFaceFlags, ByRef<bool>)>(&PowerUI::DynamicFont::GetCharacterDirect)> {
  static const MethodInfo* get() {
    static auto* charcode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("InfiniText", "FontFaceFlags")->byval_arg;
    static auto* firstTime = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicFont*), "GetCharacterDirect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{charcode, style, firstTime});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicFont::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::DynamicFont::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicFont*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
