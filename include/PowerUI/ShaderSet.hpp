// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: ShaderSet
  class ShaderSet;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::ShaderSet);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::ShaderSet*, "PowerUI", "ShaderSet");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.ShaderSet
  // [TokenAttribute] Offset: FFFFFFFF
  class ShaderSet : public ::Il2CppObject {
    public:
    public:
    // public System.String Name
    // Size: 0x8
    // Offset: 0x10
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Shader CachedIsolated
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Shader* CachedIsolated;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    public:
    // Get static field: static private PowerUI.ShaderSet CachedStandard
    static ::PowerUI::ShaderSet* _get_CachedStandard();
    // Set static field: static private PowerUI.ShaderSet CachedStandard
    static void _set_CachedStandard(::PowerUI::ShaderSet* value);
    // Get static field: static public System.Collections.Generic.Dictionary`2<System.String,PowerUI.ShaderSet> GlobalCache
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::ShaderSet*>* _get_GlobalCache();
    // Set static field: static public System.Collections.Generic.Dictionary`2<System.String,PowerUI.ShaderSet> GlobalCache
    static void _set_GlobalCache(::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::ShaderSet*>* value);
    // Get instance field reference: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: private UnityEngine.Shader CachedIsolated
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_CachedIsolated();
    // static public PowerUI.ShaderSet get_Standard()
    // Offset: 0x1774704
    static ::PowerUI::ShaderSet* get_Standard();
    // static public PowerUI.ShaderSet Get(System.String name)
    // Offset: 0x1774780
    static ::PowerUI::ShaderSet* Get(::StringW name);
    // private System.Void .ctor(System.String name)
    // Offset: 0x177488C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ShaderSet* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::ShaderSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ShaderSet*, creationType>(name)));
    }
    // public UnityEngine.Shader get_Isolated()
    // Offset: 0x17748B8
    ::UnityEngine::Shader* get_Isolated();
    // public UnityEngine.Shader GetShader(System.Int32 flags)
    // Offset: 0x177495C
    ::UnityEngine::Shader* GetShader(int flags);
  }; // PowerUI.ShaderSet
  #pragma pack(pop)
  static check_size<sizeof(ShaderSet), 24 + sizeof(::UnityEngine::Shader*)> __PowerUI_ShaderSetSizeCheck;
  static_assert(sizeof(ShaderSet) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::ShaderSet::get_Standard
// Il2CppName: get_Standard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::ShaderSet* (*)()>(&PowerUI::ShaderSet::get_Standard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ShaderSet*), "get_Standard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ShaderSet::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::ShaderSet* (*)(::StringW)>(&PowerUI::ShaderSet::Get)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ShaderSet*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: PowerUI::ShaderSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::ShaderSet::get_Isolated
// Il2CppName: get_Isolated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (PowerUI::ShaderSet::*)()>(&PowerUI::ShaderSet::get_Isolated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ShaderSet*), "get_Isolated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ShaderSet::GetShader
// Il2CppName: GetShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (PowerUI::ShaderSet::*)(int)>(&PowerUI::ShaderSet::GetShader)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ShaderSet*), "GetShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
