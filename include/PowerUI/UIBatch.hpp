// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: DynamicMesh
  class DynamicMesh;
  // Forward declaring type: Renderman
  class Renderman;
  // Forward declaring type: MeshBlock
  class MeshBlock;
}
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: TextureAtlas
  class TextureAtlas;
}
// Forward declaring namespace: PowerUI::Css
namespace PowerUI::Css {
  // Forward declaring type: DisplayableProperty
  class DisplayableProperty;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: UIBatch
  class UIBatch;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::UIBatch);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::UIBatch*, "PowerUI", "UIBatch");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.UIBatch
  // [TokenAttribute] Offset: FFFFFFFF
  class UIBatch : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean Setup
    // Size: 0x1
    // Offset: 0x10
    bool Setup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean PhysicsMode
    // Size: 0x1
    // Offset: 0x11
    bool PhysicsMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean Isolated
    // Size: 0x1
    // Offset: 0x12
    bool Isolated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Isolated and: Mesh
    char __padding2[0x5] = {};
    // public PowerUI.DynamicMesh Mesh
    // Size: 0x8
    // Offset: 0x18
    ::PowerUI::DynamicMesh* Mesh;
    // Field size check
    static_assert(sizeof(::PowerUI::DynamicMesh*) == 0x8);
    // public System.Boolean PrepareCalled
    // Size: 0x1
    // Offset: 0x20
    bool PrepareCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: PrepareCalled and: Renderer
    char __padding4[0x7] = {};
    // public PowerUI.Renderman Renderer
    // Size: 0x8
    // Offset: 0x28
    ::PowerUI::Renderman* Renderer;
    // Field size check
    static_assert(sizeof(::PowerUI::Renderman*) == 0x8);
    // public PowerUI.UIBatch BatchAfter
    // Size: 0x8
    // Offset: 0x30
    ::PowerUI::UIBatch* BatchAfter;
    // Field size check
    static_assert(sizeof(::PowerUI::UIBatch*) == 0x8);
    // public PowerUI.UIBatch BatchBefore
    // Size: 0x8
    // Offset: 0x38
    ::PowerUI::UIBatch* BatchBefore;
    // Field size check
    static_assert(sizeof(::PowerUI::UIBatch*) == 0x8);
    // public Blaze.TextureAtlas FontAtlas
    // Size: 0x8
    // Offset: 0x40
    ::Blaze::TextureAtlas* FontAtlas;
    // Field size check
    static_assert(sizeof(::Blaze::TextureAtlas*) == 0x8);
    // public Blaze.TextureAtlas GraphicsAtlas
    // Size: 0x8
    // Offset: 0x48
    ::Blaze::TextureAtlas* GraphicsAtlas;
    // Field size check
    static_assert(sizeof(::Blaze::TextureAtlas*) == 0x8);
    // public PowerUI.Css.DisplayableProperty IsolatedProperty
    // Size: 0x8
    // Offset: 0x50
    ::PowerUI::Css::DisplayableProperty* IsolatedProperty;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::DisplayableProperty*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean Setup
    [[deprecated("Use field access instead!")]] bool& dyn_Setup();
    // Get instance field reference: public System.Boolean PhysicsMode
    [[deprecated("Use field access instead!")]] bool& dyn_PhysicsMode();
    // Get instance field reference: public System.Boolean Isolated
    [[deprecated("Use field access instead!")]] bool& dyn_Isolated();
    // Get instance field reference: public PowerUI.DynamicMesh Mesh
    [[deprecated("Use field access instead!")]] ::PowerUI::DynamicMesh*& dyn_Mesh();
    // Get instance field reference: public System.Boolean PrepareCalled
    [[deprecated("Use field access instead!")]] bool& dyn_PrepareCalled();
    // Get instance field reference: public PowerUI.Renderman Renderer
    [[deprecated("Use field access instead!")]] ::PowerUI::Renderman*& dyn_Renderer();
    // Get instance field reference: public PowerUI.UIBatch BatchAfter
    [[deprecated("Use field access instead!")]] ::PowerUI::UIBatch*& dyn_BatchAfter();
    // Get instance field reference: public PowerUI.UIBatch BatchBefore
    [[deprecated("Use field access instead!")]] ::PowerUI::UIBatch*& dyn_BatchBefore();
    // Get instance field reference: public Blaze.TextureAtlas FontAtlas
    [[deprecated("Use field access instead!")]] ::Blaze::TextureAtlas*& dyn_FontAtlas();
    // Get instance field reference: public Blaze.TextureAtlas GraphicsAtlas
    [[deprecated("Use field access instead!")]] ::Blaze::TextureAtlas*& dyn_GraphicsAtlas();
    // Get instance field reference: public PowerUI.Css.DisplayableProperty IsolatedProperty
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::DisplayableProperty*& dyn_IsolatedProperty();
    // public System.Void .ctor(PowerUI.Renderman renderer)
    // Offset: 0x176A9E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIBatch* New_ctor(::PowerUI::Renderman* renderer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::UIBatch::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIBatch*, creationType>(renderer)));
    }
    // public System.Void ChangeRenderer(PowerUI.Renderman renderer)
    // Offset: 0x177FB40
    void ChangeRenderer(::PowerUI::Renderman* renderer);
    // public System.Void IsIsolated(PowerUI.Css.DisplayableProperty property)
    // Offset: 0x176AABC
    void IsIsolated(::PowerUI::Css::DisplayableProperty* property);
    // public System.Void NotIsolated(Blaze.TextureAtlas graphics, Blaze.TextureAtlas font, System.Single aliasBottom, System.Single aliasTop)
    // Offset: 0x176AC18
    void NotIsolated(::Blaze::TextureAtlas* graphics, ::Blaze::TextureAtlas* font, float aliasBottom, float aliasTop);
    // public System.Void SetFontAtlas(Blaze.TextureAtlas font, System.Single bottom, System.Single top)
    // Offset: 0x176AAE8
    void SetFontAtlas(::Blaze::TextureAtlas* font, float bottom, float top);
    // public System.Void SetGraphicsAtlas(Blaze.TextureAtlas graphics)
    // Offset: 0x176ABDC
    void SetGraphicsAtlas(::Blaze::TextureAtlas* graphics);
    // public System.Void SetPhysicsMode(System.Boolean isPhysics)
    // Offset: 0x1769F04
    void SetPhysicsMode(bool isPhysics);
    // public System.Void SetRenderDepth(System.Int32 index)
    // Offset: 0x177FC78
    void SetRenderDepth(int index);
    // public System.Void Flush()
    // Offset: 0x176C598
    void Flush();
    // public System.Void CompletedLayout()
    // Offset: 0x176C5C8
    void CompletedLayout();
    // public System.Void PrepareForLayout()
    // Offset: 0x176ACC0
    void PrepareForLayout();
    // public PowerUI.MeshBlock Allocate()
    // Offset: 0x177FD2C
    ::PowerUI::MeshBlock* Allocate();
    // public System.Void RenderWithCamera(System.Int32 id)
    // Offset: 0x176C29C
    void RenderWithCamera(int id);
    // public System.Void Destroy()
    // Offset: 0x177FCC0
    void Destroy();
  }; // PowerUI.UIBatch
  #pragma pack(pop)
  static check_size<sizeof(UIBatch), 80 + sizeof(::PowerUI::Css::DisplayableProperty*)> __PowerUI_UIBatchSizeCheck;
  static_assert(sizeof(UIBatch) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::UIBatch::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::UIBatch::ChangeRenderer
// Il2CppName: ChangeRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UIBatch::*)(::PowerUI::Renderman*)>(&PowerUI::UIBatch::ChangeRenderer)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("PowerUI", "Renderman")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIBatch*), "ChangeRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: PowerUI::UIBatch::IsIsolated
// Il2CppName: IsIsolated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UIBatch::*)(::PowerUI::Css::DisplayableProperty*)>(&PowerUI::UIBatch::IsIsolated)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "DisplayableProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIBatch*), "IsIsolated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: PowerUI::UIBatch::NotIsolated
// Il2CppName: NotIsolated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UIBatch::*)(::Blaze::TextureAtlas*, ::Blaze::TextureAtlas*, float, float)>(&PowerUI::UIBatch::NotIsolated)> {
  static const MethodInfo* get() {
    static auto* graphics = &::il2cpp_utils::GetClassFromName("Blaze", "TextureAtlas")->byval_arg;
    static auto* font = &::il2cpp_utils::GetClassFromName("Blaze", "TextureAtlas")->byval_arg;
    static auto* aliasBottom = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* aliasTop = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIBatch*), "NotIsolated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graphics, font, aliasBottom, aliasTop});
  }
};
// Writing MetadataGetter for method: PowerUI::UIBatch::SetFontAtlas
// Il2CppName: SetFontAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UIBatch::*)(::Blaze::TextureAtlas*, float, float)>(&PowerUI::UIBatch::SetFontAtlas)> {
  static const MethodInfo* get() {
    static auto* font = &::il2cpp_utils::GetClassFromName("Blaze", "TextureAtlas")->byval_arg;
    static auto* bottom = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* top = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIBatch*), "SetFontAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{font, bottom, top});
  }
};
// Writing MetadataGetter for method: PowerUI::UIBatch::SetGraphicsAtlas
// Il2CppName: SetGraphicsAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UIBatch::*)(::Blaze::TextureAtlas*)>(&PowerUI::UIBatch::SetGraphicsAtlas)> {
  static const MethodInfo* get() {
    static auto* graphics = &::il2cpp_utils::GetClassFromName("Blaze", "TextureAtlas")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIBatch*), "SetGraphicsAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graphics});
  }
};
// Writing MetadataGetter for method: PowerUI::UIBatch::SetPhysicsMode
// Il2CppName: SetPhysicsMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UIBatch::*)(bool)>(&PowerUI::UIBatch::SetPhysicsMode)> {
  static const MethodInfo* get() {
    static auto* isPhysics = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIBatch*), "SetPhysicsMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isPhysics});
  }
};
// Writing MetadataGetter for method: PowerUI::UIBatch::SetRenderDepth
// Il2CppName: SetRenderDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UIBatch::*)(int)>(&PowerUI::UIBatch::SetRenderDepth)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIBatch*), "SetRenderDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: PowerUI::UIBatch::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UIBatch::*)()>(&PowerUI::UIBatch::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIBatch*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIBatch::CompletedLayout
// Il2CppName: CompletedLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UIBatch::*)()>(&PowerUI::UIBatch::CompletedLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIBatch*), "CompletedLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIBatch::PrepareForLayout
// Il2CppName: PrepareForLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UIBatch::*)()>(&PowerUI::UIBatch::PrepareForLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIBatch*), "PrepareForLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIBatch::Allocate
// Il2CppName: Allocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::MeshBlock* (PowerUI::UIBatch::*)()>(&PowerUI::UIBatch::Allocate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIBatch*), "Allocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIBatch::RenderWithCamera
// Il2CppName: RenderWithCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UIBatch::*)(int)>(&PowerUI::UIBatch::RenderWithCamera)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIBatch*), "RenderWithCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: PowerUI::UIBatch::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UIBatch::*)()>(&PowerUI::UIBatch::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIBatch*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
