// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.Element
#include "PowerUI/Element.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Document
  class Document;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: WordElement
  class WordElement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::WordElement);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::WordElement*, "PowerUI", "WordElement");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0xF0
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.WordElement
  // [TokenAttribute] Offset: FFFFFFFF
  class WordElement : public ::PowerUI::Element {
    public:
    // public System.Void .ctor(PowerUI.Document document, PowerUI.Element parent, System.String text)
    // Offset: 0xE1AE24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WordElement* New_ctor(::PowerUI::Document* document, ::PowerUI::Element* parent, ::StringW text) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::WordElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WordElement*, creationType>(document, parent, text)));
    }
    // public System.Int32 LetterCount()
    // Offset: 0xE1AED4
    int LetterCount();
    // public override System.String ToString()
    // Offset: 0xE1AF24
    // Implemented from: PowerUI.Element
    // Base method: System.String Element::ToString()
    ::StringW ToString();
    // public override System.Void ToString(System.Text.StringBuilder builder)
    // Offset: 0xE1AF78
    // Implemented from: PowerUI.Element
    // Base method: System.Void Element::ToString(System.Text.StringBuilder builder)
    void ToString(::System::Text::StringBuilder* builder);
  }; // PowerUI.WordElement
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::WordElement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::WordElement::LetterCount
// Il2CppName: LetterCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::WordElement::*)()>(&PowerUI::WordElement::LetterCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::WordElement*), "LetterCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::WordElement::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::WordElement::*)()>(&PowerUI::WordElement::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::WordElement*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::WordElement::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::WordElement::*)(::System::Text::StringBuilder*)>(&PowerUI::WordElement::ToString)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::WordElement*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder});
  }
};
