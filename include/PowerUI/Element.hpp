// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Wrench.MLElement
#include "Wrench/MLElement.hpp"
// Including type: PowerUI.MouseOverState
#include "PowerUI/MouseOverState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Document
  class Document;
  // Forward declaring type: HtmlTagHandler
  class HtmlTagHandler;
  // Forward declaring type: InputTag
  class InputTag;
  // Forward declaring type: OnDomEvent
  class OnDomEvent;
  // Forward declaring type: AttributeLookup
  class AttributeLookup;
  // Forward declaring type: UIEvent
  class UIEvent;
  // Forward declaring type: UIAnimation
  class UIAnimation;
  // Forward declaring type: DynamicFont
  class DynamicFont;
  // Forward declaring type: Text3D
  class Text3D;
  // Forward declaring type: CanvasContext
  class CanvasContext;
  // Forward declaring type: FormTag
  class FormTag;
}
// Forward declaring namespace: PowerUI::Css
namespace PowerUI::Css {
  // Forward declaring type: ElementStyle
  class ElementStyle;
  // Forward declaring type: SelectorType
  struct SelectorType;
  // Forward declaring type: ComputedStyle
  class ComputedStyle;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Wrench
namespace Wrench {
  // Forward declaring type: MLLexer
  class MLLexer;
  // Forward declaring type: TagHandler
  class TagHandler;
  // Forward declaring type: MLVariableElement
  class MLVariableElement;
  // Forward declaring type: MLTextElement
  class MLTextElement;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Element
  class Element;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Element);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Element*, "PowerUI", "Element");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0xF0
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Element
  // [TokenAttribute] Offset: FFFFFFFF
  class Element : public ::Wrench::MLElement {
    public:
    public:
    // public System.Object Data
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* Data;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public System.Boolean HScrollbar
    // Size: 0x1
    // Offset: 0x30
    bool HScrollbar;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean VScrollbar
    // Size: 0x1
    // Offset: 0x31
    bool VScrollbar;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: VScrollbar and: Document
    char __padding2[0x6] = {};
    // public PowerUI.Document Document
    // Size: 0x8
    // Offset: 0x38
    ::PowerUI::Document* Document;
    // Field size check
    static_assert(sizeof(::PowerUI::Document*) == 0x8);
    // public PowerUI.Element ParentNode
    // Size: 0x8
    // Offset: 0x40
    ::PowerUI::Element* ParentNode;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // public PowerUI.Css.ElementStyle Style
    // Size: 0x8
    // Offset: 0x48
    ::PowerUI::Css::ElementStyle* Style;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::ElementStyle*) == 0x8);
    // public PowerUI.HtmlTagHandler Handler
    // Size: 0x8
    // Offset: 0x50
    ::PowerUI::HtmlTagHandler* Handler;
    // Field size check
    static_assert(sizeof(::PowerUI::HtmlTagHandler*) == 0x8);
    // public PowerUI.MouseOverState MousedOver
    // Size: 0x4
    // Offset: 0x58
    ::PowerUI::MouseOverState MousedOver;
    // Field size check
    static_assert(sizeof(::PowerUI::MouseOverState) == 0x4);
    // Padding between fields: MousedOver and: VerticalScrollbar
    char __padding7[0x4] = {};
    // public PowerUI.InputTag VerticalScrollbar
    // Size: 0x8
    // Offset: 0x60
    ::PowerUI::InputTag* VerticalScrollbar;
    // Field size check
    static_assert(sizeof(::PowerUI::InputTag*) == 0x8);
    // protected System.Collections.Generic.List`1<PowerUI.Element> ChildNodes
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::PowerUI::Element*>* ChildNodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PowerUI::Element*>*) == 0x8);
    // public PowerUI.InputTag HorizontalScrollbar
    // Size: 0x8
    // Offset: 0x70
    ::PowerUI::InputTag* HorizontalScrollbar;
    // Field size check
    static_assert(sizeof(::PowerUI::InputTag*) == 0x8);
    // public System.Collections.Generic.List`1<PowerUI.Element> KidsToRender
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::PowerUI::Element*>* KidsToRender;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PowerUI::Element*>*) == 0x8);
    // public System.Boolean IsRebuildingChildren
    // Size: 0x1
    // Offset: 0x80
    bool IsRebuildingChildren;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsRebuildingChildren and: OnKeyUp
    char __padding12[0x7] = {};
    // [CompilerGeneratedAttribute] Offset: 0xADED34
    // private PowerUI.OnDomEvent OnKeyUp
    // Size: 0x8
    // Offset: 0x88
    ::PowerUI::OnDomEvent* OnKeyUp;
    // Field size check
    static_assert(sizeof(::PowerUI::OnDomEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADED44
    // private PowerUI.OnDomEvent OnKeyDown
    // Size: 0x8
    // Offset: 0x90
    ::PowerUI::OnDomEvent* OnKeyDown;
    // Field size check
    static_assert(sizeof(::PowerUI::OnDomEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADED54
    // private PowerUI.OnDomEvent OnMouseUp
    // Size: 0x8
    // Offset: 0x98
    ::PowerUI::OnDomEvent* OnMouseUp;
    // Field size check
    static_assert(sizeof(::PowerUI::OnDomEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADED64
    // private PowerUI.OnDomEvent OnMouseOut
    // Size: 0x8
    // Offset: 0xA0
    ::PowerUI::OnDomEvent* OnMouseOut;
    // Field size check
    static_assert(sizeof(::PowerUI::OnDomEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADED74
    // private PowerUI.OnDomEvent OnMouseDown
    // Size: 0x8
    // Offset: 0xA8
    ::PowerUI::OnDomEvent* OnMouseDown;
    // Field size check
    static_assert(sizeof(::PowerUI::OnDomEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADED84
    // private PowerUI.OnDomEvent OnMouseMove
    // Size: 0x8
    // Offset: 0xB0
    ::PowerUI::OnDomEvent* OnMouseMove;
    // Field size check
    static_assert(sizeof(::PowerUI::OnDomEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADED94
    // private PowerUI.OnDomEvent OnMouseOver
    // Size: 0x8
    // Offset: 0xB8
    ::PowerUI::OnDomEvent* OnMouseOver;
    // Field size check
    static_assert(sizeof(::PowerUI::OnDomEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADEDA4
    // private PowerUI.OnDomEvent OnLoadedEvent
    // Size: 0x8
    // Offset: 0xC0
    ::PowerUI::OnDomEvent* OnLoadedEvent;
    // Field size check
    static_assert(sizeof(::PowerUI::OnDomEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADEDB4
    // private PowerUI.OnDomEvent OnFocus
    // Size: 0x8
    // Offset: 0xC8
    ::PowerUI::OnDomEvent* OnFocus;
    // Field size check
    static_assert(sizeof(::PowerUI::OnDomEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADEDC4
    // private PowerUI.OnDomEvent OnBlur
    // Size: 0x8
    // Offset: 0xD0
    ::PowerUI::OnDomEvent* OnBlur;
    // Field size check
    static_assert(sizeof(::PowerUI::OnDomEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADEDD4
    // private PowerUI.OnDomEvent OnClick
    // Size: 0x8
    // Offset: 0xD8
    ::PowerUI::OnDomEvent* OnClick;
    // Field size check
    static_assert(sizeof(::PowerUI::OnDomEvent*) == 0x8);
    // public PowerUI.Element VirtualAfter
    // Size: 0x8
    // Offset: 0xE0
    ::PowerUI::Element* VirtualAfter;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // public PowerUI.Element VirtualBefore
    // Size: 0x8
    // Offset: 0xE8
    ::PowerUI::Element* VirtualBefore;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    public:
    // Get instance field reference: public System.Object Data
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_Data();
    // Get instance field reference: public System.Boolean HScrollbar
    [[deprecated("Use field access instead!")]] bool& dyn_HScrollbar();
    // Get instance field reference: public System.Boolean VScrollbar
    [[deprecated("Use field access instead!")]] bool& dyn_VScrollbar();
    // Get instance field reference: public PowerUI.Document Document
    [[deprecated("Use field access instead!")]] ::PowerUI::Document*& dyn_Document();
    // Get instance field reference: public PowerUI.Element ParentNode
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_ParentNode();
    // Get instance field reference: public PowerUI.Css.ElementStyle Style
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::ElementStyle*& dyn_Style();
    // Get instance field reference: public PowerUI.HtmlTagHandler Handler
    [[deprecated("Use field access instead!")]] ::PowerUI::HtmlTagHandler*& dyn_Handler();
    // Get instance field reference: public PowerUI.MouseOverState MousedOver
    [[deprecated("Use field access instead!")]] ::PowerUI::MouseOverState& dyn_MousedOver();
    // Get instance field reference: public PowerUI.InputTag VerticalScrollbar
    [[deprecated("Use field access instead!")]] ::PowerUI::InputTag*& dyn_VerticalScrollbar();
    // Get instance field reference: protected System.Collections.Generic.List`1<PowerUI.Element> ChildNodes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PowerUI::Element*>*& dyn_ChildNodes();
    // Get instance field reference: public PowerUI.InputTag HorizontalScrollbar
    [[deprecated("Use field access instead!")]] ::PowerUI::InputTag*& dyn_HorizontalScrollbar();
    // Get instance field reference: public System.Collections.Generic.List`1<PowerUI.Element> KidsToRender
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PowerUI::Element*>*& dyn_KidsToRender();
    // Get instance field reference: public System.Boolean IsRebuildingChildren
    [[deprecated("Use field access instead!")]] bool& dyn_IsRebuildingChildren();
    // Get instance field reference: private PowerUI.OnDomEvent OnKeyUp
    [[deprecated("Use field access instead!")]] ::PowerUI::OnDomEvent*& dyn_OnKeyUp();
    // Get instance field reference: private PowerUI.OnDomEvent OnKeyDown
    [[deprecated("Use field access instead!")]] ::PowerUI::OnDomEvent*& dyn_OnKeyDown();
    // Get instance field reference: private PowerUI.OnDomEvent OnMouseUp
    [[deprecated("Use field access instead!")]] ::PowerUI::OnDomEvent*& dyn_OnMouseUp();
    // Get instance field reference: private PowerUI.OnDomEvent OnMouseOut
    [[deprecated("Use field access instead!")]] ::PowerUI::OnDomEvent*& dyn_OnMouseOut();
    // Get instance field reference: private PowerUI.OnDomEvent OnMouseDown
    [[deprecated("Use field access instead!")]] ::PowerUI::OnDomEvent*& dyn_OnMouseDown();
    // Get instance field reference: private PowerUI.OnDomEvent OnMouseMove
    [[deprecated("Use field access instead!")]] ::PowerUI::OnDomEvent*& dyn_OnMouseMove();
    // Get instance field reference: private PowerUI.OnDomEvent OnMouseOver
    [[deprecated("Use field access instead!")]] ::PowerUI::OnDomEvent*& dyn_OnMouseOver();
    // Get instance field reference: private PowerUI.OnDomEvent OnLoadedEvent
    [[deprecated("Use field access instead!")]] ::PowerUI::OnDomEvent*& dyn_OnLoadedEvent();
    // Get instance field reference: private PowerUI.OnDomEvent OnFocus
    [[deprecated("Use field access instead!")]] ::PowerUI::OnDomEvent*& dyn_OnFocus();
    // Get instance field reference: private PowerUI.OnDomEvent OnBlur
    [[deprecated("Use field access instead!")]] ::PowerUI::OnDomEvent*& dyn_OnBlur();
    // Get instance field reference: private PowerUI.OnDomEvent OnClick
    [[deprecated("Use field access instead!")]] ::PowerUI::OnDomEvent*& dyn_OnClick();
    // Get instance field reference: public PowerUI.Element VirtualAfter
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_VirtualAfter();
    // Get instance field reference: public PowerUI.Element VirtualBefore
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_VirtualBefore();
    // public System.Void AddToAttributeLookups()
    // Offset: 0x1A37804
    void AddToAttributeLookups();
    // public System.Void AddToAttributeLookup(System.String attrib, PowerUI.AttributeLookup lookup)
    // Offset: 0x1A37980
    void AddToAttributeLookup(::StringW attrib, ::PowerUI::AttributeLookup* lookup);
    // public System.Void add_OnKeyUp(PowerUI.OnDomEvent value)
    // Offset: 0x1A37ABC
    void add_OnKeyUp(::PowerUI::OnDomEvent* value);
    // public System.Void remove_OnKeyUp(PowerUI.OnDomEvent value)
    // Offset: 0x1A37BA8
    void remove_OnKeyUp(::PowerUI::OnDomEvent* value);
    // public System.Void add_OnKeyDown(PowerUI.OnDomEvent value)
    // Offset: 0x1A37C94
    void add_OnKeyDown(::PowerUI::OnDomEvent* value);
    // public System.Void remove_OnKeyDown(PowerUI.OnDomEvent value)
    // Offset: 0x1A37D80
    void remove_OnKeyDown(::PowerUI::OnDomEvent* value);
    // public System.Void add_OnMouseUp(PowerUI.OnDomEvent value)
    // Offset: 0x1A37E6C
    void add_OnMouseUp(::PowerUI::OnDomEvent* value);
    // public System.Void remove_OnMouseUp(PowerUI.OnDomEvent value)
    // Offset: 0x1A37F58
    void remove_OnMouseUp(::PowerUI::OnDomEvent* value);
    // public System.Void add_OnMouseOut(PowerUI.OnDomEvent value)
    // Offset: 0x1A38044
    void add_OnMouseOut(::PowerUI::OnDomEvent* value);
    // public System.Void remove_OnMouseOut(PowerUI.OnDomEvent value)
    // Offset: 0x1A38130
    void remove_OnMouseOut(::PowerUI::OnDomEvent* value);
    // public System.Void add_OnMouseDown(PowerUI.OnDomEvent value)
    // Offset: 0x1A3821C
    void add_OnMouseDown(::PowerUI::OnDomEvent* value);
    // public System.Void remove_OnMouseDown(PowerUI.OnDomEvent value)
    // Offset: 0x1A38308
    void remove_OnMouseDown(::PowerUI::OnDomEvent* value);
    // public System.Void add_OnMouseMove(PowerUI.OnDomEvent value)
    // Offset: 0x1A383F4
    void add_OnMouseMove(::PowerUI::OnDomEvent* value);
    // public System.Void remove_OnMouseMove(PowerUI.OnDomEvent value)
    // Offset: 0x1A384E0
    void remove_OnMouseMove(::PowerUI::OnDomEvent* value);
    // public System.Void add_OnMouseOver(PowerUI.OnDomEvent value)
    // Offset: 0x1A385CC
    void add_OnMouseOver(::PowerUI::OnDomEvent* value);
    // public System.Void remove_OnMouseOver(PowerUI.OnDomEvent value)
    // Offset: 0x1A386B8
    void remove_OnMouseOver(::PowerUI::OnDomEvent* value);
    // public System.Void add_OnLoadedEvent(PowerUI.OnDomEvent value)
    // Offset: 0x1A387A4
    void add_OnLoadedEvent(::PowerUI::OnDomEvent* value);
    // public System.Void remove_OnLoadedEvent(PowerUI.OnDomEvent value)
    // Offset: 0x1A38890
    void remove_OnLoadedEvent(::PowerUI::OnDomEvent* value);
    // public System.Void add_OnFocus(PowerUI.OnDomEvent value)
    // Offset: 0x1A3897C
    void add_OnFocus(::PowerUI::OnDomEvent* value);
    // public System.Void remove_OnFocus(PowerUI.OnDomEvent value)
    // Offset: 0x1A38A68
    void remove_OnFocus(::PowerUI::OnDomEvent* value);
    // public System.Void add_OnBlur(PowerUI.OnDomEvent value)
    // Offset: 0x1A38B54
    void add_OnBlur(::PowerUI::OnDomEvent* value);
    // public System.Void remove_OnBlur(PowerUI.OnDomEvent value)
    // Offset: 0x1A38C40
    void remove_OnBlur(::PowerUI::OnDomEvent* value);
    // public System.Void add_OnClick(PowerUI.OnDomEvent value)
    // Offset: 0x1A38D2C
    void add_OnClick(::PowerUI::OnDomEvent* value);
    // public System.Void remove_OnClick(PowerUI.OnDomEvent value)
    // Offset: 0x1A38E18
    void remove_OnClick(::PowerUI::OnDomEvent* value);
    // public System.Void .ctor(System.String tag)
    // Offset: 0x1A38F04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Element* New_ctor(::StringW tag) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Element::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Element*, creationType>(tag)));
    }
    // public System.Void .ctor(System.String tag, PowerUI.Element parent)
    // Offset: 0x1A38F94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Element* New_ctor(::StringW tag, ::PowerUI::Element* parent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Element::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Element*, creationType>(tag, parent)));
    }
    // public System.Void .ctor(PowerUI.Document document, PowerUI.Element parent)
    // Offset: 0x1A3906C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Element* New_ctor(::PowerUI::Document* document, ::PowerUI::Element* parent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Element::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Element*, creationType>(document, parent)));
    }
    // private System.Void .ctor(PowerUI.Document document, Wrench.MLLexer lexer, PowerUI.Element parent)
    // Offset: 0x1A39038
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Element* New_ctor(::PowerUI::Document* document, ::Wrench::MLLexer* lexer, ::PowerUI::Element* parent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Element::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Element*, creationType>(document, lexer, parent)));
    }
    // public System.Void SetDocument(PowerUI.Document document)
    // Offset: 0x1A39128
    void SetDocument(::PowerUI::Document* document);
    // public System.Void OnLoaded(System.String objectLoaded)
    // Offset: 0x1A39294
    void OnLoaded(::StringW objectLoaded);
    // public System.Void Focus()
    // Offset: 0x1A393B0
    void Focus();
    // public System.Void Unfocus()
    // Offset: 0x1A39538
    void Unfocus();
    // public System.Void OnKeyPress(PowerUI.UIEvent pressEvent)
    // Offset: 0x1A39750
    void OnKeyPress(::PowerUI::UIEvent* pressEvent);
    // public System.Boolean get_HasBackground()
    // Offset: 0x1A39880
    bool get_HasBackground();
    // public System.Void RefreshSelector(PowerUI.Css.SelectorType type, System.String selector)
    // Offset: 0x1A398C0
    void RefreshSelector(::PowerUI::Css::SelectorType type, ::StringW selector);
    // public PowerUI.Element getElementByTagName(System.String tag)
    // Offset: 0x1A39AC8
    ::PowerUI::Element* getElementByTagName(::StringW tag);
    // public System.Collections.Generic.List`1<PowerUI.Element> getElementsByTagName(System.String tag)
    // Offset: 0x1A39C04
    ::System::Collections::Generic::List_1<::PowerUI::Element*>* getElementsByTagName(::StringW tag);
    // public System.Collections.Generic.List`1<PowerUI.Element> getElementsByTagName(System.String tag, System.Boolean stopWithOne)
    // Offset: 0x1A39B78
    ::System::Collections::Generic::List_1<::PowerUI::Element*>* getElementsByTagName(::StringW tag, bool stopWithOne);
    // public System.Boolean getElementsByTagName(System.String tag, System.Boolean stopWithOne, System.Collections.Generic.List`1<PowerUI.Element> results)
    // Offset: 0x1A39C0C
    bool getElementsByTagName(::StringW tag, bool stopWithOne, ::System::Collections::Generic::List_1<::PowerUI::Element*>* results);
    // public System.Collections.Generic.List`1<PowerUI.Element> getElementsByClassName(System.String className)
    // Offset: 0x1A39D48
    ::System::Collections::Generic::List_1<::PowerUI::Element*>* getElementsByClassName(::StringW className);
    // public System.Void getElementsByClassName(System.String[] classes, System.Collections.Generic.List`1<PowerUI.Element> results)
    // Offset: 0x1A39E28
    void getElementsByClassName(::ArrayW<::StringW> classes, ::System::Collections::Generic::List_1<::PowerUI::Element*>* results);
    // public System.Collections.Generic.List`1<PowerUI.Element> getElementsByAttribute(System.String property, System.String value)
    // Offset: 0x1A3A17C
    ::System::Collections::Generic::List_1<::PowerUI::Element*>* getElementsByAttribute(::StringW property, ::StringW value);
    // public System.Collections.Generic.List`1<PowerUI.Element> getElementsWithProperty(System.String property, System.String value)
    // Offset: 0x1A3A36C
    ::System::Collections::Generic::List_1<::PowerUI::Element*>* getElementsWithProperty(::StringW property, ::StringW value);
    // public System.Void getElementsByAttribute(System.String property, System.String value, System.Collections.Generic.List`1<PowerUI.Element> results)
    // Offset: 0x1A3A208
    void getElementsByAttribute(::StringW property, ::StringW value, ::System::Collections::Generic::List_1<::PowerUI::Element*>* results);
    // public PowerUI.Element getElementByAttribute(System.String property, System.String value)
    // Offset: 0x1A3A3F8
    ::PowerUI::Element* getElementByAttribute(::StringW property, ::StringW value);
    // public System.Void SetWidthForKids(PowerUI.Css.ComputedStyle parent)
    // Offset: 0x1A3A680
    void SetWidthForKids(::PowerUI::Css::ComputedStyle* parent);
    // public System.Void SetHeightForKids(PowerUI.Css.ComputedStyle parent)
    // Offset: 0x1A3A908
    void SetHeightForKids(::PowerUI::Css::ComputedStyle* parent);
    // private System.Void SetDimensionForKids(PowerUI.Css.ComputedStyle parent, System.Boolean isWidth)
    // Offset: 0x1A3A688
    void SetDimensionForKids(::PowerUI::Css::ComputedStyle* parent, bool isWidth);
    // public System.String ToTextString()
    // Offset: 0x1A3AE28
    ::StringW ToTextString();
    // public System.Void appendTextContent(System.String text)
    // Offset: 0x1A3B12C
    void appendTextContent(::StringW text);
    // public System.Void appendInnerHTML(System.String text)
    // Offset: 0x1A3B1D0
    void appendInnerHTML(::StringW text);
    // public System.String get_textContent()
    // Offset: 0x1A3AE2C
    ::StringW get_textContent();
    // public System.Void set_textContent(System.String value)
    // Offset: 0x1A3B270
    void set_textContent(::StringW value);
    // public System.String get_tagName()
    // Offset: 0x1A3B3E0
    ::StringW get_tagName();
    // public System.String get_className()
    // Offset: 0x1A3B410
    ::StringW get_className();
    // public System.Void set_className(System.String value)
    // Offset: 0x1A3B47C
    void set_className(::StringW value);
    // public System.String get_id()
    // Offset: 0x1A3B4E0
    ::StringW get_id();
    // public System.Void set_id(System.String value)
    // Offset: 0x1A3B54C
    void set_id(::StringW value);
    // public System.String get_innerHTML()
    // Offset: 0x1A3B5B0
    ::StringW get_innerHTML();
    // public System.Void set_innerHTML(System.String value)
    // Offset: 0x1A3B6F4
    void set_innerHTML(::StringW value);
    // public System.Void RemovedFromDOM()
    // Offset: 0x1A3B858
    void RemovedFromDOM();
    // public System.Void WentOffScreen()
    // Offset: 0x1A3BA00
    void WentOffScreen();
    // private System.Void ClearChildNodes()
    // Offset: 0x1A3B2FC
    void ClearChildNodes();
    // public System.Collections.Generic.List`1<PowerUI.Element> get_childNodes()
    // Offset: 0x1A3BB70
    ::System::Collections::Generic::List_1<::PowerUI::Element*>* get_childNodes();
    // public System.Void set_childNodes(System.Collections.Generic.List`1<PowerUI.Element> value)
    // Offset: 0x1A3BB78
    void set_childNodes(::System::Collections::Generic::List_1<::PowerUI::Element*>* value);
    // public PowerUI.Element appendChild(System.String text)
    // Offset: 0x1A3BBF0
    ::PowerUI::Element* appendChild(::StringW text);
    // public System.Void appendChild(PowerUI.Element element)
    // Offset: 0x1A3BC6C
    void appendChild(::PowerUI::Element* element);
    // public System.Void AppendNewChild(PowerUI.Element element)
    // Offset: 0x1A3AA48
    void AppendNewChild(::PowerUI::Element* element);
    // public System.Boolean get_isRooted()
    // Offset: 0x1A3BCC8
    bool get_isRooted();
    // public PowerUI.Document get_document()
    // Offset: 0x1A3BD3C
    ::PowerUI::Document* get_document();
    // public PowerUI.Document get_contentDocument()
    // Offset: 0x1A3BD44
    ::PowerUI::Document* get_contentDocument();
    // public System.Boolean isChild(PowerUI.Element childElement)
    // Offset: 0x1A3BDFC
    bool isChild(::PowerUI::Element* childElement);
    // public System.Void removeChild(PowerUI.Element element)
    // Offset: 0x1A3BECC
    void removeChild(::PowerUI::Element* element);
    // public System.Void scrollBy(System.Int32 x, System.Int32 y)
    // Offset: 0x1A3BF88
    void scrollBy(int x, int y);
    // public System.Void scrollTo(System.Int32 x, System.Int32 y)
    // Offset: 0x1A3C02C
    void scrollTo(int x, int y);
    // public System.Void RequireLayout()
    // Offset: 0x1A3C354
    void RequireLayout();
    // public System.Int32 get_offsetLeft()
    // Offset: 0x1A3C394
    int get_offsetLeft();
    // public System.Void set_offsetLeft(System.Int32 value)
    // Offset: 0x1A3C3D8
    void set_offsetLeft(int value);
    // public System.Int32 get_offsetTop()
    // Offset: 0x1A3C474
    int get_offsetTop();
    // public System.Void set_offsetTop(System.Int32 value)
    // Offset: 0x1A3C4B8
    void set_offsetTop(int value);
    // public System.Int32 get_scrollLeft()
    // Offset: 0x1A3C554
    int get_scrollLeft();
    // public System.Void set_scrollLeft(System.Int32 value)
    // Offset: 0x1A3C598
    void set_scrollLeft(int value);
    // public System.Int32 get_scrollTop()
    // Offset: 0x1A3C5C8
    int get_scrollTop();
    // public System.Void set_scrollTop(System.Int32 value)
    // Offset: 0x1A3C60C
    void set_scrollTop(int value);
    // public System.Int32 get_contentHeight()
    // Offset: 0x1A3C63C
    int get_contentHeight();
    // public System.Int32 get_contentWidth()
    // Offset: 0x1A3C680
    int get_contentWidth();
    // public System.Int32 get_pixelHeight()
    // Offset: 0x1A3C6C4
    int get_pixelHeight();
    // public System.Int32 get_pixelWidth()
    // Offset: 0x1A3C708
    int get_pixelWidth();
    // public System.Int32 get_scrollHeight()
    // Offset: 0x1A3C74C
    int get_scrollHeight();
    // public System.Int32 get_scrollWidth()
    // Offset: 0x1A3C790
    int get_scrollWidth();
    // public System.Boolean get_Checked()
    // Offset: 0x1A3C7D4
    bool get_Checked();
    // public System.Void set_Checked(System.Boolean value)
    // Offset: 0x1A3C894
    void set_Checked(bool value);
    // public UnityEngine.Texture2D get_image()
    // Offset: 0x1A3C910
    ::UnityEngine::Texture2D* get_image();
    // public System.Void set_image(UnityEngine.Texture2D value)
    // Offset: 0x1A3CA18
    void set_image(::UnityEngine::Texture2D* value);
    // public PowerUI.Element get_firstChild()
    // Offset: 0x1A3BD70
    ::PowerUI::Element* get_firstChild();
    // public PowerUI.Element get_lastChild()
    // Offset: 0x1A3CBB4
    ::PowerUI::Element* get_lastChild();
    // public PowerUI.Element get_previousElementSibling()
    // Offset: 0x1A3CC6C
    ::PowerUI::Element* get_previousElementSibling();
    // public PowerUI.Element get_nextElementSibling()
    // Offset: 0x1A3CDC0
    ::PowerUI::Element* get_nextElementSibling();
    // public PowerUI.Element get_previousSibling()
    // Offset: 0x1A3CE9C
    ::PowerUI::Element* get_previousSibling();
    // public PowerUI.Element get_nextSibling()
    // Offset: 0x1A3CEF8
    ::PowerUI::Element* get_nextSibling();
    // public PowerUI.UIAnimation animate(System.String css, System.Single constantSpeedTime, System.Single timeToAccelAndDecel)
    // Offset: 0x1A3CF54
    ::PowerUI::UIAnimation* animate(::StringW css, float constantSpeedTime, float timeToAccelAndDecel);
    // public PowerUI.UIAnimation animate(System.String css, System.Single constantSpeedTime)
    // Offset: 0x1A3CFF8
    ::PowerUI::UIAnimation* animate(::StringW css, float constantSpeedTime);
    // public PowerUI.UIAnimation animate(System.String css, System.Single constantSpeedTime, System.Single timeToAccelerate, System.Single timeToDecelerate)
    // Offset: 0x1A3CF5C
    ::PowerUI::UIAnimation* animate(::StringW css, float constantSpeedTime, float timeToAccelerate, float timeToDecelerate);
    // public System.Boolean get_focused()
    // Offset: 0x1A3D004
    bool get_focused();
    // public System.Void set_focused(System.Boolean value)
    // Offset: 0x1A3D078
    void set_focused(bool value);
    // public System.Int32 get_childIndex()
    // Offset: 0x1A3CCFC
    int get_childIndex();
    // public System.Int32 get_childElementCount()
    // Offset: 0x1A3D084
    int get_childElementCount();
    // public PowerUI.Element get_parentNode()
    // Offset: 0x1A3D0E4
    ::PowerUI::Element* get_parentNode();
    // public System.Void set_parentNode(PowerUI.Element value)
    // Offset: 0x1A3D0EC
    void set_parentNode(::PowerUI::Element* value);
    // public PowerUI.Css.ComputedStyle get_computedStyle()
    // Offset: 0x1A3D134
    ::PowerUI::Css::ComputedStyle* get_computedStyle();
    // public PowerUI.Css.ElementStyle get_style()
    // Offset: 0x1A3BCC0
    ::PowerUI::Css::ElementStyle* get_style();
    // public System.Boolean OnClickEvent(PowerUI.UIEvent clickEvent)
    // Offset: 0x1A3D160
    bool OnClickEvent(::PowerUI::UIEvent* clickEvent);
    // public System.Boolean MouseWasDown()
    // Offset: 0x1A3D4A4
    bool MouseWasDown();
    // public System.Boolean RunClick(PowerUI.UIEvent clickEvent)
    // Offset: 0x1A3D5EC
    bool RunClick(::PowerUI::UIEvent* clickEvent);
    // public System.Boolean GotClicked(PowerUI.UIEvent clickEvent)
    // Offset: 0x1A3D9A0
    bool GotClicked(::PowerUI::UIEvent* clickEvent);
    // public System.Boolean RunClickOnKids(PowerUI.UIEvent clickEvent)
    // Offset: 0x1A3D800
    bool RunClickOnKids(::PowerUI::UIEvent* clickEvent);
    // public System.Void FontLoaded(PowerUI.DynamicFont font)
    // Offset: 0x1A3DA1C
    void FontLoaded(::PowerUI::DynamicFont* font);
    // public PowerUI.Text3D get_text3D()
    // Offset: 0x1A3DB4C
    ::PowerUI::Text3D* get_text3D();
    // public System.Void PositionGlobally(PowerUI.Css.ComputedStyle relativeTo)
    // Offset: 0x1A3DBCC
    void PositionGlobally(::PowerUI::Css::ComputedStyle* relativeTo);
    // public System.Void PositionLocally()
    // Offset: 0x1A3E238
    void PositionLocally();
    // public System.Boolean IsMousedOver()
    // Offset: 0x1A3E948
    bool IsMousedOver();
    // public System.Boolean MouseOver(PowerUI.UIEvent mouseEvent)
    // Offset: 0x1A3E9EC
    bool MouseOver(::PowerUI::UIEvent* mouseEvent);
    // public System.Void MouseOut(PowerUI.UIEvent mouseEvent)
    // Offset: 0x1A3EFD8
    void MouseOut(::PowerUI::UIEvent* mouseEvent);
    // public System.Void OnMouseMoveEvent(PowerUI.UIEvent moveEvent)
    // Offset: 0x1A3F150
    void OnMouseMoveEvent(::PowerUI::UIEvent* moveEvent);
    // public System.Boolean RunMouseOverOnKids(PowerUI.UIEvent mouseEvent)
    // Offset: 0x1A3F24C
    bool RunMouseOverOnKids(::PowerUI::UIEvent* mouseEvent);
    // public System.Boolean RunMouseOver(PowerUI.UIEvent mouseEvent)
    // Offset: 0x1A3F3D8
    bool RunMouseOver(::PowerUI::UIEvent* mouseEvent);
    // public System.Boolean RunBlocked(System.String attribute, PowerUI.UIEvent uiEvent)
    // Offset: 0x1A3F5EC
    bool RunBlocked(::StringW attribute, ::PowerUI::UIEvent* uiEvent);
    // public System.Object Run(System.String attribute, params System.Object[] args)
    // Offset: 0x1A393AC
    ::Il2CppObject* Run(::StringW attribute, ::ArrayW<::Il2CppObject*> args);
    // public System.Object RunLiteral(System.String attribute, System.Object[] args)
    // Offset: 0x1A3F754
    ::Il2CppObject* RunLiteral(::StringW attribute, ::ArrayW<::Il2CppObject*> args);
    // public System.Void Lettering()
    // Offset: 0x1A3FC4C
    void Lettering();
    // System.Void Lettering(System.Collections.Generic.List`1<PowerUI.Element> into, PowerUI.Element parent)
    // Offset: 0x1A3FCC8
    void Lettering(::System::Collections::Generic::List_1<::PowerUI::Element*>* into, ::PowerUI::Element* parent);
    // public System.Boolean get_focusable()
    // Offset: 0x1A40144
    bool get_focusable();
    // public PowerUI.Element GetFocusableAbove()
    // Offset: 0x1A401D8
    ::PowerUI::Element* GetFocusableAbove();
    // public PowerUI.Element GetFocusableBelow()
    // Offset: 0x1A40828
    ::PowerUI::Element* GetFocusableBelow();
    // public PowerUI.Element GetFocusableLeft()
    // Offset: 0x1A40C74
    ::PowerUI::Element* GetFocusableLeft();
    // public PowerUI.Element GetFocusableRight()
    // Offset: 0x1A4112C
    ::PowerUI::Element* GetFocusableRight();
    // private PowerUI.Element GetFocusableOverride(System.String direction)
    // Offset: 0x1A4057C
    ::PowerUI::Element* GetFocusableOverride(::StringW direction);
    // public PowerUI.Element GetFocusedNext()
    // Offset: 0x1A41578
    ::PowerUI::Element* GetFocusedNext();
    // public UnityEngine.Vector2 AxisDistanceFrom(System.Single x, System.Single y)
    // Offset: 0x1A41580
    ::UnityEngine::Vector2 AxisDistanceFrom(float x, float y);
    // private System.Single HorizontalDistanceRatio(System.Single x, System.Single y)
    // Offset: 0x1A41070
    float HorizontalDistanceRatio(float x, float y);
    // private System.Single VerticalDistanceRatio(System.Single x, System.Single y)
    // Offset: 0x1A4076C
    float VerticalDistanceRatio(float x, float y);
    // public System.Single DistanceFromFast(System.Single x, System.Single y)
    // Offset: 0x1A406D0
    float DistanceFromFast(float x, float y);
    // public System.Single DistanceFrom(System.Single x, System.Single y)
    // Offset: 0x1A41644
    float DistanceFrom(float x, float y);
    // public System.Boolean IsLeftOf(PowerUI.Css.ComputedStyle computed)
    // Offset: 0x1A41018
    bool IsLeftOf(::PowerUI::Css::ComputedStyle* computed);
    // public System.Boolean IsRightOf(PowerUI.Css.ComputedStyle computed)
    // Offset: 0x1A414D0
    bool IsRightOf(::PowerUI::Css::ComputedStyle* computed);
    // public System.Boolean IsAbove(PowerUI.Css.ComputedStyle computed)
    // Offset: 0x1A40678
    bool IsAbove(::PowerUI::Css::ComputedStyle* computed);
    // public System.Boolean IsBelow(PowerUI.Css.ComputedStyle computed)
    // Offset: 0x1A40BCC
    bool IsBelow(::PowerUI::Css::ComputedStyle* computed);
    // public PowerUI.CanvasContext getContext(System.String text)
    // Offset: 0x1A416E8
    ::PowerUI::CanvasContext* getContext(::StringW text);
    // public PowerUI.Element GetForm()
    // Offset: 0x1A4186C
    ::PowerUI::Element* GetForm();
    // public System.Void submit()
    // Offset: 0x1A418E8
    void submit();
    // public PowerUI.Element get_formElement()
    // Offset: 0x1A41ED0
    ::PowerUI::Element* get_formElement();
    // public PowerUI.FormTag get_form()
    // Offset: 0x1A41908
    ::PowerUI::FormTag* get_form();
    // public System.String get_value()
    // Offset: 0x1A41ED4
    ::StringW get_value();
    // public System.Void set_value(System.String value)
    // Offset: 0x1A4206C
    void set_value(::StringW value);
    // public System.String get_content()
    // Offset: 0x1A420D0
    ::StringW get_content();
    // public System.Void set_content(System.String value)
    // Offset: 0x1A42268
    void set_content(::StringW value);
    // public System.Int32 get_selectedIndex()
    // Offset: 0x1A422CC
    int get_selectedIndex();
    // public System.Void set_selectedIndex(System.Int32 value)
    // Offset: 0x1A42364
    void set_selectedIndex(int value);
    // public System.Void add(PowerUI.Element element)
    // Offset: 0x1A42418
    void add(::PowerUI::Element* element);
    // public override System.Void OnChildrenLoaded()
    // Offset: 0x1A390F0
    // Implemented from: Wrench.MLElement
    // Base method: System.Void MLElement::OnChildrenLoaded()
    void OnChildrenLoaded();
    // public override System.Void SetTag(System.String tag)
    // Offset: 0x1A3A544
    // Implemented from: Wrench.MLElement
    // Base method: System.Void MLElement::SetTag(System.String tag)
    void SetTag(::StringW tag);
    // public override Wrench.TagHandler GetHandler()
    // Offset: 0x1A3A678
    // Implemented from: Wrench.MLElement
    // Base method: Wrench.TagHandler MLElement::GetHandler()
    ::Wrench::TagHandler* GetHandler();
    // protected override System.String GetVariableValue(System.String variableString)
    // Offset: 0x1A3A910
    // Implemented from: Wrench.MLElement
    // Base method: System.String MLElement::GetVariableValue(System.String variableString)
    ::StringW GetVariableValue(::StringW variableString);
    // protected override Wrench.MLElement CreateTagElement(Wrench.MLLexer lexer)
    // Offset: 0x1A3A994
    // Implemented from: Wrench.MLElement
    // Base method: Wrench.MLElement MLElement::CreateTagElement(Wrench.MLLexer lexer)
    ::Wrench::MLElement* CreateTagElement(::Wrench::MLLexer* lexer);
    // protected override Wrench.MLVariableElement CreateVariableElement()
    // Offset: 0x1A3AB50
    // Implemented from: Wrench.MLElement
    // Base method: Wrench.MLVariableElement MLElement::CreateVariableElement()
    ::Wrench::MLVariableElement* CreateVariableElement();
    // protected override Wrench.MLTextElement CreateTextElement()
    // Offset: 0x1A3ABD0
    // Implemented from: Wrench.MLElement
    // Base method: Wrench.MLTextElement MLElement::CreateTextElement()
    ::Wrench::MLTextElement* CreateTextElement();
    // public override System.Void ResetVariable(System.String name)
    // Offset: 0x1A3AC50
    // Implemented from: Wrench.MLElement
    // Base method: System.Void MLElement::ResetVariable(System.String name)
    void ResetVariable(::StringW name);
    // public override System.Void ResetAllVariables()
    // Offset: 0x1A3AD40
    // Implemented from: Wrench.MLElement
    // Base method: System.Void MLElement::ResetAllVariables()
    void ResetAllVariables();
    // public override System.Void ToString(System.Text.StringBuilder builder)
    // Offset: 0x1A3AF28
    // Implemented from: Wrench.MLElement
    // Base method: System.Void MLElement::ToString(System.Text.StringBuilder builder)
    void ToString(::System::Text::StringBuilder* builder);
    // public override System.String ToString()
    // Offset: 0x1A3B0A4
    // Implemented from: Wrench.MLElement
    // Base method: System.String MLElement::ToString()
    ::StringW ToString();
  }; // PowerUI.Element
  #pragma pack(pop)
  static check_size<sizeof(Element), 232 + sizeof(::PowerUI::Element*)> __PowerUI_ElementSizeCheck;
  static_assert(sizeof(Element) == 0xF0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Element::AddToAttributeLookups
// Il2CppName: AddToAttributeLookups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)()>(&PowerUI::Element::AddToAttributeLookups)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "AddToAttributeLookups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::AddToAttributeLookup
// Il2CppName: AddToAttributeLookup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::StringW, ::PowerUI::AttributeLookup*)>(&PowerUI::Element::AddToAttributeLookup)> {
  static const MethodInfo* get() {
    static auto* attrib = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* lookup = &::il2cpp_utils::GetClassFromName("PowerUI", "AttributeLookup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "AddToAttributeLookup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attrib, lookup});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::add_OnKeyUp
// Il2CppName: add_OnKeyUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::add_OnKeyUp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "add_OnKeyUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::remove_OnKeyUp
// Il2CppName: remove_OnKeyUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::remove_OnKeyUp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "remove_OnKeyUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::add_OnKeyDown
// Il2CppName: add_OnKeyDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::add_OnKeyDown)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "add_OnKeyDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::remove_OnKeyDown
// Il2CppName: remove_OnKeyDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::remove_OnKeyDown)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "remove_OnKeyDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::add_OnMouseUp
// Il2CppName: add_OnMouseUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::add_OnMouseUp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "add_OnMouseUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::remove_OnMouseUp
// Il2CppName: remove_OnMouseUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::remove_OnMouseUp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "remove_OnMouseUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::add_OnMouseOut
// Il2CppName: add_OnMouseOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::add_OnMouseOut)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "add_OnMouseOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::remove_OnMouseOut
// Il2CppName: remove_OnMouseOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::remove_OnMouseOut)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "remove_OnMouseOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::add_OnMouseDown
// Il2CppName: add_OnMouseDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::add_OnMouseDown)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "add_OnMouseDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::remove_OnMouseDown
// Il2CppName: remove_OnMouseDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::remove_OnMouseDown)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "remove_OnMouseDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::add_OnMouseMove
// Il2CppName: add_OnMouseMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::add_OnMouseMove)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "add_OnMouseMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::remove_OnMouseMove
// Il2CppName: remove_OnMouseMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::remove_OnMouseMove)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "remove_OnMouseMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::add_OnMouseOver
// Il2CppName: add_OnMouseOver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::add_OnMouseOver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "add_OnMouseOver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::remove_OnMouseOver
// Il2CppName: remove_OnMouseOver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::remove_OnMouseOver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "remove_OnMouseOver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::add_OnLoadedEvent
// Il2CppName: add_OnLoadedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::add_OnLoadedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "add_OnLoadedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::remove_OnLoadedEvent
// Il2CppName: remove_OnLoadedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::remove_OnLoadedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "remove_OnLoadedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::add_OnFocus
// Il2CppName: add_OnFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::add_OnFocus)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "add_OnFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::remove_OnFocus
// Il2CppName: remove_OnFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::remove_OnFocus)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "remove_OnFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::add_OnBlur
// Il2CppName: add_OnBlur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::add_OnBlur)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "add_OnBlur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::remove_OnBlur
// Il2CppName: remove_OnBlur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::remove_OnBlur)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "remove_OnBlur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::add_OnClick
// Il2CppName: add_OnClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::add_OnClick)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "add_OnClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::remove_OnClick
// Il2CppName: remove_OnClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::OnDomEvent*)>(&PowerUI::Element::remove_OnClick)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnDomEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "remove_OnClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Element::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Element::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Element::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Element::SetDocument
// Il2CppName: SetDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::Document*)>(&PowerUI::Element::SetDocument)> {
  static const MethodInfo* get() {
    static auto* document = &::il2cpp_utils::GetClassFromName("PowerUI", "Document")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "SetDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{document});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::OnLoaded
// Il2CppName: OnLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::OnLoaded)> {
  static const MethodInfo* get() {
    static auto* objectLoaded = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "OnLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectLoaded});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::Focus
// Il2CppName: Focus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)()>(&PowerUI::Element::Focus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "Focus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::Unfocus
// Il2CppName: Unfocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)()>(&PowerUI::Element::Unfocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "Unfocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::OnKeyPress
// Il2CppName: OnKeyPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::UIEvent*)>(&PowerUI::Element::OnKeyPress)> {
  static const MethodInfo* get() {
    static auto* pressEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "OnKeyPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pressEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_HasBackground
// Il2CppName: get_HasBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)()>(&PowerUI::Element::get_HasBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_HasBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::RefreshSelector
// Il2CppName: RefreshSelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::Css::SelectorType, ::StringW)>(&PowerUI::Element::RefreshSelector)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "SelectorType")->byval_arg;
    static auto* selector = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "RefreshSelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, selector});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::getElementByTagName
// Il2CppName: getElementByTagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::getElementByTagName)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "getElementByTagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::getElementsByTagName
// Il2CppName: getElementsByTagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::PowerUI::Element*>* (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::getElementsByTagName)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "getElementsByTagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::getElementsByTagName
// Il2CppName: getElementsByTagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::PowerUI::Element*>* (PowerUI::Element::*)(::StringW, bool)>(&PowerUI::Element::getElementsByTagName)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stopWithOne = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "getElementsByTagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag, stopWithOne});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::getElementsByTagName
// Il2CppName: getElementsByTagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)(::StringW, bool, ::System::Collections::Generic::List_1<::PowerUI::Element*>*)>(&PowerUI::Element::getElementsByTagName)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stopWithOne = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* results = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PowerUI", "Element")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "getElementsByTagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag, stopWithOne, results});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::getElementsByClassName
// Il2CppName: getElementsByClassName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::PowerUI::Element*>* (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::getElementsByClassName)> {
  static const MethodInfo* get() {
    static auto* className = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "getElementsByClassName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{className});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::getElementsByClassName
// Il2CppName: getElementsByClassName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::ArrayW<::StringW>, ::System::Collections::Generic::List_1<::PowerUI::Element*>*)>(&PowerUI::Element::getElementsByClassName)> {
  static const MethodInfo* get() {
    static auto* classes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* results = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PowerUI", "Element")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "getElementsByClassName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{classes, results});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::getElementsByAttribute
// Il2CppName: getElementsByAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::PowerUI::Element*>* (PowerUI::Element::*)(::StringW, ::StringW)>(&PowerUI::Element::getElementsByAttribute)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "getElementsByAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::getElementsWithProperty
// Il2CppName: getElementsWithProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::PowerUI::Element*>* (PowerUI::Element::*)(::StringW, ::StringW)>(&PowerUI::Element::getElementsWithProperty)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "getElementsWithProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::getElementsByAttribute
// Il2CppName: getElementsByAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::StringW, ::StringW, ::System::Collections::Generic::List_1<::PowerUI::Element*>*)>(&PowerUI::Element::getElementsByAttribute)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* results = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PowerUI", "Element")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "getElementsByAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, value, results});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::getElementByAttribute
// Il2CppName: getElementByAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)(::StringW, ::StringW)>(&PowerUI::Element::getElementByAttribute)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "getElementByAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::SetWidthForKids
// Il2CppName: SetWidthForKids
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::Css::ComputedStyle*)>(&PowerUI::Element::SetWidthForKids)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "SetWidthForKids", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::SetHeightForKids
// Il2CppName: SetHeightForKids
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::Css::ComputedStyle*)>(&PowerUI::Element::SetHeightForKids)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "SetHeightForKids", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::SetDimensionForKids
// Il2CppName: SetDimensionForKids
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::Css::ComputedStyle*, bool)>(&PowerUI::Element::SetDimensionForKids)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    static auto* isWidth = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "SetDimensionForKids", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent, isWidth});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::ToTextString
// Il2CppName: ToTextString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Element::*)()>(&PowerUI::Element::ToTextString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "ToTextString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::appendTextContent
// Il2CppName: appendTextContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::appendTextContent)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "appendTextContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::appendInnerHTML
// Il2CppName: appendInnerHTML
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::appendInnerHTML)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "appendInnerHTML", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_textContent
// Il2CppName: get_textContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Element::*)()>(&PowerUI::Element::get_textContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_textContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_textContent
// Il2CppName: set_textContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::set_textContent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_textContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_tagName
// Il2CppName: get_tagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Element::*)()>(&PowerUI::Element::get_tagName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_tagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_className
// Il2CppName: get_className
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Element::*)()>(&PowerUI::Element::get_className)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_className", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_className
// Il2CppName: set_className
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::set_className)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_className", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Element::*)()>(&PowerUI::Element::get_id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_id
// Il2CppName: set_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::set_id)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_innerHTML
// Il2CppName: get_innerHTML
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Element::*)()>(&PowerUI::Element::get_innerHTML)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_innerHTML", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_innerHTML
// Il2CppName: set_innerHTML
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::set_innerHTML)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_innerHTML", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::RemovedFromDOM
// Il2CppName: RemovedFromDOM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)()>(&PowerUI::Element::RemovedFromDOM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "RemovedFromDOM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::WentOffScreen
// Il2CppName: WentOffScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)()>(&PowerUI::Element::WentOffScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "WentOffScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::ClearChildNodes
// Il2CppName: ClearChildNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)()>(&PowerUI::Element::ClearChildNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "ClearChildNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_childNodes
// Il2CppName: get_childNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::PowerUI::Element*>* (PowerUI::Element::*)()>(&PowerUI::Element::get_childNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_childNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_childNodes
// Il2CppName: set_childNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::System::Collections::Generic::List_1<::PowerUI::Element*>*)>(&PowerUI::Element::set_childNodes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PowerUI", "Element")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_childNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::appendChild
// Il2CppName: appendChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::appendChild)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "appendChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::appendChild
// Il2CppName: appendChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::Element*)>(&PowerUI::Element::appendChild)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "appendChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::AppendNewChild
// Il2CppName: AppendNewChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::Element*)>(&PowerUI::Element::AppendNewChild)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "AppendNewChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_isRooted
// Il2CppName: get_isRooted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)()>(&PowerUI::Element::get_isRooted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_isRooted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_document
// Il2CppName: get_document
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Document* (PowerUI::Element::*)()>(&PowerUI::Element::get_document)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_document", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_contentDocument
// Il2CppName: get_contentDocument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Document* (PowerUI::Element::*)()>(&PowerUI::Element::get_contentDocument)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_contentDocument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::isChild
// Il2CppName: isChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)(::PowerUI::Element*)>(&PowerUI::Element::isChild)> {
  static const MethodInfo* get() {
    static auto* childElement = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "isChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{childElement});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::removeChild
// Il2CppName: removeChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::Element*)>(&PowerUI::Element::removeChild)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "removeChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::scrollBy
// Il2CppName: scrollBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(int, int)>(&PowerUI::Element::scrollBy)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "scrollBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::scrollTo
// Il2CppName: scrollTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(int, int)>(&PowerUI::Element::scrollTo)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "scrollTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::RequireLayout
// Il2CppName: RequireLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)()>(&PowerUI::Element::RequireLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "RequireLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_offsetLeft
// Il2CppName: get_offsetLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Element::*)()>(&PowerUI::Element::get_offsetLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_offsetLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_offsetLeft
// Il2CppName: set_offsetLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(int)>(&PowerUI::Element::set_offsetLeft)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_offsetLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_offsetTop
// Il2CppName: get_offsetTop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Element::*)()>(&PowerUI::Element::get_offsetTop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_offsetTop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_offsetTop
// Il2CppName: set_offsetTop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(int)>(&PowerUI::Element::set_offsetTop)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_offsetTop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_scrollLeft
// Il2CppName: get_scrollLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Element::*)()>(&PowerUI::Element::get_scrollLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_scrollLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_scrollLeft
// Il2CppName: set_scrollLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(int)>(&PowerUI::Element::set_scrollLeft)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_scrollLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_scrollTop
// Il2CppName: get_scrollTop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Element::*)()>(&PowerUI::Element::get_scrollTop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_scrollTop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_scrollTop
// Il2CppName: set_scrollTop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(int)>(&PowerUI::Element::set_scrollTop)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_scrollTop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_contentHeight
// Il2CppName: get_contentHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Element::*)()>(&PowerUI::Element::get_contentHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_contentHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_contentWidth
// Il2CppName: get_contentWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Element::*)()>(&PowerUI::Element::get_contentWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_contentWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_pixelHeight
// Il2CppName: get_pixelHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Element::*)()>(&PowerUI::Element::get_pixelHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_pixelHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_pixelWidth
// Il2CppName: get_pixelWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Element::*)()>(&PowerUI::Element::get_pixelWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_pixelWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_scrollHeight
// Il2CppName: get_scrollHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Element::*)()>(&PowerUI::Element::get_scrollHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_scrollHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_scrollWidth
// Il2CppName: get_scrollWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Element::*)()>(&PowerUI::Element::get_scrollWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_scrollWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_Checked
// Il2CppName: get_Checked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)()>(&PowerUI::Element::get_Checked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_Checked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_Checked
// Il2CppName: set_Checked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(bool)>(&PowerUI::Element::set_Checked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_Checked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_image
// Il2CppName: get_image
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (PowerUI::Element::*)()>(&PowerUI::Element::get_image)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_image", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_image
// Il2CppName: set_image
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::UnityEngine::Texture2D*)>(&PowerUI::Element::set_image)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_image", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_firstChild
// Il2CppName: get_firstChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)()>(&PowerUI::Element::get_firstChild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_firstChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_lastChild
// Il2CppName: get_lastChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)()>(&PowerUI::Element::get_lastChild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_lastChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_previousElementSibling
// Il2CppName: get_previousElementSibling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)()>(&PowerUI::Element::get_previousElementSibling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_previousElementSibling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_nextElementSibling
// Il2CppName: get_nextElementSibling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)()>(&PowerUI::Element::get_nextElementSibling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_nextElementSibling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_previousSibling
// Il2CppName: get_previousSibling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)()>(&PowerUI::Element::get_previousSibling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_previousSibling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_nextSibling
// Il2CppName: get_nextSibling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)()>(&PowerUI::Element::get_nextSibling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_nextSibling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::animate
// Il2CppName: animate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::UIAnimation* (PowerUI::Element::*)(::StringW, float, float)>(&PowerUI::Element::animate)> {
  static const MethodInfo* get() {
    static auto* css = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* constantSpeedTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* timeToAccelAndDecel = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "animate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{css, constantSpeedTime, timeToAccelAndDecel});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::animate
// Il2CppName: animate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::UIAnimation* (PowerUI::Element::*)(::StringW, float)>(&PowerUI::Element::animate)> {
  static const MethodInfo* get() {
    static auto* css = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* constantSpeedTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "animate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{css, constantSpeedTime});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::animate
// Il2CppName: animate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::UIAnimation* (PowerUI::Element::*)(::StringW, float, float, float)>(&PowerUI::Element::animate)> {
  static const MethodInfo* get() {
    static auto* css = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* constantSpeedTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* timeToAccelerate = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* timeToDecelerate = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "animate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{css, constantSpeedTime, timeToAccelerate, timeToDecelerate});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_focused
// Il2CppName: get_focused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)()>(&PowerUI::Element::get_focused)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_focused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_focused
// Il2CppName: set_focused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(bool)>(&PowerUI::Element::set_focused)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_focused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_childIndex
// Il2CppName: get_childIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Element::*)()>(&PowerUI::Element::get_childIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_childIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_childElementCount
// Il2CppName: get_childElementCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Element::*)()>(&PowerUI::Element::get_childElementCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_childElementCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_parentNode
// Il2CppName: get_parentNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)()>(&PowerUI::Element::get_parentNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_parentNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_parentNode
// Il2CppName: set_parentNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::Element*)>(&PowerUI::Element::set_parentNode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_parentNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_computedStyle
// Il2CppName: get_computedStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Css::ComputedStyle* (PowerUI::Element::*)()>(&PowerUI::Element::get_computedStyle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_computedStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_style
// Il2CppName: get_style
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Css::ElementStyle* (PowerUI::Element::*)()>(&PowerUI::Element::get_style)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_style", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::OnClickEvent
// Il2CppName: OnClickEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)(::PowerUI::UIEvent*)>(&PowerUI::Element::OnClickEvent)> {
  static const MethodInfo* get() {
    static auto* clickEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "OnClickEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clickEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::MouseWasDown
// Il2CppName: MouseWasDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)()>(&PowerUI::Element::MouseWasDown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "MouseWasDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::RunClick
// Il2CppName: RunClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)(::PowerUI::UIEvent*)>(&PowerUI::Element::RunClick)> {
  static const MethodInfo* get() {
    static auto* clickEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "RunClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clickEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::GotClicked
// Il2CppName: GotClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)(::PowerUI::UIEvent*)>(&PowerUI::Element::GotClicked)> {
  static const MethodInfo* get() {
    static auto* clickEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "GotClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clickEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::RunClickOnKids
// Il2CppName: RunClickOnKids
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)(::PowerUI::UIEvent*)>(&PowerUI::Element::RunClickOnKids)> {
  static const MethodInfo* get() {
    static auto* clickEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "RunClickOnKids", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clickEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::FontLoaded
// Il2CppName: FontLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::DynamicFont*)>(&PowerUI::Element::FontLoaded)> {
  static const MethodInfo* get() {
    static auto* font = &::il2cpp_utils::GetClassFromName("PowerUI", "DynamicFont")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "FontLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{font});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_text3D
// Il2CppName: get_text3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Text3D* (PowerUI::Element::*)()>(&PowerUI::Element::get_text3D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_text3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::PositionGlobally
// Il2CppName: PositionGlobally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::Css::ComputedStyle*)>(&PowerUI::Element::PositionGlobally)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "PositionGlobally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::PositionLocally
// Il2CppName: PositionLocally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)()>(&PowerUI::Element::PositionLocally)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "PositionLocally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::IsMousedOver
// Il2CppName: IsMousedOver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)()>(&PowerUI::Element::IsMousedOver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "IsMousedOver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::MouseOver
// Il2CppName: MouseOver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)(::PowerUI::UIEvent*)>(&PowerUI::Element::MouseOver)> {
  static const MethodInfo* get() {
    static auto* mouseEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "MouseOver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mouseEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::MouseOut
// Il2CppName: MouseOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::UIEvent*)>(&PowerUI::Element::MouseOut)> {
  static const MethodInfo* get() {
    static auto* mouseEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "MouseOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mouseEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::OnMouseMoveEvent
// Il2CppName: OnMouseMoveEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::UIEvent*)>(&PowerUI::Element::OnMouseMoveEvent)> {
  static const MethodInfo* get() {
    static auto* moveEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "OnMouseMoveEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{moveEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::RunMouseOverOnKids
// Il2CppName: RunMouseOverOnKids
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)(::PowerUI::UIEvent*)>(&PowerUI::Element::RunMouseOverOnKids)> {
  static const MethodInfo* get() {
    static auto* mouseEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "RunMouseOverOnKids", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mouseEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::RunMouseOver
// Il2CppName: RunMouseOver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)(::PowerUI::UIEvent*)>(&PowerUI::Element::RunMouseOver)> {
  static const MethodInfo* get() {
    static auto* mouseEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "RunMouseOver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mouseEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::RunBlocked
// Il2CppName: RunBlocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)(::StringW, ::PowerUI::UIEvent*)>(&PowerUI::Element::RunBlocked)> {
  static const MethodInfo* get() {
    static auto* attribute = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* uiEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "RunBlocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attribute, uiEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PowerUI::Element::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&PowerUI::Element::Run)> {
  static const MethodInfo* get() {
    static auto* attribute = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attribute, args});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::RunLiteral
// Il2CppName: RunLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PowerUI::Element::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&PowerUI::Element::RunLiteral)> {
  static const MethodInfo* get() {
    static auto* attribute = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "RunLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attribute, args});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::Lettering
// Il2CppName: Lettering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)()>(&PowerUI::Element::Lettering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "Lettering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::Lettering
// Il2CppName: Lettering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::System::Collections::Generic::List_1<::PowerUI::Element*>*, ::PowerUI::Element*)>(&PowerUI::Element::Lettering)> {
  static const MethodInfo* get() {
    static auto* into = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("PowerUI", "Element")})->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "Lettering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{into, parent});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_focusable
// Il2CppName: get_focusable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)()>(&PowerUI::Element::get_focusable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_focusable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::GetFocusableAbove
// Il2CppName: GetFocusableAbove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)()>(&PowerUI::Element::GetFocusableAbove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "GetFocusableAbove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::GetFocusableBelow
// Il2CppName: GetFocusableBelow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)()>(&PowerUI::Element::GetFocusableBelow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "GetFocusableBelow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::GetFocusableLeft
// Il2CppName: GetFocusableLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)()>(&PowerUI::Element::GetFocusableLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "GetFocusableLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::GetFocusableRight
// Il2CppName: GetFocusableRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)()>(&PowerUI::Element::GetFocusableRight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "GetFocusableRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::GetFocusableOverride
// Il2CppName: GetFocusableOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::GetFocusableOverride)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "GetFocusableOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::GetFocusedNext
// Il2CppName: GetFocusedNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)()>(&PowerUI::Element::GetFocusedNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "GetFocusedNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::AxisDistanceFrom
// Il2CppName: AxisDistanceFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (PowerUI::Element::*)(float, float)>(&PowerUI::Element::AxisDistanceFrom)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "AxisDistanceFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::HorizontalDistanceRatio
// Il2CppName: HorizontalDistanceRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::Element::*)(float, float)>(&PowerUI::Element::HorizontalDistanceRatio)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "HorizontalDistanceRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::VerticalDistanceRatio
// Il2CppName: VerticalDistanceRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::Element::*)(float, float)>(&PowerUI::Element::VerticalDistanceRatio)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "VerticalDistanceRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::DistanceFromFast
// Il2CppName: DistanceFromFast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::Element::*)(float, float)>(&PowerUI::Element::DistanceFromFast)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "DistanceFromFast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::DistanceFrom
// Il2CppName: DistanceFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::Element::*)(float, float)>(&PowerUI::Element::DistanceFrom)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "DistanceFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::IsLeftOf
// Il2CppName: IsLeftOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)(::PowerUI::Css::ComputedStyle*)>(&PowerUI::Element::IsLeftOf)> {
  static const MethodInfo* get() {
    static auto* computed = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "IsLeftOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{computed});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::IsRightOf
// Il2CppName: IsRightOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)(::PowerUI::Css::ComputedStyle*)>(&PowerUI::Element::IsRightOf)> {
  static const MethodInfo* get() {
    static auto* computed = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "IsRightOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{computed});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::IsAbove
// Il2CppName: IsAbove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)(::PowerUI::Css::ComputedStyle*)>(&PowerUI::Element::IsAbove)> {
  static const MethodInfo* get() {
    static auto* computed = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "IsAbove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{computed});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::IsBelow
// Il2CppName: IsBelow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Element::*)(::PowerUI::Css::ComputedStyle*)>(&PowerUI::Element::IsBelow)> {
  static const MethodInfo* get() {
    static auto* computed = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "IsBelow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{computed});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::getContext
// Il2CppName: getContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::CanvasContext* (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::getContext)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "getContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::GetForm
// Il2CppName: GetForm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)()>(&PowerUI::Element::GetForm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "GetForm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::submit
// Il2CppName: submit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)()>(&PowerUI::Element::submit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "submit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_formElement
// Il2CppName: get_formElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Element::*)()>(&PowerUI::Element::get_formElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_formElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_form
// Il2CppName: get_form
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::FormTag* (PowerUI::Element::*)()>(&PowerUI::Element::get_form)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_form", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_value
// Il2CppName: get_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Element::*)()>(&PowerUI::Element::get_value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_value
// Il2CppName: set_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::set_value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_content
// Il2CppName: get_content
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Element::*)()>(&PowerUI::Element::get_content)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_content", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_content
// Il2CppName: set_content
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::set_content)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_content", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::get_selectedIndex
// Il2CppName: get_selectedIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Element::*)()>(&PowerUI::Element::get_selectedIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "get_selectedIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::set_selectedIndex
// Il2CppName: set_selectedIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(int)>(&PowerUI::Element::set_selectedIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "set_selectedIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::add
// Il2CppName: add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::PowerUI::Element*)>(&PowerUI::Element::add)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::OnChildrenLoaded
// Il2CppName: OnChildrenLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)()>(&PowerUI::Element::OnChildrenLoaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "OnChildrenLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::SetTag
// Il2CppName: SetTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::SetTag)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "SetTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::GetHandler
// Il2CppName: GetHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (PowerUI::Element::*)()>(&PowerUI::Element::GetHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "GetHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::GetVariableValue
// Il2CppName: GetVariableValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::GetVariableValue)> {
  static const MethodInfo* get() {
    static auto* variableString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "GetVariableValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{variableString});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::CreateTagElement
// Il2CppName: CreateTagElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::MLElement* (PowerUI::Element::*)(::Wrench::MLLexer*)>(&PowerUI::Element::CreateTagElement)> {
  static const MethodInfo* get() {
    static auto* lexer = &::il2cpp_utils::GetClassFromName("Wrench", "MLLexer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "CreateTagElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lexer});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::CreateVariableElement
// Il2CppName: CreateVariableElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::MLVariableElement* (PowerUI::Element::*)()>(&PowerUI::Element::CreateVariableElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "CreateVariableElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::CreateTextElement
// Il2CppName: CreateTextElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::MLTextElement* (PowerUI::Element::*)()>(&PowerUI::Element::CreateTextElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "CreateTextElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::ResetVariable
// Il2CppName: ResetVariable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::StringW)>(&PowerUI::Element::ResetVariable)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "ResetVariable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::ResetAllVariables
// Il2CppName: ResetAllVariables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)()>(&PowerUI::Element::ResetAllVariables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "ResetAllVariables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Element::*)(::System::Text::StringBuilder*)>(&PowerUI::Element::ToString)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder});
  }
};
// Writing MetadataGetter for method: PowerUI::Element::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Element::*)()>(&PowerUI::Element::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Element*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
