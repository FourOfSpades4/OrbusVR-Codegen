// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Element
  class Element;
  // Forward declaring type: Document
  class Document;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: DocumentElements
  class DocumentElements;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::DocumentElements);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::DocumentElements*, "PowerUI", "DocumentElements");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.DocumentElements
  // [TokenAttribute] Offset: FFFFFFFF
  class DocumentElements : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerable_1<::PowerUI::Element*>*/ {
    public:
    // Nested type: ::PowerUI::DocumentElements::$IterateThrough$d__3
    class $IterateThrough$d__3;
    // Nested type: ::PowerUI::DocumentElements::$GetEnumerator$d__4
    class $GetEnumerator$d__4;
    public:
    // public PowerUI.Document Document
    // Size: 0x8
    // Offset: 0x10
    ::PowerUI::Document* Document;
    // Field size check
    static_assert(sizeof(::PowerUI::Document*) == 0x8);
    // public System.Boolean SkipChildren
    // Size: 0x1
    // Offset: 0x18
    bool SkipChildren;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::PowerUI::Element*>
    operator ::System::Collections::Generic::IEnumerable_1<::PowerUI::Element*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::PowerUI::Element*>*>(this);
    }
    // Get instance field reference: public PowerUI.Document Document
    [[deprecated("Use field access instead!")]] ::PowerUI::Document*& dyn_Document();
    // Get instance field reference: public System.Boolean SkipChildren
    [[deprecated("Use field access instead!")]] bool& dyn_SkipChildren();
    // public System.Void .ctor(PowerUI.Document document)
    // Offset: 0x18574D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DocumentElements* New_ctor(::PowerUI::Document* document) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::DocumentElements::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DocumentElements*, creationType>(document)));
    }
    // public System.Collections.Generic.IEnumerable`1<PowerUI.Element> IterateThrough(PowerUI.Element element)
    // Offset: 0x1857A3C
    ::System::Collections::Generic::IEnumerable_1<::PowerUI::Element*>* IterateThrough(::PowerUI::Element* element);
    // public System.Collections.Generic.IEnumerator`1<PowerUI.Element> GetEnumerator()
    // Offset: 0x1857B1C
    ::System::Collections::Generic::IEnumerator_1<::PowerUI::Element*>* GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x1857BBC
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
  }; // PowerUI.DocumentElements
  #pragma pack(pop)
  static check_size<sizeof(DocumentElements), 24 + sizeof(bool)> __PowerUI_DocumentElementsSizeCheck;
  static_assert(sizeof(DocumentElements) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::DocumentElements::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::DocumentElements::IterateThrough
// Il2CppName: IterateThrough
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::PowerUI::Element*>* (PowerUI::DocumentElements::*)(::PowerUI::Element*)>(&PowerUI::DocumentElements::IterateThrough)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DocumentElements*), "IterateThrough", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: PowerUI::DocumentElements::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::PowerUI::Element*>* (PowerUI::DocumentElements::*)()>(&PowerUI::DocumentElements::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DocumentElements*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DocumentElements::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (PowerUI::DocumentElements::*)()>(&PowerUI::DocumentElements::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DocumentElements*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
