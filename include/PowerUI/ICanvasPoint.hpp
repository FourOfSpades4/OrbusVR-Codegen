// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: CanvasContext
  class CanvasContext;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: ICanvasPoint
  class ICanvasPoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::ICanvasPoint);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::ICanvasPoint*, "PowerUI", "ICanvasPoint");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.ICanvasPoint
  // [TokenAttribute] Offset: FFFFFFFF
  class ICanvasPoint {
    public:
    // public System.Void RenderLine(PowerUI.CanvasContext context)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RenderLine(::PowerUI::CanvasContext* context);
  }; // PowerUI.ICanvasPoint
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::ICanvasPoint::RenderLine
// Il2CppName: RenderLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ICanvasPoint::*)(::PowerUI::CanvasContext*)>(&PowerUI::ICanvasPoint::RenderLine)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("PowerUI", "CanvasContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ICanvasPoint*), "RenderLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
