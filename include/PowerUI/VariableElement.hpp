// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.Element
#include "PowerUI/Element.hpp"
// Including type: Wrench.MLVariableElement
#include "Wrench/MLVariableElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Document
  class Document;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: VariableElement
  class VariableElement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::VariableElement);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::VariableElement*, "PowerUI", "VariableElement");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x100
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.VariableElement
  // [TokenAttribute] Offset: FFFFFFFF
  class VariableElement : public ::PowerUI::Element/*, public ::Wrench::MLVariableElement*/ {
    public:
    public:
    // private System.String Name
    // Size: 0x8
    // Offset: 0xF0
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String[] Arguments
    // Size: 0x8
    // Offset: 0xF8
    ::ArrayW<::StringW> Arguments;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Wrench::MLVariableElement
    operator ::Wrench::MLVariableElement() noexcept {
      return *reinterpret_cast<::Wrench::MLVariableElement*>(this);
    }
    // Get instance field reference: private System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public System.String[] Arguments
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_Arguments();
    // public System.Void SetVariableName(System.String name)
    // Offset: 0xE1A1AC
    void SetVariableName(::StringW name);
    // public System.Void LoadNow(System.Boolean innerElement)
    // Offset: 0xE1A1FC
    void LoadNow(bool innerElement);
    // public System.String GetArgument(System.Int32 id)
    // Offset: 0xE1A598
    ::StringW GetArgument(int id);
    // public System.Void SetArguments(System.String[] arguments)
    // Offset: 0xE1A6A4
    void SetArguments(::ArrayW<::StringW> arguments);
    // public System.Void .ctor(PowerUI.Document document, PowerUI.Element parent)
    // Offset: 0xE1A130
    // Implemented from: PowerUI.Element
    // Base method: System.Void Element::.ctor(PowerUI.Document document, PowerUI.Element parent)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VariableElement* New_ctor(::PowerUI::Document* document, ::PowerUI::Element* parent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::VariableElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VariableElement*, creationType>(document, parent)));
    }
    // public override System.Void ResetVariable(System.String name)
    // Offset: 0xE1A1B4
    // Implemented from: PowerUI.Element
    // Base method: System.Void Element::ResetVariable(System.String name)
    void ResetVariable(::StringW name);
    // public override System.Void ResetAllVariables()
    // Offset: 0xE1A590
    // Implemented from: PowerUI.Element
    // Base method: System.Void Element::ResetAllVariables()
    void ResetAllVariables();
    // public override System.String ToTextString()
    // Offset: 0xE1A6AC
    // Implemented from: PowerUI.Element
    // Base method: System.String Element::ToTextString()
    ::StringW ToTextString();
    // public override System.String ToString()
    // Offset: 0xE1A7A8
    // Implemented from: PowerUI.Element
    // Base method: System.String Element::ToString()
    ::StringW ToString();
    // public override System.Void ToString(System.Text.StringBuilder builder)
    // Offset: 0xE1A808
    // Implemented from: PowerUI.Element
    // Base method: System.Void Element::ToString(System.Text.StringBuilder builder)
    void ToString(::System::Text::StringBuilder* builder);
  }; // PowerUI.VariableElement
  #pragma pack(pop)
  static check_size<sizeof(VariableElement), 248 + sizeof(::ArrayW<::StringW>)> __PowerUI_VariableElementSizeCheck;
  static_assert(sizeof(VariableElement) == 0x100);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::VariableElement::SetVariableName
// Il2CppName: SetVariableName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::VariableElement::*)(::StringW)>(&PowerUI::VariableElement::SetVariableName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::VariableElement*), "SetVariableName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: PowerUI::VariableElement::LoadNow
// Il2CppName: LoadNow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::VariableElement::*)(bool)>(&PowerUI::VariableElement::LoadNow)> {
  static const MethodInfo* get() {
    static auto* innerElement = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::VariableElement*), "LoadNow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{innerElement});
  }
};
// Writing MetadataGetter for method: PowerUI::VariableElement::GetArgument
// Il2CppName: GetArgument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::VariableElement::*)(int)>(&PowerUI::VariableElement::GetArgument)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::VariableElement*), "GetArgument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: PowerUI::VariableElement::SetArguments
// Il2CppName: SetArguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::VariableElement::*)(::ArrayW<::StringW>)>(&PowerUI::VariableElement::SetArguments)> {
  static const MethodInfo* get() {
    static auto* arguments = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::VariableElement*), "SetArguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arguments});
  }
};
// Writing MetadataGetter for method: PowerUI::VariableElement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::VariableElement::ResetVariable
// Il2CppName: ResetVariable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::VariableElement::*)(::StringW)>(&PowerUI::VariableElement::ResetVariable)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::VariableElement*), "ResetVariable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: PowerUI::VariableElement::ResetAllVariables
// Il2CppName: ResetAllVariables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::VariableElement::*)()>(&PowerUI::VariableElement::ResetAllVariables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::VariableElement*), "ResetAllVariables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::VariableElement::ToTextString
// Il2CppName: ToTextString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::VariableElement::*)()>(&PowerUI::VariableElement::ToTextString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::VariableElement*), "ToTextString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::VariableElement::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::VariableElement::*)()>(&PowerUI::VariableElement::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::VariableElement*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::VariableElement::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::VariableElement::*)(::System::Text::StringBuilder*)>(&PowerUI::VariableElement::ToString)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::VariableElement*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder});
  }
};
