// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.HtmlTagHandler
#include "PowerUI/HtmlTagHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Element
  class Element;
  // Forward declaring type: UIEvent
  class UIEvent;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: SelectTag
  class SelectTag;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::SelectTag);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::SelectTag*, "PowerUI", "SelectTag");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.SelectTag
  // [TokenAttribute] Offset: FFFFFFFF
  class SelectTag : public ::PowerUI::HtmlTagHandler {
    public:
    public:
    // public System.Boolean Dropped
    // Size: 0x1
    // Offset: 0x33
    bool Dropped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Int32 SelectedIndex
    // Size: 0x4
    // Offset: 0x34
    int SelectedIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private PowerUI.Element DisplayText
    // Size: 0x8
    // Offset: 0x38
    ::PowerUI::Element* DisplayText;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // public System.Collections.Generic.List`1<PowerUI.Element> Options
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::PowerUI::Element*>* Options;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PowerUI::Element*>*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean Dropped
    [[deprecated("Use field access instead!")]] bool& dyn_Dropped();
    // Get instance field reference: public System.Int32 SelectedIndex
    [[deprecated("Use field access instead!")]] int& dyn_SelectedIndex();
    // Get instance field reference: private PowerUI.Element DisplayText
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_DisplayText();
    // Get instance field reference: public System.Collections.Generic.List`1<PowerUI.Element> Options
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PowerUI::Element*>*& dyn_Options();
    // public System.Int32 GetSelectID(PowerUI.Element element)
    // Offset: 0x177396C
    int GetSelectID(::PowerUI::Element* element);
    // public System.Void AddOption(PowerUI.Element element)
    // Offset: 0x1773CAC
    void AddOption(::PowerUI::Element* element);
    // public System.Void Drop()
    // Offset: 0x1773DC8
    void Drop();
    // public System.Void Hide()
    // Offset: 0x17688FC
    void Hide();
    // private PowerUI.Element GetDropdownBox()
    // Offset: 0x17742E4
    ::PowerUI::Element* GetDropdownBox();
    // public System.String GetValue()
    // Offset: 0x177440C
    ::StringW GetValue();
    // public System.Void SetSelected(PowerUI.Element element)
    // Offset: 0x17686C4
    void SetSelected(::PowerUI::Element* element);
    // public System.Void SetSelected(System.Int32 index)
    // Offset: 0x1774218
    void SetSelected(int index);
    // private System.Void SetSelected(System.Int32 index, PowerUI.Element element, System.Boolean runOnChange)
    // Offset: 0x17744AC
    void SetSelected(int index, ::PowerUI::Element* element, bool runOnChange);
    // public System.Void .ctor()
    // Offset: 0x177381C
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::.ctor()
    // Base method: System.Void TagHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SelectTag* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::SelectTag::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SelectTag*, creationType>()));
    }
    // public override System.String[] GetTags()
    // Offset: 0x1773850
    // Implemented from: Wrench.TagHandler
    // Base method: System.String[] TagHandler::GetTags()
    ::ArrayW<::StringW> GetTags();
    // public override Wrench.TagHandler GetInstance()
    // Offset: 0x1773900
    // Implemented from: Wrench.TagHandler
    // Base method: Wrench.TagHandler TagHandler::GetInstance()
    ::Wrench::TagHandler* GetInstance();
    // public override System.Void OnResetVariable(System.String name)
    // Offset: 0x1773A38
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::OnResetVariable(System.String name)
    void OnResetVariable(::StringW name);
    // public override System.Void OnResetAllVariables()
    // Offset: 0x1773B78
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::OnResetAllVariables()
    void OnResetAllVariables();
    // public override System.Void OnTagLoaded()
    // Offset: 0x1774048
    // Implemented from: Wrench.TagHandler
    // Base method: System.Void TagHandler::OnTagLoaded()
    void OnTagLoaded();
    // public override System.Void OnBlur()
    // Offset: 0x1774350
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::OnBlur()
    void OnBlur();
    // public override System.Boolean OnClick(PowerUI.UIEvent clickEvent)
    // Offset: 0x17745C4
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Boolean HtmlTagHandler::OnClick(PowerUI.UIEvent clickEvent)
    bool OnClick(::PowerUI::UIEvent* clickEvent);
    // public override System.Void OnMouseMove(PowerUI.UIEvent e)
    // Offset: 0x177465C
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::OnMouseMove(PowerUI.UIEvent e)
    void OnMouseMove(::PowerUI::UIEvent* e);
  }; // PowerUI.SelectTag
  #pragma pack(pop)
  static check_size<sizeof(SelectTag), 64 + sizeof(::System::Collections::Generic::List_1<::PowerUI::Element*>*)> __PowerUI_SelectTagSizeCheck;
  static_assert(sizeof(SelectTag) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::SelectTag::GetSelectID
// Il2CppName: GetSelectID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::SelectTag::*)(::PowerUI::Element*)>(&PowerUI::SelectTag::GetSelectID)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "GetSelectID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::AddOption
// Il2CppName: AddOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SelectTag::*)(::PowerUI::Element*)>(&PowerUI::SelectTag::AddOption)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "AddOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::Drop
// Il2CppName: Drop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SelectTag::*)()>(&PowerUI::SelectTag::Drop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "Drop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::Hide
// Il2CppName: Hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SelectTag::*)()>(&PowerUI::SelectTag::Hide)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "Hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::GetDropdownBox
// Il2CppName: GetDropdownBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::SelectTag::*)()>(&PowerUI::SelectTag::GetDropdownBox)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "GetDropdownBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::SelectTag::*)()>(&PowerUI::SelectTag::GetValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::SetSelected
// Il2CppName: SetSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SelectTag::*)(::PowerUI::Element*)>(&PowerUI::SelectTag::SetSelected)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "SetSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::SetSelected
// Il2CppName: SetSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SelectTag::*)(int)>(&PowerUI::SelectTag::SetSelected)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "SetSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::SetSelected
// Il2CppName: SetSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SelectTag::*)(int, ::PowerUI::Element*, bool)>(&PowerUI::SelectTag::SetSelected)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    static auto* runOnChange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "SetSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, element, runOnChange});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::SelectTag::GetTags
// Il2CppName: GetTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (PowerUI::SelectTag::*)()>(&PowerUI::SelectTag::GetTags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "GetTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (PowerUI::SelectTag::*)()>(&PowerUI::SelectTag::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::OnResetVariable
// Il2CppName: OnResetVariable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SelectTag::*)(::StringW)>(&PowerUI::SelectTag::OnResetVariable)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "OnResetVariable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::OnResetAllVariables
// Il2CppName: OnResetAllVariables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SelectTag::*)()>(&PowerUI::SelectTag::OnResetAllVariables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "OnResetAllVariables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::OnTagLoaded
// Il2CppName: OnTagLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SelectTag::*)()>(&PowerUI::SelectTag::OnTagLoaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "OnTagLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::OnBlur
// Il2CppName: OnBlur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SelectTag::*)()>(&PowerUI::SelectTag::OnBlur)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "OnBlur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::OnClick
// Il2CppName: OnClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::SelectTag::*)(::PowerUI::UIEvent*)>(&PowerUI::SelectTag::OnClick)> {
  static const MethodInfo* get() {
    static auto* clickEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "OnClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clickEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::SelectTag::OnMouseMove
// Il2CppName: OnMouseMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SelectTag::*)(::PowerUI::UIEvent*)>(&PowerUI::SelectTag::OnMouseMove)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SelectTag*), "OnMouseMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
