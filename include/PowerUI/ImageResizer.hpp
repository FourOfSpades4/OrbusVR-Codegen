// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Color32
  struct Color32;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: ImageResizer
  class ImageResizer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::ImageResizer);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::ImageResizer*, "PowerUI", "ImageResizer");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.ImageResizer
  // [TokenAttribute] Offset: FFFFFFFF
  class ImageResizer : public ::Il2CppObject {
    public:
    // static public UnityEngine.Texture2D Resize(UnityEngine.Texture2D original, System.Single ratio)
    // Offset: 0x1A4D910
    static ::UnityEngine::Texture2D* Resize(::UnityEngine::Texture2D* original, float ratio);
    // static private UnityEngine.Color32 ColorLerpUnclamped(UnityEngine.Color32 c1, UnityEngine.Color32 c2, System.Single value)
    // Offset: 0x1A4DCE0
    static ::UnityEngine::Color32 ColorLerpUnclamped(::UnityEngine::Color32 c1, ::UnityEngine::Color32 c2, float value);
  }; // PowerUI.ImageResizer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::ImageResizer::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)(::UnityEngine::Texture2D*, float)>(&PowerUI::ImageResizer::Resize)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImageResizer*), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original, ratio});
  }
};
// Writing MetadataGetter for method: PowerUI::ImageResizer::ColorLerpUnclamped
// Il2CppName: ColorLerpUnclamped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (*)(::UnityEngine::Color32, ::UnityEngine::Color32, float)>(&PowerUI::ImageResizer::ColorLerpUnclamped)> {
  static const MethodInfo* get() {
    static auto* c1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* c2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ImageResizer*), "ColorLerpUnclamped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c1, c2, value});
  }
};
