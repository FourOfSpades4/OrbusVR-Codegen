// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.WorldUI
#include "PowerUI/WorldUI.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: FlatWorldUIHandler
  class FlatWorldUIHandler;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: FlatWorldUI
  class FlatWorldUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::FlatWorldUI);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::FlatWorldUI*, "PowerUI", "FlatWorldUI");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0xC1
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.FlatWorldUI
  // [TokenAttribute] Offset: FFFFFFFF
  class FlatWorldUI : public ::PowerUI::WorldUI {
    public:
    public:
    // private System.Int32 DefaultLayer
    // Size: 0x4
    // Offset: 0x98
    int DefaultLayer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: DefaultLayer and: Texture
    char __padding0[0x4] = {};
    // public UnityEngine.Texture Texture
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Texture* Texture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public UnityEngine.Camera SourceCamera
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Camera* SourceCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // public UnityEngine.GameObject CameraObject
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::GameObject* CameraObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private PowerUI.FlatWorldUIHandler Handler
    // Size: 0x8
    // Offset: 0xB8
    ::PowerUI::FlatWorldUIHandler* Handler;
    // Field size check
    static_assert(sizeof(::PowerUI::FlatWorldUIHandler*) == 0x8);
    // private System.Boolean RequiresOffset
    // Size: 0x1
    // Offset: 0xC0
    bool RequiresOffset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static public System.Single GlobalOffset
    static float _get_GlobalOffset();
    // Set static field: static public System.Single GlobalOffset
    static void _set_GlobalOffset(float value);
    // Get instance field reference: private System.Int32 DefaultLayer
    [[deprecated("Use field access instead!")]] int& dyn_DefaultLayer();
    // Get instance field reference: public UnityEngine.Texture Texture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_Texture();
    // Get instance field reference: public UnityEngine.Camera SourceCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_SourceCamera();
    // Get instance field reference: public UnityEngine.GameObject CameraObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_CameraObject();
    // Get instance field reference: private PowerUI.FlatWorldUIHandler Handler
    [[deprecated("Use field access instead!")]] ::PowerUI::FlatWorldUIHandler*& dyn_Handler();
    // Get instance field reference: private System.Boolean RequiresOffset
    [[deprecated("Use field access instead!")]] bool& dyn_RequiresOffset();
    // public System.Void SetCameraDistance(System.Single distance)
    // Offset: 0x1A45A5C
    void SetCameraDistance(float distance);
    // private System.Void SetOrthographicSize()
    // Offset: 0x1A45B0C
    void SetOrthographicSize();
    // public System.Void RelativeMouseMovedTo(System.Single x, System.Single y)
    // Offset: 0x1A45F04
    void RelativeMouseMovedTo(float x, float y);
    // public System.Void MouseMovedTo(System.Int32 x, System.Int32 y)
    // Offset: 0x1A45F30
    void MouseMovedTo(int x, int y);
    // public System.Void RelativeMouseDown(System.Single x, System.Single y)
    // Offset: 0x1A45FC4
    void RelativeMouseDown(float x, float y);
    // public System.Void MouseDown(System.Int32 x, System.Int32 y)
    // Offset: 0x1A45FF0
    void MouseDown(int x, int y);
    // public System.Void RelativeMouseUp(System.Single x, System.Single y)
    // Offset: 0x1A46090
    void RelativeMouseUp(float x, float y);
    // public System.Void MouseUp(System.Int32 x, System.Int32 y)
    // Offset: 0x1A460BC
    void MouseUp(int x, int y);
    // static private System.Void .cctor()
    // Offset: 0x1A4615C
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1A45438
    // Implemented from: PowerUI.WorldUI
    // Base method: System.Void WorldUI::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlatWorldUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::FlatWorldUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlatWorldUI*, creationType>()));
    }
    // public System.Void .ctor(System.String name)
    // Offset: 0x1A459E8
    // Implemented from: PowerUI.WorldUI
    // Base method: System.Void WorldUI::.ctor(System.String name)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlatWorldUI* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::FlatWorldUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlatWorldUI*, creationType>(name)));
    }
    // public System.Void .ctor(System.Int32 widthPX, System.Int32 heightPX)
    // Offset: 0x1A459F4
    // Implemented from: PowerUI.WorldUI
    // Base method: System.Void WorldUI::.ctor(System.Int32 widthPX, System.Int32 heightPX)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlatWorldUI* New_ctor(int widthPX, int heightPX) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::FlatWorldUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlatWorldUI*, creationType>(widthPX, heightPX)));
    }
    // public System.Void .ctor(System.String name, System.Int32 widthPX, System.Int32 heightPX)
    // Offset: 0x1A45490
    // Implemented from: PowerUI.WorldUI
    // Base method: System.Void WorldUI::.ctor(System.String name, System.Int32 widthPX, System.Int32 heightPX)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlatWorldUI* New_ctor(::StringW name, int widthPX, int heightPX) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::FlatWorldUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlatWorldUI*, creationType>(name, widthPX, heightPX)));
    }
    // public override System.Void RenderWithCamera(System.Int32 layer)
    // Offset: 0x1A45BE4
    // Implemented from: PowerUI.WorldUI
    // Base method: System.Void WorldUI::RenderWithCamera(System.Int32 layer)
    void RenderWithCamera(int layer);
    // public override System.Void SetOrigin(System.Single x, System.Single y)
    // Offset: 0x1A45C30
    // Implemented from: PowerUI.WorldUI
    // Base method: System.Void WorldUI::SetOrigin(System.Single x, System.Single y)
    void SetOrigin(float x, float y);
    // public override System.Void SetResolution(System.Single pp)
    // Offset: 0x1A45C40
    // Implemented from: PowerUI.WorldUI
    // Base method: System.Void WorldUI::SetResolution(System.Single pp)
    void SetResolution(float pp);
    // public override System.Void SetResolution(System.Int32 x, System.Int32 y)
    // Offset: 0x1A45C44
    // Implemented from: PowerUI.WorldUI
    // Base method: System.Void WorldUI::SetResolution(System.Int32 x, System.Int32 y)
    void SetResolution(int x, int y);
    // public override System.Void SetDimensions(System.Int32 x, System.Int32 y)
    // Offset: 0x1A45C48
    // Implemented from: PowerUI.WorldUI
    // Base method: System.Void WorldUI::SetDimensions(System.Int32 x, System.Int32 y)
    void SetDimensions(int x, int y);
  }; // PowerUI.FlatWorldUI
  #pragma pack(pop)
  static check_size<sizeof(FlatWorldUI), 192 + sizeof(bool)> __PowerUI_FlatWorldUISizeCheck;
  static_assert(sizeof(FlatWorldUI) == 0xC1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::SetCameraDistance
// Il2CppName: SetCameraDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FlatWorldUI::*)(float)>(&PowerUI::FlatWorldUI::SetCameraDistance)> {
  static const MethodInfo* get() {
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUI*), "SetCameraDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distance});
  }
};
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::SetOrthographicSize
// Il2CppName: SetOrthographicSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FlatWorldUI::*)()>(&PowerUI::FlatWorldUI::SetOrthographicSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUI*), "SetOrthographicSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::RelativeMouseMovedTo
// Il2CppName: RelativeMouseMovedTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FlatWorldUI::*)(float, float)>(&PowerUI::FlatWorldUI::RelativeMouseMovedTo)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUI*), "RelativeMouseMovedTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::MouseMovedTo
// Il2CppName: MouseMovedTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FlatWorldUI::*)(int, int)>(&PowerUI::FlatWorldUI::MouseMovedTo)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUI*), "MouseMovedTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::RelativeMouseDown
// Il2CppName: RelativeMouseDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FlatWorldUI::*)(float, float)>(&PowerUI::FlatWorldUI::RelativeMouseDown)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUI*), "RelativeMouseDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::MouseDown
// Il2CppName: MouseDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FlatWorldUI::*)(int, int)>(&PowerUI::FlatWorldUI::MouseDown)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUI*), "MouseDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::RelativeMouseUp
// Il2CppName: RelativeMouseUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FlatWorldUI::*)(float, float)>(&PowerUI::FlatWorldUI::RelativeMouseUp)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUI*), "RelativeMouseUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::MouseUp
// Il2CppName: MouseUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FlatWorldUI::*)(int, int)>(&PowerUI::FlatWorldUI::MouseUp)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUI*), "MouseUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::FlatWorldUI::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUI*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::RenderWithCamera
// Il2CppName: RenderWithCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FlatWorldUI::*)(int)>(&PowerUI::FlatWorldUI::RenderWithCamera)> {
  static const MethodInfo* get() {
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUI*), "RenderWithCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layer});
  }
};
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::SetOrigin
// Il2CppName: SetOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FlatWorldUI::*)(float, float)>(&PowerUI::FlatWorldUI::SetOrigin)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUI*), "SetOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::SetResolution
// Il2CppName: SetResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FlatWorldUI::*)(float)>(&PowerUI::FlatWorldUI::SetResolution)> {
  static const MethodInfo* get() {
    static auto* pp = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUI*), "SetResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pp});
  }
};
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::SetResolution
// Il2CppName: SetResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FlatWorldUI::*)(int, int)>(&PowerUI::FlatWorldUI::SetResolution)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUI*), "SetResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::FlatWorldUI::SetDimensions
// Il2CppName: SetDimensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FlatWorldUI::*)(int, int)>(&PowerUI::FlatWorldUI::SetDimensions)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUI*), "SetDimensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
