// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: DesignSize
  class DesignSize;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::DesignSize);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::DesignSize*, "PowerUI", "DesignSize");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.DesignSize
  // [TokenAttribute] Offset: FFFFFFFF
  class DesignSize : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 Dpi
    // Size: 0x4
    // Offset: 0x10
    int Dpi;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single Width
    // Size: 0x4
    // Offset: 0x14
    float Width;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Height
    // Size: 0x4
    // Offset: 0x18
    float Height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Int32 Dpi
    [[deprecated("Use field access instead!")]] int& dyn_Dpi();
    // Get instance field reference: public System.Single Width
    [[deprecated("Use field access instead!")]] float& dyn_Width();
    // Get instance field reference: public System.Single Height
    [[deprecated("Use field access instead!")]] float& dyn_Height();
    // public System.Void .ctor(System.Int32 width, System.Int32 height)
    // Offset: 0x18545A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DesignSize* New_ctor(int width, int height) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::DesignSize::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DesignSize*, creationType>(width, height)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height, System.Int32 dpi)
    // Offset: 0x1854614
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DesignSize* New_ctor(int width, int height, int dpi) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::DesignSize::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DesignSize*, creationType>(width, height, dpi)));
    }
    // private System.Single ToInches(System.Int32 px)
    // Offset: 0x1854600
    float ToInches(int px);
    // public System.Single get_Scale()
    // Offset: 0x1854670
    float get_Scale();
  }; // PowerUI.DesignSize
  #pragma pack(pop)
  static check_size<sizeof(DesignSize), 24 + sizeof(float)> __PowerUI_DesignSizeSizeCheck;
  static_assert(sizeof(DesignSize) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::DesignSize::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::DesignSize::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::DesignSize::ToInches
// Il2CppName: ToInches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::DesignSize::*)(int)>(&PowerUI::DesignSize::ToInches)> {
  static const MethodInfo* get() {
    static auto* px = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DesignSize*), "ToInches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{px});
  }
};
// Writing MetadataGetter for method: PowerUI::DesignSize::get_Scale
// Il2CppName: get_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::DesignSize::*)()>(&PowerUI::DesignSize::get_Scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DesignSize*), "get_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
