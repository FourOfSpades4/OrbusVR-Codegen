// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: UICamera
  class UICamera;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: CameraPool
  class CameraPool;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::CameraPool);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::CameraPool*, "PowerUI", "CameraPool");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.CameraPool
  // [TokenAttribute] Offset: FFFFFFFF
  class CameraPool : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean DidLayout
    // Size: 0x1
    // Offset: 0x10
    bool DidLayout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: DidLayout and: CameraDepth
    char __padding0[0x3] = {};
    // public System.Int32 CameraDepth
    // Size: 0x4
    // Offset: 0x14
    int CameraDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public PowerUI.UICamera LastCamera
    // Size: 0x8
    // Offset: 0x18
    ::PowerUI::UICamera* LastCamera;
    // Field size check
    static_assert(sizeof(::PowerUI::UICamera*) == 0x8);
    // public PowerUI.UICamera FirstCamera
    // Size: 0x8
    // Offset: 0x20
    ::PowerUI::UICamera* FirstCamera;
    // Field size check
    static_assert(sizeof(::PowerUI::UICamera*) == 0x8);
    // public System.Boolean CameraRequested
    // Size: 0x1
    // Offset: 0x28
    bool CameraRequested;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: CameraRequested and: LastPoolCamera
    char __padding4[0x7] = {};
    // public PowerUI.UICamera LastPoolCamera
    // Size: 0x8
    // Offset: 0x30
    ::PowerUI::UICamera* LastPoolCamera;
    // Field size check
    static_assert(sizeof(::PowerUI::UICamera*) == 0x8);
    // public PowerUI.UICamera FirstPoolCamera
    // Size: 0x8
    // Offset: 0x38
    ::PowerUI::UICamera* FirstPoolCamera;
    // Field size check
    static_assert(sizeof(::PowerUI::UICamera*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean DidLayout
    [[deprecated("Use field access instead!")]] bool& dyn_DidLayout();
    // Get instance field reference: public System.Int32 CameraDepth
    [[deprecated("Use field access instead!")]] int& dyn_CameraDepth();
    // Get instance field reference: public PowerUI.UICamera LastCamera
    [[deprecated("Use field access instead!")]] ::PowerUI::UICamera*& dyn_LastCamera();
    // Get instance field reference: public PowerUI.UICamera FirstCamera
    [[deprecated("Use field access instead!")]] ::PowerUI::UICamera*& dyn_FirstCamera();
    // Get instance field reference: public System.Boolean CameraRequested
    [[deprecated("Use field access instead!")]] bool& dyn_CameraRequested();
    // Get instance field reference: public PowerUI.UICamera LastPoolCamera
    [[deprecated("Use field access instead!")]] ::PowerUI::UICamera*& dyn_LastPoolCamera();
    // Get instance field reference: public PowerUI.UICamera FirstPoolCamera
    [[deprecated("Use field access instead!")]] ::PowerUI::UICamera*& dyn_FirstPoolCamera();
    // public System.Void .ctor()
    // Offset: 0xEBBFF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CameraPool* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::CameraPool::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CameraPool*, creationType>()));
    }
    // public System.Int32 get_AllocatedDepth()
    // Offset: 0xEBC070
    int get_AllocatedDepth();
    // public System.Boolean CheckCameraRequired()
    // Offset: 0xEBC084
    bool CheckCameraRequired();
    // public System.Void Reset()
    // Offset: 0xEBC254
    void Reset();
    // public System.Void Destroy()
    // Offset: 0xEBC2DC
    void Destroy();
    // public System.Void ClearPool()
    // Offset: 0xEBC354
    void ClearPool();
    // public PowerUI.UICamera GetPooledCamera()
    // Offset: 0xEBC1E0
    ::PowerUI::UICamera* GetPooledCamera();
    // public System.Void AddCamera(PowerUI.UICamera camera)
    // Offset: 0xEBC1FC
    void AddCamera(::PowerUI::UICamera* camera);
  }; // PowerUI.CameraPool
  #pragma pack(pop)
  static check_size<sizeof(CameraPool), 56 + sizeof(::PowerUI::UICamera*)> __PowerUI_CameraPoolSizeCheck;
  static_assert(sizeof(CameraPool) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::CameraPool::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::CameraPool::get_AllocatedDepth
// Il2CppName: get_AllocatedDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::CameraPool::*)()>(&PowerUI::CameraPool::get_AllocatedDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraPool*), "get_AllocatedDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraPool::CheckCameraRequired
// Il2CppName: CheckCameraRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::CameraPool::*)()>(&PowerUI::CameraPool::CheckCameraRequired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraPool*), "CheckCameraRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraPool::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CameraPool::*)()>(&PowerUI::CameraPool::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraPool*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraPool::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CameraPool::*)()>(&PowerUI::CameraPool::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraPool*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraPool::ClearPool
// Il2CppName: ClearPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CameraPool::*)()>(&PowerUI::CameraPool::ClearPool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraPool*), "ClearPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraPool::GetPooledCamera
// Il2CppName: GetPooledCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::UICamera* (PowerUI::CameraPool::*)()>(&PowerUI::CameraPool::GetPooledCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraPool*), "GetPooledCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraPool::AddCamera
// Il2CppName: AddCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CameraPool::*)(::PowerUI::UICamera*)>(&PowerUI::CameraPool::AddCamera)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("PowerUI", "UICamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraPool*), "AddCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera});
  }
};
