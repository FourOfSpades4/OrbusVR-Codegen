// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Element
  class Element;
  // Forward declaring type: MeshBlock
  class MeshBlock;
  // Forward declaring type: Transformation
  class Transformation;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Vector3
  struct Vector3;
}
// Forward declaring namespace: PowerUI::Css
namespace PowerUI::Css {
  // Forward declaring type: Value
  class Value;
}
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: TextureAtlas
  class TextureAtlas;
  // Forward declaring type: AtlasLocation
  class AtlasLocation;
  // Forward declaring type: AtlasEntity
  class AtlasEntity;
}
// Completed forward declares
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Forward declaring type: DisplayableProperty
  class DisplayableProperty;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Css::DisplayableProperty);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Css::DisplayableProperty*, "PowerUI.Css", "DisplayableProperty");
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Css.DisplayableProperty
  // [TokenAttribute] Offset: FFFFFFFF
  class DisplayableProperty : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean Visible
    // Size: 0x1
    // Offset: 0x10
    bool Visible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean Changed
    // Size: 0x1
    // Offset: 0x11
    bool Changed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean Isolated
    // Size: 0x1
    // Offset: 0x12
    bool Isolated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Isolated and: BlockCount
    char __padding2[0x1] = {};
    // public System.Int32 BlockCount
    // Size: 0x4
    // Offset: 0x14
    int BlockCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public PowerUI.Element Element
    // Size: 0x8
    // Offset: 0x18
    ::PowerUI::Element* Element;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // public PowerUI.MeshBlock FirstBlock
    // Size: 0x8
    // Offset: 0x20
    ::PowerUI::MeshBlock* FirstBlock;
    // Field size check
    static_assert(sizeof(::PowerUI::MeshBlock*) == 0x8);
    // public System.Boolean GotBatchAlready
    // Size: 0x1
    // Offset: 0x28
    bool GotBatchAlready;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Boolean Visible
    [[deprecated("Use field access instead!")]] bool& dyn_Visible();
    // Get instance field reference: public System.Boolean Changed
    [[deprecated("Use field access instead!")]] bool& dyn_Changed();
    // Get instance field reference: public System.Boolean Isolated
    [[deprecated("Use field access instead!")]] bool& dyn_Isolated();
    // Get instance field reference: public System.Int32 BlockCount
    [[deprecated("Use field access instead!")]] int& dyn_BlockCount();
    // Get instance field reference: public PowerUI.Element Element
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_Element();
    // Get instance field reference: public PowerUI.MeshBlock FirstBlock
    [[deprecated("Use field access instead!")]] ::PowerUI::MeshBlock*& dyn_FirstBlock();
    // Get instance field reference: public System.Boolean GotBatchAlready
    [[deprecated("Use field access instead!")]] bool& dyn_GotBatchAlready();
    // public System.Void .ctor(PowerUI.Element element)
    // Offset: 0xEC06AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DisplayableProperty* New_ctor(::PowerUI::Element* element) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Css::DisplayableProperty::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DisplayableProperty*, creationType>(element)));
    }
    // public System.Void SetVisibility(System.Boolean visible)
    // Offset: 0xEC1B80
    void SetVisibility(bool visible);
    // protected System.Boolean NowOnScreen()
    // Offset: 0xEC6AD4
    bool NowOnScreen();
    // protected System.Void NowOffScreen()
    // Offset: 0xEC6ADC
    void NowOffScreen();
    // public System.Void SetOverlayColour()
    // Offset: 0xEC6AE0
    void SetOverlayColour();
    // public System.Void ColourChanged()
    // Offset: 0xEC6B40
    void ColourChanged();
    // public System.Void OnBatchDestroy()
    // Offset: 0xEC0C10
    void OnBatchDestroy();
    // public System.Void SetOverlayColour(UnityEngine.Color colour)
    // Offset: 0xEC6BAC
    void SetOverlayColour(::UnityEngine::Color colour);
    // public System.Void Change(System.String property, PowerUI.Css.Value newValue)
    // Offset: 0xEC6BB0
    void Change(::StringW property, ::PowerUI::Css::Value* newValue);
    // protected System.Void OnChange(System.String property, PowerUI.Css.Value newValue)
    // Offset: 0xEC6BC4
    void OnChange(::StringW property, ::PowerUI::Css::Value* newValue);
    // public System.Void ClearBlocks()
    // Offset: 0xEC6BC8
    void ClearBlocks();
    // public System.Void WentOffScreen()
    // Offset: 0xEC5708
    void WentOffScreen();
    // public UnityEngine.Vector3 MapPX(System.Single x, System.Single y, System.Single z)
    // Offset: 0xEC6BD8
    ::UnityEngine::Vector3 MapPX(float x, float y, float z);
    // public System.Void Render()
    // Offset: 0xEC5958
    void Render();
    // public System.Void RequestPaint()
    // Offset: 0xEC0728
    void RequestPaint();
    // public System.Void RequestLayout()
    // Offset: 0xEC1080
    void RequestLayout();
    // public System.Void Paint()
    // Offset: 0xEC6C50
    void Paint();
    // protected System.Void Layout()
    // Offset: 0xEC6C54
    void Layout();
    // public PowerUI.MeshBlock Add()
    // Offset: 0xEC0AFC
    ::PowerUI::MeshBlock* Add();
    // public System.Boolean get_Paintable()
    // Offset: 0xEC6C58
    bool get_Paintable();
    // public System.Void Transform(PowerUI.Transformation topTransform)
    // Offset: 0xEC2614
    void Transform(::PowerUI::Transformation* topTransform);
    // public System.Void ApplyTransform()
    // Offset: 0xEC2684
    void ApplyTransform();
    // public System.Void Isolate()
    // Offset: 0xEC1B6C
    void Isolate();
    // public System.Void Include()
    // Offset: 0xEC1B78
    void Include();
    // public System.Boolean IsIsolated()
    // Offset: 0xEC6C68
    bool IsIsolated();
    // public System.Void SetupBatch(Blaze.TextureAtlas graphics, Blaze.TextureAtlas font)
    // Offset: 0xEC0A8C
    void SetupBatch(::Blaze::TextureAtlas* graphics, ::Blaze::TextureAtlas* font);
    // public Blaze.AtlasLocation RequireImage(Blaze.AtlasEntity image)
    // Offset: 0xEC11C4
    ::Blaze::AtlasLocation* RequireImage(::Blaze::AtlasEntity* image);
  }; // PowerUI.Css.DisplayableProperty
  #pragma pack(pop)
  static check_size<sizeof(DisplayableProperty), 40 + sizeof(bool)> __PowerUI_Css_DisplayablePropertySizeCheck;
  static_assert(sizeof(DisplayableProperty) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::SetVisibility
// Il2CppName: SetVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)(bool)>(&PowerUI::Css::DisplayableProperty::SetVisibility)> {
  static const MethodInfo* get() {
    static auto* visible = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "SetVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{visible});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::NowOnScreen
// Il2CppName: NowOnScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::NowOnScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "NowOnScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::NowOffScreen
// Il2CppName: NowOffScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::NowOffScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "NowOffScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::SetOverlayColour
// Il2CppName: SetOverlayColour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::SetOverlayColour)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "SetOverlayColour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::ColourChanged
// Il2CppName: ColourChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::ColourChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "ColourChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::OnBatchDestroy
// Il2CppName: OnBatchDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::OnBatchDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "OnBatchDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::SetOverlayColour
// Il2CppName: SetOverlayColour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)(::UnityEngine::Color)>(&PowerUI::Css::DisplayableProperty::SetOverlayColour)> {
  static const MethodInfo* get() {
    static auto* colour = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "SetOverlayColour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colour});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::Change
// Il2CppName: Change
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)(::StringW, ::PowerUI::Css::Value*)>(&PowerUI::Css::DisplayableProperty::Change)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "Value")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "Change", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, newValue});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::OnChange
// Il2CppName: OnChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)(::StringW, ::PowerUI::Css::Value*)>(&PowerUI::Css::DisplayableProperty::OnChange)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "Value")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "OnChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, newValue});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::ClearBlocks
// Il2CppName: ClearBlocks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::ClearBlocks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "ClearBlocks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::WentOffScreen
// Il2CppName: WentOffScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::WentOffScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "WentOffScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::MapPX
// Il2CppName: MapPX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (PowerUI::Css::DisplayableProperty::*)(float, float, float)>(&PowerUI::Css::DisplayableProperty::MapPX)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "MapPX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::Render)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::RequestPaint
// Il2CppName: RequestPaint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::RequestPaint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "RequestPaint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::RequestLayout
// Il2CppName: RequestLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::RequestLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "RequestLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::Paint
// Il2CppName: Paint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::Paint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "Paint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::Layout
// Il2CppName: Layout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::Layout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "Layout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::MeshBlock* (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::Add)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::get_Paintable
// Il2CppName: get_Paintable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::get_Paintable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "get_Paintable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::Transform
// Il2CppName: Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)(::PowerUI::Transformation*)>(&PowerUI::Css::DisplayableProperty::Transform)> {
  static const MethodInfo* get() {
    static auto* topTransform = &::il2cpp_utils::GetClassFromName("PowerUI", "Transformation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topTransform});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::ApplyTransform
// Il2CppName: ApplyTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::ApplyTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "ApplyTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::Isolate
// Il2CppName: Isolate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::Isolate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "Isolate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::Include
// Il2CppName: Include
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::Include)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "Include", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::IsIsolated
// Il2CppName: IsIsolated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::DisplayableProperty::*)()>(&PowerUI::Css::DisplayableProperty::IsIsolated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "IsIsolated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::SetupBatch
// Il2CppName: SetupBatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::DisplayableProperty::*)(::Blaze::TextureAtlas*, ::Blaze::TextureAtlas*)>(&PowerUI::Css::DisplayableProperty::SetupBatch)> {
  static const MethodInfo* get() {
    static auto* graphics = &::il2cpp_utils::GetClassFromName("Blaze", "TextureAtlas")->byval_arg;
    static auto* font = &::il2cpp_utils::GetClassFromName("Blaze", "TextureAtlas")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "SetupBatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graphics, font});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::DisplayableProperty::RequireImage
// Il2CppName: RequireImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::AtlasLocation* (PowerUI::Css::DisplayableProperty::*)(::Blaze::AtlasEntity*)>(&PowerUI::Css::DisplayableProperty::RequireImage)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("Blaze", "AtlasEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::DisplayableProperty*), "RequireImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image});
  }
};
