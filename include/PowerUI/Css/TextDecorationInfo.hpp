// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: PowerUI.Css.TextLineType
#include "PowerUI/Css/TextLineType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Forward declaring type: TextDecorationInfo
  class TextDecorationInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Css::TextDecorationInfo);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Css::TextDecorationInfo*, "PowerUI.Css", "TextDecorationInfo");
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Size: 0x35
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Css.TextDecorationInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class TextDecorationInfo : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Color Colour
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Color Colour;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color BaseColour
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Color BaseColour;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public PowerUI.Css.TextLineType Type
    // Size: 0x4
    // Offset: 0x30
    ::PowerUI::Css::TextLineType Type;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::TextLineType) == 0x4);
    // public System.Boolean ColourOverride
    // Size: 0x1
    // Offset: 0x34
    bool ColourOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.Color Colour
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_Colour();
    // Get instance field reference: public UnityEngine.Color BaseColour
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_BaseColour();
    // Get instance field reference: public PowerUI.Css.TextLineType Type
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::TextLineType& dyn_Type();
    // Get instance field reference: public System.Boolean ColourOverride
    [[deprecated("Use field access instead!")]] bool& dyn_ColourOverride();
    // public System.Void .ctor(PowerUI.Css.TextLineType type)
    // Offset: 0x1847FCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextDecorationInfo* New_ctor(::PowerUI::Css::TextLineType type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Css::TextDecorationInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextDecorationInfo*, creationType>(type)));
    }
    // public System.Void SetColour(UnityEngine.Color colour)
    // Offset: 0x1847CFC
    void SetColour(::UnityEngine::Color colour);
    // public System.Void SetOverlayColour(UnityEngine.Color colour)
    // Offset: 0x184F370
    void SetOverlayColour(::UnityEngine::Color colour);
  }; // PowerUI.Css.TextDecorationInfo
  #pragma pack(pop)
  static check_size<sizeof(TextDecorationInfo), 52 + sizeof(bool)> __PowerUI_Css_TextDecorationInfoSizeCheck;
  static_assert(sizeof(TextDecorationInfo) == 0x35);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Css::TextDecorationInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Css::TextDecorationInfo::SetColour
// Il2CppName: SetColour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::TextDecorationInfo::*)(::UnityEngine::Color)>(&PowerUI::Css::TextDecorationInfo::SetColour)> {
  static const MethodInfo* get() {
    static auto* colour = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextDecorationInfo*), "SetColour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colour});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextDecorationInfo::SetOverlayColour
// Il2CppName: SetOverlayColour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::TextDecorationInfo::*)(::UnityEngine::Color)>(&PowerUI::Css::TextDecorationInfo::SetOverlayColour)> {
  static const MethodInfo* get() {
    static auto* colour = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextDecorationInfo*), "SetOverlayColour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colour});
  }
};
