// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.Css.DisplayableProperty
#include "PowerUI/Css/DisplayableProperty.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI::Css
namespace PowerUI::Css {
  // Forward declaring type: TextDecorationInfo
  class TextDecorationInfo;
}
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: DynamicFont
  class DynamicFont;
  // Forward declaring type: Text3D
  class Text3D;
  // Forward declaring type: Renderman
  class Renderman;
  // Forward declaring type: BoxRegion
  class BoxRegion;
  // Forward declaring type: Element
  class Element;
}
// Forward declaring namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: Glyph
  class Glyph;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Forward declaring type: TextRenderingProperty
  class TextRenderingProperty;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Css::TextRenderingProperty);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Css::TextRenderingProperty*, "PowerUI.Css", "TextRenderingProperty");
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Size: 0xB4
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Css.TextRenderingProperty
  // [TokenAttribute] Offset: FFFFFFFF
  class TextRenderingProperty : public ::PowerUI::Css::DisplayableProperty {
    public:
    // Writing base type padding for base size: 0x29 to desired offset: 0x2C
    char ___base_padding[0x3] = {};
    public:
    // public System.Int32 Weight
    // Size: 0x4
    // Offset: 0x2C
    int Weight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean Italic
    // Size: 0x1
    // Offset: 0x30
    bool Italic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Italic and: Text
    char __padding1[0x7] = {};
    // public System.String Text
    // Size: 0x8
    // Offset: 0x38
    ::StringW Text;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single FontSize
    // Size: 0x4
    // Offset: 0x40
    float FontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single SpaceSize
    // Size: 0x4
    // Offset: 0x44
    float SpaceSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color BaseColour
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Color BaseColour;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color FontColour
    // Size: 0x10
    // Offset: 0x58
    ::UnityEngine::Color FontColour;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Single Alias
    // Size: 0x4
    // Offset: 0x68
    float Alias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Ascender
    // Size: 0x4
    // Offset: 0x6C
    float Ascender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single LineGap
    // Size: 0x4
    // Offset: 0x70
    float LineGap;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean AllWhitespace
    // Size: 0x1
    // Offset: 0x74
    bool AllWhitespace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: AllWhitespace and: ScaleFactor
    char __padding10[0x3] = {};
    // private System.Single ScaleFactor
    // Size: 0x4
    // Offset: 0x78
    float ScaleFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single LetterSpacing
    // Size: 0x4
    // Offset: 0x7C
    float LetterSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public PowerUI.Css.TextDecorationInfo TextLine
    // Size: 0x8
    // Offset: 0x80
    ::PowerUI::Css::TextDecorationInfo* TextLine;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::TextDecorationInfo*) == 0x8);
    // public PowerUI.DynamicFont FontToDraw
    // Size: 0x8
    // Offset: 0x88
    ::PowerUI::DynamicFont* FontToDraw;
    // Field size check
    static_assert(sizeof(::PowerUI::DynamicFont*) == 0x8);
    // public System.Int32 EndPunctuationCount
    // Size: 0x4
    // Offset: 0x90
    int EndPunctuationCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 StartPunctuationCount
    // Size: 0x4
    // Offset: 0x94
    int StartPunctuationCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public InfiniText.Glyph[] Characters
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::InfiniText::Glyph*> Characters;
    // Field size check
    static_assert(sizeof(::ArrayW<::InfiniText::Glyph*>) == 0x8);
    // private System.Single[] Kerning
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<float> Kerning;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public PowerUI.Text3D Text3D
    // Size: 0x8
    // Offset: 0xA8
    ::PowerUI::Text3D* Text3D;
    // Field size check
    static_assert(sizeof(::PowerUI::Text3D*) == 0x8);
    // public System.Single Extrude
    // Size: 0x4
    // Offset: 0xB0
    float Extrude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Int32 Weight
    [[deprecated("Use field access instead!")]] int& dyn_Weight();
    // Get instance field reference: public System.Boolean Italic
    [[deprecated("Use field access instead!")]] bool& dyn_Italic();
    // Get instance field reference: public System.String Text
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Text();
    // Get instance field reference: public System.Single FontSize
    [[deprecated("Use field access instead!")]] float& dyn_FontSize();
    // Get instance field reference: public System.Single SpaceSize
    [[deprecated("Use field access instead!")]] float& dyn_SpaceSize();
    // Get instance field reference: public UnityEngine.Color BaseColour
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_BaseColour();
    // Get instance field reference: public UnityEngine.Color FontColour
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_FontColour();
    // Get instance field reference: public System.Single Alias
    [[deprecated("Use field access instead!")]] float& dyn_Alias();
    // Get instance field reference: public System.Single Ascender
    [[deprecated("Use field access instead!")]] float& dyn_Ascender();
    // Get instance field reference: public System.Single LineGap
    [[deprecated("Use field access instead!")]] float& dyn_LineGap();
    // Get instance field reference: public System.Boolean AllWhitespace
    [[deprecated("Use field access instead!")]] bool& dyn_AllWhitespace();
    // Get instance field reference: private System.Single ScaleFactor
    [[deprecated("Use field access instead!")]] float& dyn_ScaleFactor();
    // Get instance field reference: public System.Single LetterSpacing
    [[deprecated("Use field access instead!")]] float& dyn_LetterSpacing();
    // Get instance field reference: public PowerUI.Css.TextDecorationInfo TextLine
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::TextDecorationInfo*& dyn_TextLine();
    // Get instance field reference: public PowerUI.DynamicFont FontToDraw
    [[deprecated("Use field access instead!")]] ::PowerUI::DynamicFont*& dyn_FontToDraw();
    // Get instance field reference: public System.Int32 EndPunctuationCount
    [[deprecated("Use field access instead!")]] int& dyn_EndPunctuationCount();
    // Get instance field reference: public System.Int32 StartPunctuationCount
    [[deprecated("Use field access instead!")]] int& dyn_StartPunctuationCount();
    // Get instance field reference: public InfiniText.Glyph[] Characters
    [[deprecated("Use field access instead!")]] ::ArrayW<::InfiniText::Glyph*>& dyn_Characters();
    // Get instance field reference: private System.Single[] Kerning
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_Kerning();
    // Get instance field reference: public PowerUI.Text3D Text3D
    [[deprecated("Use field access instead!")]] ::PowerUI::Text3D*& dyn_Text3D();
    // Get instance field reference: public System.Single Extrude
    [[deprecated("Use field access instead!")]] float& dyn_Extrude();
    // public System.Boolean get_NoEndingSpace()
    // Offset: 0x184F3BC
    bool get_NoEndingSpace();
    // public System.Int32 get_EndSpaceSize()
    // Offset: 0x184F434
    int get_EndSpaceSize();
    // public System.Int32 LetterCount()
    // Offset: 0x184F4B0
    int LetterCount();
    // public System.Void SetDimensions()
    // Offset: 0x1844254
    void SetDimensions();
    // public System.Single StandardSpaceSize()
    // Offset: 0x184980C
    float StandardSpaceSize();
    // public System.Void FontLoaded(PowerUI.DynamicFont font)
    // Offset: 0x184F930
    void FontLoaded(::PowerUI::DynamicFont* font);
    // public System.Void SetText()
    // Offset: 0x1842CB4
    void SetText();
    // public System.Int32 LetterIndex(System.Int32 widthOffset)
    // Offset: 0x184FC6C
    int LetterIndex(int widthOffset);
    // public System.Single GetPositionOf(System.Int32 letterID)
    // Offset: 0x184FDCC
    float GetPositionOf(int letterID);
    // public System.Single LocalPositionOf(System.Int32 letterID)
    // Offset: 0x184FE58
    float LocalPositionOf(int letterID);
    // private System.Void DrawInvertCharacter(System.Int32 index, ref System.Single left, System.Single top, PowerUI.Renderman renderer, System.Single zIndex, PowerUI.BoxRegion screenRegion)
    // Offset: 0x1850EA0
    void DrawInvertCharacter(int index, ByRef<float> left, float top, ::PowerUI::Renderman* renderer, float zIndex, ::PowerUI::BoxRegion* screenRegion);
    // private System.Void DrawCharacter(System.Int32 index, ref System.Single left, System.Single top, PowerUI.Renderman renderer, System.Single zIndex, PowerUI.BoxRegion screenRegion)
    // Offset: 0x1851214
    void DrawCharacter(int index, ByRef<float> left, float top, ::PowerUI::Renderman* renderer, float zIndex, ::PowerUI::BoxRegion* screenRegion);
    // public System.Void ToString(System.Text.StringBuilder builder)
    // Offset: 0x1851740
    void ToString(::System::Text::StringBuilder* builder);
    // public PowerUI.Text3D Get3D(System.Single scale, UnityEngine.Color colour, ref System.Single left, ref System.Single top)
    // Offset: 0x1850C88
    ::PowerUI::Text3D* Get3D(float scale, ::UnityEngine::Color colour, ByRef<float> left, ByRef<float> top);
    // public System.Void GetExtrudeCounts(out System.Int32 vertCount, out System.Int32 triCount, System.Single scale)
    // Offset: 0x1851778
    void GetExtrudeCounts(ByRef<int> vertCount, ByRef<int> triCount, float scale);
    // public System.Void GetExtrude(PowerUI.Text3D text, System.Int32 vertIndex, System.Int32 triIndex, System.Int32 vertCount, System.Int32 triCount, System.Single scale, ref System.Single left, ref System.Single top)
    // Offset: 0x18518E4
    void GetExtrude(::PowerUI::Text3D* text, int vertIndex, int triIndex, int vertCount, int triCount, float scale, ByRef<float> left, ByRef<float> top);
    // public System.Void .ctor(PowerUI.Element element)
    // Offset: 0x1842C10
    // Implemented from: PowerUI.Css.DisplayableProperty
    // Base method: System.Void DisplayableProperty::.ctor(PowerUI.Element element)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextRenderingProperty* New_ctor(::PowerUI::Element* element) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Css::TextRenderingProperty::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextRenderingProperty*, creationType>(element)));
    }
    // public override System.Void SetOverlayColour(UnityEngine.Color colour)
    // Offset: 0x184F7B0
    // Implemented from: PowerUI.Css.DisplayableProperty
    // Base method: System.Void DisplayableProperty::SetOverlayColour(UnityEngine.Color colour)
    void SetOverlayColour(::UnityEngine::Color colour);
    // protected override System.Void NowOffScreen()
    // Offset: 0x184F844
    // Implemented from: PowerUI.Css.DisplayableProperty
    // Base method: System.Void DisplayableProperty::NowOffScreen()
    void NowOffScreen();
    // protected override System.Boolean NowOnScreen()
    // Offset: 0x184F8B4
    // Implemented from: PowerUI.Css.DisplayableProperty
    // Base method: System.Boolean DisplayableProperty::NowOnScreen()
    bool NowOnScreen();
    // public override System.Void Paint()
    // Offset: 0x184FC20
    // Implemented from: PowerUI.Css.DisplayableProperty
    // Base method: System.Void DisplayableProperty::Paint()
    void Paint();
    // protected override System.Void Layout()
    // Offset: 0x184FF38
    // Implemented from: PowerUI.Css.DisplayableProperty
    // Base method: System.Void DisplayableProperty::Layout()
    void Layout();
    // public override System.String ToString()
    // Offset: 0x1851738
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // PowerUI.Css.TextRenderingProperty
  #pragma pack(pop)
  static check_size<sizeof(TextRenderingProperty), 176 + sizeof(float)> __PowerUI_Css_TextRenderingPropertySizeCheck;
  static_assert(sizeof(TextRenderingProperty) == 0xB4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::get_NoEndingSpace
// Il2CppName: get_NoEndingSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::TextRenderingProperty::*)()>(&PowerUI::Css::TextRenderingProperty::get_NoEndingSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "get_NoEndingSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::get_EndSpaceSize
// Il2CppName: get_EndSpaceSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Css::TextRenderingProperty::*)()>(&PowerUI::Css::TextRenderingProperty::get_EndSpaceSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "get_EndSpaceSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::LetterCount
// Il2CppName: LetterCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Css::TextRenderingProperty::*)()>(&PowerUI::Css::TextRenderingProperty::LetterCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "LetterCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::SetDimensions
// Il2CppName: SetDimensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::TextRenderingProperty::*)()>(&PowerUI::Css::TextRenderingProperty::SetDimensions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "SetDimensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::StandardSpaceSize
// Il2CppName: StandardSpaceSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::Css::TextRenderingProperty::*)()>(&PowerUI::Css::TextRenderingProperty::StandardSpaceSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "StandardSpaceSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::FontLoaded
// Il2CppName: FontLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::TextRenderingProperty::*)(::PowerUI::DynamicFont*)>(&PowerUI::Css::TextRenderingProperty::FontLoaded)> {
  static const MethodInfo* get() {
    static auto* font = &::il2cpp_utils::GetClassFromName("PowerUI", "DynamicFont")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "FontLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{font});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::TextRenderingProperty::*)()>(&PowerUI::Css::TextRenderingProperty::SetText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::LetterIndex
// Il2CppName: LetterIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Css::TextRenderingProperty::*)(int)>(&PowerUI::Css::TextRenderingProperty::LetterIndex)> {
  static const MethodInfo* get() {
    static auto* widthOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "LetterIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{widthOffset});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::GetPositionOf
// Il2CppName: GetPositionOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::Css::TextRenderingProperty::*)(int)>(&PowerUI::Css::TextRenderingProperty::GetPositionOf)> {
  static const MethodInfo* get() {
    static auto* letterID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "GetPositionOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{letterID});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::LocalPositionOf
// Il2CppName: LocalPositionOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::Css::TextRenderingProperty::*)(int)>(&PowerUI::Css::TextRenderingProperty::LocalPositionOf)> {
  static const MethodInfo* get() {
    static auto* letterID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "LocalPositionOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{letterID});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::DrawInvertCharacter
// Il2CppName: DrawInvertCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::TextRenderingProperty::*)(int, ByRef<float>, float, ::PowerUI::Renderman*, float, ::PowerUI::BoxRegion*)>(&PowerUI::Css::TextRenderingProperty::DrawInvertCharacter)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* left = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* top = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("PowerUI", "Renderman")->byval_arg;
    static auto* zIndex = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* screenRegion = &::il2cpp_utils::GetClassFromName("PowerUI", "BoxRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "DrawInvertCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, left, top, renderer, zIndex, screenRegion});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::DrawCharacter
// Il2CppName: DrawCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::TextRenderingProperty::*)(int, ByRef<float>, float, ::PowerUI::Renderman*, float, ::PowerUI::BoxRegion*)>(&PowerUI::Css::TextRenderingProperty::DrawCharacter)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* left = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* top = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("PowerUI", "Renderman")->byval_arg;
    static auto* zIndex = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* screenRegion = &::il2cpp_utils::GetClassFromName("PowerUI", "BoxRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "DrawCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, left, top, renderer, zIndex, screenRegion});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::TextRenderingProperty::*)(::System::Text::StringBuilder*)>(&PowerUI::Css::TextRenderingProperty::ToString)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::Get3D
// Il2CppName: Get3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Text3D* (PowerUI::Css::TextRenderingProperty::*)(float, ::UnityEngine::Color, ByRef<float>, ByRef<float>)>(&PowerUI::Css::TextRenderingProperty::Get3D)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* colour = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* left = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* top = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "Get3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale, colour, left, top});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::GetExtrudeCounts
// Il2CppName: GetExtrudeCounts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::TextRenderingProperty::*)(ByRef<int>, ByRef<int>, float)>(&PowerUI::Css::TextRenderingProperty::GetExtrudeCounts)> {
  static const MethodInfo* get() {
    static auto* vertCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* triCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "GetExtrudeCounts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertCount, triCount, scale});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::GetExtrude
// Il2CppName: GetExtrude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::TextRenderingProperty::*)(::PowerUI::Text3D*, int, int, int, int, float, ByRef<float>, ByRef<float>)>(&PowerUI::Css::TextRenderingProperty::GetExtrude)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("PowerUI", "Text3D")->byval_arg;
    static auto* vertIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* triIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* triCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* left = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* top = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "GetExtrude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, vertIndex, triIndex, vertCount, triCount, scale, left, top});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::SetOverlayColour
// Il2CppName: SetOverlayColour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::TextRenderingProperty::*)(::UnityEngine::Color)>(&PowerUI::Css::TextRenderingProperty::SetOverlayColour)> {
  static const MethodInfo* get() {
    static auto* colour = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "SetOverlayColour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colour});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::NowOffScreen
// Il2CppName: NowOffScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::TextRenderingProperty::*)()>(&PowerUI::Css::TextRenderingProperty::NowOffScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "NowOffScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::NowOnScreen
// Il2CppName: NowOnScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::TextRenderingProperty::*)()>(&PowerUI::Css::TextRenderingProperty::NowOnScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "NowOnScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::Paint
// Il2CppName: Paint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::TextRenderingProperty::*)()>(&PowerUI::Css::TextRenderingProperty::Paint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "Paint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::Layout
// Il2CppName: Layout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::TextRenderingProperty::*)()>(&PowerUI::Css::TextRenderingProperty::Layout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "Layout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::TextRenderingProperty::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Css::TextRenderingProperty::*)()>(&PowerUI::Css::TextRenderingProperty::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::TextRenderingProperty*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
