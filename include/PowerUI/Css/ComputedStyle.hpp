// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.Css.Style
#include "PowerUI/Css/Style.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: PowerUI.Css.DisplayType
#include "PowerUI/Css/DisplayType.hpp"
// Including type: PowerUI.Css.PositionType
#include "PowerUI/Css/PositionType.hpp"
// Including type: PowerUI.Css.WhiteSpaceType
#include "PowerUI/Css/WhiteSpaceType.hpp"
// Including type: PowerUI.Css.VisibilityType
#include "PowerUI/Css/VisibilityType.hpp"
// Including type: PowerUI.Css.VerticalAlignType
#include "PowerUI/Css/VerticalAlignType.hpp"
// Including type: PowerUI.Css.HorizontalAlignType
#include "PowerUI/Css/HorizontalAlignType.hpp"
// Including type: PowerUI.Css.OverflowType
#include "PowerUI/Css/OverflowType.hpp"
// Including type: PowerUI.Css.DirectionType
#include "PowerUI/Css/DirectionType.hpp"
// Including type: PowerUI.Css.FloatType
#include "PowerUI/Css/FloatType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Transformation
  class Transformation;
  // Forward declaring type: InputTag
  class InputTag;
  // Forward declaring type: Element
  class Element;
}
// Forward declaring namespace: PowerUI::Css
namespace PowerUI::Css {
  // Forward declaring type: BorderProperty
  class BorderProperty;
  // Forward declaring type: BackgroundImage
  class BackgroundImage;
  // Forward declaring type: BackgroundColour
  class BackgroundColour;
  // Forward declaring type: TextRenderingProperty
  class TextRenderingProperty;
  // Forward declaring type: ShaderData
  class ShaderData;
  // Forward declaring type: SelectorType
  struct SelectorType;
  // Forward declaring type: CssProperty
  class CssProperty;
  // Forward declaring type: Value
  class Value;
  // Forward declaring type: ShadowData
  class ShadowData;
  // Forward declaring type: StrokeData
  class StrokeData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Forward declaring type: ComputedStyle
  class ComputedStyle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Css::ComputedStyle);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Css::ComputedStyle*, "PowerUI.Css", "ComputedStyle");
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Size: 0x178
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Css.ComputedStyle
  // [TokenAttribute] Offset: FFFFFFFF
  class ComputedStyle : public ::PowerUI::Css::Style {
    public:
    public:
    // public System.Boolean Clip
    // Size: 0x1
    // Offset: 0x20
    bool Clip;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Clip and: ZIndex
    char __padding0[0x3] = {};
    // public System.Single ZIndex
    // Size: 0x4
    // Offset: 0x24
    float ZIndex;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single FixedZIndex
    // Size: 0x4
    // Offset: 0x28
    float FixedZIndex;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 OffsetTop
    // Size: 0x4
    // Offset: 0x2C
    int OffsetTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 OffsetLeft
    // Size: 0x4
    // Offset: 0x30
    int OffsetLeft;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PixelWidth
    // Size: 0x4
    // Offset: 0x34
    int PixelWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PixelHeight
    // Size: 0x4
    // Offset: 0x38
    int PixelHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 InnerWidth
    // Size: 0x4
    // Offset: 0x3C
    int InnerWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 InnerHeight
    // Size: 0x4
    // Offset: 0x40
    int InnerHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean FixedDepth
    // Size: 0x1
    // Offset: 0x44
    bool FixedDepth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean FixedWidth
    // Size: 0x1
    // Offset: 0x45
    bool FixedWidth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean FixedHeight
    // Size: 0x1
    // Offset: 0x46
    bool FixedHeight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: FixedHeight and: ParentOffsetTop
    char __padding11[0x1] = {};
    // public System.Int32 ParentOffsetTop
    // Size: 0x4
    // Offset: 0x48
    int ParentOffsetTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ParentOffsetLeft
    // Size: 0x4
    // Offset: 0x4C
    int ParentOffsetLeft;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ContentWidth
    // Size: 0x4
    // Offset: 0x50
    int ContentWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ContentHeight
    // Size: 0x4
    // Offset: 0x54
    int ContentHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 BorderTop
    // Size: 0x4
    // Offset: 0x58
    int BorderTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 BorderLeft
    // Size: 0x4
    // Offset: 0x5C
    int BorderLeft;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public PowerUI.Transformation Transform
    // Size: 0x8
    // Offset: 0x60
    ::PowerUI::Transformation* Transform;
    // Field size check
    static_assert(sizeof(::PowerUI::Transformation*) == 0x8);
    // public UnityEngine.Color ColorOverlay
    // Size: 0x10
    // Offset: 0x68
    ::UnityEngine::Color ColorOverlay;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Int32 PaddedWidth
    // Size: 0x4
    // Offset: 0x78
    int PaddedWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PaddedHeight
    // Size: 0x4
    // Offset: 0x7C
    int PaddedHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ScrollTop
    // Size: 0x4
    // Offset: 0x80
    int ScrollTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ScrollLeft
    // Size: 0x4
    // Offset: 0x84
    int ScrollLeft;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 StyleOffsetTop
    // Size: 0x4
    // Offset: 0x88
    int StyleOffsetTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 StyleOffsetLeft
    // Size: 0x4
    // Offset: 0x8C
    int StyleOffsetLeft;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MarginTop
    // Size: 0x4
    // Offset: 0x90
    int MarginTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MarginLeft
    // Size: 0x4
    // Offset: 0x94
    int MarginLeft;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MarginRight
    // Size: 0x4
    // Offset: 0x98
    int MarginRight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MarginBottom
    // Size: 0x4
    // Offset: 0x9C
    int MarginBottom;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PaddingTop
    // Size: 0x4
    // Offset: 0xA0
    int PaddingTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PaddingLeft
    // Size: 0x4
    // Offset: 0xA4
    int PaddingLeft;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PaddingRight
    // Size: 0x4
    // Offset: 0xA8
    int PaddingRight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PaddingBottom
    // Size: 0x4
    // Offset: 0xAC
    int PaddingBottom;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean AutoMarginX
    // Size: 0x1
    // Offset: 0xB0
    bool AutoMarginX;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean AutoMarginY
    // Size: 0x1
    // Offset: 0xB1
    bool AutoMarginY;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: AutoMarginY and: Baseline
    char __padding35[0x2] = {};
    // public System.Int32 Baseline
    // Size: 0x4
    // Offset: 0xB4
    int Baseline;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PositionTop
    // Size: 0x4
    // Offset: 0xB8
    int PositionTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PositionLeft
    // Size: 0x4
    // Offset: 0xBC
    int PositionLeft;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PositionRight
    // Size: 0x4
    // Offset: 0xC0
    int PositionRight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PositionBottom
    // Size: 0x4
    // Offset: 0xC4
    int PositionBottom;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean RightPositioned
    // Size: 0x1
    // Offset: 0xC8
    bool RightPositioned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean BottomPositioned
    // Size: 0x1
    // Offset: 0xC9
    bool BottomPositioned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: BottomPositioned and: NextPacked
    char __padding42[0x6] = {};
    // public PowerUI.Css.ComputedStyle NextPacked
    // Size: 0x8
    // Offset: 0xD0
    ::PowerUI::Css::ComputedStyle* NextPacked;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::ComputedStyle*) == 0x8);
    // public PowerUI.Css.ComputedStyle NextOnLine
    // Size: 0x8
    // Offset: 0xD8
    ::PowerUI::Css::ComputedStyle* NextOnLine;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::ComputedStyle*) == 0x8);
    // public PowerUI.Css.DisplayType Display
    // Size: 0x4
    // Offset: 0xE0
    ::PowerUI::Css::DisplayType Display;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::DisplayType) == 0x4);
    // public PowerUI.Css.PositionType Position
    // Size: 0x4
    // Offset: 0xE4
    ::PowerUI::Css::PositionType Position;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::PositionType) == 0x4);
    // public PowerUI.Css.WhiteSpaceType WhiteSpace
    // Size: 0x4
    // Offset: 0xE8
    ::PowerUI::Css::WhiteSpaceType WhiteSpace;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::WhiteSpaceType) == 0x4);
    // public PowerUI.Css.VisibilityType Visibility
    // Size: 0x4
    // Offset: 0xEC
    ::PowerUI::Css::VisibilityType Visibility;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::VisibilityType) == 0x4);
    // public PowerUI.Css.VerticalAlignType VerticalAlign
    // Size: 0x4
    // Offset: 0xF0
    ::PowerUI::Css::VerticalAlignType VerticalAlign;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::VerticalAlignType) == 0x4);
    // public PowerUI.Css.HorizontalAlignType HorizontalAlign
    // Size: 0x4
    // Offset: 0xF4
    ::PowerUI::Css::HorizontalAlignType HorizontalAlign;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::HorizontalAlignType) == 0x4);
    // public PowerUI.Css.HorizontalAlignType HorizontalAlignLast
    // Size: 0x4
    // Offset: 0xF8
    ::PowerUI::Css::HorizontalAlignType HorizontalAlignLast;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::HorizontalAlignType) == 0x4);
    // Padding between fields: HorizontalAlignLast and: Border
    char __padding51[0x4] = {};
    // public PowerUI.Css.BorderProperty Border
    // Size: 0x8
    // Offset: 0x100
    ::PowerUI::Css::BorderProperty* Border;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::BorderProperty*) == 0x8);
    // public PowerUI.Css.BackgroundImage BGImage
    // Size: 0x8
    // Offset: 0x108
    ::PowerUI::Css::BackgroundImage* BGImage;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::BackgroundImage*) == 0x8);
    // public PowerUI.Css.BackgroundColour BGColour
    // Size: 0x8
    // Offset: 0x110
    ::PowerUI::Css::BackgroundColour* BGColour;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::BackgroundColour*) == 0x8);
    // public PowerUI.Css.TextRenderingProperty Text
    // Size: 0x8
    // Offset: 0x118
    ::PowerUI::Css::TextRenderingProperty* Text;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::TextRenderingProperty*) == 0x8);
    // public System.Int32 FullHeight
    // Size: 0x4
    // Offset: 0x120
    int FullHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 FullWidth
    // Size: 0x4
    // Offset: 0x124
    int FullWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.String IDSelector
    // Size: 0x8
    // Offset: 0x128
    ::StringW IDSelector;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String TagSelector
    // Size: 0x8
    // Offset: 0x130
    ::StringW TagSelector;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String ClassSelector
    // Size: 0x8
    // Offset: 0x138
    ::StringW ClassSelector;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String[] ExtraClassSelectors
    // Size: 0x8
    // Offset: 0x140
    ::ArrayW<::StringW> ExtraClassSelectors;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.Int32 MaximumWidth
    // Size: 0x4
    // Offset: 0x148
    int MaximumWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MaximumHeight
    // Size: 0x4
    // Offset: 0x14C
    int MaximumHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MinimumWidth
    // Size: 0x4
    // Offset: 0x150
    int MinimumWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MinimumHeight
    // Size: 0x4
    // Offset: 0x154
    int MinimumHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public PowerUI.Css.OverflowType OverflowX
    // Size: 0x4
    // Offset: 0x158
    ::PowerUI::Css::OverflowType OverflowX;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::OverflowType) == 0x4);
    // public PowerUI.Css.OverflowType OverflowY
    // Size: 0x4
    // Offset: 0x15C
    ::PowerUI::Css::OverflowType OverflowY;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::OverflowType) == 0x4);
    // public PowerUI.Css.DirectionType DrawDirection
    // Size: 0x4
    // Offset: 0x160
    ::PowerUI::Css::DirectionType DrawDirection;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::DirectionType) == 0x4);
    // public PowerUI.Css.FloatType Float
    // Size: 0x4
    // Offset: 0x164
    ::PowerUI::Css::FloatType Float;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::FloatType) == 0x4);
    // public UnityEngine.GameObject ParticleSystem
    // Size: 0x8
    // Offset: 0x168
    ::UnityEngine::GameObject* ParticleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public PowerUI.Css.ShaderData Shading
    // Size: 0x8
    // Offset: 0x170
    ::PowerUI::Css::ShaderData* Shading;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::ShaderData*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean Clip
    [[deprecated("Use field access instead!")]] bool& dyn_Clip();
    // Get instance field reference: public System.Single ZIndex
    [[deprecated("Use field access instead!")]] float& dyn_ZIndex();
    // Get instance field reference: public System.Single FixedZIndex
    [[deprecated("Use field access instead!")]] float& dyn_FixedZIndex();
    // Get instance field reference: public System.Int32 OffsetTop
    [[deprecated("Use field access instead!")]] int& dyn_OffsetTop();
    // Get instance field reference: public System.Int32 OffsetLeft
    [[deprecated("Use field access instead!")]] int& dyn_OffsetLeft();
    // Get instance field reference: public System.Int32 PixelWidth
    [[deprecated("Use field access instead!")]] int& dyn_PixelWidth();
    // Get instance field reference: public System.Int32 PixelHeight
    [[deprecated("Use field access instead!")]] int& dyn_PixelHeight();
    // Get instance field reference: public System.Int32 InnerWidth
    [[deprecated("Use field access instead!")]] int& dyn_InnerWidth();
    // Get instance field reference: public System.Int32 InnerHeight
    [[deprecated("Use field access instead!")]] int& dyn_InnerHeight();
    // Get instance field reference: public System.Boolean FixedDepth
    [[deprecated("Use field access instead!")]] bool& dyn_FixedDepth();
    // Get instance field reference: public System.Boolean FixedWidth
    [[deprecated("Use field access instead!")]] bool& dyn_FixedWidth();
    // Get instance field reference: public System.Boolean FixedHeight
    [[deprecated("Use field access instead!")]] bool& dyn_FixedHeight();
    // Get instance field reference: public System.Int32 ParentOffsetTop
    [[deprecated("Use field access instead!")]] int& dyn_ParentOffsetTop();
    // Get instance field reference: public System.Int32 ParentOffsetLeft
    [[deprecated("Use field access instead!")]] int& dyn_ParentOffsetLeft();
    // Get instance field reference: public System.Int32 ContentWidth
    [[deprecated("Use field access instead!")]] int& dyn_ContentWidth();
    // Get instance field reference: public System.Int32 ContentHeight
    [[deprecated("Use field access instead!")]] int& dyn_ContentHeight();
    // Get instance field reference: public System.Int32 BorderTop
    [[deprecated("Use field access instead!")]] int& dyn_BorderTop();
    // Get instance field reference: public System.Int32 BorderLeft
    [[deprecated("Use field access instead!")]] int& dyn_BorderLeft();
    // Get instance field reference: public PowerUI.Transformation Transform
    [[deprecated("Use field access instead!")]] ::PowerUI::Transformation*& dyn_Transform();
    // Get instance field reference: public UnityEngine.Color ColorOverlay
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_ColorOverlay();
    // Get instance field reference: public System.Int32 PaddedWidth
    [[deprecated("Use field access instead!")]] int& dyn_PaddedWidth();
    // Get instance field reference: public System.Int32 PaddedHeight
    [[deprecated("Use field access instead!")]] int& dyn_PaddedHeight();
    // Get instance field reference: public System.Int32 ScrollTop
    [[deprecated("Use field access instead!")]] int& dyn_ScrollTop();
    // Get instance field reference: public System.Int32 ScrollLeft
    [[deprecated("Use field access instead!")]] int& dyn_ScrollLeft();
    // Get instance field reference: public System.Int32 StyleOffsetTop
    [[deprecated("Use field access instead!")]] int& dyn_StyleOffsetTop();
    // Get instance field reference: public System.Int32 StyleOffsetLeft
    [[deprecated("Use field access instead!")]] int& dyn_StyleOffsetLeft();
    // Get instance field reference: public System.Int32 MarginTop
    [[deprecated("Use field access instead!")]] int& dyn_MarginTop();
    // Get instance field reference: public System.Int32 MarginLeft
    [[deprecated("Use field access instead!")]] int& dyn_MarginLeft();
    // Get instance field reference: public System.Int32 MarginRight
    [[deprecated("Use field access instead!")]] int& dyn_MarginRight();
    // Get instance field reference: public System.Int32 MarginBottom
    [[deprecated("Use field access instead!")]] int& dyn_MarginBottom();
    // Get instance field reference: public System.Int32 PaddingTop
    [[deprecated("Use field access instead!")]] int& dyn_PaddingTop();
    // Get instance field reference: public System.Int32 PaddingLeft
    [[deprecated("Use field access instead!")]] int& dyn_PaddingLeft();
    // Get instance field reference: public System.Int32 PaddingRight
    [[deprecated("Use field access instead!")]] int& dyn_PaddingRight();
    // Get instance field reference: public System.Int32 PaddingBottom
    [[deprecated("Use field access instead!")]] int& dyn_PaddingBottom();
    // Get instance field reference: public System.Boolean AutoMarginX
    [[deprecated("Use field access instead!")]] bool& dyn_AutoMarginX();
    // Get instance field reference: public System.Boolean AutoMarginY
    [[deprecated("Use field access instead!")]] bool& dyn_AutoMarginY();
    // Get instance field reference: public System.Int32 Baseline
    [[deprecated("Use field access instead!")]] int& dyn_Baseline();
    // Get instance field reference: public System.Int32 PositionTop
    [[deprecated("Use field access instead!")]] int& dyn_PositionTop();
    // Get instance field reference: public System.Int32 PositionLeft
    [[deprecated("Use field access instead!")]] int& dyn_PositionLeft();
    // Get instance field reference: public System.Int32 PositionRight
    [[deprecated("Use field access instead!")]] int& dyn_PositionRight();
    // Get instance field reference: public System.Int32 PositionBottom
    [[deprecated("Use field access instead!")]] int& dyn_PositionBottom();
    // Get instance field reference: public System.Boolean RightPositioned
    [[deprecated("Use field access instead!")]] bool& dyn_RightPositioned();
    // Get instance field reference: public System.Boolean BottomPositioned
    [[deprecated("Use field access instead!")]] bool& dyn_BottomPositioned();
    // Get instance field reference: public PowerUI.Css.ComputedStyle NextPacked
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::ComputedStyle*& dyn_NextPacked();
    // Get instance field reference: public PowerUI.Css.ComputedStyle NextOnLine
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::ComputedStyle*& dyn_NextOnLine();
    // Get instance field reference: public PowerUI.Css.DisplayType Display
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::DisplayType& dyn_Display();
    // Get instance field reference: public PowerUI.Css.PositionType Position
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::PositionType& dyn_Position();
    // Get instance field reference: public PowerUI.Css.WhiteSpaceType WhiteSpace
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::WhiteSpaceType& dyn_WhiteSpace();
    // Get instance field reference: public PowerUI.Css.VisibilityType Visibility
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::VisibilityType& dyn_Visibility();
    // Get instance field reference: public PowerUI.Css.VerticalAlignType VerticalAlign
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::VerticalAlignType& dyn_VerticalAlign();
    // Get instance field reference: public PowerUI.Css.HorizontalAlignType HorizontalAlign
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::HorizontalAlignType& dyn_HorizontalAlign();
    // Get instance field reference: public PowerUI.Css.HorizontalAlignType HorizontalAlignLast
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::HorizontalAlignType& dyn_HorizontalAlignLast();
    // Get instance field reference: public PowerUI.Css.BorderProperty Border
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::BorderProperty*& dyn_Border();
    // Get instance field reference: public PowerUI.Css.BackgroundImage BGImage
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::BackgroundImage*& dyn_BGImage();
    // Get instance field reference: public PowerUI.Css.BackgroundColour BGColour
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::BackgroundColour*& dyn_BGColour();
    // Get instance field reference: public PowerUI.Css.TextRenderingProperty Text
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::TextRenderingProperty*& dyn_Text();
    // Get instance field reference: public System.Int32 FullHeight
    [[deprecated("Use field access instead!")]] int& dyn_FullHeight();
    // Get instance field reference: public System.Int32 FullWidth
    [[deprecated("Use field access instead!")]] int& dyn_FullWidth();
    // Get instance field reference: public System.String IDSelector
    [[deprecated("Use field access instead!")]] ::StringW& dyn_IDSelector();
    // Get instance field reference: public System.String TagSelector
    [[deprecated("Use field access instead!")]] ::StringW& dyn_TagSelector();
    // Get instance field reference: public System.String ClassSelector
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ClassSelector();
    // Get instance field reference: public System.String[] ExtraClassSelectors
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_ExtraClassSelectors();
    // Get instance field reference: public System.Int32 MaximumWidth
    [[deprecated("Use field access instead!")]] int& dyn_MaximumWidth();
    // Get instance field reference: public System.Int32 MaximumHeight
    [[deprecated("Use field access instead!")]] int& dyn_MaximumHeight();
    // Get instance field reference: public System.Int32 MinimumWidth
    [[deprecated("Use field access instead!")]] int& dyn_MinimumWidth();
    // Get instance field reference: public System.Int32 MinimumHeight
    [[deprecated("Use field access instead!")]] int& dyn_MinimumHeight();
    // Get instance field reference: public PowerUI.Css.OverflowType OverflowX
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::OverflowType& dyn_OverflowX();
    // Get instance field reference: public PowerUI.Css.OverflowType OverflowY
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::OverflowType& dyn_OverflowY();
    // Get instance field reference: public PowerUI.Css.DirectionType DrawDirection
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::DirectionType& dyn_DrawDirection();
    // Get instance field reference: public PowerUI.Css.FloatType Float
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::FloatType& dyn_Float();
    // Get instance field reference: public UnityEngine.GameObject ParticleSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_ParticleSystem();
    // Get instance field reference: public PowerUI.Css.ShaderData Shading
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::ShaderData*& dyn_Shading();
    // public System.Boolean Contains(System.Int32 x, System.Int32 y)
    // Offset: 0xEC292C
    bool Contains(int x, int y);
    // public System.Boolean TransformedOverlap(PowerUI.Css.ComputedStyle style)
    // Offset: 0xEC2970
    bool TransformedOverlap(::PowerUI::Css::ComputedStyle* style);
    // public System.Void VisibilityNone()
    // Offset: 0xEC29D4
    void VisibilityNone();
    // public System.Void DisplayNone()
    // Offset: 0xEC2A14
    void DisplayNone();
    // public System.Boolean BoxOverlap(PowerUI.Css.ComputedStyle style)
    // Offset: 0xEC2A54
    bool BoxOverlap(::PowerUI::Css::ComputedStyle* style);
    // public System.Single GetMidpointX()
    // Offset: 0xEC2AFC
    float GetMidpointX();
    // public System.Single GetMidpointY()
    // Offset: 0xEC2B18
    float GetMidpointY();
    // public System.Void ParentChanged()
    // Offset: 0xEC2B38
    void ParentChanged();
    // public System.Int32 get_EndSpaceSize()
    // Offset: 0xEC3184
    int get_EndSpaceSize();
    // public System.Boolean get_HasBackground()
    // Offset: 0xEC3198
    bool get_HasBackground();
    // public System.Boolean IsOffset()
    // Offset: 0xEC31B8
    bool IsOffset();
    // public System.Single VisiblePercentageX()
    // Offset: 0xEC31E8
    float VisiblePercentageX();
    // public System.Single VisiblePercentageY()
    // Offset: 0xEC3200
    float VisiblePercentageY();
    // public System.Boolean Hover()
    // Offset: 0xEC3218
    bool Hover();
    // public System.Void Unhover()
    // Offset: 0xEC3354
    void Unhover();
    // public System.Boolean SetModifier(System.String modifier)
    // Offset: 0xEC3268
    bool SetModifier(::StringW modifier);
    // private System.Boolean SetModifier(PowerUI.Css.SelectorType type, System.String selector, System.String modifier)
    // Offset: 0xEC3510
    bool SetModifier(::PowerUI::Css::SelectorType type, ::StringW selector, ::StringW modifier);
    // private System.Boolean SetModifier(PowerUI.Css.SelectorType type, System.String selector, System.String modifier, System.Int32 innerIndex)
    // Offset: 0xEC3600
    bool SetModifier(::PowerUI::Css::SelectorType type, ::StringW selector, ::StringW modifier, int innerIndex);
    // public System.Void UnsetModifier(System.String modifier)
    // Offset: 0xEC33A4
    void UnsetModifier(::StringW modifier);
    // private System.Void UnsetClassModifier(System.String modifier)
    // Offset: 0xEC3C10
    void UnsetClassModifier(::StringW modifier);
    // private System.Void UnsetModifier(PowerUI.Css.SelectorType type, System.String selector, System.String modifier)
    // Offset: 0xEC3B50
    void UnsetModifier(::PowerUI::Css::SelectorType type, ::StringW selector, ::StringW modifier);
    // public System.Boolean HasModifier(System.String modifier)
    // Offset: 0xEC4630
    bool HasModifier(::StringW modifier);
    // public System.Void RefreshSelector(PowerUI.Css.SelectorType type)
    // Offset: 0xEC4770
    void RefreshSelector(::PowerUI::Css::SelectorType type);
    // public System.Boolean RemoveStyle(System.String selector, PowerUI.Css.SelectorType type)
    // Offset: 0xEC3EF8
    bool RemoveStyle(::StringW selector, ::PowerUI::Css::SelectorType type);
    // public System.Boolean AddStyle(System.String selector, PowerUI.Css.SelectorType type)
    // Offset: 0xEC377C
    bool AddStyle(::StringW selector, ::PowerUI::Css::SelectorType type);
    // public System.Void SetSelector(PowerUI.Css.SelectorType type, System.String value)
    // Offset: 0xEC4270
    void SetSelector(::PowerUI::Css::SelectorType type, ::StringW value);
    // public System.Void ChangeParentProperty(PowerUI.Css.CssProperty property, PowerUI.Css.Value newValue)
    // Offset: 0xEC30CC
    void ChangeParentProperty(::PowerUI::Css::CssProperty* property, ::PowerUI::Css::Value* newValue);
    // public PowerUI.Css.Value GetLocalStyle(System.String property)
    // Offset: 0xEC4B98
    ::PowerUI::Css::Value* GetLocalStyle(::StringW property);
    // public PowerUI.Css.Value GetLocalStyle(PowerUI.Css.CssProperty property)
    // Offset: 0xEC4C04
    ::PowerUI::Css::Value* GetLocalStyle(::PowerUI::Css::CssProperty* property);
    // public System.Void ChangeProperty(PowerUI.Css.CssProperty property, PowerUI.Css.Value newValue)
    // Offset: 0xEC49CC
    void ChangeProperty(::PowerUI::Css::CssProperty* property, ::PowerUI::Css::Value* newValue);
    // public System.Void EnforceNoInline()
    // Offset: 0xEC4C54
    void EnforceNoInline();
    // public System.Boolean SetupTransform(PowerUI.Css.Value newValue)
    // Offset: 0xEC4C84
    bool SetupTransform(::PowerUI::Css::Value* newValue);
    // private System.Boolean NeedsScrollbar(PowerUI.Css.OverflowType type)
    // Offset: 0xEC4D08
    bool NeedsScrollbar(::PowerUI::Css::OverflowType type);
    // private PowerUI.InputTag MakeScrollbar(System.Boolean horizontal)
    // Offset: 0xEC4D18
    ::PowerUI::InputTag* MakeScrollbar(bool horizontal);
    // public System.Void ResetScrollbars()
    // Offset: 0xEC4E60
    void ResetScrollbars();
    // public System.Void SetPixelWidth(System.Boolean tellHandler)
    // Offset: 0xEC50C8
    void SetPixelWidth(bool tellHandler);
    // public System.Void SetPixelHeight(System.Boolean tellHandler)
    // Offset: 0xEC5238
    void SetPixelHeight(bool tellHandler);
    // public System.Void SetSize()
    // Offset: 0xEC52F8
    void SetSize();
    // public System.Void RequestTransform()
    // Offset: 0xEC5374
    void RequestTransform();
    // public System.Void RequestLayout()
    // Offset: 0xEC5078
    void RequestLayout();
    // public System.Void SetParentDimension(System.Int32 dimension, System.Boolean isWidth, PowerUI.Css.ComputedStyle parent)
    // Offset: 0xEC2D54
    void SetParentDimension(int dimension, bool isWidth, ::PowerUI::Css::ComputedStyle* parent);
    // public System.Void Repaint()
    // Offset: 0xEC53E8
    void Repaint();
    // protected System.Void ApplyTransform()
    // Offset: 0xEC556C
    void ApplyTransform();
    // public System.Void WentOffScreen()
    // Offset: 0xEC5498
    void WentOffScreen();
    // public System.Void Render()
    // Offset: 0xEC5730
    void Render();
    // public System.Void ChangeClassProperty(System.String cssProperty, PowerUI.Css.Value newValue)
    // Offset: 0xEC5970
    void ChangeClassProperty(::StringW cssProperty, ::PowerUI::Css::Value* newValue);
    // public System.Void ChangeClassProperty(PowerUI.Css.CssProperty property, PowerUI.Css.Value newValue)
    // Offset: 0xEC4968
    void ChangeClassProperty(::PowerUI::Css::CssProperty* property, ::PowerUI::Css::Value* newValue);
    // public PowerUI.Css.Value GetClassStyle(PowerUI.Css.CssProperty property)
    // Offset: 0xEC5A44
    ::PowerUI::Css::Value* GetClassStyle(::PowerUI::Css::CssProperty* property);
    // public PowerUI.Css.Value GetClassStyle(System.String property)
    // Offset: 0xEC5B70
    ::PowerUI::Css::Value* GetClassStyle(::StringW property);
    // public System.Void ChangeIDProperty(System.String cssProperty, PowerUI.Css.Value newValue)
    // Offset: 0xEC5C9C
    void ChangeIDProperty(::StringW cssProperty, ::PowerUI::Css::Value* newValue);
    // public System.Void ChangeIDProperty(PowerUI.Css.CssProperty property, PowerUI.Css.Value newValue)
    // Offset: 0xEC486C
    void ChangeIDProperty(::PowerUI::Css::CssProperty* property, ::PowerUI::Css::Value* newValue);
    // public PowerUI.Css.Value GetIDStyle(PowerUI.Css.CssProperty property)
    // Offset: 0xEC59B8
    ::PowerUI::Css::Value* GetIDStyle(::PowerUI::Css::CssProperty* property);
    // public PowerUI.Css.Value GetIDStyle(System.String property)
    // Offset: 0xEC5CE4
    ::PowerUI::Css::Value* GetIDStyle(::StringW property);
    // public System.Void ChangeTagProperty(PowerUI.Css.CssProperty property, PowerUI.Css.Value newValue)
    // Offset: 0xEC4904
    void ChangeTagProperty(::PowerUI::Css::CssProperty* property, ::PowerUI::Css::Value* newValue);
    // public System.Void ChangeTagProperty(System.String cssProperty, PowerUI.Css.Value newValue)
    // Offset: 0xEB9800
    void ChangeTagProperty(::StringW cssProperty, ::PowerUI::Css::Value* newValue);
    // public PowerUI.Css.ShaderData RequireShading()
    // Offset: 0xEC5D70
    ::PowerUI::Css::ShaderData* RequireShading();
    // public PowerUI.Css.ShadowData get_TextShadow()
    // Offset: 0xEC5DF8
    ::PowerUI::Css::ShadowData* get_TextShadow();
    // public System.Void set_TextShadow(PowerUI.Css.ShadowData value)
    // Offset: 0xEC5E10
    void set_TextShadow(::PowerUI::Css::ShadowData* value);
    // public PowerUI.Css.StrokeData get_TextStroke()
    // Offset: 0xEC5EE4
    ::PowerUI::Css::StrokeData* get_TextStroke();
    // public System.Void set_TextStroke(PowerUI.Css.StrokeData value)
    // Offset: 0xEC5EFC
    void set_TextStroke(::PowerUI::Css::StrokeData* value);
    // public System.Void .ctor(PowerUI.Element element)
    // Offset: 0xEC286C
    // Implemented from: PowerUI.Css.Style
    // Base method: System.Void Style::.ctor(PowerUI.Element element)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ComputedStyle* New_ctor(::PowerUI::Element* element) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Css::ComputedStyle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ComputedStyle*, creationType>(element)));
    }
  }; // PowerUI.Css.ComputedStyle
  #pragma pack(pop)
  static check_size<sizeof(ComputedStyle), 368 + sizeof(::PowerUI::Css::ShaderData*)> __PowerUI_Css_ComputedStyleSizeCheck;
  static_assert(sizeof(ComputedStyle) == 0x178);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ComputedStyle::*)(int, int)>(&PowerUI::Css::ComputedStyle::Contains)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::TransformedOverlap
// Il2CppName: TransformedOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::ComputedStyle*)>(&PowerUI::Css::ComputedStyle::TransformedOverlap)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "TransformedOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::VisibilityNone
// Il2CppName: VisibilityNone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::VisibilityNone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "VisibilityNone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::DisplayNone
// Il2CppName: DisplayNone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::DisplayNone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "DisplayNone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::BoxOverlap
// Il2CppName: BoxOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::ComputedStyle*)>(&PowerUI::Css::ComputedStyle::BoxOverlap)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "BoxOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::GetMidpointX
// Il2CppName: GetMidpointX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::GetMidpointX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "GetMidpointX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::GetMidpointY
// Il2CppName: GetMidpointY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::GetMidpointY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "GetMidpointY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::ParentChanged
// Il2CppName: ParentChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::ParentChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "ParentChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::get_EndSpaceSize
// Il2CppName: get_EndSpaceSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::get_EndSpaceSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "get_EndSpaceSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::get_HasBackground
// Il2CppName: get_HasBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::get_HasBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "get_HasBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::IsOffset
// Il2CppName: IsOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::IsOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "IsOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::VisiblePercentageX
// Il2CppName: VisiblePercentageX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::VisiblePercentageX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "VisiblePercentageX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::VisiblePercentageY
// Il2CppName: VisiblePercentageY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::VisiblePercentageY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "VisiblePercentageY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::Hover
// Il2CppName: Hover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::Hover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "Hover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::Unhover
// Il2CppName: Unhover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::Unhover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "Unhover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::SetModifier
// Il2CppName: SetModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ComputedStyle::*)(::StringW)>(&PowerUI::Css::ComputedStyle::SetModifier)> {
  static const MethodInfo* get() {
    static auto* modifier = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "SetModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{modifier});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::SetModifier
// Il2CppName: SetModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::SelectorType, ::StringW, ::StringW)>(&PowerUI::Css::ComputedStyle::SetModifier)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "SelectorType")->byval_arg;
    static auto* selector = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* modifier = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "SetModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, selector, modifier});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::SetModifier
// Il2CppName: SetModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::SelectorType, ::StringW, ::StringW, int)>(&PowerUI::Css::ComputedStyle::SetModifier)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "SelectorType")->byval_arg;
    static auto* selector = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* modifier = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* innerIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "SetModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, selector, modifier, innerIndex});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::UnsetModifier
// Il2CppName: UnsetModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(::StringW)>(&PowerUI::Css::ComputedStyle::UnsetModifier)> {
  static const MethodInfo* get() {
    static auto* modifier = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "UnsetModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{modifier});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::UnsetClassModifier
// Il2CppName: UnsetClassModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(::StringW)>(&PowerUI::Css::ComputedStyle::UnsetClassModifier)> {
  static const MethodInfo* get() {
    static auto* modifier = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "UnsetClassModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{modifier});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::UnsetModifier
// Il2CppName: UnsetModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::SelectorType, ::StringW, ::StringW)>(&PowerUI::Css::ComputedStyle::UnsetModifier)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "SelectorType")->byval_arg;
    static auto* selector = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* modifier = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "UnsetModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, selector, modifier});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::HasModifier
// Il2CppName: HasModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ComputedStyle::*)(::StringW)>(&PowerUI::Css::ComputedStyle::HasModifier)> {
  static const MethodInfo* get() {
    static auto* modifier = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "HasModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{modifier});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::RefreshSelector
// Il2CppName: RefreshSelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::SelectorType)>(&PowerUI::Css::ComputedStyle::RefreshSelector)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "SelectorType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "RefreshSelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::RemoveStyle
// Il2CppName: RemoveStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ComputedStyle::*)(::StringW, ::PowerUI::Css::SelectorType)>(&PowerUI::Css::ComputedStyle::RemoveStyle)> {
  static const MethodInfo* get() {
    static auto* selector = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "SelectorType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "RemoveStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selector, type});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::AddStyle
// Il2CppName: AddStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ComputedStyle::*)(::StringW, ::PowerUI::Css::SelectorType)>(&PowerUI::Css::ComputedStyle::AddStyle)> {
  static const MethodInfo* get() {
    static auto* selector = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "SelectorType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "AddStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selector, type});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::SetSelector
// Il2CppName: SetSelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::SelectorType, ::StringW)>(&PowerUI::Css::ComputedStyle::SetSelector)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "SelectorType")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "SetSelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, value});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::ChangeParentProperty
// Il2CppName: ChangeParentProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::CssProperty*, ::PowerUI::Css::Value*)>(&PowerUI::Css::ComputedStyle::ChangeParentProperty)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "CssProperty")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "Value")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "ChangeParentProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, newValue});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::GetLocalStyle
// Il2CppName: GetLocalStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Css::Value* (PowerUI::Css::ComputedStyle::*)(::StringW)>(&PowerUI::Css::ComputedStyle::GetLocalStyle)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "GetLocalStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::GetLocalStyle
// Il2CppName: GetLocalStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Css::Value* (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::CssProperty*)>(&PowerUI::Css::ComputedStyle::GetLocalStyle)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "CssProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "GetLocalStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::ChangeProperty
// Il2CppName: ChangeProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::CssProperty*, ::PowerUI::Css::Value*)>(&PowerUI::Css::ComputedStyle::ChangeProperty)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "CssProperty")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "Value")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "ChangeProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, newValue});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::EnforceNoInline
// Il2CppName: EnforceNoInline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::EnforceNoInline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "EnforceNoInline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::SetupTransform
// Il2CppName: SetupTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::Value*)>(&PowerUI::Css::ComputedStyle::SetupTransform)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "Value")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "SetupTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::NeedsScrollbar
// Il2CppName: NeedsScrollbar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::OverflowType)>(&PowerUI::Css::ComputedStyle::NeedsScrollbar)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "OverflowType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "NeedsScrollbar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::MakeScrollbar
// Il2CppName: MakeScrollbar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::InputTag* (PowerUI::Css::ComputedStyle::*)(bool)>(&PowerUI::Css::ComputedStyle::MakeScrollbar)> {
  static const MethodInfo* get() {
    static auto* horizontal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "MakeScrollbar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{horizontal});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::ResetScrollbars
// Il2CppName: ResetScrollbars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::ResetScrollbars)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "ResetScrollbars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::SetPixelWidth
// Il2CppName: SetPixelWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(bool)>(&PowerUI::Css::ComputedStyle::SetPixelWidth)> {
  static const MethodInfo* get() {
    static auto* tellHandler = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "SetPixelWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tellHandler});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::SetPixelHeight
// Il2CppName: SetPixelHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(bool)>(&PowerUI::Css::ComputedStyle::SetPixelHeight)> {
  static const MethodInfo* get() {
    static auto* tellHandler = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "SetPixelHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tellHandler});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::SetSize
// Il2CppName: SetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::SetSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "SetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::RequestTransform
// Il2CppName: RequestTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::RequestTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "RequestTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::RequestLayout
// Il2CppName: RequestLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::RequestLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "RequestLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::SetParentDimension
// Il2CppName: SetParentDimension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(int, bool, ::PowerUI::Css::ComputedStyle*)>(&PowerUI::Css::ComputedStyle::SetParentDimension)> {
  static const MethodInfo* get() {
    static auto* dimension = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isWidth = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "SetParentDimension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dimension, isWidth, parent});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::Repaint
// Il2CppName: Repaint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::Repaint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "Repaint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::ApplyTransform
// Il2CppName: ApplyTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::ApplyTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "ApplyTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::WentOffScreen
// Il2CppName: WentOffScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::WentOffScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "WentOffScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::Render)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::ChangeClassProperty
// Il2CppName: ChangeClassProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(::StringW, ::PowerUI::Css::Value*)>(&PowerUI::Css::ComputedStyle::ChangeClassProperty)> {
  static const MethodInfo* get() {
    static auto* cssProperty = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "Value")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "ChangeClassProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cssProperty, newValue});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::ChangeClassProperty
// Il2CppName: ChangeClassProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::CssProperty*, ::PowerUI::Css::Value*)>(&PowerUI::Css::ComputedStyle::ChangeClassProperty)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "CssProperty")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "Value")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "ChangeClassProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, newValue});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::GetClassStyle
// Il2CppName: GetClassStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Css::Value* (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::CssProperty*)>(&PowerUI::Css::ComputedStyle::GetClassStyle)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "CssProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "GetClassStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::GetClassStyle
// Il2CppName: GetClassStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Css::Value* (PowerUI::Css::ComputedStyle::*)(::StringW)>(&PowerUI::Css::ComputedStyle::GetClassStyle)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "GetClassStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::ChangeIDProperty
// Il2CppName: ChangeIDProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(::StringW, ::PowerUI::Css::Value*)>(&PowerUI::Css::ComputedStyle::ChangeIDProperty)> {
  static const MethodInfo* get() {
    static auto* cssProperty = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "Value")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "ChangeIDProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cssProperty, newValue});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::ChangeIDProperty
// Il2CppName: ChangeIDProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::CssProperty*, ::PowerUI::Css::Value*)>(&PowerUI::Css::ComputedStyle::ChangeIDProperty)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "CssProperty")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "Value")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "ChangeIDProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, newValue});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::GetIDStyle
// Il2CppName: GetIDStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Css::Value* (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::CssProperty*)>(&PowerUI::Css::ComputedStyle::GetIDStyle)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "CssProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "GetIDStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::GetIDStyle
// Il2CppName: GetIDStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Css::Value* (PowerUI::Css::ComputedStyle::*)(::StringW)>(&PowerUI::Css::ComputedStyle::GetIDStyle)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "GetIDStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::ChangeTagProperty
// Il2CppName: ChangeTagProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::CssProperty*, ::PowerUI::Css::Value*)>(&PowerUI::Css::ComputedStyle::ChangeTagProperty)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "CssProperty")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "Value")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "ChangeTagProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, newValue});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::ChangeTagProperty
// Il2CppName: ChangeTagProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(::StringW, ::PowerUI::Css::Value*)>(&PowerUI::Css::ComputedStyle::ChangeTagProperty)> {
  static const MethodInfo* get() {
    static auto* cssProperty = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "Value")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "ChangeTagProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cssProperty, newValue});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::RequireShading
// Il2CppName: RequireShading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Css::ShaderData* (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::RequireShading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "RequireShading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::get_TextShadow
// Il2CppName: get_TextShadow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Css::ShadowData* (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::get_TextShadow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "get_TextShadow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::set_TextShadow
// Il2CppName: set_TextShadow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::ShadowData*)>(&PowerUI::Css::ComputedStyle::set_TextShadow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ShadowData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "set_TextShadow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::get_TextStroke
// Il2CppName: get_TextStroke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Css::StrokeData* (PowerUI::Css::ComputedStyle::*)()>(&PowerUI::Css::ComputedStyle::get_TextStroke)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "get_TextStroke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::set_TextStroke
// Il2CppName: set_TextStroke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ComputedStyle::*)(::PowerUI::Css::StrokeData*)>(&PowerUI::Css::ComputedStyle::set_TextStroke)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "StrokeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ComputedStyle*), "set_TextStroke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ComputedStyle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
