// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.Css.Style
#include "PowerUI/Css/Style.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI::Css
namespace PowerUI::Css {
  // Forward declaring type: StyleSheet
  class StyleSheet;
  // Forward declaring type: SelectorType
  struct SelectorType;
  // Forward declaring type: CssProperty
  class CssProperty;
  // Forward declaring type: Value
  class Value;
}
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Document
  class Document;
  // Forward declaring type: DataPackage
  class DataPackage;
}
// Completed forward declares
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Forward declaring type: SelectorStyle
  class SelectorStyle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Css::SelectorStyle);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Css::SelectorStyle*, "PowerUI.Css", "SelectorStyle");
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Css.SelectorStyle
  // [TokenAttribute] Offset: FFFFFFFF
  class SelectorStyle : public ::PowerUI::Css::Style {
    public:
    public:
    // public PowerUI.Css.StyleSheet Sheet
    // Size: 0x8
    // Offset: 0x20
    ::PowerUI::Css::StyleSheet* Sheet;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::StyleSheet*) == 0x8);
    // public System.String Modifier
    // Size: 0x8
    // Offset: 0x28
    ::StringW Modifier;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Selector
    // Size: 0x8
    // Offset: 0x30
    ::StringW Selector;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public PowerUI.Document Document
    // Size: 0x8
    // Offset: 0x38
    ::PowerUI::Document* Document;
    // Field size check
    static_assert(sizeof(::PowerUI::Document*) == 0x8);
    // public System.String BaseSelector
    // Size: 0x8
    // Offset: 0x40
    ::StringW BaseSelector;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public PowerUI.Css.StyleSheet Sheet
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::StyleSheet*& dyn_Sheet();
    // Get instance field reference: public System.String Modifier
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Modifier();
    // Get instance field reference: public System.String Selector
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Selector();
    // Get instance field reference: public PowerUI.Document Document
    [[deprecated("Use field access instead!")]] ::PowerUI::Document*& dyn_Document();
    // Get instance field reference: public System.String BaseSelector
    [[deprecated("Use field access instead!")]] ::StringW& dyn_BaseSelector();
    // public System.Void .ctor(PowerUI.Css.StyleSheet sheet, System.String selector, System.String modifier)
    // Offset: 0x184B7A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SelectorStyle* New_ctor(::PowerUI::Css::StyleSheet* sheet, ::StringW selector, ::StringW modifier) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Css::SelectorStyle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SelectorStyle*, creationType>(sheet, selector, modifier)));
    }
    // public PowerUI.Css.SelectorType get_SelectorType()
    // Offset: 0x184B8E8
    ::PowerUI::Css::SelectorType get_SelectorType();
    // public System.Boolean get_Unmodified()
    // Offset: 0x184B96C
    bool get_Unmodified();
    // public System.Void OnLoaded()
    // Offset: 0x184B97C
    void OnLoaded();
    // private System.Void FontFaceReady(PowerUI.DataPackage font)
    // Offset: 0x184BCF0
    void FontFaceReady(::PowerUI::DataPackage* font);
    // public System.Void BakeToModifiers()
    // Offset: 0x184C018
    void BakeToModifiers();
    // public System.Void CopyTo(PowerUI.Css.SelectorStyle otherStyle, System.Boolean overwrite)
    // Offset: 0x184C1B4
    void CopyTo(::PowerUI::Css::SelectorStyle* otherStyle, bool overwrite);
    // public override System.Void OnChanged(PowerUI.Css.CssProperty property, PowerUI.Css.Value newValue)
    // Offset: 0x184B8E4
    // Implemented from: PowerUI.Css.Style
    // Base method: System.Void Style::OnChanged(PowerUI.Css.CssProperty property, PowerUI.Css.Value newValue)
    void OnChanged(::PowerUI::Css::CssProperty* property, ::PowerUI::Css::Value* newValue);
    // public override System.String ToString()
    // Offset: 0x184C5B8
    // Implemented from: PowerUI.Css.Style
    // Base method: System.String Style::ToString()
    ::StringW ToString();
  }; // PowerUI.Css.SelectorStyle
  #pragma pack(pop)
  static check_size<sizeof(SelectorStyle), 64 + sizeof(::StringW)> __PowerUI_Css_SelectorStyleSizeCheck;
  static_assert(sizeof(SelectorStyle) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Css::SelectorStyle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Css::SelectorStyle::get_SelectorType
// Il2CppName: get_SelectorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Css::SelectorType (PowerUI::Css::SelectorStyle::*)()>(&PowerUI::Css::SelectorStyle::get_SelectorType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::SelectorStyle*), "get_SelectorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::SelectorStyle::get_Unmodified
// Il2CppName: get_Unmodified
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::SelectorStyle::*)()>(&PowerUI::Css::SelectorStyle::get_Unmodified)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::SelectorStyle*), "get_Unmodified", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::SelectorStyle::OnLoaded
// Il2CppName: OnLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::SelectorStyle::*)()>(&PowerUI::Css::SelectorStyle::OnLoaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::SelectorStyle*), "OnLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::SelectorStyle::FontFaceReady
// Il2CppName: FontFaceReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::SelectorStyle::*)(::PowerUI::DataPackage*)>(&PowerUI::Css::SelectorStyle::FontFaceReady)> {
  static const MethodInfo* get() {
    static auto* font = &::il2cpp_utils::GetClassFromName("PowerUI", "DataPackage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::SelectorStyle*), "FontFaceReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{font});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::SelectorStyle::BakeToModifiers
// Il2CppName: BakeToModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::SelectorStyle::*)()>(&PowerUI::Css::SelectorStyle::BakeToModifiers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::SelectorStyle*), "BakeToModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::SelectorStyle::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::SelectorStyle::*)(::PowerUI::Css::SelectorStyle*, bool)>(&PowerUI::Css::SelectorStyle::CopyTo)> {
  static const MethodInfo* get() {
    static auto* otherStyle = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "SelectorStyle")->byval_arg;
    static auto* overwrite = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::SelectorStyle*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherStyle, overwrite});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::SelectorStyle::OnChanged
// Il2CppName: OnChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::SelectorStyle::*)(::PowerUI::Css::CssProperty*, ::PowerUI::Css::Value*)>(&PowerUI::Css::SelectorStyle::OnChanged)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "CssProperty")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "Value")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::SelectorStyle*), "OnChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, newValue});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::SelectorStyle::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Css::SelectorStyle::*)()>(&PowerUI::Css::SelectorStyle::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::SelectorStyle*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
