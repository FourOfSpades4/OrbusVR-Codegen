// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: PowerUI.Css.RoundCornerPosition
#include "PowerUI/Css/RoundCornerPosition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI::Css
namespace PowerUI::Css {
  // Forward declaring type: BorderProperty
  class BorderProperty;
  // Forward declaring type: RoundedCorners
  class RoundedCorners;
  // Forward declaring type: RoundBorderInverseProperty
  class RoundBorderInverseProperty;
}
// Completed forward declares
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Forward declaring type: RoundCorner
  class RoundCorner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Css::RoundCorner);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Css::RoundCorner*, "PowerUI.Css", "RoundCorner");
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Css.RoundCorner
  // [TokenAttribute] Offset: FFFFFFFF
  class RoundCorner : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 ToIndex
    // Size: 0x4
    // Offset: 0x10
    int ToIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 FromIndex
    // Size: 0x4
    // Offset: 0x14
    int FromIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 CornerRadius
    // Size: 0x4
    // Offset: 0x18
    int CornerRadius;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: CornerRadius and: OuterArc
    char __padding2[0x4] = {};
    // private UnityEngine.Vector2[] OuterArc
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Vector2> OuterArc;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private UnityEngine.Vector2[] InnerArc
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Vector2> InnerArc;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private System.Int32 BlocksRequired
    // Size: 0x4
    // Offset: 0x30
    int BlocksRequired;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: BlocksRequired and: Border
    char __padding5[0x4] = {};
    // public PowerUI.Css.BorderProperty Border
    // Size: 0x8
    // Offset: 0x38
    ::PowerUI::Css::BorderProperty* Border;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::BorderProperty*) == 0x8);
    // public System.Int32 InverseBlocksRequired
    // Size: 0x4
    // Offset: 0x40
    int InverseBlocksRequired;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: InverseBlocksRequired and: RoundCorners
    char __padding7[0x4] = {};
    // public PowerUI.Css.RoundedCorners RoundCorners
    // Size: 0x8
    // Offset: 0x48
    ::PowerUI::Css::RoundedCorners* RoundCorners;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::RoundedCorners*) == 0x8);
    // public PowerUI.Css.RoundCornerPosition Position
    // Size: 0x4
    // Offset: 0x50
    ::PowerUI::Css::RoundCornerPosition Position;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::RoundCornerPosition) == 0x4);
    // Padding between fields: Position and: InverseBorder
    char __padding9[0x4] = {};
    // public PowerUI.Css.RoundBorderInverseProperty InverseBorder
    // Size: 0x8
    // Offset: 0x58
    ::PowerUI::Css::RoundBorderInverseProperty* InverseBorder;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::RoundBorderInverseProperty*) == 0x8);
    public:
    // Get static field: static public System.Int32 Resolution
    static int _get_Resolution();
    // Set static field: static public System.Int32 Resolution
    static void _set_Resolution(int value);
    // Get static field: static public System.Int32 MicroResolution
    static int _get_MicroResolution();
    // Set static field: static public System.Int32 MicroResolution
    static void _set_MicroResolution(int value);
    // Get instance field reference: public System.Int32 ToIndex
    [[deprecated("Use field access instead!")]] int& dyn_ToIndex();
    // Get instance field reference: public System.Int32 FromIndex
    [[deprecated("Use field access instead!")]] int& dyn_FromIndex();
    // Get instance field reference: public System.Int32 CornerRadius
    [[deprecated("Use field access instead!")]] int& dyn_CornerRadius();
    // Get instance field reference: private UnityEngine.Vector2[] OuterArc
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_OuterArc();
    // Get instance field reference: private UnityEngine.Vector2[] InnerArc
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_InnerArc();
    // Get instance field reference: private System.Int32 BlocksRequired
    [[deprecated("Use field access instead!")]] int& dyn_BlocksRequired();
    // Get instance field reference: public PowerUI.Css.BorderProperty Border
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::BorderProperty*& dyn_Border();
    // Get instance field reference: public System.Int32 InverseBlocksRequired
    [[deprecated("Use field access instead!")]] int& dyn_InverseBlocksRequired();
    // Get instance field reference: public PowerUI.Css.RoundedCorners RoundCorners
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::RoundedCorners*& dyn_RoundCorners();
    // Get instance field reference: public PowerUI.Css.RoundCornerPosition Position
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::RoundCornerPosition& dyn_Position();
    // Get instance field reference: public PowerUI.Css.RoundBorderInverseProperty InverseBorder
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::RoundBorderInverseProperty*& dyn_InverseBorder();
    // public System.Void .ctor(PowerUI.Css.RoundedCorners roundCorners, PowerUI.Css.RoundCornerPosition position)
    // Offset: 0x1849A48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RoundCorner* New_ctor(::PowerUI::Css::RoundedCorners* roundCorners, ::PowerUI::Css::RoundCornerPosition position) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Css::RoundCorner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RoundCorner*, creationType>(roundCorners, position)));
    }
    // public System.Int32 get_Radius()
    // Offset: 0x1849ACC
    int get_Radius();
    // public System.Void set_Radius(System.Int32 value)
    // Offset: 0x1849AD4
    void set_Radius(int value);
    // private System.Void RecomputeArcs()
    // Offset: 0x1849BEC
    void RecomputeArcs();
    // public System.Void RecomputeInnerArc()
    // Offset: 0x1849F58
    void RecomputeInnerArc();
    // public System.Void RenderInverse(System.Single cornerX, System.Single cornerY)
    // Offset: 0x184A248
    void RenderInverse(float cornerX, float cornerY);
    // public System.Void Render(System.Single alpha, System.Single cornerX, System.Single cornerY)
    // Offset: 0x184A518
    void Render(float alpha, float cornerX, float cornerY);
    // static private System.Void .cctor()
    // Offset: 0x184ABFC
    static void _cctor();
  }; // PowerUI.Css.RoundCorner
  #pragma pack(pop)
  static check_size<sizeof(RoundCorner), 88 + sizeof(::PowerUI::Css::RoundBorderInverseProperty*)> __PowerUI_Css_RoundCornerSizeCheck;
  static_assert(sizeof(RoundCorner) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Css::RoundCorner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Css::RoundCorner::get_Radius
// Il2CppName: get_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Css::RoundCorner::*)()>(&PowerUI::Css::RoundCorner::get_Radius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::RoundCorner*), "get_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::RoundCorner::set_Radius
// Il2CppName: set_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::RoundCorner::*)(int)>(&PowerUI::Css::RoundCorner::set_Radius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::RoundCorner*), "set_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::RoundCorner::RecomputeArcs
// Il2CppName: RecomputeArcs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::RoundCorner::*)()>(&PowerUI::Css::RoundCorner::RecomputeArcs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::RoundCorner*), "RecomputeArcs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::RoundCorner::RecomputeInnerArc
// Il2CppName: RecomputeInnerArc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::RoundCorner::*)()>(&PowerUI::Css::RoundCorner::RecomputeInnerArc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::RoundCorner*), "RecomputeInnerArc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::RoundCorner::RenderInverse
// Il2CppName: RenderInverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::RoundCorner::*)(float, float)>(&PowerUI::Css::RoundCorner::RenderInverse)> {
  static const MethodInfo* get() {
    static auto* cornerX = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* cornerY = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::RoundCorner*), "RenderInverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cornerX, cornerY});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::RoundCorner::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::RoundCorner::*)(float, float, float)>(&PowerUI::Css::RoundCorner::Render)> {
  static const MethodInfo* get() {
    static auto* alpha = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* cornerX = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* cornerY = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::RoundCorner*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alpha, cornerX, cornerY});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::RoundCorner::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::Css::RoundCorner::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::RoundCorner*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
