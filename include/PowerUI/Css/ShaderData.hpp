// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
}
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Element
  class Element;
  // Forward declaring type: ShaderSet
  class ShaderSet;
}
// Forward declaring namespace: PowerUI::Css
namespace PowerUI::Css {
  // Forward declaring type: ShadowData
  class ShadowData;
  // Forward declaring type: StrokeData
  class StrokeData;
}
// Completed forward declares
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Forward declaring type: ShaderData
  class ShaderData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Css::ShaderData);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Css::ShaderData*, "PowerUI.Css", "ShaderData");
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Css.ShaderData
  // [TokenAttribute] Offset: FFFFFFFF
  class ShaderData : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 Flags
    // Size: 0x4
    // Offset: 0x10
    int Flags;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Flags and: Shader
    char __padding0[0x4] = {};
    // public UnityEngine.Shader Shader
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Shader* Shader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public PowerUI.Element Element
    // Size: 0x8
    // Offset: 0x20
    ::PowerUI::Element* Element;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // public PowerUI.ShaderSet Shaders
    // Size: 0x8
    // Offset: 0x28
    ::PowerUI::ShaderSet* Shaders;
    // Field size check
    static_assert(sizeof(::PowerUI::ShaderSet*) == 0x8);
    // public PowerUI.Css.ShadowData TextShadow
    // Size: 0x8
    // Offset: 0x30
    ::PowerUI::Css::ShadowData* TextShadow;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::ShadowData*) == 0x8);
    // public PowerUI.Css.StrokeData TextStroke
    // Size: 0x8
    // Offset: 0x38
    ::PowerUI::Css::StrokeData* TextStroke;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::StrokeData*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 Flags
    [[deprecated("Use field access instead!")]] int& dyn_Flags();
    // Get instance field reference: public UnityEngine.Shader Shader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_Shader();
    // Get instance field reference: public PowerUI.Element Element
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_Element();
    // Get instance field reference: public PowerUI.ShaderSet Shaders
    [[deprecated("Use field access instead!")]] ::PowerUI::ShaderSet*& dyn_Shaders();
    // Get instance field reference: public PowerUI.Css.ShadowData TextShadow
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::ShadowData*& dyn_TextShadow();
    // Get instance field reference: public PowerUI.Css.StrokeData TextStroke
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::StrokeData*& dyn_TextStroke();
    // public System.Boolean get_Lit()
    // Offset: 0x184C9A0
    bool get_Lit();
    // public System.Void set_Lit(System.Boolean value)
    // Offset: 0x18450B0
    void set_Lit(bool value);
    // public System.Boolean GetFlag(System.Int32 flag)
    // Offset: 0x184C9AC
    bool GetFlag(int flag);
    // public System.Void SetFlag(System.Int32 flag, System.Boolean value)
    // Offset: 0x184C9BC
    void SetFlag(int flag, bool value);
    // public System.Boolean get_TangentsRequired()
    // Offset: 0x184C9D8
    bool get_TangentsRequired();
    // public UnityEngine.Shader get_IsolatedShader()
    // Offset: 0x184C9E8
    ::UnityEngine::Shader* get_IsolatedShader();
    // public System.Void UpdateShader()
    // Offset: 0x184C9FC
    void UpdateShader();
    // public System.Void Optimise()
    // Offset: 0x18450CC
    void Optimise();
    // private System.Void Remove()
    // Offset: 0x184CA58
    void Remove();
    // public System.Void .ctor()
    // Offset: 0x184CAA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ShaderData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Css::ShaderData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ShaderData*, creationType>()));
    }
  }; // PowerUI.Css.ShaderData
  #pragma pack(pop)
  static check_size<sizeof(ShaderData), 56 + sizeof(::PowerUI::Css::StrokeData*)> __PowerUI_Css_ShaderDataSizeCheck;
  static_assert(sizeof(ShaderData) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Css::ShaderData::get_Lit
// Il2CppName: get_Lit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ShaderData::*)()>(&PowerUI::Css::ShaderData::get_Lit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ShaderData*), "get_Lit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ShaderData::set_Lit
// Il2CppName: set_Lit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ShaderData::*)(bool)>(&PowerUI::Css::ShaderData::set_Lit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ShaderData*), "set_Lit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ShaderData::GetFlag
// Il2CppName: GetFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ShaderData::*)(int)>(&PowerUI::Css::ShaderData::GetFlag)> {
  static const MethodInfo* get() {
    static auto* flag = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ShaderData*), "GetFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flag});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ShaderData::SetFlag
// Il2CppName: SetFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ShaderData::*)(int, bool)>(&PowerUI::Css::ShaderData::SetFlag)> {
  static const MethodInfo* get() {
    static auto* flag = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ShaderData*), "SetFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flag, value});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ShaderData::get_TangentsRequired
// Il2CppName: get_TangentsRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Css::ShaderData::*)()>(&PowerUI::Css::ShaderData::get_TangentsRequired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ShaderData*), "get_TangentsRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ShaderData::get_IsolatedShader
// Il2CppName: get_IsolatedShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (PowerUI::Css::ShaderData::*)()>(&PowerUI::Css::ShaderData::get_IsolatedShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ShaderData*), "get_IsolatedShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ShaderData::UpdateShader
// Il2CppName: UpdateShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ShaderData::*)()>(&PowerUI::Css::ShaderData::UpdateShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ShaderData*), "UpdateShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ShaderData::Optimise
// Il2CppName: Optimise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ShaderData::*)()>(&PowerUI::Css::ShaderData::Optimise)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ShaderData*), "Optimise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ShaderData::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::ShaderData::*)()>(&PowerUI::Css::ShaderData::Remove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::ShaderData*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::ShaderData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
