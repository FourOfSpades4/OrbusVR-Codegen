// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.Css.DisplayableProperty
#include "PowerUI/Css/DisplayableProperty.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: PowerUI.Css.BorderStyle
#include "PowerUI/Css/BorderStyle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI::Css
namespace PowerUI::Css {
  // Forward declaring type: Value
  class Value;
  // Forward declaring type: RoundedCorners
  class RoundedCorners;
  // Forward declaring type: RoundCornerPosition
  struct RoundCornerPosition;
}
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Transformation
  class Transformation;
  // Forward declaring type: Element
  class Element;
}
// Completed forward declares
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Forward declaring type: BorderProperty
  class BorderProperty;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Css::BorderProperty);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Css::BorderProperty*, "PowerUI.Css", "BorderProperty");
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Css.BorderProperty
  // [TokenAttribute] Offset: FFFFFFFF
  class BorderProperty : public ::PowerUI::Css::DisplayableProperty {
    public:
    // Writing base type padding for base size: 0x29 to desired offset: 0x2C
    char ___base_padding[0x3] = {};
    public:
    // public System.Int32 WidthTop
    // Size: 0x4
    // Offset: 0x2C
    int WidthTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 WidthLeft
    // Size: 0x4
    // Offset: 0x30
    int WidthLeft;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 WidthRight
    // Size: 0x4
    // Offset: 0x34
    int WidthRight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 WidthBottom
    // Size: 0x4
    // Offset: 0x38
    int WidthBottom;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: WidthBottom and: Colour
    char __padding3[0x4] = {};
    // public UnityEngine.Color[] Colour
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Color> Colour;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // public PowerUI.Css.Value BaseColour
    // Size: 0x8
    // Offset: 0x48
    ::PowerUI::Css::Value* BaseColour;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::Value*) == 0x8);
    // public PowerUI.Css.RoundedCorners Corners
    // Size: 0x8
    // Offset: 0x50
    ::PowerUI::Css::RoundedCorners* Corners;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::RoundedCorners*) == 0x8);
    // public PowerUI.Css.BorderStyle Style
    // Size: 0x4
    // Offset: 0x58
    ::PowerUI::Css::BorderStyle Style;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::BorderStyle) == 0x4);
    public:
    // Get instance field reference: public System.Int32 WidthTop
    [[deprecated("Use field access instead!")]] int& dyn_WidthTop();
    // Get instance field reference: public System.Int32 WidthLeft
    [[deprecated("Use field access instead!")]] int& dyn_WidthLeft();
    // Get instance field reference: public System.Int32 WidthRight
    [[deprecated("Use field access instead!")]] int& dyn_WidthRight();
    // Get instance field reference: public System.Int32 WidthBottom
    [[deprecated("Use field access instead!")]] int& dyn_WidthBottom();
    // Get instance field reference: public UnityEngine.Color[] Colour
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn_Colour();
    // Get instance field reference: public PowerUI.Css.Value BaseColour
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::Value*& dyn_BaseColour();
    // Get instance field reference: public PowerUI.Css.RoundedCorners Corners
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::RoundedCorners*& dyn_Corners();
    // Get instance field reference: public PowerUI.Css.BorderStyle Style
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::BorderStyle& dyn_Style();
    // public System.Void ResetColour()
    // Offset: 0xEC1E88
    void ResetColour();
    // public System.Void BorderTransform(PowerUI.Transformation topTransform)
    // Offset: 0xEC25EC
    void BorderTransform(::PowerUI::Transformation* topTransform);
    // public System.Void ApplyBorderTransform()
    // Offset: 0xEC262C
    void ApplyBorderTransform();
    // public System.Void SetCorner(PowerUI.Css.RoundCornerPosition position, System.Int32 radius)
    // Offset: 0xEC26C0
    void SetCorner(::PowerUI::Css::RoundCornerPosition position, int radius);
    // public System.Void RenderCorners()
    // Offset: 0xEC2800
    void RenderCorners();
    // public System.Int32 BorderWidth(System.Int32 i)
    // Offset: 0xEC25B4
    int BorderWidth(int i);
    // public System.Void .ctor(PowerUI.Element element)
    // Offset: 0xEC1E5C
    // Implemented from: PowerUI.Css.DisplayableProperty
    // Base method: System.Void DisplayableProperty::.ctor(PowerUI.Element element)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BorderProperty* New_ctor(::PowerUI::Element* element) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Css::BorderProperty::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BorderProperty*, creationType>(element)));
    }
    // public override System.Void SetOverlayColour(UnityEngine.Color colour)
    // Offset: 0xEC1EFC
    // Implemented from: PowerUI.Css.DisplayableProperty
    // Base method: System.Void DisplayableProperty::SetOverlayColour(UnityEngine.Color colour)
    void SetOverlayColour(::UnityEngine::Color colour);
    // public override System.Void Paint()
    // Offset: 0xEC2004
    // Implemented from: PowerUI.Css.DisplayableProperty
    // Base method: System.Void DisplayableProperty::Paint()
    void Paint();
    // protected override System.Void Layout()
    // Offset: 0xEC2150
    // Implemented from: PowerUI.Css.DisplayableProperty
    // Base method: System.Void DisplayableProperty::Layout()
    void Layout();
  }; // PowerUI.Css.BorderProperty
  #pragma pack(pop)
  static check_size<sizeof(BorderProperty), 88 + sizeof(::PowerUI::Css::BorderStyle)> __PowerUI_Css_BorderPropertySizeCheck;
  static_assert(sizeof(BorderProperty) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Css::BorderProperty::ResetColour
// Il2CppName: ResetColour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::BorderProperty::*)()>(&PowerUI::Css::BorderProperty::ResetColour)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::BorderProperty*), "ResetColour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::BorderProperty::BorderTransform
// Il2CppName: BorderTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::BorderProperty::*)(::PowerUI::Transformation*)>(&PowerUI::Css::BorderProperty::BorderTransform)> {
  static const MethodInfo* get() {
    static auto* topTransform = &::il2cpp_utils::GetClassFromName("PowerUI", "Transformation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::BorderProperty*), "BorderTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topTransform});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::BorderProperty::ApplyBorderTransform
// Il2CppName: ApplyBorderTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::BorderProperty::*)()>(&PowerUI::Css::BorderProperty::ApplyBorderTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::BorderProperty*), "ApplyBorderTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::BorderProperty::SetCorner
// Il2CppName: SetCorner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::BorderProperty::*)(::PowerUI::Css::RoundCornerPosition, int)>(&PowerUI::Css::BorderProperty::SetCorner)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "RoundCornerPosition")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::BorderProperty*), "SetCorner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, radius});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::BorderProperty::RenderCorners
// Il2CppName: RenderCorners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::BorderProperty::*)()>(&PowerUI::Css::BorderProperty::RenderCorners)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::BorderProperty*), "RenderCorners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::BorderProperty::BorderWidth
// Il2CppName: BorderWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Css::BorderProperty::*)(int)>(&PowerUI::Css::BorderProperty::BorderWidth)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::BorderProperty*), "BorderWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::BorderProperty::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Css::BorderProperty::SetOverlayColour
// Il2CppName: SetOverlayColour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::BorderProperty::*)(::UnityEngine::Color)>(&PowerUI::Css::BorderProperty::SetOverlayColour)> {
  static const MethodInfo* get() {
    static auto* colour = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::BorderProperty*), "SetOverlayColour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colour});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::BorderProperty::Paint
// Il2CppName: Paint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::BorderProperty::*)()>(&PowerUI::Css::BorderProperty::Paint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::BorderProperty*), "Paint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::BorderProperty::Layout
// Il2CppName: Layout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::BorderProperty::*)()>(&PowerUI::Css::BorderProperty::Layout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::BorderProperty*), "Layout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
