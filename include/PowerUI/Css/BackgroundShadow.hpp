// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.Css.DisplayableProperty
#include "PowerUI/Css/DisplayableProperty.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Element
  class Element;
}
// Completed forward declares
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Forward declaring type: BackgroundShadow
  class BackgroundShadow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Css::BackgroundShadow);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Css::BackgroundShadow*, "PowerUI.Css", "BackgroundShadow");
// Type namespace: PowerUI.Css
namespace PowerUI::Css {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Css.BackgroundShadow
  // [TokenAttribute] Offset: FFFFFFFF
  class BackgroundShadow : public ::PowerUI::Css::DisplayableProperty {
    public:
    // Writing base type padding for base size: 0x29 to desired offset: 0x2C
    char ___base_padding[0x3] = {};
    public:
    // public UnityEngine.Color BaseColour
    // Size: 0x10
    // Offset: 0x2C
    ::UnityEngine::Color BaseColour;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color BackingColour
    // Size: 0x10
    // Offset: 0x3C
    ::UnityEngine::Color BackingColour;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color BackingColourTransparent
    // Size: 0x10
    // Offset: 0x4C
    ::UnityEngine::Color BackingColourTransparent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Int32 BlurSize
    // Size: 0x4
    // Offset: 0x5C
    int BlurSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Color BaseColour
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_BaseColour();
    // Get instance field reference: public UnityEngine.Color BackingColour
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_BackingColour();
    // Get instance field reference: public UnityEngine.Color BackingColourTransparent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_BackingColourTransparent();
    // Get instance field reference: public System.Int32 BlurSize
    [[deprecated("Use field access instead!")]] int& dyn_BlurSize();
    // public System.Void .ctor(PowerUI.Element element)
    // Offset: 0xEC1BD8
    // Implemented from: PowerUI.Css.DisplayableProperty
    // Base method: System.Void DisplayableProperty::.ctor(PowerUI.Element element)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BackgroundShadow* New_ctor(::PowerUI::Element* element) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Css::BackgroundShadow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BackgroundShadow*, creationType>(element)));
    }
    // public override System.Void SetOverlayColour(UnityEngine.Color colour)
    // Offset: 0xEC1C0C
    // Implemented from: PowerUI.Css.DisplayableProperty
    // Base method: System.Void DisplayableProperty::SetOverlayColour(UnityEngine.Color colour)
    void SetOverlayColour(::UnityEngine::Color colour);
    // public override System.Void Paint()
    // Offset: 0xEC1C94
    // Implemented from: PowerUI.Css.DisplayableProperty
    // Base method: System.Void DisplayableProperty::Paint()
    void Paint();
    // protected override System.Void Layout()
    // Offset: 0xEC1CEC
    // Implemented from: PowerUI.Css.DisplayableProperty
    // Base method: System.Void DisplayableProperty::Layout()
    void Layout();
  }; // PowerUI.Css.BackgroundShadow
  #pragma pack(pop)
  static check_size<sizeof(BackgroundShadow), 92 + sizeof(int)> __PowerUI_Css_BackgroundShadowSizeCheck;
  static_assert(sizeof(BackgroundShadow) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Css::BackgroundShadow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Css::BackgroundShadow::SetOverlayColour
// Il2CppName: SetOverlayColour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::BackgroundShadow::*)(::UnityEngine::Color)>(&PowerUI::Css::BackgroundShadow::SetOverlayColour)> {
  static const MethodInfo* get() {
    static auto* colour = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::BackgroundShadow*), "SetOverlayColour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colour});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::BackgroundShadow::Paint
// Il2CppName: Paint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::BackgroundShadow::*)()>(&PowerUI::Css::BackgroundShadow::Paint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::BackgroundShadow*), "Paint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Css::BackgroundShadow::Layout
// Il2CppName: Layout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Css::BackgroundShadow::*)()>(&PowerUI::Css::BackgroundShadow::Layout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Css::BackgroundShadow*), "Layout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
