// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: AttributeLookupLink
  class AttributeLookupLink;
  // Forward declaring type: Element
  class Element;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: AttributeLookup
  class AttributeLookup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::AttributeLookup);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::AttributeLookup*, "PowerUI", "AttributeLookup");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.AttributeLookup
  // [TokenAttribute] Offset: FFFFFFFF
  class AttributeLookup : public ::Il2CppObject {
    public:
    public:
    // public System.Collections.Generic.Dictionary`2<System.String,PowerUI.AttributeLookupLink> Lookup
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::AttributeLookupLink*>* Lookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::AttributeLookupLink*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::AttributeLookupLink*>*
    constexpr operator ::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::AttributeLookupLink*>*() const noexcept {
      return Lookup;
    }
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,PowerUI.AttributeLookupLink> Lookup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::AttributeLookupLink*>*& dyn_Lookup();
    // public System.Void .ctor()
    // Offset: 0xEB8E84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AttributeLookup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::AttributeLookup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AttributeLookup*, creationType>()));
    }
    // public System.Int32 get_Count()
    // Offset: 0xEB8EF8
    int get_Count();
    // public System.Void Add(System.String key, PowerUI.Element ele)
    // Offset: 0xEB8F58
    void Add(::StringW key, ::PowerUI::Element* ele);
    // public System.Boolean Remove(System.String key, PowerUI.Element ele)
    // Offset: 0xEB909C
    bool Remove(::StringW key, ::PowerUI::Element* ele);
  }; // PowerUI.AttributeLookup
  #pragma pack(pop)
  static check_size<sizeof(AttributeLookup), 16 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::AttributeLookupLink*>*)> __PowerUI_AttributeLookupSizeCheck;
  static_assert(sizeof(AttributeLookup) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::AttributeLookup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::AttributeLookup::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::AttributeLookup::*)()>(&PowerUI::AttributeLookup::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::AttributeLookup*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::AttributeLookup::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::AttributeLookup::*)(::StringW, ::PowerUI::Element*)>(&PowerUI::AttributeLookup::Add)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ele = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::AttributeLookup*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, ele});
  }
};
// Writing MetadataGetter for method: PowerUI::AttributeLookup::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::AttributeLookup::*)(::StringW, ::PowerUI::Element*)>(&PowerUI::AttributeLookup::Remove)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ele = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::AttributeLookup*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, ele});
  }
};
