// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: FixedSizeBuffer`1<T>
  template<typename T>
  class FixedSizeBuffer_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::PowerUI::FixedSizeBuffer_1, "PowerUI", "FixedSizeBuffer`1");
// Type namespace: PowerUI
namespace PowerUI {
  // WARNING Size may be invalid!
  // Autogenerated type: PowerUI.FixedSizeBuffer`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class FixedSizeBuffer_1 : public ::Il2CppObject {
    public:
    public:
    // public T[] Buffer
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> Buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private System.Boolean Clear
    // Size: 0x1
    // Offset: 0x0
    bool Clear;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Int32 BlockSize
    // Size: 0x4
    // Offset: 0x0
    int BlockSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 BlockCount
    // Size: 0x4
    // Offset: 0x0
    int BlockCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Autogenerated instance field getter
    // Get instance field: public T[] Buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_Buffer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::FixedSizeBuffer_1::dyn_Buffer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Buffer"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean Clear
    [[deprecated("Use field access instead!")]] bool& dyn_Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::FixedSizeBuffer_1::dyn_Clear");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Clear"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Int32 BlockSize
    [[deprecated("Use field access instead!")]] int& dyn_BlockSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::FixedSizeBuffer_1::dyn_BlockSize");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BlockSize"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Int32 BlockCount
    [[deprecated("Use field access instead!")]] int& dyn_BlockCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::FixedSizeBuffer_1::dyn_BlockCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BlockCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.Int32 blockSize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FixedSizeBuffer_1<T>* New_ctor(int blockSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::FixedSizeBuffer_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FixedSizeBuffer_1<T>*, creationType>(blockSize)));
    }
    // public System.Void .ctor(System.Int32 blockSize, System.Boolean clear)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FixedSizeBuffer_1<T>* New_ctor(int blockSize, bool clear) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::FixedSizeBuffer_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FixedSizeBuffer_1<T>*, creationType>(blockSize, clear)));
    }
    // public System.Void Resize(System.Int32 blockCount)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Resize(int blockCount) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::FixedSizeBuffer_1::Resize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(blockCount)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, blockCount);
    }
  }; // PowerUI.FixedSizeBuffer`1
  // Could not write size check! Type: PowerUI.FixedSizeBuffer`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
