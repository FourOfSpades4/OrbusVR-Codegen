// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.Void
#include "Nitro/Void.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: AttributeLookup
  class AttributeLookup;
  // Forward declaring type: Element
  class Element;
  // Forward declaring type: Window
  class Window;
  // Forward declaring type: FilePath
  class FilePath;
  // Forward declaring type: Renderman
  class Renderman;
  // Forward declaring type: UICode
  class UICode;
  // Forward declaring type: OnSizeChange
  class OnSizeChange;
  // Forward declaring type: InputEvent
  class InputEvent;
  // Forward declaring type: TitleChange
  class TitleChange;
  // Forward declaring type: DynamicFont
  class DynamicFont;
  // Forward declaring type: UIEvent
  class UIEvent;
  // Forward declaring type: DocumentElements
  class DocumentElements;
}
// Forward declaring namespace: PowerUI::Css
namespace PowerUI::Css {
  // Forward declaring type: StyleSheet
  class StyleSheet;
  // Forward declaring type: SelectorStyle
  class SelectorStyle;
}
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: DynamicMethod`1<T>
  template<typename T>
  class DynamicMethod_1;
  // Forward declaring type: NitroDomainManager
  class NitroDomainManager;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Document
  class Document;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Document);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Document*, "PowerUI", "Document");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0xF0
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Document
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: AD1310
  class Document : public ::Il2CppObject {
    public:
    public:
    // public System.Collections.Generic.Dictionary`2<System.String,PowerUI.AttributeLookup> AttributeIndex
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::AttributeLookup*>* AttributeIndex;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::AttributeLookup*>*) == 0x8);
    // public PowerUI.Element html
    // Size: 0x8
    // Offset: 0x18
    ::PowerUI::Element* html;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // public PowerUI.Element body
    // Size: 0x8
    // Offset: 0x20
    ::PowerUI::Element* body;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // public PowerUI.Window window
    // Size: 0x8
    // Offset: 0x28
    ::PowerUI::Window* window;
    // Field size check
    static_assert(sizeof(::PowerUI::Window*) == 0x8);
    // public PowerUI.FilePath location
    // Size: 0x8
    // Offset: 0x30
    ::PowerUI::FilePath* location;
    // Field size check
    static_assert(sizeof(::PowerUI::FilePath*) == 0x8);
    // public System.Boolean AotDocument
    // Size: 0x1
    // Offset: 0x38
    bool AotDocument;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: AotDocument and: Renderer
    char __padding5[0x7] = {};
    // public PowerUI.Renderman Renderer
    // Size: 0x8
    // Offset: 0x40
    ::PowerUI::Renderman* Renderer;
    // Field size check
    static_assert(sizeof(::PowerUI::Renderman*) == 0x8);
    // public System.String[] CodeBuffer
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::StringW> CodeBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public PowerUI.UICode CodeInstance
    // Size: 0x8
    // Offset: 0x50
    ::PowerUI::UICode* CodeInstance;
    // Field size check
    static_assert(sizeof(::PowerUI::UICode*) == 0x8);
    // public PowerUI.Element DropdownBox
    // Size: 0x8
    // Offset: 0x58
    ::PowerUI::Element* DropdownBox;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // public System.String[] StyleBuffer
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::StringW> StyleBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.Boolean FinishedParsing
    // Size: 0x1
    // Offset: 0x68
    bool FinishedParsing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: FinishedParsing and: Style
    char __padding11[0x7] = {};
    // public PowerUI.Css.StyleSheet Style
    // Size: 0x8
    // Offset: 0x70
    ::PowerUI::Css::StyleSheet* Style;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::StyleSheet*) == 0x8);
    // private System.String CurrentTitle
    // Size: 0x8
    // Offset: 0x78
    ::StringW CurrentTitle;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String ScriptLocation
    // Size: 0x8
    // Offset: 0x80
    ::StringW ScriptLocation;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public PowerUI.OnSizeChange OnResized
    // Size: 0x8
    // Offset: 0x88
    ::PowerUI::OnSizeChange* OnResized;
    // Field size check
    static_assert(sizeof(::PowerUI::OnSizeChange*) == 0x8);
    // private System.String CurrentTooltip
    // Size: 0x8
    // Offset: 0x90
    ::StringW CurrentTooltip;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADED04
    // private PowerUI.InputEvent KeyUp
    // Size: 0x8
    // Offset: 0x98
    ::PowerUI::InputEvent* KeyUp;
    // Field size check
    static_assert(sizeof(::PowerUI::InputEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADED14
    // private PowerUI.InputEvent KeyDown
    // Size: 0x8
    // Offset: 0xA0
    ::PowerUI::InputEvent* KeyDown;
    // Field size check
    static_assert(sizeof(::PowerUI::InputEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADED24
    // private PowerUI.InputEvent MouseMove
    // Size: 0x8
    // Offset: 0xA8
    ::PowerUI::InputEvent* MouseMove;
    // Field size check
    static_assert(sizeof(::PowerUI::InputEvent*) == 0x8);
    // public PowerUI.TitleChange OnTitleChange
    // Size: 0x8
    // Offset: 0xB0
    ::PowerUI::TitleChange* OnTitleChange;
    // Field size check
    static_assert(sizeof(::PowerUI::TitleChange*) == 0x8);
    // public PowerUI.TitleChange OnTooltipChange
    // Size: 0x8
    // Offset: 0xB8
    ::PowerUI::TitleChange* OnTooltipChange;
    // Field size check
    static_assert(sizeof(::PowerUI::TitleChange*) == 0x8);
    // public Nitro.DynamicMethod`1<Nitro.Void> onkeyup
    // Size: 0x8
    // Offset: 0xC0
    ::Nitro::DynamicMethod_1<::Nitro::Void>* onkeyup;
    // Field size check
    static_assert(sizeof(::Nitro::DynamicMethod_1<::Nitro::Void>*) == 0x8);
    // public Nitro.DynamicMethod`1<Nitro.Void> onresize
    // Size: 0x8
    // Offset: 0xC8
    ::Nitro::DynamicMethod_1<::Nitro::Void>* onresize;
    // Field size check
    static_assert(sizeof(::Nitro::DynamicMethod_1<::Nitro::Void>*) == 0x8);
    // public Nitro.DynamicMethod`1<Nitro.Void> onkeydown
    // Size: 0x8
    // Offset: 0xD0
    ::Nitro::DynamicMethod_1<::Nitro::Void>* onkeydown;
    // Field size check
    static_assert(sizeof(::Nitro::DynamicMethod_1<::Nitro::Void>*) == 0x8);
    // public Nitro.DynamicMethod`1<Nitro.Void> onmousemove
    // Size: 0x8
    // Offset: 0xD8
    ::Nitro::DynamicMethod_1<::Nitro::Void>* onmousemove;
    // Field size check
    static_assert(sizeof(::Nitro::DynamicMethod_1<::Nitro::Void>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,PowerUI.DynamicFont> ActiveFonts
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::DynamicFont*>* ActiveFonts;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::DynamicFont*>*) == 0x8);
    // private Nitro.NitroDomainManager SecurityDomain
    // Size: 0x8
    // Offset: 0xE8
    ::Nitro::NitroDomainManager* SecurityDomain;
    // Field size check
    static_assert(sizeof(::Nitro::NitroDomainManager*) == 0x8);
    public:
    // Get static field: static public PowerUI.Css.StyleSheet DefaultStyleSheet
    static ::PowerUI::Css::StyleSheet* _get_DefaultStyleSheet();
    // Set static field: static public PowerUI.Css.StyleSheet DefaultStyleSheet
    static void _set_DefaultStyleSheet(::PowerUI::Css::StyleSheet* value);
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,PowerUI.AttributeLookup> AttributeIndex
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::AttributeLookup*>*& dyn_AttributeIndex();
    // Get instance field reference: public PowerUI.Element html
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_html();
    // Get instance field reference: public PowerUI.Element body
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_body();
    // Get instance field reference: public PowerUI.Window window
    [[deprecated("Use field access instead!")]] ::PowerUI::Window*& dyn_window();
    // Get instance field reference: public PowerUI.FilePath location
    [[deprecated("Use field access instead!")]] ::PowerUI::FilePath*& dyn_location();
    // Get instance field reference: public System.Boolean AotDocument
    [[deprecated("Use field access instead!")]] bool& dyn_AotDocument();
    // Get instance field reference: public PowerUI.Renderman Renderer
    [[deprecated("Use field access instead!")]] ::PowerUI::Renderman*& dyn_Renderer();
    // Get instance field reference: public System.String[] CodeBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_CodeBuffer();
    // Get instance field reference: public PowerUI.UICode CodeInstance
    [[deprecated("Use field access instead!")]] ::PowerUI::UICode*& dyn_CodeInstance();
    // Get instance field reference: public PowerUI.Element DropdownBox
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_DropdownBox();
    // Get instance field reference: public System.String[] StyleBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_StyleBuffer();
    // Get instance field reference: public System.Boolean FinishedParsing
    [[deprecated("Use field access instead!")]] bool& dyn_FinishedParsing();
    // Get instance field reference: public PowerUI.Css.StyleSheet Style
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::StyleSheet*& dyn_Style();
    // Get instance field reference: private System.String CurrentTitle
    [[deprecated("Use field access instead!")]] ::StringW& dyn_CurrentTitle();
    // Get instance field reference: public System.String ScriptLocation
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ScriptLocation();
    // Get instance field reference: public PowerUI.OnSizeChange OnResized
    [[deprecated("Use field access instead!")]] ::PowerUI::OnSizeChange*& dyn_OnResized();
    // Get instance field reference: private System.String CurrentTooltip
    [[deprecated("Use field access instead!")]] ::StringW& dyn_CurrentTooltip();
    // Get instance field reference: private PowerUI.InputEvent KeyUp
    [[deprecated("Use field access instead!")]] ::PowerUI::InputEvent*& dyn_KeyUp();
    // Get instance field reference: private PowerUI.InputEvent KeyDown
    [[deprecated("Use field access instead!")]] ::PowerUI::InputEvent*& dyn_KeyDown();
    // Get instance field reference: private PowerUI.InputEvent MouseMove
    [[deprecated("Use field access instead!")]] ::PowerUI::InputEvent*& dyn_MouseMove();
    // Get instance field reference: public PowerUI.TitleChange OnTitleChange
    [[deprecated("Use field access instead!")]] ::PowerUI::TitleChange*& dyn_OnTitleChange();
    // Get instance field reference: public PowerUI.TitleChange OnTooltipChange
    [[deprecated("Use field access instead!")]] ::PowerUI::TitleChange*& dyn_OnTooltipChange();
    // Get instance field reference: public Nitro.DynamicMethod`1<Nitro.Void> onkeyup
    [[deprecated("Use field access instead!")]] ::Nitro::DynamicMethod_1<::Nitro::Void>*& dyn_onkeyup();
    // Get instance field reference: public Nitro.DynamicMethod`1<Nitro.Void> onresize
    [[deprecated("Use field access instead!")]] ::Nitro::DynamicMethod_1<::Nitro::Void>*& dyn_onresize();
    // Get instance field reference: public Nitro.DynamicMethod`1<Nitro.Void> onkeydown
    [[deprecated("Use field access instead!")]] ::Nitro::DynamicMethod_1<::Nitro::Void>*& dyn_onkeydown();
    // Get instance field reference: public Nitro.DynamicMethod`1<Nitro.Void> onmousemove
    [[deprecated("Use field access instead!")]] ::Nitro::DynamicMethod_1<::Nitro::Void>*& dyn_onmousemove();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,PowerUI.DynamicFont> ActiveFonts
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::DynamicFont*>*& dyn_ActiveFonts();
    // Get instance field reference: private Nitro.NitroDomainManager SecurityDomain
    [[deprecated("Use field access instead!")]] ::Nitro::NitroDomainManager*& dyn_SecurityDomain();
    // public System.Boolean get_AttributesCached()
    // Offset: 0x1854EB0
    bool get_AttributesCached();
    // public System.Void RemoveCachedElement(PowerUI.Element ele)
    // Offset: 0x1854EC0
    void RemoveCachedElement(::PowerUI::Element* ele);
    // public System.Void IndexAttribute(System.String attrib)
    // Offset: 0x18551AC
    void IndexAttribute(::StringW attrib);
    // public System.Void StartAttributeIndex(System.String attrib)
    // Offset: 0x1855250
    void StartAttributeIndex(::StringW attrib);
    // public System.Void add_KeyUp(PowerUI.InputEvent value)
    // Offset: 0x185535C
    void add_KeyUp(::PowerUI::InputEvent* value);
    // public System.Void remove_KeyUp(PowerUI.InputEvent value)
    // Offset: 0x1855448
    void remove_KeyUp(::PowerUI::InputEvent* value);
    // public System.Void add_KeyDown(PowerUI.InputEvent value)
    // Offset: 0x1855534
    void add_KeyDown(::PowerUI::InputEvent* value);
    // public System.Void remove_KeyDown(PowerUI.InputEvent value)
    // Offset: 0x1855620
    void remove_KeyDown(::PowerUI::InputEvent* value);
    // public System.Void add_MouseMove(PowerUI.InputEvent value)
    // Offset: 0x185570C
    void add_MouseMove(::PowerUI::InputEvent* value);
    // public System.Void remove_MouseMove(PowerUI.InputEvent value)
    // Offset: 0x18557F8
    void remove_MouseMove(::PowerUI::InputEvent* value);
    // public System.Void .ctor(PowerUI.Renderman renderer)
    // Offset: 0x18558E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Document* New_ctor(::PowerUI::Renderman* renderer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Document::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Document*, creationType>(renderer)));
    }
    // public System.Void .ctor(PowerUI.Renderman renderer, PowerUI.Window parentWindow)
    // Offset: 0x18558F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Document* New_ctor(::PowerUI::Renderman* renderer, ::PowerUI::Window* parentWindow) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Document::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Document*, creationType>(renderer, parentWindow)));
    }
    // public System.Void .ctor(PowerUI.Renderman renderer, PowerUI.Window parentWindow, System.Boolean aot)
    // Offset: 0x18558F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Document* New_ctor(::PowerUI::Renderman* renderer, ::PowerUI::Window* parentWindow, bool aot) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Document::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Document*, creationType>(renderer, parentWindow, aot)));
    }
    // public PowerUI.DynamicFont GetOrCreateFont(System.String fontName)
    // Offset: 0x1843DF0
    ::PowerUI::DynamicFont* GetOrCreateFont(::StringW fontName);
    // public PowerUI.DynamicFont GetFont(System.String fontName)
    // Offset: 0x1855EF4
    ::PowerUI::DynamicFont* GetFont(::StringW fontName);
    // public System.Void write(System.String text)
    // Offset: 0x1855F80
    void write(::StringW text);
    // public System.Void clear()
    // Offset: 0x1855FB8
    void clear();
    // public System.Void ClearStyle()
    // Offset: 0x1856060
    void ClearStyle();
    // public System.Void ClearEvents()
    // Offset: 0x185603C
    void ClearEvents();
    // public System.Boolean RunKeyUp(PowerUI.UIEvent e)
    // Offset: 0x18560C4
    bool RunKeyUp(::PowerUI::UIEvent* e);
    // public System.Boolean RunMouseMove(PowerUI.UIEvent e)
    // Offset: 0x18561B4
    bool RunMouseMove(::PowerUI::UIEvent* e);
    // public System.Boolean RunKeyDown(PowerUI.UIEvent e)
    // Offset: 0x18562C0
    bool RunKeyDown(::PowerUI::UIEvent* e);
    // public System.String get_basepath()
    // Offset: 0x1840624
    ::StringW get_basepath();
    // public System.String get_title()
    // Offset: 0x18563B0
    ::StringW get_title();
    // public System.Void set_title(System.String value)
    // Offset: 0x18563B8
    void set_title(::StringW value);
    // public System.String get_tooltip()
    // Offset: 0x18563D8
    ::StringW get_tooltip();
    // public System.Void set_tooltip(System.String value)
    // Offset: 0x18563E0
    void set_tooltip(::StringW value);
    // public System.Object get_Item(System.String index)
    // Offset: 0x1856430
    ::Il2CppObject* get_Item(::StringW index);
    // public System.Void set_Item(System.String index, System.Object value)
    // Offset: 0x1856444
    void set_Item(::StringW index, ::Il2CppObject* value);
    // public PowerUI.Element createElement(System.String tag)
    // Offset: 0x1856458
    ::PowerUI::Element* createElement(::StringW tag);
    // public System.Object OnWindowOpen(params System.Object[] extra)
    // Offset: 0x185656C
    ::Il2CppObject* OnWindowOpen(::ArrayW<::Il2CppObject*> extra);
    // public System.Object Run(System.String name, params System.Object[] args)
    // Offset: 0x1856668
    ::Il2CppObject* Run(::StringW name, ::ArrayW<::Il2CppObject*> args);
    // public System.Object RunLiteral(System.String name, System.Object[] args)
    // Offset: 0x185667C
    ::Il2CppObject* RunLiteral(::StringW name, ::ArrayW<::Il2CppObject*> args);
    // public System.Object RunLiteral(System.String name, PowerUI.Element element, System.Object[] args)
    // Offset: 0x1856690
    ::Il2CppObject* RunLiteral(::StringW name, ::PowerUI::Element* element, ::ArrayW<::Il2CppObject*> args);
    // public System.Object RunLiteral(System.String name, System.Object[] args, System.Boolean optional)
    // Offset: 0x1856698
    ::Il2CppObject* RunLiteral(::StringW name, ::ArrayW<::Il2CppObject*> args, bool optional);
    // public System.Object RunLiteral(System.String name, PowerUI.Element element, System.Object[] args, System.Boolean optional)
    // Offset: 0x18565D4
    ::Il2CppObject* RunLiteral(::StringW name, ::PowerUI::Element* element, ::ArrayW<::Il2CppObject*> args, bool optional);
    // public System.Object RunOptionally(System.String name, PowerUI.Element element, params System.Object[] args)
    // Offset: 0x18566AC
    ::Il2CppObject* RunOptionally(::StringW name, ::PowerUI::Element* element, ::ArrayW<::Il2CppObject*> args);
    // public System.Object RunOptionally(System.String name, params System.Object[] args)
    // Offset: 0x18566B4
    ::Il2CppObject* RunOptionally(::StringW name, ::ArrayW<::Il2CppObject*> args);
    // public System.Void AddStyle(System.String css)
    // Offset: 0x18566C8
    void AddStyle(::StringW css);
    // public System.Void AddStyle(System.String css, System.Int32 index)
    // Offset: 0x18566D0
    void AddStyle(::StringW css, int index);
    // public System.Int32 GetStyleIndex()
    // Offset: 0x185677C
    int GetStyleIndex();
    // public System.Boolean TryStyle()
    // Offset: 0x18568B8
    bool TryStyle();
    // public System.Void AddCode(System.String code)
    // Offset: 0x1856A50
    void AddCode(::StringW code);
    // public System.Void AddCode(System.String code, System.Int32 index)
    // Offset: 0x1856A58
    void AddCode(::StringW code, int index);
    // public System.Void ClearCode()
    // Offset: 0x1856054
    void ClearCode();
    // public System.Int32 GetCodeIndex()
    // Offset: 0x1856B00
    int GetCodeIndex();
    // public System.Boolean TryCompile()
    // Offset: 0x1856C3C
    bool TryCompile();
    // public PowerUI.DocumentElements get_allElements()
    // Offset: 0x1857470
    ::PowerUI::DocumentElements* get_allElements();
    // public PowerUI.Element getElementByTagName(System.String tag)
    // Offset: 0x1857500
    ::PowerUI::Element* getElementByTagName(::StringW tag);
    // public System.Collections.Generic.List`1<PowerUI.Element> getElementsByTagName(System.String tag)
    // Offset: 0x18575C4
    ::System::Collections::Generic::List_1<::PowerUI::Element*>* getElementsByTagName(::StringW tag);
    // public System.Collections.Generic.List`1<PowerUI.Element> getElementsByAttribute(System.String property, System.String value)
    // Offset: 0x1857600
    ::System::Collections::Generic::List_1<::PowerUI::Element*>* getElementsByAttribute(::StringW property, ::StringW value);
    // public PowerUI.Element getElementByAttribute(System.String property, System.String value)
    // Offset: 0x1857648
    ::PowerUI::Element* getElementByAttribute(::StringW property, ::StringW value);
    // public System.Collections.Generic.List`1<PowerUI.Element> getElementsByClassName(System.String className)
    // Offset: 0x1857690
    ::System::Collections::Generic::List_1<::PowerUI::Element*>* getElementsByClassName(::StringW className);
    // public PowerUI.Element getElementById(System.String id)
    // Offset: 0x18576C8
    ::PowerUI::Element* getElementById(::StringW id);
    // public PowerUI.Css.SelectorStyle getStyleBySelector(System.String selector)
    // Offset: 0x185773C
    ::PowerUI::Css::SelectorStyle* getStyleBySelector(::StringW selector);
    // public System.String get_innerHTML()
    // Offset: 0x18577F0
    ::StringW get_innerHTML();
    // public System.Void set_innerHTML(System.String value)
    // Offset: 0x1857858
    void set_innerHTML(::StringW value);
    // public System.Void NewBody()
    // Offset: 0x1857890
    void NewBody();
  }; // PowerUI.Document
  #pragma pack(pop)
  static check_size<sizeof(Document), 232 + sizeof(::Nitro::NitroDomainManager*)> __PowerUI_DocumentSizeCheck;
  static_assert(sizeof(Document) == 0xF0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Document::get_AttributesCached
// Il2CppName: get_AttributesCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Document::*)()>(&PowerUI::Document::get_AttributesCached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "get_AttributesCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::RemoveCachedElement
// Il2CppName: RemoveCachedElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::PowerUI::Element*)>(&PowerUI::Document::RemoveCachedElement)> {
  static const MethodInfo* get() {
    static auto* ele = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "RemoveCachedElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ele});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::IndexAttribute
// Il2CppName: IndexAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::IndexAttribute)> {
  static const MethodInfo* get() {
    static auto* attrib = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "IndexAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attrib});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::StartAttributeIndex
// Il2CppName: StartAttributeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::StartAttributeIndex)> {
  static const MethodInfo* get() {
    static auto* attrib = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "StartAttributeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attrib});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::add_KeyUp
// Il2CppName: add_KeyUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::PowerUI::InputEvent*)>(&PowerUI::Document::add_KeyUp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "InputEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "add_KeyUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::remove_KeyUp
// Il2CppName: remove_KeyUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::PowerUI::InputEvent*)>(&PowerUI::Document::remove_KeyUp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "InputEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "remove_KeyUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::add_KeyDown
// Il2CppName: add_KeyDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::PowerUI::InputEvent*)>(&PowerUI::Document::add_KeyDown)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "InputEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "add_KeyDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::remove_KeyDown
// Il2CppName: remove_KeyDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::PowerUI::InputEvent*)>(&PowerUI::Document::remove_KeyDown)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "InputEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "remove_KeyDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::add_MouseMove
// Il2CppName: add_MouseMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::PowerUI::InputEvent*)>(&PowerUI::Document::add_MouseMove)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "InputEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "add_MouseMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::remove_MouseMove
// Il2CppName: remove_MouseMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::PowerUI::InputEvent*)>(&PowerUI::Document::remove_MouseMove)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "InputEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "remove_MouseMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Document::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Document::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Document::GetOrCreateFont
// Il2CppName: GetOrCreateFont
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::DynamicFont* (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::GetOrCreateFont)> {
  static const MethodInfo* get() {
    static auto* fontName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "GetOrCreateFont", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontName});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::GetFont
// Il2CppName: GetFont
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::DynamicFont* (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::GetFont)> {
  static const MethodInfo* get() {
    static auto* fontName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "GetFont", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontName});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::write
// Il2CppName: write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::write)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::clear
// Il2CppName: clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)()>(&PowerUI::Document::clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::ClearStyle
// Il2CppName: ClearStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)()>(&PowerUI::Document::ClearStyle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "ClearStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::ClearEvents
// Il2CppName: ClearEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)()>(&PowerUI::Document::ClearEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "ClearEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::RunKeyUp
// Il2CppName: RunKeyUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Document::*)(::PowerUI::UIEvent*)>(&PowerUI::Document::RunKeyUp)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "RunKeyUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::RunMouseMove
// Il2CppName: RunMouseMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Document::*)(::PowerUI::UIEvent*)>(&PowerUI::Document::RunMouseMove)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "RunMouseMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::RunKeyDown
// Il2CppName: RunKeyDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Document::*)(::PowerUI::UIEvent*)>(&PowerUI::Document::RunKeyDown)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "RunKeyDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::get_basepath
// Il2CppName: get_basepath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Document::*)()>(&PowerUI::Document::get_basepath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "get_basepath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::get_title
// Il2CppName: get_title
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Document::*)()>(&PowerUI::Document::get_title)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "get_title", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::set_title
// Il2CppName: set_title
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::set_title)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "set_title", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::get_tooltip
// Il2CppName: get_tooltip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Document::*)()>(&PowerUI::Document::get_tooltip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "get_tooltip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::set_tooltip
// Il2CppName: set_tooltip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::set_tooltip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "set_tooltip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::StringW, ::Il2CppObject*)>(&PowerUI::Document::set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::createElement
// Il2CppName: createElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::createElement)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "createElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::OnWindowOpen
// Il2CppName: OnWindowOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PowerUI::Document::*)(::ArrayW<::Il2CppObject*>)>(&PowerUI::Document::OnWindowOpen)> {
  static const MethodInfo* get() {
    static auto* extra = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "OnWindowOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{extra});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PowerUI::Document::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&PowerUI::Document::Run)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, args});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::RunLiteral
// Il2CppName: RunLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PowerUI::Document::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&PowerUI::Document::RunLiteral)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "RunLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, args});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::RunLiteral
// Il2CppName: RunLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PowerUI::Document::*)(::StringW, ::PowerUI::Element*, ::ArrayW<::Il2CppObject*>)>(&PowerUI::Document::RunLiteral)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "RunLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, element, args});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::RunLiteral
// Il2CppName: RunLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PowerUI::Document::*)(::StringW, ::ArrayW<::Il2CppObject*>, bool)>(&PowerUI::Document::RunLiteral)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* optional = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "RunLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, args, optional});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::RunLiteral
// Il2CppName: RunLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PowerUI::Document::*)(::StringW, ::PowerUI::Element*, ::ArrayW<::Il2CppObject*>, bool)>(&PowerUI::Document::RunLiteral)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* optional = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "RunLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, element, args, optional});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::RunOptionally
// Il2CppName: RunOptionally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PowerUI::Document::*)(::StringW, ::PowerUI::Element*, ::ArrayW<::Il2CppObject*>)>(&PowerUI::Document::RunOptionally)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "RunOptionally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, element, args});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::RunOptionally
// Il2CppName: RunOptionally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PowerUI::Document::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&PowerUI::Document::RunOptionally)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "RunOptionally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, args});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::AddStyle
// Il2CppName: AddStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::AddStyle)> {
  static const MethodInfo* get() {
    static auto* css = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "AddStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{css});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::AddStyle
// Il2CppName: AddStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::StringW, int)>(&PowerUI::Document::AddStyle)> {
  static const MethodInfo* get() {
    static auto* css = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "AddStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{css, index});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::GetStyleIndex
// Il2CppName: GetStyleIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Document::*)()>(&PowerUI::Document::GetStyleIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "GetStyleIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::TryStyle
// Il2CppName: TryStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Document::*)()>(&PowerUI::Document::TryStyle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "TryStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::AddCode
// Il2CppName: AddCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::AddCode)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "AddCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::AddCode
// Il2CppName: AddCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::StringW, int)>(&PowerUI::Document::AddCode)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "AddCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, index});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::ClearCode
// Il2CppName: ClearCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)()>(&PowerUI::Document::ClearCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "ClearCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::GetCodeIndex
// Il2CppName: GetCodeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Document::*)()>(&PowerUI::Document::GetCodeIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "GetCodeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::TryCompile
// Il2CppName: TryCompile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Document::*)()>(&PowerUI::Document::TryCompile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "TryCompile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::get_allElements
// Il2CppName: get_allElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::DocumentElements* (PowerUI::Document::*)()>(&PowerUI::Document::get_allElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "get_allElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::getElementByTagName
// Il2CppName: getElementByTagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::getElementByTagName)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "getElementByTagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::getElementsByTagName
// Il2CppName: getElementsByTagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::PowerUI::Element*>* (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::getElementsByTagName)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "getElementsByTagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::getElementsByAttribute
// Il2CppName: getElementsByAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::PowerUI::Element*>* (PowerUI::Document::*)(::StringW, ::StringW)>(&PowerUI::Document::getElementsByAttribute)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "getElementsByAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, value});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::getElementByAttribute
// Il2CppName: getElementByAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Document::*)(::StringW, ::StringW)>(&PowerUI::Document::getElementByAttribute)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "getElementByAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, value});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::getElementsByClassName
// Il2CppName: getElementsByClassName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::PowerUI::Element*>* (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::getElementsByClassName)> {
  static const MethodInfo* get() {
    static auto* className = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "getElementsByClassName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{className});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::getElementById
// Il2CppName: getElementById
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::getElementById)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "getElementById", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::getStyleBySelector
// Il2CppName: getStyleBySelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Css::SelectorStyle* (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::getStyleBySelector)> {
  static const MethodInfo* get() {
    static auto* selector = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "getStyleBySelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selector});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::get_innerHTML
// Il2CppName: get_innerHTML
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::Document::*)()>(&PowerUI::Document::get_innerHTML)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "get_innerHTML", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::set_innerHTML
// Il2CppName: set_innerHTML
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)(::StringW)>(&PowerUI::Document::set_innerHTML)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "set_innerHTML", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Document::NewBody
// Il2CppName: NewBody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Document::*)()>(&PowerUI::Document::NewBody)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Document*), "NewBody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
