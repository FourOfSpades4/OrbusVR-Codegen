// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: SPASprite
  class SPASprite;
  // Forward declaring type: SPAFontMeta
  class SPAFontMeta;
  // Forward declaring type: SPAMapEntry
  class SPAMapEntry;
  // Forward declaring type: SPAInstance
  class SPAInstance;
  // Forward declaring type: SPACharacter
  class SPACharacter;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: SPA
  class SPA;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::SPA);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::SPA*, "PowerUI", "SPA");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.SPA
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: AD13B0
  class SPA : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 FrameRate
    // Size: 0x4
    // Offset: 0x10
    int FrameRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 FrameWidth
    // Size: 0x4
    // Offset: 0x14
    int FrameWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 FrameHeight
    // Size: 0x4
    // Offset: 0x18
    int FrameHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.UInt32 FrameCount
    // Size: 0x4
    // Offset: 0x1C
    uint FrameCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public PowerUI.SPASprite[] Sprites
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::PowerUI::SPASprite*> Sprites;
    // Field size check
    static_assert(sizeof(::ArrayW<::PowerUI::SPASprite*>) == 0x8);
    // public PowerUI.SPAFontMeta FontMeta
    // Size: 0x8
    // Offset: 0x28
    ::PowerUI::SPAFontMeta* FontMeta;
    // Field size check
    static_assert(sizeof(::PowerUI::SPAFontMeta*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.Int32,PowerUI.SPAMapEntry> Map
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<int, ::PowerUI::SPAMapEntry*>* Map;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::PowerUI::SPAMapEntry*>*) == 0x8);
    public:
    // Get static field: static private UnityEngine.Shader RawIsolationShader
    static ::UnityEngine::Shader* _get_RawIsolationShader();
    // Set static field: static private UnityEngine.Shader RawIsolationShader
    static void _set_RawIsolationShader(::UnityEngine::Shader* value);
    // Get static field: static public PowerUI.SPAInstance LastInstance
    static ::PowerUI::SPAInstance* _get_LastInstance();
    // Set static field: static public PowerUI.SPAInstance LastInstance
    static void _set_LastInstance(::PowerUI::SPAInstance* value);
    // Get static field: static public PowerUI.SPAInstance FirstInstance
    static ::PowerUI::SPAInstance* _get_FirstInstance();
    // Set static field: static public PowerUI.SPAInstance FirstInstance
    static void _set_FirstInstance(::PowerUI::SPAInstance* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.String,PowerUI.SPA> Instances
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::SPA*>* _get_Instances();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.String,PowerUI.SPA> Instances
    static void _set_Instances(::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::SPA*>* value);
    // Get instance field reference: public System.Int32 FrameRate
    [[deprecated("Use field access instead!")]] int& dyn_FrameRate();
    // Get instance field reference: public System.Int32 FrameWidth
    [[deprecated("Use field access instead!")]] int& dyn_FrameWidth();
    // Get instance field reference: public System.Int32 FrameHeight
    [[deprecated("Use field access instead!")]] int& dyn_FrameHeight();
    // Get instance field reference: public System.UInt32 FrameCount
    [[deprecated("Use field access instead!")]] uint& dyn_FrameCount();
    // Get instance field reference: public PowerUI.SPASprite[] Sprites
    [[deprecated("Use field access instead!")]] ::ArrayW<::PowerUI::SPASprite*>& dyn_Sprites();
    // Get instance field reference: public PowerUI.SPAFontMeta FontMeta
    [[deprecated("Use field access instead!")]] ::PowerUI::SPAFontMeta*& dyn_FontMeta();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.Int32,PowerUI.SPAMapEntry> Map
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::PowerUI::SPAMapEntry*>*& dyn_Map();
    // static public UnityEngine.Shader get_IsolationShader()
    // Offset: 0x176901C
    static ::UnityEngine::Shader* get_IsolationShader();
    // static public System.Void Clear()
    // Offset: 0x176F14C
    static void Clear();
    // static public PowerUI.SPA Get(System.String name)
    // Offset: 0x176F1BC
    static ::PowerUI::SPA* Get(::StringW name);
    // static public System.Int32 ActiveCount()
    // Offset: 0x176F260
    static int ActiveCount();
    // static public System.Void Update()
    // Offset: 0x176F2E4
    static void Update();
    // public System.Void .ctor(System.String name, System.Int32 frameWidth, System.Int32 frameHeight, System.Int32 frameRate)
    // Offset: 0x176F580
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SPA* New_ctor(::StringW name, int frameWidth, int frameHeight, int frameRate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::SPA::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SPA*, creationType>(name, frameWidth, frameHeight, frameRate)));
    }
    // public System.Void ChangeFrameRate(System.Int32 newRate)
    // Offset: 0x176F648
    void ChangeFrameRate(int newRate);
    // public System.Void CreateSprites(System.Int32 spriteCount, System.UInt32 frameCount)
    // Offset: 0x176F71C
    void CreateSprites(int spriteCount, uint frameCount);
    // public System.Void .ctor(System.String name, System.Byte[] binaryData)
    // Offset: 0x176CEE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SPA* New_ctor(::StringW name, ::ArrayW<uint8_t> binaryData) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::SPA::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SPA*, creationType>(name, binaryData)));
    }
    // public System.Boolean get_HasMap()
    // Offset: 0x177008C
    bool get_HasMap();
    // public PowerUI.SPACharacter GetCharacter(System.Int32 charcode)
    // Offset: 0x177009C
    ::PowerUI::SPACharacter* GetCharacter(int charcode);
    // public PowerUI.SPAMapEntry GetFromMap(System.Int32 index)
    // Offset: 0x1770150
    ::PowerUI::SPAMapEntry* GetFromMap(int index);
    // public System.Void AddToMap(System.Int32 index, PowerUI.SPAMapEntry entry)
    // Offset: 0x17701C4
    void AddToMap(int index, ::PowerUI::SPAMapEntry* entry);
    // public PowerUI.SPAInstance GetInstance()
    // Offset: 0x1770268
    ::PowerUI::SPAInstance* GetInstance();
    // public PowerUI.SPASprite GetSprite(System.Int32 id)
    // Offset: 0x1770468
    ::PowerUI::SPASprite* GetSprite(int id);
    // public PowerUI.SPASprite get_Item(System.Int32 id)
    // Offset: 0x17704BC
    ::PowerUI::SPASprite* get_Item(int id);
    // static private System.Void .cctor()
    // Offset: 0x1770510
    static void _cctor();
  }; // PowerUI.SPA
  #pragma pack(pop)
  static check_size<sizeof(SPA), 48 + sizeof(::System::Collections::Generic::Dictionary_2<int, ::PowerUI::SPAMapEntry*>*)> __PowerUI_SPASizeCheck;
  static_assert(sizeof(SPA) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::SPA::get_IsolationShader
// Il2CppName: get_IsolationShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (*)()>(&PowerUI::SPA::get_IsolationShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPA*), "get_IsolationShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SPA::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::SPA::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPA*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SPA::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::SPA* (*)(::StringW)>(&PowerUI::SPA::Get)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPA*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: PowerUI::SPA::ActiveCount
// Il2CppName: ActiveCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&PowerUI::SPA::ActiveCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPA*), "ActiveCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SPA::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::SPA::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPA*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SPA::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::SPA::ChangeFrameRate
// Il2CppName: ChangeFrameRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SPA::*)(int)>(&PowerUI::SPA::ChangeFrameRate)> {
  static const MethodInfo* get() {
    static auto* newRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPA*), "ChangeFrameRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newRate});
  }
};
// Writing MetadataGetter for method: PowerUI::SPA::CreateSprites
// Il2CppName: CreateSprites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SPA::*)(int, uint)>(&PowerUI::SPA::CreateSprites)> {
  static const MethodInfo* get() {
    static auto* spriteCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frameCount = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPA*), "CreateSprites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{spriteCount, frameCount});
  }
};
// Writing MetadataGetter for method: PowerUI::SPA::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::SPA::get_HasMap
// Il2CppName: get_HasMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::SPA::*)()>(&PowerUI::SPA::get_HasMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPA*), "get_HasMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SPA::GetCharacter
// Il2CppName: GetCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::SPACharacter* (PowerUI::SPA::*)(int)>(&PowerUI::SPA::GetCharacter)> {
  static const MethodInfo* get() {
    static auto* charcode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPA*), "GetCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{charcode});
  }
};
// Writing MetadataGetter for method: PowerUI::SPA::GetFromMap
// Il2CppName: GetFromMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::SPAMapEntry* (PowerUI::SPA::*)(int)>(&PowerUI::SPA::GetFromMap)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPA*), "GetFromMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: PowerUI::SPA::AddToMap
// Il2CppName: AddToMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SPA::*)(int, ::PowerUI::SPAMapEntry*)>(&PowerUI::SPA::AddToMap)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* entry = &::il2cpp_utils::GetClassFromName("PowerUI", "SPAMapEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPA*), "AddToMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, entry});
  }
};
// Writing MetadataGetter for method: PowerUI::SPA::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::SPAInstance* (PowerUI::SPA::*)()>(&PowerUI::SPA::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPA*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SPA::GetSprite
// Il2CppName: GetSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::SPASprite* (PowerUI::SPA::*)(int)>(&PowerUI::SPA::GetSprite)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPA*), "GetSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: PowerUI::SPA::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::SPASprite* (PowerUI::SPA::*)(int)>(&PowerUI::SPA::get_Item)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPA*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: PowerUI::SPA::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::SPA::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPA*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
