// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.HtmlTagHandler
#include "PowerUI/HtmlTagHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Shader
  class Shader;
}
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: ImagePackage
  class ImagePackage;
  // Forward declaring type: CameraPool
  class CameraPool;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: CameraTag
  class CameraTag;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::CameraTag);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::CameraTag*, "PowerUI", "CameraTag");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.CameraTag
  // [TokenAttribute] Offset: FFFFFFFF
  class CameraTag : public ::PowerUI::HtmlTagHandler {
    public:
    // Writing base type padding for base size: 0x33 to desired offset: 0x38
    char ___base_padding[0x5] = {};
    public:
    // public UnityEngine.Camera Camera
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Camera* Camera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // public UnityEngine.Transform Mask
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* Mask;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single DepthFactor
    // Size: 0x4
    // Offset: 0x48
    float DepthFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single FieldOfView
    // Size: 0x4
    // Offset: 0x4C
    float FieldOfView;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Camera Camera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_Camera();
    // Get instance field reference: public UnityEngine.Transform Mask
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_Mask();
    // Get instance field reference: public System.Single DepthFactor
    [[deprecated("Use field access instead!")]] float& dyn_DepthFactor();
    // Get instance field reference: public System.Single FieldOfView
    [[deprecated("Use field access instead!")]] float& dyn_FieldOfView();
    // public System.Void ImageReady(PowerUI.ImagePackage package)
    // Offset: 0xEBCBB4
    void ImageReady(::PowerUI::ImagePackage* package);
    // private System.Void ParentMask()
    // Offset: 0xEBC718
    void ParentMask();
    // public System.Void SetMask(UnityEngine.Texture image)
    // Offset: 0xEBC928
    void SetMask(::UnityEngine::Texture* image);
    // public PowerUI.CameraPool get_MainCameraPool()
    // Offset: 0xEBCC34
    ::PowerUI::CameraPool* get_MainCameraPool();
    // private System.Void ComputeDepth()
    // Offset: 0xEBCFB0
    void ComputeDepth();
    // public UnityEngine.Shader get_MaskShader()
    // Offset: 0xEBCBE8
    ::UnityEngine::Shader* get_MaskShader();
    // public override System.String[] GetTags()
    // Offset: 0xEBC390
    // Implemented from: Wrench.TagHandler
    // Base method: System.String[] TagHandler::GetTags()
    ::ArrayW<::StringW> GetTags();
    // public override Wrench.TagHandler GetInstance()
    // Offset: 0xEBC440
    // Implemented from: Wrench.TagHandler
    // Base method: Wrench.TagHandler TagHandler::GetInstance()
    ::Wrench::TagHandler* GetInstance();
    // public override System.Boolean SelfClosing()
    // Offset: 0xEBC4A4
    // Implemented from: Wrench.TagHandler
    // Base method: System.Boolean TagHandler::SelfClosing()
    bool SelfClosing();
    // public override System.Boolean OnAttributeChange(System.String property)
    // Offset: 0xEBC4AC
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Boolean HtmlTagHandler::OnAttributeChange(System.String property)
    bool OnAttributeChange(::StringW property);
    // public override System.Void OnLayout()
    // Offset: 0xEBCCE0
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::OnLayout()
    void OnLayout();
    // public System.Void .ctor()
    // Offset: 0xEBC49C
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::.ctor()
    // Base method: System.Void TagHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CameraTag* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::CameraTag::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CameraTag*, creationType>()));
    }
  }; // PowerUI.CameraTag
  #pragma pack(pop)
  static check_size<sizeof(CameraTag), 76 + sizeof(float)> __PowerUI_CameraTagSizeCheck;
  static_assert(sizeof(CameraTag) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::CameraTag::ImageReady
// Il2CppName: ImageReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CameraTag::*)(::PowerUI::ImagePackage*)>(&PowerUI::CameraTag::ImageReady)> {
  static const MethodInfo* get() {
    static auto* package = &::il2cpp_utils::GetClassFromName("PowerUI", "ImagePackage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraTag*), "ImageReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{package});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraTag::ParentMask
// Il2CppName: ParentMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CameraTag::*)()>(&PowerUI::CameraTag::ParentMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraTag*), "ParentMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraTag::SetMask
// Il2CppName: SetMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CameraTag::*)(::UnityEngine::Texture*)>(&PowerUI::CameraTag::SetMask)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraTag*), "SetMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraTag::get_MainCameraPool
// Il2CppName: get_MainCameraPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::CameraPool* (PowerUI::CameraTag::*)()>(&PowerUI::CameraTag::get_MainCameraPool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraTag*), "get_MainCameraPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraTag::ComputeDepth
// Il2CppName: ComputeDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CameraTag::*)()>(&PowerUI::CameraTag::ComputeDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraTag*), "ComputeDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraTag::get_MaskShader
// Il2CppName: get_MaskShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (PowerUI::CameraTag::*)()>(&PowerUI::CameraTag::get_MaskShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraTag*), "get_MaskShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraTag::GetTags
// Il2CppName: GetTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (PowerUI::CameraTag::*)()>(&PowerUI::CameraTag::GetTags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraTag*), "GetTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraTag::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (PowerUI::CameraTag::*)()>(&PowerUI::CameraTag::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraTag*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraTag::SelfClosing
// Il2CppName: SelfClosing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::CameraTag::*)()>(&PowerUI::CameraTag::SelfClosing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraTag*), "SelfClosing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraTag::OnAttributeChange
// Il2CppName: OnAttributeChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::CameraTag::*)(::StringW)>(&PowerUI::CameraTag::OnAttributeChange)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraTag*), "OnAttributeChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraTag::OnLayout
// Il2CppName: OnLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CameraTag::*)()>(&PowerUI::CameraTag::OnLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CameraTag*), "OnLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CameraTag::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
