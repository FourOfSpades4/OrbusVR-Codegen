// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Element
  class Element;
  // Forward declaring type: FileProtocol
  class FileProtocol;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: FilePath
  class FilePath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::FilePath);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::FilePath*, "PowerUI", "FilePath");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.FilePath
  // [TokenAttribute] Offset: FFFFFFFF
  class FilePath : public ::Il2CppObject {
    public:
    public:
    // public System.String Url
    // Size: 0x8
    // Offset: 0x10
    ::StringW Url;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String Base
    // Size: 0x8
    // Offset: 0x18
    ::StringW Base;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String Target
    // Size: 0x8
    // Offset: 0x20
    ::StringW Target;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Protocol
    // Size: 0x8
    // Offset: 0x28
    ::StringW Protocol;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String[] Segments
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::StringW> Segments;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String RelativeTo
    // Size: 0x8
    // Offset: 0x38
    ::StringW RelativeTo;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean UsedResolution
    // Size: 0x1
    // Offset: 0x40
    bool UsedResolution;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UsedResolution and: Hash
    char __padding6[0x7] = {};
    // public System.String Hash
    // Size: 0x8
    // Offset: 0x48
    ::StringW Hash;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public PowerUI.Element Parent
    // Size: 0x8
    // Offset: 0x50
    ::PowerUI::Element* Parent;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // public System.String Query
    // Size: 0x8
    // Offset: 0x58
    ::StringW Query;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String Url
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Url();
    // Get instance field reference: private System.String Base
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Base();
    // Get instance field reference: private System.String Target
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Target();
    // Get instance field reference: public System.String Protocol
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Protocol();
    // Get instance field reference: public System.String[] Segments
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_Segments();
    // Get instance field reference: public System.String RelativeTo
    [[deprecated("Use field access instead!")]] ::StringW& dyn_RelativeTo();
    // Get instance field reference: public System.Boolean UsedResolution
    [[deprecated("Use field access instead!")]] bool& dyn_UsedResolution();
    // Get instance field reference: public System.String Hash
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Hash();
    // Get instance field reference: public PowerUI.Element Parent
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_Parent();
    // Get instance field reference: public System.String Query
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Query();
    // public System.Void .ctor(System.String url)
    // Offset: 0x1A43154
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FilePath* New_ctor(::StringW url) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::FilePath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FilePath*, creationType>(url)));
    }
    // public System.Void .ctor(System.String url, System.String relativeTo)
    // Offset: 0x1A43110
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FilePath* New_ctor(::StringW url, ::StringW relativeTo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::FilePath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FilePath*, creationType>(url, relativeTo)));
    }
    // public System.Void .ctor(System.String url, System.String relativeTo, System.Boolean useResolution)
    // Offset: 0x1A43BE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FilePath* New_ctor(::StringW url, ::StringW relativeTo, bool useResolution) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::FilePath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FilePath*, creationType>(url, relativeTo, useResolution)));
    }
    // private System.Void SetPath(System.String url, System.String relativeTo)
    // Offset: 0x1A43C30
    void SetPath(::StringW url, ::StringW relativeTo);
    // private System.Void SetPath(System.String url, System.String relativeTo, System.Boolean useResolution)
    // Offset: 0x1A4318C
    void SetPath(::StringW url, ::StringW relativeTo, bool useResolution);
    // public System.Void reload()
    // Offset: 0x1A440B0
    void reload();
    // public System.Void assign(System.String url)
    // Offset: 0x1A440E0
    void assign(::StringW url);
    // public System.Void replace(System.String url)
    // Offset: 0x1A4419C
    void replace(::StringW url);
    // public PowerUI.FileProtocol get_Handler()
    // Offset: 0x1A43C38
    ::PowerUI::FileProtocol* get_Handler();
    // public System.String get_Filename()
    // Offset: 0x1A43CA0
    ::StringW get_Filename();
    // public System.String get_File()
    // Offset: 0x1A442C4
    ::StringW get_File();
    // public System.Void set_File(System.String value)
    // Offset: 0x1A43F2C
    void set_File(::StringW value);
    // public System.String get_Filetype()
    // Offset: 0x1A43E40
    ::StringW get_Filetype();
    // public System.String get_Directory()
    // Offset: 0x1A44320
    ::StringW get_Directory();
    // public System.String get_Path()
    // Offset: 0x1A44404
    ::StringW get_Path();
    // public System.String get_host()
    // Offset: 0x1A4443C
    ::StringW get_host();
    // public System.String get_hostname()
    // Offset: 0x1A444B4
    ::StringW get_hostname();
    // public System.String get_port()
    // Offset: 0x1A445E0
    ::StringW get_port();
    // public System.String get_href()
    // Offset: 0x1A4471C
    ::StringW get_href();
    // public System.String get_basepath()
    // Offset: 0x1A44724
    ::StringW get_basepath();
    // public System.Void set_basepath(System.String value)
    // Offset: 0x1A4486C
    void set_basepath(::StringW value);
    // public System.String get_target()
    // Offset: 0x1A44874
    ::StringW get_target();
    // public System.Void set_target(System.String value)
    // Offset: 0x1A4487C
    void set_target(::StringW value);
    // public System.String get_protocol()
    // Offset: 0x1A44884
    ::StringW get_protocol();
    // public System.String get_hash()
    // Offset: 0x1A448D8
    ::StringW get_hash();
    // public System.String get_pathname()
    // Offset: 0x1A44930
    ::StringW get_pathname();
    // public System.String get_file()
    // Offset: 0x1A44A44
    ::StringW get_file();
    // public System.Collections.Generic.Dictionary`2<System.String,System.String> get_searchParams()
    // Offset: 0x1A44B58
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* get_searchParams();
    // static public System.Void LoadUrlString(System.String getString, System.Collections.Generic.Dictionary`2<System.String,System.String> set)
    // Offset: 0x1A44BD4
    static void LoadUrlString(::StringW getString, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* set);
    // public System.String get_search()
    // Offset: 0x1A44BCC
    ::StringW get_search();
    // public System.Boolean get_fullAccess()
    // Offset: 0x1A44E68
    bool get_fullAccess();
    // public System.Boolean get_web()
    // Offset: 0x1A44F0C
    bool get_web();
    // public PowerUI.FileProtocol GetProtocol()
    // Offset: 0x1A44EA4
    ::PowerUI::FileProtocol* GetProtocol();
    // public override System.String ToString()
    // Offset: 0x1A44F90
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // PowerUI.FilePath
  #pragma pack(pop)
  static check_size<sizeof(FilePath), 88 + sizeof(::StringW)> __PowerUI_FilePathSizeCheck;
  static_assert(sizeof(FilePath) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::FilePath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::FilePath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::FilePath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::FilePath::SetPath
// Il2CppName: SetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FilePath::*)(::StringW, ::StringW)>(&PowerUI::FilePath::SetPath)> {
  static const MethodInfo* get() {
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "SetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{url, relativeTo});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::SetPath
// Il2CppName: SetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FilePath::*)(::StringW, ::StringW, bool)>(&PowerUI::FilePath::SetPath)> {
  static const MethodInfo* get() {
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* useResolution = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "SetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{url, relativeTo, useResolution});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::reload
// Il2CppName: reload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FilePath::*)()>(&PowerUI::FilePath::reload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "reload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::assign
// Il2CppName: assign
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FilePath::*)(::StringW)>(&PowerUI::FilePath::assign)> {
  static const MethodInfo* get() {
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "assign", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{url});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::replace
// Il2CppName: replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FilePath::*)(::StringW)>(&PowerUI::FilePath::replace)> {
  static const MethodInfo* get() {
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{url});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_Handler
// Il2CppName: get_Handler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::FileProtocol* (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_Handler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_Handler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_Filename
// Il2CppName: get_Filename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_Filename)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_Filename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_File
// Il2CppName: get_File
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_File)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_File", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::set_File
// Il2CppName: set_File
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FilePath::*)(::StringW)>(&PowerUI::FilePath::set_File)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "set_File", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_Filetype
// Il2CppName: get_Filetype
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_Filetype)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_Filetype", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_Directory
// Il2CppName: get_Directory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_Directory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_Directory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_Path
// Il2CppName: get_Path
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_Path)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_Path", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_host
// Il2CppName: get_host
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_host)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_host", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_hostname
// Il2CppName: get_hostname
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_hostname)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_hostname", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_port
// Il2CppName: get_port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_port)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_href
// Il2CppName: get_href
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_href)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_href", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_basepath
// Il2CppName: get_basepath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_basepath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_basepath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::set_basepath
// Il2CppName: set_basepath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FilePath::*)(::StringW)>(&PowerUI::FilePath::set_basepath)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "set_basepath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_target
// Il2CppName: get_target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_target)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::set_target
// Il2CppName: set_target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FilePath::*)(::StringW)>(&PowerUI::FilePath::set_target)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "set_target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_protocol
// Il2CppName: get_protocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_protocol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_protocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_hash
// Il2CppName: get_hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_hash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_pathname
// Il2CppName: get_pathname
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_pathname)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_pathname", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_file
// Il2CppName: get_file
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_file)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_file", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_searchParams
// Il2CppName: get_searchParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_searchParams)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_searchParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::LoadUrlString
// Il2CppName: LoadUrlString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&PowerUI::FilePath::LoadUrlString)> {
  static const MethodInfo* get() {
    static auto* getString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* set = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "LoadUrlString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{getString, set});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_search
// Il2CppName: get_search
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_search)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_search", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_fullAccess
// Il2CppName: get_fullAccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_fullAccess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_fullAccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::get_web
// Il2CppName: get_web
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::FilePath::*)()>(&PowerUI::FilePath::get_web)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "get_web", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::GetProtocol
// Il2CppName: GetProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::FileProtocol* (PowerUI::FilePath::*)()>(&PowerUI::FilePath::GetProtocol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "GetProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FilePath::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::FilePath::*)()>(&PowerUI::FilePath::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FilePath*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
