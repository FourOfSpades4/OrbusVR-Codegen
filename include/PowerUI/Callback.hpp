// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Callback
  class Callback;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Callback);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Callback*, "PowerUI", "Callback");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Callback
  // [TokenAttribute] Offset: FFFFFFFF
  class Callback : public ::Il2CppObject {
    public:
    public:
    // public PowerUI.Callback NextCallback
    // Size: 0x8
    // Offset: 0x10
    ::PowerUI::Callback* NextCallback;
    // Field size check
    static_assert(sizeof(::PowerUI::Callback*) == 0x8);
    public:
    // Creating conversion operator: operator ::PowerUI::Callback*
    constexpr operator ::PowerUI::Callback*() const noexcept {
      return NextCallback;
    }
    // Get instance field reference: public PowerUI.Callback NextCallback
    [[deprecated("Use field access instead!")]] ::PowerUI::Callback*& dyn_NextCallback();
    // public System.Void Go()
    // Offset: 0xEBB390
    void Go();
    // static public System.Boolean get_WillRunImmediately()
    // Offset: 0xEBB490
    static bool get_WillRunImmediately();
    // static public System.Boolean get_WillDelay()
    // Offset: 0xEBB4F0
    static bool get_WillDelay();
    // public System.Void OnRun()
    // Offset: 0xEBB550
    void OnRun();
    // public System.Void .ctor()
    // Offset: 0xEBB554
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Callback* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Callback::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Callback*, creationType>()));
    }
  }; // PowerUI.Callback
  #pragma pack(pop)
  static check_size<sizeof(Callback), 16 + sizeof(::PowerUI::Callback*)> __PowerUI_CallbackSizeCheck;
  static_assert(sizeof(Callback) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Callback::Go
// Il2CppName: Go
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Callback::*)()>(&PowerUI::Callback::Go)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Callback*), "Go", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Callback::get_WillRunImmediately
// Il2CppName: get_WillRunImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&PowerUI::Callback::get_WillRunImmediately)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Callback*), "get_WillRunImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Callback::get_WillDelay
// Il2CppName: get_WillDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&PowerUI::Callback::get_WillDelay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Callback*), "get_WillDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Callback::OnRun
// Il2CppName: OnRun
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Callback::*)()>(&PowerUI::Callback::OnRun)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Callback*), "OnRun", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Callback::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
