// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Nitro.Void
#include "Nitro/Void.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Timers
namespace System::Timers {
  // Forward declaring type: Timer
  class Timer;
  // Forward declaring type: ElapsedEventArgs
  class ElapsedEventArgs;
}
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: OnUITimer
  class OnUITimer;
}
// Forward declaring namespace: Nitro
namespace Nitro {
  // Forward declaring type: DynamicMethod`1<T>
  template<typename T>
  class DynamicMethod_1;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: UITimer
  class UITimer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::UITimer);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::UITimer*, "PowerUI", "UITimer");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.UITimer
  // [TokenAttribute] Offset: FFFFFFFF
  class UITimer : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean OneOff
    // Size: 0x1
    // Offset: 0x10
    bool OneOff;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: OneOff and: InternalTimer
    char __padding0[0x7] = {};
    // public System.Timers.Timer InternalTimer
    // Size: 0x8
    // Offset: 0x18
    ::System::Timers::Timer* InternalTimer;
    // Field size check
    static_assert(sizeof(::System::Timers::Timer*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADEE5C
    // private PowerUI.OnUITimer OnComplete
    // Size: 0x8
    // Offset: 0x20
    ::PowerUI::OnUITimer* OnComplete;
    // Field size check
    static_assert(sizeof(::PowerUI::OnUITimer*) == 0x8);
    // public Nitro.DynamicMethod`1<Nitro.Void> Callback
    // Size: 0x8
    // Offset: 0x28
    ::Nitro::DynamicMethod_1<::Nitro::Void>* Callback;
    // Field size check
    static_assert(sizeof(::Nitro::DynamicMethod_1<::Nitro::Void>*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean OneOff
    [[deprecated("Use field access instead!")]] bool& dyn_OneOff();
    // Get instance field reference: public System.Timers.Timer InternalTimer
    [[deprecated("Use field access instead!")]] ::System::Timers::Timer*& dyn_InternalTimer();
    // Get instance field reference: private PowerUI.OnUITimer OnComplete
    [[deprecated("Use field access instead!")]] ::PowerUI::OnUITimer*& dyn_OnComplete();
    // Get instance field reference: public Nitro.DynamicMethod`1<Nitro.Void> Callback
    [[deprecated("Use field access instead!")]] ::Nitro::DynamicMethod_1<::Nitro::Void>*& dyn_Callback();
    // public System.Void add_OnComplete(PowerUI.OnUITimer value)
    // Offset: 0xE1922C
    void add_OnComplete(::PowerUI::OnUITimer* value);
    // public System.Void remove_OnComplete(PowerUI.OnUITimer value)
    // Offset: 0xE19318
    void remove_OnComplete(::PowerUI::OnUITimer* value);
    // public System.Void .ctor(System.Boolean oneOff, System.Int32 interval, Nitro.DynamicMethod`1<Nitro.Void> callback)
    // Offset: 0xE189F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UITimer* New_ctor(bool oneOff, int interval, ::Nitro::DynamicMethod_1<::Nitro::Void>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::UITimer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UITimer*, creationType>(oneOff, interval, callback)));
    }
    // public System.Void .ctor(System.Boolean oneOff, System.Int32 interval, PowerUI.OnUITimer callback)
    // Offset: 0xE19574
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UITimer* New_ctor(bool oneOff, int interval, ::PowerUI::OnUITimer* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::UITimer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UITimer*, creationType>(oneOff, interval, callback)));
    }
    // private System.Void Setup(System.Boolean oneOff, System.Int32 interval)
    // Offset: 0xE19404
    void Setup(bool oneOff, int interval);
    // public System.Void Stop()
    // Offset: 0xE18AF4
    void Stop();
    // private System.Void Elapsed(System.Object sender, System.Timers.ElapsedEventArgs e)
    // Offset: 0xE195C4
    void Elapsed(::Il2CppObject* sender, ::System::Timers::ElapsedEventArgs* e);
  }; // PowerUI.UITimer
  #pragma pack(pop)
  static check_size<sizeof(UITimer), 40 + sizeof(::Nitro::DynamicMethod_1<::Nitro::Void>*)> __PowerUI_UITimerSizeCheck;
  static_assert(sizeof(UITimer) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::UITimer::add_OnComplete
// Il2CppName: add_OnComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UITimer::*)(::PowerUI::OnUITimer*)>(&PowerUI::UITimer::add_OnComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnUITimer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UITimer*), "add_OnComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::UITimer::remove_OnComplete
// Il2CppName: remove_OnComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UITimer::*)(::PowerUI::OnUITimer*)>(&PowerUI::UITimer::remove_OnComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnUITimer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UITimer*), "remove_OnComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::UITimer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::UITimer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::UITimer::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UITimer::*)(bool, int)>(&PowerUI::UITimer::Setup)> {
  static const MethodInfo* get() {
    static auto* oneOff = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* interval = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UITimer*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oneOff, interval});
  }
};
// Writing MetadataGetter for method: PowerUI::UITimer::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UITimer::*)()>(&PowerUI::UITimer::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UITimer*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UITimer::Elapsed
// Il2CppName: Elapsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UITimer::*)(::Il2CppObject*, ::System::Timers::ElapsedEventArgs*)>(&PowerUI::UITimer::Elapsed)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Timers", "ElapsedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UITimer*), "Elapsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, e});
  }
};
