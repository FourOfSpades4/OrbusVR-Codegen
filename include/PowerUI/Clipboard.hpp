// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Clipboard
  class Clipboard;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Clipboard);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Clipboard*, "PowerUI", "Clipboard");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Clipboard
  // [TokenAttribute] Offset: FFFFFFFF
  class Clipboard : public ::Il2CppObject {
    public:
    // static public System.String Paste()
    // Offset: 0xEBF820
    static ::StringW Paste();
    // static public System.Void Copy(System.String text)
    // Offset: 0xEBF8E8
    static void Copy(::StringW text);
  }; // PowerUI.Clipboard
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Clipboard::Paste
// Il2CppName: Paste
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&PowerUI::Clipboard::Paste)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Clipboard*), "Paste", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Clipboard::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&PowerUI::Clipboard::Copy)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Clipboard*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
