// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.FilterMode
#include "UnityEngine/FilterMode.hpp"
// Including type: PowerUI.RenderMode
#include "PowerUI/RenderMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: TransformationStack
  class TransformationStack;
  // Forward declaring type: UIBatch
  class UIBatch;
  // Forward declaring type: BoxRegion
  class BoxRegion;
  // Forward declaring type: Document
  class Document;
  // Forward declaring type: WorldUI
  class WorldUI;
  // Forward declaring type: InputMode
  struct InputMode;
  // Forward declaring type: Element
  class Element;
}
// Forward declaring namespace: PowerUI::Css
namespace PowerUI::Css {
  // Forward declaring type: ComputedStyle
  class ComputedStyle;
  // Forward declaring type: ElementStyle
  class ElementStyle;
  // Forward declaring type: DisplayableProperty
  class DisplayableProperty;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Vector3
  struct Vector3;
}
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: TextureAtlas
  class TextureAtlas;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Renderman
  class Renderman;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Renderman);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Renderman*, "PowerUI", "Renderman");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0xF4
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Renderman
  // [TokenAttribute] Offset: FFFFFFFF
  class Renderman : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 PenX
    // Size: 0x4
    // Offset: 0x10
    int PenX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PenY
    // Size: 0x4
    // Offset: 0x14
    int PenY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 LineHeight
    // Size: 0x4
    // Offset: 0x18
    int LineHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single Depth
    // Size: 0x4
    // Offset: 0x1C
    float Depth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single MaxDepth
    // Size: 0x4
    // Offset: 0x20
    float MaxDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean DepthUsed
    // Size: 0x1
    // Offset: 0x24
    bool DepthUsed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: DepthUsed and: Transformations
    char __padding5[0x3] = {};
    // public PowerUI.TransformationStack Transformations
    // Size: 0x8
    // Offset: 0x28
    ::PowerUI::TransformationStack* Transformations;
    // Field size check
    static_assert(sizeof(::PowerUI::TransformationStack*) == 0x8);
    // public PowerUI.Css.ComputedStyle LastOnLine
    // Size: 0x8
    // Offset: 0x30
    ::PowerUI::Css::ComputedStyle* LastOnLine;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::ComputedStyle*) == 0x8);
    // public PowerUI.Css.ComputedStyle FirstOnLine
    // Size: 0x8
    // Offset: 0x38
    ::PowerUI::Css::ComputedStyle* FirstOnLine;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::ComputedStyle*) == 0x8);
    // public System.Boolean GoingLeftwards
    // Size: 0x1
    // Offset: 0x40
    bool GoingLeftwards;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: GoingLeftwards and: CurrentBatch
    char __padding9[0x7] = {};
    // public PowerUI.UIBatch CurrentBatch
    // Size: 0x8
    // Offset: 0x48
    ::PowerUI::UIBatch* CurrentBatch;
    // Field size check
    static_assert(sizeof(::PowerUI::UIBatch*) == 0x8);
    // public PowerUI.Css.ComputedStyle LastPacked
    // Size: 0x8
    // Offset: 0x50
    ::PowerUI::Css::ComputedStyle* LastPacked;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::ComputedStyle*) == 0x8);
    // public PowerUI.Css.ComputedStyle FirstPacked
    // Size: 0x8
    // Offset: 0x58
    ::PowerUI::Css::ComputedStyle* FirstPacked;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::ComputedStyle*) == 0x8);
    // public PowerUI.BoxRegion ClippingBoundary
    // Size: 0x8
    // Offset: 0x60
    ::PowerUI::BoxRegion* ClippingBoundary;
    // Field size check
    static_assert(sizeof(::PowerUI::BoxRegion*) == 0x8);
    // public System.Int32 BatchDepth
    // Size: 0x4
    // Offset: 0x68
    int BatchDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 LineStart
    // Size: 0x4
    // Offset: 0x6C
    int LineStart;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.List`1<PowerUI.Css.ComputedStyle> ActiveFloats
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::PowerUI::Css::ComputedStyle*>* ActiveFloats;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PowerUI::Css::ComputedStyle*>*) == 0x8);
    // public System.Int32 MaxX
    // Size: 0x4
    // Offset: 0x78
    int MaxX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Baseline
    // Size: 0x4
    // Offset: 0x7C
    int Baseline;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 LargestLineWidth
    // Size: 0x4
    // Offset: 0x80
    int LargestLineWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single FontAliasingTop
    // Size: 0x4
    // Offset: 0x84
    float FontAliasingTop;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single FontAliasingBottom
    // Size: 0x4
    // Offset: 0x88
    float FontAliasingBottom;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 RenderLayer
    // Size: 0x4
    // Offset: 0x8C
    int RenderLayer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean LayoutOccuring
    // Size: 0x1
    // Offset: 0x90
    bool LayoutOccuring;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: LayoutOccuring and: LastBatch
    char __padding23[0x7] = {};
    // public PowerUI.UIBatch LastBatch
    // Size: 0x8
    // Offset: 0x98
    ::PowerUI::UIBatch* LastBatch;
    // Field size check
    static_assert(sizeof(::PowerUI::UIBatch*) == 0x8);
    // public PowerUI.UIBatch FirstBatch
    // Size: 0x8
    // Offset: 0xA0
    ::PowerUI::UIBatch* FirstBatch;
    // Field size check
    static_assert(sizeof(::PowerUI::UIBatch*) == 0x8);
    // public PowerUI.Document RootDocument
    // Size: 0x8
    // Offset: 0xA8
    ::PowerUI::Document* RootDocument;
    // Field size check
    static_assert(sizeof(::PowerUI::Document*) == 0x8);
    // public System.Single DepthResolution
    // Size: 0x4
    // Offset: 0xB0
    float DepthResolution;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean DoLayout
    // Size: 0x1
    // Offset: 0xB4
    bool DoLayout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: DoLayout and: CustomShader
    char __padding28[0x3] = {};
    // public UnityEngine.Shader CustomShader
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Shader* CustomShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // public PowerUI.Css.ElementStyle StylesToPaint
    // Size: 0x8
    // Offset: 0xC0
    ::PowerUI::Css::ElementStyle* StylesToPaint;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::ElementStyle*) == 0x8);
    // public PowerUI.Css.ElementStyle StylesToRecompute
    // Size: 0x8
    // Offset: 0xC8
    ::PowerUI::Css::ElementStyle* StylesToRecompute;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::ElementStyle*) == 0x8);
    // public UnityEngine.GameObject Node
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::GameObject* Node;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean ScreenClip
    // Size: 0x1
    // Offset: 0xD8
    bool ScreenClip;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ScreenClip and: InWorldUI
    char __padding33[0x7] = {};
    // public PowerUI.WorldUI InWorldUI
    // Size: 0x8
    // Offset: 0xE0
    ::PowerUI::WorldUI* InWorldUI;
    // Field size check
    static_assert(sizeof(::PowerUI::WorldUI*) == 0x8);
    // public UnityEngine.Transform PhysicsModeCollider
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Transform* PhysicsModeCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.FilterMode ImageFilterMode
    // Size: 0x4
    // Offset: 0xF0
    ::UnityEngine::FilterMode ImageFilterMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::FilterMode) == 0x4);
    public:
    // Get static field: static private PowerUI.RenderMode UIRenderMode
    static ::PowerUI::RenderMode _get_UIRenderMode();
    // Set static field: static private PowerUI.RenderMode UIRenderMode
    static void _set_UIRenderMode(::PowerUI::RenderMode value);
    // Get instance field reference: public System.Int32 PenX
    [[deprecated("Use field access instead!")]] int& dyn_PenX();
    // Get instance field reference: public System.Int32 PenY
    [[deprecated("Use field access instead!")]] int& dyn_PenY();
    // Get instance field reference: public System.Int32 LineHeight
    [[deprecated("Use field access instead!")]] int& dyn_LineHeight();
    // Get instance field reference: public System.Single Depth
    [[deprecated("Use field access instead!")]] float& dyn_Depth();
    // Get instance field reference: public System.Single MaxDepth
    [[deprecated("Use field access instead!")]] float& dyn_MaxDepth();
    // Get instance field reference: public System.Boolean DepthUsed
    [[deprecated("Use field access instead!")]] bool& dyn_DepthUsed();
    // Get instance field reference: public PowerUI.TransformationStack Transformations
    [[deprecated("Use field access instead!")]] ::PowerUI::TransformationStack*& dyn_Transformations();
    // Get instance field reference: public PowerUI.Css.ComputedStyle LastOnLine
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::ComputedStyle*& dyn_LastOnLine();
    // Get instance field reference: public PowerUI.Css.ComputedStyle FirstOnLine
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::ComputedStyle*& dyn_FirstOnLine();
    // Get instance field reference: public System.Boolean GoingLeftwards
    [[deprecated("Use field access instead!")]] bool& dyn_GoingLeftwards();
    // Get instance field reference: public PowerUI.UIBatch CurrentBatch
    [[deprecated("Use field access instead!")]] ::PowerUI::UIBatch*& dyn_CurrentBatch();
    // Get instance field reference: public PowerUI.Css.ComputedStyle LastPacked
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::ComputedStyle*& dyn_LastPacked();
    // Get instance field reference: public PowerUI.Css.ComputedStyle FirstPacked
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::ComputedStyle*& dyn_FirstPacked();
    // Get instance field reference: public PowerUI.BoxRegion ClippingBoundary
    [[deprecated("Use field access instead!")]] ::PowerUI::BoxRegion*& dyn_ClippingBoundary();
    // Get instance field reference: public System.Int32 BatchDepth
    [[deprecated("Use field access instead!")]] int& dyn_BatchDepth();
    // Get instance field reference: public System.Int32 LineStart
    [[deprecated("Use field access instead!")]] int& dyn_LineStart();
    // Get instance field reference: private System.Collections.Generic.List`1<PowerUI.Css.ComputedStyle> ActiveFloats
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PowerUI::Css::ComputedStyle*>*& dyn_ActiveFloats();
    // Get instance field reference: public System.Int32 MaxX
    [[deprecated("Use field access instead!")]] int& dyn_MaxX();
    // Get instance field reference: public System.Int32 Baseline
    [[deprecated("Use field access instead!")]] int& dyn_Baseline();
    // Get instance field reference: public System.Int32 LargestLineWidth
    [[deprecated("Use field access instead!")]] int& dyn_LargestLineWidth();
    // Get instance field reference: public System.Single FontAliasingTop
    [[deprecated("Use field access instead!")]] float& dyn_FontAliasingTop();
    // Get instance field reference: public System.Single FontAliasingBottom
    [[deprecated("Use field access instead!")]] float& dyn_FontAliasingBottom();
    // Get instance field reference: public System.Int32 RenderLayer
    [[deprecated("Use field access instead!")]] int& dyn_RenderLayer();
    // Get instance field reference: public System.Boolean LayoutOccuring
    [[deprecated("Use field access instead!")]] bool& dyn_LayoutOccuring();
    // Get instance field reference: public PowerUI.UIBatch LastBatch
    [[deprecated("Use field access instead!")]] ::PowerUI::UIBatch*& dyn_LastBatch();
    // Get instance field reference: public PowerUI.UIBatch FirstBatch
    [[deprecated("Use field access instead!")]] ::PowerUI::UIBatch*& dyn_FirstBatch();
    // Get instance field reference: public PowerUI.Document RootDocument
    [[deprecated("Use field access instead!")]] ::PowerUI::Document*& dyn_RootDocument();
    // Get instance field reference: public System.Single DepthResolution
    [[deprecated("Use field access instead!")]] float& dyn_DepthResolution();
    // Get instance field reference: public System.Boolean DoLayout
    [[deprecated("Use field access instead!")]] bool& dyn_DoLayout();
    // Get instance field reference: public UnityEngine.Shader CustomShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_CustomShader();
    // Get instance field reference: public PowerUI.Css.ElementStyle StylesToPaint
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::ElementStyle*& dyn_StylesToPaint();
    // Get instance field reference: public PowerUI.Css.ElementStyle StylesToRecompute
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::ElementStyle*& dyn_StylesToRecompute();
    // Get instance field reference: public UnityEngine.GameObject Node
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_Node();
    // Get instance field reference: public System.Boolean ScreenClip
    [[deprecated("Use field access instead!")]] bool& dyn_ScreenClip();
    // Get instance field reference: public PowerUI.WorldUI InWorldUI
    [[deprecated("Use field access instead!")]] ::PowerUI::WorldUI*& dyn_InWorldUI();
    // Get instance field reference: public UnityEngine.Transform PhysicsModeCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_PhysicsModeCollider();
    // Get instance field reference: private UnityEngine.FilterMode ImageFilterMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::FilterMode& dyn_ImageFilterMode();
    // public System.Void .ctor(PowerUI.WorldUI worldUI)
    // Offset: 0x1769918
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Renderman* New_ctor(::PowerUI::WorldUI* worldUI) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Renderman::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Renderman*, creationType>(worldUI)));
    }
    // public System.Void .ctor()
    // Offset: 0x1769954
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Renderman* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Renderman::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Renderman*, creationType>()));
    }
    // public System.Void .ctor(System.Boolean aot)
    // Offset: 0x1769A9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Renderman* New_ctor(bool aot) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Renderman::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Renderman*, creationType>(aot)));
    }
    // public System.Boolean get_RenderingInWorld()
    // Offset: 0x1769B18
    bool get_RenderingInWorld();
    // public UnityEngine.GameObject get_Parent()
    // Offset: 0x1769B28
    ::UnityEngine::GameObject* get_Parent();
    // public System.Void SetInputMode(PowerUI.InputMode mode)
    // Offset: 0x1769BD0
    void SetInputMode(::PowerUI::InputMode mode);
    // public PowerUI.RenderMode get_RenderMode()
    // Offset: 0x176A0B4
    ::PowerUI::RenderMode get_RenderMode();
    // public System.Void set_RenderMode(PowerUI.RenderMode value)
    // Offset: 0x176A11C
    void set_RenderMode(::PowerUI::RenderMode value);
    // public UnityEngine.FilterMode get_FilterMode()
    // Offset: 0x176A1A8
    ::UnityEngine::FilterMode get_FilterMode();
    // public System.Void set_FilterMode(UnityEngine.FilterMode value)
    // Offset: 0x176A1B0
    void set_FilterMode(::UnityEngine::FilterMode value);
    // public UnityEngine.FilterMode get_TextFilterMode()
    // Offset: 0x176A260
    ::UnityEngine::FilterMode get_TextFilterMode();
    // public System.Void set_TextFilterMode(UnityEngine.FilterMode value)
    // Offset: 0x176A2DC
    void set_TextFilterMode(::UnityEngine::FilterMode value);
    // public System.Void RelocateCollider()
    // Offset: 0x1769F58
    void RelocateCollider();
    // public System.Void IncreaseDepth()
    // Offset: 0x176A360
    void IncreaseDepth();
    // public System.Void Clear()
    // Offset: 0x176A380
    void Clear();
    // public System.Void Destroy()
    // Offset: 0x176A5B4
    void Destroy();
    // public System.Void SetupBatch(PowerUI.Css.DisplayableProperty property, Blaze.TextureAtlas graphics, Blaze.TextureAtlas font)
    // Offset: 0x176A5B8
    void SetupBatch(::PowerUI::Css::DisplayableProperty* property, ::Blaze::TextureAtlas* graphics, ::Blaze::TextureAtlas* font);
    // public System.Void AddBatch(PowerUI.UIBatch batch)
    // Offset: 0x176AA64
    void AddBatch(::PowerUI::UIBatch* batch);
    // public System.Void BeginLinePack(PowerUI.Element element)
    // Offset: 0x176ACF8
    void BeginLinePack(::PowerUI::Element* element);
    // public System.Void HorizontalAlign(PowerUI.Element element)
    // Offset: 0x176ADFC
    void HorizontalAlign(::PowerUI::Element* element);
    // private System.Void AlignLine(PowerUI.Css.ComputedStyle first, PowerUI.Css.ComputedStyle last, System.Int32 lineSpace, System.Int32 elementCount, System.Int32 lineLength, PowerUI.Css.ComputedStyle parent)
    // Offset: 0x176B11C
    void AlignLine(::PowerUI::Css::ComputedStyle* first, ::PowerUI::Css::ComputedStyle* last, int lineSpace, int elementCount, int lineLength, ::PowerUI::Css::ComputedStyle* parent);
    // public System.Void EndLinePack(PowerUI.Element element)
    // Offset: 0x176B2EC
    void EndLinePack(::PowerUI::Element* element);
    // public System.Void CompleteLine(PowerUI.Css.ComputedStyle parentStyle)
    // Offset: 0x176B480
    void CompleteLine(::PowerUI::Css::ComputedStyle* parentStyle);
    // public System.Void PackOnLine(PowerUI.Element element)
    // Offset: 0x176B664
    void PackOnLine(::PowerUI::Element* element);
    // private System.Void AddToLine(PowerUI.Css.ComputedStyle style, PowerUI.Element parentNode)
    // Offset: 0x176B790
    void AddToLine(::PowerUI::Css::ComputedStyle* style, ::PowerUI::Element* parentNode);
    // public System.Boolean IsInvisible(System.Int32 left, System.Int32 top, System.Int32 width, System.Int32 height)
    // Offset: 0x176BD00
    bool IsInvisible(int left, int top, int width, int height);
    // public System.Void SetBoundary(PowerUI.Css.ComputedStyle style)
    // Offset: 0x176BDCC
    void SetBoundary(::PowerUI::Css::ComputedStyle* style);
    // public System.Void ResetBoundary()
    // Offset: 0x176BFD8
    void ResetBoundary();
    // public System.Void Reset()
    // Offset: 0x176C0EC
    void Reset();
    // public System.Void set_Layer(System.Int32 value)
    // Offset: 0x176C21C
    void set_Layer(int value);
    // public System.Int32 get_Layer()
    // Offset: 0x176C294
    int get_Layer();
    // public System.Void RenderWithCamera(System.Int32 id)
    // Offset: 0x176C258
    void RenderWithCamera(int id);
    // public System.Void RequestLayout()
    // Offset: 0x176A19C
    void RequestLayout();
    // public System.Void RequestPaint(PowerUI.Css.ElementStyle style)
    // Offset: 0x176C2E4
    void RequestPaint(::PowerUI::Css::ElementStyle* style);
    // public System.Void Update()
    // Offset: 0x176C344
    void Update();
    // public System.Void Layout()
    // Offset: 0x176C3D0
    void Layout();
    // public UnityEngine.Vector3 PixelToWorldUnit(System.Single px, System.Single py, System.Single depth)
    // Offset: 0x17644AC
    ::UnityEngine::Vector3 PixelToWorldUnit(float px, float py, float depth);
    // static private System.Void .cctor()
    // Offset: 0x176C668
    static void _cctor();
  }; // PowerUI.Renderman
  #pragma pack(pop)
  static check_size<sizeof(Renderman), 240 + sizeof(::UnityEngine::FilterMode)> __PowerUI_RendermanSizeCheck;
  static_assert(sizeof(Renderman) == 0xF4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Renderman::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Renderman::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Renderman::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::Renderman::get_RenderingInWorld
// Il2CppName: get_RenderingInWorld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Renderman::*)()>(&PowerUI::Renderman::get_RenderingInWorld)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "get_RenderingInWorld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::get_Parent
// Il2CppName: get_Parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (PowerUI::Renderman::*)()>(&PowerUI::Renderman::get_Parent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "get_Parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::SetInputMode
// Il2CppName: SetInputMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(::PowerUI::InputMode)>(&PowerUI::Renderman::SetInputMode)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("PowerUI", "InputMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "SetInputMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::get_RenderMode
// Il2CppName: get_RenderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::RenderMode (PowerUI::Renderman::*)()>(&PowerUI::Renderman::get_RenderMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "get_RenderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::set_RenderMode
// Il2CppName: set_RenderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(::PowerUI::RenderMode)>(&PowerUI::Renderman::set_RenderMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "RenderMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "set_RenderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::get_FilterMode
// Il2CppName: get_FilterMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::FilterMode (PowerUI::Renderman::*)()>(&PowerUI::Renderman::get_FilterMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "get_FilterMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::set_FilterMode
// Il2CppName: set_FilterMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(::UnityEngine::FilterMode)>(&PowerUI::Renderman::set_FilterMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "set_FilterMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::get_TextFilterMode
// Il2CppName: get_TextFilterMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::FilterMode (PowerUI::Renderman::*)()>(&PowerUI::Renderman::get_TextFilterMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "get_TextFilterMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::set_TextFilterMode
// Il2CppName: set_TextFilterMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(::UnityEngine::FilterMode)>(&PowerUI::Renderman::set_TextFilterMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "set_TextFilterMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::RelocateCollider
// Il2CppName: RelocateCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)()>(&PowerUI::Renderman::RelocateCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "RelocateCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::IncreaseDepth
// Il2CppName: IncreaseDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)()>(&PowerUI::Renderman::IncreaseDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "IncreaseDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)()>(&PowerUI::Renderman::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)()>(&PowerUI::Renderman::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::SetupBatch
// Il2CppName: SetupBatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(::PowerUI::Css::DisplayableProperty*, ::Blaze::TextureAtlas*, ::Blaze::TextureAtlas*)>(&PowerUI::Renderman::SetupBatch)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "DisplayableProperty")->byval_arg;
    static auto* graphics = &::il2cpp_utils::GetClassFromName("Blaze", "TextureAtlas")->byval_arg;
    static auto* font = &::il2cpp_utils::GetClassFromName("Blaze", "TextureAtlas")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "SetupBatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, graphics, font});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::AddBatch
// Il2CppName: AddBatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(::PowerUI::UIBatch*)>(&PowerUI::Renderman::AddBatch)> {
  static const MethodInfo* get() {
    static auto* batch = &::il2cpp_utils::GetClassFromName("PowerUI", "UIBatch")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "AddBatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{batch});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::BeginLinePack
// Il2CppName: BeginLinePack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(::PowerUI::Element*)>(&PowerUI::Renderman::BeginLinePack)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "BeginLinePack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::HorizontalAlign
// Il2CppName: HorizontalAlign
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(::PowerUI::Element*)>(&PowerUI::Renderman::HorizontalAlign)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "HorizontalAlign", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::AlignLine
// Il2CppName: AlignLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(::PowerUI::Css::ComputedStyle*, ::PowerUI::Css::ComputedStyle*, int, int, int, ::PowerUI::Css::ComputedStyle*)>(&PowerUI::Renderman::AlignLine)> {
  static const MethodInfo* get() {
    static auto* first = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    static auto* last = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    static auto* lineSpace = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elementCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lineLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "AlignLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{first, last, lineSpace, elementCount, lineLength, parent});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::EndLinePack
// Il2CppName: EndLinePack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(::PowerUI::Element*)>(&PowerUI::Renderman::EndLinePack)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "EndLinePack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::CompleteLine
// Il2CppName: CompleteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(::PowerUI::Css::ComputedStyle*)>(&PowerUI::Renderman::CompleteLine)> {
  static const MethodInfo* get() {
    static auto* parentStyle = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "CompleteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentStyle});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::PackOnLine
// Il2CppName: PackOnLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(::PowerUI::Element*)>(&PowerUI::Renderman::PackOnLine)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "PackOnLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::AddToLine
// Il2CppName: AddToLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(::PowerUI::Css::ComputedStyle*, ::PowerUI::Element*)>(&PowerUI::Renderman::AddToLine)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    static auto* parentNode = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "AddToLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style, parentNode});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::IsInvisible
// Il2CppName: IsInvisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Renderman::*)(int, int, int, int)>(&PowerUI::Renderman::IsInvisible)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* top = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "IsInvisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, top, width, height});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::SetBoundary
// Il2CppName: SetBoundary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(::PowerUI::Css::ComputedStyle*)>(&PowerUI::Renderman::SetBoundary)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "SetBoundary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::ResetBoundary
// Il2CppName: ResetBoundary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)()>(&PowerUI::Renderman::ResetBoundary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "ResetBoundary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)()>(&PowerUI::Renderman::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::set_Layer
// Il2CppName: set_Layer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(int)>(&PowerUI::Renderman::set_Layer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "set_Layer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::get_Layer
// Il2CppName: get_Layer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::Renderman::*)()>(&PowerUI::Renderman::get_Layer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "get_Layer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::RenderWithCamera
// Il2CppName: RenderWithCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(int)>(&PowerUI::Renderman::RenderWithCamera)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "RenderWithCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::RequestLayout
// Il2CppName: RequestLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)()>(&PowerUI::Renderman::RequestLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "RequestLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::RequestPaint
// Il2CppName: RequestPaint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)(::PowerUI::Css::ElementStyle*)>(&PowerUI::Renderman::RequestPaint)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ElementStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "RequestPaint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)()>(&PowerUI::Renderman::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::Layout
// Il2CppName: Layout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Renderman::*)()>(&PowerUI::Renderman::Layout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "Layout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::PixelToWorldUnit
// Il2CppName: PixelToWorldUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (PowerUI::Renderman::*)(float, float, float)>(&PowerUI::Renderman::PixelToWorldUnit)> {
  static const MethodInfo* get() {
    static auto* px = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* py = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), "PixelToWorldUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{px, py, depth});
  }
};
// Writing MetadataGetter for method: PowerUI::Renderman::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::Renderman::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Renderman*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
