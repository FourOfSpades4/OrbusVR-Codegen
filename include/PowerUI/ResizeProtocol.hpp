// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.ResourcesProtocol
#include "PowerUI/ResourcesProtocol.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: ImagePackage
  class ImagePackage;
  // Forward declaring type: FilePath
  class FilePath;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: ResizeProtocol
  class ResizeProtocol;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::ResizeProtocol);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::ResizeProtocol*, "PowerUI", "ResizeProtocol");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x11
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.ResizeProtocol
  // [TokenAttribute] Offset: FFFFFFFF
  class ResizeProtocol : public ::PowerUI::ResourcesProtocol {
    public:
    // public System.Void .ctor()
    // Offset: 0x176C66C
    // Implemented from: PowerUI.ResourcesProtocol
    // Base method: System.Void ResourcesProtocol::.ctor()
    // Base method: System.Void FileProtocol::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ResizeProtocol* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::ResizeProtocol::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ResizeProtocol*, creationType>()));
    }
    // public override System.String[] GetNames()
    // Offset: 0x176C69C
    // Implemented from: PowerUI.ResourcesProtocol
    // Base method: System.String[] ResourcesProtocol::GetNames()
    ::ArrayW<::StringW> GetNames();
    // public override System.Void OnGetGraphic(PowerUI.ImagePackage package, PowerUI.FilePath path)
    // Offset: 0x176C74C
    // Implemented from: PowerUI.ResourcesProtocol
    // Base method: System.Void ResourcesProtocol::OnGetGraphic(PowerUI.ImagePackage package, PowerUI.FilePath path)
    void OnGetGraphic(::PowerUI::ImagePackage* package, ::PowerUI::FilePath* path);
  }; // PowerUI.ResizeProtocol
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::ResizeProtocol::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::ResizeProtocol::GetNames
// Il2CppName: GetNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (PowerUI::ResizeProtocol::*)()>(&PowerUI::ResizeProtocol::GetNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ResizeProtocol*), "GetNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ResizeProtocol::OnGetGraphic
// Il2CppName: OnGetGraphic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::ResizeProtocol::*)(::PowerUI::ImagePackage*, ::PowerUI::FilePath*)>(&PowerUI::ResizeProtocol::OnGetGraphic)> {
  static const MethodInfo* get() {
    static auto* package = &::il2cpp_utils::GetClassFromName("PowerUI", "ImagePackage")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("PowerUI", "FilePath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ResizeProtocol*), "OnGetGraphic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{package, path});
  }
};
