// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Text3D
  class Text3D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Text3D);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Text3D*, "PowerUI", "Text3D");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Text3D
  // [TokenAttribute] Offset: FFFFFFFF
  class Text3D : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Vector2[] UVs
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Vector2> UVs;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // public System.Int32[] Triangles
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> Triangles;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public UnityEngine.Color[] Colours
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Color> Colours;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // public UnityEngine.Vector3[] Normals
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Vector3> Normals;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public UnityEngine.Vector3[] Vertices
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Vector3> Vertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Vector2[] UVs
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_UVs();
    // Get instance field reference: public System.Int32[] Triangles
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_Triangles();
    // Get instance field reference: public UnityEngine.Color[] Colours
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn_Colours();
    // Get instance field reference: public UnityEngine.Vector3[] Normals
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_Normals();
    // Get instance field reference: public UnityEngine.Vector3[] Vertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_Vertices();
    // public UnityEngine.Mesh CreateMesh()
    // Offset: 0x1776DFC
    ::UnityEngine::Mesh* CreateMesh();
    // public System.Void CreateGameObject()
    // Offset: 0x1776F5C
    void CreateGameObject();
    // public System.Void .ctor()
    // Offset: 0x177709C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Text3D* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Text3D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Text3D*, creationType>()));
    }
  }; // PowerUI.Text3D
  #pragma pack(pop)
  static check_size<sizeof(Text3D), 48 + sizeof(::ArrayW<::UnityEngine::Vector3>)> __PowerUI_Text3DSizeCheck;
  static_assert(sizeof(Text3D) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Text3D::CreateMesh
// Il2CppName: CreateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (PowerUI::Text3D::*)()>(&PowerUI::Text3D::CreateMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Text3D*), "CreateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Text3D::CreateGameObject
// Il2CppName: CreateGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Text3D::*)()>(&PowerUI::Text3D::CreateGameObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Text3D*), "CreateGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Text3D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
