// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: FilePath
  class FilePath;
  // Forward declaring type: OnTextReady
  class OnTextReady;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: TextPackage
  class TextPackage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::TextPackage);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::TextPackage*, "PowerUI", "TextPackage");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.TextPackage
  // [TokenAttribute] Offset: FFFFFFFF
  class TextPackage : public ::Il2CppObject {
    public:
    public:
    // public System.String Text
    // Size: 0x8
    // Offset: 0x10
    ::StringW Text;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Error
    // Size: 0x8
    // Offset: 0x18
    ::StringW Error;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public PowerUI.FilePath File
    // Size: 0x8
    // Offset: 0x20
    ::PowerUI::FilePath* File;
    // Field size check
    static_assert(sizeof(::PowerUI::FilePath*) == 0x8);
    // public System.String FileType
    // Size: 0x8
    // Offset: 0x28
    ::StringW FileType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Object ExtraData
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppObject* ExtraData;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADEE04
    // private PowerUI.OnTextReady TextReady
    // Size: 0x8
    // Offset: 0x38
    ::PowerUI::OnTextReady* TextReady;
    // Field size check
    static_assert(sizeof(::PowerUI::OnTextReady*) == 0x8);
    public:
    // Get instance field reference: public System.String Text
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Text();
    // Get instance field reference: public System.String Error
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Error();
    // Get instance field reference: public PowerUI.FilePath File
    [[deprecated("Use field access instead!")]] ::PowerUI::FilePath*& dyn_File();
    // Get instance field reference: public System.String FileType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_FileType();
    // Get instance field reference: public System.Object ExtraData
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_ExtraData();
    // Get instance field reference: private PowerUI.OnTextReady TextReady
    [[deprecated("Use field access instead!")]] ::PowerUI::OnTextReady*& dyn_TextReady();
    // public System.Void add_TextReady(PowerUI.OnTextReady value)
    // Offset: 0x1777C1C
    void add_TextReady(::PowerUI::OnTextReady* value);
    // public System.Void remove_TextReady(PowerUI.OnTextReady value)
    // Offset: 0x1777D08
    void remove_TextReady(::PowerUI::OnTextReady* value);
    // public System.Void .ctor(System.String src, System.String relativeTo)
    // Offset: 0x176ECE4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextPackage* New_ctor(::StringW src, ::StringW relativeTo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::TextPackage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextPackage*, creationType>(src, relativeTo)));
    }
    // public System.Void Get(PowerUI.OnTextReady textReady)
    // Offset: 0x176ED24
    void Get(::PowerUI::OnTextReady* textReady);
    // public System.String get_Url()
    // Offset: 0x1777EA4
    ::StringW get_Url();
    // private System.Void SetPath(System.String src, System.String relativeTo)
    // Offset: 0x1777DF4
    void SetPath(::StringW src, ::StringW relativeTo);
    // public System.Void GotText(System.String text)
    // Offset: 0x1777ED0
    void GotText(::StringW text);
    // public System.Void GotText(System.String text, System.String error)
    // Offset: 0x176EB2C
    void GotText(::StringW text, ::StringW error);
    // public System.Boolean get_Ok()
    // Offset: 0x1772744
    bool get_Ok();
    // public System.Boolean get_Errored()
    // Offset: 0x176EF80
    bool get_Errored();
  }; // PowerUI.TextPackage
  #pragma pack(pop)
  static check_size<sizeof(TextPackage), 56 + sizeof(::PowerUI::OnTextReady*)> __PowerUI_TextPackageSizeCheck;
  static_assert(sizeof(TextPackage) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::TextPackage::add_TextReady
// Il2CppName: add_TextReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextPackage::*)(::PowerUI::OnTextReady*)>(&PowerUI::TextPackage::add_TextReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnTextReady")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextPackage*), "add_TextReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::TextPackage::remove_TextReady
// Il2CppName: remove_TextReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextPackage::*)(::PowerUI::OnTextReady*)>(&PowerUI::TextPackage::remove_TextReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "OnTextReady")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextPackage*), "remove_TextReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::TextPackage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::TextPackage::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextPackage::*)(::PowerUI::OnTextReady*)>(&PowerUI::TextPackage::Get)> {
  static const MethodInfo* get() {
    static auto* textReady = &::il2cpp_utils::GetClassFromName("PowerUI", "OnTextReady")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextPackage*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textReady});
  }
};
// Writing MetadataGetter for method: PowerUI::TextPackage::get_Url
// Il2CppName: get_Url
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::TextPackage::*)()>(&PowerUI::TextPackage::get_Url)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextPackage*), "get_Url", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::TextPackage::SetPath
// Il2CppName: SetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextPackage::*)(::StringW, ::StringW)>(&PowerUI::TextPackage::SetPath)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextPackage*), "SetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, relativeTo});
  }
};
// Writing MetadataGetter for method: PowerUI::TextPackage::GotText
// Il2CppName: GotText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextPackage::*)(::StringW)>(&PowerUI::TextPackage::GotText)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextPackage*), "GotText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: PowerUI::TextPackage::GotText
// Il2CppName: GotText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextPackage::*)(::StringW, ::StringW)>(&PowerUI::TextPackage::GotText)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextPackage*), "GotText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, error});
  }
};
// Writing MetadataGetter for method: PowerUI::TextPackage::get_Ok
// Il2CppName: get_Ok
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::TextPackage::*)()>(&PowerUI::TextPackage::get_Ok)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextPackage*), "get_Ok", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::TextPackage::get_Errored
// Il2CppName: get_Errored
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::TextPackage::*)()>(&PowerUI::TextPackage::get_Errored)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextPackage*), "get_Errored", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
