// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: UIEvent
  class UIEvent;
  // Forward declaring type: Element
  class Element;
  // Forward declaring type: Document
  class Document;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Window
  class Window;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Window);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Window*, "PowerUI", "Window");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Window
  // [TokenAttribute] Offset: FFFFFFFF
  class Window : public ::Il2CppObject {
    public:
    public:
    // public PowerUI.Window top
    // Size: 0x8
    // Offset: 0x10
    ::PowerUI::Window* top;
    // Field size check
    static_assert(sizeof(::PowerUI::Window*) == 0x8);
    // public PowerUI.Window self
    // Size: 0x8
    // Offset: 0x18
    ::PowerUI::Window* self;
    // Field size check
    static_assert(sizeof(::PowerUI::Window*) == 0x8);
    // public PowerUI.UIEvent Event
    // Size: 0x8
    // Offset: 0x20
    ::PowerUI::UIEvent* Event;
    // Field size check
    static_assert(sizeof(::PowerUI::UIEvent*) == 0x8);
    // public PowerUI.Window parent
    // Size: 0x8
    // Offset: 0x28
    ::PowerUI::Window* parent;
    // Field size check
    static_assert(sizeof(::PowerUI::Window*) == 0x8);
    // public PowerUI.Element iframe
    // Size: 0x8
    // Offset: 0x30
    ::PowerUI::Element* iframe;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // public PowerUI.Document document
    // Size: 0x8
    // Offset: 0x38
    ::PowerUI::Document* document;
    // Field size check
    static_assert(sizeof(::PowerUI::Document*) == 0x8);
    public:
    // Get instance field reference: public PowerUI.Window top
    [[deprecated("Use field access instead!")]] ::PowerUI::Window*& dyn_top();
    // Get instance field reference: public PowerUI.Window self
    [[deprecated("Use field access instead!")]] ::PowerUI::Window*& dyn_self();
    // Get instance field reference: public PowerUI.UIEvent Event
    [[deprecated("Use field access instead!")]] ::PowerUI::UIEvent*& dyn_Event();
    // Get instance field reference: public PowerUI.Window parent
    [[deprecated("Use field access instead!")]] ::PowerUI::Window*& dyn_parent();
    // Get instance field reference: public PowerUI.Element iframe
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_iframe();
    // Get instance field reference: public PowerUI.Document document
    [[deprecated("Use field access instead!")]] ::PowerUI::Document*& dyn_document();
    // public System.Void .ctor()
    // Offset: 0xE1ADFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Window* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Window::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Window*, creationType>()));
    }
  }; // PowerUI.Window
  #pragma pack(pop)
  static check_size<sizeof(Window), 56 + sizeof(::PowerUI::Document*)> __PowerUI_WindowSizeCheck;
  static_assert(sizeof(Window) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Window::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
