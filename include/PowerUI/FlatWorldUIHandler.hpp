// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: FlatWorldUIHandler
  class FlatWorldUIHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::FlatWorldUIHandler);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::FlatWorldUIHandler*, "PowerUI", "FlatWorldUIHandler");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.FlatWorldUIHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class FlatWorldUIHandler : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Camera Camera
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Camera* Camera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // public UnityEngine.Rect Location
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Rect Location;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // public UnityEngine.Texture2D Output
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Texture2D* Output;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public System.Single CurrentRate
    // Size: 0x4
    // Offset: 0x38
    float CurrentRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean Redraw
    // Size: 0x1
    // Offset: 0x3C
    bool Redraw;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Redraw and: Aspect
    char __padding4[0x3] = {};
    // public System.Single Aspect
    // Size: 0x4
    // Offset: 0x40
    float Aspect;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Single MaximumRate
    static constexpr const float MaximumRate = 0.125;
    // Get static field: static public System.Single MaximumRate
    static float _get_MaximumRate();
    // Set static field: static public System.Single MaximumRate
    static void _set_MaximumRate(float value);
    // Get instance field reference: public UnityEngine.Camera Camera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_Camera();
    // Get instance field reference: public UnityEngine.Rect Location
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_Location();
    // Get instance field reference: public UnityEngine.Texture2D Output
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_Output();
    // Get instance field reference: public System.Single CurrentRate
    [[deprecated("Use field access instead!")]] float& dyn_CurrentRate();
    // Get instance field reference: public System.Boolean Redraw
    [[deprecated("Use field access instead!")]] bool& dyn_Redraw();
    // Get instance field reference: public System.Single Aspect
    [[deprecated("Use field access instead!")]] float& dyn_Aspect();
    // public System.Void Update()
    // Offset: 0x1A461B0
    void Update();
    // public System.Void OnPostRender()
    // Offset: 0x1A46280
    void OnPostRender();
    // public System.Void .ctor()
    // Offset: 0x1A46324
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlatWorldUIHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::FlatWorldUIHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlatWorldUIHandler*, creationType>()));
    }
  }; // PowerUI.FlatWorldUIHandler
  #pragma pack(pop)
  static check_size<sizeof(FlatWorldUIHandler), 64 + sizeof(float)> __PowerUI_FlatWorldUIHandlerSizeCheck;
  static_assert(sizeof(FlatWorldUIHandler) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::FlatWorldUIHandler::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FlatWorldUIHandler::*)()>(&PowerUI::FlatWorldUIHandler::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUIHandler*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FlatWorldUIHandler::OnPostRender
// Il2CppName: OnPostRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::FlatWorldUIHandler::*)()>(&PowerUI::FlatWorldUIHandler::OnPostRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::FlatWorldUIHandler*), "OnPostRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::FlatWorldUIHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
