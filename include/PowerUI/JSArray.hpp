// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.JSObject
#include "PowerUI/JSObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: JSArray
  class JSArray;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::JSArray);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::JSArray*, "PowerUI", "JSArray");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.JSArray
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: AD12A0
  class JSArray : public ::PowerUI::JSObject {
    public:
    public:
    // public System.Collections.Generic.Dictionary`2<System.String,PowerUI.JSObject> Values
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::JSObject*>* Values;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::JSObject*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::JSObject*>*
    constexpr operator ::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::JSObject*>*() const noexcept {
      return Values;
    }
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,PowerUI.JSObject> Values
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::JSObject*>*& dyn_Values();
    // protected override System.Int32 get_internalLength()
    // Offset: 0x1A52BE8
    // Implemented from: PowerUI.JSObject
    // Base method: System.Int32 JSObject::get_internalLength()
    int get_internalLength();
    // public override System.Void push(PowerUI.JSObject value)
    // Offset: 0x1A52C48
    // Implemented from: PowerUI.JSObject
    // Base method: System.Void JSObject::push(PowerUI.JSObject value)
    void push(::PowerUI::JSObject* value);
    // public override PowerUI.JSObject get_Item(System.String index)
    // Offset: 0x1A52D20
    // Implemented from: PowerUI.JSObject
    // Base method: PowerUI.JSObject JSObject::get_Item(System.String index)
    ::PowerUI::JSObject* get_Item(::StringW index);
    // public override System.Void set_Item(System.String index, PowerUI.JSObject value)
    // Offset: 0x1A52DB8
    // Implemented from: PowerUI.JSObject
    // Base method: System.Void JSObject::set_Item(System.String index, PowerUI.JSObject value)
    void set_Item(::StringW index, ::PowerUI::JSObject* value);
    // public override System.String ToJSONString()
    // Offset: 0x1A52E80
    // Implemented from: PowerUI.JSObject
    // Base method: System.String JSObject::ToJSONString()
    ::StringW ToJSONString();
    // public override System.String ToString()
    // Offset: 0x1A53270
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // public override System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<System.String,PowerUI.JSObject>> GetEnumerator()
    // Offset: 0x1A5327C
    // Implemented from: PowerUI.JSObject
    // Base method: System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<System.String,PowerUI.JSObject>> JSObject::GetEnumerator()
    ::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::PowerUI::JSObject*>>* GetEnumerator();
    // public System.Void .ctor()
    // Offset: 0x1A53314
    // Implemented from: PowerUI.JSObject
    // Base method: System.Void JSObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JSArray* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::JSArray::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JSArray*, creationType>()));
    }
  }; // PowerUI.JSArray
  #pragma pack(pop)
  static check_size<sizeof(JSArray), 16 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::PowerUI::JSObject*>*)> __PowerUI_JSArraySizeCheck;
  static_assert(sizeof(JSArray) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::JSArray::get_internalLength
// Il2CppName: get_internalLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::JSArray::*)()>(&PowerUI::JSArray::get_internalLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::JSArray*), "get_internalLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::JSArray::push
// Il2CppName: push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::JSArray::*)(::PowerUI::JSObject*)>(&PowerUI::JSArray::push)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "JSObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::JSArray*), "push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::JSArray::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::JSObject* (PowerUI::JSArray::*)(::StringW)>(&PowerUI::JSArray::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::JSArray*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: PowerUI::JSArray::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::JSArray::*)(::StringW, ::PowerUI::JSObject*)>(&PowerUI::JSArray::set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI", "JSObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::JSArray*), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: PowerUI::JSArray::ToJSONString
// Il2CppName: ToJSONString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::JSArray::*)()>(&PowerUI::JSArray::ToJSONString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::JSArray*), "ToJSONString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::JSArray::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::JSArray::*)()>(&PowerUI::JSArray::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::JSArray*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::JSArray::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::System::Collections::Generic::KeyValuePair_2<::StringW, ::PowerUI::JSObject*>>* (PowerUI::JSArray::*)()>(&PowerUI::JSArray::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::JSArray*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::JSArray::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
