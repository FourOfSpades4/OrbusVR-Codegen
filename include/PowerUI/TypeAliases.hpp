// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: TypeAliases
  class TypeAliases;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::TypeAliases);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::TypeAliases*, "PowerUI", "TypeAliases");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.TypeAliases
  // [TokenAttribute] Offset: FFFFFFFF
  class TypeAliases : public ::Il2CppObject {
    public:
    // static public System.Void Add(System.String alias, System.Type forType)
    // Offset: 0x177B428
    static void Add(::StringW alias, ::System::Type* forType);
    // static public System.Void Setup()
    // Offset: 0x177B4A0
    static void Setup();
  }; // PowerUI.TypeAliases
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::TypeAliases::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::System::Type*)>(&PowerUI::TypeAliases::Add)> {
  static const MethodInfo* get() {
    static auto* alias = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* forType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TypeAliases*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alias, forType});
  }
};
// Writing MetadataGetter for method: PowerUI::TypeAliases::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::TypeAliases::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TypeAliases*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
