// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: ImagePackage
  class ImagePackage;
}
// Forward declaring namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: Glyph
  class Glyph;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: CharacterProvider
  class CharacterProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::CharacterProvider);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::CharacterProvider*, "PowerUI", "CharacterProvider");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.CharacterProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class CharacterProvider : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 MinimumID
    // Size: 0x4
    // Offset: 0x10
    int MinimumID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MaximumID
    // Size: 0x4
    // Offset: 0x14
    int MaximumID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.String Path
    // Size: 0x8
    // Offset: 0x18
    ::StringW Path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.Int32 MinimumID
    [[deprecated("Use field access instead!")]] int& dyn_MinimumID();
    // Get instance field reference: public System.Int32 MaximumID
    [[deprecated("Use field access instead!")]] int& dyn_MaximumID();
    // Get instance field reference: public System.String Path
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Path();
    // public System.Void .ctor(System.String path, System.Int32 minimum, System.Int32 maximum)
    // Offset: 0xEBEA38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CharacterProvider* New_ctor(::StringW path, int minimum, int maximum) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::CharacterProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CharacterProvider*, creationType>(path, minimum, maximum)));
    }
    // public PowerUI.ImagePackage Load(InfiniText.Glyph glyph, System.Int32 charcode)
    // Offset: 0xEBEA78
    ::PowerUI::ImagePackage* Load(::InfiniText::Glyph* glyph, int charcode);
    // public System.Void ImageReady(PowerUI.ImagePackage package)
    // Offset: 0xEBEB78
    void ImageReady(::PowerUI::ImagePackage* package);
    // public System.String GetPath(System.Int32 charcode)
    // Offset: 0xEBEC44
    ::StringW GetPath(int charcode);
  }; // PowerUI.CharacterProvider
  #pragma pack(pop)
  static check_size<sizeof(CharacterProvider), 24 + sizeof(::StringW)> __PowerUI_CharacterProviderSizeCheck;
  static_assert(sizeof(CharacterProvider) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::CharacterProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::CharacterProvider::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::ImagePackage* (PowerUI::CharacterProvider::*)(::InfiniText::Glyph*, int)>(&PowerUI::CharacterProvider::Load)> {
  static const MethodInfo* get() {
    static auto* glyph = &::il2cpp_utils::GetClassFromName("InfiniText", "Glyph")->byval_arg;
    static auto* charcode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CharacterProvider*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glyph, charcode});
  }
};
// Writing MetadataGetter for method: PowerUI::CharacterProvider::ImageReady
// Il2CppName: ImageReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CharacterProvider::*)(::PowerUI::ImagePackage*)>(&PowerUI::CharacterProvider::ImageReady)> {
  static const MethodInfo* get() {
    static auto* package = &::il2cpp_utils::GetClassFromName("PowerUI", "ImagePackage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CharacterProvider*), "ImageReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{package});
  }
};
// Writing MetadataGetter for method: PowerUI::CharacterProvider::GetPath
// Il2CppName: GetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::CharacterProvider::*)(int)>(&PowerUI::CharacterProvider::GetPath)> {
  static const MethodInfo* get() {
    static auto* charcode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CharacterProvider*), "GetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{charcode});
  }
};
