// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Transformation
  class Transformation;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: TransformationStack
  class TransformationStack;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::TransformationStack);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::TransformationStack*, "PowerUI", "TransformationStack");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.TransformationStack
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformationStack : public ::Il2CppObject {
    public:
    public:
    // public PowerUI.Transformation Last
    // Size: 0x8
    // Offset: 0x10
    ::PowerUI::Transformation* Last;
    // Field size check
    static_assert(sizeof(::PowerUI::Transformation*) == 0x8);
    // public PowerUI.Transformation First
    // Size: 0x8
    // Offset: 0x18
    ::PowerUI::Transformation* First;
    // Field size check
    static_assert(sizeof(::PowerUI::Transformation*) == 0x8);
    public:
    // Get instance field reference: public PowerUI.Transformation Last
    [[deprecated("Use field access instead!")]] ::PowerUI::Transformation*& dyn_Last();
    // Get instance field reference: public PowerUI.Transformation First
    [[deprecated("Use field access instead!")]] ::PowerUI::Transformation*& dyn_First();
    // public System.Void Push(PowerUI.Transformation transform)
    // Offset: 0x177B3B8
    void Push(::PowerUI::Transformation* transform);
    // public System.Void Pop()
    // Offset: 0x177B40C
    void Pop();
    // public System.Void Clear()
    // Offset: 0x177B420
    void Clear();
    // public System.Void .ctor()
    // Offset: 0x1769A94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformationStack* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::TransformationStack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformationStack*, creationType>()));
    }
  }; // PowerUI.TransformationStack
  #pragma pack(pop)
  static check_size<sizeof(TransformationStack), 24 + sizeof(::PowerUI::Transformation*)> __PowerUI_TransformationStackSizeCheck;
  static_assert(sizeof(TransformationStack) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::TransformationStack::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TransformationStack::*)(::PowerUI::Transformation*)>(&PowerUI::TransformationStack::Push)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("PowerUI", "Transformation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TransformationStack*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: PowerUI::TransformationStack::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TransformationStack::*)()>(&PowerUI::TransformationStack::Pop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TransformationStack*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::TransformationStack::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TransformationStack::*)()>(&PowerUI::TransformationStack::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TransformationStack*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::TransformationStack::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
