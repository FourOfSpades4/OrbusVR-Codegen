// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.HtmlTagHandler
#include "PowerUI/HtmlTagHandler.hpp"
// Including type: PowerUI.MarqueeBehaviour
#include "PowerUI/MarqueeBehaviour.hpp"
// Including type: PowerUI.MarqueeDirection
#include "PowerUI/MarqueeDirection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: UITimer
  class UITimer;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: MarqueeTag
  class MarqueeTag;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::MarqueeTag);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::MarqueeTag*, "PowerUI", "MarqueeTag");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.MarqueeTag
  // [TokenAttribute] Offset: FFFFFFFF
  class MarqueeTag : public ::PowerUI::HtmlTagHandler {
    public:
    public:
    // public System.Boolean Active
    // Size: 0x1
    // Offset: 0x33
    bool Active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Int32 Loop
    // Size: 0x4
    // Offset: 0x34
    int Loop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private PowerUI.UITimer Timer
    // Size: 0x8
    // Offset: 0x38
    ::PowerUI::UITimer* Timer;
    // Field size check
    static_assert(sizeof(::PowerUI::UITimer*) == 0x8);
    // public System.Int32 ScrollAmount
    // Size: 0x4
    // Offset: 0x40
    int ScrollAmount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ScrollDelay
    // Size: 0x4
    // Offset: 0x44
    int ScrollDelay;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public PowerUI.MarqueeBehaviour Behaviour
    // Size: 0x4
    // Offset: 0x48
    ::PowerUI::MarqueeBehaviour Behaviour;
    // Field size check
    static_assert(sizeof(::PowerUI::MarqueeBehaviour) == 0x4);
    // public PowerUI.MarqueeDirection Direction
    // Size: 0x4
    // Offset: 0x4C
    ::PowerUI::MarqueeDirection Direction;
    // Field size check
    static_assert(sizeof(::PowerUI::MarqueeDirection) == 0x4);
    public:
    // Get instance field reference: public System.Boolean Active
    [[deprecated("Use field access instead!")]] bool& dyn_Active();
    // Get instance field reference: public System.Int32 Loop
    [[deprecated("Use field access instead!")]] int& dyn_Loop();
    // Get instance field reference: private PowerUI.UITimer Timer
    [[deprecated("Use field access instead!")]] ::PowerUI::UITimer*& dyn_Timer();
    // Get instance field reference: public System.Int32 ScrollAmount
    [[deprecated("Use field access instead!")]] int& dyn_ScrollAmount();
    // Get instance field reference: public System.Int32 ScrollDelay
    [[deprecated("Use field access instead!")]] int& dyn_ScrollDelay();
    // Get instance field reference: public PowerUI.MarqueeBehaviour Behaviour
    [[deprecated("Use field access instead!")]] ::PowerUI::MarqueeBehaviour& dyn_Behaviour();
    // Get instance field reference: public PowerUI.MarqueeDirection Direction
    [[deprecated("Use field access instead!")]] ::PowerUI::MarqueeDirection& dyn_Direction();
    // public System.Void Start()
    // Offset: 0x1762BB4
    void Start();
    // public System.Void Stop()
    // Offset: 0x1762CC4
    void Stop();
    // private System.Void OnTick()
    // Offset: 0x1762D78
    void OnTick();
    // private System.Void Bounced()
    // Offset: 0x17630B4
    void Bounced();
    // private System.Void Wrapped()
    // Offset: 0x176300C
    void Wrapped();
    // private System.Void ApplyBehaviour(System.String behaviour)
    // Offset: 0x17633FC
    void ApplyBehaviour(::StringW behaviour);
    // public override System.Boolean OnAttributeChange(System.String property)
    // Offset: 0x1763140
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Boolean HtmlTagHandler::OnAttributeChange(System.String property)
    bool OnAttributeChange(::StringW property);
    // public override System.String[] GetTags()
    // Offset: 0x17634B4
    // Implemented from: Wrench.TagHandler
    // Base method: System.String[] TagHandler::GetTags()
    ::ArrayW<::StringW> GetTags();
    // public override System.Void OnChildrenLoaded()
    // Offset: 0x1763564
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::OnChildrenLoaded()
    void OnChildrenLoaded();
    // public override Wrench.TagHandler GetInstance()
    // Offset: 0x1763568
    // Implemented from: Wrench.TagHandler
    // Base method: Wrench.TagHandler TagHandler::GetInstance()
    ::Wrench::TagHandler* GetInstance();
    // public System.Void .ctor()
    // Offset: 0x17635E0
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::.ctor()
    // Base method: System.Void TagHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MarqueeTag* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::MarqueeTag::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MarqueeTag*, creationType>()));
    }
  }; // PowerUI.MarqueeTag
  #pragma pack(pop)
  static check_size<sizeof(MarqueeTag), 76 + sizeof(::PowerUI::MarqueeDirection)> __PowerUI_MarqueeTagSizeCheck;
  static_assert(sizeof(MarqueeTag) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::MarqueeTag::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::MarqueeTag::*)()>(&PowerUI::MarqueeTag::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::MarqueeTag*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::MarqueeTag::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::MarqueeTag::*)()>(&PowerUI::MarqueeTag::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::MarqueeTag*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::MarqueeTag::OnTick
// Il2CppName: OnTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::MarqueeTag::*)()>(&PowerUI::MarqueeTag::OnTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::MarqueeTag*), "OnTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::MarqueeTag::Bounced
// Il2CppName: Bounced
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::MarqueeTag::*)()>(&PowerUI::MarqueeTag::Bounced)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::MarqueeTag*), "Bounced", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::MarqueeTag::Wrapped
// Il2CppName: Wrapped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::MarqueeTag::*)()>(&PowerUI::MarqueeTag::Wrapped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::MarqueeTag*), "Wrapped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::MarqueeTag::ApplyBehaviour
// Il2CppName: ApplyBehaviour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::MarqueeTag::*)(::StringW)>(&PowerUI::MarqueeTag::ApplyBehaviour)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::MarqueeTag*), "ApplyBehaviour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour});
  }
};
// Writing MetadataGetter for method: PowerUI::MarqueeTag::OnAttributeChange
// Il2CppName: OnAttributeChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::MarqueeTag::*)(::StringW)>(&PowerUI::MarqueeTag::OnAttributeChange)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::MarqueeTag*), "OnAttributeChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: PowerUI::MarqueeTag::GetTags
// Il2CppName: GetTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (PowerUI::MarqueeTag::*)()>(&PowerUI::MarqueeTag::GetTags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::MarqueeTag*), "GetTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::MarqueeTag::OnChildrenLoaded
// Il2CppName: OnChildrenLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::MarqueeTag::*)()>(&PowerUI::MarqueeTag::OnChildrenLoaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::MarqueeTag*), "OnChildrenLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::MarqueeTag::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (PowerUI::MarqueeTag::*)()>(&PowerUI::MarqueeTag::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::MarqueeTag*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::MarqueeTag::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
