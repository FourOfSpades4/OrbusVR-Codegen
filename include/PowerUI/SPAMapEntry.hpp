// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: AtlasLocation
  class AtlasLocation;
}
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: SPASprite
  class SPASprite;
  // Forward declaring type: SPAReader
  class SPAReader;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: SPAMapEntry
  class SPAMapEntry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::SPAMapEntry);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::SPAMapEntry*, "PowerUI", "SPAMapEntry");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.SPAMapEntry
  // [TokenAttribute] Offset: FFFFFFFF
  class SPAMapEntry : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 ID
    // Size: 0x4
    // Offset: 0x10
    int _ID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: _ID and: Location
    char __padding0[0x4] = {};
    // public Blaze.AtlasLocation Location
    // Size: 0x8
    // Offset: 0x18
    ::Blaze::AtlasLocation* Location;
    // Field size check
    static_assert(sizeof(::Blaze::AtlasLocation*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 ID
    [[deprecated("Use field access instead!")]] int& dyn_ID();
    // Get instance field reference: public Blaze.AtlasLocation Location
    [[deprecated("Use field access instead!")]] ::Blaze::AtlasLocation*& dyn_Location();
    // public System.Void .ctor(PowerUI.SPASprite sprite, PowerUI.SPAReader reader)
    // Offset: 0x177063C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SPAMapEntry* New_ctor(::PowerUI::SPASprite* sprite, ::PowerUI::SPAReader* reader) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::SPAMapEntry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SPAMapEntry*, creationType>(sprite, reader)));
    }
  }; // PowerUI.SPAMapEntry
  #pragma pack(pop)
  static check_size<sizeof(SPAMapEntry), 24 + sizeof(::Blaze::AtlasLocation*)> __PowerUI_SPAMapEntrySizeCheck;
  static_assert(sizeof(SPAMapEntry) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::SPAMapEntry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
