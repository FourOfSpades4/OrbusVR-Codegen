// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Element
  class Element;
  // Forward declaring type: Document
  class Document;
  // Forward declaring type: WorldUI
  class WorldUI;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Event
  class Event;
  // Forward declaring type: KeyCode
  struct KeyCode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: DateTime
  struct DateTime;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: UIEvent
  class UIEvent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::UIEvent);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::UIEvent*, "PowerUI", "UIEvent");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x4B
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.UIEvent
  // [TokenAttribute] Offset: FFFFFFFF
  class UIEvent : public ::Il2CppObject {
    public:
    public:
    // private System.String _Type
    // Size: 0x8
    // Offset: 0x10
    ::StringW Type;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 clientX
    // Size: 0x4
    // Offset: 0x18
    int clientX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 clientY
    // Size: 0x4
    // Offset: 0x1C
    int clientY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 keyCode
    // Size: 0x4
    // Offset: 0x20
    int keyCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean heldDown
    // Size: 0x1
    // Offset: 0x24
    bool heldDown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: heldDown and: target
    char __padding4[0x3] = {};
    // public PowerUI.Element target
    // Size: 0x8
    // Offset: 0x28
    ::PowerUI::Element* target;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // public PowerUI.Element SelectorTarget
    // Size: 0x8
    // Offset: 0x30
    ::PowerUI::Element* SelectorTarget;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // public System.Char character
    // Size: 0x2
    // Offset: 0x38
    ::Il2CppChar character;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // Padding between fields: character and: bubbleCount
    char __padding7[0x2] = {};
    // public System.Int32 bubbleCount
    // Size: 0x4
    // Offset: 0x3C
    int bubbleCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Event unityEvent
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Event* unityEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Event*) == 0x8);
    // public System.Boolean cancelBubble
    // Size: 0x1
    // Offset: 0x48
    bool cancelBubble;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean bubbles
    // Size: 0x1
    // Offset: 0x49
    bool bubbles;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean cancelable
    // Size: 0x1
    // Offset: 0x4A
    bool cancelable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.String _Type
    [[deprecated("Use field access instead!")]] ::StringW& dyn__Type();
    // Get instance field reference: public System.Int32 clientX
    [[deprecated("Use field access instead!")]] int& dyn_clientX();
    // Get instance field reference: public System.Int32 clientY
    [[deprecated("Use field access instead!")]] int& dyn_clientY();
    // Get instance field reference: public System.Int32 keyCode
    [[deprecated("Use field access instead!")]] int& dyn_keyCode();
    // Get instance field reference: public System.Boolean heldDown
    [[deprecated("Use field access instead!")]] bool& dyn_heldDown();
    // Get instance field reference: public PowerUI.Element target
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_target();
    // Get instance field reference: public PowerUI.Element SelectorTarget
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_SelectorTarget();
    // Get instance field reference: public System.Char character
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_character();
    // Get instance field reference: public System.Int32 bubbleCount
    [[deprecated("Use field access instead!")]] int& dyn_bubbleCount();
    // Get instance field reference: public UnityEngine.Event unityEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Event*& dyn_unityEvent();
    // Get instance field reference: public System.Boolean cancelBubble
    [[deprecated("Use field access instead!")]] bool& dyn_cancelBubble();
    // Get instance field reference: public System.Boolean bubbles
    [[deprecated("Use field access instead!")]] bool& dyn_bubbles();
    // Get instance field reference: public System.Boolean cancelable
    [[deprecated("Use field access instead!")]] bool& dyn_cancelable();
    // public System.Void .ctor()
    // Offset: 0xE18B30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIEvent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::UIEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIEvent*, creationType>()));
    }
    // public System.Void .ctor(System.String type)
    // Offset: 0xE18B40
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIEvent* New_ctor(::StringW type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::UIEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIEvent*, creationType>(type)));
    }
    // public System.Void .ctor(System.String type, System.Boolean bubbles)
    // Offset: 0xE18B74
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIEvent* New_ctor(::StringW type, bool bubbles) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::UIEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIEvent*, creationType>(type, bubbles)));
    }
    // public System.Void .ctor(System.String type, System.Boolean bubbles, System.Boolean cancelable)
    // Offset: 0xE18BBC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIEvent* New_ctor(::StringW type, bool bubbles, bool cancelable) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::UIEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIEvent*, creationType>(type, bubbles, cancelable)));
    }
    // public System.Void .ctor(System.Int32 x, System.Int32 y, System.Boolean down)
    // Offset: 0xE18C10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIEvent* New_ctor(int x, int y, bool down) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::UIEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIEvent*, creationType>(x, y, down)));
    }
    // public System.Void .ctor(System.Int32 key, System.Char ch, System.Boolean down)
    // Offset: 0xE18C5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIEvent* New_ctor(int key, ::Il2CppChar ch, bool down) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::UIEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIEvent*, creationType>(key, ch, down)));
    }
    // public System.Void stopPropagation()
    // Offset: 0xE18CAC
    void stopPropagation();
    // public UnityEngine.KeyCode get_unityKeyCode()
    // Offset: 0xE18CB8
    ::UnityEngine::KeyCode get_unityKeyCode();
    // public System.String get_type()
    // Offset: 0xE18CC0
    ::StringW get_type();
    // public System.Void set_type(System.String value)
    // Offset: 0xE18DD0
    void set_type(::StringW value);
    // public PowerUI.Element get_currentTarget()
    // Offset: 0xE18DD8
    ::PowerUI::Element* get_currentTarget();
    // public System.DateTime get_timeStamp()
    // Offset: 0xE18DE0
    ::System::DateTime get_timeStamp();
    // public System.Int32 get_eventPhase()
    // Offset: 0xE18E40
    int get_eventPhase();
    // public System.Int32 get_button()
    // Offset: 0xE18E48
    int get_button();
    // public System.Boolean get_leftMouseDown()
    // Offset: 0xE18E50
    bool get_leftMouseDown();
    // public System.Boolean get_rightMouseDown()
    // Offset: 0xE18E5C
    bool get_rightMouseDown();
    // public System.Boolean get_isLeftMouse()
    // Offset: 0xE18E68
    bool get_isLeftMouse();
    // public System.Boolean get_isRightMouse()
    // Offset: 0xE18E78
    bool get_isRightMouse();
    // public System.Boolean get_ctrlKey()
    // Offset: 0xE18E88
    bool get_ctrlKey();
    // public System.Boolean get_shiftKey()
    // Offset: 0xE18E9C
    bool get_shiftKey();
    // public System.Boolean get_altKey()
    // Offset: 0xE18EB0
    bool get_altKey();
    // public PowerUI.Document get_document()
    // Offset: 0xE18EC4
    ::PowerUI::Document* get_document();
    // public PowerUI.WorldUI get_worldUI()
    // Offset: 0xE18ED8
    ::PowerUI::WorldUI* get_worldUI();
    // public System.Single get_relativeX()
    // Offset: 0xE18F20
    float get_relativeX();
    // public System.Single get_relativeY()
    // Offset: 0xE18FCC
    float get_relativeY();
    // public System.Int32 get_localX()
    // Offset: 0xE19078
    int get_localX();
    // public System.Int32 get_localY()
    // Offset: 0xE190D0
    int get_localY();
  }; // PowerUI.UIEvent
  #pragma pack(pop)
  static check_size<sizeof(UIEvent), 74 + sizeof(bool)> __PowerUI_UIEventSizeCheck;
  static_assert(sizeof(UIEvent) == 0x4B);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::UIEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::UIEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::UIEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::UIEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::UIEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::UIEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::UIEvent::stopPropagation
// Il2CppName: stopPropagation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::stopPropagation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "stopPropagation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_unityKeyCode
// Il2CppName: get_unityKeyCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::KeyCode (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_unityKeyCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_unityKeyCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_type
// Il2CppName: get_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::set_type
// Il2CppName: set_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::UIEvent::*)(::StringW)>(&PowerUI::UIEvent::set_type)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "set_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_currentTarget
// Il2CppName: get_currentTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_currentTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_currentTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_timeStamp
// Il2CppName: get_timeStamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_timeStamp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_timeStamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_eventPhase
// Il2CppName: get_eventPhase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_eventPhase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_eventPhase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_button
// Il2CppName: get_button
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_button)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_button", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_leftMouseDown
// Il2CppName: get_leftMouseDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_leftMouseDown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_leftMouseDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_rightMouseDown
// Il2CppName: get_rightMouseDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_rightMouseDown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_rightMouseDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_isLeftMouse
// Il2CppName: get_isLeftMouse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_isLeftMouse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_isLeftMouse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_isRightMouse
// Il2CppName: get_isRightMouse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_isRightMouse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_isRightMouse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_ctrlKey
// Il2CppName: get_ctrlKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_ctrlKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_ctrlKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_shiftKey
// Il2CppName: get_shiftKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_shiftKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_shiftKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_altKey
// Il2CppName: get_altKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_altKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_altKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_document
// Il2CppName: get_document
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Document* (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_document)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_document", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_worldUI
// Il2CppName: get_worldUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::WorldUI* (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_worldUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_worldUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_relativeX
// Il2CppName: get_relativeX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_relativeX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_relativeX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_relativeY
// Il2CppName: get_relativeY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_relativeY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_relativeY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_localX
// Il2CppName: get_localX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_localX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_localX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::UIEvent::get_localY
// Il2CppName: get_localY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::UIEvent::*)()>(&PowerUI::UIEvent::get_localY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::UIEvent*), "get_localY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
