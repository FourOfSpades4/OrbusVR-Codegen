// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: DesignSize
  class DesignSize;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: ResolutionInfo
  class ResolutionInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::ResolutionInfo);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::ResolutionInfo*, "PowerUI", "ResolutionInfo");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.ResolutionInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class ResolutionInfo : public ::Il2CppObject {
    public:
    public:
    // public System.String Name
    // Size: 0x8
    // Offset: 0x10
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single Scale
    // Size: 0x4
    // Offset: 0x18
    float Scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public System.Single Scale
    [[deprecated("Use field access instead!")]] float& dyn_Scale();
    // public System.Void .ctor(System.Single scale)
    // Offset: 0x176D520
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ResolutionInfo* New_ctor(float scale) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::ResolutionInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ResolutionInfo*, creationType>(scale)));
    }
    // public System.Void .ctor(PowerUI.DesignSize size)
    // Offset: 0x176D55C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ResolutionInfo* New_ctor(::PowerUI::DesignSize* size) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::ResolutionInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ResolutionInfo*, creationType>(size)));
    }
    // public System.Void .ctor(System.String name, System.Single scale)
    // Offset: 0x176D5A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ResolutionInfo* New_ctor(::StringW name, float scale) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::ResolutionInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ResolutionInfo*, creationType>(name, scale)));
    }
  }; // PowerUI.ResolutionInfo
  #pragma pack(pop)
  static check_size<sizeof(ResolutionInfo), 24 + sizeof(float)> __PowerUI_ResolutionInfoSizeCheck;
  static_assert(sizeof(ResolutionInfo) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::ResolutionInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::ResolutionInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::ResolutionInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
