// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.BinaryReader
#include "System/IO/BinaryReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: SPAReader
  class SPAReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::SPAReader);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::SPAReader*, "PowerUI", "SPAReader");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.SPAReader
  // [TokenAttribute] Offset: FFFFFFFF
  class SPAReader : public ::System::IO::BinaryReader {
    public:
    // Writing base type padding for base size: 0x47 to desired offset: 0x48
    char ___base_padding[0x1] = {};
    public:
    // public System.Int32 PreviousX
    // Size: 0x4
    // Offset: 0x48
    int PreviousX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PreviousY
    // Size: 0x4
    // Offset: 0x4C
    int PreviousY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static public readonly System.Text.Encoding TextEncoding
    static ::System::Text::Encoding* _get_TextEncoding();
    // Set static field: static public readonly System.Text.Encoding TextEncoding
    static void _set_TextEncoding(::System::Text::Encoding* value);
    // Get instance field reference: public System.Int32 PreviousX
    [[deprecated("Use field access instead!")]] int& dyn_PreviousX();
    // Get instance field reference: public System.Int32 PreviousY
    [[deprecated("Use field access instead!")]] int& dyn_PreviousY();
    // public System.Void .ctor(System.IO.Stream stream)
    // Offset: 0x176F87C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SPAReader* New_ctor(::System::IO::Stream* stream) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::SPAReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SPAReader*, creationType>(stream)));
    }
    // public System.Void .ctor(System.Byte[] src)
    // Offset: 0x1770EFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SPAReader* New_ctor(::ArrayW<uint8_t> src) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::SPAReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SPAReader*, creationType>(src)));
    }
    // public System.Void ResetCoordinates()
    // Offset: 0x1770F74
    void ResetCoordinates();
    // public System.String ReadString(System.Int32 length)
    // Offset: 0x1770FA4
    ::StringW ReadString(int length);
    // public System.UInt32 ReadUInt24()
    // Offset: 0x1771058
    uint ReadUInt24();
    // public System.Int32 ReadInt24()
    // Offset: 0x17710B0
    int ReadInt24();
    // static public System.Int32 CompressedSize(System.UInt64 l)
    // Offset: 0x1771108
    static int CompressedSize(uint64_t l);
    // public System.UInt64 ReadCompressed()
    // Offset: 0x176F884
    uint64_t ReadCompressed();
    // public System.Int64 ReadCompressedSigned()
    // Offset: 0x177080C
    int64_t ReadCompressedSigned();
    // static private System.Void .cctor()
    // Offset: 0x1771150
    static void _cctor();
    // public override System.String ReadString()
    // Offset: 0x1770F7C
    // Implemented from: System.IO.BinaryReader
    // Base method: System.String BinaryReader::ReadString()
    ::StringW ReadString();
  }; // PowerUI.SPAReader
  #pragma pack(pop)
  static check_size<sizeof(SPAReader), 76 + sizeof(int)> __PowerUI_SPAReaderSizeCheck;
  static_assert(sizeof(SPAReader) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::SPAReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::SPAReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::SPAReader::ResetCoordinates
// Il2CppName: ResetCoordinates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SPAReader::*)()>(&PowerUI::SPAReader::ResetCoordinates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPAReader*), "ResetCoordinates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SPAReader::ReadString
// Il2CppName: ReadString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::SPAReader::*)(int)>(&PowerUI::SPAReader::ReadString)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPAReader*), "ReadString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length});
  }
};
// Writing MetadataGetter for method: PowerUI::SPAReader::ReadUInt24
// Il2CppName: ReadUInt24
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (PowerUI::SPAReader::*)()>(&PowerUI::SPAReader::ReadUInt24)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPAReader*), "ReadUInt24", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SPAReader::ReadInt24
// Il2CppName: ReadInt24
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::SPAReader::*)()>(&PowerUI::SPAReader::ReadInt24)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPAReader*), "ReadInt24", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SPAReader::CompressedSize
// Il2CppName: CompressedSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(uint64_t)>(&PowerUI::SPAReader::CompressedSize)> {
  static const MethodInfo* get() {
    static auto* l = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPAReader*), "CompressedSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{l});
  }
};
// Writing MetadataGetter for method: PowerUI::SPAReader::ReadCompressed
// Il2CppName: ReadCompressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (PowerUI::SPAReader::*)()>(&PowerUI::SPAReader::ReadCompressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPAReader*), "ReadCompressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SPAReader::ReadCompressedSigned
// Il2CppName: ReadCompressedSigned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (PowerUI::SPAReader::*)()>(&PowerUI::SPAReader::ReadCompressedSigned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPAReader*), "ReadCompressedSigned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SPAReader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PowerUI::SPAReader::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPAReader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SPAReader::ReadString
// Il2CppName: ReadString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::SPAReader::*)()>(&PowerUI::SPAReader::ReadString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPAReader*), "ReadString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
