// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.HtmlTagHandler
#include "PowerUI/HtmlTagHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: UIEvent
  class UIEvent;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: ClickLinkTag
  class ClickLinkTag;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::ClickLinkTag);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::ClickLinkTag*, "PowerUI", "ClickLinkTag");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.ClickLinkTag
  // [TokenAttribute] Offset: FFFFFFFF
  class ClickLinkTag : public ::PowerUI::HtmlTagHandler {
    public:
    // Writing base type padding for base size: 0x33 to desired offset: 0x38
    char ___base_padding[0x5] = {};
    public:
    // public System.String Href
    // Size: 0x8
    // Offset: 0x38
    ::StringW Href;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return Href;
    }
    // Get instance field reference: public System.String Href
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Href();
    // public System.Void .ctor()
    // Offset: 0xEBF50C
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::.ctor()
    // Base method: System.Void TagHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClickLinkTag* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::ClickLinkTag::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClickLinkTag*, creationType>()));
    }
    // public override System.String[] GetTags()
    // Offset: 0xEBF538
    // Implemented from: Wrench.TagHandler
    // Base method: System.String[] TagHandler::GetTags()
    ::ArrayW<::StringW> GetTags();
    // public override Wrench.TagHandler GetInstance()
    // Offset: 0xEBF5E8
    // Implemented from: Wrench.TagHandler
    // Base method: Wrench.TagHandler TagHandler::GetInstance()
    ::Wrench::TagHandler* GetInstance();
    // public override System.Boolean OnAttributeChange(System.String property)
    // Offset: 0xEBF64C
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Boolean HtmlTagHandler::OnAttributeChange(System.String property)
    bool OnAttributeChange(::StringW property);
    // public override System.Boolean OnClick(PowerUI.UIEvent clickEvent)
    // Offset: 0xEBF6F8
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Boolean HtmlTagHandler::OnClick(PowerUI.UIEvent clickEvent)
    bool OnClick(::PowerUI::UIEvent* clickEvent);
  }; // PowerUI.ClickLinkTag
  #pragma pack(pop)
  static check_size<sizeof(ClickLinkTag), 56 + sizeof(::StringW)> __PowerUI_ClickLinkTagSizeCheck;
  static_assert(sizeof(ClickLinkTag) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::ClickLinkTag::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::ClickLinkTag::GetTags
// Il2CppName: GetTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (PowerUI::ClickLinkTag::*)()>(&PowerUI::ClickLinkTag::GetTags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ClickLinkTag*), "GetTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ClickLinkTag::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (PowerUI::ClickLinkTag::*)()>(&PowerUI::ClickLinkTag::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ClickLinkTag*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::ClickLinkTag::OnAttributeChange
// Il2CppName: OnAttributeChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::ClickLinkTag::*)(::StringW)>(&PowerUI::ClickLinkTag::OnAttributeChange)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ClickLinkTag*), "OnAttributeChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: PowerUI::ClickLinkTag::OnClick
// Il2CppName: OnClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::ClickLinkTag::*)(::PowerUI::UIEvent*)>(&PowerUI::ClickLinkTag::OnClick)> {
  static const MethodInfo* get() {
    static auto* clickEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::ClickLinkTag*), "OnClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clickEvent});
  }
};
