// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: Scanner
  class Scanner;
  // Forward declaring type: VectorPath
  class VectorPath;
}
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: CanvasTag
  class CanvasTag;
  // Forward declaring type: ImagePackage
  class ImagePackage;
  // Forward declaring type: DynamicTexture
  class DynamicTexture;
  // Forward declaring type: Element
  class Element;
}
// Forward declaring namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: Glyph
  class Glyph;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: CanvasContext
  class CanvasContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::CanvasContext);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::CanvasContext*, "PowerUI", "CanvasContext");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.CanvasContext
  // [TokenAttribute] Offset: FFFFFFFF
  class CanvasContext : public ::Il2CppObject {
    public:
    public:
    // public Blaze.Scanner Rasteriser
    // Size: 0x8
    // Offset: 0x10
    ::Blaze::Scanner* Rasteriser;
    // Field size check
    static_assert(sizeof(::Blaze::Scanner*) == 0x8);
    // public Blaze.VectorPath Path
    // Size: 0x8
    // Offset: 0x18
    ::Blaze::VectorPath* Path;
    // Field size check
    static_assert(sizeof(::Blaze::VectorPath*) == 0x8);
    // private PowerUI.CanvasTag Canvas
    // Size: 0x8
    // Offset: 0x20
    ::PowerUI::CanvasTag* Canvas;
    // Field size check
    static_assert(sizeof(::PowerUI::CanvasTag*) == 0x8);
    // public PowerUI.ImagePackage Package
    // Size: 0x8
    // Offset: 0x28
    ::PowerUI::ImagePackage* Package;
    // Field size check
    static_assert(sizeof(::PowerUI::ImagePackage*) == 0x8);
    // public PowerUI.DynamicTexture ImageData
    // Size: 0x8
    // Offset: 0x30
    ::PowerUI::DynamicTexture* ImageData;
    // Field size check
    static_assert(sizeof(::PowerUI::DynamicTexture*) == 0x8);
    // public UnityEngine.Color32 FillColour
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::Color32 FillColour;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // public UnityEngine.Color32 StrokeColour
    // Size: 0x4
    // Offset: 0x3C
    ::UnityEngine::Color32 StrokeColour;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    public:
    // Get instance field reference: public Blaze.Scanner Rasteriser
    [[deprecated("Use field access instead!")]] ::Blaze::Scanner*& dyn_Rasteriser();
    // Get instance field reference: public Blaze.VectorPath Path
    [[deprecated("Use field access instead!")]] ::Blaze::VectorPath*& dyn_Path();
    // Get instance field reference: private PowerUI.CanvasTag Canvas
    [[deprecated("Use field access instead!")]] ::PowerUI::CanvasTag*& dyn_Canvas();
    // Get instance field reference: public PowerUI.ImagePackage Package
    [[deprecated("Use field access instead!")]] ::PowerUI::ImagePackage*& dyn_Package();
    // Get instance field reference: public PowerUI.DynamicTexture ImageData
    [[deprecated("Use field access instead!")]] ::PowerUI::DynamicTexture*& dyn_ImageData();
    // Get instance field reference: public UnityEngine.Color32 FillColour
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_FillColour();
    // Get instance field reference: public UnityEngine.Color32 StrokeColour
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_StrokeColour();
    // public System.Void .ctor(PowerUI.CanvasTag tag)
    // Offset: 0xEBD218
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CanvasContext* New_ctor(::PowerUI::CanvasTag* tag) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::CanvasContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CanvasContext*, creationType>(tag)));
    }
    // public InfiniText.Glyph ToGlyph()
    // Offset: 0xEBD2EC
    ::InfiniText::Glyph* ToGlyph();
    // public System.Void beginPath()
    // Offset: 0xEBD3F8
    void beginPath();
    // public System.Void closePath()
    // Offset: 0xEBD428
    void closePath();
    // public System.Int32 get_PathNodeCount()
    // Offset: 0xEBD458
    int get_PathNodeCount();
    // public System.Void lineTo(System.Single x, System.Single y)
    // Offset: 0xEBD484
    void lineTo(float x, float y);
    // public System.Void arc(System.Single centerX, System.Single centerY, System.Single radius, System.Single sAngle, System.Single eAngle)
    // Offset: 0xEBD50C
    void arc(float centerX, float centerY, float radius, float sAngle, float eAngle);
    // public System.Void arc(System.Single centerX, System.Single centerY, System.Single radius, System.Single sAngle, System.Single eAngle, System.Boolean counterClockwise)
    // Offset: 0xEBD514
    void arc(float centerX, float centerY, float radius, float sAngle, float eAngle, bool counterClockwise);
    // public System.Boolean isPointInPath(System.Single x, System.Single y)
    // Offset: 0xEBD7EC
    bool isPointInPath(float x, float y);
    // public System.Void curveTo(System.Single c1x, System.Single c1y, System.Single c2x, System.Single c2y, System.Single x, System.Single y)
    // Offset: 0xEBD858
    void curveTo(float c1x, float c1y, float c2x, float c2y, float x, float y);
    // public System.Void quadraticCurveTo(System.Single cx, System.Single cy, System.Single x, System.Single y)
    // Offset: 0xEBD8D0
    void quadraticCurveTo(float cx, float cy, float x, float y);
    // public System.Void arcTo(System.Single x1, System.Single y1, System.Single x2, System.Single y2, System.Single radius)
    // Offset: 0xEBD930
    void arcTo(float x1, float y1, float x2, float y2, float radius);
    // public System.Single Angle(System.Single x0, System.Single y0, System.Single x1, System.Single y1)
    // Offset: 0xEBDBB8
    float Angle(float x0, float y0, float x1, float y1);
    // public System.Void stroke()
    // Offset: 0xEBDD4C
    void stroke();
    // public System.Void fill()
    // Offset: 0xEBDE64
    void fill();
    // public System.Void moveTo(System.Single x, System.Single y)
    // Offset: 0xEBE014
    void moveTo(float x, float y);
    // public System.Void ApplyImageData()
    // Offset: 0xEBE05C
    void ApplyImageData();
    // public System.Void apply()
    // Offset: 0xEBE2CC
    void apply();
    // public PowerUI.Element get_canvas()
    // Offset: 0xEBE264
    ::PowerUI::Element* get_canvas();
    // public System.Void set_fillStyle(System.String value)
    // Offset: 0xEBE2FC
    void set_fillStyle(::StringW value);
    // public System.String get_fillStyle()
    // Offset: 0xEBE330
    ::StringW get_fillStyle();
    // public System.Void set_strokeStyle(System.String value)
    // Offset: 0xEBE378
    void set_strokeStyle(::StringW value);
    // public System.String get_strokeStyle()
    // Offset: 0xEBE3AC
    ::StringW get_strokeStyle();
    // public System.Void Resized()
    // Offset: 0xEBE3F4
    void Resized();
    // public System.Int32 get_width()
    // Offset: 0xEBE3F8
    int get_width();
    // public System.Void set_width(System.Int32 value)
    // Offset: 0xEBE410
    void set_width(int value);
    // public System.Int32 get_height()
    // Offset: 0xEBE49C
    int get_height();
    // public System.Void set_height(System.Int32 value)
    // Offset: 0xEBE4B4
    void set_height(int value);
    // public System.Void clear()
    // Offset: 0xEBE540
    void clear();
    // public System.Void clearRect(System.Int32 xStart, System.Int32 yStart, System.Int32 width, System.Int32 height)
    // Offset: 0xEBE584
    void clearRect(int xStart, int yStart, int width, int height);
    // public System.Void fillRect(System.Int32 xStart, System.Int32 yStart, System.Int32 width, System.Int32 height)
    // Offset: 0xEBE6D8
    void fillRect(int xStart, int yStart, int width, int height);
    // public System.Void fillRect(System.Int32 xStart, System.Int32 yStart, System.Int32 rectWidth, System.Int32 rectHeight, UnityEngine.Color32 colour)
    // Offset: 0xEBE5FC
    void fillRect(int xStart, int yStart, int rectWidth, int rectHeight, ::UnityEngine::Color32 colour);
  }; // PowerUI.CanvasContext
  #pragma pack(pop)
  static check_size<sizeof(CanvasContext), 60 + sizeof(::UnityEngine::Color32)> __PowerUI_CanvasContextSizeCheck;
  static_assert(sizeof(CanvasContext) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::CanvasContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::CanvasContext::ToGlyph
// Il2CppName: ToGlyph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::InfiniText::Glyph* (PowerUI::CanvasContext::*)()>(&PowerUI::CanvasContext::ToGlyph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "ToGlyph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::beginPath
// Il2CppName: beginPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)()>(&PowerUI::CanvasContext::beginPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "beginPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::closePath
// Il2CppName: closePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)()>(&PowerUI::CanvasContext::closePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "closePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::get_PathNodeCount
// Il2CppName: get_PathNodeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::CanvasContext::*)()>(&PowerUI::CanvasContext::get_PathNodeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "get_PathNodeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::lineTo
// Il2CppName: lineTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)(float, float)>(&PowerUI::CanvasContext::lineTo)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "lineTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::arc
// Il2CppName: arc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)(float, float, float, float, float)>(&PowerUI::CanvasContext::arc)> {
  static const MethodInfo* get() {
    static auto* centerX = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* centerY = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* sAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* eAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "arc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{centerX, centerY, radius, sAngle, eAngle});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::arc
// Il2CppName: arc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)(float, float, float, float, float, bool)>(&PowerUI::CanvasContext::arc)> {
  static const MethodInfo* get() {
    static auto* centerX = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* centerY = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* sAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* eAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* counterClockwise = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "arc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{centerX, centerY, radius, sAngle, eAngle, counterClockwise});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::isPointInPath
// Il2CppName: isPointInPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::CanvasContext::*)(float, float)>(&PowerUI::CanvasContext::isPointInPath)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "isPointInPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::curveTo
// Il2CppName: curveTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)(float, float, float, float, float, float)>(&PowerUI::CanvasContext::curveTo)> {
  static const MethodInfo* get() {
    static auto* c1x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* c1y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* c2x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* c2y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "curveTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c1x, c1y, c2x, c2y, x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::quadraticCurveTo
// Il2CppName: quadraticCurveTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)(float, float, float, float)>(&PowerUI::CanvasContext::quadraticCurveTo)> {
  static const MethodInfo* get() {
    static auto* cx = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* cy = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "quadraticCurveTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cx, cy, x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::arcTo
// Il2CppName: arcTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)(float, float, float, float, float)>(&PowerUI::CanvasContext::arcTo)> {
  static const MethodInfo* get() {
    static auto* x1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* x2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "arcTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x1, y1, x2, y2, radius});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::Angle
// Il2CppName: Angle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PowerUI::CanvasContext::*)(float, float, float, float)>(&PowerUI::CanvasContext::Angle)> {
  static const MethodInfo* get() {
    static auto* x0 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y0 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* x1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "Angle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x0, y0, x1, y1});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::stroke
// Il2CppName: stroke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)()>(&PowerUI::CanvasContext::stroke)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "stroke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::fill
// Il2CppName: fill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)()>(&PowerUI::CanvasContext::fill)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "fill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::moveTo
// Il2CppName: moveTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)(float, float)>(&PowerUI::CanvasContext::moveTo)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "moveTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::ApplyImageData
// Il2CppName: ApplyImageData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)()>(&PowerUI::CanvasContext::ApplyImageData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "ApplyImageData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::apply
// Il2CppName: apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)()>(&PowerUI::CanvasContext::apply)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::get_canvas
// Il2CppName: get_canvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Element* (PowerUI::CanvasContext::*)()>(&PowerUI::CanvasContext::get_canvas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "get_canvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::set_fillStyle
// Il2CppName: set_fillStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)(::StringW)>(&PowerUI::CanvasContext::set_fillStyle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "set_fillStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::get_fillStyle
// Il2CppName: get_fillStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::CanvasContext::*)()>(&PowerUI::CanvasContext::get_fillStyle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "get_fillStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::set_strokeStyle
// Il2CppName: set_strokeStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)(::StringW)>(&PowerUI::CanvasContext::set_strokeStyle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "set_strokeStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::get_strokeStyle
// Il2CppName: get_strokeStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::CanvasContext::*)()>(&PowerUI::CanvasContext::get_strokeStyle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "get_strokeStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::Resized
// Il2CppName: Resized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)()>(&PowerUI::CanvasContext::Resized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "Resized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::get_width
// Il2CppName: get_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::CanvasContext::*)()>(&PowerUI::CanvasContext::get_width)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "get_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::set_width
// Il2CppName: set_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)(int)>(&PowerUI::CanvasContext::set_width)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "set_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::get_height
// Il2CppName: get_height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::CanvasContext::*)()>(&PowerUI::CanvasContext::get_height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "get_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::set_height
// Il2CppName: set_height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)(int)>(&PowerUI::CanvasContext::set_height)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "set_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::clear
// Il2CppName: clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)()>(&PowerUI::CanvasContext::clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::clearRect
// Il2CppName: clearRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)(int, int, int, int)>(&PowerUI::CanvasContext::clearRect)> {
  static const MethodInfo* get() {
    static auto* xStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* yStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "clearRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xStart, yStart, width, height});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::fillRect
// Il2CppName: fillRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)(int, int, int, int)>(&PowerUI::CanvasContext::fillRect)> {
  static const MethodInfo* get() {
    static auto* xStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* yStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "fillRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xStart, yStart, width, height});
  }
};
// Writing MetadataGetter for method: PowerUI::CanvasContext::fillRect
// Il2CppName: fillRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::CanvasContext::*)(int, int, int, int, ::UnityEngine::Color32)>(&PowerUI::CanvasContext::fillRect)> {
  static const MethodInfo* get() {
    static auto* xStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* yStart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rectWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rectHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colour = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::CanvasContext*), "fillRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xStart, yStart, rectWidth, rectHeight, colour});
  }
};
