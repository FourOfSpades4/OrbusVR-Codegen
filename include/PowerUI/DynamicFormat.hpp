// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.ImageFormat
#include "PowerUI/ImageFormat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: DynamicTexture
  class DynamicTexture;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: DynamicFormat
  class DynamicFormat;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::DynamicFormat);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::DynamicFormat*, "PowerUI", "DynamicFormat");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.DynamicFormat
  // [TokenAttribute] Offset: FFFFFFFF
  class DynamicFormat : public ::PowerUI::ImageFormat {
    public:
    public:
    // public PowerUI.DynamicTexture DynamicImage
    // Size: 0x8
    // Offset: 0x10
    ::PowerUI::DynamicTexture* DynamicImage;
    // Field size check
    static_assert(sizeof(::PowerUI::DynamicTexture*) == 0x8);
    public:
    // Creating conversion operator: operator ::PowerUI::DynamicTexture*
    constexpr operator ::PowerUI::DynamicTexture*() const noexcept {
      return DynamicImage;
    }
    // Get instance field reference: public PowerUI.DynamicTexture DynamicImage
    [[deprecated("Use field access instead!")]] ::PowerUI::DynamicTexture*& dyn_DynamicImage();
    // public override System.Int32 get_Height()
    // Offset: 0x1858EFC
    // Implemented from: PowerUI.ImageFormat
    // Base method: System.Int32 ImageFormat::get_Height()
    int get_Height();
    // public override System.Int32 get_Width()
    // Offset: 0x1858F28
    // Implemented from: PowerUI.ImageFormat
    // Base method: System.Int32 ImageFormat::get_Width()
    int get_Width();
    // public override System.Void Clear()
    // Offset: 0x1858F54
    // Implemented from: PowerUI.ImageFormat
    // Base method: System.Void ImageFormat::Clear()
    void Clear();
    // public System.Void .ctor()
    // Offset: 0x1858F5C
    // Implemented from: PowerUI.ImageFormat
    // Base method: System.Void ImageFormat::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DynamicFormat* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::DynamicFormat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DynamicFormat*, creationType>()));
    }
  }; // PowerUI.DynamicFormat
  #pragma pack(pop)
  static check_size<sizeof(DynamicFormat), 16 + sizeof(::PowerUI::DynamicTexture*)> __PowerUI_DynamicFormatSizeCheck;
  static_assert(sizeof(DynamicFormat) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::DynamicFormat::get_Height
// Il2CppName: get_Height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::DynamicFormat::*)()>(&PowerUI::DynamicFormat::get_Height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicFormat*), "get_Height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicFormat::get_Width
// Il2CppName: get_Width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::DynamicFormat::*)()>(&PowerUI::DynamicFormat::get_Width)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicFormat*), "get_Width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicFormat::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::DynamicFormat::*)()>(&PowerUI::DynamicFormat::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::DynamicFormat*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::DynamicFormat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
