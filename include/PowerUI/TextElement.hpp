// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.Element
#include "PowerUI/Element.hpp"
// Including type: Wrench.MLTextElement
#include "Wrench/MLTextElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: WordElement
  class WordElement;
  // Forward declaring type: Document
  class Document;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: TextElement
  class TextElement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::TextElement);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::TextElement*, "PowerUI", "TextElement");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0xF8
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.TextElement
  // [TokenAttribute] Offset: FFFFFFFF
  class TextElement : public ::PowerUI::Element/*, public ::Wrench::MLTextElement*/ {
    public:
    public:
    // private System.String Text
    // Size: 0x8
    // Offset: 0xF0
    ::StringW Text;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Wrench::MLTextElement
    operator ::Wrench::MLTextElement() noexcept {
      return *reinterpret_cast<::Wrench::MLTextElement*>(this);
    }
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return Text;
    }
    // Get instance field reference: private System.String Text
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Text();
    // public System.Void AddCharacter(System.Char character)
    // Offset: 0x1777130
    void AddCharacter(::Il2CppChar character);
    // public System.Int32 LetterIndex(System.Int32 x, System.Int32 y)
    // Offset: 0x177723C
    int LetterIndex(int x, int y);
    // public System.Int32 LetterIndex(System.Int32 x)
    // Offset: 0x1777444
    int LetterIndex(int x);
    // public System.Void DoneWord(System.Boolean lastOne)
    // Offset: 0x1777194
    void DoneWord(bool lastOne);
    // public UnityEngine.Vector2 GetPosition(ref System.Int32 index)
    // Offset: 0x1777624
    ::UnityEngine::Vector2 GetPosition(ByRef<int> index);
    // public PowerUI.WordElement GetWordWithLetter(System.Int32 index, out System.Int32 localOffset, out System.Int32 globalOffset)
    // Offset: 0x1777778
    ::PowerUI::WordElement* GetWordWithLetter(int index, ByRef<int> localOffset, ByRef<int> globalOffset);
    // public PowerUI.WordElement GetWordWithLetter(System.Int32 index, out System.Int32 localOffset)
    // Offset: 0x1777918
    ::PowerUI::WordElement* GetWordWithLetter(int index, ByRef<int> localOffset);
    // public System.Void .ctor(PowerUI.Document document, PowerUI.Element parent)
    // Offset: 0x17770A4
    // Implemented from: PowerUI.Element
    // Base method: System.Void Element::.ctor(PowerUI.Document document, PowerUI.Element parent)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextElement* New_ctor(::PowerUI::Document* document, ::PowerUI::Element* parent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::TextElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextElement*, creationType>(document, parent)));
    }
    // public override System.String ToTextString()
    // Offset: 0x1777AAC
    // Implemented from: PowerUI.Element
    // Base method: System.String Element::ToTextString()
    ::StringW ToTextString();
    // public override System.String ToString()
    // Offset: 0x1777AB8
    // Implemented from: PowerUI.Element
    // Base method: System.String Element::ToString()
    ::StringW ToString();
    // public override System.Void ToString(System.Text.StringBuilder builder)
    // Offset: 0x1777B40
    // Implemented from: PowerUI.Element
    // Base method: System.Void Element::ToString(System.Text.StringBuilder builder)
    void ToString(::System::Text::StringBuilder* builder);
  }; // PowerUI.TextElement
  #pragma pack(pop)
  static check_size<sizeof(TextElement), 240 + sizeof(::StringW)> __PowerUI_TextElementSizeCheck;
  static_assert(sizeof(TextElement) == 0xF8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::TextElement::AddCharacter
// Il2CppName: AddCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextElement::*)(::Il2CppChar)>(&PowerUI::TextElement::AddCharacter)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextElement*), "AddCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: PowerUI::TextElement::LetterIndex
// Il2CppName: LetterIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::TextElement::*)(int, int)>(&PowerUI::TextElement::LetterIndex)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextElement*), "LetterIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::TextElement::LetterIndex
// Il2CppName: LetterIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::TextElement::*)(int)>(&PowerUI::TextElement::LetterIndex)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextElement*), "LetterIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: PowerUI::TextElement::DoneWord
// Il2CppName: DoneWord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextElement::*)(bool)>(&PowerUI::TextElement::DoneWord)> {
  static const MethodInfo* get() {
    static auto* lastOne = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextElement*), "DoneWord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lastOne});
  }
};
// Writing MetadataGetter for method: PowerUI::TextElement::GetPosition
// Il2CppName: GetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (PowerUI::TextElement::*)(ByRef<int>)>(&PowerUI::TextElement::GetPosition)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextElement*), "GetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: PowerUI::TextElement::GetWordWithLetter
// Il2CppName: GetWordWithLetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::WordElement* (PowerUI::TextElement::*)(int, ByRef<int>, ByRef<int>)>(&PowerUI::TextElement::GetWordWithLetter)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* localOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* globalOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextElement*), "GetWordWithLetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, localOffset, globalOffset});
  }
};
// Writing MetadataGetter for method: PowerUI::TextElement::GetWordWithLetter
// Il2CppName: GetWordWithLetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::WordElement* (PowerUI::TextElement::*)(int, ByRef<int>)>(&PowerUI::TextElement::GetWordWithLetter)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* localOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextElement*), "GetWordWithLetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, localOffset});
  }
};
// Writing MetadataGetter for method: PowerUI::TextElement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::TextElement::ToTextString
// Il2CppName: ToTextString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::TextElement::*)()>(&PowerUI::TextElement::ToTextString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextElement*), "ToTextString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::TextElement::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PowerUI::TextElement::*)()>(&PowerUI::TextElement::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextElement*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::TextElement::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextElement::*)(::System::Text::StringBuilder*)>(&PowerUI::TextElement::ToString)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextElement*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder});
  }
};
