// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: WorldUI
  class WorldUI;
  // Forward declaring type: Element
  class Element;
  // Forward declaring type: UIEvent
  class UIEvent;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: RaycastHit
  struct RaycastHit;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: HitResult
  class HitResult;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::HitResult);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::HitResult*, "PowerUI", "HitResult");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.HitResult
  // [TokenAttribute] Offset: FFFFFFFF
  class HitResult : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 MouseX
    // Size: 0x4
    // Offset: 0x10
    int MouseX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MouseY
    // Size: 0x4
    // Offset: 0x14
    int MouseY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean ScreenMode
    // Size: 0x1
    // Offset: 0x18
    bool ScreenMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean Successful
    // Size: 0x1
    // Offset: 0x19
    bool Successful;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Successful and: OnWorldUI
    char __padding3[0x6] = {};
    // public PowerUI.WorldUI OnWorldUI
    // Size: 0x8
    // Offset: 0x20
    ::PowerUI::WorldUI* OnWorldUI;
    // Field size check
    static_assert(sizeof(::PowerUI::WorldUI*) == 0x8);
    // public PowerUI.Element HitElement
    // Size: 0x8
    // Offset: 0x28
    ::PowerUI::Element* HitElement;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 MouseX
    [[deprecated("Use field access instead!")]] int& dyn_MouseX();
    // Get instance field reference: public System.Int32 MouseY
    [[deprecated("Use field access instead!")]] int& dyn_MouseY();
    // Get instance field reference: public System.Boolean ScreenMode
    [[deprecated("Use field access instead!")]] bool& dyn_ScreenMode();
    // Get instance field reference: private System.Boolean Successful
    [[deprecated("Use field access instead!")]] bool& dyn_Successful();
    // Get instance field reference: public PowerUI.WorldUI OnWorldUI
    [[deprecated("Use field access instead!")]] ::PowerUI::WorldUI*& dyn_OnWorldUI();
    // Get instance field reference: public PowerUI.Element HitElement
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_HitElement();
    // public System.Void SetPoint(System.Int32 x, System.Int32 y)
    // Offset: 0x1A499E8
    void SetPoint(int x, int y);
    // public System.Void SetRelativePoint(System.Single x, System.Single y)
    // Offset: 0x1A499F0
    void SetRelativePoint(float x, float y);
    // public System.Boolean RunClick(PowerUI.UIEvent uiEvent)
    // Offset: 0x1A49A80
    bool RunClick(::PowerUI::UIEvent* uiEvent);
    // public System.Void RunMouseOver(PowerUI.UIEvent mouseEvent)
    // Offset: 0x1A49C68
    void RunMouseOver(::PowerUI::UIEvent* mouseEvent);
    // public System.Boolean FindWorldUI(UnityEngine.Transform transform)
    // Offset: 0x1A49EDC
    bool FindWorldUI(::UnityEngine::Transform* transform);
    // public System.Void SetElement(PowerUI.Element hitElement)
    // Offset: 0x1A49F68
    void SetElement(::PowerUI::Element* hitElement);
    // public System.Void FindElement(UnityEngine.RaycastHit hit)
    // Offset: 0x1A49F7C
    void FindElement(::UnityEngine::RaycastHit hit);
    // public System.Boolean get_Success()
    // Offset: 0x1A49B90
    bool get_Success();
    // public System.Boolean get_InWorld()
    // Offset: 0x1A4A074
    bool get_InWorld();
    // public System.Void .ctor()
    // Offset: 0x1A4A084
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HitResult* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::HitResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HitResult*, creationType>()));
    }
  }; // PowerUI.HitResult
  #pragma pack(pop)
  static check_size<sizeof(HitResult), 40 + sizeof(::PowerUI::Element*)> __PowerUI_HitResultSizeCheck;
  static_assert(sizeof(HitResult) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::HitResult::SetPoint
// Il2CppName: SetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HitResult::*)(int, int)>(&PowerUI::HitResult::SetPoint)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HitResult*), "SetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::HitResult::SetRelativePoint
// Il2CppName: SetRelativePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HitResult::*)(float, float)>(&PowerUI::HitResult::SetRelativePoint)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HitResult*), "SetRelativePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: PowerUI::HitResult::RunClick
// Il2CppName: RunClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::HitResult::*)(::PowerUI::UIEvent*)>(&PowerUI::HitResult::RunClick)> {
  static const MethodInfo* get() {
    static auto* uiEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HitResult*), "RunClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uiEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::HitResult::RunMouseOver
// Il2CppName: RunMouseOver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HitResult::*)(::PowerUI::UIEvent*)>(&PowerUI::HitResult::RunMouseOver)> {
  static const MethodInfo* get() {
    static auto* mouseEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HitResult*), "RunMouseOver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mouseEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::HitResult::FindWorldUI
// Il2CppName: FindWorldUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::HitResult::*)(::UnityEngine::Transform*)>(&PowerUI::HitResult::FindWorldUI)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HitResult*), "FindWorldUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: PowerUI::HitResult::SetElement
// Il2CppName: SetElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HitResult::*)(::PowerUI::Element*)>(&PowerUI::HitResult::SetElement)> {
  static const MethodInfo* get() {
    static auto* hitElement = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HitResult*), "SetElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitElement});
  }
};
// Writing MetadataGetter for method: PowerUI::HitResult::FindElement
// Il2CppName: FindElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::HitResult::*)(::UnityEngine::RaycastHit)>(&PowerUI::HitResult::FindElement)> {
  static const MethodInfo* get() {
    static auto* hit = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HitResult*), "FindElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hit});
  }
};
// Writing MetadataGetter for method: PowerUI::HitResult::get_Success
// Il2CppName: get_Success
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::HitResult::*)()>(&PowerUI::HitResult::get_Success)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HitResult*), "get_Success", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::HitResult::get_InWorld
// Il2CppName: get_InWorld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::HitResult::*)()>(&PowerUI::HitResult::get_InWorld)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::HitResult*), "get_InWorld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::HitResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
