// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.HtmlTagHandler
#include "PowerUI/HtmlTagHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: TextPackage
  class TextPackage;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: LinkTag
  class LinkTag;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::LinkTag);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::LinkTag*, "PowerUI", "LinkTag");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.LinkTag
  // [TokenAttribute] Offset: FFFFFFFF
  class LinkTag : public ::PowerUI::HtmlTagHandler {
    public:
    public:
    // public System.Boolean IsCSS
    // Size: 0x1
    // Offset: 0x33
    bool IsCSS;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsCSS and: Href
    char __padding0[0x4] = {};
    // public System.String Href
    // Size: 0x8
    // Offset: 0x38
    ::StringW Href;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 StyleIndex
    // Size: 0x4
    // Offset: 0x40
    int StyleIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Boolean IsCSS
    [[deprecated("Use field access instead!")]] bool& dyn_IsCSS();
    // Get instance field reference: public System.String Href
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Href();
    // Get instance field reference: public System.Int32 StyleIndex
    [[deprecated("Use field access instead!")]] int& dyn_StyleIndex();
    // public System.Void LoadContent()
    // Offset: 0x1A54394
    void LoadContent();
    // private System.Void OnTextReady(PowerUI.TextPackage package)
    // Offset: 0x1A544E0
    void OnTextReady(::PowerUI::TextPackage* package);
    // public override System.Boolean SelfClosing()
    // Offset: 0x1A54078
    // Implemented from: Wrench.TagHandler
    // Base method: System.Boolean TagHandler::SelfClosing()
    bool SelfClosing();
    // public override System.String[] GetTags()
    // Offset: 0x1A54080
    // Implemented from: Wrench.TagHandler
    // Base method: System.String[] TagHandler::GetTags()
    ::ArrayW<::StringW> GetTags();
    // public override Wrench.TagHandler GetInstance()
    // Offset: 0x1A54130
    // Implemented from: Wrench.TagHandler
    // Base method: Wrench.TagHandler TagHandler::GetInstance()
    ::Wrench::TagHandler* GetInstance();
    // public override System.Boolean OnAttributeChange(System.String property)
    // Offset: 0x1A541A4
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Boolean HtmlTagHandler::OnAttributeChange(System.String property)
    bool OnAttributeChange(::StringW property);
    // public System.Void .ctor()
    // Offset: 0x1A54194
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::.ctor()
    // Base method: System.Void TagHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LinkTag* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::LinkTag::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LinkTag*, creationType>()));
    }
  }; // PowerUI.LinkTag
  #pragma pack(pop)
  static check_size<sizeof(LinkTag), 64 + sizeof(int)> __PowerUI_LinkTagSizeCheck;
  static_assert(sizeof(LinkTag) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::LinkTag::LoadContent
// Il2CppName: LoadContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::LinkTag::*)()>(&PowerUI::LinkTag::LoadContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::LinkTag*), "LoadContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::LinkTag::OnTextReady
// Il2CppName: OnTextReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::LinkTag::*)(::PowerUI::TextPackage*)>(&PowerUI::LinkTag::OnTextReady)> {
  static const MethodInfo* get() {
    static auto* package = &::il2cpp_utils::GetClassFromName("PowerUI", "TextPackage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::LinkTag*), "OnTextReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{package});
  }
};
// Writing MetadataGetter for method: PowerUI::LinkTag::SelfClosing
// Il2CppName: SelfClosing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::LinkTag::*)()>(&PowerUI::LinkTag::SelfClosing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::LinkTag*), "SelfClosing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::LinkTag::GetTags
// Il2CppName: GetTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (PowerUI::LinkTag::*)()>(&PowerUI::LinkTag::GetTags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::LinkTag*), "GetTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::LinkTag::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (PowerUI::LinkTag::*)()>(&PowerUI::LinkTag::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::LinkTag*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::LinkTag::OnAttributeChange
// Il2CppName: OnAttributeChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::LinkTag::*)(::StringW)>(&PowerUI::LinkTag::OnAttributeChange)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::LinkTag*), "OnAttributeChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: PowerUI::LinkTag::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
