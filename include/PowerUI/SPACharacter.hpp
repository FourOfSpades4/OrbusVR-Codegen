// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.SPAMapEntry
#include "PowerUI/SPAMapEntry.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: Glyph
  class Glyph;
  // Forward declaring type: FontFace
  class FontFace;
}
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: SPASprite
  class SPASprite;
  // Forward declaring type: SPAReader
  class SPAReader;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: SPACharacter
  class SPACharacter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::SPACharacter);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::SPACharacter*, "PowerUI", "SPACharacter");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.SPACharacter
  // [TokenAttribute] Offset: FFFFFFFF
  class SPACharacter : public ::PowerUI::SPAMapEntry {
    public:
    public:
    // public System.Int32 XOffset
    // Size: 0x4
    // Offset: 0x20
    int XOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 YOffset
    // Size: 0x4
    // Offset: 0x24
    int YOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Advance
    // Size: 0x4
    // Offset: 0x28
    int Advance;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Advance and: AdditionalCharcodes
    char __padding2[0x4] = {};
    // public System.Collections.Generic.List`1<System.Int32> AdditionalCharcodes
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<int>* AdditionalCharcodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<PowerUI.SPACharacter,System.Int32> Kerning
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::PowerUI::SPACharacter*, int>* Kerning;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::PowerUI::SPACharacter*, int>*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 XOffset
    [[deprecated("Use field access instead!")]] int& dyn_XOffset();
    // Get instance field reference: public System.Int32 YOffset
    [[deprecated("Use field access instead!")]] int& dyn_YOffset();
    // Get instance field reference: public System.Int32 Advance
    [[deprecated("Use field access instead!")]] int& dyn_Advance();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> AdditionalCharcodes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_AdditionalCharcodes();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<PowerUI.SPACharacter,System.Int32> Kerning
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::PowerUI::SPACharacter*, int>*& dyn_Kerning();
    // public System.Void AddCharcode(System.Int32 cc)
    // Offset: 0x177082C
    void AddCharcode(int cc);
    // public System.Int32 get_SpriteSize()
    // Offset: 0x17708C8
    int get_SpriteSize();
    // public System.Int32 get_Charcode()
    // Offset: 0x1770904
    int get_Charcode();
    // public System.Void AddKerningPair(PowerUI.SPACharacter beforeThis, System.Int32 value)
    // Offset: 0x177090C
    void AddKerningPair(::PowerUI::SPACharacter* beforeThis, int value);
    // public InfiniText.Glyph ToGlyph(InfiniText.FontFace face)
    // Offset: 0x17709B0
    ::InfiniText::Glyph* ToGlyph(::InfiniText::FontFace* face);
    // public System.Void .ctor(PowerUI.SPASprite sprite, PowerUI.SPAReader reader)
    // Offset: 0x1770584
    // Implemented from: PowerUI.SPAMapEntry
    // Base method: System.Void SPAMapEntry::.ctor(PowerUI.SPASprite sprite, PowerUI.SPAReader reader)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SPACharacter* New_ctor(::PowerUI::SPASprite* sprite, ::PowerUI::SPAReader* reader) {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::SPACharacter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SPACharacter*, creationType>(sprite, reader)));
    }
  }; // PowerUI.SPACharacter
  #pragma pack(pop)
  static check_size<sizeof(SPACharacter), 56 + sizeof(::System::Collections::Generic::Dictionary_2<::PowerUI::SPACharacter*, int>*)> __PowerUI_SPACharacterSizeCheck;
  static_assert(sizeof(SPACharacter) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::SPACharacter::AddCharcode
// Il2CppName: AddCharcode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SPACharacter::*)(int)>(&PowerUI::SPACharacter::AddCharcode)> {
  static const MethodInfo* get() {
    static auto* cc = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPACharacter*), "AddCharcode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cc});
  }
};
// Writing MetadataGetter for method: PowerUI::SPACharacter::get_SpriteSize
// Il2CppName: get_SpriteSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::SPACharacter::*)()>(&PowerUI::SPACharacter::get_SpriteSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPACharacter*), "get_SpriteSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SPACharacter::get_Charcode
// Il2CppName: get_Charcode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PowerUI::SPACharacter::*)()>(&PowerUI::SPACharacter::get_Charcode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPACharacter*), "get_Charcode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::SPACharacter::AddKerningPair
// Il2CppName: AddKerningPair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::SPACharacter::*)(::PowerUI::SPACharacter*, int)>(&PowerUI::SPACharacter::AddKerningPair)> {
  static const MethodInfo* get() {
    static auto* beforeThis = &::il2cpp_utils::GetClassFromName("PowerUI", "SPACharacter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPACharacter*), "AddKerningPair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beforeThis, value});
  }
};
// Writing MetadataGetter for method: PowerUI::SPACharacter::ToGlyph
// Il2CppName: ToGlyph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::InfiniText::Glyph* (PowerUI::SPACharacter::*)(::InfiniText::FontFace*)>(&PowerUI::SPACharacter::ToGlyph)> {
  static const MethodInfo* get() {
    static auto* face = &::il2cpp_utils::GetClassFromName("InfiniText", "FontFace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::SPACharacter*), "ToGlyph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{face});
  }
};
// Writing MetadataGetter for method: PowerUI::SPACharacter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
