// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PowerUI.HtmlTagHandler
#include "PowerUI/HtmlTagHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Element
  class Element;
  // Forward declaring type: KeyboardMode
  class KeyboardMode;
  // Forward declaring type: UIEvent
  class UIEvent;
}
// Forward declaring namespace: Wrench
namespace Wrench {
  // Forward declaring type: MLLexer
  class MLLexer;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: TextareaTag
  class TextareaTag;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::TextareaTag);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::TextareaTag*, "PowerUI", "TextareaTag");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.TextareaTag
  // [TokenAttribute] Offset: FFFFFFFF
  class TextareaTag : public ::PowerUI::HtmlTagHandler {
    public:
    // Writing base type padding for base size: 0x33 to desired offset: 0x38
    char ___base_padding[0x5] = {};
    public:
    // public System.String Value
    // Size: 0x8
    // Offset: 0x38
    ::StringW Value;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public PowerUI.Element Cursor
    // Size: 0x8
    // Offset: 0x40
    ::PowerUI::Element* Cursor;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // public System.Int32 CursorIndex
    // Size: 0x4
    // Offset: 0x48
    int CursorIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean LocateCursor
    // Size: 0x1
    // Offset: 0x4C
    bool LocateCursor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: LocateCursor and: MaxLength
    char __padding3[0x3] = {};
    // public System.Int32 MaxLength
    // Size: 0x4
    // Offset: 0x50
    int MaxLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: MaxLength and: Placeholder
    char __padding4[0x4] = {};
    // public System.String Placeholder
    // Size: 0x8
    // Offset: 0x58
    ::StringW Placeholder;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String Value
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Value();
    // Get instance field reference: public PowerUI.Element Cursor
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_Cursor();
    // Get instance field reference: public System.Int32 CursorIndex
    [[deprecated("Use field access instead!")]] int& dyn_CursorIndex();
    // Get instance field reference: public System.Boolean LocateCursor
    [[deprecated("Use field access instead!")]] bool& dyn_LocateCursor();
    // Get instance field reference: public System.Int32 MaxLength
    [[deprecated("Use field access instead!")]] int& dyn_MaxLength();
    // Get instance field reference: public System.String Placeholder
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Placeholder();
    // public System.Void SetValue(System.String value)
    // Offset: 0x1778214
    void SetValue(::StringW value);
    // public System.Void SetValue(System.String value, System.Boolean html)
    // Offset: 0x177844C
    void SetValue(::StringW value, bool html);
    // public System.Void MoveCursor(System.Int32 index)
    // Offset: 0x1778690
    void MoveCursor(int index);
    // public System.Void MoveCursor(System.Int32 index, System.Boolean immediate)
    // Offset: 0x1778C8C
    void MoveCursor(int index, bool immediate);
    // private System.Void LocateCursorNow()
    // Offset: 0x1778D50
    void LocateCursorNow();
    // private System.Boolean AtEnd(Wrench.MLLexer lexer)
    // Offset: 0x1778364
    bool AtEnd(::Wrench::MLLexer* lexer);
    // public System.Void .ctor()
    // Offset: 0x1777EEC
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::.ctor()
    // Base method: System.Void TagHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextareaTag* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::TextareaTag::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextareaTag*, creationType>()));
    }
    // public override System.String[] GetTags()
    // Offset: 0x1777F58
    // Implemented from: Wrench.TagHandler
    // Base method: System.String[] TagHandler::GetTags()
    ::ArrayW<::StringW> GetTags();
    // public override Wrench.TagHandler GetInstance()
    // Offset: 0x1778008
    // Implemented from: Wrench.TagHandler
    // Base method: Wrench.TagHandler TagHandler::GetInstance()
    ::Wrench::TagHandler* GetInstance();
    // public override System.Boolean OnAttributeChange(System.String property)
    // Offset: 0x1778060
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Boolean HtmlTagHandler::OnAttributeChange(System.String property)
    bool OnAttributeChange(::StringW property);
    // public override PowerUI.KeyboardMode OnShowMobileKeyboard()
    // Offset: 0x177821C
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: PowerUI.KeyboardMode HtmlTagHandler::OnShowMobileKeyboard()
    ::PowerUI::KeyboardMode* OnShowMobileKeyboard();
    // public override System.Void OnParseContent(Wrench.MLLexer lexer)
    // Offset: 0x1778278
    // Implemented from: Wrench.TagHandler
    // Base method: System.Void TagHandler::OnParseContent(Wrench.MLLexer lexer)
    void OnParseContent(::Wrench::MLLexer* lexer);
    // public override System.Void OnKeyPress(PowerUI.UIEvent pressEvent)
    // Offset: 0x1778698
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::OnKeyPress(PowerUI.UIEvent pressEvent)
    void OnKeyPress(::PowerUI::UIEvent* pressEvent);
    // public override System.Void OnRenderPass()
    // Offset: 0x1778D38
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::OnRenderPass()
    void OnRenderPass();
    // public override System.Void OnFocus()
    // Offset: 0x1779024
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::OnFocus()
    void OnFocus();
    // public override System.Void OnBlur()
    // Offset: 0x1779140
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Void HtmlTagHandler::OnBlur()
    void OnBlur();
    // public override System.Boolean OnClick(PowerUI.UIEvent clickEvent)
    // Offset: 0x1779234
    // Implemented from: PowerUI.HtmlTagHandler
    // Base method: System.Boolean HtmlTagHandler::OnClick(PowerUI.UIEvent clickEvent)
    bool OnClick(::PowerUI::UIEvent* clickEvent);
  }; // PowerUI.TextareaTag
  #pragma pack(pop)
  static check_size<sizeof(TextareaTag), 88 + sizeof(::StringW)> __PowerUI_TextareaTagSizeCheck;
  static_assert(sizeof(TextareaTag) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::TextareaTag::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextareaTag::*)(::StringW)>(&PowerUI::TextareaTag::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::TextareaTag::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextareaTag::*)(::StringW, bool)>(&PowerUI::TextareaTag::SetValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* html = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, html});
  }
};
// Writing MetadataGetter for method: PowerUI::TextareaTag::MoveCursor
// Il2CppName: MoveCursor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextareaTag::*)(int)>(&PowerUI::TextareaTag::MoveCursor)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "MoveCursor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: PowerUI::TextareaTag::MoveCursor
// Il2CppName: MoveCursor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextareaTag::*)(int, bool)>(&PowerUI::TextareaTag::MoveCursor)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* immediate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "MoveCursor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, immediate});
  }
};
// Writing MetadataGetter for method: PowerUI::TextareaTag::LocateCursorNow
// Il2CppName: LocateCursorNow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextareaTag::*)()>(&PowerUI::TextareaTag::LocateCursorNow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "LocateCursorNow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::TextareaTag::AtEnd
// Il2CppName: AtEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::TextareaTag::*)(::Wrench::MLLexer*)>(&PowerUI::TextareaTag::AtEnd)> {
  static const MethodInfo* get() {
    static auto* lexer = &::il2cpp_utils::GetClassFromName("Wrench", "MLLexer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "AtEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lexer});
  }
};
// Writing MetadataGetter for method: PowerUI::TextareaTag::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: PowerUI::TextareaTag::GetTags
// Il2CppName: GetTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (PowerUI::TextareaTag::*)()>(&PowerUI::TextareaTag::GetTags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "GetTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::TextareaTag::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (PowerUI::TextareaTag::*)()>(&PowerUI::TextareaTag::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::TextareaTag::OnAttributeChange
// Il2CppName: OnAttributeChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::TextareaTag::*)(::StringW)>(&PowerUI::TextareaTag::OnAttributeChange)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "OnAttributeChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: PowerUI::TextareaTag::OnShowMobileKeyboard
// Il2CppName: OnShowMobileKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::KeyboardMode* (PowerUI::TextareaTag::*)()>(&PowerUI::TextareaTag::OnShowMobileKeyboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "OnShowMobileKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::TextareaTag::OnParseContent
// Il2CppName: OnParseContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextareaTag::*)(::Wrench::MLLexer*)>(&PowerUI::TextareaTag::OnParseContent)> {
  static const MethodInfo* get() {
    static auto* lexer = &::il2cpp_utils::GetClassFromName("Wrench", "MLLexer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "OnParseContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lexer});
  }
};
// Writing MetadataGetter for method: PowerUI::TextareaTag::OnKeyPress
// Il2CppName: OnKeyPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextareaTag::*)(::PowerUI::UIEvent*)>(&PowerUI::TextareaTag::OnKeyPress)> {
  static const MethodInfo* get() {
    static auto* pressEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "OnKeyPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pressEvent});
  }
};
// Writing MetadataGetter for method: PowerUI::TextareaTag::OnRenderPass
// Il2CppName: OnRenderPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextareaTag::*)()>(&PowerUI::TextareaTag::OnRenderPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "OnRenderPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::TextareaTag::OnFocus
// Il2CppName: OnFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextareaTag::*)()>(&PowerUI::TextareaTag::OnFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "OnFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::TextareaTag::OnBlur
// Il2CppName: OnBlur
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::TextareaTag::*)()>(&PowerUI::TextareaTag::OnBlur)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "OnBlur", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::TextareaTag::OnClick
// Il2CppName: OnClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::TextareaTag::*)(::PowerUI::UIEvent*)>(&PowerUI::TextareaTag::OnClick)> {
  static const MethodInfo* get() {
    static auto* clickEvent = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::TextareaTag*), "OnClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clickEvent});
  }
};
