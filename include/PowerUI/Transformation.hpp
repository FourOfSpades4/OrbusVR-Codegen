// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: PowerUI.Css.PositionType
#include "PowerUI/Css/PositionType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI::Css
namespace PowerUI::Css {
  // Forward declaring type: ComputedStyle
  class ComputedStyle;
  // Forward declaring type: Value
  class Value;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector4
  struct Vector4;
}
// Completed forward declares
// Type namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: Transformation
  class Transformation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PowerUI::Transformation);
DEFINE_IL2CPP_ARG_TYPE(::PowerUI::Transformation*, "PowerUI", "Transformation");
// Type namespace: PowerUI
namespace PowerUI {
  // Size: 0x126
  #pragma pack(push, 1)
  // Autogenerated type: PowerUI.Transformation
  // [TokenAttribute] Offset: FFFFFFFF
  class Transformation : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean HasSkew
    // Size: 0x1
    // Offset: 0x10
    bool HasSkew;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _Changed
    // Size: 0x1
    // Offset: 0x11
    bool Changed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Changed and: Skew
    char __padding1[0x2] = {};
    // private UnityEngine.Matrix4x4 _Skew
    // Size: 0x40
    // Offset: 0x14
    ::UnityEngine::Matrix4x4 Skew;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private UnityEngine.Vector3 _Origin
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 Origin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Matrix4x4 _Matrix
    // Size: 0x40
    // Offset: 0x60
    ::UnityEngine::Matrix4x4 Matrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private UnityEngine.Vector3 _Translate
    // Size: 0xC
    // Offset: 0xA0
    ::UnityEngine::Vector3 Translate;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _Rotation
    // Size: 0x10
    // Offset: 0xAC
    ::UnityEngine::Quaternion Rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // Padding between fields: Rotation and: Parent
    char __padding6[0x4] = {};
    // public PowerUI.Transformation Parent
    // Size: 0x8
    // Offset: 0xC0
    ::PowerUI::Transformation* Parent;
    // Field size check
    static_assert(sizeof(::PowerUI::Transformation*) == 0x8);
    // private UnityEngine.Vector3 _OriginOffset
    // Size: 0xC
    // Offset: 0xC8
    ::UnityEngine::Vector3 OriginOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Matrix4x4 _LocalMatrix
    // Size: 0x40
    // Offset: 0xD4
    ::UnityEngine::Matrix4x4 LocalMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private UnityEngine.Vector3 _Scale
    // Size: 0xC
    // Offset: 0x114
    ::UnityEngine::Vector3 Scale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private PowerUI.Css.PositionType _OriginPosition
    // Size: 0x4
    // Offset: 0x120
    ::PowerUI::Css::PositionType OriginPosition;
    // Field size check
    static_assert(sizeof(::PowerUI::Css::PositionType) == 0x4);
    // private System.Boolean _OriginOffsetPercX
    // Size: 0x1
    // Offset: 0x124
    bool OriginOffsetPercX;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _OriginOffsetPercY
    // Size: 0x1
    // Offset: 0x125
    bool OriginOffsetPercY;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Boolean HasSkew
    [[deprecated("Use field access instead!")]] bool& dyn_HasSkew();
    // Get instance field reference: private System.Boolean _Changed
    [[deprecated("Use field access instead!")]] bool& dyn__Changed();
    // Get instance field reference: private UnityEngine.Matrix4x4 _Skew
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn__Skew();
    // Get instance field reference: private UnityEngine.Vector3 _Origin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__Origin();
    // Get instance field reference: private UnityEngine.Matrix4x4 _Matrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn__Matrix();
    // Get instance field reference: private UnityEngine.Vector3 _Translate
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__Translate();
    // Get instance field reference: private UnityEngine.Quaternion _Rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__Rotation();
    // Get instance field reference: public PowerUI.Transformation Parent
    [[deprecated("Use field access instead!")]] ::PowerUI::Transformation*& dyn_Parent();
    // Get instance field reference: private UnityEngine.Vector3 _OriginOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__OriginOffset();
    // Get instance field reference: private UnityEngine.Matrix4x4 _LocalMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn__LocalMatrix();
    // Get instance field reference: private UnityEngine.Vector3 _Scale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__Scale();
    // Get instance field reference: private PowerUI.Css.PositionType _OriginPosition
    [[deprecated("Use field access instead!")]] ::PowerUI::Css::PositionType& dyn__OriginPosition();
    // Get instance field reference: private System.Boolean _OriginOffsetPercX
    [[deprecated("Use field access instead!")]] bool& dyn__OriginOffsetPercX();
    // Get instance field reference: private System.Boolean _OriginOffsetPercY
    [[deprecated("Use field access instead!")]] bool& dyn__OriginOffsetPercY();
    // public UnityEngine.Matrix4x4 get_Matrix()
    // Offset: 0x177A898
    ::UnityEngine::Matrix4x4 get_Matrix();
    // public UnityEngine.Matrix4x4 get_LocalMatrix()
    // Offset: 0x177A8BC
    ::UnityEngine::Matrix4x4 get_LocalMatrix();
    // private System.Void CalculateOrigin(PowerUI.Css.ComputedStyle relativeTo)
    // Offset: 0x177A8E4
    void CalculateOrigin(::PowerUI::Css::ComputedStyle* relativeTo);
    // public System.Void RecalculateMatrix(PowerUI.Css.ComputedStyle style)
    // Offset: 0x177AAB8
    void RecalculateMatrix(::PowerUI::Css::ComputedStyle* style);
    // public System.Boolean get_Changed()
    // Offset: 0x177AFB8
    bool get_Changed();
    // public PowerUI.Css.PositionType get_OriginPosition()
    // Offset: 0x177AFC0
    ::PowerUI::Css::PositionType get_OriginPosition();
    // public System.Void set_OriginPosition(PowerUI.Css.PositionType value)
    // Offset: 0x177AFC8
    void set_OriginPosition(::PowerUI::Css::PositionType value);
    // public System.Void set_OriginOffset(PowerUI.Css.Value value)
    // Offset: 0x177AFD8
    void set_OriginOffset(::PowerUI::Css::Value* value);
    // public UnityEngine.Vector3 get_Scale()
    // Offset: 0x177B130
    ::UnityEngine::Vector3 get_Scale();
    // public System.Void set_Scale(UnityEngine.Vector3 value)
    // Offset: 0x177B140
    void set_Scale(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_Translate()
    // Offset: 0x177B158
    ::UnityEngine::Vector3 get_Translate();
    // public System.Void set_Translate(UnityEngine.Vector3 value)
    // Offset: 0x177B164
    void set_Translate(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_Rotation()
    // Offset: 0x177B178
    ::UnityEngine::Quaternion get_Rotation();
    // public System.Void set_Rotation(UnityEngine.Quaternion value)
    // Offset: 0x177B184
    void set_Rotation(::UnityEngine::Quaternion value);
    // public UnityEngine.Matrix4x4 get_Skew()
    // Offset: 0x177B198
    ::UnityEngine::Matrix4x4 get_Skew();
    // public System.Void set_Skew(UnityEngine.Matrix4x4 value)
    // Offset: 0x177B1BC
    void set_Skew(::UnityEngine::Matrix4x4 value);
    // public UnityEngine.Vector3 Apply(UnityEngine.Vector4 point)
    // Offset: 0x1763ED0
    ::UnityEngine::Vector3 Apply(::UnityEngine::Vector4 point);
    // public UnityEngine.Vector3 ApplyInverse(UnityEngine.Vector4 point)
    // Offset: 0x17637E0
    ::UnityEngine::Vector3 ApplyInverse(::UnityEngine::Vector4 point);
    // public System.Void .ctor()
    // Offset: 0x177B2B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Transformation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PowerUI::Transformation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Transformation*, creationType>()));
    }
  }; // PowerUI.Transformation
  #pragma pack(pop)
  static check_size<sizeof(Transformation), 293 + sizeof(bool)> __PowerUI_TransformationSizeCheck;
  static_assert(sizeof(Transformation) == 0x126);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PowerUI::Transformation::get_Matrix
// Il2CppName: get_Matrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (PowerUI::Transformation::*)()>(&PowerUI::Transformation::get_Matrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "get_Matrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::get_LocalMatrix
// Il2CppName: get_LocalMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (PowerUI::Transformation::*)()>(&PowerUI::Transformation::get_LocalMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "get_LocalMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::CalculateOrigin
// Il2CppName: CalculateOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Transformation::*)(::PowerUI::Css::ComputedStyle*)>(&PowerUI::Transformation::CalculateOrigin)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "CalculateOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::RecalculateMatrix
// Il2CppName: RecalculateMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Transformation::*)(::PowerUI::Css::ComputedStyle*)>(&PowerUI::Transformation::RecalculateMatrix)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "ComputedStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "RecalculateMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::get_Changed
// Il2CppName: get_Changed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PowerUI::Transformation::*)()>(&PowerUI::Transformation::get_Changed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "get_Changed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::get_OriginPosition
// Il2CppName: get_OriginPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::PowerUI::Css::PositionType (PowerUI::Transformation::*)()>(&PowerUI::Transformation::get_OriginPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "get_OriginPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::set_OriginPosition
// Il2CppName: set_OriginPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Transformation::*)(::PowerUI::Css::PositionType)>(&PowerUI::Transformation::set_OriginPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "PositionType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "set_OriginPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::set_OriginOffset
// Il2CppName: set_OriginOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Transformation::*)(::PowerUI::Css::Value*)>(&PowerUI::Transformation::set_OriginOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("PowerUI.Css", "Value")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "set_OriginOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::get_Scale
// Il2CppName: get_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (PowerUI::Transformation::*)()>(&PowerUI::Transformation::get_Scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "get_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::set_Scale
// Il2CppName: set_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Transformation::*)(::UnityEngine::Vector3)>(&PowerUI::Transformation::set_Scale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "set_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::get_Translate
// Il2CppName: get_Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (PowerUI::Transformation::*)()>(&PowerUI::Transformation::get_Translate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "get_Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::set_Translate
// Il2CppName: set_Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Transformation::*)(::UnityEngine::Vector3)>(&PowerUI::Transformation::set_Translate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "set_Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::get_Rotation
// Il2CppName: get_Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (PowerUI::Transformation::*)()>(&PowerUI::Transformation::get_Rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "get_Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::set_Rotation
// Il2CppName: set_Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Transformation::*)(::UnityEngine::Quaternion)>(&PowerUI::Transformation::set_Rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "set_Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::get_Skew
// Il2CppName: get_Skew
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (PowerUI::Transformation::*)()>(&PowerUI::Transformation::get_Skew)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "get_Skew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::set_Skew
// Il2CppName: set_Skew
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PowerUI::Transformation::*)(::UnityEngine::Matrix4x4)>(&PowerUI::Transformation::set_Skew)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "set_Skew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (PowerUI::Transformation::*)(::UnityEngine::Vector4)>(&PowerUI::Transformation::Apply)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::ApplyInverse
// Il2CppName: ApplyInverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (PowerUI::Transformation::*)(::UnityEngine::Vector4)>(&PowerUI::Transformation::ApplyInverse)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PowerUI::Transformation*), "ApplyInverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: PowerUI::Transformation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
