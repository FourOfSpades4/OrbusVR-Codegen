// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
  // Forward declaring type: Slider
  class Slider;
}
// Completed forward declares
// Type namespace: HUDGUIMedieval
namespace HUDGUIMedieval {
  // Forward declaring type: FillBySlider
  class FillBySlider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HUDGUIMedieval::FillBySlider);
DEFINE_IL2CPP_ARG_TYPE(::HUDGUIMedieval::FillBySlider*, "HUDGUIMedieval", "FillBySlider");
// Type namespace: HUDGUIMedieval
namespace HUDGUIMedieval {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: HUDGUIMedieval.FillBySlider
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD20D4
  class FillBySlider : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.UI.Image _image
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Image* image;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.UI.Image _image
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn__image();
    // private System.Void Awake()
    // Offset: 0x1493094
    void Awake();
    // public System.Void SetValue(UnityEngine.UI.Slider slider)
    // Offset: 0x14930EC
    void SetValue(::UnityEngine::UI::Slider* slider);
    // public System.Void .ctor()
    // Offset: 0x1493150
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FillBySlider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HUDGUIMedieval::FillBySlider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FillBySlider*, creationType>()));
    }
  }; // HUDGUIMedieval.FillBySlider
  #pragma pack(pop)
  static check_size<sizeof(FillBySlider), 24 + sizeof(::UnityEngine::UI::Image*)> __HUDGUIMedieval_FillBySliderSizeCheck;
  static_assert(sizeof(FillBySlider) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HUDGUIMedieval::FillBySlider::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HUDGUIMedieval::FillBySlider::*)()>(&HUDGUIMedieval::FillBySlider::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HUDGUIMedieval::FillBySlider*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HUDGUIMedieval::FillBySlider::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HUDGUIMedieval::FillBySlider::*)(::UnityEngine::UI::Slider*)>(&HUDGUIMedieval::FillBySlider::SetValue)> {
  static const MethodInfo* get() {
    static auto* slider = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Slider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HUDGUIMedieval::FillBySlider*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{slider});
  }
};
// Writing MetadataGetter for method: HUDGUIMedieval::FillBySlider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
