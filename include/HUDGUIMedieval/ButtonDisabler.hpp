// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
  // Forward declaring type: Button
  class Button;
}
// Completed forward declares
// Type namespace: HUDGUIMedieval
namespace HUDGUIMedieval {
  // Forward declaring type: ButtonDisabler
  class ButtonDisabler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HUDGUIMedieval::ButtonDisabler);
DEFINE_IL2CPP_ARG_TYPE(::HUDGUIMedieval::ButtonDisabler*, "HUDGUIMedieval", "ButtonDisabler");
// Type namespace: HUDGUIMedieval
namespace HUDGUIMedieval {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: HUDGUIMedieval.ButtonDisabler
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD1F70
  // [RequireComponent] Offset: AD1F70
  class ButtonDisabler : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Boolean _isEnabled
    // Size: 0x1
    // Offset: 0x18
    bool isEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isEnabled and: EnabledImage
    char __padding0[0x7] = {};
    // [HeaderAttribute] Offset: 0xAE1354
    // public UnityEngine.Sprite EnabledImage
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Sprite* EnabledImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // public UnityEngine.Sprite DisabledImage
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Sprite* DisabledImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private UnityEngine.UI.Image _image
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Image* image;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // private UnityEngine.UI.Button _button
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UI::Button* button;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean _isEnabled
    [[deprecated("Use field access instead!")]] bool& dyn__isEnabled();
    // Get instance field reference: public UnityEngine.Sprite EnabledImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn_EnabledImage();
    // Get instance field reference: public UnityEngine.Sprite DisabledImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn_DisabledImage();
    // Get instance field reference: private UnityEngine.UI.Image _image
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn__image();
    // Get instance field reference: private UnityEngine.UI.Button _button
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__button();
    // public System.Boolean get_IsEnabled()
    // Offset: 0x1492ABC
    bool get_IsEnabled();
    // public System.Void set_IsEnabled(System.Boolean value)
    // Offset: 0x1492AC4
    void set_IsEnabled(bool value);
    // private System.Void Awake()
    // Offset: 0x1492B4C
    void Awake();
    // public System.Void SetEnabled(System.Boolean value)
    // Offset: 0x1492ACC
    void SetEnabled(bool value);
    // public System.Void .ctor()
    // Offset: 0x1492BBC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ButtonDisabler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HUDGUIMedieval::ButtonDisabler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ButtonDisabler*, creationType>()));
    }
  }; // HUDGUIMedieval.ButtonDisabler
  #pragma pack(pop)
  static check_size<sizeof(ButtonDisabler), 56 + sizeof(::UnityEngine::UI::Button*)> __HUDGUIMedieval_ButtonDisablerSizeCheck;
  static_assert(sizeof(ButtonDisabler) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HUDGUIMedieval::ButtonDisabler::get_IsEnabled
// Il2CppName: get_IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HUDGUIMedieval::ButtonDisabler::*)()>(&HUDGUIMedieval::ButtonDisabler::get_IsEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HUDGUIMedieval::ButtonDisabler*), "get_IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HUDGUIMedieval::ButtonDisabler::set_IsEnabled
// Il2CppName: set_IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HUDGUIMedieval::ButtonDisabler::*)(bool)>(&HUDGUIMedieval::ButtonDisabler::set_IsEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HUDGUIMedieval::ButtonDisabler*), "set_IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HUDGUIMedieval::ButtonDisabler::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HUDGUIMedieval::ButtonDisabler::*)()>(&HUDGUIMedieval::ButtonDisabler::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HUDGUIMedieval::ButtonDisabler*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HUDGUIMedieval::ButtonDisabler::SetEnabled
// Il2CppName: SetEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HUDGUIMedieval::ButtonDisabler::*)(bool)>(&HUDGUIMedieval::ButtonDisabler::SetEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HUDGUIMedieval::ButtonDisabler*), "SetEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HUDGUIMedieval::ButtonDisabler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
