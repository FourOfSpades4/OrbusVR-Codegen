// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HUDGUIMedieval
namespace HUDGUIMedieval {
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: HUDGUIMedieval
namespace HUDGUIMedieval {
  // Forward declaring type: CastAnimationButton
  class CastAnimationButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HUDGUIMedieval::CastAnimationButton);
DEFINE_IL2CPP_ARG_TYPE(::HUDGUIMedieval::CastAnimationButton*, "HUDGUIMedieval", "CastAnimationButton");
// Type namespace: HUDGUIMedieval
namespace HUDGUIMedieval {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: HUDGUIMedieval.CastAnimationButton
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD2060
  class CastAnimationButton : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::HUDGUIMedieval::CastAnimationButton::$AnimationPlaying$d__7
    class $AnimationPlaying$d__7;
    public:
    // public System.Single CastTime
    // Size: 0x4
    // Offset: 0x18
    float CastTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _currentAnimTime
    // Size: 0x4
    // Offset: 0x1C
    float currentAnimTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _animating
    // Size: 0x1
    // Offset: 0x20
    bool animating;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: animating and: fillingImage
    char __padding2[0x7] = {};
    // private UnityEngine.UI.Image _fillingImage
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Image* fillingImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // private UnityEngine.UI.Button _button
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Button* button;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single CastTime
    [[deprecated("Use field access instead!")]] float& dyn_CastTime();
    // Get instance field reference: private System.Single _currentAnimTime
    [[deprecated("Use field access instead!")]] float& dyn__currentAnimTime();
    // Get instance field reference: private System.Boolean _animating
    [[deprecated("Use field access instead!")]] bool& dyn__animating();
    // Get instance field reference: private UnityEngine.UI.Image _fillingImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn__fillingImage();
    // Get instance field reference: private UnityEngine.UI.Button _button
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__button();
    // private System.Void Awake()
    // Offset: 0x1492CAC
    void Awake();
    // public System.Void StartAnimation()
    // Offset: 0x1492D50
    void StartAnimation();
    // private System.Collections.IEnumerator AnimationPlaying()
    // Offset: 0x1492D94
    ::System::Collections::IEnumerator* AnimationPlaying();
    // public System.Void .ctor()
    // Offset: 0x1492E34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CastAnimationButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HUDGUIMedieval::CastAnimationButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CastAnimationButton*, creationType>()));
    }
  }; // HUDGUIMedieval.CastAnimationButton
  #pragma pack(pop)
  static check_size<sizeof(CastAnimationButton), 48 + sizeof(::UnityEngine::UI::Button*)> __HUDGUIMedieval_CastAnimationButtonSizeCheck;
  static_assert(sizeof(CastAnimationButton) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HUDGUIMedieval::CastAnimationButton::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HUDGUIMedieval::CastAnimationButton::*)()>(&HUDGUIMedieval::CastAnimationButton::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HUDGUIMedieval::CastAnimationButton*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HUDGUIMedieval::CastAnimationButton::StartAnimation
// Il2CppName: StartAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HUDGUIMedieval::CastAnimationButton::*)()>(&HUDGUIMedieval::CastAnimationButton::StartAnimation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HUDGUIMedieval::CastAnimationButton*), "StartAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HUDGUIMedieval::CastAnimationButton::AnimationPlaying
// Il2CppName: AnimationPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (HUDGUIMedieval::CastAnimationButton::*)()>(&HUDGUIMedieval::CastAnimationButton::AnimationPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HUDGUIMedieval::CastAnimationButton*), "AnimationPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HUDGUIMedieval::CastAnimationButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
