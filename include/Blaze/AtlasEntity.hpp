// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: TextureAtlas
  class TextureAtlas;
  // Forward declaring type: AtlasLocation
  class AtlasLocation;
}
// Completed forward declares
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: AtlasEntity
  class AtlasEntity;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::AtlasEntity);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::AtlasEntity*, "Blaze", "AtlasEntity");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.AtlasEntity
  // [TokenAttribute] Offset: FFFFFFFF
  class AtlasEntity {
    public:
    // public System.Boolean MultiThreadDraw()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool MultiThreadDraw();
    // public System.Void GetDimensionsOnAtlas(out System.Int32 width, out System.Int32 height)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void GetDimensionsOnAtlas(ByRef<int> width, ByRef<int> height);
    // public System.Boolean DrawToAtlas(Blaze.TextureAtlas atlas, Blaze.AtlasLocation location)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool DrawToAtlas(::Blaze::TextureAtlas* atlas, ::Blaze::AtlasLocation* location);
    // public System.Int32 GetAtlasID()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetAtlasID();
  }; // Blaze.AtlasEntity
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::AtlasEntity::MultiThreadDraw
// Il2CppName: MultiThreadDraw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::AtlasEntity::*)()>(&Blaze::AtlasEntity::MultiThreadDraw)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasEntity*), "MultiThreadDraw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::AtlasEntity::GetDimensionsOnAtlas
// Il2CppName: GetDimensionsOnAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::AtlasEntity::*)(ByRef<int>, ByRef<int>)>(&Blaze::AtlasEntity::GetDimensionsOnAtlas)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasEntity*), "GetDimensionsOnAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height});
  }
};
// Writing MetadataGetter for method: Blaze::AtlasEntity::DrawToAtlas
// Il2CppName: DrawToAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::AtlasEntity::*)(::Blaze::TextureAtlas*, ::Blaze::AtlasLocation*)>(&Blaze::AtlasEntity::DrawToAtlas)> {
  static const MethodInfo* get() {
    static auto* atlas = &::il2cpp_utils::GetClassFromName("Blaze", "TextureAtlas")->byval_arg;
    static auto* location = &::il2cpp_utils::GetClassFromName("Blaze", "AtlasLocation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasEntity*), "DrawToAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{atlas, location});
  }
};
// Writing MetadataGetter for method: Blaze::AtlasEntity::GetAtlasID
// Il2CppName: GetAtlasID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Blaze::AtlasEntity::*)()>(&Blaze::AtlasEntity::GetAtlasID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasEntity*), "GetAtlasID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
