// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: ScannerPixel
  class ScannerPixel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::ScannerPixel);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::ScannerPixel*, "Blaze", "ScannerPixel");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.ScannerPixel
  // [TokenAttribute] Offset: FFFFFFFF
  class ScannerPixel : public ::Il2CppObject {
    public:
    public:
    // public System.Single X
    // Size: 0x4
    // Offset: 0x10
    float X;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Byte Fill
    // Size: 0x1
    // Offset: 0x14
    uint8_t Fill;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: Fill and: Next
    char __padding1[0x3] = {};
    // public Blaze.ScannerPixel Next
    // Size: 0x8
    // Offset: 0x18
    ::Blaze::ScannerPixel* Next;
    // Field size check
    static_assert(sizeof(::Blaze::ScannerPixel*) == 0x8);
    // public Blaze.ScannerPixel Previous
    // Size: 0x8
    // Offset: 0x20
    ::Blaze::ScannerPixel* Previous;
    // Field size check
    static_assert(sizeof(::Blaze::ScannerPixel*) == 0x8);
    public:
    // Get instance field reference: public System.Single X
    [[deprecated("Use field access instead!")]] float& dyn_X();
    // Get instance field reference: public System.Byte Fill
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Fill();
    // Get instance field reference: public Blaze.ScannerPixel Next
    [[deprecated("Use field access instead!")]] ::Blaze::ScannerPixel*& dyn_Next();
    // Get instance field reference: public Blaze.ScannerPixel Previous
    [[deprecated("Use field access instead!")]] ::Blaze::ScannerPixel*& dyn_Previous();
    // public System.Int32 get_PixelIndex()
    // Offset: 0x12BA2BC
    int get_PixelIndex();
    // public System.Void .ctor()
    // Offset: 0x12B9500
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScannerPixel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::ScannerPixel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScannerPixel*, creationType>()));
    }
  }; // Blaze.ScannerPixel
  #pragma pack(pop)
  static check_size<sizeof(ScannerPixel), 32 + sizeof(::Blaze::ScannerPixel*)> __Blaze_ScannerPixelSizeCheck;
  static_assert(sizeof(ScannerPixel) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::ScannerPixel::get_PixelIndex
// Il2CppName: get_PixelIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Blaze::ScannerPixel::*)()>(&Blaze::ScannerPixel::get_PixelIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::ScannerPixel*), "get_PixelIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::ScannerPixel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
