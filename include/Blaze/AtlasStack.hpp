// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Blaze.AtlasingMode
#include "Blaze/AtlasingMode.hpp"
// Including type: UnityEngine.FilterMode
#include "UnityEngine/FilterMode.hpp"
// Including type: UnityEngine.TextureFormat
#include "UnityEngine/TextureFormat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: TextureAtlas
  class TextureAtlas;
  // Forward declaring type: AtlasLocation
  class AtlasLocation;
  // Forward declaring type: AtlasEntity
  class AtlasEntity;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: AtlasStack
  class AtlasStack;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::AtlasStack);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::AtlasStack*, "Blaze", "AtlasStack");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.AtlasStack
  // [TokenAttribute] Offset: FFFFFFFF
  class AtlasStack : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 Spacing
    // Size: 0x4
    // Offset: 0x10
    int Spacing;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Blaze.AtlasingMode Mode
    // Size: 0x4
    // Offset: 0x14
    ::Blaze::AtlasingMode Mode;
    // Field size check
    static_assert(sizeof(::Blaze::AtlasingMode) == 0x4);
    // public System.Boolean FilterLocked
    // Size: 0x1
    // Offset: 0x18
    bool FilterLocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean PixelChange
    // Size: 0x1
    // Offset: 0x19
    bool PixelChange;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: PixelChange and: Last
    char __padding3[0x6] = {};
    // public Blaze.TextureAtlas Last
    // Size: 0x8
    // Offset: 0x20
    ::Blaze::TextureAtlas* Last;
    // Field size check
    static_assert(sizeof(::Blaze::TextureAtlas*) == 0x8);
    // public Blaze.TextureAtlas First
    // Size: 0x8
    // Offset: 0x28
    ::Blaze::TextureAtlas* First;
    // Field size check
    static_assert(sizeof(::Blaze::TextureAtlas*) == 0x8);
    // public System.Int32 InitialSize
    // Size: 0x4
    // Offset: 0x30
    int InitialSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean CPUAccess
    // Size: 0x1
    // Offset: 0x34
    bool CPUAccess;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean OptimizeRequested
    // Size: 0x1
    // Offset: 0x35
    bool OptimizeRequested;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: OptimizeRequested and: FilteringMode
    char __padding8[0x2] = {};
    // private UnityEngine.FilterMode FilteringMode
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::FilterMode FilteringMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::FilterMode) == 0x4);
    // public UnityEngine.TextureFormat Format
    // Size: 0x4
    // Offset: 0x3C
    ::UnityEngine::TextureFormat Format;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextureFormat) == 0x4);
    // public System.Collections.Generic.Dictionary`2<System.Int32,Blaze.AtlasLocation> ActiveImages
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Dictionary_2<int, ::Blaze::AtlasLocation*>* ActiveImages;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::Blaze::AtlasLocation*>*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 Spacing
    [[deprecated("Use field access instead!")]] int& dyn_Spacing();
    // Get instance field reference: public Blaze.AtlasingMode Mode
    [[deprecated("Use field access instead!")]] ::Blaze::AtlasingMode& dyn_Mode();
    // Get instance field reference: public System.Boolean FilterLocked
    [[deprecated("Use field access instead!")]] bool& dyn_FilterLocked();
    // Get instance field reference: public System.Boolean PixelChange
    [[deprecated("Use field access instead!")]] bool& dyn_PixelChange();
    // Get instance field reference: public Blaze.TextureAtlas Last
    [[deprecated("Use field access instead!")]] ::Blaze::TextureAtlas*& dyn_Last();
    // Get instance field reference: public Blaze.TextureAtlas First
    [[deprecated("Use field access instead!")]] ::Blaze::TextureAtlas*& dyn_First();
    // Get instance field reference: public System.Int32 InitialSize
    [[deprecated("Use field access instead!")]] int& dyn_InitialSize();
    // Get instance field reference: public System.Boolean CPUAccess
    [[deprecated("Use field access instead!")]] bool& dyn_CPUAccess();
    // Get instance field reference: System.Boolean OptimizeRequested
    [[deprecated("Use field access instead!")]] bool& dyn_OptimizeRequested();
    // Get instance field reference: private UnityEngine.FilterMode FilteringMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::FilterMode& dyn_FilteringMode();
    // Get instance field reference: public UnityEngine.TextureFormat Format
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextureFormat& dyn_Format();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.Int32,Blaze.AtlasLocation> ActiveImages
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::Blaze::AtlasLocation*>*& dyn_ActiveImages();
    // public System.Void .ctor(System.Int32 initialSize)
    // Offset: 0x12B5600
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AtlasStack* New_ctor(int initialSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AtlasStack*, creationType>(initialSize)));
    }
    // public System.Void .ctor(UnityEngine.TextureFormat format, System.Int32 initialSize)
    // Offset: 0x12B5694
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AtlasStack* New_ctor(::UnityEngine::TextureFormat format, int initialSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::AtlasStack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AtlasStack*, creationType>(format, initialSize)));
    }
    // public Blaze.AtlasLocation RequireImage(Blaze.AtlasEntity image)
    // Offset: 0x12B56C0
    ::Blaze::AtlasLocation* RequireImage(::Blaze::AtlasEntity* image);
    // public System.Boolean OptimiseIfNeeded()
    // Offset: 0x12B5AA0
    bool OptimiseIfNeeded();
    // public System.Int32 get_Count()
    // Offset: 0x12B5D98
    int get_Count();
    // public System.Void LockFilterMode(UnityEngine.FilterMode mode)
    // Offset: 0x12B5DBC
    void LockFilterMode(::UnityEngine::FilterMode mode);
    // public System.Void Clear()
    // Offset: 0x12B5DCC
    void Clear();
    // public System.Void Flush()
    // Offset: 0x12B5E30
    void Flush();
    // public System.Void Remove(Blaze.AtlasEntity texture)
    // Offset: 0x12B5E70
    void Remove(::Blaze::AtlasEntity* texture);
    // public Blaze.AtlasLocation Get(System.Int32 entityID)
    // Offset: 0x12B5F4C
    ::Blaze::AtlasLocation* Get(int entityID);
    // public System.Void Add(Blaze.TextureAtlas atlas)
    // Offset: 0x12B5D08
    void Add(::Blaze::TextureAtlas* atlas);
    // public UnityEngine.FilterMode get_FilterMode()
    // Offset: 0x12B5FCC
    ::UnityEngine::FilterMode get_FilterMode();
    // public System.Void set_FilterMode(UnityEngine.FilterMode value)
    // Offset: 0x12B5FD4
    void set_FilterMode(::UnityEngine::FilterMode value);
    // public Blaze.TextureAtlas Create()
    // Offset: 0x12B59C0
    ::Blaze::TextureAtlas* Create();
    // public Blaze.TextureAtlas get_Top()
    // Offset: 0x12B6028
    ::Blaze::TextureAtlas* get_Top();
  }; // Blaze.AtlasStack
  #pragma pack(pop)
  static check_size<sizeof(AtlasStack), 64 + sizeof(::System::Collections::Generic::Dictionary_2<int, ::Blaze::AtlasLocation*>*)> __Blaze_AtlasStackSizeCheck;
  static_assert(sizeof(AtlasStack) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::AtlasStack::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::AtlasStack::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::AtlasStack::RequireImage
// Il2CppName: RequireImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::AtlasLocation* (Blaze::AtlasStack::*)(::Blaze::AtlasEntity*)>(&Blaze::AtlasStack::RequireImage)> {
  static const MethodInfo* get() {
    static auto* image = &::il2cpp_utils::GetClassFromName("Blaze", "AtlasEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasStack*), "RequireImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{image});
  }
};
// Writing MetadataGetter for method: Blaze::AtlasStack::OptimiseIfNeeded
// Il2CppName: OptimiseIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::AtlasStack::*)()>(&Blaze::AtlasStack::OptimiseIfNeeded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasStack*), "OptimiseIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::AtlasStack::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Blaze::AtlasStack::*)()>(&Blaze::AtlasStack::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasStack*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::AtlasStack::LockFilterMode
// Il2CppName: LockFilterMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::AtlasStack::*)(::UnityEngine::FilterMode)>(&Blaze::AtlasStack::LockFilterMode)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasStack*), "LockFilterMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: Blaze::AtlasStack::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::AtlasStack::*)()>(&Blaze::AtlasStack::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasStack*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::AtlasStack::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::AtlasStack::*)()>(&Blaze::AtlasStack::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasStack*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::AtlasStack::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::AtlasStack::*)(::Blaze::AtlasEntity*)>(&Blaze::AtlasStack::Remove)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("Blaze", "AtlasEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasStack*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture});
  }
};
// Writing MetadataGetter for method: Blaze::AtlasStack::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::AtlasLocation* (Blaze::AtlasStack::*)(int)>(&Blaze::AtlasStack::Get)> {
  static const MethodInfo* get() {
    static auto* entityID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasStack*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entityID});
  }
};
// Writing MetadataGetter for method: Blaze::AtlasStack::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::AtlasStack::*)(::Blaze::TextureAtlas*)>(&Blaze::AtlasStack::Add)> {
  static const MethodInfo* get() {
    static auto* atlas = &::il2cpp_utils::GetClassFromName("Blaze", "TextureAtlas")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasStack*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{atlas});
  }
};
// Writing MetadataGetter for method: Blaze::AtlasStack::get_FilterMode
// Il2CppName: get_FilterMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::FilterMode (Blaze::AtlasStack::*)()>(&Blaze::AtlasStack::get_FilterMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasStack*), "get_FilterMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::AtlasStack::set_FilterMode
// Il2CppName: set_FilterMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::AtlasStack::*)(::UnityEngine::FilterMode)>(&Blaze::AtlasStack::set_FilterMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "FilterMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasStack*), "set_FilterMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Blaze::AtlasStack::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::TextureAtlas* (Blaze::AtlasStack::*)()>(&Blaze::AtlasStack::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasStack*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::AtlasStack::get_Top
// Il2CppName: get_Top
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::TextureAtlas* (Blaze::AtlasStack::*)()>(&Blaze::AtlasStack::get_Top)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::AtlasStack*), "get_Top", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
