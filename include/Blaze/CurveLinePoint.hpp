// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Blaze.QuadLinePoint
#include "Blaze/QuadLinePoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: VectorTransform
  class VectorTransform;
  // Forward declaring type: VectorPath
  class VectorPath;
  // Skipping declaration: VectorPoint because it is already included!
  // Forward declaring type: PointReceiver
  class PointReceiver;
}
// Completed forward declares
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: CurveLinePoint
  class CurveLinePoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::CurveLinePoint);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::CurveLinePoint*, "Blaze", "CurveLinePoint");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.CurveLinePoint
  // [TokenAttribute] Offset: FFFFFFFF
  class CurveLinePoint : public ::Blaze::QuadLinePoint {
    public:
    public:
    // public System.Single Control2X
    // Size: 0x4
    // Offset: 0x38
    float Control2X;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Control2Y
    // Size: 0x4
    // Offset: 0x3C
    float Control2Y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single Control2X
    [[deprecated("Use field access instead!")]] float& dyn_Control2X();
    // Get instance field reference: public System.Single Control2Y
    [[deprecated("Use field access instead!")]] float& dyn_Control2Y();
    // public System.Void .ctor(System.Single x, System.Single y)
    // Offset: 0x12B6120
    // Implemented from: Blaze.QuadLinePoint
    // Base method: System.Void QuadLinePoint::.ctor(System.Single x, System.Single y)
    // Base method: System.Void VectorLine::.ctor(System.Single x, System.Single y)
    // Base method: System.Void VectorPoint::.ctor(System.Single x, System.Single y)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CurveLinePoint* New_ctor(float x, float y) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::CurveLinePoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CurveLinePoint*, creationType>(x, y)));
    }
    // public override System.Void Transform(Blaze.VectorTransform transform)
    // Offset: 0x12B6130
    // Implemented from: Blaze.QuadLinePoint
    // Base method: System.Void QuadLinePoint::Transform(Blaze.VectorTransform transform)
    void Transform(::Blaze::VectorTransform* transform);
    // public override System.Void RecalculateBounds(Blaze.VectorPath path)
    // Offset: 0x12B632C
    // Implemented from: Blaze.QuadLinePoint
    // Base method: System.Void QuadLinePoint::RecalculateBounds(Blaze.VectorPath path)
    void RecalculateBounds(::Blaze::VectorPath* path);
    // public override System.Void SampleAt(System.Single t, out System.Single x, out System.Single y)
    // Offset: 0x12B6680
    // Implemented from: Blaze.QuadLinePoint
    // Base method: System.Void QuadLinePoint::SampleAt(System.Single t, out System.Single x, out System.Single y)
    void SampleAt(float t, ByRef<float> x, ByRef<float> y);
    // public override Blaze.VectorPoint Split(System.Single t, Blaze.VectorPath path)
    // Offset: 0x12B6850
    // Implemented from: Blaze.QuadLinePoint
    // Base method: Blaze.VectorPoint QuadLinePoint::Split(System.Single t, Blaze.VectorPath path)
    ::Blaze::VectorPoint* Split(float t, ::Blaze::VectorPath* path);
    // public override System.Void NormalAt(System.Single t, out System.Single x, out System.Single y)
    // Offset: 0x12B6A88
    // Implemented from: Blaze.QuadLinePoint
    // Base method: System.Void QuadLinePoint::NormalAt(System.Single t, out System.Single x, out System.Single y)
    void NormalAt(float t, ByRef<float> x, ByRef<float> y);
    // public override System.Void StartNormal(out System.Single x, out System.Single y)
    // Offset: 0x12B6C64
    // Implemented from: Blaze.QuadLinePoint
    // Base method: System.Void QuadLinePoint::StartNormal(out System.Single x, out System.Single y)
    void StartNormal(ByRef<float> x, ByRef<float> y);
    // public override System.Void EndNormal(out System.Single x, out System.Single y)
    // Offset: 0x12B6CDC
    // Implemented from: Blaze.QuadLinePoint
    // Base method: System.Void QuadLinePoint::EndNormal(out System.Single x, out System.Single y)
    void EndNormal(ByRef<float> x, ByRef<float> y);
    // public override System.Void ComputeLinePoints(Blaze.PointReceiver output)
    // Offset: 0x12B6CF0
    // Implemented from: Blaze.QuadLinePoint
    // Base method: System.Void QuadLinePoint::ComputeLinePoints(Blaze.PointReceiver output)
    void ComputeLinePoints(::Blaze::PointReceiver* output);
    // public override Blaze.VectorPoint Copy()
    // Offset: 0x12B6FD0
    // Implemented from: Blaze.QuadLinePoint
    // Base method: Blaze.VectorPoint QuadLinePoint::Copy()
    ::Blaze::VectorPoint* Copy();
    // public override System.String ToString()
    // Offset: 0x12B70D4
    // Implemented from: Blaze.QuadLinePoint
    // Base method: System.String QuadLinePoint::ToString()
    ::StringW ToString();
    // public override System.Void Multiply(System.Single by)
    // Offset: 0x12B75E4
    // Implemented from: Blaze.QuadLinePoint
    // Base method: System.Void QuadLinePoint::Multiply(System.Single by)
    void Multiply(float by);
    // public override System.Void Squash(System.Single by)
    // Offset: 0x12B762C
    // Implemented from: Blaze.QuadLinePoint
    // Base method: System.Void QuadLinePoint::Squash(System.Single by)
    void Squash(float by);
    // public override System.Void Sheer(System.Single by)
    // Offset: 0x12B7660
    // Implemented from: Blaze.QuadLinePoint
    // Base method: System.Void QuadLinePoint::Sheer(System.Single by)
    void Sheer(float by);
  }; // Blaze.CurveLinePoint
  #pragma pack(pop)
  static check_size<sizeof(CurveLinePoint), 60 + sizeof(float)> __Blaze_CurveLinePointSizeCheck;
  static_assert(sizeof(CurveLinePoint) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::CurveLinePoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::CurveLinePoint::Transform
// Il2CppName: Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::CurveLinePoint::*)(::Blaze::VectorTransform*)>(&Blaze::CurveLinePoint::Transform)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("Blaze", "VectorTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::CurveLinePoint*), "Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: Blaze::CurveLinePoint::RecalculateBounds
// Il2CppName: RecalculateBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::CurveLinePoint::*)(::Blaze::VectorPath*)>(&Blaze::CurveLinePoint::RecalculateBounds)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Blaze", "VectorPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::CurveLinePoint*), "RecalculateBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Blaze::CurveLinePoint::SampleAt
// Il2CppName: SampleAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::CurveLinePoint::*)(float, ByRef<float>, ByRef<float>)>(&Blaze::CurveLinePoint::SampleAt)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::CurveLinePoint*), "SampleAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, x, y});
  }
};
// Writing MetadataGetter for method: Blaze::CurveLinePoint::Split
// Il2CppName: Split
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::VectorPoint* (Blaze::CurveLinePoint::*)(float, ::Blaze::VectorPath*)>(&Blaze::CurveLinePoint::Split)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("Blaze", "VectorPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::CurveLinePoint*), "Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, path});
  }
};
// Writing MetadataGetter for method: Blaze::CurveLinePoint::NormalAt
// Il2CppName: NormalAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::CurveLinePoint::*)(float, ByRef<float>, ByRef<float>)>(&Blaze::CurveLinePoint::NormalAt)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::CurveLinePoint*), "NormalAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, x, y});
  }
};
// Writing MetadataGetter for method: Blaze::CurveLinePoint::StartNormal
// Il2CppName: StartNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::CurveLinePoint::*)(ByRef<float>, ByRef<float>)>(&Blaze::CurveLinePoint::StartNormal)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::CurveLinePoint*), "StartNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::CurveLinePoint::EndNormal
// Il2CppName: EndNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::CurveLinePoint::*)(ByRef<float>, ByRef<float>)>(&Blaze::CurveLinePoint::EndNormal)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::CurveLinePoint*), "EndNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::CurveLinePoint::ComputeLinePoints
// Il2CppName: ComputeLinePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::CurveLinePoint::*)(::Blaze::PointReceiver*)>(&Blaze::CurveLinePoint::ComputeLinePoints)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("Blaze", "PointReceiver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::CurveLinePoint*), "ComputeLinePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: Blaze::CurveLinePoint::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::VectorPoint* (Blaze::CurveLinePoint::*)()>(&Blaze::CurveLinePoint::Copy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::CurveLinePoint*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::CurveLinePoint::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Blaze::CurveLinePoint::*)()>(&Blaze::CurveLinePoint::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::CurveLinePoint*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::CurveLinePoint::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::CurveLinePoint::*)(float)>(&Blaze::CurveLinePoint::Multiply)> {
  static const MethodInfo* get() {
    static auto* by = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::CurveLinePoint*), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{by});
  }
};
// Writing MetadataGetter for method: Blaze::CurveLinePoint::Squash
// Il2CppName: Squash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::CurveLinePoint::*)(float)>(&Blaze::CurveLinePoint::Squash)> {
  static const MethodInfo* get() {
    static auto* by = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::CurveLinePoint*), "Squash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{by});
  }
};
// Writing MetadataGetter for method: Blaze::CurveLinePoint::Sheer
// Il2CppName: Sheer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::CurveLinePoint::*)(float)>(&Blaze::CurveLinePoint::Sheer)> {
  static const MethodInfo* get() {
    static auto* by = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::CurveLinePoint*), "Sheer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{by});
  }
};
