// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Blaze.SubScanPixel
#include "Blaze/SubScanPixel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: Scanner
  class Scanner;
  // Forward declaring type: ScannerPixel
  class ScannerPixel;
}
// Completed forward declares
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: ScannerScanLine
  class ScannerScanLine;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::ScannerScanLine);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::ScannerScanLine*, "Blaze", "ScannerScanLine");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.ScannerScanLine
  // [TokenAttribute] Offset: FFFFFFFF
  class ScannerScanLine : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 Count
    // Size: 0x4
    // Offset: 0x10
    int Count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Count and: Scanner
    char __padding0[0x4] = {};
    // public Blaze.Scanner Scanner
    // Size: 0x8
    // Offset: 0x18
    ::Blaze::Scanner* Scanner;
    // Field size check
    static_assert(sizeof(::Blaze::Scanner*) == 0x8);
    // public Blaze.ScannerPixel Last
    // Size: 0x8
    // Offset: 0x20
    ::Blaze::ScannerPixel* Last;
    // Field size check
    static_assert(sizeof(::Blaze::ScannerPixel*) == 0x8);
    // public Blaze.ScannerPixel First
    // Size: 0x8
    // Offset: 0x28
    ::Blaze::ScannerPixel* First;
    // Field size check
    static_assert(sizeof(::Blaze::ScannerPixel*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 Count
    [[deprecated("Use field access instead!")]] int& dyn_Count();
    // Get instance field reference: public Blaze.Scanner Scanner
    [[deprecated("Use field access instead!")]] ::Blaze::Scanner*& dyn_Scanner();
    // Get instance field reference: public Blaze.ScannerPixel Last
    [[deprecated("Use field access instead!")]] ::Blaze::ScannerPixel*& dyn_Last();
    // Get instance field reference: public Blaze.ScannerPixel First
    [[deprecated("Use field access instead!")]] ::Blaze::ScannerPixel*& dyn_First();
    // public System.Void .ctor(Blaze.Scanner scanner)
    // Offset: 0x12BA1CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScannerScanLine* New_ctor(::Blaze::Scanner* scanner) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::ScannerScanLine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScannerScanLine*, creationType>(scanner)));
    }
    // public System.Void Clear()
    // Offset: 0x12BA1F8
    void Clear();
    // public Blaze.SubScanPixel[] Flatten()
    // Offset: 0x12BA2F4
    ::ArrayW<::Blaze::SubScanPixel> Flatten();
    // public System.Void Add(Blaze.ScannerPixel pixel)
    // Offset: 0x12B9508
    void Add(::Blaze::ScannerPixel* pixel);
  }; // Blaze.ScannerScanLine
  #pragma pack(pop)
  static check_size<sizeof(ScannerScanLine), 40 + sizeof(::Blaze::ScannerPixel*)> __Blaze_ScannerScanLineSizeCheck;
  static_assert(sizeof(ScannerScanLine) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::ScannerScanLine::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::ScannerScanLine::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::ScannerScanLine::*)()>(&Blaze::ScannerScanLine::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::ScannerScanLine*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::ScannerScanLine::Flatten
// Il2CppName: Flatten
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Blaze::SubScanPixel> (Blaze::ScannerScanLine::*)()>(&Blaze::ScannerScanLine::Flatten)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::ScannerScanLine*), "Flatten", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::ScannerScanLine::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::ScannerScanLine::*)(::Blaze::ScannerPixel*)>(&Blaze::ScannerScanLine::Add)> {
  static const MethodInfo* get() {
    static auto* pixel = &::il2cpp_utils::GetClassFromName("Blaze", "ScannerPixel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::ScannerScanLine*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pixel});
  }
};
