// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Blaze.VectorLine
#include "Blaze/VectorLine.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: VectorTransform
  class VectorTransform;
  // Forward declaring type: VectorPath
  class VectorPath;
  // Forward declaring type: PointReceiver
  class PointReceiver;
}
// Completed forward declares
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: ArcLinePoint
  class ArcLinePoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::ArcLinePoint);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::ArcLinePoint*, "Blaze", "ArcLinePoint");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.ArcLinePoint
  // [TokenAttribute] Offset: FFFFFFFF
  class ArcLinePoint : public ::Blaze::VectorLine {
    public:
    public:
    // public System.Single Radius
    // Size: 0x4
    // Offset: 0x30
    float Radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single EndAngle
    // Size: 0x4
    // Offset: 0x34
    float EndAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single StartAngle
    // Size: 0x4
    // Offset: 0x38
    float StartAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single CircleCenterX
    // Size: 0x4
    // Offset: 0x3C
    float CircleCenterX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single CircleCenterY
    // Size: 0x4
    // Offset: 0x40
    float CircleCenterY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single Radius
    [[deprecated("Use field access instead!")]] float& dyn_Radius();
    // Get instance field reference: public System.Single EndAngle
    [[deprecated("Use field access instead!")]] float& dyn_EndAngle();
    // Get instance field reference: public System.Single StartAngle
    [[deprecated("Use field access instead!")]] float& dyn_StartAngle();
    // Get instance field reference: public System.Single CircleCenterX
    [[deprecated("Use field access instead!")]] float& dyn_CircleCenterX();
    // Get instance field reference: public System.Single CircleCenterY
    [[deprecated("Use field access instead!")]] float& dyn_CircleCenterY();
    // public System.Void .ctor(System.Single x, System.Single y)
    // Offset: 0x12B401C
    // Implemented from: Blaze.VectorLine
    // Base method: System.Void VectorLine::.ctor(System.Single x, System.Single y)
    // Base method: System.Void VectorPoint::.ctor(System.Single x, System.Single y)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ArcLinePoint* New_ctor(float x, float y) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::ArcLinePoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ArcLinePoint*, creationType>(x, y)));
    }
    // public override System.Void Transform(Blaze.VectorTransform transform)
    // Offset: 0x12B4024
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Void VectorPoint::Transform(Blaze.VectorTransform transform)
    void Transform(::Blaze::VectorTransform* transform);
    // public override System.Void RecalculateBounds(Blaze.VectorPath path)
    // Offset: 0x12B4124
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Void VectorPoint::RecalculateBounds(Blaze.VectorPath path)
    void RecalculateBounds(::Blaze::VectorPath* path);
    // public override System.Void ComputeLinePoints(Blaze.PointReceiver output)
    // Offset: 0x12B41DC
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Void VectorPoint::ComputeLinePoints(Blaze.PointReceiver output)
    void ComputeLinePoints(::Blaze::PointReceiver* output);
    // public override System.Void SampleAt(System.Single t, out System.Single x, out System.Single y)
    // Offset: 0x12B4378
    // Implemented from: Blaze.VectorLine
    // Base method: System.Void VectorLine::SampleAt(System.Single t, out System.Single x, out System.Single y)
    void SampleAt(float t, ByRef<float> x, ByRef<float> y);
    // public override System.Boolean get_IsCurve()
    // Offset: 0x12B4458
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Boolean VectorPoint::get_IsCurve()
    bool get_IsCurve();
    // public override Blaze.VectorPoint Copy()
    // Offset: 0x12B4460
    // Implemented from: Blaze.VectorPoint
    // Base method: Blaze.VectorPoint VectorPoint::Copy()
    ::Blaze::VectorPoint* Copy();
    // public override System.String ToString()
    // Offset: 0x12B4590
    // Implemented from: Blaze.VectorPoint
    // Base method: System.String VectorPoint::ToString()
    ::StringW ToString();
  }; // Blaze.ArcLinePoint
  #pragma pack(pop)
  static check_size<sizeof(ArcLinePoint), 64 + sizeof(float)> __Blaze_ArcLinePointSizeCheck;
  static_assert(sizeof(ArcLinePoint) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::ArcLinePoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::ArcLinePoint::Transform
// Il2CppName: Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::ArcLinePoint::*)(::Blaze::VectorTransform*)>(&Blaze::ArcLinePoint::Transform)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("Blaze", "VectorTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::ArcLinePoint*), "Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: Blaze::ArcLinePoint::RecalculateBounds
// Il2CppName: RecalculateBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::ArcLinePoint::*)(::Blaze::VectorPath*)>(&Blaze::ArcLinePoint::RecalculateBounds)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Blaze", "VectorPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::ArcLinePoint*), "RecalculateBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Blaze::ArcLinePoint::ComputeLinePoints
// Il2CppName: ComputeLinePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::ArcLinePoint::*)(::Blaze::PointReceiver*)>(&Blaze::ArcLinePoint::ComputeLinePoints)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("Blaze", "PointReceiver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::ArcLinePoint*), "ComputeLinePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: Blaze::ArcLinePoint::SampleAt
// Il2CppName: SampleAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::ArcLinePoint::*)(float, ByRef<float>, ByRef<float>)>(&Blaze::ArcLinePoint::SampleAt)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::ArcLinePoint*), "SampleAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, x, y});
  }
};
// Writing MetadataGetter for method: Blaze::ArcLinePoint::get_IsCurve
// Il2CppName: get_IsCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::ArcLinePoint::*)()>(&Blaze::ArcLinePoint::get_IsCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::ArcLinePoint*), "get_IsCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::ArcLinePoint::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::VectorPoint* (Blaze::ArcLinePoint::*)()>(&Blaze::ArcLinePoint::Copy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::ArcLinePoint*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::ArcLinePoint::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Blaze::ArcLinePoint::*)()>(&Blaze::ArcLinePoint::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::ArcLinePoint*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
