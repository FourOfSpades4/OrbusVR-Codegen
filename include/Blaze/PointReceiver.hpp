// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: PointReceiver
  class PointReceiver;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::PointReceiver);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::PointReceiver*, "Blaze", "PointReceiver");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.PointReceiver
  // [TokenAttribute] Offset: FFFFFFFF
  class PointReceiver {
    public:
    // public System.Single get_ExtrudeBy()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_ExtrudeBy();
    // public System.Void set_ExtrudeBy(System.Single value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_ExtrudeBy(float value);
    // public System.Single get_SampleDistance()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_SampleDistance();
    // public System.Void set_SampleDistance(System.Single value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_SampleDistance(float value);
    // public System.Void MoveTo(System.Single x, System.Single y)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void MoveTo(float x, float y);
    // public System.Void AddPoint(System.Single x, System.Single y)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddPoint(float x, float y);
  }; // Blaze.PointReceiver
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::PointReceiver::get_ExtrudeBy
// Il2CppName: get_ExtrudeBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Blaze::PointReceiver::*)()>(&Blaze::PointReceiver::get_ExtrudeBy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::PointReceiver*), "get_ExtrudeBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::PointReceiver::set_ExtrudeBy
// Il2CppName: set_ExtrudeBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::PointReceiver::*)(float)>(&Blaze::PointReceiver::set_ExtrudeBy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::PointReceiver*), "set_ExtrudeBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Blaze::PointReceiver::get_SampleDistance
// Il2CppName: get_SampleDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Blaze::PointReceiver::*)()>(&Blaze::PointReceiver::get_SampleDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::PointReceiver*), "get_SampleDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::PointReceiver::set_SampleDistance
// Il2CppName: set_SampleDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::PointReceiver::*)(float)>(&Blaze::PointReceiver::set_SampleDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::PointReceiver*), "set_SampleDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Blaze::PointReceiver::MoveTo
// Il2CppName: MoveTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::PointReceiver::*)(float, float)>(&Blaze::PointReceiver::MoveTo)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::PointReceiver*), "MoveTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::PointReceiver::AddPoint
// Il2CppName: AddPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::PointReceiver::*)(float, float)>(&Blaze::PointReceiver::AddPoint)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::PointReceiver*), "AddPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
