// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Blaze.SubScanPixel
#include "Blaze/SubScanPixel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: SubRaster
  class SubRaster;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::SubRaster);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::SubRaster*, "Blaze", "SubRaster");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.SubRaster
  // [TokenAttribute] Offset: FFFFFFFF
  class SubRaster : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 Width
    // Size: 0x4
    // Offset: 0x10
    int Width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Width and: Intersects
    char __padding0[0x4] = {};
    // public Blaze.SubScanPixel[][] Intersects
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::ArrayW<::Blaze::SubScanPixel>> Intersects;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<::Blaze::SubScanPixel>>) == 0x8);
    public:
    // Get instance field reference: public System.Int32 Width
    [[deprecated("Use field access instead!")]] int& dyn_Width();
    // Get instance field reference: public Blaze.SubScanPixel[][] Intersects
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<::Blaze::SubScanPixel>>& dyn_Intersects();
    // public System.Int32 get_Height()
    // Offset: 0xDD90CC
    int get_Height();
    // public System.Void .ctor()
    // Offset: 0xDD90F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SubRaster* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::SubRaster::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SubRaster*, creationType>()));
    }
  }; // Blaze.SubRaster
  #pragma pack(pop)
  static check_size<sizeof(SubRaster), 24 + sizeof(::ArrayW<::ArrayW<::Blaze::SubScanPixel>>)> __Blaze_SubRasterSizeCheck;
  static_assert(sizeof(SubRaster) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::SubRaster::get_Height
// Il2CppName: get_Height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Blaze::SubRaster::*)()>(&Blaze::SubRaster::get_Height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::SubRaster*), "get_Height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::SubRaster::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
