// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Blaze.PointReceiver
#include "Blaze/PointReceiver.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: DistanceCacheSquare
  class DistanceCacheSquare;
  // Forward declaring type: ScannerPixel
  class ScannerPixel;
  // Forward declaring type: ScannerScanLine
  class ScannerScanLine;
  // Forward declaring type: VectorPath
  class VectorPath;
}
// Completed forward declares
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: Scanner
  class Scanner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::Scanner);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::Scanner*, "Blaze", "Scanner");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.Scanner
  // [TokenAttribute] Offset: FFFFFFFF
  class Scanner : public ::Il2CppObject/*, public ::Blaze::PointReceiver*/ {
    public:
    public:
    // public System.Int32 BlurSpread
    // Size: 0x4
    // Offset: 0x10
    int BlurSpread;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single ScalarX
    // Size: 0x4
    // Offset: 0x14
    float ScalarX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ScalarY
    // Size: 0x4
    // Offset: 0x18
    float ScalarY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single RawSampleDistance
    // Size: 0x4
    // Offset: 0x1C
    float RawSampleDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Int32 PooledPixels
    // Size: 0x4
    // Offset: 0x20
    int PooledPixels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: PooledPixels and: DistanceCache
    char __padding4[0x4] = {};
    // Blaze.DistanceCacheSquare[] DistanceCache
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::Blaze::DistanceCacheSquare*> DistanceCache;
    // Field size check
    static_assert(sizeof(::ArrayW<::Blaze::DistanceCacheSquare*>) == 0x8);
    // System.Int32 DistanceCacheWidth
    // Size: 0x4
    // Offset: 0x30
    int DistanceCacheWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 DistanceCacheHeight
    // Size: 0x4
    // Offset: 0x34
    int DistanceCacheHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean Blurred
    // Size: 0x1
    // Offset: 0x38
    bool Blurred;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Blurred and: DoubleBlurSpread
    char __padding8[0x3] = {};
    // private System.Int32 DoubleBlurSpread
    // Size: 0x4
    // Offset: 0x3C
    int DoubleBlurSpread;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single HalfBlurSpreadF
    // Size: 0x4
    // Offset: 0x40
    float HalfBlurSpreadF;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 HalfBlurSpread
    // Size: 0x4
    // Offset: 0x44
    int HalfBlurSpread;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single VerticalOffset
    // Size: 0x4
    // Offset: 0x48
    float VerticalOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single HorizontalOffset
    // Size: 0x4
    // Offset: 0x4C
    float HorizontalOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Blaze.ScannerPixel FirstPooled
    // Size: 0x8
    // Offset: 0x50
    ::Blaze::ScannerPixel* FirstPooled;
    // Field size check
    static_assert(sizeof(::Blaze::ScannerPixel*) == 0x8);
    // private Blaze.ScannerScanLine[] ScanLineBuffer
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::Blaze::ScannerScanLine*> ScanLineBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::Blaze::ScannerScanLine*>) == 0x8);
    // public System.Boolean RequiresStart
    // Size: 0x1
    // Offset: 0x60
    bool RequiresStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: RequiresStart and: MaxDistance
    char __padding16[0x3] = {};
    // private System.Single MaxDistance
    // Size: 0x4
    // Offset: 0x64
    float MaxDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single MaxDistanceSquared
    // Size: 0x4
    // Offset: 0x68
    float MaxDistanceSquared;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single DistanceAdjuster
    // Size: 0x4
    // Offset: 0x6C
    float DistanceAdjuster;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 RawSDFSize
    // Size: 0x4
    // Offset: 0x70
    int RawSDFSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean WentUp
    // Size: 0x1
    // Offset: 0x74
    bool WentUp;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: WentUp and: MoveToY
    char __padding21[0x3] = {};
    // private System.Int32 MoveToY
    // Size: 0x4
    // Offset: 0x78
    int MoveToY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 PreviousY
    // Size: 0x4
    // Offset: 0x7C
    int PreviousY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 LineChangeY
    // Size: 0x4
    // Offset: 0x80
    int LineChangeY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single LineChangeX
    // Size: 0x4
    // Offset: 0x84
    float LineChangeX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean LineChangeWentUp
    // Size: 0x1
    // Offset: 0x88
    bool LineChangeWentUp;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: LineChangeWentUp and: SDFExtrudeBy
    char __padding26[0x3] = {};
    // private System.Single SDFExtrudeBy
    // Size: 0x4
    // Offset: 0x8C
    float SDFExtrudeBy;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Blaze::PointReceiver
    operator ::Blaze::PointReceiver() noexcept {
      return *reinterpret_cast<::Blaze::PointReceiver*>(this);
    }
    // static field const value: static System.Int32 MaxPoolCount
    static constexpr const int MaxPoolCount = 50;
    // Get static field: static System.Int32 MaxPoolCount
    static int _get_MaxPoolCount();
    // Set static field: static System.Int32 MaxPoolCount
    static void _set_MaxPoolCount(int value);
    // Get instance field reference: public System.Int32 BlurSpread
    [[deprecated("Use field access instead!")]] int& dyn_BlurSpread();
    // Get instance field reference: public System.Single ScalarX
    [[deprecated("Use field access instead!")]] float& dyn_ScalarX();
    // Get instance field reference: public System.Single ScalarY
    [[deprecated("Use field access instead!")]] float& dyn_ScalarY();
    // Get instance field reference: System.Single RawSampleDistance
    [[deprecated("Use field access instead!")]] float& dyn_RawSampleDistance();
    // Get instance field reference: System.Int32 PooledPixels
    [[deprecated("Use field access instead!")]] int& dyn_PooledPixels();
    // Get instance field reference: Blaze.DistanceCacheSquare[] DistanceCache
    [[deprecated("Use field access instead!")]] ::ArrayW<::Blaze::DistanceCacheSquare*>& dyn_DistanceCache();
    // Get instance field reference: System.Int32 DistanceCacheWidth
    [[deprecated("Use field access instead!")]] int& dyn_DistanceCacheWidth();
    // Get instance field reference: System.Int32 DistanceCacheHeight
    [[deprecated("Use field access instead!")]] int& dyn_DistanceCacheHeight();
    // Get instance field reference: private System.Boolean Blurred
    [[deprecated("Use field access instead!")]] bool& dyn_Blurred();
    // Get instance field reference: private System.Int32 DoubleBlurSpread
    [[deprecated("Use field access instead!")]] int& dyn_DoubleBlurSpread();
    // Get instance field reference: private System.Single HalfBlurSpreadF
    [[deprecated("Use field access instead!")]] float& dyn_HalfBlurSpreadF();
    // Get instance field reference: private System.Int32 HalfBlurSpread
    [[deprecated("Use field access instead!")]] int& dyn_HalfBlurSpread();
    // Get instance field reference: public System.Single VerticalOffset
    [[deprecated("Use field access instead!")]] float& dyn_VerticalOffset();
    // Get instance field reference: public System.Single HorizontalOffset
    [[deprecated("Use field access instead!")]] float& dyn_HorizontalOffset();
    // Get instance field reference: Blaze.ScannerPixel FirstPooled
    [[deprecated("Use field access instead!")]] ::Blaze::ScannerPixel*& dyn_FirstPooled();
    // Get instance field reference: private Blaze.ScannerScanLine[] ScanLineBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::Blaze::ScannerScanLine*>& dyn_ScanLineBuffer();
    // Get instance field reference: public System.Boolean RequiresStart
    [[deprecated("Use field access instead!")]] bool& dyn_RequiresStart();
    // Get instance field reference: private System.Single MaxDistance
    [[deprecated("Use field access instead!")]] float& dyn_MaxDistance();
    // Get instance field reference: private System.Single MaxDistanceSquared
    [[deprecated("Use field access instead!")]] float& dyn_MaxDistanceSquared();
    // Get instance field reference: private System.Single DistanceAdjuster
    [[deprecated("Use field access instead!")]] float& dyn_DistanceAdjuster();
    // Get instance field reference: private System.Int32 RawSDFSize
    [[deprecated("Use field access instead!")]] int& dyn_RawSDFSize();
    // Get instance field reference: private System.Boolean WentUp
    [[deprecated("Use field access instead!")]] bool& dyn_WentUp();
    // Get instance field reference: private System.Int32 MoveToY
    [[deprecated("Use field access instead!")]] int& dyn_MoveToY();
    // Get instance field reference: private System.Int32 PreviousY
    [[deprecated("Use field access instead!")]] int& dyn_PreviousY();
    // Get instance field reference: private System.Int32 LineChangeY
    [[deprecated("Use field access instead!")]] int& dyn_LineChangeY();
    // Get instance field reference: private System.Single LineChangeX
    [[deprecated("Use field access instead!")]] float& dyn_LineChangeX();
    // Get instance field reference: private System.Boolean LineChangeWentUp
    [[deprecated("Use field access instead!")]] bool& dyn_LineChangeWentUp();
    // Get instance field reference: private System.Single SDFExtrudeBy
    [[deprecated("Use field access instead!")]] float& dyn_SDFExtrudeBy();
    // public System.Single get_ExtrudeBy()
    // Offset: 0x12B8EB4
    float get_ExtrudeBy();
    // public System.Void set_ExtrudeBy(System.Single value)
    // Offset: 0x12B8EBC
    void set_ExtrudeBy(float value);
    // public System.Single get_SampleDistance()
    // Offset: 0x12B8EC4
    float get_SampleDistance();
    // public System.Void set_SampleDistance(System.Single value)
    // Offset: 0x12B8ECC
    void set_SampleDistance(float value);
    // public System.Int32 get_SDFSize()
    // Offset: 0x12B8ED4
    int get_SDFSize();
    // public System.Void set_SDFSize(System.Int32 value)
    // Offset: 0x12B8EDC
    void set_SDFSize(int value);
    // public System.Boolean get_SDF()
    // Offset: 0x12B8F00
    bool get_SDF();
    // public System.Void set_SDF(System.Boolean value)
    // Offset: 0x12B8F08
    void set_SDF(bool value);
    // public System.Single get_ScaleY()
    // Offset: 0x12B8F3C
    float get_ScaleY();
    // public System.Void set_ScaleY(System.Single value)
    // Offset: 0x12B8F44
    void set_ScaleY(float value);
    // public System.Single get_ScaleX()
    // Offset: 0x12B8F4C
    float get_ScaleX();
    // public System.Void set_ScaleX(System.Single value)
    // Offset: 0x12B8F54
    void set_ScaleX(float value);
    // public System.Single get_Scale()
    // Offset: 0x12B8F5C
    float get_Scale();
    // public System.Void set_Scale(System.Single value)
    // Offset: 0x12B8F64
    void set_Scale(float value);
    // public System.Int32 get_DrawHeight()
    // Offset: 0x12B8F6C
    int get_DrawHeight();
    // public System.Void set_DrawHeight(System.Int32 value)
    // Offset: 0x12B8F78
    void set_DrawHeight(int value);
    // public System.Void Start()
    // Offset: 0x12B8F9C
    void Start();
    // public System.Void CreateDistanceCache()
    // Offset: 0x12B9030
    void CreateDistanceCache();
    // public System.Void MoveTo(System.Single x, System.Single y)
    // Offset: 0x12B9214
    void MoveTo(float x, float y);
    // public System.Void AddPoint(System.Single x, System.Single y)
    // Offset: 0x12B9238
    void AddPoint(float x, float y);
    // private System.Void AddPixel(System.Single x, System.Int32 y)
    // Offset: 0x12B9400
    void AddPixel(float x, int y);
    // public System.Void ReindexDistanceCache()
    // Offset: 0x12B9620
    void ReindexDistanceCache();
    // public System.Void ClearDistanceCache()
    // Offset: 0x12B96C4
    void ClearDistanceCache();
    // public System.Boolean Rasterise(Blaze.VectorPath glyph, UnityEngine.Color32[] atlasPixels, System.Int32 atlasWidth, System.Int32 baseIndex, System.Int32 width, System.Int32 height, System.Single hOffset, System.Single vOffset, UnityEngine.Color32 fill, System.Boolean clear)
    // Offset: 0x12B9764
    bool Rasterise(::Blaze::VectorPath* glyph, ::ArrayW<::UnityEngine::Color32> atlasPixels, int atlasWidth, int baseIndex, int width, int height, float hOffset, float vOffset, ::UnityEngine::Color32 fill, bool clear);
    // public System.Void .ctor()
    // Offset: 0x12BA2C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Scanner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::Scanner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Scanner*, creationType>()));
    }
  }; // Blaze.Scanner
  #pragma pack(pop)
  static check_size<sizeof(Scanner), 140 + sizeof(float)> __Blaze_ScannerSizeCheck;
  static_assert(sizeof(Scanner) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::Scanner::get_ExtrudeBy
// Il2CppName: get_ExtrudeBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Blaze::Scanner::*)()>(&Blaze::Scanner::get_ExtrudeBy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "get_ExtrudeBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::set_ExtrudeBy
// Il2CppName: set_ExtrudeBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Scanner::*)(float)>(&Blaze::Scanner::set_ExtrudeBy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "set_ExtrudeBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::get_SampleDistance
// Il2CppName: get_SampleDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Blaze::Scanner::*)()>(&Blaze::Scanner::get_SampleDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "get_SampleDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::set_SampleDistance
// Il2CppName: set_SampleDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Scanner::*)(float)>(&Blaze::Scanner::set_SampleDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "set_SampleDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::get_SDFSize
// Il2CppName: get_SDFSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Blaze::Scanner::*)()>(&Blaze::Scanner::get_SDFSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "get_SDFSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::set_SDFSize
// Il2CppName: set_SDFSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Scanner::*)(int)>(&Blaze::Scanner::set_SDFSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "set_SDFSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::get_SDF
// Il2CppName: get_SDF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::Scanner::*)()>(&Blaze::Scanner::get_SDF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "get_SDF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::set_SDF
// Il2CppName: set_SDF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Scanner::*)(bool)>(&Blaze::Scanner::set_SDF)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "set_SDF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::get_ScaleY
// Il2CppName: get_ScaleY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Blaze::Scanner::*)()>(&Blaze::Scanner::get_ScaleY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "get_ScaleY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::set_ScaleY
// Il2CppName: set_ScaleY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Scanner::*)(float)>(&Blaze::Scanner::set_ScaleY)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "set_ScaleY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::get_ScaleX
// Il2CppName: get_ScaleX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Blaze::Scanner::*)()>(&Blaze::Scanner::get_ScaleX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "get_ScaleX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::set_ScaleX
// Il2CppName: set_ScaleX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Scanner::*)(float)>(&Blaze::Scanner::set_ScaleX)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "set_ScaleX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::get_Scale
// Il2CppName: get_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Blaze::Scanner::*)()>(&Blaze::Scanner::get_Scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "get_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::set_Scale
// Il2CppName: set_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Scanner::*)(float)>(&Blaze::Scanner::set_Scale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "set_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::get_DrawHeight
// Il2CppName: get_DrawHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Blaze::Scanner::*)()>(&Blaze::Scanner::get_DrawHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "get_DrawHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::set_DrawHeight
// Il2CppName: set_DrawHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Scanner::*)(int)>(&Blaze::Scanner::set_DrawHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "set_DrawHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Scanner::*)()>(&Blaze::Scanner::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::CreateDistanceCache
// Il2CppName: CreateDistanceCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Scanner::*)()>(&Blaze::Scanner::CreateDistanceCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "CreateDistanceCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::MoveTo
// Il2CppName: MoveTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Scanner::*)(float, float)>(&Blaze::Scanner::MoveTo)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "MoveTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::AddPoint
// Il2CppName: AddPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Scanner::*)(float, float)>(&Blaze::Scanner::AddPoint)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "AddPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::AddPixel
// Il2CppName: AddPixel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Scanner::*)(float, int)>(&Blaze::Scanner::AddPixel)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "AddPixel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::ReindexDistanceCache
// Il2CppName: ReindexDistanceCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Scanner::*)()>(&Blaze::Scanner::ReindexDistanceCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "ReindexDistanceCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::ClearDistanceCache
// Il2CppName: ClearDistanceCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Scanner::*)()>(&Blaze::Scanner::ClearDistanceCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "ClearDistanceCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::Rasterise
// Il2CppName: Rasterise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::Scanner::*)(::Blaze::VectorPath*, ::ArrayW<::UnityEngine::Color32>, int, int, int, int, float, float, ::UnityEngine::Color32, bool)>(&Blaze::Scanner::Rasterise)> {
  static const MethodInfo* get() {
    static auto* glyph = &::il2cpp_utils::GetClassFromName("Blaze", "VectorPath")->byval_arg;
    static auto* atlasPixels = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    static auto* atlasWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* baseIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* vOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fill = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* clear = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Scanner*), "Rasterise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glyph, atlasPixels, atlasWidth, baseIndex, width, height, hOffset, vOffset, fill, clear});
  }
};
// Writing MetadataGetter for method: Blaze::Scanner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
