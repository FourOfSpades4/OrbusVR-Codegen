// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: UVBlock
  class UVBlock;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::UVBlock);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::UVBlock*, "Blaze", "UVBlock");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.UVBlock
  // [TokenAttribute] Offset: FFFFFFFF
  class UVBlock : public ::Il2CppObject {
    public:
    public:
    // public System.Single MinX
    // Size: 0x4
    // Offset: 0x10
    float MinX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single MinY
    // Size: 0x4
    // Offset: 0x14
    float MinY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single MaxX
    // Size: 0x4
    // Offset: 0x18
    float MaxX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single MaxY
    // Size: 0x4
    // Offset: 0x1C
    float MaxY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single MinX
    [[deprecated("Use field access instead!")]] float& dyn_MinX();
    // Get instance field reference: public System.Single MinY
    [[deprecated("Use field access instead!")]] float& dyn_MinY();
    // Get instance field reference: public System.Single MaxX
    [[deprecated("Use field access instead!")]] float& dyn_MaxX();
    // Get instance field reference: public System.Single MaxY
    [[deprecated("Use field access instead!")]] float& dyn_MaxY();
    // public System.Void .ctor()
    // Offset: 0xDDAA98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UVBlock* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::UVBlock::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UVBlock*, creationType>()));
    }
    // public System.Void .ctor(Blaze.UVBlock copy)
    // Offset: 0xDDAAA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UVBlock* New_ctor(::Blaze::UVBlock* copy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::UVBlock::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UVBlock*, creationType>(copy)));
    }
    // public System.Void .ctor(System.Single minX, System.Single maxX, System.Single minY, System.Single maxY)
    // Offset: 0xDDAB34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UVBlock* New_ctor(float minX, float maxX, float minY, float maxY) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::UVBlock::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UVBlock*, creationType>(minX, maxX, minY, maxY)));
    }
    // public System.Void Write(UnityEngine.Vector2[] buffer, System.Int32 index)
    // Offset: 0xDDAB80
    void Write(::ArrayW<::UnityEngine::Vector2> buffer, int index);
    // public System.Boolean get_Shared()
    // Offset: 0xDDACD8
    bool get_Shared();
  }; // Blaze.UVBlock
  #pragma pack(pop)
  static check_size<sizeof(UVBlock), 28 + sizeof(float)> __Blaze_UVBlockSizeCheck;
  static_assert(sizeof(UVBlock) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::UVBlock::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::UVBlock::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::UVBlock::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::UVBlock::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::UVBlock::*)(::ArrayW<::UnityEngine::Vector2>, int)>(&Blaze::UVBlock::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::UVBlock*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index});
  }
};
// Writing MetadataGetter for method: Blaze::UVBlock::get_Shared
// Il2CppName: get_Shared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::UVBlock::*)()>(&Blaze::UVBlock::get_Shared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::UVBlock*), "get_Shared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
