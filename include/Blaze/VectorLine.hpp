// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Blaze.VectorPoint
#include "Blaze/VectorPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: VectorLine
  class VectorLine;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::VectorLine);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::VectorLine*, "Blaze", "VectorLine");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.VectorLine
  // [TokenAttribute] Offset: FFFFFFFF
  class VectorLine : public ::Blaze::VectorPoint {
    public:
    public:
    // public System.Boolean Close
    // Size: 0x1
    // Offset: 0x28
    bool Close;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Close and: Length
    char __padding0[0x3] = {};
    // public System.Single Length
    // Size: 0x4
    // Offset: 0x2C
    float Length;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Boolean Close
    [[deprecated("Use field access instead!")]] bool& dyn_Close();
    // Get instance field reference: public System.Single Length
    [[deprecated("Use field access instead!")]] float& dyn_Length();
    // public System.Void SampleAt(System.Single c, out System.Single x, out System.Single y)
    // Offset: 0xDDAD50
    void SampleAt(float c, ByRef<float> x, ByRef<float> y);
    // public System.Void .ctor(System.Single x, System.Single y)
    // Offset: 0xDDACE0
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Void VectorPoint::.ctor(System.Single x, System.Single y)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VectorLine* New_ctor(float x, float y) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::VectorLine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VectorLine*, creationType>(x, y)));
    }
    // public override System.Boolean get_IsClose()
    // Offset: 0xDDAD64
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Boolean VectorPoint::get_IsClose()
    bool get_IsClose();
    // public override System.Void set_IsClose(System.Boolean value)
    // Offset: 0xDDAD6C
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Void VectorPoint::set_IsClose(System.Boolean value)
    void set_IsClose(bool value);
    // public override System.Boolean get_HasLine()
    // Offset: 0xDDAD78
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Boolean VectorPoint::get_HasLine()
    bool get_HasLine();
  }; // Blaze.VectorLine
  #pragma pack(pop)
  static check_size<sizeof(VectorLine), 44 + sizeof(float)> __Blaze_VectorLineSizeCheck;
  static_assert(sizeof(VectorLine) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::VectorLine::SampleAt
// Il2CppName: SampleAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorLine::*)(float, ByRef<float>, ByRef<float>)>(&Blaze::VectorLine::SampleAt)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorLine*), "SampleAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, x, y});
  }
};
// Writing MetadataGetter for method: Blaze::VectorLine::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::VectorLine::get_IsClose
// Il2CppName: get_IsClose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::VectorLine::*)()>(&Blaze::VectorLine::get_IsClose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorLine*), "get_IsClose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorLine::set_IsClose
// Il2CppName: set_IsClose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorLine::*)(bool)>(&Blaze::VectorLine::set_IsClose)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorLine*), "set_IsClose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Blaze::VectorLine::get_HasLine
// Il2CppName: get_HasLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::VectorLine::*)()>(&Blaze::VectorLine::get_HasLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorLine*), "get_HasLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
