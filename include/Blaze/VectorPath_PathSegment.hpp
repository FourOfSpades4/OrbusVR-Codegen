// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Blaze.VectorPath
#include "Blaze/VectorPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: VectorPoint
  class VectorPoint;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::VectorPath::PathSegment);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::VectorPath::PathSegment*, "Blaze", "VectorPath/PathSegment");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.VectorPath/PathSegment
  // [TokenAttribute] Offset: FFFFFFFF
  class VectorPath::PathSegment : public ::Il2CppObject {
    public:
    public:
    // public Blaze.VectorPath Path
    // Size: 0x8
    // Offset: 0x10
    ::Blaze::VectorPath* Path;
    // Field size check
    static_assert(sizeof(::Blaze::VectorPath*) == 0x8);
    // public Blaze.VectorPoint Last
    // Size: 0x8
    // Offset: 0x18
    ::Blaze::VectorPoint* Last;
    // Field size check
    static_assert(sizeof(::Blaze::VectorPoint*) == 0x8);
    // public Blaze.VectorPoint First
    // Size: 0x8
    // Offset: 0x20
    ::Blaze::VectorPoint* First;
    // Field size check
    static_assert(sizeof(::Blaze::VectorPoint*) == 0x8);
    public:
    // Get instance field reference: public Blaze.VectorPath Path
    [[deprecated("Use field access instead!")]] ::Blaze::VectorPath*& dyn_Path();
    // Get instance field reference: public Blaze.VectorPoint Last
    [[deprecated("Use field access instead!")]] ::Blaze::VectorPoint*& dyn_Last();
    // Get instance field reference: public Blaze.VectorPoint First
    [[deprecated("Use field access instead!")]] ::Blaze::VectorPoint*& dyn_First();
    // public System.Void .ctor(Blaze.VectorPoint first, Blaze.VectorPath path)
    // Offset: 0xDDB9E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VectorPath::PathSegment* New_ctor(::Blaze::VectorPoint* first, ::Blaze::VectorPath* path) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::VectorPath::PathSegment::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VectorPath::PathSegment*, creationType>(first, path)));
    }
    // public System.Boolean Contains(System.Single x, System.Single y)
    // Offset: 0xDDBA20
    bool Contains(float x, float y);
    // public Blaze.VectorPoint Nearest(System.Single x, System.Single y)
    // Offset: 0xDDBA6C
    ::Blaze::VectorPoint* Nearest(float x, float y);
    // public System.Void Remove()
    // Offset: 0xDDBAFC
    void Remove();
  }; // Blaze.VectorPath/PathSegment
  #pragma pack(pop)
  static check_size<sizeof(VectorPath::PathSegment), 32 + sizeof(::Blaze::VectorPoint*)> __Blaze_VectorPath_PathSegmentSizeCheck;
  static_assert(sizeof(VectorPath::PathSegment) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::VectorPath::PathSegment::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::VectorPath::PathSegment::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::VectorPath::PathSegment::*)(float, float)>(&Blaze::VectorPath::PathSegment::Contains)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath::PathSegment*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::PathSegment::Nearest
// Il2CppName: Nearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::VectorPoint* (Blaze::VectorPath::PathSegment::*)(float, float)>(&Blaze::VectorPath::PathSegment::Nearest)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath::PathSegment*), "Nearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::PathSegment::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPath::PathSegment::*)()>(&Blaze::VectorPath::PathSegment::Remove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath::PathSegment*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
