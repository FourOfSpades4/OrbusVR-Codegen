// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: VectorTransform
  class VectorTransform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::VectorTransform);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::VectorTransform*, "Blaze", "VectorTransform");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.VectorTransform
  // [TokenAttribute] Offset: FFFFFFFF
  class VectorTransform : public ::Il2CppObject {
    public:
    public:
    // public System.Single Dx
    // Size: 0x4
    // Offset: 0x10
    float Dx;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Dy
    // Size: 0x4
    // Offset: 0x14
    float Dy;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Scale01
    // Size: 0x4
    // Offset: 0x18
    float Scale01;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Scale10
    // Size: 0x4
    // Offset: 0x1C
    float Scale10;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 Index
    // Size: 0x4
    // Offset: 0x20
    int Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single XScale
    // Size: 0x4
    // Offset: 0x24
    float XScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single YScale
    // Size: 0x4
    // Offset: 0x28
    float YScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: YScale and: Next
    char __padding6[0x4] = {};
    // public Blaze.VectorTransform Next
    // Size: 0x8
    // Offset: 0x30
    ::Blaze::VectorTransform* Next;
    // Field size check
    static_assert(sizeof(::Blaze::VectorTransform*) == 0x8);
    public:
    // Get instance field reference: public System.Single Dx
    [[deprecated("Use field access instead!")]] float& dyn_Dx();
    // Get instance field reference: public System.Single Dy
    [[deprecated("Use field access instead!")]] float& dyn_Dy();
    // Get instance field reference: public System.Single Scale01
    [[deprecated("Use field access instead!")]] float& dyn_Scale01();
    // Get instance field reference: public System.Single Scale10
    [[deprecated("Use field access instead!")]] float& dyn_Scale10();
    // Get instance field reference: public System.Int32 Index
    [[deprecated("Use field access instead!")]] int& dyn_Index();
    // Get instance field reference: public System.Single XScale
    [[deprecated("Use field access instead!")]] float& dyn_XScale();
    // Get instance field reference: public System.Single YScale
    [[deprecated("Use field access instead!")]] float& dyn_YScale();
    // Get instance field reference: public Blaze.VectorTransform Next
    [[deprecated("Use field access instead!")]] ::Blaze::VectorTransform*& dyn_Next();
    // public System.Void .ctor()
    // Offset: 0xDDC3FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VectorTransform* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::VectorTransform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VectorTransform*, creationType>()));
    }
    // public System.Void .ctor(System.Int32 index)
    // Offset: 0xDDC40C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VectorTransform* New_ctor(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::VectorTransform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VectorTransform*, creationType>(index)));
    }
  }; // Blaze.VectorTransform
  #pragma pack(pop)
  static check_size<sizeof(VectorTransform), 48 + sizeof(::Blaze::VectorTransform*)> __Blaze_VectorTransformSizeCheck;
  static_assert(sizeof(VectorTransform) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::VectorTransform::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::VectorTransform::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
