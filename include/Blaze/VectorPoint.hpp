// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: VectorPath
  class VectorPath;
  // Forward declaring type: PointReceiver
  class PointReceiver;
  // Forward declaring type: VectorTransform
  class VectorTransform;
}
// Completed forward declares
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: VectorPoint
  class VectorPoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::VectorPoint);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::VectorPoint*, "Blaze", "VectorPoint");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.VectorPoint
  // [TokenAttribute] Offset: FFFFFFFF
  class VectorPoint : public ::Il2CppObject {
    public:
    public:
    // public System.Single X
    // Size: 0x4
    // Offset: 0x10
    float X;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Y
    // Size: 0x4
    // Offset: 0x14
    float Y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Blaze.VectorPoint Next
    // Size: 0x8
    // Offset: 0x18
    ::Blaze::VectorPoint* Next;
    // Field size check
    static_assert(sizeof(::Blaze::VectorPoint*) == 0x8);
    // public Blaze.VectorPoint Previous
    // Size: 0x8
    // Offset: 0x20
    ::Blaze::VectorPoint* Previous;
    // Field size check
    static_assert(sizeof(::Blaze::VectorPoint*) == 0x8);
    public:
    // Get instance field reference: public System.Single X
    [[deprecated("Use field access instead!")]] float& dyn_X();
    // Get instance field reference: public System.Single Y
    [[deprecated("Use field access instead!")]] float& dyn_Y();
    // Get instance field reference: public Blaze.VectorPoint Next
    [[deprecated("Use field access instead!")]] ::Blaze::VectorPoint*& dyn_Next();
    // Get instance field reference: public Blaze.VectorPoint Previous
    [[deprecated("Use field access instead!")]] ::Blaze::VectorPoint*& dyn_Previous();
    // public System.Void .ctor()
    // Offset: 0xDDC15C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VectorPoint* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::VectorPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VectorPoint*, creationType>()));
    }
    // public System.Void .ctor(System.Single x, System.Single y)
    // Offset: 0xDDAD18
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VectorPoint* New_ctor(float x, float y) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::VectorPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VectorPoint*, creationType>(x, y)));
    }
    // public System.Boolean get_Unloaded()
    // Offset: 0xDDC164
    bool get_Unloaded();
    // public System.Void RecalculateBounds(Blaze.VectorPath path)
    // Offset: 0xDDC16C
    void RecalculateBounds(::Blaze::VectorPath* path);
    // public Blaze.VectorPoint Split(System.Single t, Blaze.VectorPath path)
    // Offset: 0xDDC1F4
    ::Blaze::VectorPoint* Split(float t, ::Blaze::VectorPath* path);
    // public System.Void ComputeLinePoints(Blaze.PointReceiver output)
    // Offset: 0xDDC1FC
    void ComputeLinePoints(::Blaze::PointReceiver* output);
    // public System.Boolean get_IsCurve()
    // Offset: 0xDDC200
    bool get_IsCurve();
    // public System.Boolean get_HasLine()
    // Offset: 0xDDC208
    bool get_HasLine();
    // public System.Void StartNormal(out System.Single x, out System.Single y)
    // Offset: 0xDDC210
    void StartNormal(ByRef<float> x, ByRef<float> y);
    // public System.Void EndNormal(out System.Single x, out System.Single y)
    // Offset: 0xDDC21C
    void EndNormal(ByRef<float> x, ByRef<float> y);
    // public Blaze.VectorPoint Copy()
    // Offset: 0xDDC228
    ::Blaze::VectorPoint* Copy();
    // public Blaze.VectorPoint GetShapeEnd()
    // Offset: 0xDDC230
    ::Blaze::VectorPoint* GetShapeEnd();
    // public System.Void Transform(Blaze.VectorTransform transform)
    // Offset: 0xDDC27C
    void Transform(::Blaze::VectorTransform* transform);
    // public System.Boolean get_IsClose()
    // Offset: 0xDDC370
    bool get_IsClose();
    // public System.Void set_IsClose(System.Boolean value)
    // Offset: 0xDDC378
    void set_IsClose(bool value);
    // public System.Void Multiply(System.Single by)
    // Offset: 0xDDC3C4
    void Multiply(float by);
    // public System.Void Squash(System.Single by)
    // Offset: 0xDDC3D8
    void Squash(float by);
    // public System.Void Sheer(System.Single by)
    // Offset: 0xDDC3E8
    void Sheer(float by);
    // public override System.String ToString()
    // Offset: 0xDDC37C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Blaze.VectorPoint
  #pragma pack(pop)
  static check_size<sizeof(VectorPoint), 32 + sizeof(::Blaze::VectorPoint*)> __Blaze_VectorPointSizeCheck;
  static_assert(sizeof(VectorPoint) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::VectorPoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::VectorPoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::VectorPoint::get_Unloaded
// Il2CppName: get_Unloaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::VectorPoint::*)()>(&Blaze::VectorPoint::get_Unloaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "get_Unloaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::RecalculateBounds
// Il2CppName: RecalculateBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPoint::*)(::Blaze::VectorPath*)>(&Blaze::VectorPoint::RecalculateBounds)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Blaze", "VectorPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "RecalculateBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::Split
// Il2CppName: Split
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::VectorPoint* (Blaze::VectorPoint::*)(float, ::Blaze::VectorPath*)>(&Blaze::VectorPoint::Split)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("Blaze", "VectorPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, path});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::ComputeLinePoints
// Il2CppName: ComputeLinePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPoint::*)(::Blaze::PointReceiver*)>(&Blaze::VectorPoint::ComputeLinePoints)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("Blaze", "PointReceiver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "ComputeLinePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::get_IsCurve
// Il2CppName: get_IsCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::VectorPoint::*)()>(&Blaze::VectorPoint::get_IsCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "get_IsCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::get_HasLine
// Il2CppName: get_HasLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::VectorPoint::*)()>(&Blaze::VectorPoint::get_HasLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "get_HasLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::StartNormal
// Il2CppName: StartNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPoint::*)(ByRef<float>, ByRef<float>)>(&Blaze::VectorPoint::StartNormal)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "StartNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::EndNormal
// Il2CppName: EndNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPoint::*)(ByRef<float>, ByRef<float>)>(&Blaze::VectorPoint::EndNormal)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "EndNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::VectorPoint* (Blaze::VectorPoint::*)()>(&Blaze::VectorPoint::Copy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::GetShapeEnd
// Il2CppName: GetShapeEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::VectorPoint* (Blaze::VectorPoint::*)()>(&Blaze::VectorPoint::GetShapeEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "GetShapeEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::Transform
// Il2CppName: Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPoint::*)(::Blaze::VectorTransform*)>(&Blaze::VectorPoint::Transform)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("Blaze", "VectorTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::get_IsClose
// Il2CppName: get_IsClose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::VectorPoint::*)()>(&Blaze::VectorPoint::get_IsClose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "get_IsClose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::set_IsClose
// Il2CppName: set_IsClose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPoint::*)(bool)>(&Blaze::VectorPoint::set_IsClose)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "set_IsClose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPoint::*)(float)>(&Blaze::VectorPoint::Multiply)> {
  static const MethodInfo* get() {
    static auto* by = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{by});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::Squash
// Il2CppName: Squash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPoint::*)(float)>(&Blaze::VectorPoint::Squash)> {
  static const MethodInfo* get() {
    static auto* by = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "Squash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{by});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::Sheer
// Il2CppName: Sheer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPoint::*)(float)>(&Blaze::VectorPoint::Sheer)> {
  static const MethodInfo* get() {
    static auto* by = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "Sheer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{by});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPoint::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Blaze::VectorPoint::*)()>(&Blaze::VectorPoint::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPoint*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
