// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: DistanceCachePoint
  struct DistanceCachePoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Blaze::DistanceCachePoint, "Blaze", "DistanceCachePoint");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Blaze.DistanceCachePoint
  // [TokenAttribute] Offset: FFFFFFFF
  struct DistanceCachePoint/*, public ::System::ValueType*/ {
    public:
    public:
    // System.Single X
    // Size: 0x4
    // Offset: 0x0
    float X;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single Y
    // Size: 0x4
    // Offset: 0x4
    float Y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: DistanceCachePoint
    constexpr DistanceCachePoint(float X_ = {}, float Y_ = {}) noexcept : X{X_}, Y{Y_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.Single X
    [[deprecated("Use field access instead!")]] float& dyn_X();
    // Get instance field reference: System.Single Y
    [[deprecated("Use field access instead!")]] float& dyn_Y();
    // System.Void .ctor(System.Single x, System.Single y)
    // Offset: 0xB98E64
    // ABORTED: conflicts with another method.  DistanceCachePoint(float x, float y);
  }; // Blaze.DistanceCachePoint
  #pragma pack(pop)
  static check_size<sizeof(DistanceCachePoint), 4 + sizeof(float)> __Blaze_DistanceCachePointSizeCheck;
  static_assert(sizeof(DistanceCachePoint) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::DistanceCachePoint::DistanceCachePoint
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
