// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: MoveToPoint
  class MoveToPoint;
  // Forward declaring type: VectorPoint
  class VectorPoint;
  // Forward declaring type: StraightLinePoint
  class StraightLinePoint;
  // Forward declaring type: QuadLinePoint
  class QuadLinePoint;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: VectorPath
  class VectorPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::VectorPath);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::VectorPath*, "Blaze", "VectorPath");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.VectorPath
  // [TokenAttribute] Offset: FFFFFFFF
  class VectorPath : public ::Il2CppObject {
    public:
    // Nested type: ::Blaze::VectorPath::PathSegment
    class PathSegment;
    public:
    // public System.Single MinX
    // Size: 0x4
    // Offset: 0x10
    float MinX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single MinY
    // Size: 0x4
    // Offset: 0x14
    float MinY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Width
    // Size: 0x4
    // Offset: 0x18
    float Width;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Height
    // Size: 0x4
    // Offset: 0x1C
    float Height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 PathNodeCount
    // Size: 0x4
    // Offset: 0x20
    int PathNodeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: PathNodeCount and: CloseNode
    char __padding4[0x4] = {};
    // public Blaze.MoveToPoint CloseNode
    // Size: 0x8
    // Offset: 0x28
    ::Blaze::MoveToPoint* CloseNode;
    // Field size check
    static_assert(sizeof(::Blaze::MoveToPoint*) == 0x8);
    // public Blaze.VectorPoint FirstPathNode
    // Size: 0x8
    // Offset: 0x30
    ::Blaze::VectorPoint* FirstPathNode;
    // Field size check
    static_assert(sizeof(::Blaze::VectorPoint*) == 0x8);
    // public Blaze.VectorPoint LatestPathNode
    // Size: 0x8
    // Offset: 0x38
    ::Blaze::VectorPoint* LatestPathNode;
    // Field size check
    static_assert(sizeof(::Blaze::VectorPoint*) == 0x8);
    // protected System.Boolean HoleSorted
    // Size: 0x1
    // Offset: 0x40
    bool HoleSorted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Single MinX
    [[deprecated("Use field access instead!")]] float& dyn_MinX();
    // Get instance field reference: public System.Single MinY
    [[deprecated("Use field access instead!")]] float& dyn_MinY();
    // Get instance field reference: public System.Single Width
    [[deprecated("Use field access instead!")]] float& dyn_Width();
    // Get instance field reference: public System.Single Height
    [[deprecated("Use field access instead!")]] float& dyn_Height();
    // Get instance field reference: public System.Int32 PathNodeCount
    [[deprecated("Use field access instead!")]] int& dyn_PathNodeCount();
    // Get instance field reference: public Blaze.MoveToPoint CloseNode
    [[deprecated("Use field access instead!")]] ::Blaze::MoveToPoint*& dyn_CloseNode();
    // Get instance field reference: public Blaze.VectorPoint FirstPathNode
    [[deprecated("Use field access instead!")]] ::Blaze::VectorPoint*& dyn_FirstPathNode();
    // Get instance field reference: public Blaze.VectorPoint LatestPathNode
    [[deprecated("Use field access instead!")]] ::Blaze::VectorPoint*& dyn_LatestPathNode();
    // Get instance field reference: protected System.Boolean HoleSorted
    [[deprecated("Use field access instead!")]] bool& dyn_HoleSorted();
    // public System.Void MoveTo(System.Single x, System.Single y)
    // Offset: 0xDDAD80
    void MoveTo(float x, float y);
    // public System.Void CopyInto(Blaze.VectorPath path)
    // Offset: 0xDDAF38
    void CopyInto(::Blaze::VectorPath* path);
    // public System.Void Clear()
    // Offset: 0xDDAFF4
    void Clear();
    // public System.Void AddPathNode(Blaze.VectorPoint point)
    // Offset: 0xDDAE04
    void AddPathNode(::Blaze::VectorPoint* point);
    // public System.Void ClosePathFast()
    // Offset: 0xDDB000
    void ClosePathFast();
    // public System.Void ClosePath()
    // Offset: 0xDDB0E4
    void ClosePath();
    // public System.Void CloseLast()
    // Offset: 0xDDB194
    void CloseLast();
    // public Blaze.StraightLinePoint LineTo(System.Single x, System.Single y)
    // Offset: 0xDDB060
    ::Blaze::StraightLinePoint* LineTo(float x, float y);
    // public Blaze.QuadLinePoint QuadraticCurveTo(System.Single cx, System.Single cy, System.Single x, System.Single y)
    // Offset: 0xDDB1DC
    ::Blaze::QuadLinePoint* QuadraticCurveTo(float cx, float cy, float x, float y);
    // public System.Void CurveTo(System.Single c1x, System.Single c1y, System.Single c2x, System.Single c2y, System.Single x, System.Single y)
    // Offset: 0xDDB298
    void CurveTo(float c1x, float c1y, float c2x, float c2y, float x, float y);
    // public System.Void RecalculateMeta()
    // Offset: 0xDDB380
    void RecalculateMeta();
    // public System.Void RecalculateBounds()
    // Offset: 0xDDB384
    void RecalculateBounds();
    // public System.Void Sheer(System.Single by)
    // Offset: 0xDDB3F0
    void Sheer(float by);
    // public System.Void Scale(System.Single by)
    // Offset: 0xDDB43C
    void Scale(float by);
    // public System.Single GetSignedArea()
    // Offset: 0xDDB4AC
    float GetSignedArea();
    // public System.Boolean get_Unclosed()
    // Offset: 0xDDB51C
    bool get_Unclosed();
    // public System.Boolean get_WasHoleSorted()
    // Offset: 0xDDB64C
    bool get_WasHoleSorted();
    // public System.Void HoleSort()
    // Offset: 0xDDB654
    void HoleSort();
    // public Blaze.VectorPoint Nearest(System.Single x, System.Single y)
    // Offset: 0xDDBB90
    ::Blaze::VectorPoint* Nearest(float x, float y);
    // public Blaze.VectorPoint Nearest(System.Single x, System.Single y, Blaze.VectorPoint from, Blaze.VectorPoint to)
    // Offset: 0xDDBBEC
    ::Blaze::VectorPoint* Nearest(float x, float y, ::Blaze::VectorPoint* from, ::Blaze::VectorPoint* to);
    // public System.Boolean Contains(System.Single x, System.Single y)
    // Offset: 0xDDBC40
    bool Contains(float x, float y);
    // public System.Boolean Contains(System.Single x, System.Single y, Blaze.VectorPoint from, Blaze.VectorPoint to)
    // Offset: 0xDDBC48
    bool Contains(float x, float y, ::Blaze::VectorPoint* from, ::Blaze::VectorPoint* to);
    // public System.Void GetVertices(UnityEngine.Vector3[] vertices, UnityEngine.Vector3[] normals, System.Single accuracy, System.Single offsetX, System.Single offsetY, System.Single scale, ref System.Int32 index, System.Collections.Generic.List`1<System.Int32> contourStarts)
    // Offset: 0xDDBD64
    void GetVertices(::ArrayW<::UnityEngine::Vector3> vertices, ::ArrayW<::UnityEngine::Vector3> normals, float accuracy, float offsetX, float offsetY, float scale, ByRef<int> index, ::System::Collections::Generic::List_1<int>* contourStarts);
    // public System.Int32 GetVertexCount(System.Single accuracy)
    // Offset: 0xDDC034
    int GetVertexCount(float accuracy);
    // public System.Void .ctor()
    // Offset: 0xDDC14C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VectorPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::VectorPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VectorPath*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0xDDB5B4
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Blaze.VectorPath
  #pragma pack(pop)
  static check_size<sizeof(VectorPath), 64 + sizeof(bool)> __Blaze_VectorPathSizeCheck;
  static_assert(sizeof(VectorPath) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::VectorPath::MoveTo
// Il2CppName: MoveTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPath::*)(float, float)>(&Blaze::VectorPath::MoveTo)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "MoveTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::CopyInto
// Il2CppName: CopyInto
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPath::*)(::Blaze::VectorPath*)>(&Blaze::VectorPath::CopyInto)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Blaze", "VectorPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "CopyInto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPath::*)()>(&Blaze::VectorPath::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::AddPathNode
// Il2CppName: AddPathNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPath::*)(::Blaze::VectorPoint*)>(&Blaze::VectorPath::AddPathNode)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("Blaze", "VectorPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "AddPathNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::ClosePathFast
// Il2CppName: ClosePathFast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPath::*)()>(&Blaze::VectorPath::ClosePathFast)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "ClosePathFast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::ClosePath
// Il2CppName: ClosePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPath::*)()>(&Blaze::VectorPath::ClosePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "ClosePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::CloseLast
// Il2CppName: CloseLast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPath::*)()>(&Blaze::VectorPath::CloseLast)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "CloseLast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::LineTo
// Il2CppName: LineTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::StraightLinePoint* (Blaze::VectorPath::*)(float, float)>(&Blaze::VectorPath::LineTo)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "LineTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::QuadraticCurveTo
// Il2CppName: QuadraticCurveTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::QuadLinePoint* (Blaze::VectorPath::*)(float, float, float, float)>(&Blaze::VectorPath::QuadraticCurveTo)> {
  static const MethodInfo* get() {
    static auto* cx = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* cy = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "QuadraticCurveTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cx, cy, x, y});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::CurveTo
// Il2CppName: CurveTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPath::*)(float, float, float, float, float, float)>(&Blaze::VectorPath::CurveTo)> {
  static const MethodInfo* get() {
    static auto* c1x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* c1y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* c2x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* c2y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "CurveTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c1x, c1y, c2x, c2y, x, y});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::RecalculateMeta
// Il2CppName: RecalculateMeta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPath::*)()>(&Blaze::VectorPath::RecalculateMeta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "RecalculateMeta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::RecalculateBounds
// Il2CppName: RecalculateBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPath::*)()>(&Blaze::VectorPath::RecalculateBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "RecalculateBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::Sheer
// Il2CppName: Sheer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPath::*)(float)>(&Blaze::VectorPath::Sheer)> {
  static const MethodInfo* get() {
    static auto* by = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "Sheer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{by});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::Scale
// Il2CppName: Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPath::*)(float)>(&Blaze::VectorPath::Scale)> {
  static const MethodInfo* get() {
    static auto* by = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{by});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::GetSignedArea
// Il2CppName: GetSignedArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Blaze::VectorPath::*)()>(&Blaze::VectorPath::GetSignedArea)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "GetSignedArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::get_Unclosed
// Il2CppName: get_Unclosed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::VectorPath::*)()>(&Blaze::VectorPath::get_Unclosed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "get_Unclosed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::get_WasHoleSorted
// Il2CppName: get_WasHoleSorted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::VectorPath::*)()>(&Blaze::VectorPath::get_WasHoleSorted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "get_WasHoleSorted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::HoleSort
// Il2CppName: HoleSort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPath::*)()>(&Blaze::VectorPath::HoleSort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "HoleSort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::Nearest
// Il2CppName: Nearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::VectorPoint* (Blaze::VectorPath::*)(float, float)>(&Blaze::VectorPath::Nearest)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "Nearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::Nearest
// Il2CppName: Nearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::VectorPoint* (Blaze::VectorPath::*)(float, float, ::Blaze::VectorPoint*, ::Blaze::VectorPoint*)>(&Blaze::VectorPath::Nearest)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("Blaze", "VectorPoint")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("Blaze", "VectorPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "Nearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, from, to});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::VectorPath::*)(float, float)>(&Blaze::VectorPath::Contains)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::VectorPath::*)(float, float, ::Blaze::VectorPoint*, ::Blaze::VectorPoint*)>(&Blaze::VectorPath::Contains)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("Blaze", "VectorPoint")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("Blaze", "VectorPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, from, to});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::GetVertices
// Il2CppName: GetVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::VectorPath::*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>, float, float, float, float, ByRef<int>, ::System::Collections::Generic::List_1<int>*)>(&Blaze::VectorPath::GetVertices)> {
  static const MethodInfo* get() {
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* normals = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* accuracy = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* offsetX = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* offsetY = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* contourStarts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "GetVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices, normals, accuracy, offsetX, offsetY, scale, index, contourStarts});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::GetVertexCount
// Il2CppName: GetVertexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Blaze::VectorPath::*)(float)>(&Blaze::VectorPath::GetVertexCount)> {
  static const MethodInfo* get() {
    static auto* accuracy = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "GetVertexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{accuracy});
  }
};
// Writing MetadataGetter for method: Blaze::VectorPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::VectorPath::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Blaze::VectorPath::*)()>(&Blaze::VectorPath::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::VectorPath*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
