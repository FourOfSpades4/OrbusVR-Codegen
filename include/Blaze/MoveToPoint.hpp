// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Blaze.VectorPoint
#include "Blaze/VectorPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: PointReceiver
  class PointReceiver;
}
// Completed forward declares
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: MoveToPoint
  class MoveToPoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::MoveToPoint);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::MoveToPoint*, "Blaze", "MoveToPoint");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.MoveToPoint
  // [TokenAttribute] Offset: FFFFFFFF
  class MoveToPoint : public ::Blaze::VectorPoint {
    public:
    public:
    // public Blaze.VectorPoint ClosePoint
    // Size: 0x8
    // Offset: 0x28
    ::Blaze::VectorPoint* ClosePoint;
    // Field size check
    static_assert(sizeof(::Blaze::VectorPoint*) == 0x8);
    public:
    // Creating conversion operator: operator ::Blaze::VectorPoint*
    constexpr operator ::Blaze::VectorPoint*() const noexcept {
      return ClosePoint;
    }
    // Get instance field reference: public Blaze.VectorPoint ClosePoint
    [[deprecated("Use field access instead!")]] ::Blaze::VectorPoint*& dyn_ClosePoint();
    // public System.Void .ctor(System.Single x, System.Single y)
    // Offset: 0x12B7B74
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Void VectorPoint::.ctor(System.Single x, System.Single y)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MoveToPoint* New_ctor(float x, float y) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::MoveToPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MoveToPoint*, creationType>(x, y)));
    }
    // public override System.Void ComputeLinePoints(Blaze.PointReceiver output)
    // Offset: 0x12B7B7C
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Void VectorPoint::ComputeLinePoints(Blaze.PointReceiver output)
    void ComputeLinePoints(::Blaze::PointReceiver* output);
    // public override Blaze.VectorPoint Copy()
    // Offset: 0x12B7C50
    // Implemented from: Blaze.VectorPoint
    // Base method: Blaze.VectorPoint VectorPoint::Copy()
    ::Blaze::VectorPoint* Copy();
    // public override System.String ToString()
    // Offset: 0x12B7CC4
    // Implemented from: Blaze.VectorPoint
    // Base method: System.String VectorPoint::ToString()
    ::StringW ToString();
  }; // Blaze.MoveToPoint
  #pragma pack(pop)
  static check_size<sizeof(MoveToPoint), 40 + sizeof(::Blaze::VectorPoint*)> __Blaze_MoveToPointSizeCheck;
  static_assert(sizeof(MoveToPoint) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::MoveToPoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::MoveToPoint::ComputeLinePoints
// Il2CppName: ComputeLinePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::MoveToPoint::*)(::Blaze::PointReceiver*)>(&Blaze::MoveToPoint::ComputeLinePoints)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("Blaze", "PointReceiver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::MoveToPoint*), "ComputeLinePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: Blaze::MoveToPoint::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::VectorPoint* (Blaze::MoveToPoint::*)()>(&Blaze::MoveToPoint::Copy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::MoveToPoint*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::MoveToPoint::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Blaze::MoveToPoint::*)()>(&Blaze::MoveToPoint::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::MoveToPoint*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
