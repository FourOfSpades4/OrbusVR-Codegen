// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Blaze.VectorLine
#include "Blaze/VectorLine.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: VectorTransform
  class VectorTransform;
  // Forward declaring type: VectorPath
  class VectorPath;
  // Forward declaring type: PointReceiver
  class PointReceiver;
}
// Completed forward declares
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: QuadLinePoint
  class QuadLinePoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::QuadLinePoint);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::QuadLinePoint*, "Blaze", "QuadLinePoint");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.QuadLinePoint
  // [TokenAttribute] Offset: FFFFFFFF
  class QuadLinePoint : public ::Blaze::VectorLine {
    public:
    public:
    // public System.Single Control1X
    // Size: 0x4
    // Offset: 0x30
    float Control1X;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Control1Y
    // Size: 0x4
    // Offset: 0x34
    float Control1Y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single Control1X
    [[deprecated("Use field access instead!")]] float& dyn_Control1X();
    // Get instance field reference: public System.Single Control1Y
    [[deprecated("Use field access instead!")]] float& dyn_Control1Y();
    // public System.Void NormalAt(System.Single t, out System.Single x, out System.Single y)
    // Offset: 0x12B8590
    void NormalAt(float t, ByRef<float> x, ByRef<float> y);
    // public System.Void StraightLineNormal(System.Single dx, System.Single dy, out System.Single x, out System.Single y)
    // Offset: 0x12B6BA0
    void StraightLineNormal(float dx, float dy, ByRef<float> x, ByRef<float> y);
    // public System.Void .ctor(System.Single x, System.Single y)
    // Offset: 0x12B6128
    // Implemented from: Blaze.VectorLine
    // Base method: System.Void VectorLine::.ctor(System.Single x, System.Single y)
    // Base method: System.Void VectorPoint::.ctor(System.Single x, System.Single y)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static QuadLinePoint* New_ctor(float x, float y) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::QuadLinePoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<QuadLinePoint*, creationType>(x, y)));
    }
    // public override System.Void Transform(Blaze.VectorTransform transform)
    // Offset: 0x12B622C
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Void VectorPoint::Transform(Blaze.VectorTransform transform)
    void Transform(::Blaze::VectorTransform* transform);
    // public override System.Void StartNormal(out System.Single x, out System.Single y)
    // Offset: 0x12B8350
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Void VectorPoint::StartNormal(out System.Single x, out System.Single y)
    void StartNormal(ByRef<float> x, ByRef<float> y);
    // public override System.Void EndNormal(out System.Single x, out System.Single y)
    // Offset: 0x12B83C8
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Void VectorPoint::EndNormal(out System.Single x, out System.Single y)
    void EndNormal(ByRef<float> x, ByRef<float> y);
    // public override Blaze.VectorPoint Split(System.Single t, Blaze.VectorPath path)
    // Offset: 0x12B83DC
    // Implemented from: Blaze.VectorPoint
    // Base method: Blaze.VectorPoint VectorPoint::Split(System.Single t, Blaze.VectorPath path)
    ::Blaze::VectorPoint* Split(float t, ::Blaze::VectorPath* path);
    // public override System.Void ComputeLinePoints(Blaze.PointReceiver output)
    // Offset: 0x12B872C
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Void VectorPoint::ComputeLinePoints(Blaze.PointReceiver output)
    void ComputeLinePoints(::Blaze::PointReceiver* output);
    // public override System.Void RecalculateBounds(Blaze.VectorPath path)
    // Offset: 0x12B63BC
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Void VectorPoint::RecalculateBounds(Blaze.VectorPath path)
    void RecalculateBounds(::Blaze::VectorPath* path);
    // public override System.Void SampleAt(System.Single t, out System.Single x, out System.Single y)
    // Offset: 0x12B896C
    // Implemented from: Blaze.VectorLine
    // Base method: System.Void VectorLine::SampleAt(System.Single t, out System.Single x, out System.Single y)
    void SampleAt(float t, ByRef<float> x, ByRef<float> y);
    // public override System.Boolean get_IsCurve()
    // Offset: 0x12B8A28
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Boolean VectorPoint::get_IsCurve()
    bool get_IsCurve();
    // public override Blaze.VectorPoint Copy()
    // Offset: 0x12B8A30
    // Implemented from: Blaze.VectorPoint
    // Base method: Blaze.VectorPoint VectorPoint::Copy()
    ::Blaze::VectorPoint* Copy();
    // public override System.String ToString()
    // Offset: 0x12B8AFC
    // Implemented from: Blaze.VectorPoint
    // Base method: System.String VectorPoint::ToString()
    ::StringW ToString();
    // public override System.Void Multiply(System.Single by)
    // Offset: 0x12B7614
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Void VectorPoint::Multiply(System.Single by)
    void Multiply(float by);
    // public override System.Void Squash(System.Single by)
    // Offset: 0x12B764C
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Void VectorPoint::Squash(System.Single by)
    void Squash(float by);
    // public override System.Void Sheer(System.Single by)
    // Offset: 0x12B7688
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Void VectorPoint::Sheer(System.Single by)
    void Sheer(float by);
  }; // Blaze.QuadLinePoint
  #pragma pack(pop)
  static check_size<sizeof(QuadLinePoint), 52 + sizeof(float)> __Blaze_QuadLinePointSizeCheck;
  static_assert(sizeof(QuadLinePoint) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::QuadLinePoint::NormalAt
// Il2CppName: NormalAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::QuadLinePoint::*)(float, ByRef<float>, ByRef<float>)>(&Blaze::QuadLinePoint::NormalAt)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::QuadLinePoint*), "NormalAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, x, y});
  }
};
// Writing MetadataGetter for method: Blaze::QuadLinePoint::StraightLineNormal
// Il2CppName: StraightLineNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::QuadLinePoint::*)(float, float, ByRef<float>, ByRef<float>)>(&Blaze::QuadLinePoint::StraightLineNormal)> {
  static const MethodInfo* get() {
    static auto* dx = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dy = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::QuadLinePoint*), "StraightLineNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dx, dy, x, y});
  }
};
// Writing MetadataGetter for method: Blaze::QuadLinePoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::QuadLinePoint::Transform
// Il2CppName: Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::QuadLinePoint::*)(::Blaze::VectorTransform*)>(&Blaze::QuadLinePoint::Transform)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("Blaze", "VectorTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::QuadLinePoint*), "Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: Blaze::QuadLinePoint::StartNormal
// Il2CppName: StartNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::QuadLinePoint::*)(ByRef<float>, ByRef<float>)>(&Blaze::QuadLinePoint::StartNormal)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::QuadLinePoint*), "StartNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::QuadLinePoint::EndNormal
// Il2CppName: EndNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::QuadLinePoint::*)(ByRef<float>, ByRef<float>)>(&Blaze::QuadLinePoint::EndNormal)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::QuadLinePoint*), "EndNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: Blaze::QuadLinePoint::Split
// Il2CppName: Split
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::VectorPoint* (Blaze::QuadLinePoint::*)(float, ::Blaze::VectorPath*)>(&Blaze::QuadLinePoint::Split)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("Blaze", "VectorPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::QuadLinePoint*), "Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, path});
  }
};
// Writing MetadataGetter for method: Blaze::QuadLinePoint::ComputeLinePoints
// Il2CppName: ComputeLinePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::QuadLinePoint::*)(::Blaze::PointReceiver*)>(&Blaze::QuadLinePoint::ComputeLinePoints)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("Blaze", "PointReceiver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::QuadLinePoint*), "ComputeLinePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: Blaze::QuadLinePoint::RecalculateBounds
// Il2CppName: RecalculateBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::QuadLinePoint::*)(::Blaze::VectorPath*)>(&Blaze::QuadLinePoint::RecalculateBounds)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Blaze", "VectorPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::QuadLinePoint*), "RecalculateBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Blaze::QuadLinePoint::SampleAt
// Il2CppName: SampleAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::QuadLinePoint::*)(float, ByRef<float>, ByRef<float>)>(&Blaze::QuadLinePoint::SampleAt)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::QuadLinePoint*), "SampleAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, x, y});
  }
};
// Writing MetadataGetter for method: Blaze::QuadLinePoint::get_IsCurve
// Il2CppName: get_IsCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::QuadLinePoint::*)()>(&Blaze::QuadLinePoint::get_IsCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::QuadLinePoint*), "get_IsCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::QuadLinePoint::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Blaze::VectorPoint* (Blaze::QuadLinePoint::*)()>(&Blaze::QuadLinePoint::Copy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::QuadLinePoint*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::QuadLinePoint::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Blaze::QuadLinePoint::*)()>(&Blaze::QuadLinePoint::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::QuadLinePoint*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::QuadLinePoint::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::QuadLinePoint::*)(float)>(&Blaze::QuadLinePoint::Multiply)> {
  static const MethodInfo* get() {
    static auto* by = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::QuadLinePoint*), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{by});
  }
};
// Writing MetadataGetter for method: Blaze::QuadLinePoint::Squash
// Il2CppName: Squash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::QuadLinePoint::*)(float)>(&Blaze::QuadLinePoint::Squash)> {
  static const MethodInfo* get() {
    static auto* by = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::QuadLinePoint*), "Squash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{by});
  }
};
// Writing MetadataGetter for method: Blaze::QuadLinePoint::Sheer
// Il2CppName: Sheer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::QuadLinePoint::*)(float)>(&Blaze::QuadLinePoint::Sheer)> {
  static const MethodInfo* get() {
    static auto* by = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::QuadLinePoint*), "Sheer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{by});
  }
};
