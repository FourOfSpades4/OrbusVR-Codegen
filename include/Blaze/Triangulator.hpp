// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: TriangulationVertex
  class TriangulationVertex;
  // Forward declaring type: OnTriangulatorRange
  class OnTriangulatorRange;
}
// Completed forward declares
// Type namespace: Blaze
namespace Blaze {
  // Forward declaring type: Triangulator
  class Triangulator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Blaze::Triangulator);
DEFINE_IL2CPP_ARG_TYPE(::Blaze::Triangulator*, "Blaze", "Triangulator");
// Type namespace: Blaze
namespace Blaze {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Blaze.Triangulator
  // [TokenAttribute] Offset: FFFFFFFF
  class Triangulator : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean RawClockwise
    // Size: 0x1
    // Offset: 0x10
    bool RawClockwise;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean OutputClockwise
    // Size: 0x1
    // Offset: 0x11
    bool OutputClockwise;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: OutputClockwise and: Triangles
    char __padding1[0x6] = {};
    // public System.Int32[] Triangles
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> Triangles;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public UnityEngine.Vector3[] Vertices
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Vector3> Vertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public System.Int32 TriangleIndex
    // Size: 0x4
    // Offset: 0x28
    int TriangleIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 VertexCount
    // Size: 0x4
    // Offset: 0x2C
    int VertexCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 VertexOffset
    // Size: 0x4
    // Offset: 0x30
    int VertexOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: VertexOffset and: Current
    char __padding6[0x4] = {};
    // public Blaze.TriangulationVertex Current
    // Size: 0x8
    // Offset: 0x38
    ::Blaze::TriangulationVertex* Current;
    // Field size check
    static_assert(sizeof(::Blaze::TriangulationVertex*) == 0x8);
    // public System.Boolean UseZ
    // Size: 0x1
    // Offset: 0x40
    bool UseZ;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UseZ and: OutOfRange
    char __padding8[0x7] = {};
    // public Blaze.OnTriangulatorRange OutOfRange
    // Size: 0x8
    // Offset: 0x48
    ::Blaze::OnTriangulatorRange* OutOfRange;
    // Field size check
    static_assert(sizeof(::Blaze::OnTriangulatorRange*) == 0x8);
    public:
    // Get instance field reference: private System.Boolean RawClockwise
    [[deprecated("Use field access instead!")]] bool& dyn_RawClockwise();
    // Get instance field reference: public System.Boolean OutputClockwise
    [[deprecated("Use field access instead!")]] bool& dyn_OutputClockwise();
    // Get instance field reference: public System.Int32[] Triangles
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_Triangles();
    // Get instance field reference: public UnityEngine.Vector3[] Vertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_Vertices();
    // Get instance field reference: public System.Int32 TriangleIndex
    [[deprecated("Use field access instead!")]] int& dyn_TriangleIndex();
    // Get instance field reference: public System.Int32 VertexCount
    [[deprecated("Use field access instead!")]] int& dyn_VertexCount();
    // Get instance field reference: public System.Int32 VertexOffset
    [[deprecated("Use field access instead!")]] int& dyn_VertexOffset();
    // Get instance field reference: public Blaze.TriangulationVertex Current
    [[deprecated("Use field access instead!")]] ::Blaze::TriangulationVertex*& dyn_Current();
    // Get instance field reference: public System.Boolean UseZ
    [[deprecated("Use field access instead!")]] bool& dyn_UseZ();
    // Get instance field reference: public Blaze.OnTriangulatorRange OutOfRange
    [[deprecated("Use field access instead!")]] ::Blaze::OnTriangulatorRange*& dyn_OutOfRange();
    // public System.Void .ctor(UnityEngine.Vector3[] vertices)
    // Offset: 0xDD9BF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Triangulator* New_ctor(::ArrayW<::UnityEngine::Vector3> vertices) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::Triangulator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Triangulator*, creationType>(vertices)));
    }
    // public System.Void .ctor(UnityEngine.Vector3[] vertices, System.Int32 start, System.Int32 vertexCount)
    // Offset: 0xDD9C4C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Triangulator* New_ctor(::ArrayW<::UnityEngine::Vector3> vertices, int start, int vertexCount) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::Triangulator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Triangulator*, creationType>(vertices, start, vertexCount)));
    }
    // public System.Void .ctor(UnityEngine.Vector3[] vertices, System.Int32 start, System.Int32 vertexCount, System.Boolean useZ)
    // Offset: 0xDD9E2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Triangulator* New_ctor(::ArrayW<::UnityEngine::Vector3> vertices, int start, int vertexCount, bool useZ) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Blaze::Triangulator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Triangulator*, creationType>(vertices, start, vertexCount, useZ)));
    }
    // public System.Boolean get_Clockwise()
    // Offset: 0xDD9E88
    bool get_Clockwise();
    // public System.Void set_Clockwise(System.Boolean value)
    // Offset: 0xDD9E90
    void set_Clockwise(bool value);
    // public System.Void Reset()
    // Offset: 0xDD9EA0
    void Reset();
    // public System.Void AddVertex(UnityEngine.Vector3 vert, ref Blaze.TriangulationVertex first, ref Blaze.TriangulationVertex last)
    // Offset: 0xDD9EAC
    void AddVertex(::UnityEngine::Vector3 vert, ByRef<::Blaze::TriangulationVertex*> first, ByRef<::Blaze::TriangulationVertex*> last);
    // public System.Void Complete(Blaze.TriangulationVertex first, Blaze.TriangulationVertex last)
    // Offset: 0xDD9FB0
    void Complete(::Blaze::TriangulationVertex* first, ::Blaze::TriangulationVertex* last);
    // public System.Void Select(System.Int32 start, System.Int32 vertexCount)
    // Offset: 0xDD9C94
    void Select(int start, int vertexCount);
    // public System.Void FindWinding()
    // Offset: 0xDDA000
    void FindWinding();
    // public System.Single GetArea()
    // Offset: 0xDDA10C
    float GetArea();
    // private System.Single GetSignedArea()
    // Offset: 0xDDA030
    float GetSignedArea();
    // public System.Void AddTriangle(System.Int32 a, System.Int32 b, System.Int32 c)
    // Offset: 0xDDA12C
    void AddTriangle(int a, int b, int c);
    // public System.Int32[] Triangulate()
    // Offset: 0xDDA2C0
    ::ArrayW<int> Triangulate();
    // public System.Void Triangulate(System.Int32[] triangles, System.Int32 triangleCount, System.Int32 offset)
    // Offset: 0xDDA3D4
    void Triangulate(::ArrayW<int> triangles, int triangleCount, int offset);
    // private System.Boolean InsideTriangleAnti(Blaze.TriangulationVertex A, Blaze.TriangulationVertex B, Blaze.TriangulationVertex C, Blaze.TriangulationVertex P)
    // Offset: 0xDDA878
    bool InsideTriangleAnti(::Blaze::TriangulationVertex* A, ::Blaze::TriangulationVertex* B, ::Blaze::TriangulationVertex* C, ::Blaze::TriangulationVertex* P);
    // private System.Boolean InsideTriangle(Blaze.TriangulationVertex A, Blaze.TriangulationVertex B, Blaze.TriangulationVertex C, Blaze.TriangulationVertex P)
    // Offset: 0xDDA658
    bool InsideTriangle(::Blaze::TriangulationVertex* A, ::Blaze::TriangulationVertex* B, ::Blaze::TriangulationVertex* C, ::Blaze::TriangulationVertex* P);
  }; // Blaze.Triangulator
  #pragma pack(pop)
  static check_size<sizeof(Triangulator), 72 + sizeof(::Blaze::OnTriangulatorRange*)> __Blaze_TriangulatorSizeCheck;
  static_assert(sizeof(Triangulator) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Blaze::Triangulator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::Triangulator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::Triangulator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Blaze::Triangulator::get_Clockwise
// Il2CppName: get_Clockwise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::Triangulator::*)()>(&Blaze::Triangulator::get_Clockwise)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Triangulator*), "get_Clockwise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Triangulator::set_Clockwise
// Il2CppName: set_Clockwise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Triangulator::*)(bool)>(&Blaze::Triangulator::set_Clockwise)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Triangulator*), "set_Clockwise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Blaze::Triangulator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Triangulator::*)()>(&Blaze::Triangulator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Triangulator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Triangulator::AddVertex
// Il2CppName: AddVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Triangulator::*)(::UnityEngine::Vector3, ByRef<::Blaze::TriangulationVertex*>, ByRef<::Blaze::TriangulationVertex*>)>(&Blaze::Triangulator::AddVertex)> {
  static const MethodInfo* get() {
    static auto* vert = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* first = &::il2cpp_utils::GetClassFromName("Blaze", "TriangulationVertex")->this_arg;
    static auto* last = &::il2cpp_utils::GetClassFromName("Blaze", "TriangulationVertex")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Triangulator*), "AddVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vert, first, last});
  }
};
// Writing MetadataGetter for method: Blaze::Triangulator::Complete
// Il2CppName: Complete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Triangulator::*)(::Blaze::TriangulationVertex*, ::Blaze::TriangulationVertex*)>(&Blaze::Triangulator::Complete)> {
  static const MethodInfo* get() {
    static auto* first = &::il2cpp_utils::GetClassFromName("Blaze", "TriangulationVertex")->byval_arg;
    static auto* last = &::il2cpp_utils::GetClassFromName("Blaze", "TriangulationVertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Triangulator*), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{first, last});
  }
};
// Writing MetadataGetter for method: Blaze::Triangulator::Select
// Il2CppName: Select
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Triangulator::*)(int, int)>(&Blaze::Triangulator::Select)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertexCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Triangulator*), "Select", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, vertexCount});
  }
};
// Writing MetadataGetter for method: Blaze::Triangulator::FindWinding
// Il2CppName: FindWinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Triangulator::*)()>(&Blaze::Triangulator::FindWinding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Triangulator*), "FindWinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Triangulator::GetArea
// Il2CppName: GetArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Blaze::Triangulator::*)()>(&Blaze::Triangulator::GetArea)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Triangulator*), "GetArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Triangulator::GetSignedArea
// Il2CppName: GetSignedArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Blaze::Triangulator::*)()>(&Blaze::Triangulator::GetSignedArea)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Triangulator*), "GetSignedArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Triangulator::AddTriangle
// Il2CppName: AddTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Triangulator::*)(int, int, int)>(&Blaze::Triangulator::AddTriangle)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Triangulator*), "AddTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Blaze::Triangulator::Triangulate
// Il2CppName: Triangulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (Blaze::Triangulator::*)()>(&Blaze::Triangulator::Triangulate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Blaze::Triangulator*), "Triangulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Blaze::Triangulator::Triangulate
// Il2CppName: Triangulate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Blaze::Triangulator::*)(::ArrayW<int>, int, int)>(&Blaze::Triangulator::Triangulate)> {
  static const MethodInfo* get() {
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* triangleCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Triangulator*), "Triangulate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangles, triangleCount, offset});
  }
};
// Writing MetadataGetter for method: Blaze::Triangulator::InsideTriangleAnti
// Il2CppName: InsideTriangleAnti
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::Triangulator::*)(::Blaze::TriangulationVertex*, ::Blaze::TriangulationVertex*, ::Blaze::TriangulationVertex*, ::Blaze::TriangulationVertex*)>(&Blaze::Triangulator::InsideTriangleAnti)> {
  static const MethodInfo* get() {
    static auto* A = &::il2cpp_utils::GetClassFromName("Blaze", "TriangulationVertex")->byval_arg;
    static auto* B = &::il2cpp_utils::GetClassFromName("Blaze", "TriangulationVertex")->byval_arg;
    static auto* C = &::il2cpp_utils::GetClassFromName("Blaze", "TriangulationVertex")->byval_arg;
    static auto* P = &::il2cpp_utils::GetClassFromName("Blaze", "TriangulationVertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Triangulator*), "InsideTriangleAnti", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{A, B, C, P});
  }
};
// Writing MetadataGetter for method: Blaze::Triangulator::InsideTriangle
// Il2CppName: InsideTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Blaze::Triangulator::*)(::Blaze::TriangulationVertex*, ::Blaze::TriangulationVertex*, ::Blaze::TriangulationVertex*, ::Blaze::TriangulationVertex*)>(&Blaze::Triangulator::InsideTriangle)> {
  static const MethodInfo* get() {
    static auto* A = &::il2cpp_utils::GetClassFromName("Blaze", "TriangulationVertex")->byval_arg;
    static auto* B = &::il2cpp_utils::GetClassFromName("Blaze", "TriangulationVertex")->byval_arg;
    static auto* C = &::il2cpp_utils::GetClassFromName("Blaze", "TriangulationVertex")->byval_arg;
    static auto* P = &::il2cpp_utils::GetClassFromName("Blaze", "TriangulationVertex")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Blaze::Triangulator*), "InsideTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{A, B, C, P});
  }
};
