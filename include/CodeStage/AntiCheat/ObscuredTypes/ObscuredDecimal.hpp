// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IFormattable
#include "System/IFormattable.hpp"
// Including type: CodeStage.AntiCheat.Common.ACTkByte16
#include "CodeStage/AntiCheat/Common/ACTkByte16.hpp"
// Including type: System.Decimal
#include "System/Decimal.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: CodeStage::AntiCheat::ObscuredTypes
namespace CodeStage::AntiCheat::ObscuredTypes {
  // Forward declaring type: ObFlt
  struct ObFlt;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
}
// Completed forward declares
// Type namespace: CodeStage.AntiCheat.ObscuredTypes
namespace CodeStage::AntiCheat::ObscuredTypes {
  // Forward declaring type: ObscuredDecimal
  struct ObscuredDecimal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal, "CodeStage.AntiCheat.ObscuredTypes", "ObscuredDecimal");
// Type namespace: CodeStage.AntiCheat.ObscuredTypes
namespace CodeStage::AntiCheat::ObscuredTypes {
  // Size: 0x2D
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: CodeStage.AntiCheat.ObscuredTypes.ObscuredDecimal
  // [TokenAttribute] Offset: FFFFFFFF
  struct ObscuredDecimal/*, public ::System::ValueType, public ::System::IEquatable_1<::CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal>, public ::System::IFormattable*/ {
    public:
    // Nested type: ::CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::DecimalLongBytesUnion
    struct DecimalLongBytesUnion;
    public:
    // private System.Int64 currentCryptoKey
    // Size: 0x8
    // Offset: 0x0
    int64_t currentCryptoKey;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private CodeStage.AntiCheat.Common.ACTkByte16 hiddenValue
    // Size: 0x10
    // Offset: 0x8
    ::CodeStage::AntiCheat::Common::ACTkByte16 hiddenValue;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::Common::ACTkByte16) == 0x10);
    // private System.Boolean inited
    // Size: 0x1
    // Offset: 0x18
    bool inited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: inited and: fakeValue
    char __padding2[0x3] = {};
    // private System.Decimal fakeValue
    // Size: 0x10
    // Offset: 0x1C
    ::System::Decimal fakeValue;
    // Field size check
    static_assert(sizeof(::System::Decimal) == 0x10);
    // private System.Boolean fakeValueActive
    // Size: 0x1
    // Offset: 0x2C
    bool fakeValueActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: ObscuredDecimal
    constexpr ObscuredDecimal(int64_t currentCryptoKey_ = {}, ::CodeStage::AntiCheat::Common::ACTkByte16 hiddenValue_ = {}, bool inited_ = {}, ::System::Decimal fakeValue_ = {}, bool fakeValueActive_ = {}) noexcept : currentCryptoKey{currentCryptoKey_}, hiddenValue{hiddenValue_}, inited{inited_}, fakeValue{fakeValue_}, fakeValueActive{fakeValueActive_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal>
    operator ::System::IEquatable_1<::CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IFormattable
    operator ::System::IFormattable() noexcept {
      return *reinterpret_cast<::System::IFormattable*>(this);
    }
    // Get static field: static private System.Int64 cryptoKey
    static int64_t _get_cryptoKey();
    // Set static field: static private System.Int64 cryptoKey
    static void _set_cryptoKey(int64_t value);
    // Get instance field reference: private System.Int64 currentCryptoKey
    [[deprecated("Use field access instead!")]] int64_t& dyn_currentCryptoKey();
    // Get instance field reference: private CodeStage.AntiCheat.Common.ACTkByte16 hiddenValue
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::Common::ACTkByte16& dyn_hiddenValue();
    // Get instance field reference: private System.Boolean inited
    [[deprecated("Use field access instead!")]] bool& dyn_inited();
    // Get instance field reference: private System.Decimal fakeValue
    [[deprecated("Use field access instead!")]] ::System::Decimal& dyn_fakeValue();
    // Get instance field reference: private System.Boolean fakeValueActive
    [[deprecated("Use field access instead!")]] bool& dyn_fakeValueActive();
    // private System.Void .ctor(System.Decimal value)
    // Offset: 0xBB11B4
    ObscuredDecimal(::System::Decimal value);
    // static public System.Void SetNewCryptoKey(System.Int64 newKey)
    // Offset: 0x1E691D4
    static void SetNewCryptoKey(int64_t newKey);
    // static public System.Decimal Encrypt(System.Decimal value)
    // Offset: 0x1E69240
    static ::System::Decimal Encrypt(::System::Decimal value);
    // static public System.Decimal Encrypt(System.Decimal value, System.Int64 key)
    // Offset: 0x1E692C0
    static ::System::Decimal Encrypt(::System::Decimal value, int64_t key);
    // static private CodeStage.AntiCheat.Common.ACTkByte16 InternalEncrypt(System.Decimal value)
    // Offset: 0x1E6915C
    static ::CodeStage::AntiCheat::Common::ACTkByte16 InternalEncrypt(::System::Decimal value);
    // static private CodeStage.AntiCheat.Common.ACTkByte16 InternalEncrypt(System.Decimal value, System.Int64 key)
    // Offset: 0x1E692CC
    static ::CodeStage::AntiCheat::Common::ACTkByte16 InternalEncrypt(::System::Decimal value, int64_t key);
    // static public System.Decimal Decrypt(System.Decimal value)
    // Offset: 0x1E69354
    static ::System::Decimal Decrypt(::System::Decimal value);
    // static public System.Decimal Decrypt(System.Decimal value, System.Int64 key)
    // Offset: 0x1E693D4
    static ::System::Decimal Decrypt(::System::Decimal value, int64_t key);
    // public System.Void ApplyNewCryptoKey()
    // Offset: 0xBB11BC
    void ApplyNewCryptoKey();
    // public System.Void RandomizeCryptoKey()
    // Offset: 0xBB11C4
    void RandomizeCryptoKey();
    // public System.Decimal GetEncrypted()
    // Offset: 0xBB11CC
    ::System::Decimal GetEncrypted();
    // public System.Void SetEncrypted(System.Decimal encrypted)
    // Offset: 0xBB11F4
    void SetEncrypted(::System::Decimal encrypted);
    // public System.Decimal GetDecrypted()
    // Offset: 0xBB11FC
    ::System::Decimal GetDecrypted();
    // private System.Decimal InternalDecrypt()
    // Offset: 0xBB1204
    ::System::Decimal InternalDecrypt();
    // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredDecimal op_Explicit(CodeStage.AntiCheat.ObscuredTypes.ObFlt f)
    // Offset: 0x1E69800
    explicit ObscuredDecimal(::CodeStage::AntiCheat::ObscuredTypes::ObFlt& f);
    // public System.String ToString(System.String format)
    // Offset: 0xBB123C
    ::StringW ToString(::StringW format);
    // public System.String ToString(System.IFormatProvider provider)
    // Offset: 0xBB127C
    ::StringW ToString(::System::IFormatProvider* provider);
    // public System.String ToString(System.String format, System.IFormatProvider provider)
    // Offset: 0xBB12BC
    ::StringW ToString(::StringW format, ::System::IFormatProvider* provider);
    // public System.Boolean Equals(CodeStage.AntiCheat.ObscuredTypes.ObscuredDecimal obj)
    // Offset: 0xBB130C
    bool Equals(::CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal obj);
    // static private System.Void .cctor()
    // Offset: 0x1E69D54
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0xBB120C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xBB1304
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xBB134C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // CodeStage.AntiCheat.ObscuredTypes.ObscuredDecimal
  #pragma pack(pop)
  static check_size<sizeof(ObscuredDecimal), 44 + sizeof(bool)> __CodeStage_AntiCheat_ObscuredTypes_ObscuredDecimalSizeCheck;
  static_assert(sizeof(ObscuredDecimal) == 0x2D);
  // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredDecimal op_Increment(CodeStage.AntiCheat.ObscuredTypes.ObscuredDecimal input)
  // Offset: 0x1E69910
  ::CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal operator++(const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal& input);
  // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredDecimal op_Decrement(CodeStage.AntiCheat.ObscuredTypes.ObscuredDecimal input)
  // Offset: 0x1E69A28
  ::CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal operator--(const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal& input);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::ObscuredDecimal
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::SetNewCryptoKey
// Il2CppName: SetNewCryptoKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::SetNewCryptoKey)> {
  static const MethodInfo* get() {
    static auto* newKey = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "SetNewCryptoKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newKey});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::Encrypt
// Il2CppName: Encrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (*)(::System::Decimal)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::Encrypt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "Encrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::Encrypt
// Il2CppName: Encrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (*)(::System::Decimal, int64_t)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::Encrypt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "Encrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, key});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::InternalEncrypt
// Il2CppName: InternalEncrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::CodeStage::AntiCheat::Common::ACTkByte16 (*)(::System::Decimal)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::InternalEncrypt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "InternalEncrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::InternalEncrypt
// Il2CppName: InternalEncrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::CodeStage::AntiCheat::Common::ACTkByte16 (*)(::System::Decimal, int64_t)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::InternalEncrypt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "InternalEncrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, key});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::Decrypt
// Il2CppName: Decrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (*)(::System::Decimal)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::Decrypt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "Decrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::Decrypt
// Il2CppName: Decrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (*)(::System::Decimal, int64_t)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::Decrypt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "Decrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, key});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::ApplyNewCryptoKey
// Il2CppName: ApplyNewCryptoKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::ApplyNewCryptoKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "ApplyNewCryptoKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::RandomizeCryptoKey
// Il2CppName: RandomizeCryptoKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::RandomizeCryptoKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "RandomizeCryptoKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::GetEncrypted
// Il2CppName: GetEncrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::GetEncrypted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "GetEncrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::SetEncrypted
// Il2CppName: SetEncrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::*)(::System::Decimal)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::SetEncrypted)> {
  static const MethodInfo* get() {
    static auto* encrypted = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "SetEncrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{encrypted});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::GetDecrypted
// Il2CppName: GetDecrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::GetDecrypted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "GetDecrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::InternalDecrypt
// Il2CppName: InternalDecrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::InternalDecrypt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "InternalDecrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::ObscuredDecimal
// Il2CppName: op_Explicit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::*)(::StringW)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::ToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::*)(::System::IFormatProvider*)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::ToString)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::*)(::StringW, ::System::IFormatProvider*)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::ToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, provider});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::*)(::CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("CodeStage.AntiCheat.ObscuredTypes", "ObscuredDecimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::*)(::Il2CppObject*)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::operator++
// Il2CppName: op_Increment
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredDecimal::operator--
// Il2CppName: op_Decrement
// Cannot perform method pointer template specialization from operators!
