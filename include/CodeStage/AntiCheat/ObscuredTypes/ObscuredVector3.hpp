// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: CodeStage::AntiCheat::ObscuredTypes
namespace CodeStage::AntiCheat::ObscuredTypes {
  // Skipping declaration: RawEncryptedVector3 because it is already included!
}
// Completed forward declares
// Type namespace: CodeStage.AntiCheat.ObscuredTypes
namespace CodeStage::AntiCheat::ObscuredTypes {
  // Forward declaring type: ObscuredVector3
  struct ObscuredVector3;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3, "CodeStage.AntiCheat.ObscuredTypes", "ObscuredVector3");
// Type namespace: CodeStage.AntiCheat.ObscuredTypes
namespace CodeStage::AntiCheat::ObscuredTypes {
  // Size: 0x21
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: AC21E4
  struct ObscuredVector3/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3
    struct RawEncryptedVector3;
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3/RawEncryptedVector3
    // [TokenAttribute] Offset: FFFFFFFF
    struct RawEncryptedVector3/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 x
      // Size: 0x4
      // Offset: 0x0
      int x;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 y
      // Size: 0x4
      // Offset: 0x4
      int y;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 z
      // Size: 0x4
      // Offset: 0x8
      int z;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RawEncryptedVector3
      constexpr RawEncryptedVector3(int x_ = {}, int y_ = {}, int z_ = {}) noexcept : x{x_}, y{y_}, z{z_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 x
      [[deprecated("Use field access instead!")]] int& dyn_x();
      // Get instance field reference: public System.Int32 y
      [[deprecated("Use field access instead!")]] int& dyn_y();
      // Get instance field reference: public System.Int32 z
      [[deprecated("Use field access instead!")]] int& dyn_z();
    }; // CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3/RawEncryptedVector3
    #pragma pack(pop)
    static check_size<sizeof(ObscuredVector3::RawEncryptedVector3), 8 + sizeof(int)> __CodeStage_AntiCheat_ObscuredTypes_ObscuredVector3_RawEncryptedVector3SizeCheck;
    static_assert(sizeof(ObscuredVector3::RawEncryptedVector3) == 0xC);
    public:
    // private System.Int32 currentCryptoKey
    // Size: 0x4
    // Offset: 0x0
    int currentCryptoKey;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3/RawEncryptedVector3 hiddenValue
    // Size: 0xC
    // Offset: 0x4
    ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3 hiddenValue;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3) == 0xC);
    // private System.Boolean inited
    // Size: 0x1
    // Offset: 0x10
    bool inited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: inited and: fakeValue
    char __padding2[0x3] = {};
    // private UnityEngine.Vector3 fakeValue
    // Size: 0xC
    // Offset: 0x14
    ::UnityEngine::Vector3 fakeValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean fakeValueActive
    // Size: 0x1
    // Offset: 0x20
    bool fakeValueActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: ObscuredVector3
    constexpr ObscuredVector3(int currentCryptoKey_ = {}, ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3 hiddenValue_ = {}, bool inited_ = {}, ::UnityEngine::Vector3 fakeValue_ = {}, bool fakeValueActive_ = {}) noexcept : currentCryptoKey{currentCryptoKey_}, hiddenValue{hiddenValue_}, inited{inited_}, fakeValue{fakeValue_}, fakeValueActive{fakeValueActive_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static private System.Int32 cryptoKey
    static int _get_cryptoKey();
    // Set static field: static private System.Int32 cryptoKey
    static void _set_cryptoKey(int value);
    // Get static field: static private readonly UnityEngine.Vector3 zero
    static ::UnityEngine::Vector3 _get_zero();
    // Set static field: static private readonly UnityEngine.Vector3 zero
    static void _set_zero(::UnityEngine::Vector3 value);
    // Get instance field reference: private System.Int32 currentCryptoKey
    [[deprecated("Use field access instead!")]] int& dyn_currentCryptoKey();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3/RawEncryptedVector3 hiddenValue
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3& dyn_hiddenValue();
    // Get instance field reference: private System.Boolean inited
    [[deprecated("Use field access instead!")]] bool& dyn_inited();
    // Get instance field reference: private UnityEngine.Vector3 fakeValue
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_fakeValue();
    // Get instance field reference: private System.Boolean fakeValueActive
    [[deprecated("Use field access instead!")]] bool& dyn_fakeValueActive();
    // private System.Void .ctor(UnityEngine.Vector3 value)
    // Offset: 0xBBB580
    ObscuredVector3(::UnityEngine::Vector3 value);
    // public System.Void .ctor(System.Single x, System.Single y, System.Single z)
    // Offset: 0xBBB588
    ObscuredVector3(float x, float y, float z);
    // public System.Single get_x()
    // Offset: 0xBBB590
    float get_x();
    // public System.Void set_x(System.Single value)
    // Offset: 0xBBB598
    void set_x(float value);
    // public System.Single get_y()
    // Offset: 0xBBB5A0
    float get_y();
    // public System.Void set_y(System.Single value)
    // Offset: 0xBBB5A8
    void set_y(float value);
    // public System.Single get_z()
    // Offset: 0xBBB5B0
    float get_z();
    // public System.Void set_z(System.Single value)
    // Offset: 0xBBB5B8
    void set_z(float value);
    // public System.Single get_Item(System.Int32 index)
    // Offset: 0xBBB5C0
    float get_Item(int index);
    // public System.Void set_Item(System.Int32 index, System.Single value)
    // Offset: 0xBBB5C8
    void set_Item(int index, float value);
    // static public System.Void SetNewCryptoKey(System.Int32 newKey)
    // Offset: 0x225FC44
    static void SetNewCryptoKey(int newKey);
    // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3/RawEncryptedVector3 Encrypt(UnityEngine.Vector3 value)
    // Offset: 0x225F2D0
    static ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3 Encrypt(::UnityEngine::Vector3 value);
    // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3/RawEncryptedVector3 Encrypt(UnityEngine.Vector3 value, System.Int32 key)
    // Offset: 0x225FCB0
    static ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3 Encrypt(::UnityEngine::Vector3 value, int key);
    // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3/RawEncryptedVector3 Encrypt(System.Single x, System.Single y, System.Single z, System.Int32 key)
    // Offset: 0x225F460
    static ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3 Encrypt(float x, float y, float z, int key);
    // static public UnityEngine.Vector3 Decrypt(CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3/RawEncryptedVector3 value)
    // Offset: 0x225FD44
    static ::UnityEngine::Vector3 Decrypt(::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3 value);
    // static public UnityEngine.Vector3 Decrypt(CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3/RawEncryptedVector3 value, System.Int32 key)
    // Offset: 0x225FDBC
    static ::UnityEngine::Vector3 Decrypt(::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3 value, int key);
    // public System.Void ApplyNewCryptoKey()
    // Offset: 0xBBB5D0
    void ApplyNewCryptoKey();
    // public System.Void RandomizeCryptoKey()
    // Offset: 0xBBB5D8
    void RandomizeCryptoKey();
    // public CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3/RawEncryptedVector3 GetEncrypted()
    // Offset: 0xBBB5E0
    ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3 GetEncrypted();
    // public System.Void SetEncrypted(CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3/RawEncryptedVector3 encrypted)
    // Offset: 0xBBB60C
    void SetEncrypted(::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3 encrypted);
    // public UnityEngine.Vector3 GetDecrypted()
    // Offset: 0xBBB618
    ::UnityEngine::Vector3 GetDecrypted();
    // private UnityEngine.Vector3 InternalDecrypt()
    // Offset: 0xBBB620
    ::UnityEngine::Vector3 InternalDecrypt();
    // private System.Boolean CompareVectorsWithTolerance(UnityEngine.Vector3 vector1, UnityEngine.Vector3 vector2)
    // Offset: 0xBBB628
    bool CompareVectorsWithTolerance(::UnityEngine::Vector3 vector1, ::UnityEngine::Vector3 vector2);
    // private System.Single InternalDecryptField(System.Int32 encrypted)
    // Offset: 0xBBB62C
    float InternalDecryptField(int encrypted);
    // private System.Int32 InternalEncryptField(System.Single encrypted)
    // Offset: 0xBBB634
    int InternalEncryptField(float encrypted);
    // public System.String ToString(System.String format)
    // Offset: 0xBBB650
    ::StringW ToString(::StringW format);
    // static private System.Void .cctor()
    // Offset: 0x2261384
    static void _cctor();
    // public override System.Boolean Equals(System.Object other)
    // Offset: 0xBBB638
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object other)
    bool Equals(::Il2CppObject* other);
    // public override System.Int32 GetHashCode()
    // Offset: 0xBBB640
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0xBBB648
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3
  #pragma pack(pop)
  static check_size<sizeof(ObscuredVector3), 32 + sizeof(bool)> __CodeStage_AntiCheat_ObscuredTypes_ObscuredVector3SizeCheck;
  static_assert(sizeof(ObscuredVector3) == 0x21);
  // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 op_Addition(CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 a, CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 b)
  // Offset: 0x2260418
  ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3 operator+(const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& a, const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& b);
  // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 op_Addition(UnityEngine.Vector3 a, CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 b)
  // Offset: 0x2260530
  ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3 operator+(const ::UnityEngine::Vector3& a, const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& b);
  // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 op_Addition(CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 a, UnityEngine.Vector3 b)
  // Offset: 0x226063C
  ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3 operator+(const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& a, const ::UnityEngine::Vector3& b);
  // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 op_Subtraction(CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 a, CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 b)
  // Offset: 0x2260748
  ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3 operator-(const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& a, const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& b);
  // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 op_Subtraction(UnityEngine.Vector3 a, CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 b)
  // Offset: 0x2260860
  ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3 operator-(const ::UnityEngine::Vector3& a, const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& b);
  // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 op_Subtraction(CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 a, UnityEngine.Vector3 b)
  // Offset: 0x226096C
  ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3 operator-(const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& a, const ::UnityEngine::Vector3& b);
  // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 op_UnaryNegation(CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 a)
  // Offset: 0x2260A78
  ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3 operator-(const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& a);
  // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 op_Multiply(CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 a, System.Single d)
  // Offset: 0x2260B64
  ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3 operator*(const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& a, const float& d);
  // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 op_Multiply(System.Single d, CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 a)
  // Offset: 0x2260C58
  ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3 operator*(const float& d, const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& a);
  // static public CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 op_Division(CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 a, System.Single d)
  // Offset: 0x2260D4C
  ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3 operator/(const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& a, const float& d);
  // static public System.Boolean op_Equality(CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 lhs, CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 rhs)
  // Offset: 0x2260E40
  bool operator ==(const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& lhs, const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& rhs);
  // static public System.Boolean op_Equality(UnityEngine.Vector3 lhs, CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 rhs)
  // Offset: 0x2260F08
  bool operator ==(const ::UnityEngine::Vector3& lhs, const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& rhs);
  // static public System.Boolean op_Equality(CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 lhs, UnityEngine.Vector3 rhs)
  // Offset: 0x2260FBC
  bool operator ==(const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& lhs, const ::UnityEngine::Vector3& rhs);
  // static public System.Boolean op_Inequality(CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 lhs, CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 rhs)
  // Offset: 0x2261070
  bool operator !=(const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& lhs, const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& rhs);
  // static public System.Boolean op_Inequality(UnityEngine.Vector3 lhs, CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 rhs)
  // Offset: 0x2261138
  bool operator !=(const ::UnityEngine::Vector3& lhs, const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& rhs);
  // static public System.Boolean op_Inequality(CodeStage.AntiCheat.ObscuredTypes.ObscuredVector3 lhs, UnityEngine.Vector3 rhs)
  // Offset: 0x22611EC
  bool operator !=(const ::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3& lhs, const ::UnityEngine::Vector3& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3, "CodeStage.AntiCheat.ObscuredTypes", "ObscuredVector3/RawEncryptedVector3");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::ObscuredVector3
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::ObscuredVector3
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::get_x
// Il2CppName: get_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::get_x)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "get_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::set_x
// Il2CppName: set_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)(float)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::set_x)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "set_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::get_y
// Il2CppName: get_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::get_y)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "get_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::set_y
// Il2CppName: set_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)(float)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::set_y)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "set_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::get_z
// Il2CppName: get_z
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::get_z)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "get_z", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::set_z
// Il2CppName: set_z
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)(float)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::set_z)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "set_z", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)(int)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)(int, float)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::SetNewCryptoKey
// Il2CppName: SetNewCryptoKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::SetNewCryptoKey)> {
  static const MethodInfo* get() {
    static auto* newKey = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "SetNewCryptoKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newKey});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::Encrypt
// Il2CppName: Encrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3 (*)(::UnityEngine::Vector3)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::Encrypt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "Encrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::Encrypt
// Il2CppName: Encrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3 (*)(::UnityEngine::Vector3, int)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::Encrypt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "Encrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, key});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::Encrypt
// Il2CppName: Encrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3 (*)(float, float, float, int)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::Encrypt)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "Encrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, z, key});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::Decrypt
// Il2CppName: Decrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::Decrypt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("CodeStage.AntiCheat.ObscuredTypes", "ObscuredVector3/RawEncryptedVector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "Decrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::Decrypt
// Il2CppName: Decrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3, int)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::Decrypt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("CodeStage.AntiCheat.ObscuredTypes", "ObscuredVector3/RawEncryptedVector3")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "Decrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, key});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::ApplyNewCryptoKey
// Il2CppName: ApplyNewCryptoKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::ApplyNewCryptoKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "ApplyNewCryptoKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RandomizeCryptoKey
// Il2CppName: RandomizeCryptoKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RandomizeCryptoKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "RandomizeCryptoKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::GetEncrypted
// Il2CppName: GetEncrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3 (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::GetEncrypted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "GetEncrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::SetEncrypted
// Il2CppName: SetEncrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)(::CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::RawEncryptedVector3)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::SetEncrypted)> {
  static const MethodInfo* get() {
    static auto* encrypted = &::il2cpp_utils::GetClassFromName("CodeStage.AntiCheat.ObscuredTypes", "ObscuredVector3/RawEncryptedVector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "SetEncrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{encrypted});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::GetDecrypted
// Il2CppName: GetDecrypted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::GetDecrypted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "GetDecrypted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::InternalDecrypt
// Il2CppName: InternalDecrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::InternalDecrypt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "InternalDecrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::CompareVectorsWithTolerance
// Il2CppName: CompareVectorsWithTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::CompareVectorsWithTolerance)> {
  static const MethodInfo* get() {
    static auto* vector1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* vector2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "CompareVectorsWithTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vector1, vector2});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::InternalDecryptField
// Il2CppName: InternalDecryptField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)(int)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::InternalDecryptField)> {
  static const MethodInfo* get() {
    static auto* encrypted = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "InternalDecryptField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{encrypted});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::InternalEncryptField
// Il2CppName: InternalEncryptField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)(float)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::InternalEncryptField)> {
  static const MethodInfo* get() {
    static auto* encrypted = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "InternalEncryptField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{encrypted});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)(::StringW)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::ToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)(::Il2CppObject*)>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::*)()>(&CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator+
// Il2CppName: op_Addition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator+
// Il2CppName: op_Addition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator+
// Il2CppName: op_Addition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator-
// Il2CppName: op_Subtraction
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator-
// Il2CppName: op_Subtraction
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator-
// Il2CppName: op_Subtraction
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator-
// Il2CppName: op_UnaryNegation
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator/
// Il2CppName: op_Division
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: CodeStage::AntiCheat::ObscuredTypes::ObscuredVector3::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
