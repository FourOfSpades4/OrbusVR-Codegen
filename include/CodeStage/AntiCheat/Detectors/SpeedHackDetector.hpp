// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: CodeStage.AntiCheat.Detectors.ActDetectorBase
#include "CodeStage/AntiCheat/Detectors/ActDetectorBase.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityAction
  class UnityAction;
}
// Forward declaring namespace: UnityEngine::SceneManagement
namespace UnityEngine::SceneManagement {
  // Forward declaring type: Scene
  struct Scene;
  // Forward declaring type: LoadSceneMode
  struct LoadSceneMode;
}
// Completed forward declares
// Type namespace: CodeStage.AntiCheat.Detectors
namespace CodeStage::AntiCheat::Detectors {
  // Forward declaring type: SpeedHackDetector
  class SpeedHackDetector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::CodeStage::AntiCheat::Detectors::SpeedHackDetector);
DEFINE_IL2CPP_ARG_TYPE(::CodeStage::AntiCheat::Detectors::SpeedHackDetector*, "CodeStage.AntiCheat.Detectors", "SpeedHackDetector");
// Type namespace: CodeStage.AntiCheat.Detectors
namespace CodeStage::AntiCheat::Detectors {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: CodeStage.AntiCheat.Detectors.SpeedHackDetector
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: AC22C4
  class SpeedHackDetector : public ::CodeStage::AntiCheat::Detectors::ActDetectorBase {
    public:
    // Writing base type padding for base size: 0x33 to desired offset: 0x34
    char ___base_padding[0x1] = {};
    public:
    // [TooltipAttribute] Offset: 0xAC6AD0
    // public System.Single interval
    // Size: 0x4
    // Offset: 0x34
    float interval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAC6B08
    // public System.Byte maxFalsePositives
    // Size: 0x1
    // Offset: 0x38
    uint8_t maxFalsePositives;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: maxFalsePositives and: coolDown
    char __padding1[0x3] = {};
    // [TooltipAttribute] Offset: 0xAC6B40
    // public System.Int32 coolDown
    // Size: 0x4
    // Offset: 0x3C
    int coolDown;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Byte currentFalsePositives
    // Size: 0x1
    // Offset: 0x40
    uint8_t currentFalsePositives;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: currentFalsePositives and: currentCooldownShots
    char __padding3[0x3] = {};
    // private System.Int32 currentCooldownShots
    // Size: 0x4
    // Offset: 0x44
    int currentCooldownShots;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int64 ticksOnStart
    // Size: 0x8
    // Offset: 0x48
    int64_t ticksOnStart;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 vulnerableTicksOnStart
    // Size: 0x8
    // Offset: 0x50
    int64_t vulnerableTicksOnStart;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 prevTicks
    // Size: 0x8
    // Offset: 0x58
    int64_t prevTicks;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 prevIntervalTicks
    // Size: 0x8
    // Offset: 0x60
    int64_t prevIntervalTicks;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Single vulnerableTimeOnStart
    // Size: 0x4
    // Offset: 0x68
    float vulnerableTimeOnStart;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // static field const value: static System.String COMPONENT_NAME
    static constexpr const char* COMPONENT_NAME = "Speed Hack Detector";
    // Get static field: static System.String COMPONENT_NAME
    static ::StringW _get_COMPONENT_NAME();
    // Set static field: static System.String COMPONENT_NAME
    static void _set_COMPONENT_NAME(::StringW value);
    // static field const value: static System.String FINAL_LOG_PREFIX
    static constexpr const char* FINAL_LOG_PREFIX = "[ACTk] Speed Hack Detector: ";
    // Get static field: static System.String FINAL_LOG_PREFIX
    static ::StringW _get_FINAL_LOG_PREFIX();
    // Set static field: static System.String FINAL_LOG_PREFIX
    static void _set_FINAL_LOG_PREFIX(::StringW value);
    // static field const value: static private System.Int64 TICKS_PER_SECOND
    static constexpr const int64_t TICKS_PER_SECOND = 10000000;
    // Get static field: static private System.Int64 TICKS_PER_SECOND
    static int64_t _get_TICKS_PER_SECOND();
    // Set static field: static private System.Int64 TICKS_PER_SECOND
    static void _set_TICKS_PER_SECOND(int64_t value);
    // static field const value: static private System.Int32 THRESHOLD
    static constexpr const int THRESHOLD = 5000000;
    // Get static field: static private System.Int32 THRESHOLD
    static int _get_THRESHOLD();
    // Set static field: static private System.Int32 THRESHOLD
    static void _set_THRESHOLD(int value);
    // static field const value: static private System.Single THRESHOLD_FLOAT
    static constexpr const float THRESHOLD_FLOAT = 0.5;
    // Get static field: static private System.Single THRESHOLD_FLOAT
    static float _get_THRESHOLD_FLOAT();
    // Set static field: static private System.Single THRESHOLD_FLOAT
    static void _set_THRESHOLD_FLOAT(float value);
    // Get static field: static private System.Int32 instancesInScene
    static int _get_instancesInScene();
    // Set static field: static private System.Int32 instancesInScene
    static void _set_instancesInScene(int value);
    // [CompilerGeneratedAttribute] Offset: 0xAC6B78
    // Get static field: static private CodeStage.AntiCheat.Detectors.SpeedHackDetector <Instance>k__BackingField
    static ::CodeStage::AntiCheat::Detectors::SpeedHackDetector* _get_$Instance$k__BackingField();
    // Set static field: static private CodeStage.AntiCheat.Detectors.SpeedHackDetector <Instance>k__BackingField
    static void _set_$Instance$k__BackingField(::CodeStage::AntiCheat::Detectors::SpeedHackDetector* value);
    // Get instance field reference: public System.Single interval
    [[deprecated("Use field access instead!")]] float& dyn_interval();
    // Get instance field reference: public System.Byte maxFalsePositives
    [[deprecated("Use field access instead!")]] uint8_t& dyn_maxFalsePositives();
    // Get instance field reference: public System.Int32 coolDown
    [[deprecated("Use field access instead!")]] int& dyn_coolDown();
    // Get instance field reference: private System.Byte currentFalsePositives
    [[deprecated("Use field access instead!")]] uint8_t& dyn_currentFalsePositives();
    // Get instance field reference: private System.Int32 currentCooldownShots
    [[deprecated("Use field access instead!")]] int& dyn_currentCooldownShots();
    // Get instance field reference: private System.Int64 ticksOnStart
    [[deprecated("Use field access instead!")]] int64_t& dyn_ticksOnStart();
    // Get instance field reference: private System.Int64 vulnerableTicksOnStart
    [[deprecated("Use field access instead!")]] int64_t& dyn_vulnerableTicksOnStart();
    // Get instance field reference: private System.Int64 prevTicks
    [[deprecated("Use field access instead!")]] int64_t& dyn_prevTicks();
    // Get instance field reference: private System.Int64 prevIntervalTicks
    [[deprecated("Use field access instead!")]] int64_t& dyn_prevIntervalTicks();
    // Get instance field reference: private System.Single vulnerableTimeOnStart
    [[deprecated("Use field access instead!")]] float& dyn_vulnerableTimeOnStart();
    // static public System.Void StartDetection()
    // Offset: 0x1E5E2D0
    static void StartDetection();
    // static public System.Void StartDetection(UnityEngine.Events.UnityAction callback)
    // Offset: 0x1E5E6C8
    static void StartDetection(::UnityEngine::Events::UnityAction* callback);
    // static public System.Void StartDetection(UnityEngine.Events.UnityAction callback, System.Single interval)
    // Offset: 0x1E5E8B4
    static void StartDetection(::UnityEngine::Events::UnityAction* callback, float interval);
    // static public System.Void StartDetection(UnityEngine.Events.UnityAction callback, System.Single interval, System.Byte maxFalsePositives)
    // Offset: 0x1E5E8F8
    static void StartDetection(::UnityEngine::Events::UnityAction* callback, float interval, uint8_t maxFalsePositives);
    // static public System.Void StartDetection(UnityEngine.Events.UnityAction callback, System.Single interval, System.Byte maxFalsePositives, System.Int32 coolDown)
    // Offset: 0x1E5E94C
    static void StartDetection(::UnityEngine::Events::UnityAction* callback, float interval, uint8_t maxFalsePositives, int coolDown);
    // static public System.Void StopDetection()
    // Offset: 0x1E5E9A8
    static void StopDetection();
    // static public System.Void Dispose()
    // Offset: 0x1E5EAAC
    static void Dispose();
    // static public CodeStage.AntiCheat.Detectors.SpeedHackDetector get_Instance()
    // Offset: 0x1E5E4B0
    static ::CodeStage::AntiCheat::Detectors::SpeedHackDetector* get_Instance();
    // static private System.Void set_Instance(CodeStage.AntiCheat.Detectors.SpeedHackDetector value)
    // Offset: 0x1E5EBB0
    static void set_Instance(::CodeStage::AntiCheat::Detectors::SpeedHackDetector* value);
    // static private CodeStage.AntiCheat.Detectors.SpeedHackDetector get_GetOrCreateInstance()
    // Offset: 0x1E5E6FC
    static ::CodeStage::AntiCheat::Detectors::SpeedHackDetector* get_GetOrCreateInstance();
    // private System.Void Awake()
    // Offset: 0x1E5EC34
    void Awake();
    // private System.Void OnLevelWasLoadedNew(UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.LoadSceneMode mode)
    // Offset: 0x1E5EDD8
    void OnLevelWasLoadedNew(::UnityEngine::SceneManagement::Scene scene, ::UnityEngine::SceneManagement::LoadSceneMode mode);
    // private System.Void OnLevelLoadedCallback()
    // Offset: 0x1E5EDDC
    void OnLevelLoadedCallback();
    // private System.Void OnApplicationPause(System.Boolean pause)
    // Offset: 0x1E5EED0
    void OnApplicationPause(bool pause);
    // private System.Void Update()
    // Offset: 0x1E5EF8C
    void Update();
    // private System.Void StartDetectionInternal(UnityEngine.Events.UnityAction callback, System.Single checkInterval, System.Byte falsePositives, System.Int32 shotsTillCooldown)
    // Offset: 0x1E5E500
    void StartDetectionInternal(::UnityEngine::Events::UnityAction* callback, float checkInterval, uint8_t falsePositives, int shotsTillCooldown);
    // private System.Void ResetStartTicks()
    // Offset: 0x1E5EEDC
    void ResetStartTicks();
    // private System.Void .ctor()
    // Offset: 0x1E5EC04
    // Implemented from: CodeStage.AntiCheat.Detectors.ActDetectorBase
    // Base method: System.Void ActDetectorBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpeedHackDetector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::CodeStage::AntiCheat::Detectors::SpeedHackDetector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpeedHackDetector*, creationType>()));
    }
    // protected override System.Void OnDestroy()
    // Offset: 0x1E5ED74
    // Implemented from: CodeStage.AntiCheat.Detectors.ActDetectorBase
    // Base method: System.Void ActDetectorBase::OnDestroy()
    void OnDestroy();
    // protected override System.Void StartDetectionAutomatically()
    // Offset: 0x1E5F19C
    // Implemented from: CodeStage.AntiCheat.Detectors.ActDetectorBase
    // Base method: System.Void ActDetectorBase::StartDetectionAutomatically()
    void StartDetectionAutomatically();
    // protected override System.Void PauseDetector()
    // Offset: 0x1E5F1B0
    // Implemented from: CodeStage.AntiCheat.Detectors.ActDetectorBase
    // Base method: System.Void ActDetectorBase::PauseDetector()
    void PauseDetector();
    // protected override System.Void ResumeDetector()
    // Offset: 0x1E5F1B8
    // Implemented from: CodeStage.AntiCheat.Detectors.ActDetectorBase
    // Base method: System.Void ActDetectorBase::ResumeDetector()
    void ResumeDetector();
    // protected override System.Void StopDetectionInternal()
    // Offset: 0x1E5F1D4
    // Implemented from: CodeStage.AntiCheat.Detectors.ActDetectorBase
    // Base method: System.Void ActDetectorBase::StopDetectionInternal()
    void StopDetectionInternal();
    // protected override System.Void DisposeInternal()
    // Offset: 0x1E5F1E8
    // Implemented from: CodeStage.AntiCheat.Detectors.ActDetectorBase
    // Base method: System.Void ActDetectorBase::DisposeInternal()
    void DisposeInternal();
  }; // CodeStage.AntiCheat.Detectors.SpeedHackDetector
  #pragma pack(pop)
  static check_size<sizeof(SpeedHackDetector), 104 + sizeof(float)> __CodeStage_AntiCheat_Detectors_SpeedHackDetectorSizeCheck;
  static_assert(sizeof(SpeedHackDetector) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::StartDetection
// Il2CppName: StartDetection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::StartDetection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "StartDetection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::StartDetection
// Il2CppName: StartDetection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Events::UnityAction*)>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::StartDetection)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("UnityEngine.Events", "UnityAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "StartDetection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::StartDetection
// Il2CppName: StartDetection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Events::UnityAction*, float)>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::StartDetection)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("UnityEngine.Events", "UnityAction")->byval_arg;
    static auto* interval = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "StartDetection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, interval});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::StartDetection
// Il2CppName: StartDetection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Events::UnityAction*, float, uint8_t)>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::StartDetection)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("UnityEngine.Events", "UnityAction")->byval_arg;
    static auto* interval = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxFalsePositives = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "StartDetection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, interval, maxFalsePositives});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::StartDetection
// Il2CppName: StartDetection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Events::UnityAction*, float, uint8_t, int)>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::StartDetection)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("UnityEngine.Events", "UnityAction")->byval_arg;
    static auto* interval = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxFalsePositives = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* coolDown = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "StartDetection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, interval, maxFalsePositives, coolDown});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::StopDetection
// Il2CppName: StopDetection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::StopDetection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "StopDetection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::CodeStage::AntiCheat::Detectors::SpeedHackDetector* (*)()>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::set_Instance
// Il2CppName: set_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::CodeStage::AntiCheat::Detectors::SpeedHackDetector*)>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::set_Instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("CodeStage.AntiCheat.Detectors", "SpeedHackDetector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "set_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::get_GetOrCreateInstance
// Il2CppName: get_GetOrCreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::CodeStage::AntiCheat::Detectors::SpeedHackDetector* (*)()>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::get_GetOrCreateInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "get_GetOrCreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::Detectors::SpeedHackDetector::*)()>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::OnLevelWasLoadedNew
// Il2CppName: OnLevelWasLoadedNew
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::Detectors::SpeedHackDetector::*)(::UnityEngine::SceneManagement::Scene, ::UnityEngine::SceneManagement::LoadSceneMode)>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::OnLevelWasLoadedNew)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "LoadSceneMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "OnLevelWasLoadedNew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, mode});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::OnLevelLoadedCallback
// Il2CppName: OnLevelLoadedCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::Detectors::SpeedHackDetector::*)()>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::OnLevelLoadedCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "OnLevelLoadedCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::Detectors::SpeedHackDetector::*)(bool)>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::OnApplicationPause)> {
  static const MethodInfo* get() {
    static auto* pause = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pause});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::Detectors::SpeedHackDetector::*)()>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::StartDetectionInternal
// Il2CppName: StartDetectionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::Detectors::SpeedHackDetector::*)(::UnityEngine::Events::UnityAction*, float, uint8_t, int)>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::StartDetectionInternal)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("UnityEngine.Events", "UnityAction")->byval_arg;
    static auto* checkInterval = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* falsePositives = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* shotsTillCooldown = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "StartDetectionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, checkInterval, falsePositives, shotsTillCooldown});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::ResetStartTicks
// Il2CppName: ResetStartTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::Detectors::SpeedHackDetector::*)()>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::ResetStartTicks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "ResetStartTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::Detectors::SpeedHackDetector::*)()>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::StartDetectionAutomatically
// Il2CppName: StartDetectionAutomatically
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::Detectors::SpeedHackDetector::*)()>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::StartDetectionAutomatically)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "StartDetectionAutomatically", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::PauseDetector
// Il2CppName: PauseDetector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::Detectors::SpeedHackDetector::*)()>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::PauseDetector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "PauseDetector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::ResumeDetector
// Il2CppName: ResumeDetector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::Detectors::SpeedHackDetector::*)()>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::ResumeDetector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "ResumeDetector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::StopDetectionInternal
// Il2CppName: StopDetectionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::Detectors::SpeedHackDetector::*)()>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::StopDetectionInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "StopDetectionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CodeStage::AntiCheat::Detectors::SpeedHackDetector::DisposeInternal
// Il2CppName: DisposeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CodeStage::AntiCheat::Detectors::SpeedHackDetector::*)()>(&CodeStage::AntiCheat::Detectors::SpeedHackDetector::DisposeInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CodeStage::AntiCheat::Detectors::SpeedHackDetector*), "DisposeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
