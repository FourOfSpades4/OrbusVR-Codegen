// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Xefier.Threading.Tasks
namespace Xefier::Threading::Tasks {
  // Forward declaring type: TaskStatus
  struct TaskStatus;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Xefier::Threading::Tasks::TaskStatus, "Xefier.Threading.Tasks", "TaskStatus");
// Type namespace: Xefier.Threading.Tasks
namespace Xefier::Threading::Tasks {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Xefier.Threading.Tasks.TaskStatus
  // [TokenAttribute] Offset: FFFFFFFF
  struct TaskStatus/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TaskStatus
    constexpr TaskStatus(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Xefier.Threading.Tasks.TaskStatus Canceled
    static constexpr const int Canceled = 0;
    // Get static field: static public Xefier.Threading.Tasks.TaskStatus Canceled
    static ::Xefier::Threading::Tasks::TaskStatus _get_Canceled();
    // Set static field: static public Xefier.Threading.Tasks.TaskStatus Canceled
    static void _set_Canceled(::Xefier::Threading::Tasks::TaskStatus value);
    // static field const value: static public Xefier.Threading.Tasks.TaskStatus Created
    static constexpr const int Created = 1;
    // Get static field: static public Xefier.Threading.Tasks.TaskStatus Created
    static ::Xefier::Threading::Tasks::TaskStatus _get_Created();
    // Set static field: static public Xefier.Threading.Tasks.TaskStatus Created
    static void _set_Created(::Xefier::Threading::Tasks::TaskStatus value);
    // static field const value: static public Xefier.Threading.Tasks.TaskStatus Faulted
    static constexpr const int Faulted = 2;
    // Get static field: static public Xefier.Threading.Tasks.TaskStatus Faulted
    static ::Xefier::Threading::Tasks::TaskStatus _get_Faulted();
    // Set static field: static public Xefier.Threading.Tasks.TaskStatus Faulted
    static void _set_Faulted(::Xefier::Threading::Tasks::TaskStatus value);
    // static field const value: static public Xefier.Threading.Tasks.TaskStatus RanToCompletion
    static constexpr const int RanToCompletion = 3;
    // Get static field: static public Xefier.Threading.Tasks.TaskStatus RanToCompletion
    static ::Xefier::Threading::Tasks::TaskStatus _get_RanToCompletion();
    // Set static field: static public Xefier.Threading.Tasks.TaskStatus RanToCompletion
    static void _set_RanToCompletion(::Xefier::Threading::Tasks::TaskStatus value);
    // static field const value: static public Xefier.Threading.Tasks.TaskStatus Running
    static constexpr const int Running = 4;
    // Get static field: static public Xefier.Threading.Tasks.TaskStatus Running
    static ::Xefier::Threading::Tasks::TaskStatus _get_Running();
    // Set static field: static public Xefier.Threading.Tasks.TaskStatus Running
    static void _set_Running(::Xefier::Threading::Tasks::TaskStatus value);
    // static field const value: static public Xefier.Threading.Tasks.TaskStatus WaitingForActivation
    static constexpr const int WaitingForActivation = 5;
    // Get static field: static public Xefier.Threading.Tasks.TaskStatus WaitingForActivation
    static ::Xefier::Threading::Tasks::TaskStatus _get_WaitingForActivation();
    // Set static field: static public Xefier.Threading.Tasks.TaskStatus WaitingForActivation
    static void _set_WaitingForActivation(::Xefier::Threading::Tasks::TaskStatus value);
    // static field const value: static public Xefier.Threading.Tasks.TaskStatus WaitingForChildrenToComplete
    static constexpr const int WaitingForChildrenToComplete = 6;
    // Get static field: static public Xefier.Threading.Tasks.TaskStatus WaitingForChildrenToComplete
    static ::Xefier::Threading::Tasks::TaskStatus _get_WaitingForChildrenToComplete();
    // Set static field: static public Xefier.Threading.Tasks.TaskStatus WaitingForChildrenToComplete
    static void _set_WaitingForChildrenToComplete(::Xefier::Threading::Tasks::TaskStatus value);
    // static field const value: static public Xefier.Threading.Tasks.TaskStatus WaitingToRun
    static constexpr const int WaitingToRun = 7;
    // Get static field: static public Xefier.Threading.Tasks.TaskStatus WaitingToRun
    static ::Xefier::Threading::Tasks::TaskStatus _get_WaitingToRun();
    // Set static field: static public Xefier.Threading.Tasks.TaskStatus WaitingToRun
    static void _set_WaitingToRun(::Xefier::Threading::Tasks::TaskStatus value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Xefier.Threading.Tasks.TaskStatus
  #pragma pack(pop)
  static check_size<sizeof(TaskStatus), 0 + sizeof(int)> __Xefier_Threading_Tasks_TaskStatusSizeCheck;
  static_assert(sizeof(TaskStatus) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
