// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: Xefier::Threading::Tasks
namespace Xefier::Threading::Tasks {
  // Forward declaring type: TaskStatus
  struct TaskStatus;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: WaitHandle
  class WaitHandle;
}
// Completed forward declares
// Type namespace: Xefier.Threading.Tasks
namespace Xefier::Threading::Tasks {
  // Forward declaring type: ITask
  class ITask;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Xefier::Threading::Tasks::ITask);
DEFINE_IL2CPP_ARG_TYPE(::Xefier::Threading::Tasks::ITask*, "Xefier.Threading.Tasks", "ITask");
// Type namespace: Xefier.Threading.Tasks
namespace Xefier::Threading::Tasks {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Xefier.Threading.Tasks.ITask
  // [TokenAttribute] Offset: FFFFFFFF
  class ITask {
    public:
    // public System.Exception get_Exception()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Exception* get_Exception();
    // public System.Boolean get_IsCanceled()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsCanceled();
    // public System.Boolean get_IsFaulted()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsFaulted();
    // public System.Boolean get_IsCompleted()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsCompleted();
    // public Xefier.Threading.Tasks.TaskStatus get_Status()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Xefier::Threading::Tasks::TaskStatus get_Status();
    // public System.Threading.WaitHandle get_AsyncWaitHandle()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::WaitHandle* get_AsyncWaitHandle();
    // public Xefier.Threading.Tasks.ITask ContinueWith(System.Action`1<Xefier.Threading.Tasks.ITask> action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Xefier::Threading::Tasks::ITask* ContinueWith(::System::Action_1<::Xefier::Threading::Tasks::ITask*>* action);
    // public System.Void Wait()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Wait();
  }; // Xefier.Threading.Tasks.ITask
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Xefier::Threading::Tasks::ITask::get_Exception
// Il2CppName: get_Exception
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (Xefier::Threading::Tasks::ITask::*)()>(&Xefier::Threading::Tasks::ITask::get_Exception)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Xefier::Threading::Tasks::ITask*), "get_Exception", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Xefier::Threading::Tasks::ITask::get_IsCanceled
// Il2CppName: get_IsCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Xefier::Threading::Tasks::ITask::*)()>(&Xefier::Threading::Tasks::ITask::get_IsCanceled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Xefier::Threading::Tasks::ITask*), "get_IsCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Xefier::Threading::Tasks::ITask::get_IsFaulted
// Il2CppName: get_IsFaulted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Xefier::Threading::Tasks::ITask::*)()>(&Xefier::Threading::Tasks::ITask::get_IsFaulted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Xefier::Threading::Tasks::ITask*), "get_IsFaulted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Xefier::Threading::Tasks::ITask::get_IsCompleted
// Il2CppName: get_IsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Xefier::Threading::Tasks::ITask::*)()>(&Xefier::Threading::Tasks::ITask::get_IsCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Xefier::Threading::Tasks::ITask*), "get_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Xefier::Threading::Tasks::ITask::get_Status
// Il2CppName: get_Status
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Xefier::Threading::Tasks::TaskStatus (Xefier::Threading::Tasks::ITask::*)()>(&Xefier::Threading::Tasks::ITask::get_Status)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Xefier::Threading::Tasks::ITask*), "get_Status", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Xefier::Threading::Tasks::ITask::get_AsyncWaitHandle
// Il2CppName: get_AsyncWaitHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::WaitHandle* (Xefier::Threading::Tasks::ITask::*)()>(&Xefier::Threading::Tasks::ITask::get_AsyncWaitHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Xefier::Threading::Tasks::ITask*), "get_AsyncWaitHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Xefier::Threading::Tasks::ITask::ContinueWith
// Il2CppName: ContinueWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Xefier::Threading::Tasks::ITask* (Xefier::Threading::Tasks::ITask::*)(::System::Action_1<::Xefier::Threading::Tasks::ITask*>*)>(&Xefier::Threading::Tasks::ITask::ContinueWith)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Xefier.Threading.Tasks", "ITask")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Xefier::Threading::Tasks::ITask*), "ContinueWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: Xefier::Threading::Tasks::ITask::Wait
// Il2CppName: Wait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Xefier::Threading::Tasks::ITask::*)()>(&Xefier::Threading::Tasks::ITask::Wait)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Xefier::Threading::Tasks::ITask*), "Wait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
