// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Xefier.Threading.Tasks.ITask
#include "Xefier/Threading/Tasks/ITask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Xefier.Threading.Tasks
namespace Xefier::Threading::Tasks {
  // Forward declaring type: ITask`1<TResult>
  template<typename TResult>
  class ITask_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Xefier::Threading::Tasks::ITask_1, "Xefier.Threading.Tasks", "ITask`1");
// Type namespace: Xefier.Threading.Tasks
namespace Xefier::Threading::Tasks {
  // WARNING Size may be invalid!
  // Autogenerated type: Xefier.Threading.Tasks.ITask`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TResult>
  class ITask_1/*, public ::Xefier::Threading::Tasks::ITask*/ {
    public:
    // Creating interface conversion operator: operator ::Xefier::Threading::Tasks::ITask
    operator ::Xefier::Threading::Tasks::ITask() noexcept {
      return *reinterpret_cast<::Xefier::Threading::Tasks::ITask*>(this);
    }
    // public TResult get_Result()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TResult get_Result() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::ITask_1::get_Result");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Xefier::Threading::Tasks::ITask_1<TResult>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<TResult, false>(this, ___internal__method);
    }
    // public Xefier.Threading.Tasks.ITask ContinueWith(System.Action`1<Xefier.Threading.Tasks.ITask`1<TResult>> continuationAction)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Xefier::Threading::Tasks::ITask* ContinueWith(::System::Action_1<::Xefier::Threading::Tasks::ITask_1<TResult>*>* continuationAction) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::ITask_1::ContinueWith");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Xefier::Threading::Tasks::ITask_1<TResult>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Xefier::Threading::Tasks::ITask*, false>(this, ___internal__method, continuationAction);
    }
  }; // Xefier.Threading.Tasks.ITask`1
  // Could not write size check! Type: Xefier.Threading.Tasks.ITask`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
