// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Xefier.Threading.Tasks.Task
#include "Xefier/Threading/Tasks/Task.hpp"
// Including type: Xefier.Threading.Tasks.ITask`1
#include "Xefier/Threading/Tasks/ITask_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Xefier::Threading::Tasks
namespace Xefier::Threading::Tasks {
  // Skipping declaration: <>c__DisplayClass5_0 because it is already included!
  // Skipping declaration: <>c__DisplayClass6_0 because it is already included!
  // Skipping declaration: ITask because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Xefier.Threading.Tasks
namespace Xefier::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Xefier::Threading::Tasks::Task_1, "Xefier.Threading.Tasks", "Task`1");
// Type namespace: Xefier.Threading.Tasks
namespace Xefier::Threading::Tasks {
  // WARNING Size may be invalid!
  // Autogenerated type: Xefier.Threading.Tasks.Task`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TResult>
  class Task_1 : public ::Xefier::Threading::Tasks::Task/*, public ::Xefier::Threading::Tasks::ITask_1<TResult>*/ {
    public:
    // Nested type: ::Xefier::Threading::Tasks::Task_1::$$c__DisplayClass5_0<TResult>
    class $$c__DisplayClass5_0;
    // Nested type: ::Xefier::Threading::Tasks::Task_1::$$c__DisplayClass6_0<TResult>
    class $$c__DisplayClass6_0;
    // WARNING Size may be invalid!
    // Autogenerated type: Xefier.Threading.Tasks.Task`1/<>c__DisplayClass5_0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: AC05DC
    class $$c__DisplayClass5_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = Task_1<TResult>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass5_0";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public System.Func`1<TResult> function
      // Size: 0x8
      // Offset: 0x0
      ::System::Func_1<TResult>* function;
      // Field size check
      static_assert(sizeof(::System::Func_1<TResult>*) == 0x8);
      // public Xefier.Threading.Tasks.Task`1<TResult> <>4__this
      // Size: 0x8
      // Offset: 0x0
      ::Xefier::Threading::Tasks::Task_1<TResult>* $$4__this;
      // Field size check
      static_assert(sizeof(::Xefier::Threading::Tasks::Task_1<TResult>*) == 0x8);
      public:
      // Autogenerated instance field getter
      // Get instance field: public System.Func`1<TResult> function
      [[deprecated("Use field access instead!")]] ::System::Func_1<TResult>*& dyn_function() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::Task_1::$$c__DisplayClass5_0::dyn_function");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "function"))->offset;
        return *reinterpret_cast<::System::Func_1<TResult>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public Xefier.Threading.Tasks.Task`1<TResult> <>4__this
      [[deprecated("Use field access instead!")]] ::Xefier::Threading::Tasks::Task_1<TResult>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::Task_1::$$c__DisplayClass5_0::dyn_$$4__this");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<::Xefier::Threading::Tasks::Task_1<TResult>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename Task_1<TResult>::$$c__DisplayClass5_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::Task_1::$$c__DisplayClass5_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename Task_1<TResult>::$$c__DisplayClass5_0*, creationType>()));
      }
      // System.Void <.ctor>b__0()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $_ctor$b__0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::Task_1::$$c__DisplayClass5_0::<.ctor>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // Xefier.Threading.Tasks.Task`1/<>c__DisplayClass5_0
    // Could not write size check! Type: Xefier.Threading.Tasks.Task`1/<>c__DisplayClass5_0 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Xefier.Threading.Tasks.Task`1/<>c__DisplayClass6_0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: AC05EC
    class $$c__DisplayClass6_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = Task_1<TResult>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass6_0";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public System.Action`1<Xefier.Threading.Tasks.ITask`1<TResult>> continuationAction
      // Size: 0x8
      // Offset: 0x0
      ::System::Action_1<::Xefier::Threading::Tasks::ITask_1<TResult>*>* continuationAction;
      // Field size check
      static_assert(sizeof(::System::Action_1<::Xefier::Threading::Tasks::ITask_1<TResult>*>*) == 0x8);
      // public Xefier.Threading.Tasks.Task`1<TResult> <>4__this
      // Size: 0x8
      // Offset: 0x0
      ::Xefier::Threading::Tasks::Task_1<TResult>* $$4__this;
      // Field size check
      static_assert(sizeof(::Xefier::Threading::Tasks::Task_1<TResult>*) == 0x8);
      public:
      // Autogenerated instance field getter
      // Get instance field: public System.Action`1<Xefier.Threading.Tasks.ITask`1<TResult>> continuationAction
      [[deprecated("Use field access instead!")]] ::System::Action_1<::Xefier::Threading::Tasks::ITask_1<TResult>*>*& dyn_continuationAction() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::Task_1::$$c__DisplayClass6_0::dyn_continuationAction");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "continuationAction"))->offset;
        return *reinterpret_cast<::System::Action_1<::Xefier::Threading::Tasks::ITask_1<TResult>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public Xefier.Threading.Tasks.Task`1<TResult> <>4__this
      [[deprecated("Use field access instead!")]] ::Xefier::Threading::Tasks::Task_1<TResult>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::Task_1::$$c__DisplayClass6_0::dyn_$$4__this");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<::Xefier::Threading::Tasks::Task_1<TResult>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename Task_1<TResult>::$$c__DisplayClass6_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::Task_1::$$c__DisplayClass6_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename Task_1<TResult>::$$c__DisplayClass6_0*, creationType>()));
      }
      // System.Void <ContinueWith>b__0(Xefier.Threading.Tasks.ITask t)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $ContinueWith$b__0(::Xefier::Threading::Tasks::ITask* t) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::Task_1::$$c__DisplayClass6_0::<ContinueWith>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ContinueWith>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
      }
    }; // Xefier.Threading.Tasks.Task`1/<>c__DisplayClass6_0
    // Could not write size check! Type: Xefier.Threading.Tasks.Task`1/<>c__DisplayClass6_0 is generic, or has no fields that are valid for size checks!
    public:
    // [CompilerGeneratedAttribute] Offset: 0xAC05FC
    // private TResult <Result>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    TResult Result;
    public:
    // Creating interface conversion operator: operator ::Xefier::Threading::Tasks::ITask_1<TResult>
    operator ::Xefier::Threading::Tasks::ITask_1<TResult>() noexcept {
      return *reinterpret_cast<::Xefier::Threading::Tasks::ITask_1<TResult>*>(this);
    }
    // Deleting conversion operator: operator ::System::Threading::ManualResetEvent*
    constexpr operator ::System::Threading::ManualResetEvent*() const noexcept = delete;
    // Autogenerated instance field getter
    // Get instance field: private TResult <Result>k__BackingField
    [[deprecated("Use field access instead!")]] TResult& dyn_$Result$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::Task_1::dyn_$Result$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Result>k__BackingField"))->offset;
      return *reinterpret_cast<TResult*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public TResult get_Result()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TResult get_Result() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::Task_1::get_Result");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Xefier::Threading::Tasks::Task_1<TResult>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<TResult, false>(this, ___internal__method);
    }
    // private System.Void set_Result(TResult value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Result(TResult value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::Task_1::set_Result");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Result", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // static public Xefier.Threading.Tasks.Task`1<TResult> Run(System.Func`1<TResult> function)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::Xefier::Threading::Tasks::Task_1<TResult>* Run(::System::Func_1<TResult>* function) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::Task_1::Run");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Task_1<TResult>*>::get(), "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(function)})));
      return ::il2cpp_utils::RunMethodRethrow<::Xefier::Threading::Tasks::Task_1<TResult>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, function);
    }
    // public System.Void .ctor(System.Func`1<TResult> function)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Task_1<TResult>* New_ctor(::System::Func_1<TResult>* function) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::Task_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Task_1<TResult>*, creationType>(function)));
    }
    // public Xefier.Threading.Tasks.ITask ContinueWith(System.Action`1<Xefier.Threading.Tasks.ITask`1<TResult>> continuationAction)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Xefier::Threading::Tasks::ITask* ContinueWith(::System::Action_1<::Xefier::Threading::Tasks::ITask_1<TResult>*>* continuationAction) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Xefier::Threading::Tasks::Task_1::ContinueWith");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Xefier::Threading::Tasks::Task_1<TResult>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Xefier::Threading::Tasks::ITask*, false>(this, ___internal__method, continuationAction);
    }
  }; // Xefier.Threading.Tasks.Task`1
  // Could not write size check! Type: Xefier.Threading.Tasks.Task`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
