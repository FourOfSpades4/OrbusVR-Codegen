// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: DrawingTexture
  class DrawingTexture;
  // Forward declaring type: TextureCamera
  class TextureCamera;
  // Forward declaring type: MeshBuffer
  class MeshBuffer;
}
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: AtlasLocation
  class AtlasLocation;
  // Forward declaring type: VectorPath
  class VectorPath;
}
// Completed forward declares
// Type namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: TextureCameras
  class TextureCameras;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::InfiniText::TextureCameras);
DEFINE_IL2CPP_ARG_TYPE(::InfiniText::TextureCameras*, "InfiniText", "TextureCameras");
// Type namespace: InfiniText
namespace InfiniText {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: InfiniText.TextureCameras
  // [TokenAttribute] Offset: FFFFFFFF
  class TextureCameras : public ::Il2CppObject {
    public:
    // Get static field: static public System.Boolean CPUCopyMode
    static bool _get_CPUCopyMode();
    // Set static field: static public System.Boolean CPUCopyMode
    static void _set_CPUCopyMode(bool value);
    // Get static field: static public System.Boolean SD
    static bool _get_SD();
    // Set static field: static public System.Boolean SD
    static void _set_SD(bool value);
    // Get static field: static private System.Single Scale
    static float _get_Scale();
    // Set static field: static private System.Single Scale
    static void _set_Scale(float value);
    // Get static field: static public System.Single Accuracy
    static float _get_Accuracy();
    // Set static field: static public System.Single Accuracy
    static void _set_Accuracy(float value);
    // Get static field: static public System.Single TriangulationAccuracy
    static float _get_TriangulationAccuracy();
    // Set static field: static public System.Single TriangulationAccuracy
    static void _set_TriangulationAccuracy(float value);
    // Get static field: static public System.Int32 Layer
    static int _get_Layer();
    // Set static field: static public System.Int32 Layer
    static void _set_Layer(int value);
    // Get static field: static public InfiniText.DrawingTexture Pending
    static ::InfiniText::DrawingTexture* _get_Pending();
    // Set static field: static public InfiniText.DrawingTexture Pending
    static void _set_Pending(::InfiniText::DrawingTexture* value);
    // Get static field: static public InfiniText.TextureCamera Camera
    static ::InfiniText::TextureCamera* _get_Camera();
    // Set static field: static public InfiniText.TextureCamera Camera
    static void _set_Camera(::InfiniText::TextureCamera* value);
    // Get static field: static public InfiniText.MeshBuffer BufferPool
    static ::InfiniText::MeshBuffer* _get_BufferPool();
    // Set static field: static public InfiniText.MeshBuffer BufferPool
    static void _set_BufferPool(::InfiniText::MeshBuffer* value);
    // static public System.Void RequestDraw(Blaze.AtlasLocation location, Blaze.VectorPath path, System.Single offsetX, System.Single offsetY, System.Single drawHeight)
    // Offset: 0x10570E8
    static void RequestDraw(::Blaze::AtlasLocation* location, ::Blaze::VectorPath* path, float offsetX, float offsetY, float drawHeight);
    // static public System.Void Update(System.Single deltaTime)
    // Offset: 0x1057304
    static void Update(float deltaTime);
    // static public System.Void PoolBuffer(InfiniText.MeshBuffer buffer)
    // Offset: 0x1056C6C
    static void PoolBuffer(::InfiniText::MeshBuffer* buffer);
    // static public InfiniText.MeshBuffer GetBuffer()
    // Offset: 0x10574A4
    static ::InfiniText::MeshBuffer* GetBuffer();
    // static private System.Void .cctor()
    // Offset: 0x1057604
    static void _cctor();
  }; // InfiniText.TextureCameras
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: InfiniText::TextureCameras::RequestDraw
// Il2CppName: RequestDraw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Blaze::AtlasLocation*, ::Blaze::VectorPath*, float, float, float)>(&InfiniText::TextureCameras::RequestDraw)> {
  static const MethodInfo* get() {
    static auto* location = &::il2cpp_utils::GetClassFromName("Blaze", "AtlasLocation")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("Blaze", "VectorPath")->byval_arg;
    static auto* offsetX = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* offsetY = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* drawHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::TextureCameras*), "RequestDraw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{location, path, offsetX, offsetY, drawHeight});
  }
};
// Writing MetadataGetter for method: InfiniText::TextureCameras::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&InfiniText::TextureCameras::Update)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::TextureCameras*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime});
  }
};
// Writing MetadataGetter for method: InfiniText::TextureCameras::PoolBuffer
// Il2CppName: PoolBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::InfiniText::MeshBuffer*)>(&InfiniText::TextureCameras::PoolBuffer)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("InfiniText", "MeshBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::TextureCameras*), "PoolBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: InfiniText::TextureCameras::GetBuffer
// Il2CppName: GetBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::InfiniText::MeshBuffer* (*)()>(&InfiniText::TextureCameras::GetBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::TextureCameras*), "GetBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::TextureCameras::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&InfiniText::TextureCameras::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::TextureCameras*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
