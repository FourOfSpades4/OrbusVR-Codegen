// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Blaze.VectorPath
#include "Blaze/VectorPath.hpp"
// Including type: Blaze.AtlasEntity
#include "Blaze/AtlasEntity.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: ImagePackage
  class ImagePackage;
}
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: AtlasLocation
  class AtlasLocation;
  // Forward declaring type: TextureAtlas
  class TextureAtlas;
}
// Forward declaring namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: FontFace
  class FontFace;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: Glyph
  class Glyph;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::InfiniText::Glyph);
DEFINE_IL2CPP_ARG_TYPE(::InfiniText::Glyph*, "InfiniText", "Glyph");
// Type namespace: InfiniText
namespace InfiniText {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: InfiniText.Glyph
  // [TokenAttribute] Offset: FFFFFFFF
  class Glyph : public ::Blaze::VectorPath/*, public ::Blaze::AtlasEntity*/ {
    public:
    // Writing base type padding for base size: 0x41 to desired offset: 0x48
    char ___base_padding[0x7] = {};
    public:
    // public PowerUI.ImagePackage Image
    // Size: 0x8
    // Offset: 0x48
    ::PowerUI::ImagePackage* Image;
    // Field size check
    static_assert(sizeof(::PowerUI::ImagePackage*) == 0x8);
    // public Blaze.AtlasLocation Location
    // Size: 0x8
    // Offset: 0x50
    ::Blaze::AtlasLocation* Location;
    // Field size check
    static_assert(sizeof(::Blaze::AtlasLocation*) == 0x8);
    // public System.Int32 UniqueID
    // Size: 0x4
    // Offset: 0x58
    int UniqueID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: UniqueID and: Font
    char __padding2[0x4] = {};
    // public InfiniText.FontFace Font
    // Size: 0x8
    // Offset: 0x60
    ::InfiniText::FontFace* Font;
    // Field size check
    static_assert(sizeof(::InfiniText::FontFace*) == 0x8);
    // public System.Int32 RawCharcode
    // Size: 0x4
    // Offset: 0x68
    int RawCharcode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single AdvanceWidth
    // Size: 0x4
    // Offset: 0x6C
    float AdvanceWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single LeftSideBearing
    // Size: 0x4
    // Offset: 0x70
    float LeftSideBearing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: LeftSideBearing and: Kerning
    char __padding6[0x4] = {};
    // public System.Collections.Generic.Dictionary`2<InfiniText.Glyph,System.Single> Kerning
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::Dictionary_2<::InfiniText::Glyph*, float>* Kerning;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::InfiniText::Glyph*, float>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Blaze::AtlasEntity
    operator ::Blaze::AtlasEntity() noexcept {
      return *reinterpret_cast<::Blaze::AtlasEntity*>(this);
    }
    // Get static field: static private UnityEngine.Color32 Fill
    static ::UnityEngine::Color32 _get_Fill();
    // Set static field: static private UnityEngine.Color32 Fill
    static void _set_Fill(::UnityEngine::Color32 value);
    // Get instance field reference: public PowerUI.ImagePackage Image
    [[deprecated("Use field access instead!")]] ::PowerUI::ImagePackage*& dyn_Image();
    // Get instance field reference: public Blaze.AtlasLocation Location
    [[deprecated("Use field access instead!")]] ::Blaze::AtlasLocation*& dyn_Location();
    // Get instance field reference: public System.Int32 UniqueID
    [[deprecated("Use field access instead!")]] int& dyn_UniqueID();
    // Get instance field reference: public InfiniText.FontFace Font
    [[deprecated("Use field access instead!")]] ::InfiniText::FontFace*& dyn_Font();
    // Get instance field reference: public System.Int32 RawCharcode
    [[deprecated("Use field access instead!")]] int& dyn_RawCharcode();
    // Get instance field reference: public System.Single AdvanceWidth
    [[deprecated("Use field access instead!")]] float& dyn_AdvanceWidth();
    // Get instance field reference: public System.Single LeftSideBearing
    [[deprecated("Use field access instead!")]] float& dyn_LeftSideBearing();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<InfiniText.Glyph,System.Single> Kerning
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::InfiniText::Glyph*, float>*& dyn_Kerning();
    // public System.Void OnScreen()
    // Offset: 0x14ACA44
    void OnScreen();
    // public System.Void OffScreen()
    // Offset: 0x14ACAE8
    void OffScreen();
    // public System.Boolean get_Rightwards()
    // Offset: 0x14ACB1C
    bool get_Rightwards();
    // public System.Boolean get_Space()
    // Offset: 0x14ACB28
    bool get_Space();
    // public System.Void SetupImage(PowerUI.ImagePackage package)
    // Offset: 0x14ACB38
    void SetupImage(::PowerUI::ImagePackage* package);
    // public System.Boolean get_RequiresLoad()
    // Offset: 0x14ACC30
    bool get_RequiresLoad();
    // public System.Boolean AddToFont(System.String name, System.Int32 charcode)
    // Offset: 0x14ACC78
    bool AddToFont(::StringW name, int charcode);
    // public System.Boolean AddToFont(System.String name, System.String charcode)
    // Offset: 0x14ACD18
    bool AddToFont(::StringW name, ::StringW charcode);
    // public System.Void LoadNow()
    // Offset: 0x14ACD88
    void LoadNow();
    // public System.Boolean MultiThreadDraw()
    // Offset: 0x14ACEF0
    bool MultiThreadDraw();
    // public System.Void GetDimensionsOnAtlas(out System.Int32 width, out System.Int32 height)
    // Offset: 0x14ACEF8
    void GetDimensionsOnAtlas(ByRef<int> width, ByRef<int> height);
    // public System.Boolean DrawToAtlas(Blaze.TextureAtlas atlas, Blaze.AtlasLocation location)
    // Offset: 0x14AD064
    bool DrawToAtlas(::Blaze::TextureAtlas* atlas, ::Blaze::AtlasLocation* location);
    // public System.Int32 GetAtlasID()
    // Offset: 0x14AD138
    int GetAtlasID();
    // public System.Int32 get_RasterHeight()
    // Offset: 0x14ACFDC
    int get_RasterHeight();
    // public System.Int32 get_RasterWidth()
    // Offset: 0x14ACF54
    int get_RasterWidth();
    // public System.Boolean Rasterise(UnityEngine.Color32[] atlasPixels, System.Int32 atlasWidth, System.Int32 baseIndex, System.Boolean clear)
    // Offset: 0x14AD140
    bool Rasterise(::ArrayW<::UnityEngine::Color32> atlasPixels, int atlasWidth, int baseIndex, bool clear);
    // public System.Boolean Rasterise(UnityEngine.Color32[] atlasPixels, System.Int32 atlasWidth, System.Int32 baseIndex, System.Boolean clear, UnityEngine.Color32 colour)
    // Offset: 0x14AD288
    bool Rasterise(::ArrayW<::UnityEngine::Color32> atlasPixels, int atlasWidth, int baseIndex, bool clear, ::UnityEngine::Color32 colour);
    // public System.Void .ctor(InfiniText.FontFace parent)
    // Offset: 0x14A4CE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Glyph* New_ctor(::InfiniText::FontFace* parent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Glyph*, creationType>(parent)));
    }
    // public InfiniText.Glyph Copy()
    // Offset: 0x14A8758
    ::InfiniText::Glyph* Copy();
    // public System.Void Copy(InfiniText.Glyph into)
    // Offset: 0x14AD438
    void Copy(::InfiniText::Glyph* into);
    // public System.Void AddKerningPair(InfiniText.Glyph beforeThis, System.Single value)
    // Offset: 0x14AD4F0
    void AddKerningPair(::InfiniText::Glyph* beforeThis, float value);
    // public System.Void AddCharcode(System.Int32 charCode)
    // Offset: 0x14A6DEC
    void AddCharcode(int charCode);
    // public System.Single get_DescendorOffset()
    // Offset: 0x14AD59C
    float get_DescendorOffset();
    // public System.String get_TextString()
    // Offset: 0x14AD5A4
    ::StringW get_TextString();
    // public System.Int32 get_Charcode()
    // Offset: 0x14AD610
    int get_Charcode();
    // public System.Boolean get_IsComposite()
    // Offset: 0x14AD618
    bool get_IsComposite();
    // public System.Void LoadFully(InfiniText.Glyph[] glyphs)
    // Offset: 0x14AD620
    void LoadFully(::ArrayW<::InfiniText::Glyph*> glyphs);
    // static private System.Void .cctor()
    // Offset: 0x14AD624
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x14AD3A8
    // Implemented from: Blaze.VectorPath
    // Base method: System.Void VectorPath::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Glyph* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::Glyph::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Glyph*, creationType>()));
    }
  }; // InfiniText.Glyph
  #pragma pack(pop)
  static check_size<sizeof(Glyph), 120 + sizeof(::System::Collections::Generic::Dictionary_2<::InfiniText::Glyph*, float>*)> __InfiniText_GlyphSizeCheck;
  static_assert(sizeof(Glyph) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: InfiniText::Glyph::OnScreen
// Il2CppName: OnScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::Glyph::*)()>(&InfiniText::Glyph::OnScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "OnScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::OffScreen
// Il2CppName: OffScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::Glyph::*)()>(&InfiniText::Glyph::OffScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "OffScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::get_Rightwards
// Il2CppName: get_Rightwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InfiniText::Glyph::*)()>(&InfiniText::Glyph::get_Rightwards)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "get_Rightwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::get_Space
// Il2CppName: get_Space
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InfiniText::Glyph::*)()>(&InfiniText::Glyph::get_Space)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "get_Space", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::SetupImage
// Il2CppName: SetupImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::Glyph::*)(::PowerUI::ImagePackage*)>(&InfiniText::Glyph::SetupImage)> {
  static const MethodInfo* get() {
    static auto* package = &::il2cpp_utils::GetClassFromName("PowerUI", "ImagePackage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "SetupImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{package});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::get_RequiresLoad
// Il2CppName: get_RequiresLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InfiniText::Glyph::*)()>(&InfiniText::Glyph::get_RequiresLoad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "get_RequiresLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::AddToFont
// Il2CppName: AddToFont
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InfiniText::Glyph::*)(::StringW, int)>(&InfiniText::Glyph::AddToFont)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* charcode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "AddToFont", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, charcode});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::AddToFont
// Il2CppName: AddToFont
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InfiniText::Glyph::*)(::StringW, ::StringW)>(&InfiniText::Glyph::AddToFont)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* charcode = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "AddToFont", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, charcode});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::LoadNow
// Il2CppName: LoadNow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::Glyph::*)()>(&InfiniText::Glyph::LoadNow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "LoadNow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::MultiThreadDraw
// Il2CppName: MultiThreadDraw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InfiniText::Glyph::*)()>(&InfiniText::Glyph::MultiThreadDraw)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "MultiThreadDraw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::GetDimensionsOnAtlas
// Il2CppName: GetDimensionsOnAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::Glyph::*)(ByRef<int>, ByRef<int>)>(&InfiniText::Glyph::GetDimensionsOnAtlas)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "GetDimensionsOnAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::DrawToAtlas
// Il2CppName: DrawToAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InfiniText::Glyph::*)(::Blaze::TextureAtlas*, ::Blaze::AtlasLocation*)>(&InfiniText::Glyph::DrawToAtlas)> {
  static const MethodInfo* get() {
    static auto* atlas = &::il2cpp_utils::GetClassFromName("Blaze", "TextureAtlas")->byval_arg;
    static auto* location = &::il2cpp_utils::GetClassFromName("Blaze", "AtlasLocation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "DrawToAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{atlas, location});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::GetAtlasID
// Il2CppName: GetAtlasID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (InfiniText::Glyph::*)()>(&InfiniText::Glyph::GetAtlasID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "GetAtlasID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::get_RasterHeight
// Il2CppName: get_RasterHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (InfiniText::Glyph::*)()>(&InfiniText::Glyph::get_RasterHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "get_RasterHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::get_RasterWidth
// Il2CppName: get_RasterWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (InfiniText::Glyph::*)()>(&InfiniText::Glyph::get_RasterWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "get_RasterWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::Rasterise
// Il2CppName: Rasterise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InfiniText::Glyph::*)(::ArrayW<::UnityEngine::Color32>, int, int, bool)>(&InfiniText::Glyph::Rasterise)> {
  static const MethodInfo* get() {
    static auto* atlasPixels = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    static auto* atlasWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* baseIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* clear = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "Rasterise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{atlasPixels, atlasWidth, baseIndex, clear});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::Rasterise
// Il2CppName: Rasterise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InfiniText::Glyph::*)(::ArrayW<::UnityEngine::Color32>, int, int, bool, ::UnityEngine::Color32)>(&InfiniText::Glyph::Rasterise)> {
  static const MethodInfo* get() {
    static auto* atlasPixels = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color32"), 1)->byval_arg;
    static auto* atlasWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* baseIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* clear = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* colour = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "Rasterise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{atlasPixels, atlasWidth, baseIndex, clear, colour});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: InfiniText::Glyph::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::InfiniText::Glyph* (InfiniText::Glyph::*)()>(&InfiniText::Glyph::Copy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::Glyph::*)(::InfiniText::Glyph*)>(&InfiniText::Glyph::Copy)> {
  static const MethodInfo* get() {
    static auto* into = &::il2cpp_utils::GetClassFromName("InfiniText", "Glyph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{into});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::AddKerningPair
// Il2CppName: AddKerningPair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::Glyph::*)(::InfiniText::Glyph*, float)>(&InfiniText::Glyph::AddKerningPair)> {
  static const MethodInfo* get() {
    static auto* beforeThis = &::il2cpp_utils::GetClassFromName("InfiniText", "Glyph")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "AddKerningPair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beforeThis, value});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::AddCharcode
// Il2CppName: AddCharcode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::Glyph::*)(int)>(&InfiniText::Glyph::AddCharcode)> {
  static const MethodInfo* get() {
    static auto* charCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "AddCharcode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{charCode});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::get_DescendorOffset
// Il2CppName: get_DescendorOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (InfiniText::Glyph::*)()>(&InfiniText::Glyph::get_DescendorOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "get_DescendorOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::get_TextString
// Il2CppName: get_TextString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (InfiniText::Glyph::*)()>(&InfiniText::Glyph::get_TextString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "get_TextString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::get_Charcode
// Il2CppName: get_Charcode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (InfiniText::Glyph::*)()>(&InfiniText::Glyph::get_Charcode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "get_Charcode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::get_IsComposite
// Il2CppName: get_IsComposite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InfiniText::Glyph::*)()>(&InfiniText::Glyph::get_IsComposite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "get_IsComposite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::LoadFully
// Il2CppName: LoadFully
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::Glyph::*)(::ArrayW<::InfiniText::Glyph*>)>(&InfiniText::Glyph::LoadFully)> {
  static const MethodInfo* get() {
    static auto* glyphs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("InfiniText", "Glyph"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), "LoadFully", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glyphs});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&InfiniText::Glyph::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::Glyph*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::Glyph::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
