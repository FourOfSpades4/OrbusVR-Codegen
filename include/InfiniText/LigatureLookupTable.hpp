// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: LigatureSubstitution
  class LigatureSubstitution;
  // Forward declaring type: FontParser
  class FontParser;
}
// Completed forward declares
// Type namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: LigatureLookupTable
  class LigatureLookupTable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::InfiniText::LigatureLookupTable);
DEFINE_IL2CPP_ARG_TYPE(::InfiniText::LigatureLookupTable*, "InfiniText", "LigatureLookupTable");
// Type namespace: InfiniText
namespace InfiniText {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: InfiniText.LigatureLookupTable
  // [TokenAttribute] Offset: FFFFFFFF
  class LigatureLookupTable : public ::Il2CppObject {
    public:
    public:
    // public System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<InfiniText.LigatureSubstitution>> Substitutions
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::InfiniText::LigatureSubstitution*>*>* Substitutions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::InfiniText::LigatureSubstitution*>*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::InfiniText::LigatureSubstitution*>*>*
    constexpr operator ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::InfiniText::LigatureSubstitution*>*>*() const noexcept {
      return Substitutions;
    }
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<InfiniText.LigatureSubstitution>> Substitutions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::InfiniText::LigatureSubstitution*>*>*& dyn_Substitutions();
    // public System.Void Load(InfiniText.FontParser parser)
    // Offset: 0x14AD6A0
    void Load(::InfiniText::FontParser* parser);
    // public System.Void .ctor()
    // Offset: 0x14AD698
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LigatureLookupTable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::LigatureLookupTable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LigatureLookupTable*, creationType>()));
    }
  }; // InfiniText.LigatureLookupTable
  #pragma pack(pop)
  static check_size<sizeof(LigatureLookupTable), 16 + sizeof(::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::InfiniText::LigatureSubstitution*>*>*)> __InfiniText_LigatureLookupTableSizeCheck;
  static_assert(sizeof(LigatureLookupTable) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: InfiniText::LigatureLookupTable::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::LigatureLookupTable::*)(::InfiniText::FontParser*)>(&InfiniText::LigatureLookupTable::Load)> {
  static const MethodInfo* get() {
    static auto* parser = &::il2cpp_utils::GetClassFromName("InfiniText", "FontParser")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::LigatureLookupTable*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parser});
  }
};
// Writing MetadataGetter for method: InfiniText::LigatureLookupTable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
