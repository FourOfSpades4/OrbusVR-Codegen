// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: InfiniText.FontFaceFlags
#include "InfiniText/FontFaceFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: FontFace
  class FontFace;
  // Forward declaring type: Glyph
  class Glyph;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: FontFamily
  class FontFamily;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::InfiniText::FontFamily);
DEFINE_IL2CPP_ARG_TYPE(::InfiniText::FontFamily*, "InfiniText", "FontFamily");
// Type namespace: InfiniText
namespace InfiniText {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: InfiniText.FontFamily
  // [TokenAttribute] Offset: FFFFFFFF
  class FontFamily : public ::Il2CppObject {
    public:
    public:
    // public System.String Name
    // Size: 0x8
    // Offset: 0x10
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public InfiniText.FontFace Regular
    // Size: 0x8
    // Offset: 0x18
    ::InfiniText::FontFace* Regular;
    // Field size check
    static_assert(sizeof(::InfiniText::FontFace*) == 0x8);
    // public System.Collections.Generic.List`1<InfiniText.FontFace> Bold
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::InfiniText::FontFace*>* Bold;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::InfiniText::FontFace*>*) == 0x8);
    // public System.Collections.Generic.List`1<InfiniText.FontFace> Italics
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::InfiniText::FontFace*>* Italics;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::InfiniText::FontFace*>*) == 0x8);
    // public System.Boolean InvertedNormals
    // Size: 0x1
    // Offset: 0x30
    bool InvertedNormals;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: InvertedNormals and: FontFaces
    char __padding4[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<InfiniText.FontFaceFlags,InfiniText.FontFace> FontFaces
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::InfiniText::FontFaceFlags, ::InfiniText::FontFace*>* FontFaces;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::InfiniText::FontFaceFlags, ::InfiniText::FontFace*>*) == 0x8);
    public:
    // Get instance field reference: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public InfiniText.FontFace Regular
    [[deprecated("Use field access instead!")]] ::InfiniText::FontFace*& dyn_Regular();
    // Get instance field reference: public System.Collections.Generic.List`1<InfiniText.FontFace> Bold
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::InfiniText::FontFace*>*& dyn_Bold();
    // Get instance field reference: public System.Collections.Generic.List`1<InfiniText.FontFace> Italics
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::InfiniText::FontFace*>*& dyn_Italics();
    // Get instance field reference: public System.Boolean InvertedNormals
    [[deprecated("Use field access instead!")]] bool& dyn_InvertedNormals();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<InfiniText.FontFaceFlags,InfiniText.FontFace> FontFaces
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::InfiniText::FontFaceFlags, ::InfiniText::FontFace*>*& dyn_FontFaces();
    // public System.Void .ctor(System.String name)
    // Offset: 0x14A8E74
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FontFamily* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::FontFamily::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FontFamily*, creationType>(name)));
    }
    // public System.Void Add(InfiniText.FontFace font)
    // Offset: 0x14A8D04
    void Add(::InfiniText::FontFace* font);
    // public InfiniText.Glyph GetNotDefined(InfiniText.FontFaceFlags style)
    // Offset: 0x14A8F28
    ::InfiniText::Glyph* GetNotDefined(::InfiniText::FontFaceFlags style);
    // public InfiniText.Glyph GetGlyph(System.Int32 charcode, InfiniText.FontFaceFlags style)
    // Offset: 0x14A8FD4
    ::InfiniText::Glyph* GetGlyph(int charcode, ::InfiniText::FontFaceFlags style);
    // public InfiniText.FontFace GetFace(InfiniText.FontFaceFlags style)
    // Offset: 0x14A9140
    ::InfiniText::FontFace* GetFace(::InfiniText::FontFaceFlags style);
    // public InfiniText.Glyph GetGlyph(System.Int32 charcode, InfiniText.FontFaceFlags style, out System.Boolean firstTime)
    // Offset: 0x14A8FF8
    ::InfiniText::Glyph* GetGlyph(int charcode, ::InfiniText::FontFaceFlags style, ByRef<bool> firstTime);
    // public InfiniText.FontFace BestWeight(System.Collections.Generic.List`1<InfiniText.FontFace> faces, System.Int32 weight, out System.Int32 bestWeightDiff)
    // Offset: 0x14A9264
    ::InfiniText::FontFace* BestWeight(::System::Collections::Generic::List_1<::InfiniText::FontFace*>* faces, int weight, ByRef<int> bestWeightDiff);
  }; // InfiniText.FontFamily
  #pragma pack(pop)
  static check_size<sizeof(FontFamily), 56 + sizeof(::System::Collections::Generic::Dictionary_2<::InfiniText::FontFaceFlags, ::InfiniText::FontFace*>*)> __InfiniText_FontFamilySizeCheck;
  static_assert(sizeof(FontFamily) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: InfiniText::FontFamily::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: InfiniText::FontFamily::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::FontFamily::*)(::InfiniText::FontFace*)>(&InfiniText::FontFamily::Add)> {
  static const MethodInfo* get() {
    static auto* font = &::il2cpp_utils::GetClassFromName("InfiniText", "FontFace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::FontFamily*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{font});
  }
};
// Writing MetadataGetter for method: InfiniText::FontFamily::GetNotDefined
// Il2CppName: GetNotDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::InfiniText::Glyph* (InfiniText::FontFamily::*)(::InfiniText::FontFaceFlags)>(&InfiniText::FontFamily::GetNotDefined)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("InfiniText", "FontFaceFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::FontFamily*), "GetNotDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style});
  }
};
// Writing MetadataGetter for method: InfiniText::FontFamily::GetGlyph
// Il2CppName: GetGlyph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::InfiniText::Glyph* (InfiniText::FontFamily::*)(int, ::InfiniText::FontFaceFlags)>(&InfiniText::FontFamily::GetGlyph)> {
  static const MethodInfo* get() {
    static auto* charcode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("InfiniText", "FontFaceFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::FontFamily*), "GetGlyph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{charcode, style});
  }
};
// Writing MetadataGetter for method: InfiniText::FontFamily::GetFace
// Il2CppName: GetFace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::InfiniText::FontFace* (InfiniText::FontFamily::*)(::InfiniText::FontFaceFlags)>(&InfiniText::FontFamily::GetFace)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("InfiniText", "FontFaceFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::FontFamily*), "GetFace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style});
  }
};
// Writing MetadataGetter for method: InfiniText::FontFamily::GetGlyph
// Il2CppName: GetGlyph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::InfiniText::Glyph* (InfiniText::FontFamily::*)(int, ::InfiniText::FontFaceFlags, ByRef<bool>)>(&InfiniText::FontFamily::GetGlyph)> {
  static const MethodInfo* get() {
    static auto* charcode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("InfiniText", "FontFaceFlags")->byval_arg;
    static auto* firstTime = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::FontFamily*), "GetGlyph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{charcode, style, firstTime});
  }
};
// Writing MetadataGetter for method: InfiniText::FontFamily::BestWeight
// Il2CppName: BestWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::InfiniText::FontFace* (InfiniText::FontFamily::*)(::System::Collections::Generic::List_1<::InfiniText::FontFace*>*, int, ByRef<int>)>(&InfiniText::FontFamily::BestWeight)> {
  static const MethodInfo* get() {
    static auto* faces = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("InfiniText", "FontFace")})->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bestWeightDiff = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::FontFamily*), "BestWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{faces, weight, bestWeightDiff});
  }
};
