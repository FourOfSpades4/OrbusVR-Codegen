// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: GlyphPoint
  class GlyphPoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::InfiniText::GlyphPoint);
DEFINE_IL2CPP_ARG_TYPE(::InfiniText::GlyphPoint*, "InfiniText", "GlyphPoint");
// Type namespace: InfiniText
namespace InfiniText {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: InfiniText.GlyphPoint
  // [TokenAttribute] Offset: FFFFFFFF
  class GlyphPoint : public ::Il2CppObject {
    public:
    public:
    // public System.Single X
    // Size: 0x4
    // Offset: 0x10
    float X;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Y
    // Size: 0x4
    // Offset: 0x14
    float Y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean Active
    // Size: 0x1
    // Offset: 0x18
    bool Active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean OnCurve
    // Size: 0x1
    // Offset: 0x19
    bool OnCurve;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: OnCurve and: Flags
    char __padding3[0x6] = {};
    // public System.Byte[] Flags
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> Flags;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.Single[] Coords
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<float> Coords;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Get instance field reference: public System.Single X
    [[deprecated("Use field access instead!")]] float& dyn_X();
    // Get instance field reference: public System.Single Y
    [[deprecated("Use field access instead!")]] float& dyn_Y();
    // Get instance field reference: public System.Boolean Active
    [[deprecated("Use field access instead!")]] bool& dyn_Active();
    // Get instance field reference: public System.Boolean OnCurve
    [[deprecated("Use field access instead!")]] bool& dyn_OnCurve();
    // Get instance field reference: public System.Byte[] Flags
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_Flags();
    // Get instance field reference: public System.Single[] Coords
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_Coords();
    // public System.Void .ctor(System.Byte[] flags, System.Single[] coords)
    // Offset: 0x14AC8A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GlyphPoint* New_ctor(::ArrayW<uint8_t> flags, ::ArrayW<float> coords) {
      static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::GlyphPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GlyphPoint*, creationType>(flags, coords)));
    }
    // public System.Void Set(InfiniText.GlyphPoint point)
    // Offset: 0x14AC9CC
    void Set(::InfiniText::GlyphPoint* point);
    // public System.Void Set(System.Int32 index)
    // Offset: 0x14AC8D8
    void Set(int index);
  }; // InfiniText.GlyphPoint
  #pragma pack(pop)
  static check_size<sizeof(GlyphPoint), 40 + sizeof(::ArrayW<float>)> __InfiniText_GlyphPointSizeCheck;
  static_assert(sizeof(GlyphPoint) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: InfiniText::GlyphPoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: InfiniText::GlyphPoint::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::GlyphPoint::*)(::InfiniText::GlyphPoint*)>(&InfiniText::GlyphPoint::Set)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("InfiniText", "GlyphPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::GlyphPoint*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: InfiniText::GlyphPoint::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::GlyphPoint::*)(int)>(&InfiniText::GlyphPoint::Set)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::GlyphPoint*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
