// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: RenderTexture
  class RenderTexture;
}
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: Triangulator
  class Triangulator;
  // Forward declaring type: AtlasLocation
  class AtlasLocation;
}
// Forward declaring namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: DrawingTexture
  class DrawingTexture;
}
// Completed forward declares
// Type namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: TextureCamera
  class TextureCamera;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::InfiniText::TextureCamera);
DEFINE_IL2CPP_ARG_TYPE(::InfiniText::TextureCamera*, "InfiniText", "TextureCamera");
// Type namespace: InfiniText
namespace InfiniText {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: InfiniText.TextureCamera
  // [TokenAttribute] Offset: FFFFFFFF
  class TextureCamera : public ::Il2CppObject {
    public:
    public:
    // public System.Single Timer
    // Size: 0x4
    // Offset: 0x10
    float Timer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single XOffset
    // Size: 0x4
    // Offset: 0x14
    float XOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single YOffset
    // Size: 0x4
    // Offset: 0x18
    float YOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: YOffset and: SourceCamera
    char __padding2[0x4] = {};
    // public UnityEngine.Camera SourceCamera
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Camera* SourceCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // public UnityEngine.GameObject Gameobject
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* Gameobject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject CameraObject
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* CameraObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Vector2 WorldPerPixel
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Vector2 WorldPerPixel;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Int32 Size
    // Size: 0x4
    // Offset: 0x40
    int Size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean RequiresRender
    // Size: 0x1
    // Offset: 0x44
    bool RequiresRender;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: RequiresRender and: pixelWidth
    char __padding8[0x3] = {};
    // public System.Int32 pixelWidth
    // Size: 0x4
    // Offset: 0x48
    int pixelWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 FillX
    // Size: 0x4
    // Offset: 0x4C
    int FillX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 FillY
    // Size: 0x4
    // Offset: 0x50
    int FillY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean CPUAccess
    // Size: 0x1
    // Offset: 0x54
    bool CPUAccess;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: CPUAccess and: CPUPixels
    char __padding12[0x3] = {};
    // private UnityEngine.Color32[] CPUPixels
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::Color32> CPUPixels;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color32>) == 0x8);
    // private UnityEngine.Texture2D CPUBuffer
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Texture2D* CPUBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public System.Int32 MaxWidth
    // Size: 0x4
    // Offset: 0x68
    int MaxWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean Available
    // Size: 0x1
    // Offset: 0x6C
    bool Available;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean IsDrawing
    // Size: 0x1
    // Offset: 0x6D
    bool IsDrawing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsDrawing and: pixelHeight
    char __padding17[0x2] = {};
    // public System.Int32 pixelHeight
    // Size: 0x4
    // Offset: 0x70
    int pixelHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single HalfSizeByWorld
    // Size: 0x4
    // Offset: 0x74
    float HalfSizeByWorld;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Blaze.Triangulator Triangulator
    // Size: 0x8
    // Offset: 0x78
    ::Blaze::Triangulator* Triangulator;
    // Field size check
    static_assert(sizeof(::Blaze::Triangulator*) == 0x8);
    // public InfiniText.DrawingTexture FirstDrawing
    // Size: 0x8
    // Offset: 0x80
    ::InfiniText::DrawingTexture* FirstDrawing;
    // Field size check
    static_assert(sizeof(::InfiniText::DrawingTexture*) == 0x8);
    // private UnityEngine.RenderTexture Texture
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::RenderTexture* Texture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    public:
    // static field const value: static public System.Single MaxTime
    static constexpr const float MaxTime = 5;
    // Get static field: static public System.Single MaxTime
    static float _get_MaxTime();
    // Set static field: static public System.Single MaxTime
    static void _set_MaxTime(float value);
    // static field const value: static private System.Int32 DefaultSize
    static constexpr const int DefaultSize = 256;
    // Get static field: static private System.Int32 DefaultSize
    static int _get_DefaultSize();
    // Set static field: static private System.Int32 DefaultSize
    static void _set_DefaultSize(int value);
    // Get static field: static public System.Single GlobalOffset
    static float _get_GlobalOffset();
    // Set static field: static public System.Single GlobalOffset
    static void _set_GlobalOffset(float value);
    // Get instance field reference: public System.Single Timer
    [[deprecated("Use field access instead!")]] float& dyn_Timer();
    // Get instance field reference: public System.Single XOffset
    [[deprecated("Use field access instead!")]] float& dyn_XOffset();
    // Get instance field reference: public System.Single YOffset
    [[deprecated("Use field access instead!")]] float& dyn_YOffset();
    // Get instance field reference: public UnityEngine.Camera SourceCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_SourceCamera();
    // Get instance field reference: public UnityEngine.GameObject Gameobject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_Gameobject();
    // Get instance field reference: public UnityEngine.GameObject CameraObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_CameraObject();
    // Get instance field reference: public UnityEngine.Vector2 WorldPerPixel
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_WorldPerPixel();
    // Get instance field reference: public System.Int32 Size
    [[deprecated("Use field access instead!")]] int& dyn_Size();
    // Get instance field reference: public System.Boolean RequiresRender
    [[deprecated("Use field access instead!")]] bool& dyn_RequiresRender();
    // Get instance field reference: public System.Int32 pixelWidth
    [[deprecated("Use field access instead!")]] int& dyn_pixelWidth();
    // Get instance field reference: public System.Int32 FillX
    [[deprecated("Use field access instead!")]] int& dyn_FillX();
    // Get instance field reference: public System.Int32 FillY
    [[deprecated("Use field access instead!")]] int& dyn_FillY();
    // Get instance field reference: public System.Boolean CPUAccess
    [[deprecated("Use field access instead!")]] bool& dyn_CPUAccess();
    // Get instance field reference: private UnityEngine.Color32[] CPUPixels
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color32>& dyn_CPUPixels();
    // Get instance field reference: private UnityEngine.Texture2D CPUBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_CPUBuffer();
    // Get instance field reference: public System.Int32 MaxWidth
    [[deprecated("Use field access instead!")]] int& dyn_MaxWidth();
    // Get instance field reference: public System.Boolean Available
    [[deprecated("Use field access instead!")]] bool& dyn_Available();
    // Get instance field reference: public System.Boolean IsDrawing
    [[deprecated("Use field access instead!")]] bool& dyn_IsDrawing();
    // Get instance field reference: public System.Int32 pixelHeight
    [[deprecated("Use field access instead!")]] int& dyn_pixelHeight();
    // Get instance field reference: public System.Single HalfSizeByWorld
    [[deprecated("Use field access instead!")]] float& dyn_HalfSizeByWorld();
    // Get instance field reference: public Blaze.Triangulator Triangulator
    [[deprecated("Use field access instead!")]] ::Blaze::Triangulator*& dyn_Triangulator();
    // Get instance field reference: public InfiniText.DrawingTexture FirstDrawing
    [[deprecated("Use field access instead!")]] ::InfiniText::DrawingTexture*& dyn_FirstDrawing();
    // Get instance field reference: private UnityEngine.RenderTexture Texture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_Texture();
    // public System.Void .ctor(System.Boolean cpu)
    // Offset: 0x1056038
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextureCamera* New_ctor(bool cpu) {
      static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextureCamera*, creationType>(cpu)));
    }
    // public System.Void .ctor(System.Int32 size, System.Boolean cpu)
    // Offset: 0x1056044
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextureCamera* New_ctor(int size, bool cpu) {
      static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::TextureCamera::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextureCamera*, creationType>(size, cpu)));
    }
    // public UnityEngine.GameObject CreateGameObject()
    // Offset: 0x105617C
    ::UnityEngine::GameObject* CreateGameObject();
    // public System.Void Clear()
    // Offset: 0x10567F0
    void Clear();
    // public System.Boolean TryFit(InfiniText.DrawingTexture drawing)
    // Offset: 0x1056800
    bool TryFit(::InfiniText::DrawingTexture* drawing);
    // public System.Void DrawNow()
    // Offset: 0x10568F0
    void DrawNow();
    // public System.Void ReadInto(Blaze.AtlasLocation atlas, System.Int32 targetX, System.Int32 targetY)
    // Offset: 0x1056D18
    void ReadInto(::Blaze::AtlasLocation* atlas, int targetX, int targetY);
    // public System.Void SetOrthographicSize()
    // Offset: 0x1056740
    void SetOrthographicSize();
    // public System.Void Destroy()
    // Offset: 0x1056F18
    void Destroy();
    // static private System.Void .cctor()
    // Offset: 0x1057094
    static void _cctor();
  }; // InfiniText.TextureCamera
  #pragma pack(pop)
  static check_size<sizeof(TextureCamera), 136 + sizeof(::UnityEngine::RenderTexture*)> __InfiniText_TextureCameraSizeCheck;
  static_assert(sizeof(TextureCamera) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: InfiniText::TextureCamera::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: InfiniText::TextureCamera::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: InfiniText::TextureCamera::CreateGameObject
// Il2CppName: CreateGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (InfiniText::TextureCamera::*)()>(&InfiniText::TextureCamera::CreateGameObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::TextureCamera*), "CreateGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::TextureCamera::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::TextureCamera::*)()>(&InfiniText::TextureCamera::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::TextureCamera*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::TextureCamera::TryFit
// Il2CppName: TryFit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InfiniText::TextureCamera::*)(::InfiniText::DrawingTexture*)>(&InfiniText::TextureCamera::TryFit)> {
  static const MethodInfo* get() {
    static auto* drawing = &::il2cpp_utils::GetClassFromName("InfiniText", "DrawingTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::TextureCamera*), "TryFit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{drawing});
  }
};
// Writing MetadataGetter for method: InfiniText::TextureCamera::DrawNow
// Il2CppName: DrawNow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::TextureCamera::*)()>(&InfiniText::TextureCamera::DrawNow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::TextureCamera*), "DrawNow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::TextureCamera::ReadInto
// Il2CppName: ReadInto
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::TextureCamera::*)(::Blaze::AtlasLocation*, int, int)>(&InfiniText::TextureCamera::ReadInto)> {
  static const MethodInfo* get() {
    static auto* atlas = &::il2cpp_utils::GetClassFromName("Blaze", "AtlasLocation")->byval_arg;
    static auto* targetX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* targetY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::TextureCamera*), "ReadInto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{atlas, targetX, targetY});
  }
};
// Writing MetadataGetter for method: InfiniText::TextureCamera::SetOrthographicSize
// Il2CppName: SetOrthographicSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::TextureCamera::*)()>(&InfiniText::TextureCamera::SetOrthographicSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::TextureCamera*), "SetOrthographicSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::TextureCamera::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::TextureCamera::*)()>(&InfiniText::TextureCamera::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::TextureCamera*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::TextureCamera::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&InfiniText::TextureCamera::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::TextureCamera*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
