// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: Glyph
  class Glyph;
  // Forward declaring type: FontParser
  class FontParser;
  // Forward declaring type: FontFace
  class FontFace;
  // Forward declaring type: LoadMetaPoint
  class LoadMetaPoint;
}
// Completed forward declares
// Type namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: GlyfTables
  class GlyfTables;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::InfiniText::GlyfTables);
DEFINE_IL2CPP_ARG_TYPE(::InfiniText::GlyfTables*, "InfiniText", "GlyfTables");
// Type namespace: InfiniText
namespace InfiniText {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: InfiniText.GlyfTables
  // [TokenAttribute] Offset: FFFFFFFF
  class GlyfTables : public ::Il2CppObject {
    public:
    // static public InfiniText.Glyph[] Load(InfiniText.FontParser parser, System.Int32 start, System.UInt32[] locations, InfiniText.FontFace font)
    // Offset: 0x14AA74C
    static ::ArrayW<::InfiniText::Glyph*> Load(::InfiniText::FontParser* parser, int start, ::ArrayW<uint> locations, ::InfiniText::FontFace* font);
    // static public System.Void LoadFully(InfiniText.Glyph glyph, InfiniText.FontParser parser, InfiniText.LoadMetaPoint meta)
    // Offset: 0x14ABE08
    static void LoadFully(::InfiniText::Glyph* glyph, ::InfiniText::FontParser* parser, ::InfiniText::LoadMetaPoint* meta);
    // static private System.Void LoadGlyph(InfiniText.Glyph glyph, System.Int32 contourCount, InfiniText.FontParser parser, System.Single range)
    // Offset: 0x14ABE84
    static void LoadGlyph(::InfiniText::Glyph* glyph, int contourCount, ::InfiniText::FontParser* parser, float range);
    // static public InfiniText.Glyph ParseGlyph(InfiniText.FontParser parser, InfiniText.FontFace font, System.Single range)
    // Offset: 0x14AB978
    static ::InfiniText::Glyph* ParseGlyph(::InfiniText::FontParser* parser, ::InfiniText::FontFace* font, float range);
    // static public System.Int32 LoadGlyphCoordinate(InfiniText.FontParser parser, System.Byte flag, System.Int32 previousValue, System.Int32 shortVectorBitMask, System.Int32 sameBitMask)
    // Offset: 0x14AC818
    static int LoadGlyphCoordinate(::InfiniText::FontParser* parser, uint8_t flag, int previousValue, int shortVectorBitMask, int sameBitMask);
  }; // InfiniText.GlyfTables
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: InfiniText::GlyfTables::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::InfiniText::Glyph*> (*)(::InfiniText::FontParser*, int, ::ArrayW<uint>, ::InfiniText::FontFace*)>(&InfiniText::GlyfTables::Load)> {
  static const MethodInfo* get() {
    static auto* parser = &::il2cpp_utils::GetClassFromName("InfiniText", "FontParser")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* locations = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* font = &::il2cpp_utils::GetClassFromName("InfiniText", "FontFace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::GlyfTables*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parser, start, locations, font});
  }
};
// Writing MetadataGetter for method: InfiniText::GlyfTables::LoadFully
// Il2CppName: LoadFully
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::InfiniText::Glyph*, ::InfiniText::FontParser*, ::InfiniText::LoadMetaPoint*)>(&InfiniText::GlyfTables::LoadFully)> {
  static const MethodInfo* get() {
    static auto* glyph = &::il2cpp_utils::GetClassFromName("InfiniText", "Glyph")->byval_arg;
    static auto* parser = &::il2cpp_utils::GetClassFromName("InfiniText", "FontParser")->byval_arg;
    static auto* meta = &::il2cpp_utils::GetClassFromName("InfiniText", "LoadMetaPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::GlyfTables*), "LoadFully", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glyph, parser, meta});
  }
};
// Writing MetadataGetter for method: InfiniText::GlyfTables::LoadGlyph
// Il2CppName: LoadGlyph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::InfiniText::Glyph*, int, ::InfiniText::FontParser*, float)>(&InfiniText::GlyfTables::LoadGlyph)> {
  static const MethodInfo* get() {
    static auto* glyph = &::il2cpp_utils::GetClassFromName("InfiniText", "Glyph")->byval_arg;
    static auto* contourCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parser = &::il2cpp_utils::GetClassFromName("InfiniText", "FontParser")->byval_arg;
    static auto* range = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::GlyfTables*), "LoadGlyph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glyph, contourCount, parser, range});
  }
};
// Writing MetadataGetter for method: InfiniText::GlyfTables::ParseGlyph
// Il2CppName: ParseGlyph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::InfiniText::Glyph* (*)(::InfiniText::FontParser*, ::InfiniText::FontFace*, float)>(&InfiniText::GlyfTables::ParseGlyph)> {
  static const MethodInfo* get() {
    static auto* parser = &::il2cpp_utils::GetClassFromName("InfiniText", "FontParser")->byval_arg;
    static auto* font = &::il2cpp_utils::GetClassFromName("InfiniText", "FontFace")->byval_arg;
    static auto* range = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::GlyfTables*), "ParseGlyph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parser, font, range});
  }
};
// Writing MetadataGetter for method: InfiniText::GlyfTables::LoadGlyphCoordinate
// Il2CppName: LoadGlyphCoordinate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::InfiniText::FontParser*, uint8_t, int, int, int)>(&InfiniText::GlyfTables::LoadGlyphCoordinate)> {
  static const MethodInfo* get() {
    static auto* parser = &::il2cpp_utils::GetClassFromName("InfiniText", "FontParser")->byval_arg;
    static auto* flag = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* previousValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* shortVectorBitMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sameBitMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::GlyfTables*), "LoadGlyphCoordinate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parser, flag, previousValue, shortVectorBitMask, sameBitMask});
  }
};
