// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: CffStackEntry
  class CffStackEntry;
}
// Completed forward declares
// Type namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: CffStack
  class CffStack;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::InfiniText::CffStack);
DEFINE_IL2CPP_ARG_TYPE(::InfiniText::CffStack*, "InfiniText", "CffStack");
// Type namespace: InfiniText
namespace InfiniText {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: InfiniText.CffStack
  // [TokenAttribute] Offset: FFFFFFFF
  class CffStack : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 Length
    // Size: 0x4
    // Offset: 0x10
    int Length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Length and: Last
    char __padding0[0x4] = {};
    // public InfiniText.CffStackEntry Last
    // Size: 0x8
    // Offset: 0x18
    ::InfiniText::CffStackEntry* Last;
    // Field size check
    static_assert(sizeof(::InfiniText::CffStackEntry*) == 0x8);
    // public InfiniText.CffStackEntry First
    // Size: 0x8
    // Offset: 0x20
    ::InfiniText::CffStackEntry* First;
    // Field size check
    static_assert(sizeof(::InfiniText::CffStackEntry*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 Length
    [[deprecated("Use field access instead!")]] int& dyn_Length();
    // Get instance field reference: public InfiniText.CffStackEntry Last
    [[deprecated("Use field access instead!")]] ::InfiniText::CffStackEntry*& dyn_Last();
    // Get instance field reference: public InfiniText.CffStackEntry First
    [[deprecated("Use field access instead!")]] ::InfiniText::CffStackEntry*& dyn_First();
    // public System.Void Push(System.Int32 value)
    // Offset: 0x14A4FD8
    void Push(int value);
    // public System.Boolean get_IsOdd()
    // Offset: 0x14A4E0C
    bool get_IsOdd();
    // public System.Boolean get_Empty()
    // Offset: 0x14A4EC8
    bool get_Empty();
    // public System.Void Push(System.Single value)
    // Offset: 0x14A511C
    void Push(float value);
    // public System.Void Clear()
    // Offset: 0x14A372C
    void Clear();
    // public System.Single Shift()
    // Offset: 0x14A4E18
    float Shift();
    // public System.Single Pop()
    // Offset: 0x14A4ED8
    float Pop();
    // public System.Void .ctor()
    // Offset: 0x14A36D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CffStack* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffStack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CffStack*, creationType>()));
    }
  }; // InfiniText.CffStack
  #pragma pack(pop)
  static check_size<sizeof(CffStack), 32 + sizeof(::InfiniText::CffStackEntry*)> __InfiniText_CffStackSizeCheck;
  static_assert(sizeof(CffStack) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: InfiniText::CffStack::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::CffStack::*)(int)>(&InfiniText::CffStack::Push)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::CffStack*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: InfiniText::CffStack::get_IsOdd
// Il2CppName: get_IsOdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InfiniText::CffStack::*)()>(&InfiniText::CffStack::get_IsOdd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::CffStack*), "get_IsOdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::CffStack::get_Empty
// Il2CppName: get_Empty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InfiniText::CffStack::*)()>(&InfiniText::CffStack::get_Empty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::CffStack*), "get_Empty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::CffStack::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::CffStack::*)(float)>(&InfiniText::CffStack::Push)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::CffStack*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: InfiniText::CffStack::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::CffStack::*)()>(&InfiniText::CffStack::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::CffStack*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::CffStack::Shift
// Il2CppName: Shift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (InfiniText::CffStack::*)()>(&InfiniText::CffStack::Shift)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::CffStack*), "Shift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::CffStack::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (InfiniText::CffStack::*)()>(&InfiniText::CffStack::Pop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::CffStack*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::CffStack::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
