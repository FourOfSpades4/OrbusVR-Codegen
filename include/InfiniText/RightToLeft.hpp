// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Type namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: RightToLeft
  class RightToLeft;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::InfiniText::RightToLeft);
DEFINE_IL2CPP_ARG_TYPE(::InfiniText::RightToLeft*, "InfiniText", "RightToLeft");
// Type namespace: InfiniText
namespace InfiniText {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: InfiniText.RightToLeft
  // [TokenAttribute] Offset: FFFFFFFF
  class RightToLeft : public ::Il2CppObject {
    public:
    // static field const value: static public System.Int32 MinimumA
    static constexpr const int MinimumA = 1470;
    // Get static field: static public System.Int32 MinimumA
    static int _get_MinimumA();
    // Set static field: static public System.Int32 MinimumA
    static void _set_MinimumA(int value);
    // static field const value: static public System.Int32 MaximumA
    static constexpr const int MaximumA = 2142;
    // Get static field: static public System.Int32 MaximumA
    static int _get_MaximumA();
    // Set static field: static public System.Int32 MaximumA
    static void _set_MaximumA(int value);
    // static field const value: static public System.Int32 MinimumB
    static constexpr const int MinimumB = 64285;
    // Get static field: static public System.Int32 MinimumB
    static int _get_MinimumB();
    // Set static field: static public System.Int32 MinimumB
    static void _set_MinimumB(int value);
    // static field const value: static public System.Int32 MaximumB
    static constexpr const int MaximumB = 65021;
    // Get static field: static public System.Int32 MaximumB
    static int _get_MaximumB();
    // Set static field: static public System.Int32 MaximumB
    static void _set_MaximumB(int value);
    // static field const value: static public System.Int32 MinimumC
    static constexpr const int MinimumC = 65136;
    // Get static field: static public System.Int32 MinimumC
    static int _get_MinimumC();
    // Set static field: static public System.Int32 MinimumC
    static void _set_MinimumC(int value);
    // static field const value: static public System.Int32 MaximumC
    static constexpr const int MaximumC = 65276;
    // Get static field: static public System.Int32 MaximumC
    static int _get_MaximumC();
    // Set static field: static public System.Int32 MaximumC
    static void _set_MaximumC(int value);
    // static field const value: static public System.Int32 MinimumD
    static constexpr const int MinimumD = 67584;
    // Get static field: static public System.Int32 MinimumD
    static int _get_MinimumD();
    // Set static field: static public System.Int32 MinimumD
    static void _set_MinimumD(int value);
    // static field const value: static public System.Int32 MaximumD
    static constexpr const int MaximumD = 68680;
    // Get static field: static public System.Int32 MaximumD
    static int _get_MaximumD();
    // Set static field: static public System.Int32 MaximumD
    static void _set_MaximumD(int value);
    // static public System.Boolean Rightwards(System.Int32 character)
    // Offset: 0x1055FE8
    static bool Rightwards(int character);
  }; // InfiniText.RightToLeft
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: InfiniText::RightToLeft::Rightwards
// Il2CppName: Rightwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&InfiniText::RightToLeft::Rightwards)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::RightToLeft*), "Rightwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
