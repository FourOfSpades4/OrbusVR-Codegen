// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Blaze.VectorPoint
#include "Blaze/VectorPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: LoadMetaPoint
  class LoadMetaPoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::InfiniText::LoadMetaPoint);
DEFINE_IL2CPP_ARG_TYPE(::InfiniText::LoadMetaPoint*, "InfiniText", "LoadMetaPoint");
// Type namespace: InfiniText
namespace InfiniText {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: InfiniText.LoadMetaPoint
  // [TokenAttribute] Offset: FFFFFFFF
  class LoadMetaPoint : public ::Blaze::VectorPoint {
    public:
    public:
    // public System.Int32 Start
    // Size: 0x4
    // Offset: 0x28
    int Start;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Length
    // Size: 0x4
    // Offset: 0x2C
    int Length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Int32 Start
    [[deprecated("Use field access instead!")]] int& dyn_Start();
    // Get instance field reference: public System.Int32 Length
    [[deprecated("Use field access instead!")]] int& dyn_Length();
    // public System.Void .ctor(System.Int32 start, System.Int32 length)
    // Offset: 0x14A4D10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoadMetaPoint* New_ctor(int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::LoadMetaPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoadMetaPoint*, creationType>(start, length)));
    }
    // public override System.Boolean get_Unloaded()
    // Offset: 0x14AD8FC
    // Implemented from: Blaze.VectorPoint
    // Base method: System.Boolean VectorPoint::get_Unloaded()
    bool get_Unloaded();
    // public override System.String ToString()
    // Offset: 0x14AD904
    // Implemented from: Blaze.VectorPoint
    // Base method: System.String VectorPoint::ToString()
    ::StringW ToString();
  }; // InfiniText.LoadMetaPoint
  #pragma pack(pop)
  static check_size<sizeof(LoadMetaPoint), 44 + sizeof(int)> __InfiniText_LoadMetaPointSizeCheck;
  static_assert(sizeof(LoadMetaPoint) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: InfiniText::LoadMetaPoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: InfiniText::LoadMetaPoint::get_Unloaded
// Il2CppName: get_Unloaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InfiniText::LoadMetaPoint::*)()>(&InfiniText::LoadMetaPoint::get_Unloaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::LoadMetaPoint*), "get_Unloaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::LoadMetaPoint::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (InfiniText::LoadMetaPoint::*)()>(&InfiniText::LoadMetaPoint::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::LoadMetaPoint*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
