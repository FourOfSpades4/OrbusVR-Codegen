// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: FontFaceFlags
  struct FontFaceFlags;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::InfiniText::FontFaceFlags, "InfiniText", "FontFaceFlags");
// Type namespace: InfiniText
namespace InfiniText {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: InfiniText.FontFaceFlags
  // [TokenAttribute] Offset: FFFFFFFF
  struct FontFaceFlags/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: FontFaceFlags
    constexpr FontFaceFlags(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public InfiniText.FontFaceFlags Italic
    static constexpr const int Italic = 1;
    // Get static field: static public InfiniText.FontFaceFlags Italic
    static ::InfiniText::FontFaceFlags _get_Italic();
    // Set static field: static public InfiniText.FontFaceFlags Italic
    static void _set_Italic(::InfiniText::FontFaceFlags value);
    // static field const value: static public InfiniText.FontFaceFlags Bold100
    static constexpr const int Bold100 = 100;
    // Get static field: static public InfiniText.FontFaceFlags Bold100
    static ::InfiniText::FontFaceFlags _get_Bold100();
    // Set static field: static public InfiniText.FontFaceFlags Bold100
    static void _set_Bold100(::InfiniText::FontFaceFlags value);
    // static field const value: static public InfiniText.FontFaceFlags Bold200
    static constexpr const int Bold200 = 200;
    // Get static field: static public InfiniText.FontFaceFlags Bold200
    static ::InfiniText::FontFaceFlags _get_Bold200();
    // Set static field: static public InfiniText.FontFaceFlags Bold200
    static void _set_Bold200(::InfiniText::FontFaceFlags value);
    // static field const value: static public InfiniText.FontFaceFlags Bold300
    static constexpr const int Bold300 = 300;
    // Get static field: static public InfiniText.FontFaceFlags Bold300
    static ::InfiniText::FontFaceFlags _get_Bold300();
    // Set static field: static public InfiniText.FontFaceFlags Bold300
    static void _set_Bold300(::InfiniText::FontFaceFlags value);
    // static field const value: static public InfiniText.FontFaceFlags Regular
    static constexpr const int Regular = 400;
    // Get static field: static public InfiniText.FontFaceFlags Regular
    static ::InfiniText::FontFaceFlags _get_Regular();
    // Set static field: static public InfiniText.FontFaceFlags Regular
    static void _set_Regular(::InfiniText::FontFaceFlags value);
    // static field const value: static public InfiniText.FontFaceFlags Bold500
    static constexpr const int Bold500 = 500;
    // Get static field: static public InfiniText.FontFaceFlags Bold500
    static ::InfiniText::FontFaceFlags _get_Bold500();
    // Set static field: static public InfiniText.FontFaceFlags Bold500
    static void _set_Bold500(::InfiniText::FontFaceFlags value);
    // static field const value: static public InfiniText.FontFaceFlags Bold600
    static constexpr const int Bold600 = 600;
    // Get static field: static public InfiniText.FontFaceFlags Bold600
    static ::InfiniText::FontFaceFlags _get_Bold600();
    // Set static field: static public InfiniText.FontFaceFlags Bold600
    static void _set_Bold600(::InfiniText::FontFaceFlags value);
    // static field const value: static public InfiniText.FontFaceFlags Bold700
    static constexpr const int Bold700 = 700;
    // Get static field: static public InfiniText.FontFaceFlags Bold700
    static ::InfiniText::FontFaceFlags _get_Bold700();
    // Set static field: static public InfiniText.FontFaceFlags Bold700
    static void _set_Bold700(::InfiniText::FontFaceFlags value);
    // static field const value: static public InfiniText.FontFaceFlags Bold800
    static constexpr const int Bold800 = 800;
    // Get static field: static public InfiniText.FontFaceFlags Bold800
    static ::InfiniText::FontFaceFlags _get_Bold800();
    // Set static field: static public InfiniText.FontFaceFlags Bold800
    static void _set_Bold800(::InfiniText::FontFaceFlags value);
    // static field const value: static public InfiniText.FontFaceFlags Bold900
    static constexpr const int Bold900 = 900;
    // Get static field: static public InfiniText.FontFaceFlags Bold900
    static ::InfiniText::FontFaceFlags _get_Bold900();
    // Set static field: static public InfiniText.FontFaceFlags Bold900
    static void _set_Bold900(::InfiniText::FontFaceFlags value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // InfiniText.FontFaceFlags
  #pragma pack(pop)
  static check_size<sizeof(FontFaceFlags), 0 + sizeof(int)> __InfiniText_FontFaceFlagsSizeCheck;
  static_assert(sizeof(FontFaceFlags) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
