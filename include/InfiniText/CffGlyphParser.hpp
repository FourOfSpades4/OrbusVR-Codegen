// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: CffStack
  class CffStack;
  // Forward declaring type: FontParser
  class FontParser;
  // Forward declaring type: Glyph
  class Glyph;
  // Forward declaring type: FontFace
  class FontFace;
  // Forward declaring type: CffSubPosition
  class CffSubPosition;
  // Forward declaring type: LoadMetaPoint
  class LoadMetaPoint;
}
// Completed forward declares
// Type namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: CffGlyphParser
  class CffGlyphParser;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::InfiniText::CffGlyphParser);
DEFINE_IL2CPP_ARG_TYPE(::InfiniText::CffGlyphParser*, "InfiniText", "CffGlyphParser");
// Type namespace: InfiniText
namespace InfiniText {
  // Size: 0x71
  #pragma pack(push, 1)
  // Autogenerated type: InfiniText.CffGlyphParser
  // [TokenAttribute] Offset: FFFFFFFF
  class CffGlyphParser : public ::Il2CppObject {
    public:
    public:
    // public System.Single X
    // Size: 0x4
    // Offset: 0x10
    float X;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Y
    // Size: 0x4
    // Offset: 0x14
    float Y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 NStems
    // Size: 0x4
    // Offset: 0x18
    int NStems;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single Width
    // Size: 0x4
    // Offset: 0x1C
    float Width;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean HasWidth
    // Size: 0x1
    // Offset: 0x20
    bool HasWidth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: HasWidth and: SubrsBias
    char __padding4[0x3] = {};
    // public System.Int32 SubrsBias
    // Size: 0x4
    // Offset: 0x24
    int SubrsBias;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 GsubrsBias
    // Size: 0x4
    // Offset: 0x28
    int GsubrsBias;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: GsubrsBias and: Stack
    char __padding6[0x4] = {};
    // public InfiniText.CffStack Stack
    // Size: 0x8
    // Offset: 0x30
    ::InfiniText::CffStack* Stack;
    // Field size check
    static_assert(sizeof(::InfiniText::CffStack*) == 0x8);
    // public System.Single NominalWidthX
    // Size: 0x4
    // Offset: 0x38
    float NominalWidthX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: NominalWidthX and: Parser
    char __padding8[0x4] = {};
    // public InfiniText.FontParser Parser
    // Size: 0x8
    // Offset: 0x40
    ::InfiniText::FontParser* Parser;
    // Field size check
    static_assert(sizeof(::InfiniText::FontParser*) == 0x8);
    // public InfiniText.Glyph Glyph
    // Size: 0x8
    // Offset: 0x48
    ::InfiniText::Glyph* Glyph;
    // Field size check
    static_assert(sizeof(::InfiniText::Glyph*) == 0x8);
    // public InfiniText.FontFace Font
    // Size: 0x8
    // Offset: 0x50
    ::InfiniText::FontFace* Font;
    // Field size check
    static_assert(sizeof(::InfiniText::FontFace*) == 0x8);
    // public InfiniText.CffSubPosition[] GSubrs
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::InfiniText::CffSubPosition*> GSubrs;
    // Field size check
    static_assert(sizeof(::ArrayW<::InfiniText::CffSubPosition*>) == 0x8);
    // public InfiniText.CffSubPosition[] Subrs
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::InfiniText::CffSubPosition*> Subrs;
    // Field size check
    static_assert(sizeof(::ArrayW<::InfiniText::CffSubPosition*>) == 0x8);
    // public System.Single DefaultWidthX
    // Size: 0x4
    // Offset: 0x68
    float DefaultWidthX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ScaleRatio
    // Size: 0x4
    // Offset: 0x6C
    float ScaleRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean FullLoad
    // Size: 0x1
    // Offset: 0x70
    bool FullLoad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Single X
    [[deprecated("Use field access instead!")]] float& dyn_X();
    // Get instance field reference: public System.Single Y
    [[deprecated("Use field access instead!")]] float& dyn_Y();
    // Get instance field reference: public System.Int32 NStems
    [[deprecated("Use field access instead!")]] int& dyn_NStems();
    // Get instance field reference: public System.Single Width
    [[deprecated("Use field access instead!")]] float& dyn_Width();
    // Get instance field reference: public System.Boolean HasWidth
    [[deprecated("Use field access instead!")]] bool& dyn_HasWidth();
    // Get instance field reference: public System.Int32 SubrsBias
    [[deprecated("Use field access instead!")]] int& dyn_SubrsBias();
    // Get instance field reference: public System.Int32 GsubrsBias
    [[deprecated("Use field access instead!")]] int& dyn_GsubrsBias();
    // Get instance field reference: public InfiniText.CffStack Stack
    [[deprecated("Use field access instead!")]] ::InfiniText::CffStack*& dyn_Stack();
    // Get instance field reference: public System.Single NominalWidthX
    [[deprecated("Use field access instead!")]] float& dyn_NominalWidthX();
    // Get instance field reference: public InfiniText.FontParser Parser
    [[deprecated("Use field access instead!")]] ::InfiniText::FontParser*& dyn_Parser();
    // Get instance field reference: public InfiniText.Glyph Glyph
    [[deprecated("Use field access instead!")]] ::InfiniText::Glyph*& dyn_Glyph();
    // Get instance field reference: public InfiniText.FontFace Font
    [[deprecated("Use field access instead!")]] ::InfiniText::FontFace*& dyn_Font();
    // Get instance field reference: public InfiniText.CffSubPosition[] GSubrs
    [[deprecated("Use field access instead!")]] ::ArrayW<::InfiniText::CffSubPosition*>& dyn_GSubrs();
    // Get instance field reference: public InfiniText.CffSubPosition[] Subrs
    [[deprecated("Use field access instead!")]] ::ArrayW<::InfiniText::CffSubPosition*>& dyn_Subrs();
    // Get instance field reference: public System.Single DefaultWidthX
    [[deprecated("Use field access instead!")]] float& dyn_DefaultWidthX();
    // Get instance field reference: public System.Single ScaleRatio
    [[deprecated("Use field access instead!")]] float& dyn_ScaleRatio();
    // Get instance field reference: public System.Boolean FullLoad
    [[deprecated("Use field access instead!")]] bool& dyn_FullLoad();
    // public System.Void .ctor(InfiniText.FontParser parser, InfiniText.FontFace font)
    // Offset: 0x14A3628
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CffGlyphParser* New_ctor(::InfiniText::FontParser* parser, ::InfiniText::FontFace* font) {
      static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::CffGlyphParser::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CffGlyphParser*, creationType>(parser, font)));
    }
    // public System.Void Reset(InfiniText.Glyph glyph)
    // Offset: 0x14A36D8
    void Reset(::InfiniText::Glyph* glyph);
    // public System.Void LoadFully(InfiniText.Glyph glyph, InfiniText.LoadMetaPoint meta)
    // Offset: 0x14A3738
    void LoadFully(::InfiniText::Glyph* glyph, ::InfiniText::LoadMetaPoint* meta);
    // public InfiniText.Glyph LoadGlyph(System.Int32 start, System.Int32 length)
    // Offset: 0x14A4B58
    ::InfiniText::Glyph* LoadGlyph(int start, int length);
    // private System.Void ParseStems()
    // Offset: 0x14A4D50
    void ParseStems();
    // private System.Void Parse(System.Int32 start, System.Int32 codeLength)
    // Offset: 0x14A3828
    void Parse(int start, int codeLength);
  }; // InfiniText.CffGlyphParser
  #pragma pack(pop)
  static check_size<sizeof(CffGlyphParser), 112 + sizeof(bool)> __InfiniText_CffGlyphParserSizeCheck;
  static_assert(sizeof(CffGlyphParser) == 0x71);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: InfiniText::CffGlyphParser::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: InfiniText::CffGlyphParser::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::CffGlyphParser::*)(::InfiniText::Glyph*)>(&InfiniText::CffGlyphParser::Reset)> {
  static const MethodInfo* get() {
    static auto* glyph = &::il2cpp_utils::GetClassFromName("InfiniText", "Glyph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::CffGlyphParser*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glyph});
  }
};
// Writing MetadataGetter for method: InfiniText::CffGlyphParser::LoadFully
// Il2CppName: LoadFully
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::CffGlyphParser::*)(::InfiniText::Glyph*, ::InfiniText::LoadMetaPoint*)>(&InfiniText::CffGlyphParser::LoadFully)> {
  static const MethodInfo* get() {
    static auto* glyph = &::il2cpp_utils::GetClassFromName("InfiniText", "Glyph")->byval_arg;
    static auto* meta = &::il2cpp_utils::GetClassFromName("InfiniText", "LoadMetaPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::CffGlyphParser*), "LoadFully", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glyph, meta});
  }
};
// Writing MetadataGetter for method: InfiniText::CffGlyphParser::LoadGlyph
// Il2CppName: LoadGlyph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::InfiniText::Glyph* (InfiniText::CffGlyphParser::*)(int, int)>(&InfiniText::CffGlyphParser::LoadGlyph)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::CffGlyphParser*), "LoadGlyph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, length});
  }
};
// Writing MetadataGetter for method: InfiniText::CffGlyphParser::ParseStems
// Il2CppName: ParseStems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::CffGlyphParser::*)()>(&InfiniText::CffGlyphParser::ParseStems)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::CffGlyphParser*), "ParseStems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::CffGlyphParser::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::CffGlyphParser::*)(int, int)>(&InfiniText::CffGlyphParser::Parse)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* codeLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::CffGlyphParser*), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, codeLength});
  }
};
