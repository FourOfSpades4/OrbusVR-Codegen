// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Blaze
namespace Blaze {
  // Forward declaring type: VectorPath
  class VectorPath;
  // Forward declaring type: AtlasLocation
  class AtlasLocation;
}
// Forward declaring namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: MeshBuffer
  class MeshBuffer;
  // Forward declaring type: TextureCamera
  class TextureCamera;
}
// Completed forward declares
// Type namespace: InfiniText
namespace InfiniText {
  // Forward declaring type: DrawingTexture
  class DrawingTexture;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::InfiniText::DrawingTexture);
DEFINE_IL2CPP_ARG_TYPE(::InfiniText::DrawingTexture*, "InfiniText", "DrawingTexture");
// Type namespace: InfiniText
namespace InfiniText {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: InfiniText.DrawingTexture
  // [TokenAttribute] Offset: FFFFFFFF
  class DrawingTexture : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 X
    // Size: 0x4
    // Offset: 0x10
    int X;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Y
    // Size: 0x4
    // Offset: 0x14
    int Y;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single OffsetY
    // Size: 0x4
    // Offset: 0x18
    float OffsetY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single OffsetX
    // Size: 0x4
    // Offset: 0x1C
    float OffsetX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Blaze.VectorPath Path
    // Size: 0x8
    // Offset: 0x20
    ::Blaze::VectorPath* Path;
    // Field size check
    static_assert(sizeof(::Blaze::VectorPath*) == 0x8);
    // public InfiniText.MeshBuffer Mesh
    // Size: 0x8
    // Offset: 0x28
    ::InfiniText::MeshBuffer* Mesh;
    // Field size check
    static_assert(sizeof(::InfiniText::MeshBuffer*) == 0x8);
    // public Blaze.AtlasLocation Location
    // Size: 0x8
    // Offset: 0x30
    ::Blaze::AtlasLocation* Location;
    // Field size check
    static_assert(sizeof(::Blaze::AtlasLocation*) == 0x8);
    // public InfiniText.DrawingTexture NextDrawing
    // Size: 0x8
    // Offset: 0x38
    ::InfiniText::DrawingTexture* NextDrawing;
    // Field size check
    static_assert(sizeof(::InfiniText::DrawingTexture*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 X
    [[deprecated("Use field access instead!")]] int& dyn_X();
    // Get instance field reference: public System.Int32 Y
    [[deprecated("Use field access instead!")]] int& dyn_Y();
    // Get instance field reference: public System.Single OffsetY
    [[deprecated("Use field access instead!")]] float& dyn_OffsetY();
    // Get instance field reference: public System.Single OffsetX
    [[deprecated("Use field access instead!")]] float& dyn_OffsetX();
    // Get instance field reference: public Blaze.VectorPath Path
    [[deprecated("Use field access instead!")]] ::Blaze::VectorPath*& dyn_Path();
    // Get instance field reference: public InfiniText.MeshBuffer Mesh
    [[deprecated("Use field access instead!")]] ::InfiniText::MeshBuffer*& dyn_Mesh();
    // Get instance field reference: public Blaze.AtlasLocation Location
    [[deprecated("Use field access instead!")]] ::Blaze::AtlasLocation*& dyn_Location();
    // Get instance field reference: public InfiniText.DrawingTexture NextDrawing
    [[deprecated("Use field access instead!")]] ::InfiniText::DrawingTexture*& dyn_NextDrawing();
    // public System.Void BuildMesh(System.Single xOffset, System.Single yOffset, InfiniText.TextureCamera camera)
    // Offset: 0x14A7644
    void BuildMesh(float xOffset, float yOffset, ::InfiniText::TextureCamera* camera);
    // public System.Boolean get_Active()
    // Offset: 0x14A7FB0
    bool get_Active();
    // public System.Void .ctor()
    // Offset: 0x14A8050
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DrawingTexture* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::InfiniText::DrawingTexture::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DrawingTexture*, creationType>()));
    }
  }; // InfiniText.DrawingTexture
  #pragma pack(pop)
  static check_size<sizeof(DrawingTexture), 56 + sizeof(::InfiniText::DrawingTexture*)> __InfiniText_DrawingTextureSizeCheck;
  static_assert(sizeof(DrawingTexture) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: InfiniText::DrawingTexture::BuildMesh
// Il2CppName: BuildMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InfiniText::DrawingTexture::*)(float, float, ::InfiniText::TextureCamera*)>(&InfiniText::DrawingTexture::BuildMesh)> {
  static const MethodInfo* get() {
    static auto* xOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* yOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("InfiniText", "TextureCamera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(InfiniText::DrawingTexture*), "BuildMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xOffset, yOffset, camera});
  }
};
// Writing MetadataGetter for method: InfiniText::DrawingTexture::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InfiniText::DrawingTexture::*)()>(&InfiniText::DrawingTexture::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InfiniText::DrawingTexture*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InfiniText::DrawingTexture::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
