// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LIV::SDK::Unity
namespace LIV::SDK::Unity {
  // Forward declaring type: LIV
  class LIV;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: RenderTexture
  class RenderTexture;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Forward declaring type: MixedRealityRender
  class MixedRealityRender;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LIV::SDK::Unity::MixedRealityRender);
DEFINE_IL2CPP_ARG_TYPE(::LIV::SDK::Unity::MixedRealityRender*, "LIV.SDK.Unity", "MixedRealityRender");
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: LIV.SDK.Unity.MixedRealityRender
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: AD1DFC
  class MixedRealityRender : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::LIV::SDK::Unity::MixedRealityRender::$RenderLoop$d__20
    class $RenderLoop$d__20;
    public:
    // private System.Boolean _isSetup
    // Size: 0x1
    // Offset: 0x18
    bool isSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isSetup and: liv
    char __padding0[0x7] = {};
    // private LIV.SDK.Unity.LIV _liv
    // Size: 0x8
    // Offset: 0x20
    ::LIV::SDK::Unity::LIV* liv;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::LIV*) == 0x8);
    // private UnityEngine.Camera _mrCamera
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Camera* mrCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private UnityEngine.Transform _hmd
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* hmd;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.GameObject _clipQuad
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* clipQuad;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Material _clipMaterial
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Material* clipMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _blitMaterial
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Material* blitMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.RenderTexture _compositeTexture
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::RenderTexture* compositeTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.RenderTexture _foregroundTexture
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::RenderTexture* foregroundTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.RenderTexture _backgroundTexture
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::RenderTexture* backgroundTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean _isSetup
    [[deprecated("Use field access instead!")]] bool& dyn__isSetup();
    // Get instance field reference: private LIV.SDK.Unity.LIV _liv
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::LIV*& dyn__liv();
    // Get instance field reference: private UnityEngine.Camera _mrCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn__mrCamera();
    // Get instance field reference: private UnityEngine.Transform _hmd
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__hmd();
    // Get instance field reference: private UnityEngine.GameObject _clipQuad
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__clipQuad();
    // Get instance field reference: private UnityEngine.Material _clipMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__clipMaterial();
    // Get instance field reference: private UnityEngine.Material _blitMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__blitMaterial();
    // Get instance field reference: private UnityEngine.RenderTexture _compositeTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn__compositeTexture();
    // Get instance field reference: private UnityEngine.RenderTexture _foregroundTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn__foregroundTexture();
    // Get instance field reference: private UnityEngine.RenderTexture _backgroundTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn__backgroundTexture();
    // public System.Void Setup(LIV.SDK.Unity.LIV liv)
    // Offset: 0x1069B20
    void Setup(::LIV::SDK::Unity::LIV* liv);
    // private System.Void CreateClipQuad()
    // Offset: 0x1069D14
    void CreateClipQuad();
    // private System.Void UpdateCamera()
    // Offset: 0x106A018
    void UpdateCamera();
    // private System.Void UpdateTextures()
    // Offset: 0x106A278
    void UpdateTextures();
    // public System.Single GetDistanceToHMD()
    // Offset: 0x106A694
    float GetDistanceToHMD();
    // private System.Void OrientClipQuad()
    // Offset: 0x106A99C
    void OrientClipQuad();
    // private System.Void RenderNear()
    // Offset: 0x106ACD8
    void RenderNear();
    // private System.Void RenderFar()
    // Offset: 0x106B11C
    void RenderFar();
    // private System.Void Composite()
    // Offset: 0x106B1A0
    void Composite();
    // private System.Void OnEnable()
    // Offset: 0x106B2F0
    void OnEnable();
    // private System.Collections.IEnumerator RenderLoop()
    // Offset: 0x106B31C
    ::System::Collections::IEnumerator* RenderLoop();
    // public System.Void .ctor()
    // Offset: 0x106B3BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MixedRealityRender* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::MixedRealityRender::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MixedRealityRender*, creationType>()));
    }
  }; // LIV.SDK.Unity.MixedRealityRender
  #pragma pack(pop)
  static check_size<sizeof(MixedRealityRender), 96 + sizeof(::UnityEngine::RenderTexture*)> __LIV_SDK_Unity_MixedRealityRenderSizeCheck;
  static_assert(sizeof(MixedRealityRender) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LIV::SDK::Unity::MixedRealityRender::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::MixedRealityRender::*)(::LIV::SDK::Unity::LIV*)>(&LIV::SDK::Unity::MixedRealityRender::Setup)> {
  static const MethodInfo* get() {
    static auto* liv = &::il2cpp_utils::GetClassFromName("LIV.SDK.Unity", "LIV")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::MixedRealityRender*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{liv});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::MixedRealityRender::CreateClipQuad
// Il2CppName: CreateClipQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::MixedRealityRender::*)()>(&LIV::SDK::Unity::MixedRealityRender::CreateClipQuad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::MixedRealityRender*), "CreateClipQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::MixedRealityRender::UpdateCamera
// Il2CppName: UpdateCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::MixedRealityRender::*)()>(&LIV::SDK::Unity::MixedRealityRender::UpdateCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::MixedRealityRender*), "UpdateCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::MixedRealityRender::UpdateTextures
// Il2CppName: UpdateTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::MixedRealityRender::*)()>(&LIV::SDK::Unity::MixedRealityRender::UpdateTextures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::MixedRealityRender*), "UpdateTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::MixedRealityRender::GetDistanceToHMD
// Il2CppName: GetDistanceToHMD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (LIV::SDK::Unity::MixedRealityRender::*)()>(&LIV::SDK::Unity::MixedRealityRender::GetDistanceToHMD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::MixedRealityRender*), "GetDistanceToHMD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::MixedRealityRender::OrientClipQuad
// Il2CppName: OrientClipQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::MixedRealityRender::*)()>(&LIV::SDK::Unity::MixedRealityRender::OrientClipQuad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::MixedRealityRender*), "OrientClipQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::MixedRealityRender::RenderNear
// Il2CppName: RenderNear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::MixedRealityRender::*)()>(&LIV::SDK::Unity::MixedRealityRender::RenderNear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::MixedRealityRender*), "RenderNear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::MixedRealityRender::RenderFar
// Il2CppName: RenderFar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::MixedRealityRender::*)()>(&LIV::SDK::Unity::MixedRealityRender::RenderFar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::MixedRealityRender*), "RenderFar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::MixedRealityRender::Composite
// Il2CppName: Composite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::MixedRealityRender::*)()>(&LIV::SDK::Unity::MixedRealityRender::Composite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::MixedRealityRender*), "Composite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::MixedRealityRender::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::MixedRealityRender::*)()>(&LIV::SDK::Unity::MixedRealityRender::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::MixedRealityRender*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::MixedRealityRender::RenderLoop
// Il2CppName: RenderLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (LIV::SDK::Unity::MixedRealityRender::*)()>(&LIV::SDK::Unity::MixedRealityRender::RenderLoop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::MixedRealityRender*), "RenderLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::MixedRealityRender::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
