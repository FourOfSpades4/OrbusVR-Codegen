// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LIV::SDK::Unity
namespace LIV::SDK::Unity {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: EventHandler
  class EventHandler;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: FileSystemWatcher
  class FileSystemWatcher;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Forward declaring type: Calibration
  class Calibration;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LIV::SDK::Unity::Calibration);
DEFINE_IL2CPP_ARG_TYPE(::LIV::SDK::Unity::Calibration*, "LIV.SDK.Unity", "Calibration");
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: LIV.SDK.Unity.Calibration
  // [TokenAttribute] Offset: FFFFFFFF
  class Calibration : public ::Il2CppObject {
    public:
    // Nested type: ::LIV::SDK::Unity::Calibration::$$c
    class $$c;
    // static field const value: static private System.String ConfigFileName
    static constexpr const char* ConfigFileName = "externalcamera.cfg";
    // Get static field: static private System.String ConfigFileName
    static ::StringW _get_ConfigFileName();
    // Set static field: static private System.String ConfigFileName
    static void _set_ConfigFileName(::StringW value);
    // [CompilerGeneratedAttribute] Offset: 0xAE12CC
    // Get static field: static private System.EventHandler Changed
    static ::System::EventHandler* _get_Changed();
    // Set static field: static private System.EventHandler Changed
    static void _set_Changed(::System::EventHandler* value);
    // Get static field: static public System.Single X
    static float _get_X();
    // Set static field: static public System.Single X
    static void _set_X(float value);
    // Get static field: static public System.Single Y
    static float _get_Y();
    // Set static field: static public System.Single Y
    static void _set_Y(float value);
    // Get static field: static public System.Single Z
    static float _get_Z();
    // Set static field: static public System.Single Z
    static void _set_Z(float value);
    // Get static field: static public System.Single Yaw
    static float _get_Yaw();
    // Set static field: static public System.Single Yaw
    static void _set_Yaw(float value);
    // Get static field: static public System.Single Pitch
    static float _get_Pitch();
    // Set static field: static public System.Single Pitch
    static void _set_Pitch(float value);
    // Get static field: static public System.Single Roll
    static float _get_Roll();
    // Set static field: static public System.Single Roll
    static void _set_Roll(float value);
    // Get static field: static public System.Single FieldOfVision
    static float _get_FieldOfVision();
    // Set static field: static public System.Single FieldOfVision
    static void _set_FieldOfVision(float value);
    // Get static field: static public System.Single NearClip
    static float _get_NearClip();
    // Set static field: static public System.Single NearClip
    static void _set_NearClip(float value);
    // Get static field: static public System.Single FarClip
    static float _get_FarClip();
    // Set static field: static public System.Single FarClip
    static void _set_FarClip(float value);
    // Get static field: static public System.Single HMDOffset
    static float _get_HMDOffset();
    // Set static field: static public System.Single HMDOffset
    static void _set_HMDOffset(float value);
    // Get static field: static public System.Single NearOffset
    static float _get_NearOffset();
    // Set static field: static public System.Single NearOffset
    static void _set_NearOffset(float value);
    // Get static field: static private readonly System.IO.FileSystemWatcher ConfigWatcher
    static ::System::IO::FileSystemWatcher* _get_ConfigWatcher();
    // Set static field: static private readonly System.IO.FileSystemWatcher ConfigWatcher
    static void _set_ConfigWatcher(::System::IO::FileSystemWatcher* value);
    // static public System.Void add_Changed(System.EventHandler value)
    // Offset: 0x106624C
    static void add_Changed(::System::EventHandler* value);
    // static public System.Void remove_Changed(System.EventHandler value)
    // Offset: 0x1066378
    static void remove_Changed(::System::EventHandler* value);
    // static public UnityEngine.Vector3 get_PositionOffset()
    // Offset: 0x10664A4
    static ::UnityEngine::Vector3 get_PositionOffset();
    // static public UnityEngine.Quaternion get_RotationOffset()
    // Offset: 0x1066534
    static ::UnityEngine::Quaternion get_RotationOffset();
    // static private System.Void .cctor()
    // Offset: 0x10665E0
    static void _cctor();
    // static private System.Void Reset()
    // Offset: 0x10670A0
    static void Reset();
    // static public System.Void Read()
    // Offset: 0x1066834
    static void Read();
    // static private System.Boolean TryParseInvariantFloat(System.String number, out System.Single result)
    // Offset: 0x1067168
    static bool TryParseInvariantFloat(::StringW number, ByRef<float> result);
  }; // LIV.SDK.Unity.Calibration
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LIV::SDK::Unity::Calibration::add_Changed
// Il2CppName: add_Changed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::EventHandler*)>(&LIV::SDK::Unity::Calibration::add_Changed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "EventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::Calibration*), "add_Changed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::Calibration::remove_Changed
// Il2CppName: remove_Changed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::EventHandler*)>(&LIV::SDK::Unity::Calibration::remove_Changed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "EventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::Calibration*), "remove_Changed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::Calibration::get_PositionOffset
// Il2CppName: get_PositionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)()>(&LIV::SDK::Unity::Calibration::get_PositionOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::Calibration*), "get_PositionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::Calibration::get_RotationOffset
// Il2CppName: get_RotationOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)()>(&LIV::SDK::Unity::Calibration::get_RotationOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::Calibration*), "get_RotationOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::Calibration::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&LIV::SDK::Unity::Calibration::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::Calibration*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::Calibration::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&LIV::SDK::Unity::Calibration::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::Calibration*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::Calibration::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&LIV::SDK::Unity::Calibration::Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::Calibration*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::Calibration::TryParseInvariantFloat
// Il2CppName: TryParseInvariantFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<float>)>(&LIV::SDK::Unity::Calibration::TryParseInvariantFloat)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::Calibration*), "TryParseInvariantFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, result});
  }
};
