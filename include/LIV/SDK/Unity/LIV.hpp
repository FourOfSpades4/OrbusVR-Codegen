// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: LIV::SDK::Unity
namespace LIV::SDK::Unity {
  // Forward declaring type: SharedTextureProtocol
  class SharedTextureProtocol;
  // Forward declaring type: ExternalCamera
  class ExternalCamera;
  // Forward declaring type: MixedRealityRender
  class MixedRealityRender;
}
// Completed forward declares
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Forward declaring type: LIV
  class LIV;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LIV::SDK::Unity::LIV);
DEFINE_IL2CPP_ARG_TYPE(::LIV::SDK::Unity::LIV*, "LIV.SDK.Unity", "LIV");
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: LIV.SDK.Unity.LIV
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: AD1DC4
  class LIV : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [TooltipAttribute] Offset: 0xAE12EC
    // public UnityEngine.Transform TrackedSpaceOrigin
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* TrackedSpaceOrigin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [SpaceAttribute] Offset: 0xAE1324
    // public UnityEngine.Camera HMDCamera
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Camera* HMDCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // [SpaceAttribute] Offset: 0xAE1334
    // public System.Boolean DisableStandardAssets
    // Size: 0x1
    // Offset: 0x28
    bool DisableStandardAssets;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: DisableStandardAssets and: SpectatorLayerMask
    char __padding2[0x3] = {};
    // [SpaceAttribute] Offset: 0xAE1344
    // public UnityEngine.LayerMask SpectatorLayerMask
    // Size: 0x4
    // Offset: 0x2C
    ::UnityEngine::LayerMask SpectatorLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // protected System.Boolean WasActive
    // Size: 0x1
    // Offset: 0x30
    bool WasActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: WasActive and: sharedTextureProtocol
    char __padding4[0x7] = {};
    // private LIV.SDK.Unity.SharedTextureProtocol _sharedTextureProtocol
    // Size: 0x8
    // Offset: 0x38
    ::LIV::SDK::Unity::SharedTextureProtocol* sharedTextureProtocol;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::SharedTextureProtocol*) == 0x8);
    // private LIV.SDK.Unity.ExternalCamera _externalCamera
    // Size: 0x8
    // Offset: 0x40
    ::LIV::SDK::Unity::ExternalCamera* externalCamera;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::ExternalCamera*) == 0x8);
    // private LIV.SDK.Unity.MixedRealityRender _mixedRealityRender
    // Size: 0x8
    // Offset: 0x48
    ::LIV::SDK::Unity::MixedRealityRender* mixedRealityRender;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::MixedRealityRender*) == 0x8);
    // private System.Boolean _wasSteamVRExternalCameraActive
    // Size: 0x1
    // Offset: 0x50
    bool wasSteamVRExternalCameraActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Transform TrackedSpaceOrigin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_TrackedSpaceOrigin();
    // Get instance field reference: public UnityEngine.Camera HMDCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_HMDCamera();
    // Get instance field reference: public System.Boolean DisableStandardAssets
    [[deprecated("Use field access instead!")]] bool& dyn_DisableStandardAssets();
    // Get instance field reference: public UnityEngine.LayerMask SpectatorLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_SpectatorLayerMask();
    // Get instance field reference: protected System.Boolean WasActive
    [[deprecated("Use field access instead!")]] bool& dyn_WasActive();
    // Get instance field reference: private LIV.SDK.Unity.SharedTextureProtocol _sharedTextureProtocol
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::SharedTextureProtocol*& dyn__sharedTextureProtocol();
    // Get instance field reference: private LIV.SDK.Unity.ExternalCamera _externalCamera
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::ExternalCamera*& dyn__externalCamera();
    // Get instance field reference: private LIV.SDK.Unity.MixedRealityRender _mixedRealityRender
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::MixedRealityRender*& dyn__mixedRealityRender();
    // Get instance field reference: private System.Boolean _wasSteamVRExternalCameraActive
    [[deprecated("Use field access instead!")]] bool& dyn__wasSteamVRExternalCameraActive();
    // public UnityEngine.Transform get_Origin()
    // Offset: 0x1068B2C
    ::UnityEngine::Transform* get_Origin();
    // private System.Void OnEnable()
    // Offset: 0x1068BD4
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x1068EA4
    void OnDisable();
    // private System.Void Update()
    // Offset: 0x106909C
    void Update();
    // private System.Void OnCompositorActivated()
    // Offset: 0x10690F4
    void OnCompositorActivated();
    // private System.Void OnCompositorDeactivated()
    // Offset: 0x1068F30
    void OnCompositorDeactivated();
    // private System.Void CreateSharedTextureProtocol()
    // Offset: 0x10692A0
    void CreateSharedTextureProtocol();
    // private System.Void DestroySharedTextureProtocol()
    // Offset: 0x10698DC
    void DestroySharedTextureProtocol();
    // private System.Void CreateExternalCamera()
    // Offset: 0x1069310
    void CreateExternalCamera();
    // private System.Void DestroyExternalCamera()
    // Offset: 0x1069A54
    void DestroyExternalCamera();
    // private System.Void CreateMixedRealityRender()
    // Offset: 0x10693E8
    void CreateMixedRealityRender();
    // private System.Void DestroyMixedRealityRender()
    // Offset: 0x1069988
    void DestroyMixedRealityRender();
    // public System.Void .ctor()
    // Offset: 0x1069CE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LIV* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::LIV::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LIV*, creationType>()));
    }
  }; // LIV.SDK.Unity.LIV
  #pragma pack(pop)
  static check_size<sizeof(LIV), 80 + sizeof(bool)> __LIV_SDK_Unity_LIVSizeCheck;
  static_assert(sizeof(LIV) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LIV::SDK::Unity::LIV::get_Origin
// Il2CppName: get_Origin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (LIV::SDK::Unity::LIV::*)()>(&LIV::SDK::Unity::LIV::get_Origin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::LIV*), "get_Origin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::LIV::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::LIV::*)()>(&LIV::SDK::Unity::LIV::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::LIV*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::LIV::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::LIV::*)()>(&LIV::SDK::Unity::LIV::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::LIV*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::LIV::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::LIV::*)()>(&LIV::SDK::Unity::LIV::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::LIV*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::LIV::OnCompositorActivated
// Il2CppName: OnCompositorActivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::LIV::*)()>(&LIV::SDK::Unity::LIV::OnCompositorActivated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::LIV*), "OnCompositorActivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::LIV::OnCompositorDeactivated
// Il2CppName: OnCompositorDeactivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::LIV::*)()>(&LIV::SDK::Unity::LIV::OnCompositorDeactivated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::LIV*), "OnCompositorDeactivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::LIV::CreateSharedTextureProtocol
// Il2CppName: CreateSharedTextureProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::LIV::*)()>(&LIV::SDK::Unity::LIV::CreateSharedTextureProtocol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::LIV*), "CreateSharedTextureProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::LIV::DestroySharedTextureProtocol
// Il2CppName: DestroySharedTextureProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::LIV::*)()>(&LIV::SDK::Unity::LIV::DestroySharedTextureProtocol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::LIV*), "DestroySharedTextureProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::LIV::CreateExternalCamera
// Il2CppName: CreateExternalCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::LIV::*)()>(&LIV::SDK::Unity::LIV::CreateExternalCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::LIV*), "CreateExternalCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::LIV::DestroyExternalCamera
// Il2CppName: DestroyExternalCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::LIV::*)()>(&LIV::SDK::Unity::LIV::DestroyExternalCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::LIV*), "DestroyExternalCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::LIV::CreateMixedRealityRender
// Il2CppName: CreateMixedRealityRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::LIV::*)()>(&LIV::SDK::Unity::LIV::CreateMixedRealityRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::LIV*), "CreateMixedRealityRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::LIV::DestroyMixedRealityRender
// Il2CppName: DestroyMixedRealityRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::LIV::*)()>(&LIV::SDK::Unity::LIV::DestroyMixedRealityRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::LIV*), "DestroyMixedRealityRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::LIV::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
