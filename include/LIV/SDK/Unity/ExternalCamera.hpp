// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LIV::SDK::Unity
namespace LIV::SDK::Unity {
}
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Skipping declaration: HmdMatrix34_t because it is already included!
  // Forward declaring type: ETrackedDeviceProperty
  struct ETrackedDeviceProperty;
}
// Completed forward declares
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Forward declaring type: ExternalCamera
  class ExternalCamera;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LIV::SDK::Unity::ExternalCamera);
DEFINE_IL2CPP_ARG_TYPE(::LIV::SDK::Unity::ExternalCamera*, "LIV.SDK.Unity", "ExternalCamera");
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: LIV.SDK.Unity.ExternalCamera
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: AD1D08
  class ExternalCamera : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::LIV::SDK::Unity::ExternalCamera::$$c
    class $$c;
    public:
    // [CompilerGeneratedAttribute] Offset: 0xAE12DC
    // private System.UInt32 <OpenVRTrackedDeviceId>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    uint OpenVRTrackedDeviceId;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private Valve.VR.TrackedDevicePose_t _trackedDevicePose
    // Size: 0x4E
    // Offset: 0x1C
    ::Valve::VR::TrackedDevicePose_t trackedDevicePose;
    // Field size check
    static_assert(sizeof(::Valve::VR::TrackedDevicePose_t) == 0x4E);
    // Padding between fields: trackedDevicePose and: devices
    char __padding1[0x6] = {};
    // private Valve.VR.TrackedDevicePose_t[] _devices
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::Valve::VR::TrackedDevicePose_t> devices;
    // Field size check
    static_assert(sizeof(::ArrayW<::Valve::VR::TrackedDevicePose_t>) == 0x8);
    // private Valve.VR.TrackedDevicePose_t[] _gameDevices
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::Valve::VR::TrackedDevicePose_t> gameDevices;
    // Field size check
    static_assert(sizeof(::ArrayW<::Valve::VR::TrackedDevicePose_t>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.UInt32 <OpenVRTrackedDeviceId>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$OpenVRTrackedDeviceId$k__BackingField();
    // Get instance field reference: private Valve.VR.TrackedDevicePose_t _trackedDevicePose
    [[deprecated("Use field access instead!")]] ::Valve::VR::TrackedDevicePose_t& dyn__trackedDevicePose();
    // Get instance field reference: private Valve.VR.TrackedDevicePose_t[] _devices
    [[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::TrackedDevicePose_t>& dyn__devices();
    // Get instance field reference: private Valve.VR.TrackedDevicePose_t[] _gameDevices
    [[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::TrackedDevicePose_t>& dyn__gameDevices();
    // public System.Boolean get_IsValid()
    // Offset: 0x106757C
    bool get_IsValid();
    // public System.UInt32 get_OpenVRTrackedDeviceId()
    // Offset: 0x106758C
    uint get_OpenVRTrackedDeviceId();
    // protected System.Void set_OpenVRTrackedDeviceId(System.UInt32 value)
    // Offset: 0x1067594
    void set_OpenVRTrackedDeviceId(uint value);
    // private System.Void OnEnable()
    // Offset: 0x106759C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x106762C
    void OnDisable();
    // private System.Void LateUpdate()
    // Offset: 0x1067680
    void LateUpdate();
    // private System.Void OnPreCull()
    // Offset: 0x1067708
    void OnPreCull();
    // private System.Void UpdateCamera()
    // Offset: 0x1067684
    void UpdateCamera();
    // private System.Void UpdateOpenVRPose()
    // Offset: 0x106770C
    void UpdateOpenVRPose();
    // private System.Void UpdateTransform(Valve.VR.HmdMatrix34_t deviceToAbsolute)
    // Offset: 0x10677EC
    void UpdateTransform(::Valve::VR::HmdMatrix34_t deviceToAbsolute);
    // private System.Void UpdateOpenVRDevice()
    // Offset: 0x1067608
    void UpdateOpenVRDevice();
    // private System.UInt32 IdentifyExternalCameraDevice()
    // Offset: 0x1067A84
    uint IdentifyExternalCameraDevice();
    // static private System.String GetStringTrackedDeviceProperty(System.UInt32 device, Valve.VR.ETrackedDeviceProperty property)
    // Offset: 0x1067FD0
    static ::StringW GetStringTrackedDeviceProperty(uint device, ::Valve::VR::ETrackedDeviceProperty property);
    // public System.Void .ctor()
    // Offset: 0x1068148
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExternalCamera* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::ExternalCamera::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExternalCamera*, creationType>()));
    }
  }; // LIV.SDK.Unity.ExternalCamera
  #pragma pack(pop)
  static check_size<sizeof(ExternalCamera), 120 + sizeof(::ArrayW<::Valve::VR::TrackedDevicePose_t>)> __LIV_SDK_Unity_ExternalCameraSizeCheck;
  static_assert(sizeof(ExternalCamera) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LIV::SDK::Unity::ExternalCamera::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LIV::SDK::Unity::ExternalCamera::*)()>(&LIV::SDK::Unity::ExternalCamera::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::ExternalCamera*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::ExternalCamera::get_OpenVRTrackedDeviceId
// Il2CppName: get_OpenVRTrackedDeviceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (LIV::SDK::Unity::ExternalCamera::*)()>(&LIV::SDK::Unity::ExternalCamera::get_OpenVRTrackedDeviceId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::ExternalCamera*), "get_OpenVRTrackedDeviceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::ExternalCamera::set_OpenVRTrackedDeviceId
// Il2CppName: set_OpenVRTrackedDeviceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::ExternalCamera::*)(uint)>(&LIV::SDK::Unity::ExternalCamera::set_OpenVRTrackedDeviceId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::ExternalCamera*), "set_OpenVRTrackedDeviceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::ExternalCamera::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::ExternalCamera::*)()>(&LIV::SDK::Unity::ExternalCamera::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::ExternalCamera*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::ExternalCamera::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::ExternalCamera::*)()>(&LIV::SDK::Unity::ExternalCamera::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::ExternalCamera*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::ExternalCamera::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::ExternalCamera::*)()>(&LIV::SDK::Unity::ExternalCamera::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::ExternalCamera*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::ExternalCamera::OnPreCull
// Il2CppName: OnPreCull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::ExternalCamera::*)()>(&LIV::SDK::Unity::ExternalCamera::OnPreCull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::ExternalCamera*), "OnPreCull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::ExternalCamera::UpdateCamera
// Il2CppName: UpdateCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::ExternalCamera::*)()>(&LIV::SDK::Unity::ExternalCamera::UpdateCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::ExternalCamera*), "UpdateCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::ExternalCamera::UpdateOpenVRPose
// Il2CppName: UpdateOpenVRPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::ExternalCamera::*)()>(&LIV::SDK::Unity::ExternalCamera::UpdateOpenVRPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::ExternalCamera*), "UpdateOpenVRPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::ExternalCamera::UpdateTransform
// Il2CppName: UpdateTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::ExternalCamera::*)(::Valve::VR::HmdMatrix34_t)>(&LIV::SDK::Unity::ExternalCamera::UpdateTransform)> {
  static const MethodInfo* get() {
    static auto* deviceToAbsolute = &::il2cpp_utils::GetClassFromName("Valve.VR", "HmdMatrix34_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::ExternalCamera*), "UpdateTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceToAbsolute});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::ExternalCamera::UpdateOpenVRDevice
// Il2CppName: UpdateOpenVRDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::ExternalCamera::*)()>(&LIV::SDK::Unity::ExternalCamera::UpdateOpenVRDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::ExternalCamera*), "UpdateOpenVRDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::ExternalCamera::IdentifyExternalCameraDevice
// Il2CppName: IdentifyExternalCameraDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (LIV::SDK::Unity::ExternalCamera::*)()>(&LIV::SDK::Unity::ExternalCamera::IdentifyExternalCameraDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::ExternalCamera*), "IdentifyExternalCameraDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::ExternalCamera::GetStringTrackedDeviceProperty
// Il2CppName: GetStringTrackedDeviceProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(uint, ::Valve::VR::ETrackedDeviceProperty)>(&LIV::SDK::Unity::ExternalCamera::GetStringTrackedDeviceProperty)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* property = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedDeviceProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::ExternalCamera*), "GetStringTrackedDeviceProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, property});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::ExternalCamera::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
