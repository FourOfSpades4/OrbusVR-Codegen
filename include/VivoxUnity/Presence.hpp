// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: VivoxUnity.PresenceStatus
#include "VivoxUnity/PresenceStatus.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: Presence
  struct Presence;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::Presence, "VivoxUnity", "Presence");
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: VivoxUnity.Presence
  // [TokenAttribute] Offset: FFFFFFFF
  struct Presence/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly VivoxUnity.PresenceStatus Status
    // Size: 0x4
    // Offset: 0x0
    ::VivoxUnity::PresenceStatus Status;
    // Field size check
    static_assert(sizeof(::VivoxUnity::PresenceStatus) == 0x4);
    // Padding between fields: Status and: Message
    char __padding0[0x4] = {};
    // public readonly System.String Message
    // Size: 0x8
    // Offset: 0x8
    ::StringW Message;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: Presence
    constexpr Presence(::VivoxUnity::PresenceStatus Status_ = {}, ::StringW Message_ = {}) noexcept : Status{Status_}, Message{Message_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly VivoxUnity.PresenceStatus Status
    [[deprecated("Use field access instead!")]] ::VivoxUnity::PresenceStatus& dyn_Status();
    // Get instance field reference: public readonly System.String Message
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Message();
    // public System.Void .ctor(VivoxUnity.PresenceStatus status, System.String message)
    // Offset: 0xB9FE78
    // ABORTED: conflicts with another method.  Presence(::VivoxUnity::PresenceStatus status, ::StringW message);
    // private System.Boolean Equals(VivoxUnity.Presence other)
    // Offset: 0xB9FE8C
    bool Equals(::VivoxUnity::Presence other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xB9FE84
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xB9FEB0
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // VivoxUnity.Presence
  #pragma pack(pop)
  static check_size<sizeof(Presence), 8 + sizeof(::StringW)> __VivoxUnity_PresenceSizeCheck;
  static_assert(sizeof(Presence) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::Presence::Presence
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::Presence::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Presence::*)(::VivoxUnity::Presence)>(&VivoxUnity::Presence::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("VivoxUnity", "Presence")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Presence), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Presence::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Presence::*)(::Il2CppObject*)>(&VivoxUnity::Presence::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Presence), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Presence::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VivoxUnity::Presence::*)()>(&VivoxUnity::Presence::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Presence), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
