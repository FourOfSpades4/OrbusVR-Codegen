// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VivoxUnity.IReadOnlyQueue`1
#include "VivoxUnity/IReadOnlyQueue_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VivoxUnity::Common
namespace VivoxUnity::Common {
  // Skipping declaration: <>c__DisplayClass11_0 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
}
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: QueueItemAddedEventArgs`1<T>
  template<typename T>
  class QueueItemAddedEventArgs_1;
}
// Completed forward declares
// Type namespace: VivoxUnity.Common
namespace VivoxUnity::Common {
  // Forward declaring type: ReadWriteQueue`1<T>
  template<typename T>
  class ReadWriteQueue_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::VivoxUnity::Common::ReadWriteQueue_1, "VivoxUnity.Common", "ReadWriteQueue`1");
// Type namespace: VivoxUnity.Common
namespace VivoxUnity::Common {
  // WARNING Size may be invalid!
  // Autogenerated type: VivoxUnity.Common.ReadWriteQueue`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class ReadWriteQueue_1 : public ::Il2CppObject/*, public ::VivoxUnity::IReadOnlyQueue_1<T>*/ {
    public:
    // Nested type: ::VivoxUnity::Common::ReadWriteQueue_1::$$c__DisplayClass11_0<T>
    class $$c__DisplayClass11_0;
    // WARNING Size may be invalid!
    // Autogenerated type: VivoxUnity.Common.ReadWriteQueue`1/<>c__DisplayClass11_0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: ABDB58
    class $$c__DisplayClass11_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = ReadWriteQueue_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass11_0";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // public T item
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T item;
      public:
      // Autogenerated instance field getter
      // Get instance field: public T item
      [[deprecated("Use field access instead!")]] T& dyn_item() {
        static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteQueue_1::$$c__DisplayClass11_0::dyn_item");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "item"))->offset;
        return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename ReadWriteQueue_1<T>::$$c__DisplayClass11_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteQueue_1::$$c__DisplayClass11_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename ReadWriteQueue_1<T>::$$c__DisplayClass11_0*, creationType>()));
      }
      // System.Boolean <RemoveAll>b__0(T i)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool $RemoveAll$b__0(T i) {
        static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteQueue_1::$$c__DisplayClass11_0::<RemoveAll>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RemoveAll>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, i);
      }
    }; // VivoxUnity.Common.ReadWriteQueue`1/<>c__DisplayClass11_0
    // Could not write size check! Type: VivoxUnity.Common.ReadWriteQueue`1/<>c__DisplayClass11_0 is generic, or has no fields that are valid for size checks!
    public:
    // private readonly System.Collections.Generic.List`1<T> _items
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<T>* items;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<T>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE4C8
    // private System.EventHandler`1<VivoxUnity.QueueItemAddedEventArgs`1<T>> AfterItemAdded
    // Size: 0x8
    // Offset: 0x0
    ::System::EventHandler_1<::VivoxUnity::QueueItemAddedEventArgs_1<T>*>* AfterItemAdded;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::VivoxUnity::QueueItemAddedEventArgs_1<T>*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::VivoxUnity::IReadOnlyQueue_1<T>
    operator ::VivoxUnity::IReadOnlyQueue_1<T>() noexcept {
      return *reinterpret_cast<::VivoxUnity::IReadOnlyQueue_1<T>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.List`1<T> _items
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<T>*& dyn__items() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteQueue_1::dyn__items");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_items"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.EventHandler`1<VivoxUnity.QueueItemAddedEventArgs`1<T>> AfterItemAdded
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::VivoxUnity::QueueItemAddedEventArgs_1<T>*>*& dyn_AfterItemAdded() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteQueue_1::dyn_AfterItemAdded");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AfterItemAdded"))->offset;
      return *reinterpret_cast<::System::EventHandler_1<::VivoxUnity::QueueItemAddedEventArgs_1<T>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void add_AfterItemAdded(System.EventHandler`1<VivoxUnity.QueueItemAddedEventArgs`1<T>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_AfterItemAdded(::System::EventHandler_1<::VivoxUnity::QueueItemAddedEventArgs_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteQueue_1::add_AfterItemAdded");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteQueue_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_AfterItemAdded(System.EventHandler`1<VivoxUnity.QueueItemAddedEventArgs`1<T>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_AfterItemAdded(::System::EventHandler_1<::VivoxUnity::QueueItemAddedEventArgs_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteQueue_1::remove_AfterItemAdded");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteQueue_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public T Dequeue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Dequeue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteQueue_1::Dequeue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteQueue_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteQueue_1::Clear");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteQueue_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteQueue_1::get_Count");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteQueue_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public T Peek()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Peek() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteQueue_1::Peek");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteQueue_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void Enqueue(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Enqueue(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteQueue_1::Enqueue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
    // public System.Boolean Contains(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteQueue_1::Contains");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Int32 RemoveAll(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int RemoveAll(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteQueue_1::RemoveAll");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, item);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReadWriteQueue_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteQueue_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReadWriteQueue_1<T>*, creationType>()));
    }
  }; // VivoxUnity.Common.ReadWriteQueue`1
  // Could not write size check! Type: VivoxUnity.Common.ReadWriteQueue`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
