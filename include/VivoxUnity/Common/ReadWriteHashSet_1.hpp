// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VivoxUnity.IReadOnlyHashSet`1
#include "VivoxUnity/IReadOnlyHashSet_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
}
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: KeyEventArg`1<TK>
  template<typename TK>
  class KeyEventArg_1;
}
// Completed forward declares
// Type namespace: VivoxUnity.Common
namespace VivoxUnity::Common {
  // Forward declaring type: ReadWriteHashSet`1<T>
  template<typename T>
  class ReadWriteHashSet_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::VivoxUnity::Common::ReadWriteHashSet_1, "VivoxUnity.Common", "ReadWriteHashSet`1");
// Type namespace: VivoxUnity.Common
namespace VivoxUnity::Common {
  // WARNING Size may be invalid!
  // Autogenerated type: VivoxUnity.Common.ReadWriteHashSet`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class ReadWriteHashSet_1 : public ::Il2CppObject/*, public ::VivoxUnity::IReadOnlyHashSet_1<T>*/ {
    public:
    public:
    // private readonly System.Collections.Generic.HashSet`1<T> _items
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::HashSet_1<T>* items;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<T>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE4A8
    // private System.EventHandler`1<VivoxUnity.KeyEventArg`1<T>> AfterKeyAdded
    // Size: 0x8
    // Offset: 0x0
    ::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>* AfterKeyAdded;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE4B8
    // private System.EventHandler`1<VivoxUnity.KeyEventArg`1<T>> BeforeKeyRemoved
    // Size: 0x8
    // Offset: 0x0
    ::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>* BeforeKeyRemoved;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::VivoxUnity::IReadOnlyHashSet_1<T>
    operator ::VivoxUnity::IReadOnlyHashSet_1<T>() noexcept {
      return *reinterpret_cast<::VivoxUnity::IReadOnlyHashSet_1<T>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.HashSet`1<T> _items
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<T>*& dyn__items() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteHashSet_1::dyn__items");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_items"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::HashSet_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.EventHandler`1<VivoxUnity.KeyEventArg`1<T>> AfterKeyAdded
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>*& dyn_AfterKeyAdded() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteHashSet_1::dyn_AfterKeyAdded");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AfterKeyAdded"))->offset;
      return *reinterpret_cast<::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.EventHandler`1<VivoxUnity.KeyEventArg`1<T>> BeforeKeyRemoved
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>*& dyn_BeforeKeyRemoved() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteHashSet_1::dyn_BeforeKeyRemoved");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BeforeKeyRemoved"))->offset;
      return *reinterpret_cast<::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void add_AfterKeyAdded(System.EventHandler`1<VivoxUnity.KeyEventArg`1<T>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_AfterKeyAdded(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteHashSet_1::add_AfterKeyAdded");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteHashSet_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_AfterKeyAdded(System.EventHandler`1<VivoxUnity.KeyEventArg`1<T>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_AfterKeyAdded(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteHashSet_1::remove_AfterKeyAdded");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteHashSet_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void add_BeforeKeyRemoved(System.EventHandler`1<VivoxUnity.KeyEventArg`1<T>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_BeforeKeyRemoved(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteHashSet_1::add_BeforeKeyRemoved");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteHashSet_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_BeforeKeyRemoved(System.EventHandler`1<VivoxUnity.KeyEventArg`1<T>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_BeforeKeyRemoved(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteHashSet_1::remove_BeforeKeyRemoved");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteHashSet_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Boolean Contains(T key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(T key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteHashSet_1::Contains");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteHashSet_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // public System.Boolean Add(T key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Add(T key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteHashSet_1::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // public System.Boolean Remove(T key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Remove(T key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteHashSet_1::Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteHashSet_1::get_Count");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteHashSet_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteHashSet_1::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReadWriteHashSet_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteHashSet_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReadWriteHashSet_1<T>*, creationType>()));
    }
  }; // VivoxUnity.Common.ReadWriteHashSet`1
  // Could not write size check! Type: VivoxUnity.Common.ReadWriteHashSet`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
