// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VivoxUnity.IReadOnlyDictionary`2
#include "VivoxUnity/IReadOnlyDictionary_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: IKeyedItemNotifyPropertyChanged`1<TK>
  template<typename TK>
  class IKeyedItemNotifyPropertyChanged_1;
  // Forward declaring type: KeyEventArg`1<TK>
  template<typename TK>
  class KeyEventArg_1;
  // Forward declaring type: ValueEventArg`2<TK, TV>
  template<typename TK, typename TV>
  class ValueEventArg_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: ICollection`1<T>
  template<typename T>
  class ICollection_1;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: PropertyChangedEventArgs
  class PropertyChangedEventArgs;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: VivoxUnity.Common
namespace VivoxUnity::Common {
  // Forward declaring type: ReadWriteDictionary`3<TK, TI, T>
  template<typename TK, typename TI, typename T>
  class ReadWriteDictionary_3;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::VivoxUnity::Common::ReadWriteDictionary_3, "VivoxUnity.Common", "ReadWriteDictionary`3");
// Type namespace: VivoxUnity.Common
namespace VivoxUnity::Common {
  // WARNING Size may be invalid!
  // Autogenerated type: VivoxUnity.Common.ReadWriteDictionary`3
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: ABD730
  template<typename TK, typename TI, typename T>
  class ReadWriteDictionary_3 : public ::Il2CppObject/*, public ::VivoxUnity::IReadOnlyDictionary_2<TK, TI>*/ {
    public:
    public:
    // private readonly System.Collections.Generic.Dictionary`2<TK,TI> _items
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Dictionary_2<TK, TI>* items;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<TK, TI>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE478
    // private System.EventHandler`1<VivoxUnity.KeyEventArg`1<TK>> AfterKeyAdded
    // Size: 0x8
    // Offset: 0x0
    ::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<TK>*>* AfterKeyAdded;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<TK>*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE488
    // private System.EventHandler`1<VivoxUnity.ValueEventArg`2<TK,TI>> AfterValueUpdated
    // Size: 0x8
    // Offset: 0x0
    ::System::EventHandler_1<::VivoxUnity::ValueEventArg_2<TK, TI>*>* AfterValueUpdated;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::VivoxUnity::ValueEventArg_2<TK, TI>*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE498
    // private System.EventHandler`1<VivoxUnity.KeyEventArg`1<TK>> BeforeKeyRemoved
    // Size: 0x8
    // Offset: 0x0
    ::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<TK>*>* BeforeKeyRemoved;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<TK>*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::VivoxUnity::IReadOnlyDictionary_2<TK, TI>
    operator ::VivoxUnity::IReadOnlyDictionary_2<TK, TI>() noexcept {
      return *reinterpret_cast<::VivoxUnity::IReadOnlyDictionary_2<TK, TI>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.Dictionary`2<TK,TI> _items
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<TK, TI>*& dyn__items() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::dyn__items");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_items"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<TK, TI>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.EventHandler`1<VivoxUnity.KeyEventArg`1<TK>> AfterKeyAdded
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<TK>*>*& dyn_AfterKeyAdded() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::dyn_AfterKeyAdded");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AfterKeyAdded"))->offset;
      return *reinterpret_cast<::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<TK>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.EventHandler`1<VivoxUnity.ValueEventArg`2<TK,TI>> AfterValueUpdated
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::VivoxUnity::ValueEventArg_2<TK, TI>*>*& dyn_AfterValueUpdated() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::dyn_AfterValueUpdated");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "AfterValueUpdated"))->offset;
      return *reinterpret_cast<::System::EventHandler_1<::VivoxUnity::ValueEventArg_2<TK, TI>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.EventHandler`1<VivoxUnity.KeyEventArg`1<TK>> BeforeKeyRemoved
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<TK>*>*& dyn_BeforeKeyRemoved() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::dyn_BeforeKeyRemoved");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "BeforeKeyRemoved"))->offset;
      return *reinterpret_cast<::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<TK>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public TI get_Item(TK key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TI get_Item(TK key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::get_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteDictionary_3<TK, TI, T>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<TI, false>(this, ___internal__method, key);
    }
    // public System.Void set_Item(TK key, TI value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Item(TK key, TI value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::set_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // private System.Void Value_PropertyChanged(System.Object sender, System.ComponentModel.PropertyChangedEventArgs e)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Value_PropertyChanged(::Il2CppObject* sender, ::System::ComponentModel::PropertyChangedEventArgs* e) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::Value_PropertyChanged");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Value_PropertyChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(e)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender, e);
    }
    // public System.Collections.Generic.ICollection`1<TK> get_Keys()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::ICollection_1<TK>* get_Keys() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::get_Keys");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteDictionary_3<TK, TI, T>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::ICollection_1<TK>*, false>(this, ___internal__method);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean ContainsKey(TK key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ContainsKey(TK key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::ContainsKey");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteDictionary_3<TK, TI, T>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // public System.Boolean Remove(TK key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Remove(TK key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // public System.Void add_AfterKeyAdded(System.EventHandler`1<VivoxUnity.KeyEventArg`1<TK>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_AfterKeyAdded(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<TK>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::add_AfterKeyAdded");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteDictionary_3<TK, TI, T>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_AfterKeyAdded(System.EventHandler`1<VivoxUnity.KeyEventArg`1<TK>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_AfterKeyAdded(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<TK>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::remove_AfterKeyAdded");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteDictionary_3<TK, TI, T>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void add_AfterValueUpdated(System.EventHandler`1<VivoxUnity.ValueEventArg`2<TK,TI>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_AfterValueUpdated(::System::EventHandler_1<::VivoxUnity::ValueEventArg_2<TK, TI>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::add_AfterValueUpdated");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteDictionary_3<TK, TI, T>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_AfterValueUpdated(System.EventHandler`1<VivoxUnity.ValueEventArg`2<TK,TI>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_AfterValueUpdated(::System::EventHandler_1<::VivoxUnity::ValueEventArg_2<TK, TI>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::remove_AfterValueUpdated");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteDictionary_3<TK, TI, T>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void add_BeforeKeyRemoved(System.EventHandler`1<VivoxUnity.KeyEventArg`1<TK>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_BeforeKeyRemoved(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<TK>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::add_BeforeKeyRemoved");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteDictionary_3<TK, TI, T>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_BeforeKeyRemoved(System.EventHandler`1<VivoxUnity.KeyEventArg`1<TK>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_BeforeKeyRemoved(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<TK>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::remove_BeforeKeyRemoved");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteDictionary_3<TK, TI, T>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::get_Count");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteDictionary_3<TK, TI, T>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public T At(TK key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T At(TK key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::At");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "At", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, key);
    }
    // public System.Boolean ContainsValue(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ContainsValue(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::ContainsValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContainsValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Collections.Generic.IEnumerator`1<TI> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<TI>* GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteDictionary_3<TK, TI, T>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<TI>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::Common::ReadWriteDictionary_3<TK, TI, T>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReadWriteDictionary_3<TK, TI, T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Common::ReadWriteDictionary_3::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReadWriteDictionary_3<TK, TI, T>*, creationType>()));
    }
  }; // VivoxUnity.Common.ReadWriteDictionary`3
  // Could not write size check! Type: VivoxUnity.Common.ReadWriteDictionary`3 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
