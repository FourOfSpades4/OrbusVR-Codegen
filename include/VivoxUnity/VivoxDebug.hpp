// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: vx_log_level
  struct vx_log_level;
}
// Completed forward declares
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: VivoxDebug
  class VivoxDebug;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::VivoxDebug);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::VivoxDebug*, "VivoxUnity", "VivoxDebug");
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Size: 0x15
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.VivoxDebug
  // [TokenAttribute] Offset: FFFFFFFF
  class VivoxDebug : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 debugLocation
    // Size: 0x4
    // Offset: 0x10
    int debugLocation;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean throwInternalExcepetions
    // Size: 0x1
    // Offset: 0x14
    bool throwInternalExcepetions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private VivoxUnity.VivoxDebug _instance
    static ::VivoxUnity::VivoxDebug* _get__instance();
    // Set static field: static private VivoxUnity.VivoxDebug _instance
    static void _set__instance(::VivoxUnity::VivoxDebug* value);
    // Get instance field reference: public System.Int32 debugLocation
    [[deprecated("Use field access instead!")]] int& dyn_debugLocation();
    // Get instance field reference: public System.Boolean throwInternalExcepetions
    [[deprecated("Use field access instead!")]] bool& dyn_throwInternalExcepetions();
    // static public VivoxUnity.VivoxDebug get_Instance()
    // Offset: 0x12D11EC
    static ::VivoxUnity::VivoxDebug* get_Instance();
    // static public System.Void set_Instance(VivoxUnity.VivoxDebug value)
    // Offset: 0x12DB144
    static void set_Instance(::VivoxUnity::VivoxDebug* value);
    // System.Void VxExceptionMessage(System.String message)
    // Offset: 0x12D1274
    void VxExceptionMessage(::StringW message);
    // public System.Void DebugMessage(System.Object message, vx_log_level severity)
    // Offset: 0x12DB198
    void DebugMessage(::Il2CppObject* message, ::GlobalNamespace::vx_log_level severity);
    // public System.Void .ctor()
    // Offset: 0x12DB134
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VivoxDebug* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxDebug::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VivoxDebug*, creationType>()));
    }
  }; // VivoxUnity.VivoxDebug
  #pragma pack(pop)
  static check_size<sizeof(VivoxDebug), 20 + sizeof(bool)> __VivoxUnity_VivoxDebugSizeCheck;
  static_assert(sizeof(VivoxDebug) == 0x15);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::VivoxDebug::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::VivoxDebug* (*)()>(&VivoxUnity::VivoxDebug::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VivoxDebug*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VivoxDebug::set_Instance
// Il2CppName: set_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::VivoxUnity::VivoxDebug*)>(&VivoxUnity::VivoxDebug::set_Instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity", "VivoxDebug")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VivoxDebug*), "set_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VivoxDebug::VxExceptionMessage
// Il2CppName: VxExceptionMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::VivoxDebug::*)(::StringW)>(&VivoxUnity::VivoxDebug::VxExceptionMessage)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VivoxDebug*), "VxExceptionMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VivoxDebug::DebugMessage
// Il2CppName: DebugMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::VivoxDebug::*)(::Il2CppObject*, ::GlobalNamespace::vx_log_level)>(&VivoxUnity::VivoxDebug::DebugMessage)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* severity = &::il2cpp_utils::GetClassFromName("", "vx_log_level")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VivoxDebug*), "DebugMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, severity});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VivoxDebug::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
