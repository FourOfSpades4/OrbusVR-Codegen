// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VivoxUnity.ChannelType
#include "VivoxUnity/ChannelType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: Channel3DProperties
  class Channel3DProperties;
}
// Completed forward declares
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: ChannelId
  class ChannelId;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::ChannelId);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::ChannelId*, "VivoxUnity", "ChannelId");
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.ChannelId
  // [TokenAttribute] Offset: FFFFFFFF
  class ChannelId : public ::Il2CppObject {
    public:
    public:
    // private readonly System.String _domain
    // Size: 0x8
    // Offset: 0x10
    ::StringW domain;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String _name
    // Size: 0x8
    // Offset: 0x18
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String _issuer
    // Size: 0x8
    // Offset: 0x20
    ::StringW issuer;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly VivoxUnity.ChannelType _type
    // Size: 0x4
    // Offset: 0x28
    ::VivoxUnity::ChannelType type;
    // Field size check
    static_assert(sizeof(::VivoxUnity::ChannelType) == 0x4);
    // Padding between fields: type and: properties
    char __padding3[0x4] = {};
    // private readonly VivoxUnity.Channel3DProperties _properties
    // Size: 0x8
    // Offset: 0x30
    ::VivoxUnity::Channel3DProperties* properties;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Channel3DProperties*) == 0x8);
    public:
    // Get instance field reference: private readonly System.String _domain
    [[deprecated("Use field access instead!")]] ::StringW& dyn__domain();
    // Get instance field reference: private readonly System.String _name
    [[deprecated("Use field access instead!")]] ::StringW& dyn__name();
    // Get instance field reference: private readonly System.String _issuer
    [[deprecated("Use field access instead!")]] ::StringW& dyn__issuer();
    // Get instance field reference: private readonly VivoxUnity.ChannelType _type
    [[deprecated("Use field access instead!")]] ::VivoxUnity::ChannelType& dyn__type();
    // Get instance field reference: private readonly VivoxUnity.Channel3DProperties _properties
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Channel3DProperties*& dyn__properties();
    // System.String GetUriDesignator(VivoxUnity.ChannelType value)
    // Offset: 0x14B5A6C
    ::StringW GetUriDesignator(::VivoxUnity::ChannelType value);
    // public System.Void .ctor(System.String uri)
    // Offset: 0x14B5B78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChannelId* New_ctor(::StringW uri) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChannelId*, creationType>(uri)));
    }
    // public System.Void .ctor(System.String issuer, System.String name, System.String domain, VivoxUnity.ChannelType type, VivoxUnity.Channel3DProperties properties)
    // Offset: 0x14B5FE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChannelId* New_ctor(::StringW issuer, ::StringW name, ::StringW domain, ::VivoxUnity::ChannelType type, ::VivoxUnity::Channel3DProperties* properties) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::ChannelId::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChannelId*, creationType>(issuer, name, domain, type, properties)));
    }
    // public System.String get_Issuer()
    // Offset: 0x14B6454
    ::StringW get_Issuer();
    // public System.String get_Name()
    // Offset: 0x14B645C
    ::StringW get_Name();
    // public System.String get_Domain()
    // Offset: 0x14B6464
    ::StringW get_Domain();
    // public VivoxUnity.ChannelType get_Type()
    // Offset: 0x14B646C
    ::VivoxUnity::ChannelType get_Type();
    // public VivoxUnity.Channel3DProperties get_Properties()
    // Offset: 0x14B6474
    ::VivoxUnity::Channel3DProperties* get_Properties();
    // private System.Boolean Equals(VivoxUnity.ChannelId other)
    // Offset: 0x14B65A4
    bool Equals(::VivoxUnity::ChannelId* other);
    // public System.Boolean get_IsEmpty()
    // Offset: 0x14B6708
    bool get_IsEmpty();
    // static public System.Boolean IsNullOrEmpty(VivoxUnity.ChannelId id)
    // Offset: 0x14B675C
    static bool IsNullOrEmpty(::VivoxUnity::ChannelId* id);
    // System.Boolean IsValid()
    // Offset: 0x14B6B1C
    bool IsValid();
    // System.Boolean IsValidName(System.String name)
    // Offset: 0x14B6330
    bool IsValidName(::StringW name);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x14B647C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x14B6630
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x14B676C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // VivoxUnity.ChannelId
  #pragma pack(pop)
  static check_size<sizeof(ChannelId), 48 + sizeof(::VivoxUnity::Channel3DProperties*)> __VivoxUnity_ChannelIdSizeCheck;
  static_assert(sizeof(ChannelId) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::ChannelId::GetUriDesignator
// Il2CppName: GetUriDesignator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::ChannelId::*)(::VivoxUnity::ChannelType)>(&VivoxUnity::ChannelId::GetUriDesignator)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ChannelType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::ChannelId*), "GetUriDesignator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::ChannelId::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::ChannelId::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::ChannelId::get_Issuer
// Il2CppName: get_Issuer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::ChannelId::*)()>(&VivoxUnity::ChannelId::get_Issuer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::ChannelId*), "get_Issuer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::ChannelId::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::ChannelId::*)()>(&VivoxUnity::ChannelId::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::ChannelId*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::ChannelId::get_Domain
// Il2CppName: get_Domain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::ChannelId::*)()>(&VivoxUnity::ChannelId::get_Domain)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::ChannelId*), "get_Domain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::ChannelId::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::ChannelType (VivoxUnity::ChannelId::*)()>(&VivoxUnity::ChannelId::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::ChannelId*), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::ChannelId::get_Properties
// Il2CppName: get_Properties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::Channel3DProperties* (VivoxUnity::ChannelId::*)()>(&VivoxUnity::ChannelId::get_Properties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::ChannelId*), "get_Properties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::ChannelId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::ChannelId::*)(::VivoxUnity::ChannelId*)>(&VivoxUnity::ChannelId::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ChannelId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::ChannelId*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: VivoxUnity::ChannelId::get_IsEmpty
// Il2CppName: get_IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::ChannelId::*)()>(&VivoxUnity::ChannelId::get_IsEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::ChannelId*), "get_IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::ChannelId::IsNullOrEmpty
// Il2CppName: IsNullOrEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::VivoxUnity::ChannelId*)>(&VivoxUnity::ChannelId::IsNullOrEmpty)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ChannelId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::ChannelId*), "IsNullOrEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: VivoxUnity::ChannelId::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::ChannelId::*)()>(&VivoxUnity::ChannelId::IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::ChannelId*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::ChannelId::IsValidName
// Il2CppName: IsValidName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::ChannelId::*)(::StringW)>(&VivoxUnity::ChannelId::IsValidName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::ChannelId*), "IsValidName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: VivoxUnity::ChannelId::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::ChannelId::*)(::Il2CppObject*)>(&VivoxUnity::ChannelId::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::ChannelId*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: VivoxUnity::ChannelId::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VivoxUnity::ChannelId::*)()>(&VivoxUnity::ChannelId::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::ChannelId*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::ChannelId::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::ChannelId::*)()>(&VivoxUnity::ChannelId::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::ChannelId*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
