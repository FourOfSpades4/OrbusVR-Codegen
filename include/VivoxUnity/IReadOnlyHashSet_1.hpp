// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
}
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: KeyEventArg`1<TK>
  template<typename TK>
  class KeyEventArg_1;
}
// Completed forward declares
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: IReadOnlyHashSet`1<T>
  template<typename T>
  class IReadOnlyHashSet_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::VivoxUnity::IReadOnlyHashSet_1, "VivoxUnity", "IReadOnlyHashSet`1");
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // WARNING Size may be invalid!
  // Autogenerated type: VivoxUnity.IReadOnlyHashSet`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class IReadOnlyHashSet_1 {
    public:
    // public System.Void add_AfterKeyAdded(System.EventHandler`1<VivoxUnity.KeyEventArg`1<T>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_AfterKeyAdded(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IReadOnlyHashSet_1::add_AfterKeyAdded");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IReadOnlyHashSet_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_AfterKeyAdded(System.EventHandler`1<VivoxUnity.KeyEventArg`1<T>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_AfterKeyAdded(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IReadOnlyHashSet_1::remove_AfterKeyAdded");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IReadOnlyHashSet_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void add_BeforeKeyRemoved(System.EventHandler`1<VivoxUnity.KeyEventArg`1<T>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_BeforeKeyRemoved(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IReadOnlyHashSet_1::add_BeforeKeyRemoved");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IReadOnlyHashSet_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_BeforeKeyRemoved(System.EventHandler`1<VivoxUnity.KeyEventArg`1<T>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_BeforeKeyRemoved(::System::EventHandler_1<::VivoxUnity::KeyEventArg_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IReadOnlyHashSet_1::remove_BeforeKeyRemoved");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IReadOnlyHashSet_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Boolean Contains(T key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Contains(T key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IReadOnlyHashSet_1::Contains");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IReadOnlyHashSet_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IReadOnlyHashSet_1::get_Count");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IReadOnlyHashSet_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
  }; // VivoxUnity.IReadOnlyHashSet`1
  // Could not write size check! Type: VivoxUnity.IReadOnlyHashSet`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
