// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: EventWaitHandle
  class EventWaitHandle;
  // Forward declaring type: WaitHandle
  class WaitHandle;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: AsyncNoResult
  class AsyncNoResult;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::AsyncNoResult);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::AsyncNoResult*, "VivoxUnity", "AsyncNoResult");
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Size: 0x32
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.AsyncNoResult
  // [TokenAttribute] Offset: FFFFFFFF
  class AsyncNoResult : public ::Il2CppObject/*, public ::System::IAsyncResult, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Threading.EventWaitHandle _waitHandle
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::EventWaitHandle* waitHandle;
    // Field size check
    static_assert(sizeof(::System::Threading::EventWaitHandle*) == 0x8);
    // private System.Exception _exception
    // Size: 0x8
    // Offset: 0x18
    ::System::Exception* exception;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABDB78
    // private System.AsyncCallback <Callback>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::System::AsyncCallback* Callback;
    // Field size check
    static_assert(sizeof(::System::AsyncCallback*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABDB88
    // private System.Object <AsyncState>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* AsyncState;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABDB98
    // private System.Boolean <CompletedSynchronously>k__BackingField
    // Size: 0x1
    // Offset: 0x30
    bool CompletedSynchronously;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xABDBA8
    // private System.Boolean <IsCompleted>k__BackingField
    // Size: 0x1
    // Offset: 0x31
    bool IsCompleted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IAsyncResult
    operator ::System::IAsyncResult() noexcept {
      return *reinterpret_cast<::System::IAsyncResult*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Threading.EventWaitHandle _waitHandle
    [[deprecated("Use field access instead!")]] ::System::Threading::EventWaitHandle*& dyn__waitHandle();
    // Get instance field reference: private System.Exception _exception
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn__exception();
    // Get instance field reference: private System.AsyncCallback <Callback>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::AsyncCallback*& dyn_$Callback$k__BackingField();
    // Get instance field reference: private System.Object <AsyncState>k__BackingField
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$AsyncState$k__BackingField();
    // Get instance field reference: private System.Boolean <CompletedSynchronously>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$CompletedSynchronously$k__BackingField();
    // Get instance field reference: private System.Boolean <IsCompleted>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsCompleted$k__BackingField();
    // public System.Void .ctor(System.AsyncCallback callback)
    // Offset: 0x14B5028
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AsyncNoResult* New_ctor(::System::AsyncCallback* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncNoResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AsyncNoResult*, creationType>(callback)));
    }
    // public System.AsyncCallback get_Callback()
    // Offset: 0x14B506C
    ::System::AsyncCallback* get_Callback();
    // public System.Void set_Callback(System.AsyncCallback value)
    // Offset: 0x14B5058
    void set_Callback(::System::AsyncCallback* value);
    // public System.Object get_AsyncState()
    // Offset: 0x14B5074
    ::Il2CppObject* get_AsyncState();
    // public System.Void set_AsyncState(System.Object value)
    // Offset: 0x14B507C
    void set_AsyncState(::Il2CppObject* value);
    // public System.Threading.WaitHandle get_AsyncWaitHandle()
    // Offset: 0x14B5084
    ::System::Threading::WaitHandle* get_AsyncWaitHandle();
    // public System.Void CheckForError()
    // Offset: 0x14B50F8
    void CheckForError();
    // public System.Boolean get_CompletedSynchronously()
    // Offset: 0x14B5158
    bool get_CompletedSynchronously();
    // public System.Void set_CompletedSynchronously(System.Boolean value)
    // Offset: 0x14B5060
    void set_CompletedSynchronously(bool value);
    // public System.Boolean get_IsCompleted()
    // Offset: 0x14B5160
    bool get_IsCompleted();
    // private System.Void set_IsCompleted(System.Boolean value)
    // Offset: 0x14B5168
    void set_IsCompleted(bool value);
    // public System.Void SetComplete()
    // Offset: 0x14B5174
    void SetComplete();
    // public System.Void SetCompletedSynchronously()
    // Offset: 0x14B5260
    void SetCompletedSynchronously();
    // public System.Void SetComplete(System.Exception exception)
    // Offset: 0x14B534C
    void SetComplete(::System::Exception* exception);
    // public System.Void Dispose()
    // Offset: 0x14B53E0
    void Dispose();
  }; // VivoxUnity.AsyncNoResult
  #pragma pack(pop)
  static check_size<sizeof(AsyncNoResult), 49 + sizeof(bool)> __VivoxUnity_AsyncNoResultSizeCheck;
  static_assert(sizeof(AsyncNoResult) == 0x32);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::AsyncNoResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::AsyncNoResult::get_Callback
// Il2CppName: get_Callback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::AsyncCallback* (VivoxUnity::AsyncNoResult::*)()>(&VivoxUnity::AsyncNoResult::get_Callback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::AsyncNoResult*), "get_Callback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::AsyncNoResult::set_Callback
// Il2CppName: set_Callback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::AsyncNoResult::*)(::System::AsyncCallback*)>(&VivoxUnity::AsyncNoResult::set_Callback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::AsyncNoResult*), "set_Callback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::AsyncNoResult::get_AsyncState
// Il2CppName: get_AsyncState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (VivoxUnity::AsyncNoResult::*)()>(&VivoxUnity::AsyncNoResult::get_AsyncState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::AsyncNoResult*), "get_AsyncState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::AsyncNoResult::set_AsyncState
// Il2CppName: set_AsyncState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::AsyncNoResult::*)(::Il2CppObject*)>(&VivoxUnity::AsyncNoResult::set_AsyncState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::AsyncNoResult*), "set_AsyncState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::AsyncNoResult::get_AsyncWaitHandle
// Il2CppName: get_AsyncWaitHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::WaitHandle* (VivoxUnity::AsyncNoResult::*)()>(&VivoxUnity::AsyncNoResult::get_AsyncWaitHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::AsyncNoResult*), "get_AsyncWaitHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::AsyncNoResult::CheckForError
// Il2CppName: CheckForError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::AsyncNoResult::*)()>(&VivoxUnity::AsyncNoResult::CheckForError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::AsyncNoResult*), "CheckForError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::AsyncNoResult::get_CompletedSynchronously
// Il2CppName: get_CompletedSynchronously
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::AsyncNoResult::*)()>(&VivoxUnity::AsyncNoResult::get_CompletedSynchronously)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::AsyncNoResult*), "get_CompletedSynchronously", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::AsyncNoResult::set_CompletedSynchronously
// Il2CppName: set_CompletedSynchronously
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::AsyncNoResult::*)(bool)>(&VivoxUnity::AsyncNoResult::set_CompletedSynchronously)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::AsyncNoResult*), "set_CompletedSynchronously", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::AsyncNoResult::get_IsCompleted
// Il2CppName: get_IsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::AsyncNoResult::*)()>(&VivoxUnity::AsyncNoResult::get_IsCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::AsyncNoResult*), "get_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::AsyncNoResult::set_IsCompleted
// Il2CppName: set_IsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::AsyncNoResult::*)(bool)>(&VivoxUnity::AsyncNoResult::set_IsCompleted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::AsyncNoResult*), "set_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::AsyncNoResult::SetComplete
// Il2CppName: SetComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::AsyncNoResult::*)()>(&VivoxUnity::AsyncNoResult::SetComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::AsyncNoResult*), "SetComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::AsyncNoResult::SetCompletedSynchronously
// Il2CppName: SetCompletedSynchronously
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::AsyncNoResult::*)()>(&VivoxUnity::AsyncNoResult::SetCompletedSynchronously)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::AsyncNoResult*), "SetCompletedSynchronously", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::AsyncNoResult::SetComplete
// Il2CppName: SetComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::AsyncNoResult::*)(::System::Exception*)>(&VivoxUnity::AsyncNoResult::SetComplete)> {
  static const MethodInfo* get() {
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::AsyncNoResult*), "SetComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exception});
  }
};
// Writing MetadataGetter for method: VivoxUnity::AsyncNoResult::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::AsyncNoResult::*)()>(&VivoxUnity::AsyncNoResult::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::AsyncNoResult*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
