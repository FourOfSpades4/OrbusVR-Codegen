// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
}
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: QueueItemAddedEventArgs`1<T>
  template<typename T>
  class QueueItemAddedEventArgs_1;
}
// Completed forward declares
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: IReadOnlyQueue`1<T>
  template<typename T>
  class IReadOnlyQueue_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::VivoxUnity::IReadOnlyQueue_1, "VivoxUnity", "IReadOnlyQueue`1");
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // WARNING Size may be invalid!
  // Autogenerated type: VivoxUnity.IReadOnlyQueue`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class IReadOnlyQueue_1 {
    public:
    // public System.Void add_AfterItemAdded(System.EventHandler`1<VivoxUnity.QueueItemAddedEventArgs`1<T>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_AfterItemAdded(::System::EventHandler_1<::VivoxUnity::QueueItemAddedEventArgs_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IReadOnlyQueue_1::add_AfterItemAdded");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IReadOnlyQueue_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_AfterItemAdded(System.EventHandler`1<VivoxUnity.QueueItemAddedEventArgs`1<T>> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_AfterItemAdded(::System::EventHandler_1<::VivoxUnity::QueueItemAddedEventArgs_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IReadOnlyQueue_1::remove_AfterItemAdded");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IReadOnlyQueue_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public T Dequeue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Dequeue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IReadOnlyQueue_1::Dequeue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IReadOnlyQueue_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IReadOnlyQueue_1::Clear");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IReadOnlyQueue_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IReadOnlyQueue_1::get_Count");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IReadOnlyQueue_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public T Peek()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Peek() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::IReadOnlyQueue_1::Peek");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::IReadOnlyQueue_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
  }; // VivoxUnity.IReadOnlyQueue`1
  // Could not write size check! Type: VivoxUnity.IReadOnlyQueue`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
