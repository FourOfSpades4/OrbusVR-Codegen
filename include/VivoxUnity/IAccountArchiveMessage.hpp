// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VivoxUnity.ITextMessage
#include "VivoxUnity/ITextMessage.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: ILoginSession
  class ILoginSession;
  // Forward declaring type: AccountId
  class AccountId;
  // Forward declaring type: ChannelId
  class ChannelId;
}
// Completed forward declares
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: IAccountArchiveMessage
  class IAccountArchiveMessage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::IAccountArchiveMessage);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::IAccountArchiveMessage*, "VivoxUnity", "IAccountArchiveMessage");
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.IAccountArchiveMessage
  // [TokenAttribute] Offset: FFFFFFFF
  class IAccountArchiveMessage/*, public ::VivoxUnity::ITextMessage*/ {
    public:
    // Creating interface conversion operator: operator ::VivoxUnity::ITextMessage
    operator ::VivoxUnity::ITextMessage() noexcept {
      return *reinterpret_cast<::VivoxUnity::ITextMessage*>(this);
    }
    // public VivoxUnity.ILoginSession get_LoginSession()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::VivoxUnity::ILoginSession* get_LoginSession();
    // public System.String get_QueryId()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_QueryId();
    // public VivoxUnity.AccountId get_RemoteParticipant()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::VivoxUnity::AccountId* get_RemoteParticipant();
    // public VivoxUnity.ChannelId get_Channel()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::VivoxUnity::ChannelId* get_Channel();
    // public System.Boolean get_Inbound()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_Inbound();
    // public System.String get_MessageId()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_MessageId();
  }; // VivoxUnity.IAccountArchiveMessage
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::IAccountArchiveMessage::get_LoginSession
// Il2CppName: get_LoginSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::ILoginSession* (VivoxUnity::IAccountArchiveMessage::*)()>(&VivoxUnity::IAccountArchiveMessage::get_LoginSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::IAccountArchiveMessage*), "get_LoginSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::IAccountArchiveMessage::get_QueryId
// Il2CppName: get_QueryId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::IAccountArchiveMessage::*)()>(&VivoxUnity::IAccountArchiveMessage::get_QueryId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::IAccountArchiveMessage*), "get_QueryId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::IAccountArchiveMessage::get_RemoteParticipant
// Il2CppName: get_RemoteParticipant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::AccountId* (VivoxUnity::IAccountArchiveMessage::*)()>(&VivoxUnity::IAccountArchiveMessage::get_RemoteParticipant)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::IAccountArchiveMessage*), "get_RemoteParticipant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::IAccountArchiveMessage::get_Channel
// Il2CppName: get_Channel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::ChannelId* (VivoxUnity::IAccountArchiveMessage::*)()>(&VivoxUnity::IAccountArchiveMessage::get_Channel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::IAccountArchiveMessage*), "get_Channel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::IAccountArchiveMessage::get_Inbound
// Il2CppName: get_Inbound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::IAccountArchiveMessage::*)()>(&VivoxUnity::IAccountArchiveMessage::get_Inbound)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::IAccountArchiveMessage*), "get_Inbound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::IAccountArchiveMessage::get_MessageId
// Il2CppName: get_MessageId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::IAccountArchiveMessage::*)()>(&VivoxUnity::IAccountArchiveMessage::get_MessageId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::IAccountArchiveMessage*), "get_MessageId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
