// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: EventWaitHandle
  class EventWaitHandle;
  // Forward declaring type: WaitHandle
  class WaitHandle;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: AsyncResult`1<T>
  template<typename T>
  class AsyncResult_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::VivoxUnity::AsyncResult_1, "VivoxUnity", "AsyncResult`1");
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // WARNING Size may be invalid!
  // Autogenerated type: VivoxUnity.AsyncResult`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class AsyncResult_1 : public ::Il2CppObject/*, public ::System::IAsyncResult, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Threading.EventWaitHandle _waitHandle
    // Size: 0x8
    // Offset: 0x0
    ::System::Threading::EventWaitHandle* waitHandle;
    // Field size check
    static_assert(sizeof(::System::Threading::EventWaitHandle*) == 0x8);
    // private System.Exception _exception
    // Size: 0x8
    // Offset: 0x0
    ::System::Exception* exception;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    // private T _result
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T result;
    // [CompilerGeneratedAttribute] Offset: 0xABDBB8
    // private System.AsyncCallback <Callback>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::System::AsyncCallback* Callback;
    // Field size check
    static_assert(sizeof(::System::AsyncCallback*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABDBC8
    // private System.Object <AsyncState>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppObject* AsyncState;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABDBD8
    // private System.Boolean <CompletedSynchronously>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool CompletedSynchronously;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xABDBE8
    // private System.Boolean <IsCompleted>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool IsCompleted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IAsyncResult
    operator ::System::IAsyncResult() noexcept {
      return *reinterpret_cast<::System::IAsyncResult*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Threading.EventWaitHandle _waitHandle
    [[deprecated("Use field access instead!")]] ::System::Threading::EventWaitHandle*& dyn__waitHandle() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::dyn__waitHandle");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_waitHandle"))->offset;
      return *reinterpret_cast<::System::Threading::EventWaitHandle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Exception _exception
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn__exception() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::dyn__exception");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_exception"))->offset;
      return *reinterpret_cast<::System::Exception**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T _result
    [[deprecated("Use field access instead!")]] T& dyn__result() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::dyn__result");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_result"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.AsyncCallback <Callback>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::AsyncCallback*& dyn_$Callback$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::dyn_$Callback$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Callback>k__BackingField"))->offset;
      return *reinterpret_cast<::System::AsyncCallback**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Object <AsyncState>k__BackingField
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$AsyncState$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::dyn_$AsyncState$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AsyncState>k__BackingField"))->offset;
      return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <CompletedSynchronously>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$CompletedSynchronously$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::dyn_$CompletedSynchronously$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<CompletedSynchronously>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <IsCompleted>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsCompleted$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::dyn_$IsCompleted$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsCompleted>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.AsyncCallback callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AsyncResult_1<T>* New_ctor(::System::AsyncCallback* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AsyncResult_1<T>*, creationType>(callback)));
    }
    // public T get_Result()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Result() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::get_Result");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Result", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // private System.Void set_Result(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Result(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::set_Result");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Result", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.AsyncCallback get_Callback()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::AsyncCallback* get_Callback() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::get_Callback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Callback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::AsyncCallback*, false>(this, ___internal__method);
    }
    // public System.Void set_Callback(System.AsyncCallback value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Callback(::System::AsyncCallback* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::set_Callback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Callback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Object get_AsyncState()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* get_AsyncState() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::get_AsyncState");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::AsyncResult_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
    }
    // public System.Void set_AsyncState(System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_AsyncState(::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::set_AsyncState");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_AsyncState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Threading.WaitHandle get_AsyncWaitHandle()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Threading::WaitHandle* get_AsyncWaitHandle() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::get_AsyncWaitHandle");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::AsyncResult_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::WaitHandle*, false>(this, ___internal__method);
    }
    // public System.Boolean get_CompletedSynchronously()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_CompletedSynchronously() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::get_CompletedSynchronously");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::AsyncResult_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void set_CompletedSynchronously(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_CompletedSynchronously(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::set_CompletedSynchronously");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CompletedSynchronously", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Boolean get_IsCompleted()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsCompleted() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::get_IsCompleted");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::AsyncResult_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void set_IsCompleted(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_IsCompleted(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::set_IsCompleted");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void SetComplete(T result)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetComplete(T result) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::SetComplete");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
    }
    // public System.Void SetComplete(System.Exception exception)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetComplete(::System::Exception* exception) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::SetComplete");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exception)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, exception);
    }
    // public System.Void SetCompletedSynchronously(T result)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetCompletedSynchronously(T result) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::SetCompletedSynchronously");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCompletedSynchronously", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::AsyncResult_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::VivoxUnity::AsyncResult_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // VivoxUnity.AsyncResult`1
  // Could not write size check! Type: VivoxUnity.AsyncResult`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
