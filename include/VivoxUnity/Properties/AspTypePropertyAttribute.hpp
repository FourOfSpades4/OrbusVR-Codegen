// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: VivoxUnity.Properties
namespace VivoxUnity::Properties {
  // Forward declaring type: AspTypePropertyAttribute
  class AspTypePropertyAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::Properties::AspTypePropertyAttribute);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::Properties::AspTypePropertyAttribute*, "VivoxUnity.Properties", "AspTypePropertyAttribute");
// Type namespace: VivoxUnity.Properties
namespace VivoxUnity::Properties {
  // Size: 0x11
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.Properties.AspTypePropertyAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: ABD604
  class AspTypePropertyAttribute : public ::System::Attribute {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xABDEB8
    // private System.Boolean <CreateConstructorReferences>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool CreateConstructorReferences;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return CreateConstructorReferences;
    }
    // Get instance field reference: private System.Boolean <CreateConstructorReferences>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$CreateConstructorReferences$k__BackingField();
    // public System.Boolean get_CreateConstructorReferences()
    // Offset: 0x12D8E98
    bool get_CreateConstructorReferences();
    // private System.Void set_CreateConstructorReferences(System.Boolean value)
    // Offset: 0x12D8EA0
    void set_CreateConstructorReferences(bool value);
    // public System.Void .ctor(System.Boolean createConstructorReferences)
    // Offset: 0x12D8EAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AspTypePropertyAttribute* New_ctor(bool createConstructorReferences) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::AspTypePropertyAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AspTypePropertyAttribute*, creationType>(createConstructorReferences)));
    }
  }; // VivoxUnity.Properties.AspTypePropertyAttribute
  #pragma pack(pop)
  static check_size<sizeof(AspTypePropertyAttribute), 16 + sizeof(bool)> __VivoxUnity_Properties_AspTypePropertyAttributeSizeCheck;
  static_assert(sizeof(AspTypePropertyAttribute) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::Properties::AspTypePropertyAttribute::get_CreateConstructorReferences
// Il2CppName: get_CreateConstructorReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Properties::AspTypePropertyAttribute::*)()>(&VivoxUnity::Properties::AspTypePropertyAttribute::get_CreateConstructorReferences)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Properties::AspTypePropertyAttribute*), "get_CreateConstructorReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Properties::AspTypePropertyAttribute::set_CreateConstructorReferences
// Il2CppName: set_CreateConstructorReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Properties::AspTypePropertyAttribute::*)(bool)>(&VivoxUnity::Properties::AspTypePropertyAttribute::set_CreateConstructorReferences)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Properties::AspTypePropertyAttribute*), "set_CreateConstructorReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Properties::AspTypePropertyAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
