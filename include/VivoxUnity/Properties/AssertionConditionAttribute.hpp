// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: VivoxUnity.Properties.AssertionConditionType
#include "VivoxUnity/Properties/AssertionConditionType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: VivoxUnity.Properties
namespace VivoxUnity::Properties {
  // Forward declaring type: AssertionConditionAttribute
  class AssertionConditionAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::Properties::AssertionConditionAttribute);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::Properties::AssertionConditionAttribute*, "VivoxUnity.Properties", "AssertionConditionAttribute");
// Type namespace: VivoxUnity.Properties
namespace VivoxUnity::Properties {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.Properties.AssertionConditionAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: ABD474
  class AssertionConditionAttribute : public ::System::Attribute {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xABDE78
    // private VivoxUnity.Properties.AssertionConditionType <ConditionType>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::VivoxUnity::Properties::AssertionConditionType ConditionType;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Properties::AssertionConditionType) == 0x4);
    public:
    // Creating conversion operator: operator ::VivoxUnity::Properties::AssertionConditionType
    constexpr operator ::VivoxUnity::Properties::AssertionConditionType() const noexcept {
      return ConditionType;
    }
    // Get instance field reference: private VivoxUnity.Properties.AssertionConditionType <ConditionType>k__BackingField
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Properties::AssertionConditionType& dyn_$ConditionType$k__BackingField();
    // public System.Void .ctor(VivoxUnity.Properties.AssertionConditionType conditionType)
    // Offset: 0x12D8EDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AssertionConditionAttribute* New_ctor(::VivoxUnity::Properties::AssertionConditionType conditionType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::AssertionConditionAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AssertionConditionAttribute*, creationType>(conditionType)));
    }
    // public VivoxUnity.Properties.AssertionConditionType get_ConditionType()
    // Offset: 0x12D8F10
    ::VivoxUnity::Properties::AssertionConditionType get_ConditionType();
    // private System.Void set_ConditionType(VivoxUnity.Properties.AssertionConditionType value)
    // Offset: 0x12D8F08
    void set_ConditionType(::VivoxUnity::Properties::AssertionConditionType value);
  }; // VivoxUnity.Properties.AssertionConditionAttribute
  #pragma pack(pop)
  static check_size<sizeof(AssertionConditionAttribute), 16 + sizeof(::VivoxUnity::Properties::AssertionConditionType)> __VivoxUnity_Properties_AssertionConditionAttributeSizeCheck;
  static_assert(sizeof(AssertionConditionAttribute) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::Properties::AssertionConditionAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::Properties::AssertionConditionAttribute::get_ConditionType
// Il2CppName: get_ConditionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::Properties::AssertionConditionType (VivoxUnity::Properties::AssertionConditionAttribute::*)()>(&VivoxUnity::Properties::AssertionConditionAttribute::get_ConditionType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Properties::AssertionConditionAttribute*), "get_ConditionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Properties::AssertionConditionAttribute::set_ConditionType
// Il2CppName: set_ConditionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Properties::AssertionConditionAttribute::*)(::VivoxUnity::Properties::AssertionConditionType)>(&VivoxUnity::Properties::AssertionConditionAttribute::set_ConditionType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity.Properties", "AssertionConditionType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Properties::AssertionConditionAttribute*), "set_ConditionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
