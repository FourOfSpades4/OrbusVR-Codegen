// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: VivoxUnity.Properties.ImplicitUseKindFlags
#include "VivoxUnity/Properties/ImplicitUseKindFlags.hpp"
// Including type: VivoxUnity.Properties.ImplicitUseTargetFlags
#include "VivoxUnity/Properties/ImplicitUseTargetFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: VivoxUnity.Properties
namespace VivoxUnity::Properties {
  // Forward declaring type: MeansImplicitUseAttribute
  class MeansImplicitUseAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::Properties::MeansImplicitUseAttribute);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::Properties::MeansImplicitUseAttribute*, "VivoxUnity.Properties", "MeansImplicitUseAttribute");
// Type namespace: VivoxUnity.Properties
namespace VivoxUnity::Properties {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.Properties.MeansImplicitUseAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: ABD084
  class MeansImplicitUseAttribute : public ::System::Attribute {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xABDD38
    // private VivoxUnity.Properties.ImplicitUseKindFlags <UseKindFlags>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::VivoxUnity::Properties::ImplicitUseKindFlags UseKindFlags;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Properties::ImplicitUseKindFlags) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xABDD48
    // private VivoxUnity.Properties.ImplicitUseTargetFlags <TargetFlags>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    ::VivoxUnity::Properties::ImplicitUseTargetFlags TargetFlags;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Properties::ImplicitUseTargetFlags) == 0x4);
    public:
    // Get instance field reference: private VivoxUnity.Properties.ImplicitUseKindFlags <UseKindFlags>k__BackingField
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Properties::ImplicitUseKindFlags& dyn_$UseKindFlags$k__BackingField();
    // Get instance field reference: private VivoxUnity.Properties.ImplicitUseTargetFlags <TargetFlags>k__BackingField
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Properties::ImplicitUseTargetFlags& dyn_$TargetFlags$k__BackingField();
    // public System.Void .ctor()
    // Offset: 0x12D918C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MeansImplicitUseAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::MeansImplicitUseAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MeansImplicitUseAttribute*, creationType>()));
    }
    // public System.Void .ctor(VivoxUnity.Properties.ImplicitUseKindFlags useKindFlags)
    // Offset: 0x12D91F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MeansImplicitUseAttribute* New_ctor(::VivoxUnity::Properties::ImplicitUseKindFlags useKindFlags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::MeansImplicitUseAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MeansImplicitUseAttribute*, creationType>(useKindFlags)));
    }
    // public System.Void .ctor(VivoxUnity.Properties.ImplicitUseTargetFlags targetFlags)
    // Offset: 0x12D9224
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MeansImplicitUseAttribute* New_ctor(::VivoxUnity::Properties::ImplicitUseTargetFlags targetFlags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::MeansImplicitUseAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MeansImplicitUseAttribute*, creationType>(targetFlags)));
    }
    // public System.Void .ctor(VivoxUnity.Properties.ImplicitUseKindFlags useKindFlags, VivoxUnity.Properties.ImplicitUseTargetFlags targetFlags)
    // Offset: 0x12D91BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MeansImplicitUseAttribute* New_ctor(::VivoxUnity::Properties::ImplicitUseKindFlags useKindFlags, ::VivoxUnity::Properties::ImplicitUseTargetFlags targetFlags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Properties::MeansImplicitUseAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MeansImplicitUseAttribute*, creationType>(useKindFlags, targetFlags)));
    }
    // public VivoxUnity.Properties.ImplicitUseKindFlags get_UseKindFlags()
    // Offset: 0x12D9264
    ::VivoxUnity::Properties::ImplicitUseKindFlags get_UseKindFlags();
    // private System.Void set_UseKindFlags(VivoxUnity.Properties.ImplicitUseKindFlags value)
    // Offset: 0x12D9254
    void set_UseKindFlags(::VivoxUnity::Properties::ImplicitUseKindFlags value);
    // public VivoxUnity.Properties.ImplicitUseTargetFlags get_TargetFlags()
    // Offset: 0x12D926C
    ::VivoxUnity::Properties::ImplicitUseTargetFlags get_TargetFlags();
    // private System.Void set_TargetFlags(VivoxUnity.Properties.ImplicitUseTargetFlags value)
    // Offset: 0x12D925C
    void set_TargetFlags(::VivoxUnity::Properties::ImplicitUseTargetFlags value);
  }; // VivoxUnity.Properties.MeansImplicitUseAttribute
  #pragma pack(pop)
  static check_size<sizeof(MeansImplicitUseAttribute), 20 + sizeof(::VivoxUnity::Properties::ImplicitUseTargetFlags)> __VivoxUnity_Properties_MeansImplicitUseAttributeSizeCheck;
  static_assert(sizeof(MeansImplicitUseAttribute) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::Properties::MeansImplicitUseAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::Properties::MeansImplicitUseAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::Properties::MeansImplicitUseAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::Properties::MeansImplicitUseAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::Properties::MeansImplicitUseAttribute::get_UseKindFlags
// Il2CppName: get_UseKindFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::Properties::ImplicitUseKindFlags (VivoxUnity::Properties::MeansImplicitUseAttribute::*)()>(&VivoxUnity::Properties::MeansImplicitUseAttribute::get_UseKindFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Properties::MeansImplicitUseAttribute*), "get_UseKindFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Properties::MeansImplicitUseAttribute::set_UseKindFlags
// Il2CppName: set_UseKindFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Properties::MeansImplicitUseAttribute::*)(::VivoxUnity::Properties::ImplicitUseKindFlags)>(&VivoxUnity::Properties::MeansImplicitUseAttribute::set_UseKindFlags)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity.Properties", "ImplicitUseKindFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Properties::MeansImplicitUseAttribute*), "set_UseKindFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Properties::MeansImplicitUseAttribute::get_TargetFlags
// Il2CppName: get_TargetFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::Properties::ImplicitUseTargetFlags (VivoxUnity::Properties::MeansImplicitUseAttribute::*)()>(&VivoxUnity::Properties::MeansImplicitUseAttribute::get_TargetFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Properties::MeansImplicitUseAttribute*), "get_TargetFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Properties::MeansImplicitUseAttribute::set_TargetFlags
// Il2CppName: set_TargetFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Properties::MeansImplicitUseAttribute::*)(::VivoxUnity::Properties::ImplicitUseTargetFlags)>(&VivoxUnity::Properties::MeansImplicitUseAttribute::set_TargetFlags)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity.Properties", "ImplicitUseTargetFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Properties::MeansImplicitUseAttribute*), "set_TargetFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
