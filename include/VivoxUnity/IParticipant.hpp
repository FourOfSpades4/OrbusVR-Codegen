// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VivoxUnity.IKeyedItemNotifyPropertyChanged`1
#include "VivoxUnity/IKeyedItemNotifyPropertyChanged_1.hpp"
// Including type: VivoxUnity.IParticipantProperties
#include "VivoxUnity/IParticipantProperties.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: IChannelSession
  class IChannelSession;
  // Forward declaring type: AccountId
  class AccountId;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: IParticipant
  class IParticipant;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::IParticipant);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::IParticipant*, "VivoxUnity", "IParticipant");
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.IParticipant
  // [TokenAttribute] Offset: FFFFFFFF
  class IParticipant/*, public ::VivoxUnity::IKeyedItemNotifyPropertyChanged_1<::StringW>, public ::VivoxUnity::IParticipantProperties*/ {
    public:
    // Creating interface conversion operator: operator ::VivoxUnity::IKeyedItemNotifyPropertyChanged_1<::StringW>
    operator ::VivoxUnity::IKeyedItemNotifyPropertyChanged_1<::StringW>() noexcept {
      return *reinterpret_cast<::VivoxUnity::IKeyedItemNotifyPropertyChanged_1<::StringW>*>(this);
    }
    // Creating interface conversion operator: operator ::VivoxUnity::IParticipantProperties
    operator ::VivoxUnity::IParticipantProperties() noexcept {
      return *reinterpret_cast<::VivoxUnity::IParticipantProperties*>(this);
    }
    // public System.String get_ParticipantId()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_ParticipantId();
    // public VivoxUnity.IChannelSession get_ParentChannelSession()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::VivoxUnity::IChannelSession* get_ParentChannelSession();
    // public VivoxUnity.AccountId get_Account()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::VivoxUnity::AccountId* get_Account();
    // public System.IAsyncResult SetIsMuteForAll(System.String accountHandle, System.Boolean setMuted, System.String accessToken, System.AsyncCallback callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::IAsyncResult* SetIsMuteForAll(::StringW accountHandle, bool setMuted, ::StringW accessToken, ::System::AsyncCallback* callback);
  }; // VivoxUnity.IParticipant
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::IParticipant::get_ParticipantId
// Il2CppName: get_ParticipantId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::IParticipant::*)()>(&VivoxUnity::IParticipant::get_ParticipantId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::IParticipant*), "get_ParticipantId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::IParticipant::get_ParentChannelSession
// Il2CppName: get_ParentChannelSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IChannelSession* (VivoxUnity::IParticipant::*)()>(&VivoxUnity::IParticipant::get_ParentChannelSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::IParticipant*), "get_ParentChannelSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::IParticipant::get_Account
// Il2CppName: get_Account
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::AccountId* (VivoxUnity::IParticipant::*)()>(&VivoxUnity::IParticipant::get_Account)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::IParticipant*), "get_Account", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::IParticipant::SetIsMuteForAll
// Il2CppName: SetIsMuteForAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::IParticipant::*)(::StringW, bool, ::StringW, ::System::AsyncCallback*)>(&VivoxUnity::IParticipant::SetIsMuteForAll)> {
  static const MethodInfo* get() {
    static auto* accountHandle = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* setMuted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* accessToken = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::IParticipant*), "SetIsMuteForAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{accountHandle, setMuted, accessToken, callback});
  }
};
