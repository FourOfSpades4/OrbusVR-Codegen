// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: AsyncResult`1<T>
  template<typename T>
  class AsyncResult_1;
  // Forward declaring type: VivoxDebug
  class VivoxDebug;
  // Forward declaring type: VivoxConfig
  class VivoxConfig;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: vx_resp_base_t
  class vx_resp_base_t;
  // Forward declaring type: vx_sdk_config_t
  class vx_sdk_config_t;
  // Forward declaring type: vx_req_base_t
  class vx_req_base_t;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: TimeSpan
  struct TimeSpan;
}
// Completed forward declares
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: VxClient
  class VxClient;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::VxClient);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::VxClient*, "VivoxUnity", "VxClient");
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.VxClient
  // [TokenAttribute] Offset: FFFFFFFF
  class VxClient : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::VivoxUnity::VxClient::HandleEventMessage
    class HandleEventMessage;
    public:
    // private readonly System.Collections.Generic.Dictionary`2<System.String,VivoxUnity.AsyncResult`1<vx_resp_base_t>> _pendingRequests
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::StringW, ::VivoxUnity::AsyncResult_1<::GlobalNamespace::vx_resp_base_t*>*>* pendingRequests;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::VivoxUnity::AsyncResult_1<::GlobalNamespace::vx_resp_base_t*>*>*) == 0x8);
    // private System.Int64 _nextRequestId
    // Size: 0x8
    // Offset: 0x18
    int64_t nextRequestId;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int32 _startCount
    // Size: 0x4
    // Offset: 0x20
    int startCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: startCount and: vivoxDebug
    char __padding2[0x4] = {};
    // public VivoxUnity.VivoxDebug vivoxDebug
    // Size: 0x8
    // Offset: 0x28
    ::VivoxUnity::VivoxDebug* vivoxDebug;
    // Field size check
    static_assert(sizeof(::VivoxUnity::VivoxDebug*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABDC98
    // private VivoxUnity.VxClient/HandleEventMessage EventMessageReceived
    // Size: 0x8
    // Offset: 0x30
    ::VivoxUnity::VxClient::HandleEventMessage* EventMessageReceived;
    // Field size check
    static_assert(sizeof(::VivoxUnity::VxClient::HandleEventMessage*) == 0x8);
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0x38
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private VivoxUnity.VxClient _instance
    static ::VivoxUnity::VxClient* _get__instance();
    // Set static field: static private VivoxUnity.VxClient _instance
    static void _set__instance(::VivoxUnity::VxClient* value);
    // static field const value: static public System.String appId
    static constexpr const char* appId = "UNI";
    // Get static field: static public System.String appId
    static ::StringW _get_appId();
    // Set static field: static public System.String appId
    static void _set_appId(::StringW value);
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,VivoxUnity.AsyncResult`1<vx_resp_base_t>> _pendingRequests
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::VivoxUnity::AsyncResult_1<::GlobalNamespace::vx_resp_base_t*>*>*& dyn__pendingRequests();
    // Get instance field reference: private System.Int64 _nextRequestId
    [[deprecated("Use field access instead!")]] int64_t& dyn__nextRequestId();
    // Get instance field reference: private System.Int32 _startCount
    [[deprecated("Use field access instead!")]] int& dyn__startCount();
    // Get instance field reference: public VivoxUnity.VivoxDebug vivoxDebug
    [[deprecated("Use field access instead!")]] ::VivoxUnity::VivoxDebug*& dyn_vivoxDebug();
    // Get instance field reference: private VivoxUnity.VxClient/HandleEventMessage EventMessageReceived
    [[deprecated("Use field access instead!")]] ::VivoxUnity::VxClient::HandleEventMessage*& dyn_EventMessageReceived();
    // Get instance field reference: private System.Boolean disposed
    [[deprecated("Use field access instead!")]] bool& dyn_disposed();
    // private System.Void .ctor()
    // Offset: 0x12DB368
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VxClient* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VxClient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VxClient*, creationType>()));
    }
    // static public VivoxUnity.VxClient get_Instance()
    // Offset: 0x12D0F24
    static ::VivoxUnity::VxClient* get_Instance();
    // public System.Boolean get_Started()
    // Offset: 0x12DB3DC
    bool get_Started();
    // public System.Void add_EventMessageReceived(VivoxUnity.VxClient/HandleEventMessage value)
    // Offset: 0x12D6F94
    void add_EventMessageReceived(::VivoxUnity::VxClient::HandleEventMessage* value);
    // public System.Void remove_EventMessageReceived(VivoxUnity.VxClient/HandleEventMessage value)
    // Offset: 0x12D83E0
    void remove_EventMessageReceived(::VivoxUnity::VxClient::HandleEventMessage* value);
    // public System.Void Start(VivoxUnity.VivoxConfig config)
    // Offset: 0x12DB3EC
    void Start(::VivoxUnity::VivoxConfig* config);
    // public System.Void Start(vx_sdk_config_t config)
    // Offset: 0x12DB768
    void Start(::GlobalNamespace::vx_sdk_config_t* config);
    // private System.Void InternalStart(vx_sdk_config_t config)
    // Offset: 0x12DB468
    void InternalStart(::GlobalNamespace::vx_sdk_config_t* config);
    // private System.Void InstanceOnMainLoopRun(ref System.Boolean didWork)
    // Offset: 0x12DBB18
    void InstanceOnMainLoopRun(ByRef<bool> didWork);
    // public System.Void Stop()
    // Offset: 0x12DC4C0
    void Stop();
    // public System.Void Cleanup()
    // Offset: 0x12DC5A8
    void Cleanup();
    // public System.IAsyncResult BeginIssueRequest(vx_req_base_t request, System.AsyncCallback callback)
    // Offset: 0x12DC700
    ::System::IAsyncResult* BeginIssueRequest(::GlobalNamespace::vx_req_base_t* request, ::System::AsyncCallback* callback);
    // public vx_resp_base_t EndIssueRequest(System.IAsyncResult result)
    // Offset: 0x12D0FA0
    ::GlobalNamespace::vx_resp_base_t* EndIssueRequest(::System::IAsyncResult* result);
    // public System.Void Dispose()
    // Offset: 0x12DCA28
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x12DCAA4
    void Dispose(bool disposing);
    // static public System.String GetLoginToken(System.String issuer, System.TimeSpan expiration, System.String userUri, System.String key)
    // Offset: 0x12DCB9C
    static ::StringW GetLoginToken(::StringW issuer, ::System::TimeSpan expiration, ::StringW userUri, ::StringW key);
    // static public System.String GetJoinToken(System.String issuer, System.TimeSpan expiration, System.String userUri, System.String conferenceUri, System.String key)
    // Offset: 0x12DCC2C
    static ::StringW GetJoinToken(::StringW issuer, ::System::TimeSpan expiration, ::StringW userUri, ::StringW conferenceUri, ::StringW key);
    // static public System.String GetMuteForAllToken(System.String issuer, System.TimeSpan expiration, System.String subject, System.String fromUserUri, System.String conferenceUri, System.String key)
    // Offset: 0x12DCCC4
    static ::StringW GetMuteForAllToken(::StringW issuer, ::System::TimeSpan expiration, ::StringW subject, ::StringW fromUserUri, ::StringW conferenceUri, ::StringW key);
    // static public System.String GetTranscriptionToken(System.String issuer, System.TimeSpan expiration, System.String userUri, System.String conferenceUri, System.String key)
    // Offset: 0x12DCD6C
    static ::StringW GetTranscriptionToken(::StringW issuer, ::System::TimeSpan expiration, ::StringW userUri, ::StringW conferenceUri, ::StringW key);
    // static public System.String GetRandomUserId(System.String prefix)
    // Offset: 0x12DCE04
    static ::StringW GetRandomUserId(::StringW prefix);
    // static public System.String GetRandomUserIdEx(System.String prefix, System.String issuer)
    // Offset: 0x12DCE6C
    static ::StringW GetRandomUserIdEx(::StringW prefix, ::StringW issuer);
    // static public System.String GetRandomChannelUri(System.String prefix, System.String realm)
    // Offset: 0x12DCEE4
    static ::StringW GetRandomChannelUri(::StringW prefix, ::StringW realm);
    // static public System.String GetVersion()
    // Offset: 0x12DCF5C
    static ::StringW GetVersion();
    // protected override System.Void Finalize()
    // Offset: 0x12DCB1C
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // VivoxUnity.VxClient
  #pragma pack(pop)
  static check_size<sizeof(VxClient), 56 + sizeof(bool)> __VivoxUnity_VxClientSizeCheck;
  static_assert(sizeof(VxClient) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::VxClient::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::VxClient::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::VxClient* (*)()>(&VivoxUnity::VxClient::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::get_Started
// Il2CppName: get_Started
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::VxClient::*)()>(&VivoxUnity::VxClient::get_Started)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "get_Started", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::add_EventMessageReceived
// Il2CppName: add_EventMessageReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::VxClient::*)(::VivoxUnity::VxClient::HandleEventMessage*)>(&VivoxUnity::VxClient::add_EventMessageReceived)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity", "VxClient/HandleEventMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "add_EventMessageReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::remove_EventMessageReceived
// Il2CppName: remove_EventMessageReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::VxClient::*)(::VivoxUnity::VxClient::HandleEventMessage*)>(&VivoxUnity::VxClient::remove_EventMessageReceived)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity", "VxClient/HandleEventMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "remove_EventMessageReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::VxClient::*)(::VivoxUnity::VivoxConfig*)>(&VivoxUnity::VxClient::Start)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("VivoxUnity", "VivoxConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::VxClient::*)(::GlobalNamespace::vx_sdk_config_t*)>(&VivoxUnity::VxClient::Start)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("", "vx_sdk_config_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::InternalStart
// Il2CppName: InternalStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::VxClient::*)(::GlobalNamespace::vx_sdk_config_t*)>(&VivoxUnity::VxClient::InternalStart)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("", "vx_sdk_config_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "InternalStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::InstanceOnMainLoopRun
// Il2CppName: InstanceOnMainLoopRun
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::VxClient::*)(ByRef<bool>)>(&VivoxUnity::VxClient::InstanceOnMainLoopRun)> {
  static const MethodInfo* get() {
    static auto* didWork = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "InstanceOnMainLoopRun", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{didWork});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::VxClient::*)()>(&VivoxUnity::VxClient::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::VxClient::*)()>(&VivoxUnity::VxClient::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::BeginIssueRequest
// Il2CppName: BeginIssueRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::VxClient::*)(::GlobalNamespace::vx_req_base_t*, ::System::AsyncCallback*)>(&VivoxUnity::VxClient::BeginIssueRequest)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("", "vx_req_base_t")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "BeginIssueRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::EndIssueRequest
// Il2CppName: EndIssueRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::vx_resp_base_t* (VivoxUnity::VxClient::*)(::System::IAsyncResult*)>(&VivoxUnity::VxClient::EndIssueRequest)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "EndIssueRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::VxClient::*)()>(&VivoxUnity::VxClient::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::VxClient::*)(bool)>(&VivoxUnity::VxClient::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::GetLoginToken
// Il2CppName: GetLoginToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::System::TimeSpan, ::StringW, ::StringW)>(&VivoxUnity::VxClient::GetLoginToken)> {
  static const MethodInfo* get() {
    static auto* issuer = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* expiration = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* userUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "GetLoginToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{issuer, expiration, userUri, key});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::GetJoinToken
// Il2CppName: GetJoinToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::System::TimeSpan, ::StringW, ::StringW, ::StringW)>(&VivoxUnity::VxClient::GetJoinToken)> {
  static const MethodInfo* get() {
    static auto* issuer = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* expiration = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* userUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* conferenceUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "GetJoinToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{issuer, expiration, userUri, conferenceUri, key});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::GetMuteForAllToken
// Il2CppName: GetMuteForAllToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::System::TimeSpan, ::StringW, ::StringW, ::StringW, ::StringW)>(&VivoxUnity::VxClient::GetMuteForAllToken)> {
  static const MethodInfo* get() {
    static auto* issuer = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* expiration = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* subject = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fromUserUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* conferenceUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "GetMuteForAllToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{issuer, expiration, subject, fromUserUri, conferenceUri, key});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::GetTranscriptionToken
// Il2CppName: GetTranscriptionToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::System::TimeSpan, ::StringW, ::StringW, ::StringW)>(&VivoxUnity::VxClient::GetTranscriptionToken)> {
  static const MethodInfo* get() {
    static auto* issuer = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* expiration = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    static auto* userUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* conferenceUri = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "GetTranscriptionToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{issuer, expiration, userUri, conferenceUri, key});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::GetRandomUserId
// Il2CppName: GetRandomUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&VivoxUnity::VxClient::GetRandomUserId)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "GetRandomUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::GetRandomUserIdEx
// Il2CppName: GetRandomUserIdEx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&VivoxUnity::VxClient::GetRandomUserIdEx)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* issuer = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "GetRandomUserIdEx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, issuer});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::GetRandomChannelUri
// Il2CppName: GetRandomChannelUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&VivoxUnity::VxClient::GetRandomChannelUri)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* realm = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "GetRandomChannelUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, realm});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::GetVersion
// Il2CppName: GetVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&VivoxUnity::VxClient::GetVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "GetVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VxClient::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::VxClient::*)()>(&VivoxUnity::VxClient::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VxClient*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
