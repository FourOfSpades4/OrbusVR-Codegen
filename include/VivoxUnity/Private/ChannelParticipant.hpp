// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VivoxUnity.IParticipant
#include "VivoxUnity/IParticipant.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VivoxUnity::Private
namespace VivoxUnity::Private {
  // Forward declaring type: ChannelSession
  class ChannelSession;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: PropertyChangedEventHandler
  class PropertyChangedEventHandler;
}
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: AccountId
  class AccountId;
  // Forward declaring type: IChannelSession
  class IChannelSession;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: vx_evt_participant_added_t
  class vx_evt_participant_added_t;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
// Type namespace: VivoxUnity.Private
namespace VivoxUnity::Private {
  // Forward declaring type: ChannelParticipant
  class ChannelParticipant;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::Private::ChannelParticipant);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::Private::ChannelParticipant*, "VivoxUnity.Private", "ChannelParticipant");
// Type namespace: VivoxUnity.Private
namespace VivoxUnity::Private {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.Private.ChannelParticipant
  // [TokenAttribute] Offset: FFFFFFFF
  class ChannelParticipant : public ::Il2CppObject/*, public ::VivoxUnity::IParticipant*/ {
    public:
    // Nested type: ::VivoxUnity::Private::ChannelParticipant::$$c__DisplayClass24_0
    class $$c__DisplayClass24_0;
    // Nested type: ::VivoxUnity::Private::ChannelParticipant::$$c__DisplayClass39_0
    class $$c__DisplayClass39_0;
    // Nested type: ::VivoxUnity::Private::ChannelParticipant::$$c__DisplayClass39_1
    class $$c__DisplayClass39_1;
    // Nested type: ::VivoxUnity::Private::ChannelParticipant::$$c__DisplayClass42_0
    class $$c__DisplayClass42_0;
    public:
    // private readonly VivoxUnity.Private.ChannelSession _parent
    // Size: 0x8
    // Offset: 0x10
    ::VivoxUnity::Private::ChannelSession* parent;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Private::ChannelSession*) == 0x8);
    // private System.Boolean _speechDetected
    // Size: 0x1
    // Offset: 0x18
    bool speechDetected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isTyping
    // Size: 0x1
    // Offset: 0x19
    bool isTyping;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _textActive
    // Size: 0x1
    // Offset: 0x1A
    bool textActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _audioActive
    // Size: 0x1
    // Offset: 0x1B
    bool audioActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: audioActive and: audioEnergy
    char __padding4[0x4] = {};
    // private System.Double _audioEnergy
    // Size: 0x8
    // Offset: 0x20
    double audioEnergy;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Boolean _isMutedForEveryone
    // Size: 0x1
    // Offset: 0x28
    bool isMutedForEveryone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _localMute
    // Size: 0x1
    // Offset: 0x29
    bool localMute;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: localMute and: localVolumeAdjustment
    char __padding7[0x2] = {};
    // private System.Int32 _localVolumeAdjustment
    // Size: 0x4
    // Offset: 0x2C
    int localVolumeAdjustment;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xABDFD8
    // private System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    // Size: 0x8
    // Offset: 0x30
    ::System::ComponentModel::PropertyChangedEventHandler* PropertyChanged;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::PropertyChangedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABDFE8
    // private readonly System.Boolean <IsSelf>k__BackingField
    // Size: 0x1
    // Offset: 0x38
    bool IsSelf;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsSelf and: Account
    char __padding10[0x7] = {};
    // [CompilerGeneratedAttribute] Offset: 0xABDFF8
    // private readonly VivoxUnity.AccountId <Account>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::VivoxUnity::AccountId* Account;
    // Field size check
    static_assert(sizeof(::VivoxUnity::AccountId*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE008
    // private readonly System.String <Key>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::StringW Key;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::VivoxUnity::IParticipant
    operator ::VivoxUnity::IParticipant() noexcept {
      return *reinterpret_cast<::VivoxUnity::IParticipant*>(this);
    }
    // Get instance field reference: private readonly VivoxUnity.Private.ChannelSession _parent
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Private::ChannelSession*& dyn__parent();
    // Get instance field reference: private System.Boolean _speechDetected
    [[deprecated("Use field access instead!")]] bool& dyn__speechDetected();
    // Get instance field reference: private System.Boolean _isTyping
    [[deprecated("Use field access instead!")]] bool& dyn__isTyping();
    // Get instance field reference: private System.Boolean _textActive
    [[deprecated("Use field access instead!")]] bool& dyn__textActive();
    // Get instance field reference: private System.Boolean _audioActive
    [[deprecated("Use field access instead!")]] bool& dyn__audioActive();
    // Get instance field reference: private System.Double _audioEnergy
    [[deprecated("Use field access instead!")]] double& dyn__audioEnergy();
    // Get instance field reference: private System.Boolean _isMutedForEveryone
    [[deprecated("Use field access instead!")]] bool& dyn__isMutedForEveryone();
    // Get instance field reference: private System.Boolean _localMute
    [[deprecated("Use field access instead!")]] bool& dyn__localMute();
    // Get instance field reference: private System.Int32 _localVolumeAdjustment
    [[deprecated("Use field access instead!")]] int& dyn__localVolumeAdjustment();
    // Get instance field reference: private System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::PropertyChangedEventHandler*& dyn_PropertyChanged();
    // Get instance field reference: private readonly System.Boolean <IsSelf>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsSelf$k__BackingField();
    // Get instance field reference: private readonly VivoxUnity.AccountId <Account>k__BackingField
    [[deprecated("Use field access instead!")]] ::VivoxUnity::AccountId*& dyn_$Account$k__BackingField();
    // Get instance field reference: private readonly System.String <Key>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Key$k__BackingField();
    // System.Boolean get__internalMute()
    // Offset: 0x14BE42C
    bool get__internalMute();
    // System.Void set__internalMute(System.Boolean value)
    // Offset: 0x14BE434
    void set__internalMute(bool value);
    // System.Int32 get__internalVolumeAdjustment()
    // Offset: 0x14BE4D8
    int get__internalVolumeAdjustment();
    // System.Void set__internalVolumeAdjustment(System.Int32 value)
    // Offset: 0x14BE4E0
    void set__internalVolumeAdjustment(int value);
    // public System.Void .ctor(VivoxUnity.Private.ChannelSession parent, vx_evt_participant_added_t theEvent)
    // Offset: 0x14BE584
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChannelParticipant* New_ctor(::VivoxUnity::Private::ChannelSession* parent, ::GlobalNamespace::vx_evt_participant_added_t* theEvent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Private::ChannelParticipant::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChannelParticipant*, creationType>(parent, theEvent)));
    }
    // public System.Void add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value)
    // Offset: 0x14BE6B4
    void add_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value);
    // public System.Void remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value)
    // Offset: 0x14BE7A0
    void remove_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value);
    // public VivoxUnity.IChannelSession get_ParentChannelSession()
    // Offset: 0x14BE88C
    ::VivoxUnity::IChannelSession* get_ParentChannelSession();
    // public System.Boolean get_IsSelf()
    // Offset: 0x14BE894
    bool get_IsSelf();
    // public System.IAsyncResult SetIsMuteForAll(System.String accountHandle, System.Boolean setMuted, System.String accessToken, System.AsyncCallback callback)
    // Offset: 0x14BE89C
    ::System::IAsyncResult* SetIsMuteForAll(::StringW accountHandle, bool setMuted, ::StringW accessToken, ::System::AsyncCallback* callback);
    // public VivoxUnity.AccountId get_Account()
    // Offset: 0x14BEB50
    ::VivoxUnity::AccountId* get_Account();
    // public System.String get_Key()
    // Offset: 0x14BEB58
    ::StringW get_Key();
    // public System.Boolean get_SpeechDetected()
    // Offset: 0x14BEB60
    bool get_SpeechDetected();
    // public System.Void set_SpeechDetected(System.Boolean value)
    // Offset: 0x14BEB68
    void set_SpeechDetected(bool value);
    // public System.Boolean get_IsMutedForAll()
    // Offset: 0x14BEC20
    bool get_IsMutedForAll();
    // public System.Void set_IsMutedForAll(System.Boolean value)
    // Offset: 0x14BEC28
    void set_IsMutedForAll(bool value);
    // public System.Boolean get_LocalMute()
    // Offset: 0x14BECE0
    bool get_LocalMute();
    // public System.Void set_LocalMute(System.Boolean value)
    // Offset: 0x14BECE8
    void set_LocalMute(bool value);
    // public System.Int32 get_LocalVolumeAdjustment()
    // Offset: 0x14BEF4C
    int get_LocalVolumeAdjustment();
    // public System.Void set_LocalVolumeAdjustment(System.Int32 value)
    // Offset: 0x14BEF54
    void set_LocalVolumeAdjustment(int value);
    // public System.Boolean get_IsTyping()
    // Offset: 0x14BF164
    bool get_IsTyping();
    // public System.Void set_IsTyping(System.Boolean value)
    // Offset: 0x14BF16C
    void set_IsTyping(bool value);
    // public System.Boolean get_InText()
    // Offset: 0x14BF224
    bool get_InText();
    // public System.Void set_InText(System.Boolean value)
    // Offset: 0x14BF22C
    void set_InText(bool value);
    // public System.Boolean get_InAudio()
    // Offset: 0x14BF2E4
    bool get_InAudio();
    // public System.Void set_InAudio(System.Boolean value)
    // Offset: 0x14BF2EC
    void set_InAudio(bool value);
    // public System.Double get_AudioEnergy()
    // Offset: 0x14BF3A4
    double get_AudioEnergy();
    // public System.Void set_AudioEnergy(System.Double value)
    // Offset: 0x14BF3AC
    void set_AudioEnergy(double value);
    // public System.String get_ParticipantId()
    // Offset: 0x14BF464
    ::StringW get_ParticipantId();
  }; // VivoxUnity.Private.ChannelParticipant
  #pragma pack(pop)
  static check_size<sizeof(ChannelParticipant), 72 + sizeof(::StringW)> __VivoxUnity_Private_ChannelParticipantSizeCheck;
  static_assert(sizeof(ChannelParticipant) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::get__internalMute
// Il2CppName: get__internalMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::ChannelParticipant::*)()>(&VivoxUnity::Private::ChannelParticipant::get__internalMute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "get__internalMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::set__internalMute
// Il2CppName: set__internalMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelParticipant::*)(bool)>(&VivoxUnity::Private::ChannelParticipant::set__internalMute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "set__internalMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::get__internalVolumeAdjustment
// Il2CppName: get__internalVolumeAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VivoxUnity::Private::ChannelParticipant::*)()>(&VivoxUnity::Private::ChannelParticipant::get__internalVolumeAdjustment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "get__internalVolumeAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::set__internalVolumeAdjustment
// Il2CppName: set__internalVolumeAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelParticipant::*)(int)>(&VivoxUnity::Private::ChannelParticipant::set__internalVolumeAdjustment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "set__internalVolumeAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::add_PropertyChanged
// Il2CppName: add_PropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelParticipant::*)(::System::ComponentModel::PropertyChangedEventHandler*)>(&VivoxUnity::Private::ChannelParticipant::add_PropertyChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "add_PropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::remove_PropertyChanged
// Il2CppName: remove_PropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelParticipant::*)(::System::ComponentModel::PropertyChangedEventHandler*)>(&VivoxUnity::Private::ChannelParticipant::remove_PropertyChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "remove_PropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::get_ParentChannelSession
// Il2CppName: get_ParentChannelSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IChannelSession* (VivoxUnity::Private::ChannelParticipant::*)()>(&VivoxUnity::Private::ChannelParticipant::get_ParentChannelSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "get_ParentChannelSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::get_IsSelf
// Il2CppName: get_IsSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::ChannelParticipant::*)()>(&VivoxUnity::Private::ChannelParticipant::get_IsSelf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "get_IsSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::SetIsMuteForAll
// Il2CppName: SetIsMuteForAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::ChannelParticipant::*)(::StringW, bool, ::StringW, ::System::AsyncCallback*)>(&VivoxUnity::Private::ChannelParticipant::SetIsMuteForAll)> {
  static const MethodInfo* get() {
    static auto* accountHandle = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* setMuted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* accessToken = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "SetIsMuteForAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{accountHandle, setMuted, accessToken, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::get_Account
// Il2CppName: get_Account
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::AccountId* (VivoxUnity::Private::ChannelParticipant::*)()>(&VivoxUnity::Private::ChannelParticipant::get_Account)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "get_Account", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::Private::ChannelParticipant::*)()>(&VivoxUnity::Private::ChannelParticipant::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::get_SpeechDetected
// Il2CppName: get_SpeechDetected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::ChannelParticipant::*)()>(&VivoxUnity::Private::ChannelParticipant::get_SpeechDetected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "get_SpeechDetected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::set_SpeechDetected
// Il2CppName: set_SpeechDetected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelParticipant::*)(bool)>(&VivoxUnity::Private::ChannelParticipant::set_SpeechDetected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "set_SpeechDetected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::get_IsMutedForAll
// Il2CppName: get_IsMutedForAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::ChannelParticipant::*)()>(&VivoxUnity::Private::ChannelParticipant::get_IsMutedForAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "get_IsMutedForAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::set_IsMutedForAll
// Il2CppName: set_IsMutedForAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelParticipant::*)(bool)>(&VivoxUnity::Private::ChannelParticipant::set_IsMutedForAll)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "set_IsMutedForAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::get_LocalMute
// Il2CppName: get_LocalMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::ChannelParticipant::*)()>(&VivoxUnity::Private::ChannelParticipant::get_LocalMute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "get_LocalMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::set_LocalMute
// Il2CppName: set_LocalMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelParticipant::*)(bool)>(&VivoxUnity::Private::ChannelParticipant::set_LocalMute)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "set_LocalMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::get_LocalVolumeAdjustment
// Il2CppName: get_LocalVolumeAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VivoxUnity::Private::ChannelParticipant::*)()>(&VivoxUnity::Private::ChannelParticipant::get_LocalVolumeAdjustment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "get_LocalVolumeAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::set_LocalVolumeAdjustment
// Il2CppName: set_LocalVolumeAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelParticipant::*)(int)>(&VivoxUnity::Private::ChannelParticipant::set_LocalVolumeAdjustment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "set_LocalVolumeAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::get_IsTyping
// Il2CppName: get_IsTyping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::ChannelParticipant::*)()>(&VivoxUnity::Private::ChannelParticipant::get_IsTyping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "get_IsTyping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::set_IsTyping
// Il2CppName: set_IsTyping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelParticipant::*)(bool)>(&VivoxUnity::Private::ChannelParticipant::set_IsTyping)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "set_IsTyping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::get_InText
// Il2CppName: get_InText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::ChannelParticipant::*)()>(&VivoxUnity::Private::ChannelParticipant::get_InText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "get_InText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::set_InText
// Il2CppName: set_InText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelParticipant::*)(bool)>(&VivoxUnity::Private::ChannelParticipant::set_InText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "set_InText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::get_InAudio
// Il2CppName: get_InAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::ChannelParticipant::*)()>(&VivoxUnity::Private::ChannelParticipant::get_InAudio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "get_InAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::set_InAudio
// Il2CppName: set_InAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelParticipant::*)(bool)>(&VivoxUnity::Private::ChannelParticipant::set_InAudio)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "set_InAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::get_AudioEnergy
// Il2CppName: get_AudioEnergy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (VivoxUnity::Private::ChannelParticipant::*)()>(&VivoxUnity::Private::ChannelParticipant::get_AudioEnergy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "get_AudioEnergy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::set_AudioEnergy
// Il2CppName: set_AudioEnergy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelParticipant::*)(double)>(&VivoxUnity::Private::ChannelParticipant::set_AudioEnergy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "set_AudioEnergy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelParticipant::get_ParticipantId
// Il2CppName: get_ParticipantId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::Private::ChannelParticipant::*)()>(&VivoxUnity::Private::ChannelParticipant::get_ParticipantId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelParticipant*), "get_ParticipantId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
