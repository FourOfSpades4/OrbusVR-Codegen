// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VivoxUnity.ISessionArchiveMessage
#include "VivoxUnity/ISessionArchiveMessage.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: PropertyChangedEventHandler
  class PropertyChangedEventHandler;
}
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: IChannelSession
  class IChannelSession;
  // Forward declaring type: AccountId
  class AccountId;
}
// Completed forward declares
// Type namespace: VivoxUnity.Private
namespace VivoxUnity::Private {
  // Forward declaring type: SessionArchiveMessage
  class SessionArchiveMessage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::Private::SessionArchiveMessage);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::Private::SessionArchiveMessage*, "VivoxUnity.Private", "SessionArchiveMessage");
// Type namespace: VivoxUnity.Private
namespace VivoxUnity::Private {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.Private.SessionArchiveMessage
  // [TokenAttribute] Offset: FFFFFFFF
  class SessionArchiveMessage : public ::Il2CppObject/*, public ::VivoxUnity::ISessionArchiveMessage*/ {
    public:
    public:
    // private System.Exception _exception
    // Size: 0x8
    // Offset: 0x10
    ::System::Exception* exception;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE238
    // private System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    // Size: 0x8
    // Offset: 0x18
    ::System::ComponentModel::PropertyChangedEventHandler* PropertyChanged;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::PropertyChangedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE248
    // private System.String <Key>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW Key;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE258
    // private System.DateTime <ReceivedTime>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::System::DateTime ReceivedTime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE268
    // private System.String <Message>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::StringW Message;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE278
    // private System.String <Language>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::StringW Language;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE288
    // private VivoxUnity.IChannelSession <ChannelSession>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::VivoxUnity::IChannelSession* ChannelSession;
    // Field size check
    static_assert(sizeof(::VivoxUnity::IChannelSession*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE298
    // private VivoxUnity.AccountId <Sender>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::VivoxUnity::AccountId* Sender;
    // Field size check
    static_assert(sizeof(::VivoxUnity::AccountId*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE2A8
    // private System.Boolean <FromSelf>k__BackingField
    // Size: 0x1
    // Offset: 0x50
    bool FromSelf;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: FromSelf and: QueryId
    char __padding8[0x7] = {};
    // [CompilerGeneratedAttribute] Offset: 0xABE2B8
    // private System.String <QueryId>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::StringW QueryId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE2C8
    // private System.String <MessageId>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::StringW MessageId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::VivoxUnity::ISessionArchiveMessage
    operator ::VivoxUnity::ISessionArchiveMessage() noexcept {
      return *reinterpret_cast<::VivoxUnity::ISessionArchiveMessage*>(this);
    }
    // Get instance field reference: private System.Exception _exception
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn__exception();
    // Get instance field reference: private System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::PropertyChangedEventHandler*& dyn_PropertyChanged();
    // Get instance field reference: private System.String <Key>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Key$k__BackingField();
    // Get instance field reference: private System.DateTime <ReceivedTime>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_$ReceivedTime$k__BackingField();
    // Get instance field reference: private System.String <Message>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Message$k__BackingField();
    // Get instance field reference: private System.String <Language>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Language$k__BackingField();
    // Get instance field reference: private VivoxUnity.IChannelSession <ChannelSession>k__BackingField
    [[deprecated("Use field access instead!")]] ::VivoxUnity::IChannelSession*& dyn_$ChannelSession$k__BackingField();
    // Get instance field reference: private VivoxUnity.AccountId <Sender>k__BackingField
    [[deprecated("Use field access instead!")]] ::VivoxUnity::AccountId*& dyn_$Sender$k__BackingField();
    // Get instance field reference: private System.Boolean <FromSelf>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$FromSelf$k__BackingField();
    // Get instance field reference: private System.String <QueryId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$QueryId$k__BackingField();
    // Get instance field reference: private System.String <MessageId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$MessageId$k__BackingField();
    // public System.Void add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value)
    // Offset: 0x12D4E10
    void add_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value);
    // public System.Void remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value)
    // Offset: 0x12D4EFC
    void remove_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value);
    // public System.Exception get_Exception()
    // Offset: 0x12D4FE8
    ::System::Exception* get_Exception();
    // public System.Void set_Exception(System.Exception value)
    // Offset: 0x12D4FF0
    void set_Exception(::System::Exception* value);
    // public System.String get_Key()
    // Offset: 0x12D509C
    ::StringW get_Key();
    // public System.Void set_Key(System.String value)
    // Offset: 0x12D50A4
    void set_Key(::StringW value);
    // public System.DateTime get_ReceivedTime()
    // Offset: 0x12D50AC
    ::System::DateTime get_ReceivedTime();
    // public System.Void set_ReceivedTime(System.DateTime value)
    // Offset: 0x12D50B4
    void set_ReceivedTime(::System::DateTime value);
    // public System.String get_Message()
    // Offset: 0x12D50BC
    ::StringW get_Message();
    // public System.Void set_Message(System.String value)
    // Offset: 0x12D50C4
    void set_Message(::StringW value);
    // public System.String get_Language()
    // Offset: 0x12D50CC
    ::StringW get_Language();
    // public System.Void set_Language(System.String value)
    // Offset: 0x12D50D4
    void set_Language(::StringW value);
    // public VivoxUnity.IChannelSession get_ChannelSession()
    // Offset: 0x12D50DC
    ::VivoxUnity::IChannelSession* get_ChannelSession();
    // public System.Void set_ChannelSession(VivoxUnity.IChannelSession value)
    // Offset: 0x12D50E4
    void set_ChannelSession(::VivoxUnity::IChannelSession* value);
    // public VivoxUnity.AccountId get_Sender()
    // Offset: 0x12D50EC
    ::VivoxUnity::AccountId* get_Sender();
    // public System.Void set_Sender(VivoxUnity.AccountId value)
    // Offset: 0x12D50F4
    void set_Sender(::VivoxUnity::AccountId* value);
    // public System.Boolean get_FromSelf()
    // Offset: 0x12D50FC
    bool get_FromSelf();
    // public System.Void set_FromSelf(System.Boolean value)
    // Offset: 0x12D5104
    void set_FromSelf(bool value);
    // public System.String get_QueryId()
    // Offset: 0x12D5110
    ::StringW get_QueryId();
    // public System.Void set_QueryId(System.String value)
    // Offset: 0x12D5118
    void set_QueryId(::StringW value);
    // public System.String get_MessageId()
    // Offset: 0x12D5120
    ::StringW get_MessageId();
    // public System.Void set_MessageId(System.String value)
    // Offset: 0x12D5128
    void set_MessageId(::StringW value);
    // public System.Void .ctor()
    // Offset: 0x12D5130
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SessionArchiveMessage* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Private::SessionArchiveMessage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SessionArchiveMessage*, creationType>()));
    }
  }; // VivoxUnity.Private.SessionArchiveMessage
  #pragma pack(pop)
  static check_size<sizeof(SessionArchiveMessage), 96 + sizeof(::StringW)> __VivoxUnity_Private_SessionArchiveMessageSizeCheck;
  static_assert(sizeof(SessionArchiveMessage) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::add_PropertyChanged
// Il2CppName: add_PropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::SessionArchiveMessage::*)(::System::ComponentModel::PropertyChangedEventHandler*)>(&VivoxUnity::Private::SessionArchiveMessage::add_PropertyChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "add_PropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::remove_PropertyChanged
// Il2CppName: remove_PropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::SessionArchiveMessage::*)(::System::ComponentModel::PropertyChangedEventHandler*)>(&VivoxUnity::Private::SessionArchiveMessage::remove_PropertyChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "remove_PropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::get_Exception
// Il2CppName: get_Exception
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (VivoxUnity::Private::SessionArchiveMessage::*)()>(&VivoxUnity::Private::SessionArchiveMessage::get_Exception)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "get_Exception", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::set_Exception
// Il2CppName: set_Exception
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::SessionArchiveMessage::*)(::System::Exception*)>(&VivoxUnity::Private::SessionArchiveMessage::set_Exception)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "set_Exception", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::Private::SessionArchiveMessage::*)()>(&VivoxUnity::Private::SessionArchiveMessage::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::set_Key
// Il2CppName: set_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::SessionArchiveMessage::*)(::StringW)>(&VivoxUnity::Private::SessionArchiveMessage::set_Key)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "set_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::get_ReceivedTime
// Il2CppName: get_ReceivedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (VivoxUnity::Private::SessionArchiveMessage::*)()>(&VivoxUnity::Private::SessionArchiveMessage::get_ReceivedTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "get_ReceivedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::set_ReceivedTime
// Il2CppName: set_ReceivedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::SessionArchiveMessage::*)(::System::DateTime)>(&VivoxUnity::Private::SessionArchiveMessage::set_ReceivedTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "set_ReceivedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::get_Message
// Il2CppName: get_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::Private::SessionArchiveMessage::*)()>(&VivoxUnity::Private::SessionArchiveMessage::get_Message)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "get_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::set_Message
// Il2CppName: set_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::SessionArchiveMessage::*)(::StringW)>(&VivoxUnity::Private::SessionArchiveMessage::set_Message)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "set_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::get_Language
// Il2CppName: get_Language
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::Private::SessionArchiveMessage::*)()>(&VivoxUnity::Private::SessionArchiveMessage::get_Language)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "get_Language", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::set_Language
// Il2CppName: set_Language
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::SessionArchiveMessage::*)(::StringW)>(&VivoxUnity::Private::SessionArchiveMessage::set_Language)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "set_Language", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::get_ChannelSession
// Il2CppName: get_ChannelSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IChannelSession* (VivoxUnity::Private::SessionArchiveMessage::*)()>(&VivoxUnity::Private::SessionArchiveMessage::get_ChannelSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "get_ChannelSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::set_ChannelSession
// Il2CppName: set_ChannelSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::SessionArchiveMessage::*)(::VivoxUnity::IChannelSession*)>(&VivoxUnity::Private::SessionArchiveMessage::set_ChannelSession)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity", "IChannelSession")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "set_ChannelSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::get_Sender
// Il2CppName: get_Sender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::AccountId* (VivoxUnity::Private::SessionArchiveMessage::*)()>(&VivoxUnity::Private::SessionArchiveMessage::get_Sender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "get_Sender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::set_Sender
// Il2CppName: set_Sender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::SessionArchiveMessage::*)(::VivoxUnity::AccountId*)>(&VivoxUnity::Private::SessionArchiveMessage::set_Sender)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "set_Sender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::get_FromSelf
// Il2CppName: get_FromSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::SessionArchiveMessage::*)()>(&VivoxUnity::Private::SessionArchiveMessage::get_FromSelf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "get_FromSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::set_FromSelf
// Il2CppName: set_FromSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::SessionArchiveMessage::*)(bool)>(&VivoxUnity::Private::SessionArchiveMessage::set_FromSelf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "set_FromSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::get_QueryId
// Il2CppName: get_QueryId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::Private::SessionArchiveMessage::*)()>(&VivoxUnity::Private::SessionArchiveMessage::get_QueryId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "get_QueryId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::set_QueryId
// Il2CppName: set_QueryId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::SessionArchiveMessage::*)(::StringW)>(&VivoxUnity::Private::SessionArchiveMessage::set_QueryId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "set_QueryId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::get_MessageId
// Il2CppName: get_MessageId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::Private::SessionArchiveMessage::*)()>(&VivoxUnity::Private::SessionArchiveMessage::get_MessageId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "get_MessageId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::set_MessageId
// Il2CppName: set_MessageId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::SessionArchiveMessage::*)(::StringW)>(&VivoxUnity::Private::SessionArchiveMessage::set_MessageId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::SessionArchiveMessage*), "set_MessageId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::SessionArchiveMessage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
