// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VivoxUnity.ITextToSpeech
#include "VivoxUnity/ITextToSpeech.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VivoxUnity::Private
namespace VivoxUnity::Private {
  // Forward declaring type: TTSVoice
  class TTSVoice;
  // Forward declaring type: TTSMessageQueue
  class TTSMessageQueue;
}
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: Client
  class Client;
  // Forward declaring type: ITTSVoice
  class ITTSVoice;
  // Forward declaring type: TTSMessage
  class TTSMessage;
  // Forward declaring type: TTSDestination
  struct TTSDestination;
  // Forward declaring type: ITTSMessageQueue
  class ITTSMessageQueue;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: PropertyChangedEventHandler
  class PropertyChangedEventHandler;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: vx_evt_base_t
  class vx_evt_base_t;
  // Forward declaring type: vx_tts_status
  struct vx_tts_status;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Completed forward declares
// Type namespace: VivoxUnity.Private
namespace VivoxUnity::Private {
  // Forward declaring type: TextToSpeech
  class TextToSpeech;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::Private::TextToSpeech);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::Private::TextToSpeech*, "VivoxUnity.Private", "TextToSpeech");
// Type namespace: VivoxUnity.Private
namespace VivoxUnity::Private {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.Private.TextToSpeech
  // [TokenAttribute] Offset: FFFFFFFF
  class TextToSpeech : public ::Il2CppObject/*, public ::VivoxUnity::ITextToSpeech*/ {
    public:
    // Nested type: ::VivoxUnity::Private::TextToSpeech::$$c
    class $$c;
    // Nested type: ::VivoxUnity::Private::TextToSpeech::$$c__DisplayClass17_0
    class $$c__DisplayClass17_0;
    // Nested type: ::VivoxUnity::Private::TextToSpeech::$$c__DisplayClass24_0
    class $$c__DisplayClass24_0;
    // Nested type: ::VivoxUnity::Private::TextToSpeech::$$c__DisplayClass29_0
    class $$c__DisplayClass29_0;
    public:
    // private readonly VivoxUnity.Client _client
    // Size: 0x8
    // Offset: 0x10
    ::VivoxUnity::Client* client;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Client*) == 0x8);
    // private System.Collections.Generic.List`1<VivoxUnity.ITTSVoice> _ttsAvailableVoices
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::VivoxUnity::ITTSVoice*>* ttsAvailableVoices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::VivoxUnity::ITTSVoice*>*) == 0x8);
    // private VivoxUnity.Private.TTSVoice _ttsCurrentVoice
    // Size: 0x8
    // Offset: 0x20
    ::VivoxUnity::Private::TTSVoice* ttsCurrentVoice;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Private::TTSVoice*) == 0x8);
    // private readonly VivoxUnity.Private.TTSMessageQueue _ttsMessages
    // Size: 0x8
    // Offset: 0x28
    ::VivoxUnity::Private::TTSMessageQueue* ttsMessages;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Private::TTSMessageQueue*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE438
    // private System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    // Size: 0x8
    // Offset: 0x30
    ::System::ComponentModel::PropertyChangedEventHandler* PropertyChanged;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::PropertyChangedEventHandler*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::VivoxUnity::ITextToSpeech
    operator ::VivoxUnity::ITextToSpeech() noexcept {
      return *reinterpret_cast<::VivoxUnity::ITextToSpeech*>(this);
    }
    // Get instance field reference: private readonly VivoxUnity.Client _client
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Client*& dyn__client();
    // Get instance field reference: private System.Collections.Generic.List`1<VivoxUnity.ITTSVoice> _ttsAvailableVoices
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::VivoxUnity::ITTSVoice*>*& dyn__ttsAvailableVoices();
    // Get instance field reference: private VivoxUnity.Private.TTSVoice _ttsCurrentVoice
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Private::TTSVoice*& dyn__ttsCurrentVoice();
    // Get instance field reference: private readonly VivoxUnity.Private.TTSMessageQueue _ttsMessages
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Private::TTSMessageQueue*& dyn__ttsMessages();
    // Get instance field reference: private System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::PropertyChangedEventHandler*& dyn_PropertyChanged();
    // System.Void .ctor(VivoxUnity.Client client)
    // Offset: 0x12D6E94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextToSpeech* New_ctor(::VivoxUnity::Client* client) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Private::TextToSpeech::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextToSpeech*, creationType>(client)));
    }
    // private System.Void InstanceOnEventMessageReceived(vx_evt_base_t eventMessage)
    // Offset: 0x12D71CC
    void InstanceOnEventMessageReceived(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleTTSInjectionStarted(vx_evt_base_t eventMessage)
    // Offset: 0x12D72C4
    void HandleTTSInjectionStarted(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleTTSInjectionEnded(vx_evt_base_t eventMessage)
    // Offset: 0x12D7394
    void HandleTTSInjectionEnded(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleTTSInjectionFailed(vx_evt_base_t eventMessage)
    // Offset: 0x12D7418
    void HandleTTSInjectionFailed(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // public System.Void add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value)
    // Offset: 0x12D7714
    void add_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value);
    // public System.Void remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value)
    // Offset: 0x12D7800
    void remove_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value);
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<VivoxUnity.ITTSVoice> get_AvailableVoices()
    // Offset: 0x12D78EC
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::VivoxUnity::ITTSVoice*>* get_AvailableVoices();
    // public VivoxUnity.ITTSVoice get_CurrentVoice()
    // Offset: 0x12D6228
    ::VivoxUnity::ITTSVoice* get_CurrentVoice();
    // public System.Void set_CurrentVoice(VivoxUnity.ITTSVoice value)
    // Offset: 0x12D7B08
    void set_CurrentVoice(::VivoxUnity::ITTSVoice* value);
    // public System.Void Speak(VivoxUnity.TTSMessage message)
    // Offset: 0x12D7D54
    void Speak(::VivoxUnity::TTSMessage* message);
    // public System.Void CancelMessage(VivoxUnity.TTSMessage message)
    // Offset: 0x12D7D88
    void CancelMessage(::VivoxUnity::TTSMessage* message);
    // public System.Void CancelDestination(VivoxUnity.TTSDestination destination)
    // Offset: 0x12D7E80
    void CancelDestination(::VivoxUnity::TTSDestination destination);
    // public System.Void CancelAll()
    // Offset: 0x12D829C
    void CancelAll();
    // public VivoxUnity.ITTSMessageQueue get_Messages()
    // Offset: 0x12D83C8
    ::VivoxUnity::ITTSMessageQueue* get_Messages();
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<VivoxUnity.TTSMessage> GetMessagesFromDestination(VivoxUnity.TTSDestination destination)
    // Offset: 0x12D81A8
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::VivoxUnity::TTSMessage*>* GetMessagesFromDestination(::VivoxUnity::TTSDestination destination);
    // System.UInt32 get_TTSManagerId()
    // Offset: 0x12D63B8
    uint get_TTSManagerId();
    // System.Boolean TTSInitialize()
    // Offset: 0x12D61F8
    bool TTSInitialize();
    // static System.Boolean IsNotTTSError(vx_tts_status status)
    // Offset: 0x12D6400
    static bool IsNotTTSError(::GlobalNamespace::vx_tts_status status);
    // VivoxUnity.TTSMessage GetTTSMessageFromEvt(System.UInt32 utteranceId)
    // Offset: 0x12D7540
    ::VivoxUnity::TTSMessage* GetTTSMessageFromEvt(uint utteranceId);
    // System.Void CleanupTTS()
    // Offset: 0x12D70F4
    void CleanupTTS();
    // protected override System.Void Finalize()
    // Offset: 0x12D7080
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // VivoxUnity.Private.TextToSpeech
  #pragma pack(pop)
  static check_size<sizeof(TextToSpeech), 48 + sizeof(::System::ComponentModel::PropertyChangedEventHandler*)> __VivoxUnity_Private_TextToSpeechSizeCheck;
  static_assert(sizeof(TextToSpeech) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::InstanceOnEventMessageReceived
// Il2CppName: InstanceOnEventMessageReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::TextToSpeech::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::TextToSpeech::InstanceOnEventMessageReceived)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "InstanceOnEventMessageReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::HandleTTSInjectionStarted
// Il2CppName: HandleTTSInjectionStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::TextToSpeech::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::TextToSpeech::HandleTTSInjectionStarted)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "HandleTTSInjectionStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::HandleTTSInjectionEnded
// Il2CppName: HandleTTSInjectionEnded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::TextToSpeech::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::TextToSpeech::HandleTTSInjectionEnded)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "HandleTTSInjectionEnded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::HandleTTSInjectionFailed
// Il2CppName: HandleTTSInjectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::TextToSpeech::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::TextToSpeech::HandleTTSInjectionFailed)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "HandleTTSInjectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::add_PropertyChanged
// Il2CppName: add_PropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::TextToSpeech::*)(::System::ComponentModel::PropertyChangedEventHandler*)>(&VivoxUnity::Private::TextToSpeech::add_PropertyChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "add_PropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::remove_PropertyChanged
// Il2CppName: remove_PropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::TextToSpeech::*)(::System::ComponentModel::PropertyChangedEventHandler*)>(&VivoxUnity::Private::TextToSpeech::remove_PropertyChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "remove_PropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::get_AvailableVoices
// Il2CppName: get_AvailableVoices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::VivoxUnity::ITTSVoice*>* (VivoxUnity::Private::TextToSpeech::*)()>(&VivoxUnity::Private::TextToSpeech::get_AvailableVoices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "get_AvailableVoices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::get_CurrentVoice
// Il2CppName: get_CurrentVoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::ITTSVoice* (VivoxUnity::Private::TextToSpeech::*)()>(&VivoxUnity::Private::TextToSpeech::get_CurrentVoice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "get_CurrentVoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::set_CurrentVoice
// Il2CppName: set_CurrentVoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::TextToSpeech::*)(::VivoxUnity::ITTSVoice*)>(&VivoxUnity::Private::TextToSpeech::set_CurrentVoice)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ITTSVoice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "set_CurrentVoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::Speak
// Il2CppName: Speak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::TextToSpeech::*)(::VivoxUnity::TTSMessage*)>(&VivoxUnity::Private::TextToSpeech::Speak)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("VivoxUnity", "TTSMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "Speak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::CancelMessage
// Il2CppName: CancelMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::TextToSpeech::*)(::VivoxUnity::TTSMessage*)>(&VivoxUnity::Private::TextToSpeech::CancelMessage)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("VivoxUnity", "TTSMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "CancelMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::CancelDestination
// Il2CppName: CancelDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::TextToSpeech::*)(::VivoxUnity::TTSDestination)>(&VivoxUnity::Private::TextToSpeech::CancelDestination)> {
  static const MethodInfo* get() {
    static auto* destination = &::il2cpp_utils::GetClassFromName("VivoxUnity", "TTSDestination")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "CancelDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::CancelAll
// Il2CppName: CancelAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::TextToSpeech::*)()>(&VivoxUnity::Private::TextToSpeech::CancelAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "CancelAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::get_Messages
// Il2CppName: get_Messages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::ITTSMessageQueue* (VivoxUnity::Private::TextToSpeech::*)()>(&VivoxUnity::Private::TextToSpeech::get_Messages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "get_Messages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::GetMessagesFromDestination
// Il2CppName: GetMessagesFromDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::VivoxUnity::TTSMessage*>* (VivoxUnity::Private::TextToSpeech::*)(::VivoxUnity::TTSDestination)>(&VivoxUnity::Private::TextToSpeech::GetMessagesFromDestination)> {
  static const MethodInfo* get() {
    static auto* destination = &::il2cpp_utils::GetClassFromName("VivoxUnity", "TTSDestination")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "GetMessagesFromDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::get_TTSManagerId
// Il2CppName: get_TTSManagerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (VivoxUnity::Private::TextToSpeech::*)()>(&VivoxUnity::Private::TextToSpeech::get_TTSManagerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "get_TTSManagerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::TTSInitialize
// Il2CppName: TTSInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::TextToSpeech::*)()>(&VivoxUnity::Private::TextToSpeech::TTSInitialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "TTSInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::IsNotTTSError
// Il2CppName: IsNotTTSError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::vx_tts_status)>(&VivoxUnity::Private::TextToSpeech::IsNotTTSError)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("", "vx_tts_status")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "IsNotTTSError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::GetTTSMessageFromEvt
// Il2CppName: GetTTSMessageFromEvt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::TTSMessage* (VivoxUnity::Private::TextToSpeech::*)(uint)>(&VivoxUnity::Private::TextToSpeech::GetTTSMessageFromEvt)> {
  static const MethodInfo* get() {
    static auto* utteranceId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "GetTTSMessageFromEvt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{utteranceId});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::CleanupTTS
// Il2CppName: CleanupTTS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::TextToSpeech::*)()>(&VivoxUnity::Private::TextToSpeech::CleanupTTS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "CleanupTTS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::TextToSpeech::*)()>(&VivoxUnity::Private::TextToSpeech::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
