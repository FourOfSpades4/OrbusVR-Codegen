// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VivoxUnity.IChannelSession
#include "VivoxUnity/IChannelSession.hpp"
// Including type: VivoxUnity.ConnectionState
#include "VivoxUnity/ConnectionState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VivoxUnity::Private
namespace VivoxUnity::Private {
  // Forward declaring type: LoginSession
  class LoginSession;
  // Forward declaring type: ChannelParticipant
  class ChannelParticipant;
  // Forward declaring type: ArchiveQueryResult
  class ArchiveQueryResult;
}
// Forward declaring namespace: VivoxUnity::Common
namespace VivoxUnity::Common {
  // Forward declaring type: ReadWriteDictionary`3<TK, TI, T>
  template<typename TK, typename TI, typename T>
  class ReadWriteDictionary_3;
  // Forward declaring type: ReadWriteQueue`1<T>
  template<typename T>
  class ReadWriteQueue_1;
}
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: IParticipant
  class IParticipant;
  // Forward declaring type: IChannelTextMessage
  class IChannelTextMessage;
  // Forward declaring type: ISessionArchiveMessage
  class ISessionArchiveMessage;
  // Forward declaring type: ITranscribedMessage
  class ITranscribedMessage;
  // Forward declaring type: ChannelId
  class ChannelId;
  // Forward declaring type: ILoginSession
  class ILoginSession;
  // Forward declaring type: IReadOnlyDictionary`2<TK, T>
  template<typename TK, typename T>
  class IReadOnlyDictionary_2;
  // Forward declaring type: IReadOnlyQueue`1<T>
  template<typename T>
  class IReadOnlyQueue_1;
  // Forward declaring type: AccountId
  class AccountId;
  // Forward declaring type: IArchiveQueryResult
  class IArchiveQueryResult;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: PropertyChangedEventHandler
  class PropertyChangedEventHandler;
  // Forward declaring type: PropertyChangedEventArgs
  class PropertyChangedEventArgs;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: vx_evt_base_t
  class vx_evt_base_t;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
  // Forward declaring type: TimeSpan
  struct TimeSpan;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: VivoxUnity.Private
namespace VivoxUnity::Private {
  // Forward declaring type: ChannelSession
  class ChannelSession;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::Private::ChannelSession);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::Private::ChannelSession*, "VivoxUnity.Private", "ChannelSession");
// Type namespace: VivoxUnity.Private
namespace VivoxUnity::Private {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.Private.ChannelSession
  // [TokenAttribute] Offset: FFFFFFFF
  class ChannelSession : public ::Il2CppObject/*, public ::VivoxUnity::IChannelSession*/ {
    public:
    // Nested type: ::VivoxUnity::Private::ChannelSession::$$c__DisplayClass31_0
    class $$c__DisplayClass31_0;
    // Nested type: ::VivoxUnity::Private::ChannelSession::$$c__DisplayClass33_0
    class $$c__DisplayClass33_0;
    // Nested type: ::VivoxUnity::Private::ChannelSession::$$c__DisplayClass33_1
    class $$c__DisplayClass33_1;
    // Nested type: ::VivoxUnity::Private::ChannelSession::$$c__DisplayClass34_0
    class $$c__DisplayClass34_0;
    // Nested type: ::VivoxUnity::Private::ChannelSession::$$c__DisplayClass34_1
    class $$c__DisplayClass34_1;
    // Nested type: ::VivoxUnity::Private::ChannelSession::$$c__DisplayClass34_2
    class $$c__DisplayClass34_2;
    // Nested type: ::VivoxUnity::Private::ChannelSession::$$c__DisplayClass36_0
    class $$c__DisplayClass36_0;
    // Nested type: ::VivoxUnity::Private::ChannelSession::$$c__DisplayClass36_1
    class $$c__DisplayClass36_1;
    // Nested type: ::VivoxUnity::Private::ChannelSession::$$c__DisplayClass36_2
    class $$c__DisplayClass36_2;
    // Nested type: ::VivoxUnity::Private::ChannelSession::$$c__DisplayClass58_0
    class $$c__DisplayClass58_0;
    // Nested type: ::VivoxUnity::Private::ChannelSession::$$c__DisplayClass58_1
    class $$c__DisplayClass58_1;
    // Nested type: ::VivoxUnity::Private::ChannelSession::$$c__DisplayClass60_0
    class $$c__DisplayClass60_0;
    // Nested type: ::VivoxUnity::Private::ChannelSession::$$c__DisplayClass66_0
    class $$c__DisplayClass66_0;
    // Nested type: ::VivoxUnity::Private::ChannelSession::$$c__DisplayClass77_0
    class $$c__DisplayClass77_0;
    // Nested type: ::VivoxUnity::Private::ChannelSession::$$c__DisplayClass82_0
    class $$c__DisplayClass82_0;
    public:
    // private readonly VivoxUnity.Private.LoginSession _loginSession
    // Size: 0x8
    // Offset: 0x10
    ::VivoxUnity::Private::LoginSession* loginSession;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Private::LoginSession*) == 0x8);
    // private readonly System.String _sessionHandle
    // Size: 0x8
    // Offset: 0x18
    ::StringW sessionHandle;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _typing
    // Size: 0x1
    // Offset: 0x20
    bool typing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isSessionBeingTranscribed
    // Size: 0x1
    // Offset: 0x21
    bool isSessionBeingTranscribed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isSessionBeingTranscribed and: participants
    char __padding3[0x6] = {};
    // private readonly VivoxUnity.Common.ReadWriteDictionary`3<System.String,VivoxUnity.IParticipant,VivoxUnity.Private.ChannelParticipant> _participants
    // Size: 0x8
    // Offset: 0x28
    ::VivoxUnity::Common::ReadWriteDictionary_3<::StringW, ::VivoxUnity::IParticipant*, ::VivoxUnity::Private::ChannelParticipant*>* participants;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteDictionary_3<::StringW, ::VivoxUnity::IParticipant*, ::VivoxUnity::Private::ChannelParticipant*>*) == 0x8);
    // private readonly VivoxUnity.Common.ReadWriteQueue`1<VivoxUnity.IChannelTextMessage> _messageLog
    // Size: 0x8
    // Offset: 0x30
    ::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::IChannelTextMessage*>* messageLog;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::IChannelTextMessage*>*) == 0x8);
    // private readonly VivoxUnity.Common.ReadWriteQueue`1<VivoxUnity.ISessionArchiveMessage> _sessionArchive
    // Size: 0x8
    // Offset: 0x38
    ::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::ISessionArchiveMessage*>* sessionArchive;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::ISessionArchiveMessage*>*) == 0x8);
    // private readonly VivoxUnity.Common.ReadWriteQueue`1<VivoxUnity.ITranscribedMessage> _transcribedLog
    // Size: 0x8
    // Offset: 0x40
    ::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::ITranscribedMessage*>* transcribedLog;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::ITranscribedMessage*>*) == 0x8);
    // private VivoxUnity.Private.ArchiveQueryResult _sessionArchiveResult
    // Size: 0x8
    // Offset: 0x48
    ::VivoxUnity::Private::ArchiveQueryResult* sessionArchiveResult;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Private::ArchiveQueryResult*) == 0x8);
    // private VivoxUnity.ConnectionState _audioState
    // Size: 0x4
    // Offset: 0x50
    ::VivoxUnity::ConnectionState audioState;
    // Field size check
    static_assert(sizeof(::VivoxUnity::ConnectionState) == 0x4);
    // private VivoxUnity.ConnectionState _textState
    // Size: 0x4
    // Offset: 0x54
    ::VivoxUnity::ConnectionState textState;
    // Field size check
    static_assert(sizeof(::VivoxUnity::ConnectionState) == 0x4);
    // private System.Int32 _nextTextId
    // Size: 0x4
    // Offset: 0x58
    int nextTextId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _nextTranscriptiontId
    // Size: 0x4
    // Offset: 0x5C
    int nextTranscriptiontId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _deleted
    // Size: 0x1
    // Offset: 0x60
    bool deleted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: deleted and: PropertyChanged
    char __padding13[0x7] = {};
    // [CompilerGeneratedAttribute] Offset: 0xABE018
    // private System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    // Size: 0x8
    // Offset: 0x68
    ::System::ComponentModel::PropertyChangedEventHandler* PropertyChanged;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::PropertyChangedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE028
    // private readonly System.String <GroupId>k__BackingField
    // Size: 0x8
    // Offset: 0x70
    ::StringW GroupId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE038
    // private readonly VivoxUnity.ChannelId <Key>k__BackingField
    // Size: 0x8
    // Offset: 0x78
    ::VivoxUnity::ChannelId* Key;
    // Field size check
    static_assert(sizeof(::VivoxUnity::ChannelId*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::VivoxUnity::IChannelSession
    operator ::VivoxUnity::IChannelSession() noexcept {
      return *reinterpret_cast<::VivoxUnity::IChannelSession*>(this);
    }
    // Get instance field reference: private readonly VivoxUnity.Private.LoginSession _loginSession
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Private::LoginSession*& dyn__loginSession();
    // Get instance field reference: private readonly System.String _sessionHandle
    [[deprecated("Use field access instead!")]] ::StringW& dyn__sessionHandle();
    // Get instance field reference: private System.Boolean _typing
    [[deprecated("Use field access instead!")]] bool& dyn__typing();
    // Get instance field reference: private System.Boolean _isSessionBeingTranscribed
    [[deprecated("Use field access instead!")]] bool& dyn__isSessionBeingTranscribed();
    // Get instance field reference: private readonly VivoxUnity.Common.ReadWriteDictionary`3<System.String,VivoxUnity.IParticipant,VivoxUnity.Private.ChannelParticipant> _participants
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteDictionary_3<::StringW, ::VivoxUnity::IParticipant*, ::VivoxUnity::Private::ChannelParticipant*>*& dyn__participants();
    // Get instance field reference: private readonly VivoxUnity.Common.ReadWriteQueue`1<VivoxUnity.IChannelTextMessage> _messageLog
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::IChannelTextMessage*>*& dyn__messageLog();
    // Get instance field reference: private readonly VivoxUnity.Common.ReadWriteQueue`1<VivoxUnity.ISessionArchiveMessage> _sessionArchive
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::ISessionArchiveMessage*>*& dyn__sessionArchive();
    // Get instance field reference: private readonly VivoxUnity.Common.ReadWriteQueue`1<VivoxUnity.ITranscribedMessage> _transcribedLog
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::ITranscribedMessage*>*& dyn__transcribedLog();
    // Get instance field reference: private VivoxUnity.Private.ArchiveQueryResult _sessionArchiveResult
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Private::ArchiveQueryResult*& dyn__sessionArchiveResult();
    // Get instance field reference: private VivoxUnity.ConnectionState _audioState
    [[deprecated("Use field access instead!")]] ::VivoxUnity::ConnectionState& dyn__audioState();
    // Get instance field reference: private VivoxUnity.ConnectionState _textState
    [[deprecated("Use field access instead!")]] ::VivoxUnity::ConnectionState& dyn__textState();
    // Get instance field reference: private System.Int32 _nextTextId
    [[deprecated("Use field access instead!")]] int& dyn__nextTextId();
    // Get instance field reference: private System.Int32 _nextTranscriptiontId
    [[deprecated("Use field access instead!")]] int& dyn__nextTranscriptiontId();
    // Get instance field reference: private System.Boolean _deleted
    [[deprecated("Use field access instead!")]] bool& dyn__deleted();
    // Get instance field reference: private System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::PropertyChangedEventHandler*& dyn_PropertyChanged();
    // Get instance field reference: private readonly System.String <GroupId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$GroupId$k__BackingField();
    // Get instance field reference: private readonly VivoxUnity.ChannelId <Key>k__BackingField
    [[deprecated("Use field access instead!")]] ::VivoxUnity::ChannelId*& dyn_$Key$k__BackingField();
    // public System.Void add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value)
    // Offset: 0x14BFA28
    void add_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value);
    // public System.Void remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value)
    // Offset: 0x14BFB14
    void remove_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value);
    // private System.Boolean AlreadyDone(System.Boolean connect, VivoxUnity.ConnectionState state)
    // Offset: 0x14BFC00
    bool AlreadyDone(bool connect, ::VivoxUnity::ConnectionState state);
    // private System.Void AssertSessionNotDeleted()
    // Offset: 0x14BFC2C
    void AssertSessionNotDeleted();
    // public System.Void .ctor(VivoxUnity.Private.LoginSession loginSession, VivoxUnity.ChannelId channelId, System.String groupId)
    // Offset: 0x14BFCF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChannelSession* New_ctor(::VivoxUnity::Private::LoginSession* loginSession, ::VivoxUnity::ChannelId* channelId, ::StringW groupId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Private::ChannelSession::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChannelSession*, creationType>(loginSession, channelId, groupId)));
    }
    // private System.Void InstanceOnEventMessageReceived(vx_evt_base_t eventMessage)
    // Offset: 0x14BFF58
    void InstanceOnEventMessageReceived(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleParticipantAdded(vx_evt_base_t eventMessage)
    // Offset: 0x14C00A8
    void HandleParticipantAdded(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleParticipantRemoved(vx_evt_base_t eventMessage)
    // Offset: 0x14C01AC
    void HandleParticipantRemoved(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleParticipantUpdated(vx_evt_base_t eventMessage)
    // Offset: 0x14C027C
    void HandleParticipantUpdated(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleMediaStreamUpdated(vx_evt_base_t eventMessage)
    // Offset: 0x14C055C
    void HandleMediaStreamUpdated(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleTextStreamUpdated(vx_evt_base_t eventMessage)
    // Offset: 0x14C060C
    void HandleTextStreamUpdated(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleSessionRemoved(vx_evt_base_t eventMessage)
    // Offset: 0x14C06B8
    void HandleSessionRemoved(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleSessionMessage(vx_evt_base_t eventMessage)
    // Offset: 0x14C07CC
    void HandleSessionMessage(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleSessionArchiveMessage(vx_evt_base_t eventMessage)
    // Offset: 0x14C0B10
    void HandleSessionArchiveMessage(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleSessionArchiveQueryEnd(vx_evt_base_t eventMessage)
    // Offset: 0x14C0F88
    void HandleSessionArchiveQueryEnd(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleSessionTranscribedMessage(vx_evt_base_t eventMessage)
    // Offset: 0x14C10D0
    void HandleSessionTranscribedMessage(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // public System.IAsyncResult BeginConnect(System.Boolean connectAudio, System.Boolean connectText, System.Boolean switchTransmission, System.String accessToken, System.AsyncCallback callback)
    // Offset: 0x14C1560
    ::System::IAsyncResult* BeginConnect(bool connectAudio, bool connectText, bool switchTransmission, ::StringW accessToken, ::System::AsyncCallback* callback);
    // public System.Void EndConnect(System.IAsyncResult ar)
    // Offset: 0x14C1E84
    void EndConnect(::System::IAsyncResult* ar);
    // public System.IAsyncResult Disconnect(System.AsyncCallback callback)
    // Offset: 0x14C1F0C
    ::System::IAsyncResult* Disconnect(::System::AsyncCallback* callback);
    // public System.IAsyncResult BeginSetAudioConnected(System.Boolean value, System.Boolean switchTransmission, System.AsyncCallback callback)
    // Offset: 0x14C2134
    ::System::IAsyncResult* BeginSetAudioConnected(bool value, bool switchTransmission, ::System::AsyncCallback* callback);
    // public System.Void EndSetAudioConnected(System.IAsyncResult result)
    // Offset: 0x14C2520
    void EndSetAudioConnected(::System::IAsyncResult* result);
    // public System.IAsyncResult BeginSetTextConnected(System.Boolean value, System.AsyncCallback callback)
    // Offset: 0x14C25C0
    ::System::IAsyncResult* BeginSetTextConnected(bool value, ::System::AsyncCallback* callback);
    // public System.Void EndSetTextConnected(System.IAsyncResult result)
    // Offset: 0x14C2900
    void EndSetTextConnected(::System::IAsyncResult* result);
    // public System.String get_SessionHandle()
    // Offset: 0x14BEF44
    ::StringW get_SessionHandle();
    // public VivoxUnity.ILoginSession get_Parent()
    // Offset: 0x14C29A0
    ::VivoxUnity::ILoginSession* get_Parent();
    // public System.String get_GroupId()
    // Offset: 0x14C1A18
    ::StringW get_GroupId();
    // public VivoxUnity.ChannelId get_Key()
    // Offset: 0x14BEB48
    ::VivoxUnity::ChannelId* get_Key();
    // public VivoxUnity.ConnectionState get_AudioState()
    // Offset: 0x14C1A08
    ::VivoxUnity::ConnectionState get_AudioState();
    // private System.Void set_AudioState(VivoxUnity.ConnectionState value)
    // Offset: 0x14C13B4
    void set_AudioState(::VivoxUnity::ConnectionState value);
    // public VivoxUnity.ConnectionState get_TextState()
    // Offset: 0x14C1A10
    ::VivoxUnity::ConnectionState get_TextState();
    // public System.Void set_TextState(VivoxUnity.ConnectionState value)
    // Offset: 0x14C1460
    void set_TextState(::VivoxUnity::ConnectionState value);
    // public VivoxUnity.IReadOnlyDictionary`2<System.String,VivoxUnity.IParticipant> get_Participants()
    // Offset: 0x14C29A8
    ::VivoxUnity::IReadOnlyDictionary_2<::StringW, ::VivoxUnity::IParticipant*>* get_Participants();
    // public System.Boolean get_Typing()
    // Offset: 0x14C29B0
    bool get_Typing();
    // public System.Void set_Typing(System.Boolean value)
    // Offset: 0x14C29B8
    void set_Typing(bool value);
    // public System.IAsyncResult BeginSendText(System.String message, System.AsyncCallback callback)
    // Offset: 0x14C2BF8
    ::System::IAsyncResult* BeginSendText(::StringW message, ::System::AsyncCallback* callback);
    // public System.IAsyncResult BeginSendText(System.String language, System.String message, System.String applicationStanzaNamespace, System.String applicationStanzaBody, System.AsyncCallback callback)
    // Offset: 0x14C2C40
    ::System::IAsyncResult* BeginSendText(::StringW language, ::StringW message, ::StringW applicationStanzaNamespace, ::StringW applicationStanzaBody, ::System::AsyncCallback* callback);
    // public System.Void EndSendText(System.IAsyncResult result)
    // Offset: 0x14C2F38
    void EndSendText(::System::IAsyncResult* result);
    // public VivoxUnity.IReadOnlyQueue`1<VivoxUnity.IChannelTextMessage> get_MessageLog()
    // Offset: 0x14C2FD8
    ::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IChannelTextMessage*>* get_MessageLog();
    // public VivoxUnity.IReadOnlyQueue`1<VivoxUnity.ITranscribedMessage> get_TranscribedLog()
    // Offset: 0x14C2FE0
    ::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::ITranscribedMessage*>* get_TranscribedLog();
    // public System.IAsyncResult BeginSessionArchiveQuery(System.Nullable`1<System.DateTime> timeStart, System.Nullable`1<System.DateTime> timeEnd, System.String searchText, VivoxUnity.AccountId userId, System.UInt32 max, System.String afterId, System.String beforeId, System.Int32 firstMessageIndex, System.AsyncCallback callback)
    // Offset: 0x14C2FE8
    ::System::IAsyncResult* BeginSessionArchiveQuery(::System::Nullable_1<::System::DateTime> timeStart, ::System::Nullable_1<::System::DateTime> timeEnd, ::StringW searchText, ::VivoxUnity::AccountId* userId, uint max, ::StringW afterId, ::StringW beforeId, int firstMessageIndex, ::System::AsyncCallback* callback);
    // public System.Void EndSessionArchiveQuery(System.IAsyncResult result)
    // Offset: 0x14C3648
    void EndSessionArchiveQuery(::System::IAsyncResult* result);
    // public VivoxUnity.IReadOnlyQueue`1<VivoxUnity.ISessionArchiveMessage> get_SessionArchive()
    // Offset: 0x14C36E8
    ::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::ISessionArchiveMessage*>* get_SessionArchive();
    // public VivoxUnity.IArchiveQueryResult get_SessionArchiveResult()
    // Offset: 0x14C36F0
    ::VivoxUnity::IArchiveQueryResult* get_SessionArchiveResult();
    // public System.String GetConnectToken(System.String key, System.TimeSpan expiration)
    // Offset: 0x14C36F8
    ::StringW GetConnectToken(::StringW key, ::System::TimeSpan expiration);
    // public System.Boolean get_IsTransmitting()
    // Offset: 0x14C3860
    bool get_IsTransmitting();
    // public System.Boolean get_IsSessionBeingTranscribed()
    // Offset: 0x14C3C74
    bool get_IsSessionBeingTranscribed();
    // public System.IAsyncResult BeginSetChannelTranscription(System.Boolean value, System.String accessToken, System.AsyncCallback callback)
    // Offset: 0x14C3C7C
    ::System::IAsyncResult* BeginSetChannelTranscription(bool value, ::StringW accessToken, ::System::AsyncCallback* callback);
    // public System.Void EndSetChannelTranscription(System.IAsyncResult result)
    // Offset: 0x14C3EF4
    void EndSetChannelTranscription(::System::IAsyncResult* result);
    // public System.String GetTranscriptionToken(System.String tokenSigningKey, System.TimeSpan tokenExpirationDuration)
    // Offset: 0x14C3F7C
    ::StringW GetTranscriptionToken(::StringW tokenSigningKey, ::System::TimeSpan tokenExpirationDuration);
    // public VivoxUnity.ChannelId get_Channel()
    // Offset: 0x14C24DC
    ::VivoxUnity::ChannelId* get_Channel();
    // public System.Void Set3DPosition(UnityEngine.Vector3 speakerPos, UnityEngine.Vector3 listenerPos, UnityEngine.Vector3 listenerAtOrient, UnityEngine.Vector3 listenerUpOrient)
    // Offset: 0x14C40DC
    void Set3DPosition(::UnityEngine::Vector3 speakerPos, ::UnityEngine::Vector3 listenerPos, ::UnityEngine::Vector3 listenerAtOrient, ::UnityEngine::Vector3 listenerUpOrient);
    // public System.Void Delete()
    // Offset: 0x14C4604
    void Delete();
    // private System.Void <.ctor>b__19_0(System.Object sender, System.ComponentModel.PropertyChangedEventArgs args)
    // Offset: 0x14C4630
    void $_ctor$b__19_0(::Il2CppObject* sender, ::System::ComponentModel::PropertyChangedEventArgs* args);
  }; // VivoxUnity.Private.ChannelSession
  #pragma pack(pop)
  static check_size<sizeof(ChannelSession), 120 + sizeof(::VivoxUnity::ChannelId*)> __VivoxUnity_Private_ChannelSessionSizeCheck;
  static_assert(sizeof(ChannelSession) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::add_PropertyChanged
// Il2CppName: add_PropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::System::ComponentModel::PropertyChangedEventHandler*)>(&VivoxUnity::Private::ChannelSession::add_PropertyChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "add_PropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::remove_PropertyChanged
// Il2CppName: remove_PropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::System::ComponentModel::PropertyChangedEventHandler*)>(&VivoxUnity::Private::ChannelSession::remove_PropertyChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "remove_PropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::AlreadyDone
// Il2CppName: AlreadyDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::ChannelSession::*)(bool, ::VivoxUnity::ConnectionState)>(&VivoxUnity::Private::ChannelSession::AlreadyDone)> {
  static const MethodInfo* get() {
    static auto* connect = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ConnectionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "AlreadyDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connect, state});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::AssertSessionNotDeleted
// Il2CppName: AssertSessionNotDeleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::AssertSessionNotDeleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "AssertSessionNotDeleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::InstanceOnEventMessageReceived
// Il2CppName: InstanceOnEventMessageReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::ChannelSession::InstanceOnEventMessageReceived)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "InstanceOnEventMessageReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::HandleParticipantAdded
// Il2CppName: HandleParticipantAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::ChannelSession::HandleParticipantAdded)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "HandleParticipantAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::HandleParticipantRemoved
// Il2CppName: HandleParticipantRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::ChannelSession::HandleParticipantRemoved)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "HandleParticipantRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::HandleParticipantUpdated
// Il2CppName: HandleParticipantUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::ChannelSession::HandleParticipantUpdated)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "HandleParticipantUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::HandleMediaStreamUpdated
// Il2CppName: HandleMediaStreamUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::ChannelSession::HandleMediaStreamUpdated)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "HandleMediaStreamUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::HandleTextStreamUpdated
// Il2CppName: HandleTextStreamUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::ChannelSession::HandleTextStreamUpdated)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "HandleTextStreamUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::HandleSessionRemoved
// Il2CppName: HandleSessionRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::ChannelSession::HandleSessionRemoved)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "HandleSessionRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::HandleSessionMessage
// Il2CppName: HandleSessionMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::ChannelSession::HandleSessionMessage)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "HandleSessionMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::HandleSessionArchiveMessage
// Il2CppName: HandleSessionArchiveMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::ChannelSession::HandleSessionArchiveMessage)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "HandleSessionArchiveMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::HandleSessionArchiveQueryEnd
// Il2CppName: HandleSessionArchiveQueryEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::ChannelSession::HandleSessionArchiveQueryEnd)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "HandleSessionArchiveQueryEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::HandleSessionTranscribedMessage
// Il2CppName: HandleSessionTranscribedMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::ChannelSession::HandleSessionTranscribedMessage)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "HandleSessionTranscribedMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::BeginConnect
// Il2CppName: BeginConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::ChannelSession::*)(bool, bool, bool, ::StringW, ::System::AsyncCallback*)>(&VivoxUnity::Private::ChannelSession::BeginConnect)> {
  static const MethodInfo* get() {
    static auto* connectAudio = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* connectText = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* switchTransmission = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* accessToken = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "BeginConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectAudio, connectText, switchTransmission, accessToken, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::EndConnect
// Il2CppName: EndConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::ChannelSession::EndConnect)> {
  static const MethodInfo* get() {
    static auto* ar = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "EndConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ar});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::ChannelSession::*)(::System::AsyncCallback*)>(&VivoxUnity::Private::ChannelSession::Disconnect)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::BeginSetAudioConnected
// Il2CppName: BeginSetAudioConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::ChannelSession::*)(bool, bool, ::System::AsyncCallback*)>(&VivoxUnity::Private::ChannelSession::BeginSetAudioConnected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* switchTransmission = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "BeginSetAudioConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, switchTransmission, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::EndSetAudioConnected
// Il2CppName: EndSetAudioConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::ChannelSession::EndSetAudioConnected)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "EndSetAudioConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::BeginSetTextConnected
// Il2CppName: BeginSetTextConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::ChannelSession::*)(bool, ::System::AsyncCallback*)>(&VivoxUnity::Private::ChannelSession::BeginSetTextConnected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "BeginSetTextConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::EndSetTextConnected
// Il2CppName: EndSetTextConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::ChannelSession::EndSetTextConnected)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "EndSetTextConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::get_SessionHandle
// Il2CppName: get_SessionHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::get_SessionHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "get_SessionHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::get_Parent
// Il2CppName: get_Parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::ILoginSession* (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::get_Parent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "get_Parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::get_GroupId
// Il2CppName: get_GroupId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::get_GroupId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "get_GroupId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::ChannelId* (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::get_AudioState
// Il2CppName: get_AudioState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::ConnectionState (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::get_AudioState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "get_AudioState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::set_AudioState
// Il2CppName: set_AudioState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::VivoxUnity::ConnectionState)>(&VivoxUnity::Private::ChannelSession::set_AudioState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ConnectionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "set_AudioState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::get_TextState
// Il2CppName: get_TextState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::ConnectionState (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::get_TextState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "get_TextState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::set_TextState
// Il2CppName: set_TextState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::VivoxUnity::ConnectionState)>(&VivoxUnity::Private::ChannelSession::set_TextState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ConnectionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "set_TextState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::get_Participants
// Il2CppName: get_Participants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyDictionary_2<::StringW, ::VivoxUnity::IParticipant*>* (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::get_Participants)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "get_Participants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::get_Typing
// Il2CppName: get_Typing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::get_Typing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "get_Typing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::set_Typing
// Il2CppName: set_Typing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(bool)>(&VivoxUnity::Private::ChannelSession::set_Typing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "set_Typing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::BeginSendText
// Il2CppName: BeginSendText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::ChannelSession::*)(::StringW, ::System::AsyncCallback*)>(&VivoxUnity::Private::ChannelSession::BeginSendText)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "BeginSendText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::BeginSendText
// Il2CppName: BeginSendText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::ChannelSession::*)(::StringW, ::StringW, ::StringW, ::StringW, ::System::AsyncCallback*)>(&VivoxUnity::Private::ChannelSession::BeginSendText)> {
  static const MethodInfo* get() {
    static auto* language = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* applicationStanzaNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* applicationStanzaBody = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "BeginSendText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{language, message, applicationStanzaNamespace, applicationStanzaBody, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::EndSendText
// Il2CppName: EndSendText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::ChannelSession::EndSendText)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "EndSendText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::get_MessageLog
// Il2CppName: get_MessageLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IChannelTextMessage*>* (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::get_MessageLog)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "get_MessageLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::get_TranscribedLog
// Il2CppName: get_TranscribedLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::ITranscribedMessage*>* (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::get_TranscribedLog)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "get_TranscribedLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::BeginSessionArchiveQuery
// Il2CppName: BeginSessionArchiveQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::ChannelSession::*)(::System::Nullable_1<::System::DateTime>, ::System::Nullable_1<::System::DateTime>, ::StringW, ::VivoxUnity::AccountId*, uint, ::StringW, ::StringW, int, ::System::AsyncCallback*)>(&VivoxUnity::Private::ChannelSession::BeginSessionArchiveQuery)> {
  static const MethodInfo* get() {
    static auto* timeStart = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "DateTime")})->byval_arg;
    static auto* timeEnd = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "DateTime")})->byval_arg;
    static auto* searchText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userId = &::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* afterId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* beforeId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* firstMessageIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "BeginSessionArchiveQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeStart, timeEnd, searchText, userId, max, afterId, beforeId, firstMessageIndex, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::EndSessionArchiveQuery
// Il2CppName: EndSessionArchiveQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::ChannelSession::EndSessionArchiveQuery)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "EndSessionArchiveQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::get_SessionArchive
// Il2CppName: get_SessionArchive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::ISessionArchiveMessage*>* (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::get_SessionArchive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "get_SessionArchive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::get_SessionArchiveResult
// Il2CppName: get_SessionArchiveResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IArchiveQueryResult* (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::get_SessionArchiveResult)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "get_SessionArchiveResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::GetConnectToken
// Il2CppName: GetConnectToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::Private::ChannelSession::*)(::StringW, ::System::TimeSpan)>(&VivoxUnity::Private::ChannelSession::GetConnectToken)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* expiration = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "GetConnectToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, expiration});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::get_IsTransmitting
// Il2CppName: get_IsTransmitting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::get_IsTransmitting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "get_IsTransmitting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::get_IsSessionBeingTranscribed
// Il2CppName: get_IsSessionBeingTranscribed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::get_IsSessionBeingTranscribed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "get_IsSessionBeingTranscribed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::BeginSetChannelTranscription
// Il2CppName: BeginSetChannelTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::ChannelSession::*)(bool, ::StringW, ::System::AsyncCallback*)>(&VivoxUnity::Private::ChannelSession::BeginSetChannelTranscription)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* accessToken = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "BeginSetChannelTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, accessToken, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::EndSetChannelTranscription
// Il2CppName: EndSetChannelTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::ChannelSession::EndSetChannelTranscription)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "EndSetChannelTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::GetTranscriptionToken
// Il2CppName: GetTranscriptionToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::Private::ChannelSession::*)(::StringW, ::System::TimeSpan)>(&VivoxUnity::Private::ChannelSession::GetTranscriptionToken)> {
  static const MethodInfo* get() {
    static auto* tokenSigningKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* tokenExpirationDuration = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "GetTranscriptionToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tokenSigningKey, tokenExpirationDuration});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::get_Channel
// Il2CppName: get_Channel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::ChannelId* (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::get_Channel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "get_Channel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::Set3DPosition
// Il2CppName: Set3DPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&VivoxUnity::Private::ChannelSession::Set3DPosition)> {
  static const MethodInfo* get() {
    static auto* speakerPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* listenerPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* listenerAtOrient = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* listenerUpOrient = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "Set3DPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{speakerPos, listenerPos, listenerAtOrient, listenerUpOrient});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)()>(&VivoxUnity::Private::ChannelSession::Delete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::ChannelSession::$_ctor$b__19_0
// Il2CppName: <.ctor>b__19_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::ChannelSession::*)(::Il2CppObject*, ::System::ComponentModel::PropertyChangedEventArgs*)>(&VivoxUnity::Private::ChannelSession::$_ctor$b__19_0)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* args = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::ChannelSession*), "<.ctor>b__19_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, args});
  }
};
