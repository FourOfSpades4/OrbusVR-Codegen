// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VivoxUnity.Private.TextToSpeech
#include "VivoxUnity/Private/TextToSpeech.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: vx_tts_voice_t
  class vx_tts_voice_t;
}
// Forward declaring namespace: VivoxUnity::Private
namespace VivoxUnity::Private {
  // Forward declaring type: TTSVoice
  class TTSVoice;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::Private::TextToSpeech::$$c);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::Private::TextToSpeech::$$c*, "VivoxUnity.Private", "TextToSpeech/<>c");
// Type namespace: VivoxUnity.Private
namespace VivoxUnity::Private {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.Private.TextToSpeech/<>c
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: ABDB18
  class TextToSpeech::$$c : public ::Il2CppObject {
    public:
    // Get static field: static public readonly VivoxUnity.Private.TextToSpeech/<>c <>9
    static ::VivoxUnity::Private::TextToSpeech::$$c* _get_$$9();
    // Set static field: static public readonly VivoxUnity.Private.TextToSpeech/<>c <>9
    static void _set_$$9(::VivoxUnity::Private::TextToSpeech::$$c* value);
    // Get static field: static public System.Func`2<vx_tts_voice_t,VivoxUnity.Private.TTSVoice> <>9__14_0
    static ::System::Func_2<::GlobalNamespace::vx_tts_voice_t*, ::VivoxUnity::Private::TTSVoice*>* _get_$$9__14_0();
    // Set static field: static public System.Func`2<vx_tts_voice_t,VivoxUnity.Private.TTSVoice> <>9__14_0
    static void _set_$$9__14_0(::System::Func_2<::GlobalNamespace::vx_tts_voice_t*, ::VivoxUnity::Private::TTSVoice*>* value);
    // static private System.Void .cctor()
    // Offset: 0x12D84CC
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x12D8530
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextToSpeech::$$c* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Private::TextToSpeech::$$c::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextToSpeech::$$c*, creationType>()));
    }
    // VivoxUnity.Private.TTSVoice <get_AvailableVoices>b__14_0(vx_tts_voice_t v)
    // Offset: 0x12D8538
    ::VivoxUnity::Private::TTSVoice* $get_AvailableVoices$b__14_0(::GlobalNamespace::vx_tts_voice_t* v);
  }; // VivoxUnity.Private.TextToSpeech/<>c
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VivoxUnity::Private::TextToSpeech::$$c::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::$$c::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::Private::TextToSpeech::$$c::$get_AvailableVoices$b__14_0
// Il2CppName: <get_AvailableVoices>b__14_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::Private::TTSVoice* (VivoxUnity::Private::TextToSpeech::$$c::*)(::GlobalNamespace::vx_tts_voice_t*)>(&VivoxUnity::Private::TextToSpeech::$$c::$get_AvailableVoices$b__14_0)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("", "vx_tts_voice_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::TextToSpeech::$$c*), "<get_AvailableVoices>b__14_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
