// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VivoxUnity.IAudioDevices
#include "VivoxUnity/IAudioDevices.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VivoxUnity::Private
namespace VivoxUnity::Private {
  // Forward declaring type: AudioDevice
  class AudioDevice;
}
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: VxClient
  class VxClient;
  // Forward declaring type: IAudioDevice
  class IAudioDevice;
  // Forward declaring type: IReadOnlyDictionary`2<TK, T>
  template<typename TK, typename T>
  class IReadOnlyDictionary_2;
}
// Forward declaring namespace: VivoxUnity::Common
namespace VivoxUnity::Common {
  // Forward declaring type: ReadWriteDictionary`3<TK, TI, T>
  template<typename TK, typename TI, typename T>
  class ReadWriteDictionary_3;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: PropertyChangedEventHandler
  class PropertyChangedEventHandler;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: vx_evt_base_t
  class vx_evt_base_t;
}
// Completed forward declares
// Type namespace: VivoxUnity.Private
namespace VivoxUnity::Private {
  // Forward declaring type: AudioOutputDevices
  class AudioOutputDevices;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::Private::AudioOutputDevices);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::Private::AudioOutputDevices*, "VivoxUnity.Private", "AudioOutputDevices");
// Type namespace: VivoxUnity.Private
namespace VivoxUnity::Private {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.Private.AudioOutputDevices
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioOutputDevices : public ::Il2CppObject/*, public ::VivoxUnity::IAudioDevices*/ {
    public:
    // Nested type: ::VivoxUnity::Private::AudioOutputDevices::$$c__DisplayClass23_0
    class $$c__DisplayClass23_0;
    // Nested type: ::VivoxUnity::Private::AudioOutputDevices::$$c__DisplayClass27_0
    class $$c__DisplayClass27_0;
    // Nested type: ::VivoxUnity::Private::AudioOutputDevices::$$c__DisplayClass30_0
    class $$c__DisplayClass30_0;
    // Nested type: ::VivoxUnity::Private::AudioOutputDevices::$$c__DisplayClass31_0
    class $$c__DisplayClass31_0;
    public:
    // private VivoxUnity.Private.AudioDevice _systemDevice
    // Size: 0x8
    // Offset: 0x10
    ::VivoxUnity::Private::AudioDevice* systemDevice;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Private::AudioDevice*) == 0x8);
    // private VivoxUnity.Private.AudioDevice _communicationDevice
    // Size: 0x8
    // Offset: 0x18
    ::VivoxUnity::Private::AudioDevice* communicationDevice;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Private::AudioDevice*) == 0x8);
    // private VivoxUnity.Private.AudioDevice _activeDevice
    // Size: 0x8
    // Offset: 0x20
    ::VivoxUnity::Private::AudioDevice* activeDevice;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Private::AudioDevice*) == 0x8);
    // private VivoxUnity.Private.AudioDevice _effectiveDevice
    // Size: 0x8
    // Offset: 0x28
    ::VivoxUnity::Private::AudioDevice* effectiveDevice;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Private::AudioDevice*) == 0x8);
    // private System.Int32 _volumeAdjustment
    // Size: 0x4
    // Offset: 0x30
    int volumeAdjustment;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _muted
    // Size: 0x1
    // Offset: 0x34
    bool muted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: muted and: client
    char __padding5[0x3] = {};
    // private readonly VivoxUnity.VxClient _client
    // Size: 0x8
    // Offset: 0x38
    ::VivoxUnity::VxClient* client;
    // Field size check
    static_assert(sizeof(::VivoxUnity::VxClient*) == 0x8);
    // private readonly VivoxUnity.Common.ReadWriteDictionary`3<System.String,VivoxUnity.IAudioDevice,VivoxUnity.Private.AudioDevice> _devices
    // Size: 0x8
    // Offset: 0x40
    ::VivoxUnity::Common::ReadWriteDictionary_3<::StringW, ::VivoxUnity::IAudioDevice*, ::VivoxUnity::Private::AudioDevice*>* devices;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteDictionary_3<::StringW, ::VivoxUnity::IAudioDevice*, ::VivoxUnity::Private::AudioDevice*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABDFC8
    // private System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    // Size: 0x8
    // Offset: 0x48
    ::System::ComponentModel::PropertyChangedEventHandler* PropertyChanged;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::PropertyChangedEventHandler*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::VivoxUnity::IAudioDevices
    operator ::VivoxUnity::IAudioDevices() noexcept {
      return *reinterpret_cast<::VivoxUnity::IAudioDevices*>(this);
    }
    // Get instance field reference: private VivoxUnity.Private.AudioDevice _systemDevice
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Private::AudioDevice*& dyn__systemDevice();
    // Get instance field reference: private VivoxUnity.Private.AudioDevice _communicationDevice
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Private::AudioDevice*& dyn__communicationDevice();
    // Get instance field reference: private VivoxUnity.Private.AudioDevice _activeDevice
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Private::AudioDevice*& dyn__activeDevice();
    // Get instance field reference: private VivoxUnity.Private.AudioDevice _effectiveDevice
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Private::AudioDevice*& dyn__effectiveDevice();
    // Get instance field reference: private System.Int32 _volumeAdjustment
    [[deprecated("Use field access instead!")]] int& dyn__volumeAdjustment();
    // Get instance field reference: private System.Boolean _muted
    [[deprecated("Use field access instead!")]] bool& dyn__muted();
    // Get instance field reference: private readonly VivoxUnity.VxClient _client
    [[deprecated("Use field access instead!")]] ::VivoxUnity::VxClient*& dyn__client();
    // Get instance field reference: private readonly VivoxUnity.Common.ReadWriteDictionary`3<System.String,VivoxUnity.IAudioDevice,VivoxUnity.Private.AudioDevice> _devices
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteDictionary_3<::StringW, ::VivoxUnity::IAudioDevice*, ::VivoxUnity::Private::AudioDevice*>*& dyn__devices();
    // Get instance field reference: private System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::PropertyChangedEventHandler*& dyn_PropertyChanged();
    // private System.Int32 ConvertGain(System.Int32 gain)
    // Offset: 0x14BC554
    int ConvertGain(int gain);
    // public System.Void .ctor(VivoxUnity.VxClient client)
    // Offset: 0x14B87B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioOutputDevices* New_ctor(::VivoxUnity::VxClient* client) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Private::AudioOutputDevices::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioOutputDevices*, creationType>(client)));
    }
    // public System.Void add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value)
    // Offset: 0x14BC55C
    void add_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value);
    // public System.Void remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value)
    // Offset: 0x14BC648
    void remove_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value);
    // public VivoxUnity.IAudioDevice get_SystemDevice()
    // Offset: 0x14BC734
    ::VivoxUnity::IAudioDevice* get_SystemDevice();
    // public VivoxUnity.IAudioDevice get_CommunicationDevice()
    // Offset: 0x14BC73C
    ::VivoxUnity::IAudioDevice* get_CommunicationDevice();
    // public VivoxUnity.IAudioDevice get_ActiveDevice()
    // Offset: 0x14BC744
    ::VivoxUnity::IAudioDevice* get_ActiveDevice();
    // public VivoxUnity.IAudioDevice get_EffectiveDevice()
    // Offset: 0x14BC74C
    ::VivoxUnity::IAudioDevice* get_EffectiveDevice();
    // public VivoxUnity.IReadOnlyDictionary`2<System.String,VivoxUnity.IAudioDevice> get_AvailableDevices()
    // Offset: 0x14BC754
    ::VivoxUnity::IReadOnlyDictionary_2<::StringW, ::VivoxUnity::IAudioDevice*>* get_AvailableDevices();
    // public System.IAsyncResult BeginSetActiveDevice(VivoxUnity.IAudioDevice device, System.AsyncCallback callback)
    // Offset: 0x14BC75C
    ::System::IAsyncResult* BeginSetActiveDevice(::VivoxUnity::IAudioDevice* device, ::System::AsyncCallback* callback);
    // public System.Void EndSetActiveDevice(System.IAsyncResult result)
    // Offset: 0x14BC9DC
    void EndSetActiveDevice(::System::IAsyncResult* result);
    // public System.Int32 get_VolumeAdjustment()
    // Offset: 0x14BCB2C
    int get_VolumeAdjustment();
    // public System.Void set_VolumeAdjustment(System.Int32 value)
    // Offset: 0x14BCB34
    void set_VolumeAdjustment(int value);
    // public System.Boolean get_Muted()
    // Offset: 0x14BCD14
    bool get_Muted();
    // public System.Void set_Muted(System.Boolean value)
    // Offset: 0x14BCD1C
    void set_Muted(bool value);
    // public System.IAsyncResult BeginRefresh(System.AsyncCallback callback)
    // Offset: 0x14BCEB4
    ::System::IAsyncResult* BeginRefresh(::System::AsyncCallback* callback);
    // public System.Void EndRefresh(System.IAsyncResult result)
    // Offset: 0x14BD024
    void EndRefresh(::System::IAsyncResult* result);
    // private System.Void OnEventMessageReceived(vx_evt_base_t eventMessage)
    // Offset: 0x14BD0AC
    void OnEventMessageReceived(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleDeviceHotSwap(vx_evt_base_t eventMessage)
    // Offset: 0x14BD0FC
    void HandleDeviceHotSwap(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // public System.Void Clear()
    // Offset: 0x14B7740
    void Clear();
    // private System.Void <HandleDeviceHotSwap>b__34_0(System.IAsyncResult result)
    // Offset: 0x14BD170
    void $HandleDeviceHotSwap$b__34_0(::System::IAsyncResult* result);
  }; // VivoxUnity.Private.AudioOutputDevices
  #pragma pack(pop)
  static check_size<sizeof(AudioOutputDevices), 72 + sizeof(::System::ComponentModel::PropertyChangedEventHandler*)> __VivoxUnity_Private_AudioOutputDevicesSizeCheck;
  static_assert(sizeof(AudioOutputDevices) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::ConvertGain
// Il2CppName: ConvertGain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VivoxUnity::Private::AudioOutputDevices::*)(int)>(&VivoxUnity::Private::AudioOutputDevices::ConvertGain)> {
  static const MethodInfo* get() {
    static auto* gain = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "ConvertGain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gain});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::add_PropertyChanged
// Il2CppName: add_PropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::AudioOutputDevices::*)(::System::ComponentModel::PropertyChangedEventHandler*)>(&VivoxUnity::Private::AudioOutputDevices::add_PropertyChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "add_PropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::remove_PropertyChanged
// Il2CppName: remove_PropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::AudioOutputDevices::*)(::System::ComponentModel::PropertyChangedEventHandler*)>(&VivoxUnity::Private::AudioOutputDevices::remove_PropertyChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "remove_PropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::get_SystemDevice
// Il2CppName: get_SystemDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IAudioDevice* (VivoxUnity::Private::AudioOutputDevices::*)()>(&VivoxUnity::Private::AudioOutputDevices::get_SystemDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "get_SystemDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::get_CommunicationDevice
// Il2CppName: get_CommunicationDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IAudioDevice* (VivoxUnity::Private::AudioOutputDevices::*)()>(&VivoxUnity::Private::AudioOutputDevices::get_CommunicationDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "get_CommunicationDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::get_ActiveDevice
// Il2CppName: get_ActiveDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IAudioDevice* (VivoxUnity::Private::AudioOutputDevices::*)()>(&VivoxUnity::Private::AudioOutputDevices::get_ActiveDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "get_ActiveDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::get_EffectiveDevice
// Il2CppName: get_EffectiveDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IAudioDevice* (VivoxUnity::Private::AudioOutputDevices::*)()>(&VivoxUnity::Private::AudioOutputDevices::get_EffectiveDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "get_EffectiveDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::get_AvailableDevices
// Il2CppName: get_AvailableDevices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyDictionary_2<::StringW, ::VivoxUnity::IAudioDevice*>* (VivoxUnity::Private::AudioOutputDevices::*)()>(&VivoxUnity::Private::AudioOutputDevices::get_AvailableDevices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "get_AvailableDevices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::BeginSetActiveDevice
// Il2CppName: BeginSetActiveDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::AudioOutputDevices::*)(::VivoxUnity::IAudioDevice*, ::System::AsyncCallback*)>(&VivoxUnity::Private::AudioOutputDevices::BeginSetActiveDevice)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("VivoxUnity", "IAudioDevice")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "BeginSetActiveDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::EndSetActiveDevice
// Il2CppName: EndSetActiveDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::AudioOutputDevices::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::AudioOutputDevices::EndSetActiveDevice)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "EndSetActiveDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::get_VolumeAdjustment
// Il2CppName: get_VolumeAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VivoxUnity::Private::AudioOutputDevices::*)()>(&VivoxUnity::Private::AudioOutputDevices::get_VolumeAdjustment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "get_VolumeAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::set_VolumeAdjustment
// Il2CppName: set_VolumeAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::AudioOutputDevices::*)(int)>(&VivoxUnity::Private::AudioOutputDevices::set_VolumeAdjustment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "set_VolumeAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::get_Muted
// Il2CppName: get_Muted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::AudioOutputDevices::*)()>(&VivoxUnity::Private::AudioOutputDevices::get_Muted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "get_Muted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::set_Muted
// Il2CppName: set_Muted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::AudioOutputDevices::*)(bool)>(&VivoxUnity::Private::AudioOutputDevices::set_Muted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "set_Muted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::BeginRefresh
// Il2CppName: BeginRefresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::AudioOutputDevices::*)(::System::AsyncCallback*)>(&VivoxUnity::Private::AudioOutputDevices::BeginRefresh)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "BeginRefresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::EndRefresh
// Il2CppName: EndRefresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::AudioOutputDevices::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::AudioOutputDevices::EndRefresh)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "EndRefresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::OnEventMessageReceived
// Il2CppName: OnEventMessageReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::AudioOutputDevices::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::AudioOutputDevices::OnEventMessageReceived)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "OnEventMessageReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::HandleDeviceHotSwap
// Il2CppName: HandleDeviceHotSwap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::AudioOutputDevices::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::AudioOutputDevices::HandleDeviceHotSwap)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "HandleDeviceHotSwap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::AudioOutputDevices::*)()>(&VivoxUnity::Private::AudioOutputDevices::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::AudioOutputDevices::$HandleDeviceHotSwap$b__34_0
// Il2CppName: <HandleDeviceHotSwap>b__34_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::AudioOutputDevices::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::AudioOutputDevices::$HandleDeviceHotSwap$b__34_0)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::AudioOutputDevices*), "<HandleDeviceHotSwap>b__34_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
