// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VivoxUnity.ILoginSession
#include "VivoxUnity/ILoginSession.hpp"
// Including type: VivoxUnity.LoginState
#include "VivoxUnity/LoginState.hpp"
// Including type: VivoxUnity.TransmissionMode
#include "VivoxUnity/TransmissionMode.hpp"
// Including type: VivoxUnity.Presence
#include "VivoxUnity/Presence.hpp"
// Including type: VivoxUnity.ParticipantPropertyUpdateFrequency
#include "VivoxUnity/ParticipantPropertyUpdateFrequency.hpp"
// Including type: VivoxUnity.SubscriptionMode
#include "VivoxUnity/SubscriptionMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VivoxUnity::Private
namespace VivoxUnity::Private {
  // Forward declaring type: ChannelSession
  class ChannelSession;
  // Forward declaring type: PresenceSubscription
  class PresenceSubscription;
  // Forward declaring type: DirectedMessageResult
  class DirectedMessageResult;
  // Forward declaring type: ArchiveQueryResult
  class ArchiveQueryResult;
}
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: Client
  class Client;
  // Forward declaring type: ChannelId
  class ChannelId;
  // Forward declaring type: IChannelSession
  class IChannelSession;
  // Forward declaring type: AccountId
  class AccountId;
  // Forward declaring type: IPresenceSubscription
  class IPresenceSubscription;
  // Forward declaring type: IDirectedTextMessage
  class IDirectedTextMessage;
  // Forward declaring type: IFailedDirectedTextMessage
  class IFailedDirectedTextMessage;
  // Forward declaring type: IAccountArchiveMessage
  class IAccountArchiveMessage;
  // Forward declaring type: ITextToSpeech
  class ITextToSpeech;
  // Forward declaring type: IReadOnlyDictionary`2<TK, T>
  template<typename TK, typename T>
  class IReadOnlyDictionary_2;
  // Forward declaring type: IReadOnlyQueue`1<T>
  template<typename T>
  class IReadOnlyQueue_1;
  // Forward declaring type: IArchiveQueryResult
  class IArchiveQueryResult;
  // Forward declaring type: IDirectedMessageResult
  class IDirectedMessageResult;
  // Forward declaring type: IReadOnlyHashSet`1<T>
  template<typename T>
  class IReadOnlyHashSet_1;
  // Forward declaring type: AsyncNoResult
  class AsyncNoResult;
}
// Forward declaring namespace: VivoxUnity::Common
namespace VivoxUnity::Common {
  // Forward declaring type: ReadWriteDictionary`3<TK, TI, T>
  template<typename TK, typename TI, typename T>
  class ReadWriteDictionary_3;
  // Forward declaring type: ReadWriteHashSet`1<T>
  template<typename T>
  class ReadWriteHashSet_1;
  // Forward declaring type: ReadWriteQueue`1<T>
  template<typename T>
  class ReadWriteQueue_1;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: PropertyChangedEventHandler
  class PropertyChangedEventHandler;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: vx_evt_base_t
  class vx_evt_base_t;
  // Forward declaring type: vx_control_communications_operation
  struct vx_control_communications_operation;
  // Forward declaring type: vx_mute_scope
  struct vx_mute_scope;
  // Forward declaring type: vx_resp_account_control_communications_t
  class vx_resp_account_control_communications_t;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: TimeSpan
  struct TimeSpan;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: VivoxUnity.Private
namespace VivoxUnity::Private {
  // Forward declaring type: LoginSession
  class LoginSession;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::Private::LoginSession);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::Private::LoginSession*, "VivoxUnity.Private", "LoginSession");
// Type namespace: VivoxUnity.Private
namespace VivoxUnity::Private {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.Private.LoginSession
  // [TokenAttribute] Offset: FFFFFFFF
  class LoginSession : public ::Il2CppObject/*, public ::VivoxUnity::ILoginSession*/ {
    public:
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass70_0
    class $$c__DisplayClass70_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass70_1
    class $$c__DisplayClass70_1;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass85_0
    class $$c__DisplayClass85_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass87_0
    class $$c__DisplayClass87_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass89_0
    class $$c__DisplayClass89_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass93_0
    class $$c__DisplayClass93_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c
    class $$c;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass94_0
    class $$c__DisplayClass94_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass95_0
    class $$c__DisplayClass95_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass97_0
    class $$c__DisplayClass97_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass99_0
    class $$c__DisplayClass99_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass102_0
    class $$c__DisplayClass102_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass104_0
    class $$c__DisplayClass104_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass106_0
    class $$c__DisplayClass106_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass106_1
    class $$c__DisplayClass106_1;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass106_2
    class $$c__DisplayClass106_2;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass108_0
    class $$c__DisplayClass108_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass110_0
    class $$c__DisplayClass110_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass112_0
    class $$c__DisplayClass112_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass114_0
    class $$c__DisplayClass114_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass115_0
    class $$c__DisplayClass115_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass116_0
    class $$c__DisplayClass116_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass117_0
    class $$c__DisplayClass117_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass125_0
    class $$c__DisplayClass125_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass126_0
    class $$c__DisplayClass126_0;
    // Nested type: ::VivoxUnity::Private::LoginSession::$$c__DisplayClass127_0
    class $$c__DisplayClass127_0;
    public:
    // private readonly System.String _accountHandle
    // Size: 0x8
    // Offset: 0x10
    ::StringW accountHandle;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String _groupHandle
    // Size: 0x8
    // Offset: 0x18
    ::StringW groupHandle;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly VivoxUnity.Client _client
    // Size: 0x8
    // Offset: 0x20
    ::VivoxUnity::Client* client;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Client*) == 0x8);
    // private VivoxUnity.LoginState _state
    // Size: 0x4
    // Offset: 0x28
    ::VivoxUnity::LoginState state;
    // Field size check
    static_assert(sizeof(::VivoxUnity::LoginState) == 0x4);
    // private VivoxUnity.TransmissionMode _transmissionType
    // Size: 0x4
    // Offset: 0x2C
    ::VivoxUnity::TransmissionMode transmissionType;
    // Field size check
    static_assert(sizeof(::VivoxUnity::TransmissionMode) == 0x4);
    // private System.Boolean _isInjectingAudio
    // Size: 0x1
    // Offset: 0x30
    bool isInjectingAudio;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInjectingAudio and: channelSessions
    char __padding5[0x7] = {};
    // private readonly VivoxUnity.Common.ReadWriteDictionary`3<VivoxUnity.ChannelId,VivoxUnity.IChannelSession,VivoxUnity.Private.ChannelSession> _channelSessions
    // Size: 0x8
    // Offset: 0x38
    ::VivoxUnity::Common::ReadWriteDictionary_3<::VivoxUnity::ChannelId*, ::VivoxUnity::IChannelSession*, ::VivoxUnity::Private::ChannelSession*>* channelSessions;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteDictionary_3<::VivoxUnity::ChannelId*, ::VivoxUnity::IChannelSession*, ::VivoxUnity::Private::ChannelSession*>*) == 0x8);
    // private VivoxUnity.ChannelId _transmittingChannel
    // Size: 0x8
    // Offset: 0x40
    ::VivoxUnity::ChannelId* transmittingChannel;
    // Field size check
    static_assert(sizeof(::VivoxUnity::ChannelId*) == 0x8);
    // private readonly VivoxUnity.Common.ReadWriteHashSet`1<VivoxUnity.AccountId> _blockedSubscriptions
    // Size: 0x8
    // Offset: 0x48
    ::VivoxUnity::Common::ReadWriteHashSet_1<::VivoxUnity::AccountId*>* blockedSubscriptions;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteHashSet_1<::VivoxUnity::AccountId*>*) == 0x8);
    // private readonly VivoxUnity.Common.ReadWriteHashSet`1<VivoxUnity.AccountId> _allowedSubscriptions
    // Size: 0x8
    // Offset: 0x50
    ::VivoxUnity::Common::ReadWriteHashSet_1<::VivoxUnity::AccountId*>* allowedSubscriptions;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteHashSet_1<::VivoxUnity::AccountId*>*) == 0x8);
    // private readonly VivoxUnity.Common.ReadWriteDictionary`3<VivoxUnity.AccountId,VivoxUnity.IPresenceSubscription,VivoxUnity.Private.PresenceSubscription> _presenceSubscriptions
    // Size: 0x8
    // Offset: 0x58
    ::VivoxUnity::Common::ReadWriteDictionary_3<::VivoxUnity::AccountId*, ::VivoxUnity::IPresenceSubscription*, ::VivoxUnity::Private::PresenceSubscription*>* presenceSubscriptions;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteDictionary_3<::VivoxUnity::AccountId*, ::VivoxUnity::IPresenceSubscription*, ::VivoxUnity::Private::PresenceSubscription*>*) == 0x8);
    // private VivoxUnity.Presence _presence
    // Size: 0x10
    // Offset: 0x60
    ::VivoxUnity::Presence presence;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Presence) == 0x10);
    // private readonly VivoxUnity.Common.ReadWriteQueue`1<VivoxUnity.IDirectedTextMessage> _directedMessages
    // Size: 0x8
    // Offset: 0x70
    ::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::IDirectedTextMessage*>* directedMessages;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::IDirectedTextMessage*>*) == 0x8);
    // private readonly VivoxUnity.Common.ReadWriteQueue`1<VivoxUnity.IFailedDirectedTextMessage> _failedDirectedMessages
    // Size: 0x8
    // Offset: 0x78
    ::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::IFailedDirectedTextMessage*>* failedDirectedMessages;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::IFailedDirectedTextMessage*>*) == 0x8);
    // private readonly VivoxUnity.Common.ReadWriteQueue`1<VivoxUnity.IAccountArchiveMessage> _accountArchive
    // Size: 0x8
    // Offset: 0x80
    ::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::IAccountArchiveMessage*>* accountArchive;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::IAccountArchiveMessage*>*) == 0x8);
    // private System.DateTime lastMessageTime
    // Size: 0x8
    // Offset: 0x88
    ::System::DateTime lastMessageTime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private VivoxUnity.Private.DirectedMessageResult _directedMessageResult
    // Size: 0x8
    // Offset: 0x90
    ::VivoxUnity::Private::DirectedMessageResult* directedMessageResult;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Private::DirectedMessageResult*) == 0x8);
    // private VivoxUnity.Private.ArchiveQueryResult _accountArchiveResult
    // Size: 0x8
    // Offset: 0x98
    ::VivoxUnity::Private::ArchiveQueryResult* accountArchiveResult;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Private::ArchiveQueryResult*) == 0x8);
    // private VivoxUnity.Common.ReadWriteHashSet`1<VivoxUnity.AccountId> _crossMutedCommunications
    // Size: 0x8
    // Offset: 0xA0
    ::VivoxUnity::Common::ReadWriteHashSet_1<::VivoxUnity::AccountId*>* crossMutedCommunications;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteHashSet_1<::VivoxUnity::AccountId*>*) == 0x8);
    // private readonly VivoxUnity.Common.ReadWriteQueue`1<VivoxUnity.AccountId> _incomingSubscriptionRequests
    // Size: 0x8
    // Offset: 0xA8
    ::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::AccountId*>* incomingSubscriptionRequests;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::AccountId*>*) == 0x8);
    // private VivoxUnity.ParticipantPropertyUpdateFrequency _participantPropertyFrequency
    // Size: 0x4
    // Offset: 0xB0
    ::VivoxUnity::ParticipantPropertyUpdateFrequency participantPropertyFrequency;
    // Field size check
    static_assert(sizeof(::VivoxUnity::ParticipantPropertyUpdateFrequency) == 0x4);
    // Padding between fields: participantPropertyFrequency and: ttsSubSystem
    char __padding20[0x4] = {};
    // private readonly VivoxUnity.ITextToSpeech _ttsSubSystem
    // Size: 0x8
    // Offset: 0xB8
    ::VivoxUnity::ITextToSpeech* ttsSubSystem;
    // Field size check
    static_assert(sizeof(::VivoxUnity::ITextToSpeech*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE058
    // private System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    // Size: 0x8
    // Offset: 0xC0
    ::System::ComponentModel::PropertyChangedEventHandler* PropertyChanged;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::PropertyChangedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE068
    // private readonly VivoxUnity.AccountId <Key>k__BackingField
    // Size: 0x8
    // Offset: 0xC8
    ::VivoxUnity::AccountId* Key;
    // Field size check
    static_assert(sizeof(::VivoxUnity::AccountId*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::VivoxUnity::ILoginSession
    operator ::VivoxUnity::ILoginSession() noexcept {
      return *reinterpret_cast<::VivoxUnity::ILoginSession*>(this);
    }
    // Get instance field reference: private readonly System.String _accountHandle
    [[deprecated("Use field access instead!")]] ::StringW& dyn__accountHandle();
    // Get instance field reference: private readonly System.String _groupHandle
    [[deprecated("Use field access instead!")]] ::StringW& dyn__groupHandle();
    // Get instance field reference: private readonly VivoxUnity.Client _client
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Client*& dyn__client();
    // Get instance field reference: private VivoxUnity.LoginState _state
    [[deprecated("Use field access instead!")]] ::VivoxUnity::LoginState& dyn__state();
    // Get instance field reference: private VivoxUnity.TransmissionMode _transmissionType
    [[deprecated("Use field access instead!")]] ::VivoxUnity::TransmissionMode& dyn__transmissionType();
    // Get instance field reference: private System.Boolean _isInjectingAudio
    [[deprecated("Use field access instead!")]] bool& dyn__isInjectingAudio();
    // Get instance field reference: private readonly VivoxUnity.Common.ReadWriteDictionary`3<VivoxUnity.ChannelId,VivoxUnity.IChannelSession,VivoxUnity.Private.ChannelSession> _channelSessions
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteDictionary_3<::VivoxUnity::ChannelId*, ::VivoxUnity::IChannelSession*, ::VivoxUnity::Private::ChannelSession*>*& dyn__channelSessions();
    // Get instance field reference: private VivoxUnity.ChannelId _transmittingChannel
    [[deprecated("Use field access instead!")]] ::VivoxUnity::ChannelId*& dyn__transmittingChannel();
    // Get instance field reference: private readonly VivoxUnity.Common.ReadWriteHashSet`1<VivoxUnity.AccountId> _blockedSubscriptions
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteHashSet_1<::VivoxUnity::AccountId*>*& dyn__blockedSubscriptions();
    // Get instance field reference: private readonly VivoxUnity.Common.ReadWriteHashSet`1<VivoxUnity.AccountId> _allowedSubscriptions
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteHashSet_1<::VivoxUnity::AccountId*>*& dyn__allowedSubscriptions();
    // Get instance field reference: private readonly VivoxUnity.Common.ReadWriteDictionary`3<VivoxUnity.AccountId,VivoxUnity.IPresenceSubscription,VivoxUnity.Private.PresenceSubscription> _presenceSubscriptions
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteDictionary_3<::VivoxUnity::AccountId*, ::VivoxUnity::IPresenceSubscription*, ::VivoxUnity::Private::PresenceSubscription*>*& dyn__presenceSubscriptions();
    // Get instance field reference: private VivoxUnity.Presence _presence
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Presence& dyn__presence();
    // Get instance field reference: private readonly VivoxUnity.Common.ReadWriteQueue`1<VivoxUnity.IDirectedTextMessage> _directedMessages
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::IDirectedTextMessage*>*& dyn__directedMessages();
    // Get instance field reference: private readonly VivoxUnity.Common.ReadWriteQueue`1<VivoxUnity.IFailedDirectedTextMessage> _failedDirectedMessages
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::IFailedDirectedTextMessage*>*& dyn__failedDirectedMessages();
    // Get instance field reference: private readonly VivoxUnity.Common.ReadWriteQueue`1<VivoxUnity.IAccountArchiveMessage> _accountArchive
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::IAccountArchiveMessage*>*& dyn__accountArchive();
    // Get instance field reference: private System.DateTime lastMessageTime
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_lastMessageTime();
    // Get instance field reference: private VivoxUnity.Private.DirectedMessageResult _directedMessageResult
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Private::DirectedMessageResult*& dyn__directedMessageResult();
    // Get instance field reference: private VivoxUnity.Private.ArchiveQueryResult _accountArchiveResult
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Private::ArchiveQueryResult*& dyn__accountArchiveResult();
    // Get instance field reference: private VivoxUnity.Common.ReadWriteHashSet`1<VivoxUnity.AccountId> _crossMutedCommunications
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteHashSet_1<::VivoxUnity::AccountId*>*& dyn__crossMutedCommunications();
    // Get instance field reference: private readonly VivoxUnity.Common.ReadWriteQueue`1<VivoxUnity.AccountId> _incomingSubscriptionRequests
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteQueue_1<::VivoxUnity::AccountId*>*& dyn__incomingSubscriptionRequests();
    // Get instance field reference: private VivoxUnity.ParticipantPropertyUpdateFrequency _participantPropertyFrequency
    [[deprecated("Use field access instead!")]] ::VivoxUnity::ParticipantPropertyUpdateFrequency& dyn__participantPropertyFrequency();
    // Get instance field reference: private readonly VivoxUnity.ITextToSpeech _ttsSubSystem
    [[deprecated("Use field access instead!")]] ::VivoxUnity::ITextToSpeech*& dyn__ttsSubSystem();
    // Get instance field reference: private System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::PropertyChangedEventHandler*& dyn_PropertyChanged();
    // Get instance field reference: private readonly VivoxUnity.AccountId <Key>k__BackingField
    [[deprecated("Use field access instead!")]] ::VivoxUnity::AccountId*& dyn_$Key$k__BackingField();
    // public System.Void add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value)
    // Offset: 0x14B7DE8
    void add_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value);
    // public System.Void remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value)
    // Offset: 0x14C67B0
    void remove_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value);
    // System.Void .ctor(VivoxUnity.Client client, VivoxUnity.AccountId accountId)
    // Offset: 0x14B7AD8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoginSession* New_ctor(::VivoxUnity::Client* client, ::VivoxUnity::AccountId* accountId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Private::LoginSession::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoginSession*, creationType>(client, accountId)));
    }
    // private System.Void Instance_EventMessageReceived(vx_evt_base_t eventMessage)
    // Offset: 0x14C689C
    void Instance_EventMessageReceived(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // public System.Void HandleMediaComplete(vx_evt_base_t eventMessage)
    // Offset: 0x14C74AC
    void HandleMediaComplete(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleBuddyPresenceEvt(vx_evt_base_t eventMessage)
    // Offset: 0x14C6A38
    void HandleBuddyPresenceEvt(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleUserToUserMessage(vx_evt_base_t eventMessage)
    // Offset: 0x14C6D0C
    void HandleUserToUserMessage(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleAccountLoginStateChangeEvt(vx_evt_base_t eventMessage)
    // Offset: 0x14C69BC
    void HandleAccountLoginStateChangeEvt(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleSubscription(vx_evt_base_t eventMessage)
    // Offset: 0x14C6F04
    void HandleSubscription(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleAccountArchiveMessage(vx_evt_base_t eventMessage)
    // Offset: 0x14C6FF8
    void HandleAccountArchiveMessage(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleAccountArchiveQueryEnd(vx_evt_base_t eventMessage)
    // Offset: 0x14C7364
    void HandleAccountArchiveQueryEnd(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // private System.Void HandleAccountSendMessageFailed(vx_evt_base_t eventMessage)
    // Offset: 0x14C7508
    void HandleAccountSendMessageFailed(::GlobalNamespace::vx_evt_base_t* eventMessage);
    // System.String get_AccountHandle()
    // Offset: 0x14BFF50
    ::StringW get_AccountHandle();
    // public VivoxUnity.AccountId get_LoginSessionId()
    // Offset: 0x14C7904
    ::VivoxUnity::AccountId* get_LoginSessionId();
    // public VivoxUnity.ITextToSpeech get_TTS()
    // Offset: 0x14C7914
    ::VivoxUnity::ITextToSpeech* get_TTS();
    // public VivoxUnity.ParticipantPropertyUpdateFrequency get_ParticipantPropertyFrequency()
    // Offset: 0x14C791C
    ::VivoxUnity::ParticipantPropertyUpdateFrequency get_ParticipantPropertyFrequency();
    // public System.Void set_ParticipantPropertyFrequency(VivoxUnity.ParticipantPropertyUpdateFrequency value)
    // Offset: 0x14C7924
    void set_ParticipantPropertyFrequency(::VivoxUnity::ParticipantPropertyUpdateFrequency value);
    // public VivoxUnity.IReadOnlyDictionary`2<VivoxUnity.ChannelId,VivoxUnity.IChannelSession> get_ChannelSessions()
    // Offset: 0x14C7A14
    ::VivoxUnity::IReadOnlyDictionary_2<::VivoxUnity::ChannelId*, ::VivoxUnity::IChannelSession*>* get_ChannelSessions();
    // public VivoxUnity.ChannelId get_TransmittingChannel()
    // Offset: 0x14C7A1C
    ::VivoxUnity::ChannelId* get_TransmittingChannel();
    // public System.Void set_TransmittingChannel(VivoxUnity.ChannelId value)
    // Offset: 0x14C7A24
    void set_TransmittingChannel(::VivoxUnity::ChannelId* value);
    // public VivoxUnity.AccountId get_Key()
    // Offset: 0x14C790C
    ::VivoxUnity::AccountId* get_Key();
    // public VivoxUnity.LoginState get_State()
    // Offset: 0x14B9010
    ::VivoxUnity::LoginState get_State();
    // private System.Void set_State(VivoxUnity.LoginState value)
    // Offset: 0x14C7780
    void set_State(::VivoxUnity::LoginState value);
    // public System.Boolean get_IsInjectingAudio()
    // Offset: 0x14C7CAC
    bool get_IsInjectingAudio();
    // private System.Void set_IsInjectingAudio(System.Boolean value)
    // Offset: 0x14C76C8
    void set_IsInjectingAudio(bool value);
    // public VivoxUnity.IReadOnlyQueue`1<VivoxUnity.IDirectedTextMessage> get_DirectedMessages()
    // Offset: 0x14C7CB4
    ::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IDirectedTextMessage*>* get_DirectedMessages();
    // public VivoxUnity.IReadOnlyQueue`1<VivoxUnity.IFailedDirectedTextMessage> get_FailedDirectedMessages()
    // Offset: 0x14C7CBC
    ::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IFailedDirectedTextMessage*>* get_FailedDirectedMessages();
    // public VivoxUnity.IReadOnlyQueue`1<VivoxUnity.IAccountArchiveMessage> get_AccountArchive()
    // Offset: 0x14C7CC4
    ::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IAccountArchiveMessage*>* get_AccountArchive();
    // public VivoxUnity.IArchiveQueryResult get_AccountArchiveResult()
    // Offset: 0x14C7CCC
    ::VivoxUnity::IArchiveQueryResult* get_AccountArchiveResult();
    // public VivoxUnity.IDirectedMessageResult get_DirectedMessageResult()
    // Offset: 0x14C7CD4
    ::VivoxUnity::IDirectedMessageResult* get_DirectedMessageResult();
    // public VivoxUnity.Presence get_Presence()
    // Offset: 0x14C7CDC
    ::VivoxUnity::Presence get_Presence();
    // public System.Void set_Presence(VivoxUnity.Presence value)
    // Offset: 0x14C7CE8
    void set_Presence(::VivoxUnity::Presence value);
    // public VivoxUnity.IReadOnlyDictionary`2<VivoxUnity.AccountId,VivoxUnity.IPresenceSubscription> get_PresenceSubscriptions()
    // Offset: 0x14C7F50
    ::VivoxUnity::IReadOnlyDictionary_2<::VivoxUnity::AccountId*, ::VivoxUnity::IPresenceSubscription*>* get_PresenceSubscriptions();
    // public VivoxUnity.IReadOnlyHashSet`1<VivoxUnity.AccountId> get_BlockedSubscriptions()
    // Offset: 0x14C7F58
    ::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>* get_BlockedSubscriptions();
    // public VivoxUnity.IReadOnlyHashSet`1<VivoxUnity.AccountId> get_AllowedSubscriptions()
    // Offset: 0x14C7F60
    ::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>* get_AllowedSubscriptions();
    // public VivoxUnity.IReadOnlyQueue`1<VivoxUnity.AccountId> get_IncomingSubscriptionRequests()
    // Offset: 0x14C7F68
    ::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::AccountId*>* get_IncomingSubscriptionRequests();
    // public VivoxUnity.IReadOnlyHashSet`1<VivoxUnity.AccountId> get_CrossMutedCommunications()
    // Offset: 0x14C7F70
    ::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>* get_CrossMutedCommunications();
    // public VivoxUnity.TransmissionMode get_TransmissionType()
    // Offset: 0x14C7F78
    ::VivoxUnity::TransmissionMode get_TransmissionType();
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<VivoxUnity.ChannelId> get_TransmittingChannels()
    // Offset: 0x14C38DC
    ::System::Collections::ObjectModel::ReadOnlyCollection_1<::VivoxUnity::ChannelId*>* get_TransmittingChannels();
    // public System.IAsyncResult BeginLogin(System.Uri server, System.String accessToken, VivoxUnity.SubscriptionMode subscriptionMode, VivoxUnity.IReadOnlyHashSet`1<VivoxUnity.AccountId> presenceSubscriptions, VivoxUnity.IReadOnlyHashSet`1<VivoxUnity.AccountId> blockedPresenceSubscriptions, VivoxUnity.IReadOnlyHashSet`1<VivoxUnity.AccountId> allowedPresenceSubscriptions, System.AsyncCallback callback)
    // Offset: 0x14C7F80
    ::System::IAsyncResult* BeginLogin(::System::Uri* server, ::StringW accessToken, ::VivoxUnity::SubscriptionMode subscriptionMode, ::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>* presenceSubscriptions, ::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>* blockedPresenceSubscriptions, ::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>* allowedPresenceSubscriptions, ::System::AsyncCallback* callback);
    // public System.String GetLoginToken(System.String key, System.TimeSpan expiration)
    // Offset: 0x14C8140
    ::StringW GetLoginToken(::StringW key, ::System::TimeSpan expiration);
    // private System.Void Login(System.String accessToken, System.String connectorHandle, VivoxUnity.AsyncNoResult ar, System.Nullable`1<VivoxUnity.SubscriptionMode> mode)
    // Offset: 0x14C81F4
    void Login(::StringW accessToken, ::StringW connectorHandle, ::VivoxUnity::AsyncNoResult* ar, ::System::Nullable_1<::VivoxUnity::SubscriptionMode> mode);
    // public System.Void Logout()
    // Offset: 0x14C8528
    void Logout();
    // public System.IAsyncResult BeginLogin(System.Uri server, System.String accessToken, System.AsyncCallback callback)
    // Offset: 0x14C8604
    ::System::IAsyncResult* BeginLogin(::System::Uri* server, ::StringW accessToken, ::System::AsyncCallback* callback);
    // public System.Void EndLogin(System.IAsyncResult result)
    // Offset: 0x14C87A0
    void EndLogin(::System::IAsyncResult* result);
    // public VivoxUnity.IChannelSession GetChannelSession(VivoxUnity.ChannelId channelId)
    // Offset: 0x14C8828
    ::VivoxUnity::IChannelSession* GetChannelSession(::VivoxUnity::ChannelId* channelId);
    // public System.Void DeleteChannelSession(VivoxUnity.ChannelId channelId)
    // Offset: 0x14C8988
    void DeleteChannelSession(::VivoxUnity::ChannelId* channelId);
    // public System.Void StartAudioInjection(System.String audioFilePath)
    // Offset: 0x14C8AAC
    void StartAudioInjection(::StringW audioFilePath);
    // public System.Void StopAudioInjection()
    // Offset: 0x14C8D64
    void StopAudioInjection();
    // public System.IAsyncResult BeginAccountSetLoginProperties(VivoxUnity.ParticipantPropertyUpdateFrequency participantPropertyFrequency, System.AsyncCallback callback)
    // Offset: 0x14C8FF0
    ::System::IAsyncResult* BeginAccountSetLoginProperties(::VivoxUnity::ParticipantPropertyUpdateFrequency participantPropertyFrequency, ::System::AsyncCallback* callback);
    // public System.Void EndAccountSetLoginProperties(System.IAsyncResult result)
    // Offset: 0x14C91A8
    void EndAccountSetLoginProperties(::System::IAsyncResult* result);
    // public System.IAsyncResult BeginAddBlockedSubscription(VivoxUnity.AccountId userId, System.AsyncCallback callback)
    // Offset: 0x14C9248
    ::System::IAsyncResult* BeginAddBlockedSubscription(::VivoxUnity::AccountId* userId, ::System::AsyncCallback* callback);
    // public System.Void EndAddBlockedSubscription(System.IAsyncResult result)
    // Offset: 0x14C94A8
    void EndAddBlockedSubscription(::System::IAsyncResult* result);
    // public System.IAsyncResult BeginRemoveBlockedSubscription(VivoxUnity.AccountId userId, System.AsyncCallback callback)
    // Offset: 0x14C9548
    ::System::IAsyncResult* BeginRemoveBlockedSubscription(::VivoxUnity::AccountId* userId, ::System::AsyncCallback* callback);
    // public System.Void EndRemoveBlockedSubscription(System.IAsyncResult result)
    // Offset: 0x14C977C
    void EndRemoveBlockedSubscription(::System::IAsyncResult* result);
    // public System.IAsyncResult BeginSendDirectedMessage(VivoxUnity.AccountId userId, System.String message, System.AsyncCallback callback)
    // Offset: 0x14C981C
    ::System::IAsyncResult* BeginSendDirectedMessage(::VivoxUnity::AccountId* userId, ::StringW message, ::System::AsyncCallback* callback);
    // public System.IAsyncResult BeginSendDirectedMessage(VivoxUnity.AccountId userId, System.String language, System.String message, System.String applicationStanzaNamespace, System.String applicationStanzaBody, System.AsyncCallback callback)
    // Offset: 0x14C983C
    ::System::IAsyncResult* BeginSendDirectedMessage(::VivoxUnity::AccountId* userId, ::StringW language, ::StringW message, ::StringW applicationStanzaNamespace, ::StringW applicationStanzaBody, ::System::AsyncCallback* callback);
    // public System.Void EndSendDirectedMessage(System.IAsyncResult result)
    // Offset: 0x14C9B2C
    void EndSendDirectedMessage(::System::IAsyncResult* result);
    // public System.IAsyncResult BeginAccountArchiveQuery(System.Nullable`1<System.DateTime> timeStart, System.Nullable`1<System.DateTime> timeEnd, System.String searchText, VivoxUnity.AccountId userId, VivoxUnity.ChannelId channel, System.UInt32 max, System.String afterId, System.String beforeId, System.Int32 firstMessageIndex, System.AsyncCallback callback)
    // Offset: 0x14C9C6C
    ::System::IAsyncResult* BeginAccountArchiveQuery(::System::Nullable_1<::System::DateTime> timeStart, ::System::Nullable_1<::System::DateTime> timeEnd, ::StringW searchText, ::VivoxUnity::AccountId* userId, ::VivoxUnity::ChannelId* channel, uint max, ::StringW afterId, ::StringW beforeId, int firstMessageIndex, ::System::AsyncCallback* callback);
    // public System.Void EndAccountArchiveQuery(System.IAsyncResult result)
    // Offset: 0x14CA2B8
    void EndAccountArchiveQuery(::System::IAsyncResult* result);
    // public System.IAsyncResult BeginAddAllowedSubscription(VivoxUnity.AccountId userId, System.AsyncCallback callback)
    // Offset: 0x14CA358
    ::System::IAsyncResult* BeginAddAllowedSubscription(::VivoxUnity::AccountId* userId, ::System::AsyncCallback* callback);
    // public System.Void EndAddAllowedSubscription(System.IAsyncResult result)
    // Offset: 0x14CA76C
    void EndAddAllowedSubscription(::System::IAsyncResult* result);
    // public System.IAsyncResult BeginRemoveAllowedSubscription(VivoxUnity.AccountId userId, System.AsyncCallback callback)
    // Offset: 0x14CA80C
    ::System::IAsyncResult* BeginRemoveAllowedSubscription(::VivoxUnity::AccountId* userId, ::System::AsyncCallback* callback);
    // public System.Void EndRemoveAllowedSubscription(System.IAsyncResult result)
    // Offset: 0x14CAA40
    void EndRemoveAllowedSubscription(::System::IAsyncResult* result);
    // public System.IAsyncResult BeginAddPresenceSubscription(VivoxUnity.AccountId userId, System.AsyncCallback callback)
    // Offset: 0x14CAAE0
    ::System::IAsyncResult* BeginAddPresenceSubscription(::VivoxUnity::AccountId* userId, ::System::AsyncCallback* callback);
    // public VivoxUnity.IPresenceSubscription EndAddPresenceSubscription(System.IAsyncResult result)
    // Offset: 0x14CAD60
    ::VivoxUnity::IPresenceSubscription* EndAddPresenceSubscription(::System::IAsyncResult* result);
    // public System.IAsyncResult BeginRemovePresenceSubscription(VivoxUnity.AccountId userId, System.AsyncCallback callback)
    // Offset: 0x14CAE10
    ::System::IAsyncResult* BeginRemovePresenceSubscription(::VivoxUnity::AccountId* userId, ::System::AsyncCallback* callback);
    // public System.Void EndRemovePresenceSubscription(System.IAsyncResult result)
    // Offset: 0x14CB048
    void EndRemovePresenceSubscription(::System::IAsyncResult* result);
    // public System.IAsyncResult SetCrossMutedCommunications(VivoxUnity.AccountId accountId, System.Boolean muted, System.AsyncCallback callback)
    // Offset: 0x14CB0E8
    ::System::IAsyncResult* SetCrossMutedCommunications(::VivoxUnity::AccountId* accountId, bool muted, ::System::AsyncCallback* callback);
    // public System.IAsyncResult SetCrossMutedCommunications(System.Collections.Generic.List`1<VivoxUnity.AccountId> accountIdSet, System.Boolean muted, System.AsyncCallback callback)
    // Offset: 0x14CB470
    ::System::IAsyncResult* SetCrossMutedCommunications(::System::Collections::Generic::List_1<::VivoxUnity::AccountId*>* accountIdSet, bool muted, ::System::AsyncCallback* callback);
    // public System.IAsyncResult ClearCrossMutedCommunications(System.AsyncCallback callback)
    // Offset: 0x14CB830
    ::System::IAsyncResult* ClearCrossMutedCommunications(::System::AsyncCallback* callback);
    // private System.Void SendCrossMuteOperationRequest(vx_control_communications_operation controlOp, System.String userURIs, vx_mute_scope muteScope, System.Action`1<vx_resp_account_control_communications_t> callback)
    // Offset: 0x14CB2A4
    void SendCrossMuteOperationRequest(::GlobalNamespace::vx_control_communications_operation controlOp, ::StringW userURIs, ::GlobalNamespace::vx_mute_scope muteScope, ::System::Action_1<::GlobalNamespace::vx_resp_account_control_communications_t*>* callback);
    // private System.Void SendCrossMuteOperationRequest(vx_control_communications_operation controlOp, System.Collections.Generic.List`1<VivoxUnity.AccountId> users, vx_mute_scope muteScope, System.Action`1<vx_resp_account_control_communications_t> callback)
    // Offset: 0x14CB5D0
    void SendCrossMuteOperationRequest(::GlobalNamespace::vx_control_communications_operation controlOp, ::System::Collections::Generic::List_1<::VivoxUnity::AccountId*>* users, ::GlobalNamespace::vx_mute_scope muteScope, ::System::Action_1<::GlobalNamespace::vx_resp_account_control_communications_t*>* callback);
    // private System.Void AssertLoggedIn()
    // Offset: 0x14C7838
    void AssertLoggedIn();
    // private System.Void AssertLoggedOut()
    // Offset: 0x14C794C
    void AssertLoggedOut();
    // System.Void ClearTransmittingChannel(VivoxUnity.ChannelId channelId)
    // Offset: 0x14C24E4
    void ClearTransmittingChannel(::VivoxUnity::ChannelId* channelId);
    // private System.Void Cleanup()
    // Offset: 0x14C7AF4
    void Cleanup();
    // public System.Void SetTransmissionMode(VivoxUnity.TransmissionMode mode, VivoxUnity.ChannelId singleChannel)
    // Offset: 0x14C1A20
    void SetTransmissionMode(::VivoxUnity::TransmissionMode mode, ::VivoxUnity::ChannelId* singleChannel);
    // public System.Void SetTransmission()
    // Offset: 0x14C1E58
    void SetTransmission();
    // private System.Void SetTransmitting(VivoxUnity.ChannelId channel)
    // Offset: 0x14CBA94
    void SetTransmitting(::VivoxUnity::ChannelId* channel);
    // private System.Void SetNoSessionTransmitting()
    // Offset: 0x14CB948
    void SetNoSessionTransmitting();
    // private System.Void SetAllSessionsTransmitting()
    // Offset: 0x14CBCD8
    void SetAllSessionsTransmitting();
  }; // VivoxUnity.Private.LoginSession
  #pragma pack(pop)
  static check_size<sizeof(LoginSession), 200 + sizeof(::VivoxUnity::AccountId*)> __VivoxUnity_Private_LoginSessionSizeCheck;
  static_assert(sizeof(LoginSession) == 0xD0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::add_PropertyChanged
// Il2CppName: add_PropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::System::ComponentModel::PropertyChangedEventHandler*)>(&VivoxUnity::Private::LoginSession::add_PropertyChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "add_PropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::remove_PropertyChanged
// Il2CppName: remove_PropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::System::ComponentModel::PropertyChangedEventHandler*)>(&VivoxUnity::Private::LoginSession::remove_PropertyChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "remove_PropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::Instance_EventMessageReceived
// Il2CppName: Instance_EventMessageReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::LoginSession::Instance_EventMessageReceived)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "Instance_EventMessageReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::HandleMediaComplete
// Il2CppName: HandleMediaComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::LoginSession::HandleMediaComplete)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "HandleMediaComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::HandleBuddyPresenceEvt
// Il2CppName: HandleBuddyPresenceEvt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::LoginSession::HandleBuddyPresenceEvt)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "HandleBuddyPresenceEvt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::HandleUserToUserMessage
// Il2CppName: HandleUserToUserMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::LoginSession::HandleUserToUserMessage)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "HandleUserToUserMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::HandleAccountLoginStateChangeEvt
// Il2CppName: HandleAccountLoginStateChangeEvt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::LoginSession::HandleAccountLoginStateChangeEvt)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "HandleAccountLoginStateChangeEvt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::HandleSubscription
// Il2CppName: HandleSubscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::LoginSession::HandleSubscription)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "HandleSubscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::HandleAccountArchiveMessage
// Il2CppName: HandleAccountArchiveMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::LoginSession::HandleAccountArchiveMessage)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "HandleAccountArchiveMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::HandleAccountArchiveQueryEnd
// Il2CppName: HandleAccountArchiveQueryEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::LoginSession::HandleAccountArchiveQueryEnd)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "HandleAccountArchiveQueryEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::HandleAccountSendMessageFailed
// Il2CppName: HandleAccountSendMessageFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::GlobalNamespace::vx_evt_base_t*)>(&VivoxUnity::Private::LoginSession::HandleAccountSendMessageFailed)> {
  static const MethodInfo* get() {
    static auto* eventMessage = &::il2cpp_utils::GetClassFromName("", "vx_evt_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "HandleAccountSendMessageFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventMessage});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_AccountHandle
// Il2CppName: get_AccountHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_AccountHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_AccountHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_LoginSessionId
// Il2CppName: get_LoginSessionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::AccountId* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_LoginSessionId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_LoginSessionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_TTS
// Il2CppName: get_TTS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::ITextToSpeech* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_TTS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_TTS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_ParticipantPropertyFrequency
// Il2CppName: get_ParticipantPropertyFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::ParticipantPropertyUpdateFrequency (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_ParticipantPropertyFrequency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_ParticipantPropertyFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::set_ParticipantPropertyFrequency
// Il2CppName: set_ParticipantPropertyFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::ParticipantPropertyUpdateFrequency)>(&VivoxUnity::Private::LoginSession::set_ParticipantPropertyFrequency)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ParticipantPropertyUpdateFrequency")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "set_ParticipantPropertyFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_ChannelSessions
// Il2CppName: get_ChannelSessions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyDictionary_2<::VivoxUnity::ChannelId*, ::VivoxUnity::IChannelSession*>* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_ChannelSessions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_ChannelSessions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_TransmittingChannel
// Il2CppName: get_TransmittingChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::ChannelId* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_TransmittingChannel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_TransmittingChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::set_TransmittingChannel
// Il2CppName: set_TransmittingChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::ChannelId*)>(&VivoxUnity::Private::LoginSession::set_TransmittingChannel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ChannelId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "set_TransmittingChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::AccountId* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::LoginState (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::set_State
// Il2CppName: set_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::LoginState)>(&VivoxUnity::Private::LoginSession::set_State)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity", "LoginState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "set_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_IsInjectingAudio
// Il2CppName: get_IsInjectingAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_IsInjectingAudio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_IsInjectingAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::set_IsInjectingAudio
// Il2CppName: set_IsInjectingAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(bool)>(&VivoxUnity::Private::LoginSession::set_IsInjectingAudio)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "set_IsInjectingAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_DirectedMessages
// Il2CppName: get_DirectedMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IDirectedTextMessage*>* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_DirectedMessages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_DirectedMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_FailedDirectedMessages
// Il2CppName: get_FailedDirectedMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IFailedDirectedTextMessage*>* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_FailedDirectedMessages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_FailedDirectedMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_AccountArchive
// Il2CppName: get_AccountArchive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::IAccountArchiveMessage*>* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_AccountArchive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_AccountArchive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_AccountArchiveResult
// Il2CppName: get_AccountArchiveResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IArchiveQueryResult* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_AccountArchiveResult)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_AccountArchiveResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_DirectedMessageResult
// Il2CppName: get_DirectedMessageResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IDirectedMessageResult* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_DirectedMessageResult)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_DirectedMessageResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_Presence
// Il2CppName: get_Presence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::Presence (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_Presence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_Presence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::set_Presence
// Il2CppName: set_Presence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::Presence)>(&VivoxUnity::Private::LoginSession::set_Presence)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity", "Presence")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "set_Presence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_PresenceSubscriptions
// Il2CppName: get_PresenceSubscriptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyDictionary_2<::VivoxUnity::AccountId*, ::VivoxUnity::IPresenceSubscription*>* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_PresenceSubscriptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_PresenceSubscriptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_BlockedSubscriptions
// Il2CppName: get_BlockedSubscriptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_BlockedSubscriptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_BlockedSubscriptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_AllowedSubscriptions
// Il2CppName: get_AllowedSubscriptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_AllowedSubscriptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_AllowedSubscriptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_IncomingSubscriptionRequests
// Il2CppName: get_IncomingSubscriptionRequests
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyQueue_1<::VivoxUnity::AccountId*>* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_IncomingSubscriptionRequests)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_IncomingSubscriptionRequests", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_CrossMutedCommunications
// Il2CppName: get_CrossMutedCommunications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_CrossMutedCommunications)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_CrossMutedCommunications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_TransmissionType
// Il2CppName: get_TransmissionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::TransmissionMode (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_TransmissionType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_TransmissionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::get_TransmittingChannels
// Il2CppName: get_TransmittingChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ObjectModel::ReadOnlyCollection_1<::VivoxUnity::ChannelId*>* (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::get_TransmittingChannels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "get_TransmittingChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::BeginLogin
// Il2CppName: BeginLogin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::LoginSession::*)(::System::Uri*, ::StringW, ::VivoxUnity::SubscriptionMode, ::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>*, ::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>*, ::VivoxUnity::IReadOnlyHashSet_1<::VivoxUnity::AccountId*>*, ::System::AsyncCallback*)>(&VivoxUnity::Private::LoginSession::BeginLogin)> {
  static const MethodInfo* get() {
    static auto* server = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* accessToken = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* subscriptionMode = &::il2cpp_utils::GetClassFromName("VivoxUnity", "SubscriptionMode")->byval_arg;
    static auto* presenceSubscriptions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("VivoxUnity", "IReadOnlyHashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")})->byval_arg;
    static auto* blockedPresenceSubscriptions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("VivoxUnity", "IReadOnlyHashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")})->byval_arg;
    static auto* allowedPresenceSubscriptions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("VivoxUnity", "IReadOnlyHashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")})->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "BeginLogin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{server, accessToken, subscriptionMode, presenceSubscriptions, blockedPresenceSubscriptions, allowedPresenceSubscriptions, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::GetLoginToken
// Il2CppName: GetLoginToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::Private::LoginSession::*)(::StringW, ::System::TimeSpan)>(&VivoxUnity::Private::LoginSession::GetLoginToken)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* expiration = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "GetLoginToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, expiration});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::Login
// Il2CppName: Login
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::StringW, ::StringW, ::VivoxUnity::AsyncNoResult*, ::System::Nullable_1<::VivoxUnity::SubscriptionMode>)>(&VivoxUnity::Private::LoginSession::Login)> {
  static const MethodInfo* get() {
    static auto* accessToken = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* connectorHandle = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ar = &::il2cpp_utils::GetClassFromName("VivoxUnity", "AsyncNoResult")->byval_arg;
    static auto* mode = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VivoxUnity", "SubscriptionMode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "Login", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{accessToken, connectorHandle, ar, mode});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::Logout
// Il2CppName: Logout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::Logout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "Logout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::BeginLogin
// Il2CppName: BeginLogin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::LoginSession::*)(::System::Uri*, ::StringW, ::System::AsyncCallback*)>(&VivoxUnity::Private::LoginSession::BeginLogin)> {
  static const MethodInfo* get() {
    static auto* server = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* accessToken = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "BeginLogin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{server, accessToken, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::EndLogin
// Il2CppName: EndLogin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::LoginSession::EndLogin)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "EndLogin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::GetChannelSession
// Il2CppName: GetChannelSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IChannelSession* (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::ChannelId*)>(&VivoxUnity::Private::LoginSession::GetChannelSession)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ChannelId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "GetChannelSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::DeleteChannelSession
// Il2CppName: DeleteChannelSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::ChannelId*)>(&VivoxUnity::Private::LoginSession::DeleteChannelSession)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ChannelId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "DeleteChannelSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::StartAudioInjection
// Il2CppName: StartAudioInjection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::StringW)>(&VivoxUnity::Private::LoginSession::StartAudioInjection)> {
  static const MethodInfo* get() {
    static auto* audioFilePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "StartAudioInjection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioFilePath});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::StopAudioInjection
// Il2CppName: StopAudioInjection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::StopAudioInjection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "StopAudioInjection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::BeginAccountSetLoginProperties
// Il2CppName: BeginAccountSetLoginProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::ParticipantPropertyUpdateFrequency, ::System::AsyncCallback*)>(&VivoxUnity::Private::LoginSession::BeginAccountSetLoginProperties)> {
  static const MethodInfo* get() {
    static auto* participantPropertyFrequency = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ParticipantPropertyUpdateFrequency")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "BeginAccountSetLoginProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{participantPropertyFrequency, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::EndAccountSetLoginProperties
// Il2CppName: EndAccountSetLoginProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::LoginSession::EndAccountSetLoginProperties)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "EndAccountSetLoginProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::BeginAddBlockedSubscription
// Il2CppName: BeginAddBlockedSubscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::AccountId*, ::System::AsyncCallback*)>(&VivoxUnity::Private::LoginSession::BeginAddBlockedSubscription)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "BeginAddBlockedSubscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::EndAddBlockedSubscription
// Il2CppName: EndAddBlockedSubscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::LoginSession::EndAddBlockedSubscription)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "EndAddBlockedSubscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::BeginRemoveBlockedSubscription
// Il2CppName: BeginRemoveBlockedSubscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::AccountId*, ::System::AsyncCallback*)>(&VivoxUnity::Private::LoginSession::BeginRemoveBlockedSubscription)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "BeginRemoveBlockedSubscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::EndRemoveBlockedSubscription
// Il2CppName: EndRemoveBlockedSubscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::LoginSession::EndRemoveBlockedSubscription)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "EndRemoveBlockedSubscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::BeginSendDirectedMessage
// Il2CppName: BeginSendDirectedMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::AccountId*, ::StringW, ::System::AsyncCallback*)>(&VivoxUnity::Private::LoginSession::BeginSendDirectedMessage)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "BeginSendDirectedMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, message, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::BeginSendDirectedMessage
// Il2CppName: BeginSendDirectedMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::AccountId*, ::StringW, ::StringW, ::StringW, ::StringW, ::System::AsyncCallback*)>(&VivoxUnity::Private::LoginSession::BeginSendDirectedMessage)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")->byval_arg;
    static auto* language = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* applicationStanzaNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* applicationStanzaBody = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "BeginSendDirectedMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, language, message, applicationStanzaNamespace, applicationStanzaBody, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::EndSendDirectedMessage
// Il2CppName: EndSendDirectedMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::LoginSession::EndSendDirectedMessage)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "EndSendDirectedMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::BeginAccountArchiveQuery
// Il2CppName: BeginAccountArchiveQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::LoginSession::*)(::System::Nullable_1<::System::DateTime>, ::System::Nullable_1<::System::DateTime>, ::StringW, ::VivoxUnity::AccountId*, ::VivoxUnity::ChannelId*, uint, ::StringW, ::StringW, int, ::System::AsyncCallback*)>(&VivoxUnity::Private::LoginSession::BeginAccountArchiveQuery)> {
  static const MethodInfo* get() {
    static auto* timeStart = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "DateTime")})->byval_arg;
    static auto* timeEnd = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "DateTime")})->byval_arg;
    static auto* searchText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userId = &::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ChannelId")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* afterId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* beforeId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* firstMessageIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "BeginAccountArchiveQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeStart, timeEnd, searchText, userId, channel, max, afterId, beforeId, firstMessageIndex, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::EndAccountArchiveQuery
// Il2CppName: EndAccountArchiveQuery
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::LoginSession::EndAccountArchiveQuery)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "EndAccountArchiveQuery", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::BeginAddAllowedSubscription
// Il2CppName: BeginAddAllowedSubscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::AccountId*, ::System::AsyncCallback*)>(&VivoxUnity::Private::LoginSession::BeginAddAllowedSubscription)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "BeginAddAllowedSubscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::EndAddAllowedSubscription
// Il2CppName: EndAddAllowedSubscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::LoginSession::EndAddAllowedSubscription)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "EndAddAllowedSubscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::BeginRemoveAllowedSubscription
// Il2CppName: BeginRemoveAllowedSubscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::AccountId*, ::System::AsyncCallback*)>(&VivoxUnity::Private::LoginSession::BeginRemoveAllowedSubscription)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "BeginRemoveAllowedSubscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::EndRemoveAllowedSubscription
// Il2CppName: EndRemoveAllowedSubscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::LoginSession::EndRemoveAllowedSubscription)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "EndRemoveAllowedSubscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::BeginAddPresenceSubscription
// Il2CppName: BeginAddPresenceSubscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::AccountId*, ::System::AsyncCallback*)>(&VivoxUnity::Private::LoginSession::BeginAddPresenceSubscription)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "BeginAddPresenceSubscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::EndAddPresenceSubscription
// Il2CppName: EndAddPresenceSubscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IPresenceSubscription* (VivoxUnity::Private::LoginSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::LoginSession::EndAddPresenceSubscription)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "EndAddPresenceSubscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::BeginRemovePresenceSubscription
// Il2CppName: BeginRemovePresenceSubscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::AccountId*, ::System::AsyncCallback*)>(&VivoxUnity::Private::LoginSession::BeginRemovePresenceSubscription)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "BeginRemovePresenceSubscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::EndRemovePresenceSubscription
// Il2CppName: EndRemovePresenceSubscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::System::IAsyncResult*)>(&VivoxUnity::Private::LoginSession::EndRemovePresenceSubscription)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "EndRemovePresenceSubscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::SetCrossMutedCommunications
// Il2CppName: SetCrossMutedCommunications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::AccountId*, bool, ::System::AsyncCallback*)>(&VivoxUnity::Private::LoginSession::SetCrossMutedCommunications)> {
  static const MethodInfo* get() {
    static auto* accountId = &::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")->byval_arg;
    static auto* muted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "SetCrossMutedCommunications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{accountId, muted, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::SetCrossMutedCommunications
// Il2CppName: SetCrossMutedCommunications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::LoginSession::*)(::System::Collections::Generic::List_1<::VivoxUnity::AccountId*>*, bool, ::System::AsyncCallback*)>(&VivoxUnity::Private::LoginSession::SetCrossMutedCommunications)> {
  static const MethodInfo* get() {
    static auto* accountIdSet = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")})->byval_arg;
    static auto* muted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "SetCrossMutedCommunications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{accountIdSet, muted, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::ClearCrossMutedCommunications
// Il2CppName: ClearCrossMutedCommunications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Private::LoginSession::*)(::System::AsyncCallback*)>(&VivoxUnity::Private::LoginSession::ClearCrossMutedCommunications)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "ClearCrossMutedCommunications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::SendCrossMuteOperationRequest
// Il2CppName: SendCrossMuteOperationRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::GlobalNamespace::vx_control_communications_operation, ::StringW, ::GlobalNamespace::vx_mute_scope, ::System::Action_1<::GlobalNamespace::vx_resp_account_control_communications_t*>*)>(&VivoxUnity::Private::LoginSession::SendCrossMuteOperationRequest)> {
  static const MethodInfo* get() {
    static auto* controlOp = &::il2cpp_utils::GetClassFromName("", "vx_control_communications_operation")->byval_arg;
    static auto* userURIs = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* muteScope = &::il2cpp_utils::GetClassFromName("", "vx_mute_scope")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "vx_resp_account_control_communications_t")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "SendCrossMuteOperationRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlOp, userURIs, muteScope, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::SendCrossMuteOperationRequest
// Il2CppName: SendCrossMuteOperationRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::GlobalNamespace::vx_control_communications_operation, ::System::Collections::Generic::List_1<::VivoxUnity::AccountId*>*, ::GlobalNamespace::vx_mute_scope, ::System::Action_1<::GlobalNamespace::vx_resp_account_control_communications_t*>*)>(&VivoxUnity::Private::LoginSession::SendCrossMuteOperationRequest)> {
  static const MethodInfo* get() {
    static auto* controlOp = &::il2cpp_utils::GetClassFromName("", "vx_control_communications_operation")->byval_arg;
    static auto* users = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")})->byval_arg;
    static auto* muteScope = &::il2cpp_utils::GetClassFromName("", "vx_mute_scope")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "vx_resp_account_control_communications_t")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "SendCrossMuteOperationRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlOp, users, muteScope, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::AssertLoggedIn
// Il2CppName: AssertLoggedIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::AssertLoggedIn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "AssertLoggedIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::AssertLoggedOut
// Il2CppName: AssertLoggedOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::AssertLoggedOut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "AssertLoggedOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::ClearTransmittingChannel
// Il2CppName: ClearTransmittingChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::ChannelId*)>(&VivoxUnity::Private::LoginSession::ClearTransmittingChannel)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ChannelId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "ClearTransmittingChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::SetTransmissionMode
// Il2CppName: SetTransmissionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::TransmissionMode, ::VivoxUnity::ChannelId*)>(&VivoxUnity::Private::LoginSession::SetTransmissionMode)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("VivoxUnity", "TransmissionMode")->byval_arg;
    static auto* singleChannel = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ChannelId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "SetTransmissionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode, singleChannel});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::SetTransmission
// Il2CppName: SetTransmission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::SetTransmission)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "SetTransmission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::SetTransmitting
// Il2CppName: SetTransmitting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)(::VivoxUnity::ChannelId*)>(&VivoxUnity::Private::LoginSession::SetTransmitting)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("VivoxUnity", "ChannelId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "SetTransmitting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::SetNoSessionTransmitting
// Il2CppName: SetNoSessionTransmitting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::SetNoSessionTransmitting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "SetNoSessionTransmitting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::LoginSession::SetAllSessionsTransmitting
// Il2CppName: SetAllSessionsTransmitting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::LoginSession::*)()>(&VivoxUnity::Private::LoginSession::SetAllSessionsTransmitting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::LoginSession*), "SetAllSessionsTransmitting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
