// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VivoxUnity.IPresenceSubscription
#include "VivoxUnity/IPresenceSubscription.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VivoxUnity::Common
namespace VivoxUnity::Common {
  // Forward declaring type: ReadWriteDictionary`3<TK, TI, T>
  template<typename TK, typename TI, typename T>
  class ReadWriteDictionary_3;
}
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: IPresenceLocation
  class IPresenceLocation;
  // Forward declaring type: AccountId
  class AccountId;
  // Forward declaring type: IReadOnlyDictionary`2<TK, T>
  template<typename TK, typename T>
  class IReadOnlyDictionary_2;
  // Forward declaring type: PresenceStatus
  struct PresenceStatus;
}
// Forward declaring namespace: VivoxUnity::Private
namespace VivoxUnity::Private {
  // Forward declaring type: PresenceLocation
  class PresenceLocation;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: PropertyChangedEventHandler
  class PropertyChangedEventHandler;
}
// Completed forward declares
// Type namespace: VivoxUnity.Private
namespace VivoxUnity::Private {
  // Forward declaring type: PresenceSubscription
  class PresenceSubscription;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::Private::PresenceSubscription);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::Private::PresenceSubscription*, "VivoxUnity.Private", "PresenceSubscription");
// Type namespace: VivoxUnity.Private
namespace VivoxUnity::Private {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.Private.PresenceSubscription
  // [TokenAttribute] Offset: FFFFFFFF
  class PresenceSubscription : public ::Il2CppObject/*, public ::VivoxUnity::IPresenceSubscription*/ {
    public:
    public:
    // private readonly VivoxUnity.Common.ReadWriteDictionary`3<System.String,VivoxUnity.IPresenceLocation,VivoxUnity.Private.PresenceLocation> _locations
    // Size: 0x8
    // Offset: 0x10
    ::VivoxUnity::Common::ReadWriteDictionary_3<::StringW, ::VivoxUnity::IPresenceLocation*, ::VivoxUnity::Private::PresenceLocation*>* locations;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteDictionary_3<::StringW, ::VivoxUnity::IPresenceLocation*, ::VivoxUnity::Private::PresenceLocation*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE0A8
    // private System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    // Size: 0x8
    // Offset: 0x18
    ::System::ComponentModel::PropertyChangedEventHandler* PropertyChanged;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::PropertyChangedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABE0B8
    // private VivoxUnity.AccountId <Key>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::VivoxUnity::AccountId* Key;
    // Field size check
    static_assert(sizeof(::VivoxUnity::AccountId*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::VivoxUnity::IPresenceSubscription
    operator ::VivoxUnity::IPresenceSubscription() noexcept {
      return *reinterpret_cast<::VivoxUnity::IPresenceSubscription*>(this);
    }
    // Get instance field reference: private readonly VivoxUnity.Common.ReadWriteDictionary`3<System.String,VivoxUnity.IPresenceLocation,VivoxUnity.Private.PresenceLocation> _locations
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteDictionary_3<::StringW, ::VivoxUnity::IPresenceLocation*, ::VivoxUnity::Private::PresenceLocation*>*& dyn__locations();
    // Get instance field reference: private System.ComponentModel.PropertyChangedEventHandler PropertyChanged
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::PropertyChangedEventHandler*& dyn_PropertyChanged();
    // Get instance field reference: private VivoxUnity.AccountId <Key>k__BackingField
    [[deprecated("Use field access instead!")]] ::VivoxUnity::AccountId*& dyn_$Key$k__BackingField();
    // public System.Void add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value)
    // Offset: 0x12D49CC
    void add_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value);
    // public System.Void remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value)
    // Offset: 0x12D4AB8
    void remove_PropertyChanged(::System::ComponentModel::PropertyChangedEventHandler* value);
    // public VivoxUnity.AccountId get_Key()
    // Offset: 0x12D4BA4
    ::VivoxUnity::AccountId* get_Key();
    // public System.Void set_Key(VivoxUnity.AccountId value)
    // Offset: 0x12D2030
    void set_Key(::VivoxUnity::AccountId* value);
    // public VivoxUnity.IReadOnlyDictionary`2<System.String,VivoxUnity.IPresenceLocation> get_Locations()
    // Offset: 0x12D4BAC
    ::VivoxUnity::IReadOnlyDictionary_2<::StringW, ::VivoxUnity::IPresenceLocation*>* get_Locations();
    // public System.Void UpdateLocation(System.String uriWithTag, VivoxUnity.PresenceStatus status, System.String message)
    // Offset: 0x12D4BB4
    void UpdateLocation(::StringW uriWithTag, ::VivoxUnity::PresenceStatus status, ::StringW message);
    // public VivoxUnity.AccountId get_SubscribedAccount()
    // Offset: 0x12D4E08
    ::VivoxUnity::AccountId* get_SubscribedAccount();
    // public System.Void .ctor()
    // Offset: 0x12D1FC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PresenceSubscription* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Private::PresenceSubscription::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PresenceSubscription*, creationType>()));
    }
  }; // VivoxUnity.Private.PresenceSubscription
  #pragma pack(pop)
  static check_size<sizeof(PresenceSubscription), 32 + sizeof(::VivoxUnity::AccountId*)> __VivoxUnity_Private_PresenceSubscriptionSizeCheck;
  static_assert(sizeof(PresenceSubscription) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::Private::PresenceSubscription::add_PropertyChanged
// Il2CppName: add_PropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::PresenceSubscription::*)(::System::ComponentModel::PropertyChangedEventHandler*)>(&VivoxUnity::Private::PresenceSubscription::add_PropertyChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::PresenceSubscription*), "add_PropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::PresenceSubscription::remove_PropertyChanged
// Il2CppName: remove_PropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::PresenceSubscription::*)(::System::ComponentModel::PropertyChangedEventHandler*)>(&VivoxUnity::Private::PresenceSubscription::remove_PropertyChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::PresenceSubscription*), "remove_PropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::PresenceSubscription::get_Key
// Il2CppName: get_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::AccountId* (VivoxUnity::Private::PresenceSubscription::*)()>(&VivoxUnity::Private::PresenceSubscription::get_Key)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::PresenceSubscription*), "get_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::PresenceSubscription::set_Key
// Il2CppName: set_Key
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::PresenceSubscription::*)(::VivoxUnity::AccountId*)>(&VivoxUnity::Private::PresenceSubscription::set_Key)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::PresenceSubscription*), "set_Key", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::PresenceSubscription::get_Locations
// Il2CppName: get_Locations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyDictionary_2<::StringW, ::VivoxUnity::IPresenceLocation*>* (VivoxUnity::Private::PresenceSubscription::*)()>(&VivoxUnity::Private::PresenceSubscription::get_Locations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::PresenceSubscription*), "get_Locations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::PresenceSubscription::UpdateLocation
// Il2CppName: UpdateLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Private::PresenceSubscription::*)(::StringW, ::VivoxUnity::PresenceStatus, ::StringW)>(&VivoxUnity::Private::PresenceSubscription::UpdateLocation)> {
  static const MethodInfo* get() {
    static auto* uriWithTag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* status = &::il2cpp_utils::GetClassFromName("VivoxUnity", "PresenceStatus")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::PresenceSubscription*), "UpdateLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriWithTag, status, message});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::PresenceSubscription::get_SubscribedAccount
// Il2CppName: get_SubscribedAccount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::AccountId* (VivoxUnity::Private::PresenceSubscription::*)()>(&VivoxUnity::Private::PresenceSubscription::get_SubscribedAccount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Private::PresenceSubscription*), "get_SubscribedAccount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Private::PresenceSubscription::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
