// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.EventArgs
#include "System/EventArgs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: QueueItemAddedEventArgs`1<T>
  template<typename T>
  class QueueItemAddedEventArgs_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::VivoxUnity::QueueItemAddedEventArgs_1, "VivoxUnity", "QueueItemAddedEventArgs`1");
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // WARNING Size may be invalid!
  // Autogenerated type: VivoxUnity.QueueItemAddedEventArgs`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class QueueItemAddedEventArgs_1 : public ::System::EventArgs {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xABDC38
    // private readonly T <Value>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T Value;
    public:
    // Autogenerated instance field getter
    // Get instance field: private readonly T <Value>k__BackingField
    [[deprecated("Use field access instead!")]] T& dyn_$Value$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::QueueItemAddedEventArgs_1::dyn_$Value$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Value>k__BackingField"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static QueueItemAddedEventArgs_1<T>* New_ctor(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::QueueItemAddedEventArgs_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<QueueItemAddedEventArgs_1<T>*, creationType>(item)));
    }
    // public T get_Value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::QueueItemAddedEventArgs_1::get_Value");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
  }; // VivoxUnity.QueueItemAddedEventArgs`1
  // Could not write size check! Type: VivoxUnity.QueueItemAddedEventArgs`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
