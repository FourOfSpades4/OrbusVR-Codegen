// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: VivoxApiException
  class VivoxApiException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::VivoxApiException);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::VivoxApiException*, "VivoxUnity", "VivoxApiException");
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.VivoxApiException
  // [TokenAttribute] Offset: FFFFFFFF
  class VivoxApiException : public ::System::Exception {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xABDC68
    // private System.Int32 <StatusCode>k__BackingField
    // Size: 0x4
    // Offset: 0x88
    int StatusCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: StatusCode and: RequestId
    char __padding0[0x4] = {};
    // [CompilerGeneratedAttribute] Offset: 0xABDC78
    // private System.String <RequestId>k__BackingField
    // Size: 0x8
    // Offset: 0x90
    ::StringW RequestId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.Int32 <StatusCode>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$StatusCode$k__BackingField();
    // Get instance field reference: private System.String <RequestId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$RequestId$k__BackingField();
    // public System.Int32 get_StatusCode()
    // Offset: 0x12DA09C
    int get_StatusCode();
    // private System.Void set_StatusCode(System.Int32 value)
    // Offset: 0x12DA0A4
    void set_StatusCode(int value);
    // public System.String get_RequestId()
    // Offset: 0x12DA0AC
    ::StringW get_RequestId();
    // private System.Void set_RequestId(System.String value)
    // Offset: 0x12DA0B4
    void set_RequestId(::StringW value);
    // public System.Void .ctor(System.Int32 statusCode)
    // Offset: 0x12D6580
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VivoxApiException* New_ctor(int statusCode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxApiException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VivoxApiException*, creationType>(statusCode)));
    }
    // public System.Void .ctor(System.Int32 statusCode, System.String requestId)
    // Offset: 0x12DA150
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VivoxApiException* New_ctor(int statusCode, ::StringW requestId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxApiException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VivoxApiException*, creationType>(statusCode, requestId)));
    }
    // public System.Void .ctor(System.Int32 statusCode, System.Exception inner)
    // Offset: 0x12DA22C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VivoxApiException* New_ctor(int statusCode, ::System::Exception* inner) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::VivoxApiException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VivoxApiException*, creationType>(statusCode, inner)));
    }
    // static public System.String GetErrorString(System.Int32 statusCode)
    // Offset: 0x12DA0BC
    static ::StringW GetErrorString(int statusCode);
  }; // VivoxUnity.VivoxApiException
  #pragma pack(pop)
  static check_size<sizeof(VivoxApiException), 144 + sizeof(::StringW)> __VivoxUnity_VivoxApiExceptionSizeCheck;
  static_assert(sizeof(VivoxApiException) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::VivoxApiException::get_StatusCode
// Il2CppName: get_StatusCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VivoxUnity::VivoxApiException::*)()>(&VivoxUnity::VivoxApiException::get_StatusCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VivoxApiException*), "get_StatusCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VivoxApiException::set_StatusCode
// Il2CppName: set_StatusCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::VivoxApiException::*)(int)>(&VivoxUnity::VivoxApiException::set_StatusCode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VivoxApiException*), "set_StatusCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VivoxApiException::get_RequestId
// Il2CppName: get_RequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::VivoxApiException::*)()>(&VivoxUnity::VivoxApiException::get_RequestId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VivoxApiException*), "get_RequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VivoxApiException::set_RequestId
// Il2CppName: set_RequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::VivoxApiException::*)(::StringW)>(&VivoxUnity::VivoxApiException::set_RequestId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VivoxApiException*), "set_RequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: VivoxUnity::VivoxApiException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::VivoxApiException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::VivoxApiException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::VivoxApiException::GetErrorString
// Il2CppName: GetErrorString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int)>(&VivoxUnity::VivoxApiException::GetErrorString)> {
  static const MethodInfo* get() {
    static auto* statusCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::VivoxApiException*), "GetErrorString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statusCode});
  }
};
