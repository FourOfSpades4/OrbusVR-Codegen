// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: AccountId
  class AccountId;
  // Forward declaring type: ILoginSession
  class ILoginSession;
  // Forward declaring type: VivoxConfig
  class VivoxConfig;
  // Forward declaring type: IReadOnlyDictionary`2<TK, T>
  template<typename TK, typename T>
  class IReadOnlyDictionary_2;
  // Forward declaring type: IAudioDevices
  class IAudioDevices;
}
// Forward declaring namespace: VivoxUnity::Common
namespace VivoxUnity::Common {
  // Forward declaring type: ReadWriteDictionary`3<TK, TI, T>
  template<typename TK, typename TI, typename T>
  class ReadWriteDictionary_3;
}
// Forward declaring namespace: VivoxUnity::Private
namespace VivoxUnity::Private {
  // Forward declaring type: LoginSession
  class LoginSession;
  // Forward declaring type: AudioInputDevices
  class AudioInputDevices;
  // Forward declaring type: AudioOutputDevices
  class AudioOutputDevices;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: TimeSpan
  struct TimeSpan;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LoopDone
  class LoopDone;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: WaitHandle
  class WaitHandle;
}
// Completed forward declares
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: Client
  class Client;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::Client);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::Client*, "VivoxUnity", "Client");
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.Client
  // [TokenAttribute] Offset: FFFFFFFF
  class Client : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::VivoxUnity::Client::$$c__DisplayClass12_0
    class $$c__DisplayClass12_0;
    // Nested type: ::VivoxUnity::Client::$$c__DisplayClass18_0
    class $$c__DisplayClass18_0;
    // Nested type: ::VivoxUnity::Client::$$c__DisplayClass34_0
    class $$c__DisplayClass34_0;
    // Nested type: ::VivoxUnity::Client::$$c
    class $$c;
    public:
    // private readonly VivoxUnity.Common.ReadWriteDictionary`3<VivoxUnity.AccountId,VivoxUnity.ILoginSession,VivoxUnity.Private.LoginSession> _loginSessions
    // Size: 0x8
    // Offset: 0x10
    ::VivoxUnity::Common::ReadWriteDictionary_3<::VivoxUnity::AccountId*, ::VivoxUnity::ILoginSession*, ::VivoxUnity::Private::LoginSession*>* loginSessions;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Common::ReadWriteDictionary_3<::VivoxUnity::AccountId*, ::VivoxUnity::ILoginSession*, ::VivoxUnity::Private::LoginSession*>*) == 0x8);
    // private readonly VivoxUnity.Private.AudioInputDevices _inputDevices
    // Size: 0x8
    // Offset: 0x18
    ::VivoxUnity::Private::AudioInputDevices* inputDevices;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Private::AudioInputDevices*) == 0x8);
    // private readonly VivoxUnity.Private.AudioOutputDevices _outputDevices
    // Size: 0x8
    // Offset: 0x20
    ::VivoxUnity::Private::AudioOutputDevices* outputDevices;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Private::AudioOutputDevices*) == 0x8);
    // private System.String _connectorHandle
    // Size: 0x8
    // Offset: 0x28
    ::StringW connectorHandle;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Collections.Generic.Queue`1<System.IAsyncResult> _pendingConnectorCreateRequests
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Queue_1<::System::IAsyncResult*>* pendingConnectorCreateRequests;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::System::IAsyncResult*>*) == 0x8);
    // private System.Boolean _ttsIsInitialized
    // Size: 0x1
    // Offset: 0x38
    bool ttsIsInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ttsIsInitialized and: ttsManagerId
    char __padding5[0x3] = {};
    // private System.UInt32 _ttsManagerId
    // Size: 0x4
    // Offset: 0x3C
    uint ttsManagerId;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private System.Int32 _nextHandle
    static int _get__nextHandle();
    // Set static field: static private System.Int32 _nextHandle
    static void _set__nextHandle(int value);
    // Get instance field reference: private readonly VivoxUnity.Common.ReadWriteDictionary`3<VivoxUnity.AccountId,VivoxUnity.ILoginSession,VivoxUnity.Private.LoginSession> _loginSessions
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Common::ReadWriteDictionary_3<::VivoxUnity::AccountId*, ::VivoxUnity::ILoginSession*, ::VivoxUnity::Private::LoginSession*>*& dyn__loginSessions();
    // Get instance field reference: private readonly VivoxUnity.Private.AudioInputDevices _inputDevices
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Private::AudioInputDevices*& dyn__inputDevices();
    // Get instance field reference: private readonly VivoxUnity.Private.AudioOutputDevices _outputDevices
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Private::AudioOutputDevices*& dyn__outputDevices();
    // Get instance field reference: private System.String _connectorHandle
    [[deprecated("Use field access instead!")]] ::StringW& dyn__connectorHandle();
    // Get instance field reference: private readonly System.Collections.Generic.Queue`1<System.IAsyncResult> _pendingConnectorCreateRequests
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::System::IAsyncResult*>*& dyn__pendingConnectorCreateRequests();
    // Get instance field reference: private System.Boolean _ttsIsInitialized
    [[deprecated("Use field access instead!")]] bool& dyn__ttsIsInitialized();
    // Get instance field reference: private System.UInt32 _ttsManagerId
    [[deprecated("Use field access instead!")]] uint& dyn__ttsManagerId();
    // System.UInt32 get_TTSManagerId()
    // Offset: 0x14B6B80
    uint get_TTSManagerId();
    // private System.Void CheckInitialized()
    // Offset: 0x14B6B88
    void CheckInitialized();
    // public System.Void Initialize(VivoxUnity.VivoxConfig config)
    // Offset: 0x14B6C98
    void Initialize(::VivoxUnity::VivoxConfig* config);
    // System.IAsyncResult BeginGetConnectorHandle(System.Uri server, System.AsyncCallback callback)
    // Offset: 0x14B6E24
    ::System::IAsyncResult* BeginGetConnectorHandle(::System::Uri* server, ::System::AsyncCallback* callback);
    // System.String EndGetConnectorHandle(System.IAsyncResult result)
    // Offset: 0x14B70B8
    ::StringW EndGetConnectorHandle(::System::IAsyncResult* result);
    // public System.Void Uninitialize()
    // Offset: 0x14B7214
    void Uninitialize();
    // static public System.Void Cleanup()
    // Offset: 0x14B77B4
    static void Cleanup();
    // static public System.String get_InternalVersion()
    // Offset: 0x14B7834
    static ::StringW get_InternalVersion();
    // public VivoxUnity.ILoginSession GetLoginSession(VivoxUnity.AccountId accountId)
    // Offset: 0x14B783C
    ::VivoxUnity::ILoginSession* GetLoginSession(::VivoxUnity::AccountId* accountId);
    // public System.Boolean get_Initialized()
    // Offset: 0x14B6C04
    bool get_Initialized();
    // public VivoxUnity.IReadOnlyDictionary`2<VivoxUnity.AccountId,VivoxUnity.ILoginSession> get_LoginSessions()
    // Offset: 0x14B7ED4
    ::VivoxUnity::IReadOnlyDictionary_2<::VivoxUnity::AccountId*, ::VivoxUnity::ILoginSession*>* get_LoginSessions();
    // public VivoxUnity.IAudioDevices get_AudioInputDevices()
    // Offset: 0x14B6E14
    ::VivoxUnity::IAudioDevices* get_AudioInputDevices();
    // public VivoxUnity.IAudioDevices get_AudioOutputDevices()
    // Offset: 0x14B6E1C
    ::VivoxUnity::IAudioDevices* get_AudioOutputDevices();
    // public System.Boolean get_IsAudioEchoCancellationEnabled()
    // Offset: 0x14B7EDC
    bool get_IsAudioEchoCancellationEnabled();
    // public System.Void SetAudioEchoCancellation(System.Boolean onOff)
    // Offset: 0x14B7F3C
    void SetAudioEchoCancellation(bool onOff);
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x14B8008
    void System_IDisposable_Dispose();
    // static System.String GetRandomUserId(System.String prefix)
    // Offset: 0x14B800C
    static ::StringW GetRandomUserId(::StringW prefix);
    // static System.String GetRandomChannelUri(System.String prefix, System.String realm)
    // Offset: 0x14B80FC
    static ::StringW GetRandomChannelUri(::StringW prefix, ::StringW realm);
    // static public System.Void Run(LoopDone done)
    // Offset: 0x14B820C
    static void Run(::GlobalNamespace::LoopDone* done);
    // static public System.Boolean Run(System.Threading.WaitHandle handle, System.TimeSpan until)
    // Offset: 0x14B8248
    static bool Run(::System::Threading::WaitHandle* handle, ::System::TimeSpan until);
    // static public System.Void RunOnce()
    // Offset: 0x14B837C
    static void RunOnce();
    // System.Boolean TTSInitialize()
    // Offset: 0x14B847C
    bool TTSInitialize();
    // System.Void TTSShutdown()
    // Offset: 0x14B72DC
    void TTSShutdown();
    // public System.Void .ctor()
    // Offset: 0x14B851C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Client* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Client::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Client*, creationType>()));
    }
  }; // VivoxUnity.Client
  #pragma pack(pop)
  static check_size<sizeof(Client), 60 + sizeof(uint)> __VivoxUnity_ClientSizeCheck;
  static_assert(sizeof(Client) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::Client::get_TTSManagerId
// Il2CppName: get_TTSManagerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (VivoxUnity::Client::*)()>(&VivoxUnity::Client::get_TTSManagerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "get_TTSManagerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::CheckInitialized
// Il2CppName: CheckInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Client::*)()>(&VivoxUnity::Client::CheckInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "CheckInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Client::*)(::VivoxUnity::VivoxConfig*)>(&VivoxUnity::Client::Initialize)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("VivoxUnity", "VivoxConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::BeginGetConnectorHandle
// Il2CppName: BeginGetConnectorHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (VivoxUnity::Client::*)(::System::Uri*, ::System::AsyncCallback*)>(&VivoxUnity::Client::BeginGetConnectorHandle)> {
  static const MethodInfo* get() {
    static auto* server = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "BeginGetConnectorHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{server, callback});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::EndGetConnectorHandle
// Il2CppName: EndGetConnectorHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::Client::*)(::System::IAsyncResult*)>(&VivoxUnity::Client::EndGetConnectorHandle)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "EndGetConnectorHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::Uninitialize
// Il2CppName: Uninitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Client::*)()>(&VivoxUnity::Client::Uninitialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "Uninitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VivoxUnity::Client::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::get_InternalVersion
// Il2CppName: get_InternalVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&VivoxUnity::Client::get_InternalVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "get_InternalVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::GetLoginSession
// Il2CppName: GetLoginSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::ILoginSession* (VivoxUnity::Client::*)(::VivoxUnity::AccountId*)>(&VivoxUnity::Client::GetLoginSession)> {
  static const MethodInfo* get() {
    static auto* accountId = &::il2cpp_utils::GetClassFromName("VivoxUnity", "AccountId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "GetLoginSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{accountId});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::get_Initialized
// Il2CppName: get_Initialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Client::*)()>(&VivoxUnity::Client::get_Initialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "get_Initialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::get_LoginSessions
// Il2CppName: get_LoginSessions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IReadOnlyDictionary_2<::VivoxUnity::AccountId*, ::VivoxUnity::ILoginSession*>* (VivoxUnity::Client::*)()>(&VivoxUnity::Client::get_LoginSessions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "get_LoginSessions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::get_AudioInputDevices
// Il2CppName: get_AudioInputDevices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IAudioDevices* (VivoxUnity::Client::*)()>(&VivoxUnity::Client::get_AudioInputDevices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "get_AudioInputDevices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::get_AudioOutputDevices
// Il2CppName: get_AudioOutputDevices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::IAudioDevices* (VivoxUnity::Client::*)()>(&VivoxUnity::Client::get_AudioOutputDevices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "get_AudioOutputDevices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::get_IsAudioEchoCancellationEnabled
// Il2CppName: get_IsAudioEchoCancellationEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Client::*)()>(&VivoxUnity::Client::get_IsAudioEchoCancellationEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "get_IsAudioEchoCancellationEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::SetAudioEchoCancellation
// Il2CppName: SetAudioEchoCancellation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Client::*)(bool)>(&VivoxUnity::Client::SetAudioEchoCancellation)> {
  static const MethodInfo* get() {
    static auto* onOff = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "SetAudioEchoCancellation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onOff});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Client::*)()>(&VivoxUnity::Client::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::GetRandomUserId
// Il2CppName: GetRandomUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&VivoxUnity::Client::GetRandomUserId)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "GetRandomUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::GetRandomChannelUri
// Il2CppName: GetRandomChannelUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&VivoxUnity::Client::GetRandomChannelUri)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* realm = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "GetRandomChannelUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, realm});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::LoopDone*)>(&VivoxUnity::Client::Run)> {
  static const MethodInfo* get() {
    static auto* done = &::il2cpp_utils::GetClassFromName("", "LoopDone")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{done});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Threading::WaitHandle*, ::System::TimeSpan)>(&VivoxUnity::Client::Run)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System.Threading", "WaitHandle")->byval_arg;
    static auto* until = &::il2cpp_utils::GetClassFromName("System", "TimeSpan")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, until});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::RunOnce
// Il2CppName: RunOnce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&VivoxUnity::Client::RunOnce)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "RunOnce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::TTSInitialize
// Il2CppName: TTSInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Client::*)()>(&VivoxUnity::Client::TTSInitialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "TTSInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::TTSShutdown
// Il2CppName: TTSShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VivoxUnity::Client::*)()>(&VivoxUnity::Client::TTSShutdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Client*), "TTSShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Client::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
