// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VivoxUnity.AudioFadeModel
#include "VivoxUnity/AudioFadeModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: Channel3DProperties
  class Channel3DProperties;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::VivoxUnity::Channel3DProperties);
DEFINE_IL2CPP_ARG_TYPE(::VivoxUnity::Channel3DProperties*, "VivoxUnity", "Channel3DProperties");
// Type namespace: VivoxUnity
namespace VivoxUnity {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: VivoxUnity.Channel3DProperties
  // [TokenAttribute] Offset: FFFFFFFF
  class Channel3DProperties : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Int32 _audibleDistance
    // Size: 0x4
    // Offset: 0x10
    int audibleDistance;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _conversationalDistance
    // Size: 0x4
    // Offset: 0x14
    int conversationalDistance;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Single _audioFadeIntensityByDistance
    // Size: 0x4
    // Offset: 0x18
    float audioFadeIntensityByDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly VivoxUnity.AudioFadeModel _audioFadeModel
    // Size: 0x4
    // Offset: 0x1C
    ::VivoxUnity::AudioFadeModel audioFadeModel;
    // Field size check
    static_assert(sizeof(::VivoxUnity::AudioFadeModel) == 0x4);
    public:
    // Get instance field reference: private readonly System.Int32 _audibleDistance
    [[deprecated("Use field access instead!")]] int& dyn__audibleDistance();
    // Get instance field reference: private readonly System.Int32 _conversationalDistance
    [[deprecated("Use field access instead!")]] int& dyn__conversationalDistance();
    // Get instance field reference: private readonly System.Single _audioFadeIntensityByDistance
    [[deprecated("Use field access instead!")]] float& dyn__audioFadeIntensityByDistance();
    // Get instance field reference: private readonly VivoxUnity.AudioFadeModel _audioFadeModel
    [[deprecated("Use field access instead!")]] ::VivoxUnity::AudioFadeModel& dyn__audioFadeModel();
    // public System.Int32 get_AudibleDistance()
    // Offset: 0x14B53F8
    int get_AudibleDistance();
    // public System.Int32 get_ConversationalDistance()
    // Offset: 0x14B5400
    int get_ConversationalDistance();
    // public System.Single get_AudioFadeIntensityByDistance()
    // Offset: 0x14B5408
    float get_AudioFadeIntensityByDistance();
    // public VivoxUnity.AudioFadeModel get_AudioFadeModel()
    // Offset: 0x14B5410
    ::VivoxUnity::AudioFadeModel get_AudioFadeModel();
    // public System.Void .ctor()
    // Offset: 0x14B5418
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Channel3DProperties* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Channel3DProperties::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Channel3DProperties*, creationType>()));
    }
    // System.Void .ctor(System.String properties)
    // Offset: 0x14B5450
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Channel3DProperties* New_ctor(::StringW properties) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Channel3DProperties::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Channel3DProperties*, creationType>(properties)));
    }
    // public System.Void .ctor(System.Int32 audibleDistance, System.Int32 conversationalDistance, System.Single audioFadeIntensityByDistanceaudio, VivoxUnity.AudioFadeModel audioFadeModel)
    // Offset: 0x14B56B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Channel3DProperties* New_ctor(int audibleDistance, int conversationalDistance, float audioFadeIntensityByDistanceaudio, ::VivoxUnity::AudioFadeModel audioFadeModel) {
      static auto ___internal__logger = ::Logger::get().WithContext("::VivoxUnity::Channel3DProperties::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Channel3DProperties*, creationType>(audibleDistance, conversationalDistance, audioFadeIntensityByDistanceaudio, audioFadeModel)));
    }
    // System.Boolean IsValid()
    // Offset: 0x14B5708
    bool IsValid();
    // public override System.String ToString()
    // Offset: 0x14B5818
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // VivoxUnity.Channel3DProperties
  #pragma pack(pop)
  static check_size<sizeof(Channel3DProperties), 28 + sizeof(::VivoxUnity::AudioFadeModel)> __VivoxUnity_Channel3DPropertiesSizeCheck;
  static_assert(sizeof(Channel3DProperties) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: VivoxUnity::Channel3DProperties::get_AudibleDistance
// Il2CppName: get_AudibleDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VivoxUnity::Channel3DProperties::*)()>(&VivoxUnity::Channel3DProperties::get_AudibleDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Channel3DProperties*), "get_AudibleDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Channel3DProperties::get_ConversationalDistance
// Il2CppName: get_ConversationalDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VivoxUnity::Channel3DProperties::*)()>(&VivoxUnity::Channel3DProperties::get_ConversationalDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Channel3DProperties*), "get_ConversationalDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Channel3DProperties::get_AudioFadeIntensityByDistance
// Il2CppName: get_AudioFadeIntensityByDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VivoxUnity::Channel3DProperties::*)()>(&VivoxUnity::Channel3DProperties::get_AudioFadeIntensityByDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Channel3DProperties*), "get_AudioFadeIntensityByDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Channel3DProperties::get_AudioFadeModel
// Il2CppName: get_AudioFadeModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::VivoxUnity::AudioFadeModel (VivoxUnity::Channel3DProperties::*)()>(&VivoxUnity::Channel3DProperties::get_AudioFadeModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Channel3DProperties*), "get_AudioFadeModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Channel3DProperties::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::Channel3DProperties::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::Channel3DProperties::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: VivoxUnity::Channel3DProperties::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VivoxUnity::Channel3DProperties::*)()>(&VivoxUnity::Channel3DProperties::IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Channel3DProperties*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VivoxUnity::Channel3DProperties::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (VivoxUnity::Channel3DProperties::*)()>(&VivoxUnity::Channel3DProperties::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VivoxUnity::Channel3DProperties*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
