// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Tayx.Graphy.GraphyManager/LookForAudioListener
#include "Tayx/Graphy/GraphyManager.hpp"
// Including type: UnityEngine.FFTWindow
#include "UnityEngine/FFTWindow.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Tayx::Graphy
namespace Tayx::Graphy {
  // Skipping declaration: GraphyManager because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioListener
  class AudioListener;
}
// Forward declaring namespace: UnityEngine::SceneManagement
namespace UnityEngine::SceneManagement {
  // Forward declaring type: Scene
  struct Scene;
  // Forward declaring type: LoadSceneMode
  struct LoadSceneMode;
}
// Completed forward declares
// Type namespace: Tayx.Graphy.Audio
namespace Tayx::Graphy::Audio {
  // Forward declaring type: AudioMonitor
  class AudioMonitor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Tayx::Graphy::Audio::AudioMonitor);
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::Audio::AudioMonitor*, "Tayx.Graphy.Audio", "AudioMonitor");
// Type namespace: Tayx.Graphy.Audio
namespace Tayx::Graphy::Audio {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: Tayx.Graphy.Audio.AudioMonitor
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioMonitor : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Tayx.Graphy.GraphyManager m_graphyManager
    // Size: 0x8
    // Offset: 0x18
    ::Tayx::Graphy::GraphyManager* m_graphyManager;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager*) == 0x8);
    // private UnityEngine.AudioListener m_audioListener
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioListener* m_audioListener;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioListener*) == 0x8);
    // private Tayx.Graphy.GraphyManager/LookForAudioListener m_findAudioListenerInCameraIfNull
    // Size: 0x4
    // Offset: 0x28
    ::Tayx::Graphy::GraphyManager::LookForAudioListener m_findAudioListenerInCameraIfNull;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager::LookForAudioListener) == 0x4);
    // private UnityEngine.FFTWindow m_FFTWindow
    // Size: 0x4
    // Offset: 0x2C
    ::UnityEngine::FFTWindow m_FFTWindow;
    // Field size check
    static_assert(sizeof(::UnityEngine::FFTWindow) == 0x4);
    // private System.Int32 m_spectrumSize
    // Size: 0x4
    // Offset: 0x30
    int m_spectrumSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_spectrumSize and: m_spectrum
    char __padding4[0x4] = {};
    // private System.Single[] m_spectrum
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<float> m_spectrum;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single m_maxDB
    // Size: 0x4
    // Offset: 0x40
    float m_maxDB;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single m_refValue
    static constexpr const float m_refValue = 1;
    // Get static field: static private System.Single m_refValue
    static float _get_m_refValue();
    // Set static field: static private System.Single m_refValue
    static void _set_m_refValue(float value);
    // Get instance field reference: private Tayx.Graphy.GraphyManager m_graphyManager
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager*& dyn_m_graphyManager();
    // Get instance field reference: private UnityEngine.AudioListener m_audioListener
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioListener*& dyn_m_audioListener();
    // Get instance field reference: private Tayx.Graphy.GraphyManager/LookForAudioListener m_findAudioListenerInCameraIfNull
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager::LookForAudioListener& dyn_m_findAudioListenerInCameraIfNull();
    // Get instance field reference: private UnityEngine.FFTWindow m_FFTWindow
    [[deprecated("Use field access instead!")]] ::UnityEngine::FFTWindow& dyn_m_FFTWindow();
    // Get instance field reference: private System.Int32 m_spectrumSize
    [[deprecated("Use field access instead!")]] int& dyn_m_spectrumSize();
    // Get instance field reference: private System.Single[] m_spectrum
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_spectrum();
    // Get instance field reference: private System.Single m_maxDB
    [[deprecated("Use field access instead!")]] float& dyn_m_maxDB();
    // public System.Single[] get_Spectrum()
    // Offset: 0x1041860
    ::ArrayW<float> get_Spectrum();
    // public System.Single get_MaxDB()
    // Offset: 0x1042F68
    float get_MaxDB();
    // public System.Boolean get_SpectrumDataAvailable()
    // Offset: 0x10410FC
    bool get_SpectrumDataAvailable();
    // private System.Void Awake()
    // Offset: 0x1042F70
    void Awake();
    // private System.Void Update()
    // Offset: 0x1043060
    void Update();
    // public System.Void UpdateParameters()
    // Offset: 0x1042D58
    void UpdateParameters();
    // public System.Single lin2dB(System.Single linear)
    // Offset: 0x1041868
    float lin2dB(float linear);
    // public System.Single dBNormalized(System.Single db)
    // Offset: 0x10418F0
    float dBNormalized(float db);
    // private System.Void FindAudioListener()
    // Offset: 0x1043288
    void FindAudioListener();
    // private System.Void Init()
    // Offset: 0x1042F74
    void Init();
    // public System.Void .ctor()
    // Offset: 0x1043314
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioMonitor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Tayx::Graphy::Audio::AudioMonitor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioMonitor*, creationType>()));
    }
    // private System.Void <Init>b__20_0(UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.LoadSceneMode loadMode)
    // Offset: 0x1043330
    void $Init$b__20_0(::UnityEngine::SceneManagement::Scene scene, ::UnityEngine::SceneManagement::LoadSceneMode loadMode);
  }; // Tayx.Graphy.Audio.AudioMonitor
  #pragma pack(pop)
  static check_size<sizeof(AudioMonitor), 64 + sizeof(float)> __Tayx_Graphy_Audio_AudioMonitorSizeCheck;
  static_assert(sizeof(AudioMonitor) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioMonitor::get_Spectrum
// Il2CppName: get_Spectrum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (Tayx::Graphy::Audio::AudioMonitor::*)()>(&Tayx::Graphy::Audio::AudioMonitor::get_Spectrum)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Audio::AudioMonitor*), "get_Spectrum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioMonitor::get_MaxDB
// Il2CppName: get_MaxDB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::Audio::AudioMonitor::*)()>(&Tayx::Graphy::Audio::AudioMonitor::get_MaxDB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Audio::AudioMonitor*), "get_MaxDB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioMonitor::get_SpectrumDataAvailable
// Il2CppName: get_SpectrumDataAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Tayx::Graphy::Audio::AudioMonitor::*)()>(&Tayx::Graphy::Audio::AudioMonitor::get_SpectrumDataAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Audio::AudioMonitor*), "get_SpectrumDataAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioMonitor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Audio::AudioMonitor::*)()>(&Tayx::Graphy::Audio::AudioMonitor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Audio::AudioMonitor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioMonitor::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Audio::AudioMonitor::*)()>(&Tayx::Graphy::Audio::AudioMonitor::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Audio::AudioMonitor*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioMonitor::UpdateParameters
// Il2CppName: UpdateParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Audio::AudioMonitor::*)()>(&Tayx::Graphy::Audio::AudioMonitor::UpdateParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Audio::AudioMonitor*), "UpdateParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioMonitor::lin2dB
// Il2CppName: lin2dB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::Audio::AudioMonitor::*)(float)>(&Tayx::Graphy::Audio::AudioMonitor::lin2dB)> {
  static const MethodInfo* get() {
    static auto* linear = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Audio::AudioMonitor*), "lin2dB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{linear});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioMonitor::dBNormalized
// Il2CppName: dBNormalized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::Audio::AudioMonitor::*)(float)>(&Tayx::Graphy::Audio::AudioMonitor::dBNormalized)> {
  static const MethodInfo* get() {
    static auto* db = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Audio::AudioMonitor*), "dBNormalized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{db});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioMonitor::FindAudioListener
// Il2CppName: FindAudioListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Audio::AudioMonitor::*)()>(&Tayx::Graphy::Audio::AudioMonitor::FindAudioListener)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Audio::AudioMonitor*), "FindAudioListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioMonitor::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Audio::AudioMonitor::*)()>(&Tayx::Graphy::Audio::AudioMonitor::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Audio::AudioMonitor*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioMonitor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioMonitor::$Init$b__20_0
// Il2CppName: <Init>b__20_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Audio::AudioMonitor::*)(::UnityEngine::SceneManagement::Scene, ::UnityEngine::SceneManagement::LoadSceneMode)>(&Tayx::Graphy::Audio::AudioMonitor::$Init$b__20_0)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* loadMode = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "LoadSceneMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Audio::AudioMonitor*), "<Init>b__20_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, loadMode});
  }
};
