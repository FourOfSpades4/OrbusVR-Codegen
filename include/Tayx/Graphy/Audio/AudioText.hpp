// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Tayx::Graphy
namespace Tayx::Graphy {
  // Forward declaring type: GraphyManager
  class GraphyManager;
}
// Forward declaring namespace: Tayx::Graphy::Audio
namespace Tayx::Graphy::Audio {
  // Forward declaring type: AudioMonitor
  class AudioMonitor;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: Tayx.Graphy.Audio
namespace Tayx::Graphy::Audio {
  // Forward declaring type: AudioText
  class AudioText;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Tayx::Graphy::Audio::AudioText);
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::Audio::AudioText*, "Tayx.Graphy.Audio", "AudioText");
// Type namespace: Tayx.Graphy.Audio
namespace Tayx::Graphy::Audio {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Tayx.Graphy.Audio.AudioText
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioText : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Tayx.Graphy.GraphyManager m_graphyManager
    // Size: 0x8
    // Offset: 0x18
    ::Tayx::Graphy::GraphyManager* m_graphyManager;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager*) == 0x8);
    // private Tayx.Graphy.Audio.AudioMonitor m_audioMonitor
    // Size: 0x8
    // Offset: 0x20
    ::Tayx::Graphy::Audio::AudioMonitor* m_audioMonitor;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::Audio::AudioMonitor*) == 0x8);
    // private UnityEngine.UI.Text m_DBText
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Text* m_DBText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private System.Int32 m_updateRate
    // Size: 0x4
    // Offset: 0x30
    int m_updateRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_deltaTimeOffset
    // Size: 0x4
    // Offset: 0x34
    float m_deltaTimeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Tayx.Graphy.GraphyManager m_graphyManager
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager*& dyn_m_graphyManager();
    // Get instance field reference: private Tayx.Graphy.Audio.AudioMonitor m_audioMonitor
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::Audio::AudioMonitor*& dyn_m_audioMonitor();
    // Get instance field reference: private UnityEngine.UI.Text m_DBText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_DBText();
    // Get instance field reference: private System.Int32 m_updateRate
    [[deprecated("Use field access instead!")]] int& dyn_m_updateRate();
    // Get instance field reference: private System.Single m_deltaTimeOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_deltaTimeOffset();
    // private System.Void Awake()
    // Offset: 0x1043344
    void Awake();
    // private System.Void Update()
    // Offset: 0x10434B0
    void Update();
    // public System.Void UpdateParameters()
    // Offset: 0x1042E94
    void UpdateParameters();
    // private System.Void Init()
    // Offset: 0x1043348
    void Init();
    // public System.Void .ctor()
    // Offset: 0x1043600
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioText* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Tayx::Graphy::Audio::AudioText::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioText*, creationType>()));
    }
  }; // Tayx.Graphy.Audio.AudioText
  #pragma pack(pop)
  static check_size<sizeof(AudioText), 52 + sizeof(float)> __Tayx_Graphy_Audio_AudioTextSizeCheck;
  static_assert(sizeof(AudioText) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioText::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Audio::AudioText::*)()>(&Tayx::Graphy::Audio::AudioText::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Audio::AudioText*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioText::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Audio::AudioText::*)()>(&Tayx::Graphy::Audio::AudioText::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Audio::AudioText*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioText::UpdateParameters
// Il2CppName: UpdateParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Audio::AudioText::*)()>(&Tayx::Graphy::Audio::AudioText::UpdateParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Audio::AudioText*), "UpdateParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioText::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Audio::AudioText::*)()>(&Tayx::Graphy::Audio::AudioText::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Audio::AudioText*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Audio::AudioText::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
