// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Tayx.Graphy.Utils
namespace Tayx::Graphy::Utils {
  // Forward declaring type: FloatString
  class FloatString;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Tayx::Graphy::Utils::FloatString);
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::Utils::FloatString*, "Tayx.Graphy.Utils", "FloatString");
// Type namespace: Tayx.Graphy.Utils
namespace Tayx::Graphy::Utils {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Tayx.Graphy.Utils.FloatString
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class FloatString : public ::Il2CppObject {
    public:
    // Get static field: static private System.Single decimalMultiplayer
    static float _get_decimalMultiplayer();
    // Set static field: static private System.Single decimalMultiplayer
    static void _set_decimalMultiplayer(float value);
    // Get static field: static public System.String[] positiveBuffer
    static ::ArrayW<::StringW> _get_positiveBuffer();
    // Set static field: static public System.String[] positiveBuffer
    static void _set_positiveBuffer(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] negativeBuffer
    static ::ArrayW<::StringW> _get_negativeBuffer();
    // Set static field: static public System.String[] negativeBuffer
    static void _set_negativeBuffer(::ArrayW<::StringW> value);
    // static public System.Boolean get_Inited()
    // Offset: 0x1040828
    static bool get_Inited();
    // static public System.Single get_maxValue()
    // Offset: 0x104096C
    static float get_maxValue();
    // static public System.Single get_minValue()
    // Offset: 0x10408E8
    static float get_minValue();
    // static public System.Void Init(System.Single minNegativeValue, System.Single maxPositiveValue, System.Int32 deciminals)
    // Offset: 0x10409E8
    static void Init(float minNegativeValue, float maxPositiveValue, int deciminals);
    // static public System.String ToStringNonAlloc(System.Single value)
    // Offset: 0x103FA54
    static ::StringW ToStringNonAlloc(float value);
    // static public System.String ToStringNonAlloc(System.Single value, System.String format)
    // Offset: 0x1045210
    static ::StringW ToStringNonAlloc(float value, ::StringW format);
    // static private System.Int32 Pow(System.Int32 f, System.Int32 p)
    // Offset: 0x104A790
    static int Pow(int f, int p);
    // static private System.Int32 ToIndex(System.Single f)
    // Offset: 0x104A7AC
    static int ToIndex(float f);
    // static private System.Single FromIndex(System.Int32 i)
    // Offset: 0x104A71C
    static float FromIndex(int i);
    // static public System.Int32 ToInt(System.Single f)
    // Offset: 0x1045208
    static int ToInt(float f);
    // static public System.Single ToFloat(System.Int32 i)
    // Offset: 0x104A850
    static float ToFloat(int i);
    // static private System.Void .cctor()
    // Offset: 0x104A858
    static void _cctor();
  }; // Tayx.Graphy.Utils.FloatString
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Tayx::Graphy::Utils::FloatString::get_Inited
// Il2CppName: get_Inited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Tayx::Graphy::Utils::FloatString::get_Inited)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::FloatString*), "get_Inited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::FloatString::get_maxValue
// Il2CppName: get_maxValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Tayx::Graphy::Utils::FloatString::get_maxValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::FloatString*), "get_maxValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::FloatString::get_minValue
// Il2CppName: get_minValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Tayx::Graphy::Utils::FloatString::get_minValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::FloatString*), "get_minValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::FloatString::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, int)>(&Tayx::Graphy::Utils::FloatString::Init)> {
  static const MethodInfo* get() {
    static auto* minNegativeValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxPositiveValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deciminals = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::FloatString*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minNegativeValue, maxPositiveValue, deciminals});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::FloatString::ToStringNonAlloc
// Il2CppName: ToStringNonAlloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(float)>(&Tayx::Graphy::Utils::FloatString::ToStringNonAlloc)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::FloatString*), "ToStringNonAlloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::FloatString::ToStringNonAlloc
// Il2CppName: ToStringNonAlloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(float, ::StringW)>(&Tayx::Graphy::Utils::FloatString::ToStringNonAlloc)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::FloatString*), "ToStringNonAlloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, format});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::FloatString::Pow
// Il2CppName: Pow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&Tayx::Graphy::Utils::FloatString::Pow)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::FloatString*), "Pow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f, p});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::FloatString::ToIndex
// Il2CppName: ToIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&Tayx::Graphy::Utils::FloatString::ToIndex)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::FloatString*), "ToIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::FloatString::FromIndex
// Il2CppName: FromIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int)>(&Tayx::Graphy::Utils::FloatString::FromIndex)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::FloatString*), "FromIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::FloatString::ToInt
// Il2CppName: ToInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&Tayx::Graphy::Utils::FloatString::ToInt)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::FloatString*), "ToInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::FloatString::ToFloat
// Il2CppName: ToFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int)>(&Tayx::Graphy::Utils::FloatString::ToFloat)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::FloatString*), "ToFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Utils::FloatString::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Tayx::Graphy::Utils::FloatString::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Utils::FloatString*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
