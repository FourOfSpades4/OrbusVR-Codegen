// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Tayx.Graphy.Utils.Singleton`1
#include "Tayx/Graphy/Utils/Singleton_1.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.KeyCode
#include "UnityEngine/KeyCode.hpp"
// Including type: UnityEngine.FFTWindow
#include "UnityEngine/FFTWindow.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Tayx::Graphy
namespace Tayx::Graphy {
  // Skipping declaration: LookForAudioListener because it is already included!
  // Skipping declaration: Mode because it is already included!
  // Skipping declaration: ModulePosition because it is already included!
  // Skipping declaration: ModuleState because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioListener
  class AudioListener;
}
// Forward declaring namespace: Tayx::Graphy::Fps
namespace Tayx::Graphy::Fps {
  // Forward declaring type: FpsManager
  class FpsManager;
  // Forward declaring type: FpsMonitor
  class FpsMonitor;
}
// Forward declaring namespace: Tayx::Graphy::Ram
namespace Tayx::Graphy::Ram {
  // Forward declaring type: RamManager
  class RamManager;
  // Forward declaring type: RamMonitor
  class RamMonitor;
}
// Forward declaring namespace: Tayx::Graphy::Audio
namespace Tayx::Graphy::Audio {
  // Forward declaring type: AudioManager
  class AudioManager;
  // Forward declaring type: AudioMonitor
  class AudioMonitor;
}
// Forward declaring namespace: Tayx::Graphy::Advanced
namespace Tayx::Graphy::Advanced {
  // Forward declaring type: AdvancedData
  class AdvancedData;
}
// Completed forward declares
// Type namespace: Tayx.Graphy
namespace Tayx::Graphy {
  // Forward declaring type: GraphyManager
  class GraphyManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Tayx::Graphy::GraphyManager);
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::GraphyManager*, "Tayx.Graphy", "GraphyManager");
// Type namespace: Tayx.Graphy
namespace Tayx::Graphy {
  // WARNING Size may be invalid!
  // Autogenerated type: Tayx.Graphy.GraphyManager
  // [TokenAttribute] Offset: FFFFFFFF
  class GraphyManager : public ::Tayx::Graphy::Utils::Singleton_1<::Tayx::Graphy::GraphyManager*> {
    public:
    // Nested type: ::Tayx::Graphy::GraphyManager::Mode
    struct Mode;
    // Nested type: ::Tayx::Graphy::GraphyManager::ModuleType
    struct ModuleType;
    // Nested type: ::Tayx::Graphy::GraphyManager::ModuleState
    struct ModuleState;
    // Nested type: ::Tayx::Graphy::GraphyManager::ModulePosition
    struct ModulePosition;
    // Nested type: ::Tayx::Graphy::GraphyManager::LookForAudioListener
    struct LookForAudioListener;
    // Nested type: ::Tayx::Graphy::GraphyManager::ModuleToggleState
    struct ModuleToggleState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Tayx.Graphy.GraphyManager/Mode
    // [TokenAttribute] Offset: FFFFFFFF
    struct Mode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Mode
      constexpr Mode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Tayx.Graphy.GraphyManager/Mode FULL
      static constexpr const int FULL = 0;
      // Get static field: static public Tayx.Graphy.GraphyManager/Mode FULL
      static ::Tayx::Graphy::GraphyManager::Mode _get_FULL();
      // Set static field: static public Tayx.Graphy.GraphyManager/Mode FULL
      static void _set_FULL(::Tayx::Graphy::GraphyManager::Mode value);
      // static field const value: static public Tayx.Graphy.GraphyManager/Mode LIGHT
      static constexpr const int LIGHT = 1;
      // Get static field: static public Tayx.Graphy.GraphyManager/Mode LIGHT
      static ::Tayx::Graphy::GraphyManager::Mode _get_LIGHT();
      // Set static field: static public Tayx.Graphy.GraphyManager/Mode LIGHT
      static void _set_LIGHT(::Tayx::Graphy::GraphyManager::Mode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Tayx.Graphy.GraphyManager/Mode
    #pragma pack(pop)
    static check_size<sizeof(GraphyManager::Mode), 0 + sizeof(int)> __Tayx_Graphy_GraphyManager_ModeSizeCheck;
    static_assert(sizeof(GraphyManager::Mode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Tayx.Graphy.GraphyManager/ModuleState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ModuleState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ModuleState
      constexpr ModuleState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleState FULL
      static constexpr const int FULL = 0;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleState FULL
      static ::Tayx::Graphy::GraphyManager::ModuleState _get_FULL();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleState FULL
      static void _set_FULL(::Tayx::Graphy::GraphyManager::ModuleState value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleState TEXT
      static constexpr const int TEXT = 1;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleState TEXT
      static ::Tayx::Graphy::GraphyManager::ModuleState _get_TEXT();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleState TEXT
      static void _set_TEXT(::Tayx::Graphy::GraphyManager::ModuleState value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleState BASIC
      static constexpr const int BASIC = 2;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleState BASIC
      static ::Tayx::Graphy::GraphyManager::ModuleState _get_BASIC();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleState BASIC
      static void _set_BASIC(::Tayx::Graphy::GraphyManager::ModuleState value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleState BACKGROUND
      static constexpr const int BACKGROUND = 3;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleState BACKGROUND
      static ::Tayx::Graphy::GraphyManager::ModuleState _get_BACKGROUND();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleState BACKGROUND
      static void _set_BACKGROUND(::Tayx::Graphy::GraphyManager::ModuleState value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleState OFF
      static constexpr const int OFF = 4;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleState OFF
      static ::Tayx::Graphy::GraphyManager::ModuleState _get_OFF();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleState OFF
      static void _set_OFF(::Tayx::Graphy::GraphyManager::ModuleState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Tayx.Graphy.GraphyManager/ModuleState
    #pragma pack(pop)
    static check_size<sizeof(GraphyManager::ModuleState), 0 + sizeof(int)> __Tayx_Graphy_GraphyManager_ModuleStateSizeCheck;
    static_assert(sizeof(GraphyManager::ModuleState) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Tayx.Graphy.GraphyManager/ModulePosition
    // [TokenAttribute] Offset: FFFFFFFF
    struct ModulePosition/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ModulePosition
      constexpr ModulePosition(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Tayx.Graphy.GraphyManager/ModulePosition TOP_RIGHT
      static constexpr const int TOP_RIGHT = 0;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModulePosition TOP_RIGHT
      static ::Tayx::Graphy::GraphyManager::ModulePosition _get_TOP_RIGHT();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModulePosition TOP_RIGHT
      static void _set_TOP_RIGHT(::Tayx::Graphy::GraphyManager::ModulePosition value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModulePosition TOP_LEFT
      static constexpr const int TOP_LEFT = 1;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModulePosition TOP_LEFT
      static ::Tayx::Graphy::GraphyManager::ModulePosition _get_TOP_LEFT();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModulePosition TOP_LEFT
      static void _set_TOP_LEFT(::Tayx::Graphy::GraphyManager::ModulePosition value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModulePosition BOTTOM_RIGHT
      static constexpr const int BOTTOM_RIGHT = 2;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModulePosition BOTTOM_RIGHT
      static ::Tayx::Graphy::GraphyManager::ModulePosition _get_BOTTOM_RIGHT();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModulePosition BOTTOM_RIGHT
      static void _set_BOTTOM_RIGHT(::Tayx::Graphy::GraphyManager::ModulePosition value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModulePosition BOTTOM_LEFT
      static constexpr const int BOTTOM_LEFT = 3;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModulePosition BOTTOM_LEFT
      static ::Tayx::Graphy::GraphyManager::ModulePosition _get_BOTTOM_LEFT();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModulePosition BOTTOM_LEFT
      static void _set_BOTTOM_LEFT(::Tayx::Graphy::GraphyManager::ModulePosition value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Tayx.Graphy.GraphyManager/ModulePosition
    #pragma pack(pop)
    static check_size<sizeof(GraphyManager::ModulePosition), 0 + sizeof(int)> __Tayx_Graphy_GraphyManager_ModulePositionSizeCheck;
    static_assert(sizeof(GraphyManager::ModulePosition) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Tayx.Graphy.GraphyManager/LookForAudioListener
    // [TokenAttribute] Offset: FFFFFFFF
    struct LookForAudioListener/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: LookForAudioListener
      constexpr LookForAudioListener(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Tayx.Graphy.GraphyManager/LookForAudioListener ALWAYS
      static constexpr const int ALWAYS = 0;
      // Get static field: static public Tayx.Graphy.GraphyManager/LookForAudioListener ALWAYS
      static ::Tayx::Graphy::GraphyManager::LookForAudioListener _get_ALWAYS();
      // Set static field: static public Tayx.Graphy.GraphyManager/LookForAudioListener ALWAYS
      static void _set_ALWAYS(::Tayx::Graphy::GraphyManager::LookForAudioListener value);
      // static field const value: static public Tayx.Graphy.GraphyManager/LookForAudioListener ON_SCENE_LOAD
      static constexpr const int ON_SCENE_LOAD = 1;
      // Get static field: static public Tayx.Graphy.GraphyManager/LookForAudioListener ON_SCENE_LOAD
      static ::Tayx::Graphy::GraphyManager::LookForAudioListener _get_ON_SCENE_LOAD();
      // Set static field: static public Tayx.Graphy.GraphyManager/LookForAudioListener ON_SCENE_LOAD
      static void _set_ON_SCENE_LOAD(::Tayx::Graphy::GraphyManager::LookForAudioListener value);
      // static field const value: static public Tayx.Graphy.GraphyManager/LookForAudioListener NEVER
      static constexpr const int NEVER = 2;
      // Get static field: static public Tayx.Graphy.GraphyManager/LookForAudioListener NEVER
      static ::Tayx::Graphy::GraphyManager::LookForAudioListener _get_NEVER();
      // Set static field: static public Tayx.Graphy.GraphyManager/LookForAudioListener NEVER
      static void _set_NEVER(::Tayx::Graphy::GraphyManager::LookForAudioListener value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Tayx.Graphy.GraphyManager/LookForAudioListener
    #pragma pack(pop)
    static check_size<sizeof(GraphyManager::LookForAudioListener), 0 + sizeof(int)> __Tayx_Graphy_GraphyManager_LookForAudioListenerSizeCheck;
    static_assert(sizeof(GraphyManager::LookForAudioListener) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Tayx.Graphy.GraphyManager/ModuleToggleState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ModuleToggleState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ModuleToggleState
      constexpr ModuleToggleState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_BASIC
      static constexpr const int FPS_BASIC = 0;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_BASIC
      static ::Tayx::Graphy::GraphyManager::ModuleToggleState _get_FPS_BASIC();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_BASIC
      static void _set_FPS_BASIC(::Tayx::Graphy::GraphyManager::ModuleToggleState value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_TEXT
      static constexpr const int FPS_TEXT = 1;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_TEXT
      static ::Tayx::Graphy::GraphyManager::ModuleToggleState _get_FPS_TEXT();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_TEXT
      static void _set_FPS_TEXT(::Tayx::Graphy::GraphyManager::ModuleToggleState value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL
      static constexpr const int FPS_FULL = 2;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL
      static ::Tayx::Graphy::GraphyManager::ModuleToggleState _get_FPS_FULL();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL
      static void _set_FPS_FULL(::Tayx::Graphy::GraphyManager::ModuleToggleState value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_TEXT_RAM_TEXT
      static constexpr const int FPS_TEXT_RAM_TEXT = 3;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_TEXT_RAM_TEXT
      static ::Tayx::Graphy::GraphyManager::ModuleToggleState _get_FPS_TEXT_RAM_TEXT();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_TEXT_RAM_TEXT
      static void _set_FPS_TEXT_RAM_TEXT(::Tayx::Graphy::GraphyManager::ModuleToggleState value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_TEXT
      static constexpr const int FPS_FULL_RAM_TEXT = 4;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_TEXT
      static ::Tayx::Graphy::GraphyManager::ModuleToggleState _get_FPS_FULL_RAM_TEXT();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_TEXT
      static void _set_FPS_FULL_RAM_TEXT(::Tayx::Graphy::GraphyManager::ModuleToggleState value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_FULL
      static constexpr const int FPS_FULL_RAM_FULL = 5;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_FULL
      static ::Tayx::Graphy::GraphyManager::ModuleToggleState _get_FPS_FULL_RAM_FULL();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_FULL
      static void _set_FPS_FULL_RAM_FULL(::Tayx::Graphy::GraphyManager::ModuleToggleState value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_TEXT_RAM_TEXT_AUDIO_TEXT
      static constexpr const int FPS_TEXT_RAM_TEXT_AUDIO_TEXT = 6;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_TEXT_RAM_TEXT_AUDIO_TEXT
      static ::Tayx::Graphy::GraphyManager::ModuleToggleState _get_FPS_TEXT_RAM_TEXT_AUDIO_TEXT();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_TEXT_RAM_TEXT_AUDIO_TEXT
      static void _set_FPS_TEXT_RAM_TEXT_AUDIO_TEXT(::Tayx::Graphy::GraphyManager::ModuleToggleState value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_TEXT_AUDIO_TEXT
      static constexpr const int FPS_FULL_RAM_TEXT_AUDIO_TEXT = 7;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_TEXT_AUDIO_TEXT
      static ::Tayx::Graphy::GraphyManager::ModuleToggleState _get_FPS_FULL_RAM_TEXT_AUDIO_TEXT();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_TEXT_AUDIO_TEXT
      static void _set_FPS_FULL_RAM_TEXT_AUDIO_TEXT(::Tayx::Graphy::GraphyManager::ModuleToggleState value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_FULL_AUDIO_TEXT
      static constexpr const int FPS_FULL_RAM_FULL_AUDIO_TEXT = 8;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_FULL_AUDIO_TEXT
      static ::Tayx::Graphy::GraphyManager::ModuleToggleState _get_FPS_FULL_RAM_FULL_AUDIO_TEXT();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_FULL_AUDIO_TEXT
      static void _set_FPS_FULL_RAM_FULL_AUDIO_TEXT(::Tayx::Graphy::GraphyManager::ModuleToggleState value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_FULL_AUDIO_FULL
      static constexpr const int FPS_FULL_RAM_FULL_AUDIO_FULL = 9;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_FULL_AUDIO_FULL
      static ::Tayx::Graphy::GraphyManager::ModuleToggleState _get_FPS_FULL_RAM_FULL_AUDIO_FULL();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_FULL_AUDIO_FULL
      static void _set_FPS_FULL_RAM_FULL_AUDIO_FULL(::Tayx::Graphy::GraphyManager::ModuleToggleState value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_FULL_AUDIO_FULL_ADVANCED_FULL
      static constexpr const int FPS_FULL_RAM_FULL_AUDIO_FULL_ADVANCED_FULL = 10;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_FULL_AUDIO_FULL_ADVANCED_FULL
      static ::Tayx::Graphy::GraphyManager::ModuleToggleState _get_FPS_FULL_RAM_FULL_AUDIO_FULL_ADVANCED_FULL();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_FULL_RAM_FULL_AUDIO_FULL_ADVANCED_FULL
      static void _set_FPS_FULL_RAM_FULL_AUDIO_FULL_ADVANCED_FULL(::Tayx::Graphy::GraphyManager::ModuleToggleState value);
      // static field const value: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_BASIC_ADVANCED_FULL
      static constexpr const int FPS_BASIC_ADVANCED_FULL = 11;
      // Get static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_BASIC_ADVANCED_FULL
      static ::Tayx::Graphy::GraphyManager::ModuleToggleState _get_FPS_BASIC_ADVANCED_FULL();
      // Set static field: static public Tayx.Graphy.GraphyManager/ModuleToggleState FPS_BASIC_ADVANCED_FULL
      static void _set_FPS_BASIC_ADVANCED_FULL(::Tayx::Graphy::GraphyManager::ModuleToggleState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Tayx.Graphy.GraphyManager/ModuleToggleState
    #pragma pack(pop)
    static check_size<sizeof(GraphyManager::ModuleToggleState), 0 + sizeof(int)> __Tayx_Graphy_GraphyManager_ModuleToggleStateSizeCheck;
    static_assert(sizeof(GraphyManager::ModuleToggleState) == 0x4);
    public:
    // private Tayx.Graphy.Fps.FpsManager m_fpsManager
    // Size: 0x8
    // Offset: 0x18
    ::Tayx::Graphy::Fps::FpsManager* m_fpsManager;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::Fps::FpsManager*) == 0x8);
    // private Tayx.Graphy.Ram.RamManager m_ramManager
    // Size: 0x8
    // Offset: 0x20
    ::Tayx::Graphy::Ram::RamManager* m_ramManager;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::Ram::RamManager*) == 0x8);
    // private Tayx.Graphy.Audio.AudioManager m_audioManager
    // Size: 0x8
    // Offset: 0x28
    ::Tayx::Graphy::Audio::AudioManager* m_audioManager;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::Audio::AudioManager*) == 0x8);
    // private Tayx.Graphy.Advanced.AdvancedData m_advancedData
    // Size: 0x8
    // Offset: 0x30
    ::Tayx::Graphy::Advanced::AdvancedData* m_advancedData;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::Advanced::AdvancedData*) == 0x8);
    // private Tayx.Graphy.Fps.FpsMonitor m_fpsMonitor
    // Size: 0x8
    // Offset: 0x38
    ::Tayx::Graphy::Fps::FpsMonitor* m_fpsMonitor;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::Fps::FpsMonitor*) == 0x8);
    // private Tayx.Graphy.Ram.RamMonitor m_ramMonitor
    // Size: 0x8
    // Offset: 0x40
    ::Tayx::Graphy::Ram::RamMonitor* m_ramMonitor;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::Ram::RamMonitor*) == 0x8);
    // private Tayx.Graphy.Audio.AudioMonitor m_audioMonitor
    // Size: 0x8
    // Offset: 0x48
    ::Tayx::Graphy::Audio::AudioMonitor* m_audioMonitor;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::Audio::AudioMonitor*) == 0x8);
    // private Tayx.Graphy.GraphyManager/Mode m_graphyMode
    // Size: 0x4
    // Offset: 0x50
    ::Tayx::Graphy::GraphyManager::Mode m_graphyMode;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager::Mode) == 0x4);
    // private Tayx.Graphy.GraphyManager/ModuleToggleState m_moduleToggleState
    // Size: 0x4
    // Offset: 0x54
    ::Tayx::Graphy::GraphyManager::ModuleToggleState m_moduleToggleState;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager::ModuleToggleState) == 0x4);
    // private System.Boolean m_active
    // Size: 0x1
    // Offset: 0x58
    bool m_active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_keepAlive
    // Size: 0x1
    // Offset: 0x59
    bool m_keepAlive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_background
    // Size: 0x1
    // Offset: 0x5A
    bool m_background;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Color m_backgroundColor
    // Size: 0x10
    // Offset: 0x5C
    ::UnityEngine::Color m_backgroundColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.KeyCode m_toggleModeKeyCode
    // Size: 0x4
    // Offset: 0x6C
    ::UnityEngine::KeyCode m_toggleModeKeyCode;
    // Field size check
    static_assert(sizeof(::UnityEngine::KeyCode) == 0x4);
    // private System.Boolean m_toggleModeCtrl
    // Size: 0x1
    // Offset: 0x70
    bool m_toggleModeCtrl;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_toggleModeAlt
    // Size: 0x1
    // Offset: 0x71
    bool m_toggleModeAlt;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.KeyCode m_toggleActiveKeyCode
    // Size: 0x4
    // Offset: 0x74
    ::UnityEngine::KeyCode m_toggleActiveKeyCode;
    // Field size check
    static_assert(sizeof(::UnityEngine::KeyCode) == 0x4);
    // private System.Boolean m_toggleActiveCtrl
    // Size: 0x1
    // Offset: 0x78
    bool m_toggleActiveCtrl;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_toggleActiveAlt
    // Size: 0x1
    // Offset: 0x79
    bool m_toggleActiveAlt;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Tayx.Graphy.GraphyManager/ModulePosition m_graphModulePosition
    // Size: 0x4
    // Offset: 0x7C
    ::Tayx::Graphy::GraphyManager::ModulePosition m_graphModulePosition;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager::ModulePosition) == 0x4);
    // private Tayx.Graphy.GraphyManager/ModuleState m_fpsModuleState
    // Size: 0x4
    // Offset: 0x80
    ::Tayx::Graphy::GraphyManager::ModuleState m_fpsModuleState;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager::ModuleState) == 0x4);
    // [TooltipAttribute] Offset: 0xADD298
    // [RangeAttribute] Offset: 0xADD298
    // private System.Int32 m_timeToResetMinMaxFps
    // Size: 0x4
    // Offset: 0x84
    int m_timeToResetMinMaxFps;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Color m_goodFpsColor
    // Size: 0x10
    // Offset: 0x88
    ::UnityEngine::Color m_goodFpsColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Int32 m_goodFpsThreshold
    // Size: 0x4
    // Offset: 0x98
    int m_goodFpsThreshold;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Color m_cautionFpsColor
    // Size: 0x10
    // Offset: 0x9C
    ::UnityEngine::Color m_cautionFpsColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Int32 m_cautionFpsThreshold
    // Size: 0x4
    // Offset: 0xAC
    int m_cautionFpsThreshold;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Color m_criticalFpsColor
    // Size: 0x10
    // Offset: 0xB0
    ::UnityEngine::Color m_criticalFpsColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [RangeAttribute] Offset: 0xADD350
    // private System.Int32 m_fpsGraphResolution
    // Size: 0x4
    // Offset: 0xC0
    int m_fpsGraphResolution;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RangeAttribute] Offset: 0xADD394
    // private System.Int32 m_fpsTextUpdateRate
    // Size: 0x4
    // Offset: 0xC4
    int m_fpsTextUpdateRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Tayx.Graphy.GraphyManager/ModuleState m_ramModuleState
    // Size: 0x4
    // Offset: 0xC8
    ::Tayx::Graphy::GraphyManager::ModuleState m_ramModuleState;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager::ModuleState) == 0x4);
    // private UnityEngine.Color m_allocatedRamColor
    // Size: 0x10
    // Offset: 0xCC
    ::UnityEngine::Color m_allocatedRamColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color m_reservedRamColor
    // Size: 0x10
    // Offset: 0xDC
    ::UnityEngine::Color m_reservedRamColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color m_monoRamColor
    // Size: 0x10
    // Offset: 0xEC
    ::UnityEngine::Color m_monoRamColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [RangeAttribute] Offset: 0xADD418
    // private System.Int32 m_ramGraphResolution
    // Size: 0x4
    // Offset: 0xFC
    int m_ramGraphResolution;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RangeAttribute] Offset: 0xADD45C
    // private System.Int32 m_ramTextUpdateRate
    // Size: 0x4
    // Offset: 0x100
    int m_ramTextUpdateRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Tayx.Graphy.GraphyManager/ModuleState m_audioModuleState
    // Size: 0x4
    // Offset: 0x104
    ::Tayx::Graphy::GraphyManager::ModuleState m_audioModuleState;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager::ModuleState) == 0x4);
    // private Tayx.Graphy.GraphyManager/LookForAudioListener m_findAudioListenerInCameraIfNull
    // Size: 0x4
    // Offset: 0x108
    ::Tayx::Graphy::GraphyManager::LookForAudioListener m_findAudioListenerInCameraIfNull;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager::LookForAudioListener) == 0x4);
    // private UnityEngine.AudioListener m_audioListener
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::AudioListener* m_audioListener;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioListener*) == 0x8);
    // private UnityEngine.Color m_audioGraphColor
    // Size: 0x10
    // Offset: 0x118
    ::UnityEngine::Color m_audioGraphColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [RangeAttribute] Offset: 0xADD4E0
    // private System.Int32 m_audioGraphResolution
    // Size: 0x4
    // Offset: 0x128
    int m_audioGraphResolution;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RangeAttribute] Offset: 0xADD524
    // private System.Int32 m_audioTextUpdateRate
    // Size: 0x4
    // Offset: 0x12C
    int m_audioTextUpdateRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.FFTWindow m_FFTWindow
    // Size: 0x4
    // Offset: 0x130
    ::UnityEngine::FFTWindow m_FFTWindow;
    // Field size check
    static_assert(sizeof(::UnityEngine::FFTWindow) == 0x4);
    // [TooltipAttribute] Offset: 0xADD578
    // private System.Int32 m_spectrumSize
    // Size: 0x4
    // Offset: 0x134
    int m_spectrumSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Tayx.Graphy.GraphyManager/ModulePosition m_advancedModulePosition
    // Size: 0x4
    // Offset: 0x138
    ::Tayx::Graphy::GraphyManager::ModulePosition m_advancedModulePosition;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager::ModulePosition) == 0x4);
    // private Tayx.Graphy.GraphyManager/ModuleState m_advancedModuleState
    // Size: 0x4
    // Offset: 0x13C
    ::Tayx::Graphy::GraphyManager::ModuleState m_advancedModuleState;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager::ModuleState) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Tayx.Graphy.Fps.FpsManager m_fpsManager
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::Fps::FpsManager*& dyn_m_fpsManager();
    // Get instance field reference: private Tayx.Graphy.Ram.RamManager m_ramManager
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::Ram::RamManager*& dyn_m_ramManager();
    // Get instance field reference: private Tayx.Graphy.Audio.AudioManager m_audioManager
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::Audio::AudioManager*& dyn_m_audioManager();
    // Get instance field reference: private Tayx.Graphy.Advanced.AdvancedData m_advancedData
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::Advanced::AdvancedData*& dyn_m_advancedData();
    // Get instance field reference: private Tayx.Graphy.Fps.FpsMonitor m_fpsMonitor
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::Fps::FpsMonitor*& dyn_m_fpsMonitor();
    // Get instance field reference: private Tayx.Graphy.Ram.RamMonitor m_ramMonitor
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::Ram::RamMonitor*& dyn_m_ramMonitor();
    // Get instance field reference: private Tayx.Graphy.Audio.AudioMonitor m_audioMonitor
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::Audio::AudioMonitor*& dyn_m_audioMonitor();
    // Get instance field reference: private Tayx.Graphy.GraphyManager/Mode m_graphyMode
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager::Mode& dyn_m_graphyMode();
    // Get instance field reference: private Tayx.Graphy.GraphyManager/ModuleToggleState m_moduleToggleState
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager::ModuleToggleState& dyn_m_moduleToggleState();
    // Get instance field reference: private System.Boolean m_active
    [[deprecated("Use field access instead!")]] bool& dyn_m_active();
    // Get instance field reference: private System.Boolean m_keepAlive
    [[deprecated("Use field access instead!")]] bool& dyn_m_keepAlive();
    // Get instance field reference: private System.Boolean m_background
    [[deprecated("Use field access instead!")]] bool& dyn_m_background();
    // Get instance field reference: private UnityEngine.Color m_backgroundColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_backgroundColor();
    // Get instance field reference: private UnityEngine.KeyCode m_toggleModeKeyCode
    [[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& dyn_m_toggleModeKeyCode();
    // Get instance field reference: private System.Boolean m_toggleModeCtrl
    [[deprecated("Use field access instead!")]] bool& dyn_m_toggleModeCtrl();
    // Get instance field reference: private System.Boolean m_toggleModeAlt
    [[deprecated("Use field access instead!")]] bool& dyn_m_toggleModeAlt();
    // Get instance field reference: private UnityEngine.KeyCode m_toggleActiveKeyCode
    [[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& dyn_m_toggleActiveKeyCode();
    // Get instance field reference: private System.Boolean m_toggleActiveCtrl
    [[deprecated("Use field access instead!")]] bool& dyn_m_toggleActiveCtrl();
    // Get instance field reference: private System.Boolean m_toggleActiveAlt
    [[deprecated("Use field access instead!")]] bool& dyn_m_toggleActiveAlt();
    // Get instance field reference: private Tayx.Graphy.GraphyManager/ModulePosition m_graphModulePosition
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager::ModulePosition& dyn_m_graphModulePosition();
    // Get instance field reference: private Tayx.Graphy.GraphyManager/ModuleState m_fpsModuleState
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager::ModuleState& dyn_m_fpsModuleState();
    // Get instance field reference: private System.Int32 m_timeToResetMinMaxFps
    [[deprecated("Use field access instead!")]] int& dyn_m_timeToResetMinMaxFps();
    // Get instance field reference: private UnityEngine.Color m_goodFpsColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_goodFpsColor();
    // Get instance field reference: private System.Int32 m_goodFpsThreshold
    [[deprecated("Use field access instead!")]] int& dyn_m_goodFpsThreshold();
    // Get instance field reference: private UnityEngine.Color m_cautionFpsColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_cautionFpsColor();
    // Get instance field reference: private System.Int32 m_cautionFpsThreshold
    [[deprecated("Use field access instead!")]] int& dyn_m_cautionFpsThreshold();
    // Get instance field reference: private UnityEngine.Color m_criticalFpsColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_criticalFpsColor();
    // Get instance field reference: private System.Int32 m_fpsGraphResolution
    [[deprecated("Use field access instead!")]] int& dyn_m_fpsGraphResolution();
    // Get instance field reference: private System.Int32 m_fpsTextUpdateRate
    [[deprecated("Use field access instead!")]] int& dyn_m_fpsTextUpdateRate();
    // Get instance field reference: private Tayx.Graphy.GraphyManager/ModuleState m_ramModuleState
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager::ModuleState& dyn_m_ramModuleState();
    // Get instance field reference: private UnityEngine.Color m_allocatedRamColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_allocatedRamColor();
    // Get instance field reference: private UnityEngine.Color m_reservedRamColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_reservedRamColor();
    // Get instance field reference: private UnityEngine.Color m_monoRamColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_monoRamColor();
    // Get instance field reference: private System.Int32 m_ramGraphResolution
    [[deprecated("Use field access instead!")]] int& dyn_m_ramGraphResolution();
    // Get instance field reference: private System.Int32 m_ramTextUpdateRate
    [[deprecated("Use field access instead!")]] int& dyn_m_ramTextUpdateRate();
    // Get instance field reference: private Tayx.Graphy.GraphyManager/ModuleState m_audioModuleState
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager::ModuleState& dyn_m_audioModuleState();
    // Get instance field reference: private Tayx.Graphy.GraphyManager/LookForAudioListener m_findAudioListenerInCameraIfNull
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager::LookForAudioListener& dyn_m_findAudioListenerInCameraIfNull();
    // Get instance field reference: private UnityEngine.AudioListener m_audioListener
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioListener*& dyn_m_audioListener();
    // Get instance field reference: private UnityEngine.Color m_audioGraphColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_audioGraphColor();
    // Get instance field reference: private System.Int32 m_audioGraphResolution
    [[deprecated("Use field access instead!")]] int& dyn_m_audioGraphResolution();
    // Get instance field reference: private System.Int32 m_audioTextUpdateRate
    [[deprecated("Use field access instead!")]] int& dyn_m_audioTextUpdateRate();
    // Get instance field reference: private UnityEngine.FFTWindow m_FFTWindow
    [[deprecated("Use field access instead!")]] ::UnityEngine::FFTWindow& dyn_m_FFTWindow();
    // Get instance field reference: private System.Int32 m_spectrumSize
    [[deprecated("Use field access instead!")]] int& dyn_m_spectrumSize();
    // Get instance field reference: private Tayx.Graphy.GraphyManager/ModulePosition m_advancedModulePosition
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager::ModulePosition& dyn_m_advancedModulePosition();
    // Get instance field reference: private Tayx.Graphy.GraphyManager/ModuleState m_advancedModuleState
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager::ModuleState& dyn_m_advancedModuleState();
    // public Tayx.Graphy.GraphyManager/Mode get_GraphyMode()
    // Offset: 0x10412D0
    ::Tayx::Graphy::GraphyManager::Mode get_GraphyMode();
    // public System.Void set_GraphyMode(Tayx.Graphy.GraphyManager/Mode value)
    // Offset: 0x10471FC
    void set_GraphyMode(::Tayx::Graphy::GraphyManager::Mode value);
    // public System.Boolean get_KeepAlive()
    // Offset: 0x104727C
    bool get_KeepAlive();
    // public System.Boolean get_Background()
    // Offset: 0x10404F4
    bool get_Background();
    // public System.Void set_Background(System.Boolean value)
    // Offset: 0x1047284
    void set_Background(bool value);
    // public UnityEngine.Color get_BackgroundColor()
    // Offset: 0x104080C
    ::UnityEngine::Color get_BackgroundColor();
    // public System.Void set_BackgroundColor(UnityEngine.Color value)
    // Offset: 0x1047290
    void set_BackgroundColor(::UnityEngine::Color value);
    // public Tayx.Graphy.GraphyManager/ModulePosition get_GraphModulePosition()
    // Offset: 0x104729C
    ::Tayx::Graphy::GraphyManager::ModulePosition get_GraphModulePosition();
    // public System.Void set_GraphModulePosition(Tayx.Graphy.GraphyManager/ModulePosition value)
    // Offset: 0x10472A4
    void set_GraphModulePosition(::Tayx::Graphy::GraphyManager::ModulePosition value);
    // public Tayx.Graphy.GraphyManager/ModuleState get_FpsModuleState()
    // Offset: 0x1044A1C
    ::Tayx::Graphy::GraphyManager::ModuleState get_FpsModuleState();
    // public System.Void set_FpsModuleState(Tayx.Graphy.GraphyManager/ModuleState value)
    // Offset: 0x10476A4
    void set_FpsModuleState(::Tayx::Graphy::GraphyManager::ModuleState value);
    // public System.Int32 get_TimeToResetMinMaxFps()
    // Offset: 0x1044DCC
    int get_TimeToResetMinMaxFps();
    // public System.Void set_TimeToResetMinMaxFps(System.Int32 value)
    // Offset: 0x10476DC
    void set_TimeToResetMinMaxFps(int value);
    // public UnityEngine.Color get_GoodFPSColor()
    // Offset: 0x1043D5C
    ::UnityEngine::Color get_GoodFPSColor();
    // public System.Void set_GoodFPSColor(UnityEngine.Color value)
    // Offset: 0x104770C
    void set_GoodFPSColor(::UnityEngine::Color value);
    // public UnityEngine.Color get_CautionFPSColor()
    // Offset: 0x1043D68
    ::UnityEngine::Color get_CautionFPSColor();
    // public System.Void set_CautionFPSColor(UnityEngine.Color value)
    // Offset: 0x1047740
    void set_CautionFPSColor(::UnityEngine::Color value);
    // public UnityEngine.Color get_CriticalFPSColor()
    // Offset: 0x1043D74
    ::UnityEngine::Color get_CriticalFPSColor();
    // public System.Void set_CriticalFPSColor(UnityEngine.Color value)
    // Offset: 0x1047774
    void set_CriticalFPSColor(::UnityEngine::Color value);
    // public System.Int32 get_GoodFPSThreshold()
    // Offset: 0x1043B94
    int get_GoodFPSThreshold();
    // public System.Void set_GoodFPSThreshold(System.Int32 value)
    // Offset: 0x10477A8
    void set_GoodFPSThreshold(int value);
    // public System.Int32 get_CautionFPSThreshold()
    // Offset: 0x1043B9C
    int get_CautionFPSThreshold();
    // public System.Void set_CautionFPSThreshold(System.Int32 value)
    // Offset: 0x10477D8
    void set_CautionFPSThreshold(int value);
    // public System.Int32 get_FpsGraphResolution()
    // Offset: 0x1043860
    int get_FpsGraphResolution();
    // public System.Void set_FpsGraphResolution(System.Int32 value)
    // Offset: 0x1047808
    void set_FpsGraphResolution(int value);
    // public System.Int32 get_FpsTextUpdateRate()
    // Offset: 0x10454A0
    int get_FpsTextUpdateRate();
    // public System.Void set_FpsTextUpdateRate(System.Int32 value)
    // Offset: 0x1047838
    void set_FpsTextUpdateRate(int value);
    // public System.Single get_CurrentFPS()
    // Offset: 0x1047868
    float get_CurrentFPS();
    // public System.Single get_AverageFPS()
    // Offset: 0x1047894
    float get_AverageFPS();
    // public System.Single get_MinFPS()
    // Offset: 0x10478C0
    float get_MinFPS();
    // public System.Single get_MaxFPS()
    // Offset: 0x10478EC
    float get_MaxFPS();
    // public Tayx.Graphy.GraphyManager/ModuleState get_RamModuleState()
    // Offset: 0x1047918
    ::Tayx::Graphy::GraphyManager::ModuleState get_RamModuleState();
    // public System.Void set_RamModuleState(Tayx.Graphy.GraphyManager/ModuleState value)
    // Offset: 0x1047920
    void set_RamModuleState(::Tayx::Graphy::GraphyManager::ModuleState value);
    // public UnityEngine.Color get_AllocatedRamColor()
    // Offset: 0x1047AF0
    ::UnityEngine::Color get_AllocatedRamColor();
    // public System.Void set_AllocatedRamColor(UnityEngine.Color value)
    // Offset: 0x1047AFC
    void set_AllocatedRamColor(::UnityEngine::Color value);
    // public UnityEngine.Color get_ReservedRamColor()
    // Offset: 0x1047CF0
    ::UnityEngine::Color get_ReservedRamColor();
    // public System.Void set_ReservedRamColor(UnityEngine.Color value)
    // Offset: 0x1047CFC
    void set_ReservedRamColor(::UnityEngine::Color value);
    // public UnityEngine.Color get_MonoRamColor()
    // Offset: 0x1047D30
    ::UnityEngine::Color get_MonoRamColor();
    // public System.Void set_MonoRamColor(UnityEngine.Color value)
    // Offset: 0x1047D3C
    void set_MonoRamColor(::UnityEngine::Color value);
    // public System.Int32 get_RamGraphResolution()
    // Offset: 0x1047D70
    int get_RamGraphResolution();
    // public System.Void set_RamGraphResolution(System.Int32 value)
    // Offset: 0x1047D78
    void set_RamGraphResolution(int value);
    // public System.Int32 get_RamTextUpdateRate()
    // Offset: 0x1047DA8
    int get_RamTextUpdateRate();
    // public System.Void set_RamTextUpdateRate(System.Int32 value)
    // Offset: 0x1047DB0
    void set_RamTextUpdateRate(int value);
    // public System.Single get_AllocatedRam()
    // Offset: 0x1047DE0
    float get_AllocatedRam();
    // public System.Single get_ReservedRam()
    // Offset: 0x1047E0C
    float get_ReservedRam();
    // public System.Single get_MonoRam()
    // Offset: 0x1047E40
    float get_MonoRam();
    // public Tayx.Graphy.GraphyManager/ModuleState get_AudioModuleState()
    // Offset: 0x1042EC8
    ::Tayx::Graphy::GraphyManager::ModuleState get_AudioModuleState();
    // public System.Void set_AudioModuleState(Tayx.Graphy.GraphyManager/ModuleState value)
    // Offset: 0x1047E74
    void set_AudioModuleState(::Tayx::Graphy::GraphyManager::ModuleState value);
    // public UnityEngine.AudioListener get_AudioListener()
    // Offset: 0x10432FC
    ::UnityEngine::AudioListener* get_AudioListener();
    // public System.Void set_AudioListener(UnityEngine.AudioListener value)
    // Offset: 0x1047EAC
    void set_AudioListener(::UnityEngine::AudioListener* value);
    // public Tayx.Graphy.GraphyManager/LookForAudioListener get_FindAudioListenerInCameraIfNull()
    // Offset: 0x10432F4
    ::Tayx::Graphy::GraphyManager::LookForAudioListener get_FindAudioListenerInCameraIfNull();
    // public System.Void set_FindAudioListenerInCameraIfNull(Tayx.Graphy.GraphyManager/LookForAudioListener value)
    // Offset: 0x1047EDC
    void set_FindAudioListenerInCameraIfNull(::Tayx::Graphy::GraphyManager::LookForAudioListener value);
    // public UnityEngine.Color get_AudioGraphColor()
    // Offset: 0x1041BA4
    ::UnityEngine::Color get_AudioGraphColor();
    // public System.Void set_AudioGraphColor(UnityEngine.Color value)
    // Offset: 0x1047F0C
    void set_AudioGraphColor(::UnityEngine::Color value);
    // public System.Int32 get_AudioGraphResolution()
    // Offset: 0x1041418
    int get_AudioGraphResolution();
    // public System.Void set_AudioGraphResolution(System.Int32 value)
    // Offset: 0x1047F48
    void set_AudioGraphResolution(int value);
    // public System.Int32 get_AudioTextUpdateRate()
    // Offset: 0x10435F8
    int get_AudioTextUpdateRate();
    // public System.Void set_AudioTextUpdateRate(System.Int32 value)
    // Offset: 0x1047F78
    void set_AudioTextUpdateRate(int value);
    // public UnityEngine.FFTWindow get_FftWindow()
    // Offset: 0x1043304
    ::UnityEngine::FFTWindow get_FftWindow();
    // public System.Void set_FftWindow(UnityEngine.FFTWindow value)
    // Offset: 0x1047FA8
    void set_FftWindow(::UnityEngine::FFTWindow value);
    // public System.Int32 get_SpectrumSize()
    // Offset: 0x104330C
    int get_SpectrumSize();
    // public System.Void set_SpectrumSize(System.Int32 value)
    // Offset: 0x1047FD8
    void set_SpectrumSize(int value);
    // public System.Single[] get_Spectrum()
    // Offset: 0x1048008
    ::ArrayW<float> get_Spectrum();
    // public System.Single get_MaxDB()
    // Offset: 0x1048034
    float get_MaxDB();
    // public Tayx.Graphy.GraphyManager/ModuleState get_AdvancedModuleState()
    // Offset: 0x1040820
    ::Tayx::Graphy::GraphyManager::ModuleState get_AdvancedModuleState();
    // public System.Void set_AdvancedModuleState(Tayx.Graphy.GraphyManager/ModuleState value)
    // Offset: 0x1048060
    void set_AdvancedModuleState(::Tayx::Graphy::GraphyManager::ModuleState value);
    // public Tayx.Graphy.GraphyManager/ModulePosition get_AdvancedModulePosition()
    // Offset: 0x1040818
    ::Tayx::Graphy::GraphyManager::ModulePosition get_AdvancedModulePosition();
    // public System.Void set_AdvancedModulePosition(Tayx.Graphy.GraphyManager/ModulePosition value)
    // Offset: 0x1048098
    void set_AdvancedModulePosition(::Tayx::Graphy::GraphyManager::ModulePosition value);
    // private System.Void Start()
    // Offset: 0x10480D0
    void Start();
    // private System.Void Update()
    // Offset: 0x10484F0
    void Update();
    // public System.Void SetModulePosition(Tayx.Graphy.GraphyManager/ModuleType moduleType, Tayx.Graphy.GraphyManager/ModulePosition modulePosition)
    // Offset: 0x1048684
    void SetModulePosition(::Tayx::Graphy::GraphyManager::ModuleType moduleType, ::Tayx::Graphy::GraphyManager::ModulePosition modulePosition);
    // public System.Void SetModuleMode(Tayx.Graphy.GraphyManager/ModuleType moduleType, Tayx.Graphy.GraphyManager/ModuleState moduleState)
    // Offset: 0x1048744
    void SetModuleMode(::Tayx::Graphy::GraphyManager::ModuleType moduleType, ::Tayx::Graphy::GraphyManager::ModuleState moduleState);
    // private System.Void Init()
    // Offset: 0x10480D4
    void Init();
    // private System.Void CheckForHotkeyPresses()
    // Offset: 0x10484F4
    void CheckForHotkeyPresses();
    // private System.Void ToggleModes()
    // Offset: 0x10488E0
    void ToggleModes();
    // private System.Void ToggleActive()
    // Offset: 0x1048D50
    void ToggleActive();
    // private System.Boolean CheckFor1KeyPress(UnityEngine.KeyCode key)
    // Offset: 0x1048D44
    bool CheckFor1KeyPress(::UnityEngine::KeyCode key);
    // private System.Boolean CheckFor2KeyPress(UnityEngine.KeyCode key1, UnityEngine.KeyCode key2)
    // Offset: 0x1048CD4
    bool CheckFor2KeyPress(::UnityEngine::KeyCode key1, ::UnityEngine::KeyCode key2);
    // private System.Boolean CheckFor3KeyPress(UnityEngine.KeyCode key1, UnityEngine.KeyCode key2, UnityEngine.KeyCode key3)
    // Offset: 0x1048810
    bool CheckFor3KeyPress(::UnityEngine::KeyCode key1, ::UnityEngine::KeyCode key2, ::UnityEngine::KeyCode key3);
    // private System.Void UpdateAllParameters()
    // Offset: 0x1047204
    void UpdateAllParameters();
    // protected System.Void .ctor()
    // Offset: 0x1046F68
    // Implemented from: Tayx.Graphy.Utils.Singleton`1
    // Base method: System.Void Singleton_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GraphyManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Tayx::Graphy::GraphyManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GraphyManager*, creationType>()));
    }
  }; // Tayx.Graphy.GraphyManager
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::GraphyManager::ModuleToggleState, "Tayx.Graphy", "GraphyManager/ModuleToggleState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::GraphyManager::LookForAudioListener, "Tayx.Graphy", "GraphyManager/LookForAudioListener");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::GraphyManager::ModulePosition, "Tayx.Graphy", "GraphyManager/ModulePosition");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::GraphyManager::ModuleState, "Tayx.Graphy", "GraphyManager/ModuleState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::GraphyManager::Mode, "Tayx.Graphy", "GraphyManager/Mode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_GraphyMode
// Il2CppName: get_GraphyMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Tayx::Graphy::GraphyManager::Mode (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_GraphyMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_GraphyMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_GraphyMode
// Il2CppName: set_GraphyMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::Tayx::Graphy::GraphyManager::Mode)>(&Tayx::Graphy::GraphyManager::set_GraphyMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyManager/Mode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_GraphyMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_KeepAlive
// Il2CppName: get_KeepAlive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_KeepAlive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_KeepAlive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_Background
// Il2CppName: get_Background
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_Background)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_Background", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_Background
// Il2CppName: set_Background
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(bool)>(&Tayx::Graphy::GraphyManager::set_Background)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_Background", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_BackgroundColor
// Il2CppName: get_BackgroundColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_BackgroundColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_BackgroundColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_BackgroundColor
// Il2CppName: set_BackgroundColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::UnityEngine::Color)>(&Tayx::Graphy::GraphyManager::set_BackgroundColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_BackgroundColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_GraphModulePosition
// Il2CppName: get_GraphModulePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Tayx::Graphy::GraphyManager::ModulePosition (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_GraphModulePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_GraphModulePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_GraphModulePosition
// Il2CppName: set_GraphModulePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::Tayx::Graphy::GraphyManager::ModulePosition)>(&Tayx::Graphy::GraphyManager::set_GraphModulePosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyManager/ModulePosition")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_GraphModulePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_FpsModuleState
// Il2CppName: get_FpsModuleState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Tayx::Graphy::GraphyManager::ModuleState (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_FpsModuleState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_FpsModuleState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_FpsModuleState
// Il2CppName: set_FpsModuleState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::Tayx::Graphy::GraphyManager::ModuleState)>(&Tayx::Graphy::GraphyManager::set_FpsModuleState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyManager/ModuleState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_FpsModuleState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_TimeToResetMinMaxFps
// Il2CppName: get_TimeToResetMinMaxFps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_TimeToResetMinMaxFps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_TimeToResetMinMaxFps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_TimeToResetMinMaxFps
// Il2CppName: set_TimeToResetMinMaxFps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(int)>(&Tayx::Graphy::GraphyManager::set_TimeToResetMinMaxFps)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_TimeToResetMinMaxFps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_GoodFPSColor
// Il2CppName: get_GoodFPSColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_GoodFPSColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_GoodFPSColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_GoodFPSColor
// Il2CppName: set_GoodFPSColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::UnityEngine::Color)>(&Tayx::Graphy::GraphyManager::set_GoodFPSColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_GoodFPSColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_CautionFPSColor
// Il2CppName: get_CautionFPSColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_CautionFPSColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_CautionFPSColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_CautionFPSColor
// Il2CppName: set_CautionFPSColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::UnityEngine::Color)>(&Tayx::Graphy::GraphyManager::set_CautionFPSColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_CautionFPSColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_CriticalFPSColor
// Il2CppName: get_CriticalFPSColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_CriticalFPSColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_CriticalFPSColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_CriticalFPSColor
// Il2CppName: set_CriticalFPSColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::UnityEngine::Color)>(&Tayx::Graphy::GraphyManager::set_CriticalFPSColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_CriticalFPSColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_GoodFPSThreshold
// Il2CppName: get_GoodFPSThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_GoodFPSThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_GoodFPSThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_GoodFPSThreshold
// Il2CppName: set_GoodFPSThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(int)>(&Tayx::Graphy::GraphyManager::set_GoodFPSThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_GoodFPSThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_CautionFPSThreshold
// Il2CppName: get_CautionFPSThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_CautionFPSThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_CautionFPSThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_CautionFPSThreshold
// Il2CppName: set_CautionFPSThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(int)>(&Tayx::Graphy::GraphyManager::set_CautionFPSThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_CautionFPSThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_FpsGraphResolution
// Il2CppName: get_FpsGraphResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_FpsGraphResolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_FpsGraphResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_FpsGraphResolution
// Il2CppName: set_FpsGraphResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(int)>(&Tayx::Graphy::GraphyManager::set_FpsGraphResolution)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_FpsGraphResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_FpsTextUpdateRate
// Il2CppName: get_FpsTextUpdateRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_FpsTextUpdateRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_FpsTextUpdateRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_FpsTextUpdateRate
// Il2CppName: set_FpsTextUpdateRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(int)>(&Tayx::Graphy::GraphyManager::set_FpsTextUpdateRate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_FpsTextUpdateRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_CurrentFPS
// Il2CppName: get_CurrentFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_CurrentFPS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_CurrentFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_AverageFPS
// Il2CppName: get_AverageFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_AverageFPS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_AverageFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_MinFPS
// Il2CppName: get_MinFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_MinFPS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_MinFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_MaxFPS
// Il2CppName: get_MaxFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_MaxFPS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_MaxFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_RamModuleState
// Il2CppName: get_RamModuleState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Tayx::Graphy::GraphyManager::ModuleState (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_RamModuleState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_RamModuleState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_RamModuleState
// Il2CppName: set_RamModuleState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::Tayx::Graphy::GraphyManager::ModuleState)>(&Tayx::Graphy::GraphyManager::set_RamModuleState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyManager/ModuleState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_RamModuleState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_AllocatedRamColor
// Il2CppName: get_AllocatedRamColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_AllocatedRamColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_AllocatedRamColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_AllocatedRamColor
// Il2CppName: set_AllocatedRamColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::UnityEngine::Color)>(&Tayx::Graphy::GraphyManager::set_AllocatedRamColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_AllocatedRamColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_ReservedRamColor
// Il2CppName: get_ReservedRamColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_ReservedRamColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_ReservedRamColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_ReservedRamColor
// Il2CppName: set_ReservedRamColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::UnityEngine::Color)>(&Tayx::Graphy::GraphyManager::set_ReservedRamColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_ReservedRamColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_MonoRamColor
// Il2CppName: get_MonoRamColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_MonoRamColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_MonoRamColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_MonoRamColor
// Il2CppName: set_MonoRamColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::UnityEngine::Color)>(&Tayx::Graphy::GraphyManager::set_MonoRamColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_MonoRamColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_RamGraphResolution
// Il2CppName: get_RamGraphResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_RamGraphResolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_RamGraphResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_RamGraphResolution
// Il2CppName: set_RamGraphResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(int)>(&Tayx::Graphy::GraphyManager::set_RamGraphResolution)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_RamGraphResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_RamTextUpdateRate
// Il2CppName: get_RamTextUpdateRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_RamTextUpdateRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_RamTextUpdateRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_RamTextUpdateRate
// Il2CppName: set_RamTextUpdateRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(int)>(&Tayx::Graphy::GraphyManager::set_RamTextUpdateRate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_RamTextUpdateRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_AllocatedRam
// Il2CppName: get_AllocatedRam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_AllocatedRam)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_AllocatedRam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_ReservedRam
// Il2CppName: get_ReservedRam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_ReservedRam)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_ReservedRam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_MonoRam
// Il2CppName: get_MonoRam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_MonoRam)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_MonoRam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_AudioModuleState
// Il2CppName: get_AudioModuleState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Tayx::Graphy::GraphyManager::ModuleState (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_AudioModuleState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_AudioModuleState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_AudioModuleState
// Il2CppName: set_AudioModuleState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::Tayx::Graphy::GraphyManager::ModuleState)>(&Tayx::Graphy::GraphyManager::set_AudioModuleState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyManager/ModuleState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_AudioModuleState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_AudioListener
// Il2CppName: get_AudioListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioListener* (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_AudioListener)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_AudioListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_AudioListener
// Il2CppName: set_AudioListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::UnityEngine::AudioListener*)>(&Tayx::Graphy::GraphyManager::set_AudioListener)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioListener")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_AudioListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_FindAudioListenerInCameraIfNull
// Il2CppName: get_FindAudioListenerInCameraIfNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Tayx::Graphy::GraphyManager::LookForAudioListener (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_FindAudioListenerInCameraIfNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_FindAudioListenerInCameraIfNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_FindAudioListenerInCameraIfNull
// Il2CppName: set_FindAudioListenerInCameraIfNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::Tayx::Graphy::GraphyManager::LookForAudioListener)>(&Tayx::Graphy::GraphyManager::set_FindAudioListenerInCameraIfNull)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyManager/LookForAudioListener")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_FindAudioListenerInCameraIfNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_AudioGraphColor
// Il2CppName: get_AudioGraphColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_AudioGraphColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_AudioGraphColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_AudioGraphColor
// Il2CppName: set_AudioGraphColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::UnityEngine::Color)>(&Tayx::Graphy::GraphyManager::set_AudioGraphColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_AudioGraphColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_AudioGraphResolution
// Il2CppName: get_AudioGraphResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_AudioGraphResolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_AudioGraphResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_AudioGraphResolution
// Il2CppName: set_AudioGraphResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(int)>(&Tayx::Graphy::GraphyManager::set_AudioGraphResolution)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_AudioGraphResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_AudioTextUpdateRate
// Il2CppName: get_AudioTextUpdateRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_AudioTextUpdateRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_AudioTextUpdateRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_AudioTextUpdateRate
// Il2CppName: set_AudioTextUpdateRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(int)>(&Tayx::Graphy::GraphyManager::set_AudioTextUpdateRate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_AudioTextUpdateRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_FftWindow
// Il2CppName: get_FftWindow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::FFTWindow (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_FftWindow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_FftWindow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_FftWindow
// Il2CppName: set_FftWindow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::UnityEngine::FFTWindow)>(&Tayx::Graphy::GraphyManager::set_FftWindow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "FFTWindow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_FftWindow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_SpectrumSize
// Il2CppName: get_SpectrumSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_SpectrumSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_SpectrumSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_SpectrumSize
// Il2CppName: set_SpectrumSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(int)>(&Tayx::Graphy::GraphyManager::set_SpectrumSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_SpectrumSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_Spectrum
// Il2CppName: get_Spectrum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_Spectrum)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_Spectrum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_MaxDB
// Il2CppName: get_MaxDB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_MaxDB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_MaxDB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_AdvancedModuleState
// Il2CppName: get_AdvancedModuleState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Tayx::Graphy::GraphyManager::ModuleState (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_AdvancedModuleState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_AdvancedModuleState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_AdvancedModuleState
// Il2CppName: set_AdvancedModuleState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::Tayx::Graphy::GraphyManager::ModuleState)>(&Tayx::Graphy::GraphyManager::set_AdvancedModuleState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyManager/ModuleState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_AdvancedModuleState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::get_AdvancedModulePosition
// Il2CppName: get_AdvancedModulePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Tayx::Graphy::GraphyManager::ModulePosition (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::get_AdvancedModulePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "get_AdvancedModulePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::set_AdvancedModulePosition
// Il2CppName: set_AdvancedModulePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::Tayx::Graphy::GraphyManager::ModulePosition)>(&Tayx::Graphy::GraphyManager::set_AdvancedModulePosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyManager/ModulePosition")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "set_AdvancedModulePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::SetModulePosition
// Il2CppName: SetModulePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::Tayx::Graphy::GraphyManager::ModuleType, ::Tayx::Graphy::GraphyManager::ModulePosition)>(&Tayx::Graphy::GraphyManager::SetModulePosition)> {
  static const MethodInfo* get() {
    static auto* moduleType = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyManager/ModuleType")->byval_arg;
    static auto* modulePosition = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyManager/ModulePosition")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "SetModulePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{moduleType, modulePosition});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::SetModuleMode
// Il2CppName: SetModuleMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)(::Tayx::Graphy::GraphyManager::ModuleType, ::Tayx::Graphy::GraphyManager::ModuleState)>(&Tayx::Graphy::GraphyManager::SetModuleMode)> {
  static const MethodInfo* get() {
    static auto* moduleType = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyManager/ModuleType")->byval_arg;
    static auto* moduleState = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyManager/ModuleState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "SetModuleMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{moduleType, moduleState});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::CheckForHotkeyPresses
// Il2CppName: CheckForHotkeyPresses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::CheckForHotkeyPresses)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "CheckForHotkeyPresses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::ToggleModes
// Il2CppName: ToggleModes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::ToggleModes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "ToggleModes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::ToggleActive
// Il2CppName: ToggleActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::ToggleActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "ToggleActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::CheckFor1KeyPress
// Il2CppName: CheckFor1KeyPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Tayx::Graphy::GraphyManager::*)(::UnityEngine::KeyCode)>(&Tayx::Graphy::GraphyManager::CheckFor1KeyPress)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("UnityEngine", "KeyCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "CheckFor1KeyPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::CheckFor2KeyPress
// Il2CppName: CheckFor2KeyPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Tayx::Graphy::GraphyManager::*)(::UnityEngine::KeyCode, ::UnityEngine::KeyCode)>(&Tayx::Graphy::GraphyManager::CheckFor2KeyPress)> {
  static const MethodInfo* get() {
    static auto* key1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "KeyCode")->byval_arg;
    static auto* key2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "KeyCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "CheckFor2KeyPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key1, key2});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::CheckFor3KeyPress
// Il2CppName: CheckFor3KeyPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Tayx::Graphy::GraphyManager::*)(::UnityEngine::KeyCode, ::UnityEngine::KeyCode, ::UnityEngine::KeyCode)>(&Tayx::Graphy::GraphyManager::CheckFor3KeyPress)> {
  static const MethodInfo* get() {
    static auto* key1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "KeyCode")->byval_arg;
    static auto* key2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "KeyCode")->byval_arg;
    static auto* key3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "KeyCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "CheckFor3KeyPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key1, key2, key3});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::UpdateAllParameters
// Il2CppName: UpdateAllParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::GraphyManager::*)()>(&Tayx::Graphy::GraphyManager::UpdateAllParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::GraphyManager*), "UpdateAllParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::GraphyManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
