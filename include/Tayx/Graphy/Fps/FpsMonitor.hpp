// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Tayx::Graphy
namespace Tayx::Graphy {
  // Forward declaring type: GraphyManager
  class GraphyManager;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Tayx.Graphy.Fps
namespace Tayx::Graphy::Fps {
  // Forward declaring type: FpsMonitor
  class FpsMonitor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Tayx::Graphy::Fps::FpsMonitor);
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::Fps::FpsMonitor*, "Tayx.Graphy.Fps", "FpsMonitor");
// Type namespace: Tayx.Graphy.Fps
namespace Tayx::Graphy::Fps {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Tayx.Graphy.Fps.FpsMonitor
  // [TokenAttribute] Offset: FFFFFFFF
  class FpsMonitor : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Tayx.Graphy.GraphyManager m_graphyManager
    // Size: 0x8
    // Offset: 0x18
    ::Tayx::Graphy::GraphyManager* m_graphyManager;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager*) == 0x8);
    // private System.Single m_currentFps
    // Size: 0x4
    // Offset: 0x20
    float m_currentFps;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_avgFps
    // Size: 0x4
    // Offset: 0x24
    float m_avgFps;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_minFps
    // Size: 0x4
    // Offset: 0x28
    float m_minFps;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_maxFps
    // Size: 0x4
    // Offset: 0x2C
    float m_maxFps;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_averageSamples
    // Size: 0x4
    // Offset: 0x30
    int m_averageSamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_averageSamples and: m_averageFpsSamples
    char __padding5[0x4] = {};
    // private System.Collections.Generic.List`1<System.Single> m_averageFpsSamples
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<float>* m_averageFpsSamples;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<float>*) == 0x8);
    // private System.Int32 m_timeToResetMinMaxFps
    // Size: 0x4
    // Offset: 0x40
    int m_timeToResetMinMaxFps;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_timeToResetMinFpsPassed
    // Size: 0x4
    // Offset: 0x44
    float m_timeToResetMinFpsPassed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_timeToResetMaxFpsPassed
    // Size: 0x4
    // Offset: 0x48
    float m_timeToResetMaxFpsPassed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single unscaledDeltaTime
    // Size: 0x4
    // Offset: 0x4C
    float unscaledDeltaTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Tayx.Graphy.GraphyManager m_graphyManager
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager*& dyn_m_graphyManager();
    // Get instance field reference: private System.Single m_currentFps
    [[deprecated("Use field access instead!")]] float& dyn_m_currentFps();
    // Get instance field reference: private System.Single m_avgFps
    [[deprecated("Use field access instead!")]] float& dyn_m_avgFps();
    // Get instance field reference: private System.Single m_minFps
    [[deprecated("Use field access instead!")]] float& dyn_m_minFps();
    // Get instance field reference: private System.Single m_maxFps
    [[deprecated("Use field access instead!")]] float& dyn_m_maxFps();
    // Get instance field reference: private System.Int32 m_averageSamples
    [[deprecated("Use field access instead!")]] int& dyn_m_averageSamples();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Single> m_averageFpsSamples
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& dyn_m_averageFpsSamples();
    // Get instance field reference: private System.Int32 m_timeToResetMinMaxFps
    [[deprecated("Use field access instead!")]] int& dyn_m_timeToResetMinMaxFps();
    // Get instance field reference: private System.Single m_timeToResetMinFpsPassed
    [[deprecated("Use field access instead!")]] float& dyn_m_timeToResetMinFpsPassed();
    // Get instance field reference: private System.Single m_timeToResetMaxFpsPassed
    [[deprecated("Use field access instead!")]] float& dyn_m_timeToResetMaxFpsPassed();
    // Get instance field reference: private System.Single unscaledDeltaTime
    [[deprecated("Use field access instead!")]] float& dyn_unscaledDeltaTime();
    // public System.Single get_CurrentFPS()
    // Offset: 0x1044ADC
    float get_CurrentFPS();
    // public System.Single get_AverageFPS()
    // Offset: 0x1043B8C
    float get_AverageFPS();
    // public System.Single get_MinFPS()
    // Offset: 0x1044AE4
    float get_MinFPS();
    // public System.Single get_MaxFPS()
    // Offset: 0x1044AEC
    float get_MaxFPS();
    // private System.Void Awake()
    // Offset: 0x1044AF4
    void Awake();
    // private System.Void Update()
    // Offset: 0x1044BC8
    void Update();
    // public System.Void UpdateParameters()
    // Offset: 0x10449B4
    void UpdateParameters();
    // private System.Void Init()
    // Offset: 0x1044AF8
    void Init();
    // public System.Void .ctor()
    // Offset: 0x1044DD4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FpsMonitor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Tayx::Graphy::Fps::FpsMonitor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FpsMonitor*, creationType>()));
    }
  }; // Tayx.Graphy.Fps.FpsMonitor
  #pragma pack(pop)
  static check_size<sizeof(FpsMonitor), 76 + sizeof(float)> __Tayx_Graphy_Fps_FpsMonitorSizeCheck;
  static_assert(sizeof(FpsMonitor) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Tayx::Graphy::Fps::FpsMonitor::get_CurrentFPS
// Il2CppName: get_CurrentFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::Fps::FpsMonitor::*)()>(&Tayx::Graphy::Fps::FpsMonitor::get_CurrentFPS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::FpsMonitor*), "get_CurrentFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::FpsMonitor::get_AverageFPS
// Il2CppName: get_AverageFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::Fps::FpsMonitor::*)()>(&Tayx::Graphy::Fps::FpsMonitor::get_AverageFPS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::FpsMonitor*), "get_AverageFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::FpsMonitor::get_MinFPS
// Il2CppName: get_MinFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::Fps::FpsMonitor::*)()>(&Tayx::Graphy::Fps::FpsMonitor::get_MinFPS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::FpsMonitor*), "get_MinFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::FpsMonitor::get_MaxFPS
// Il2CppName: get_MaxFPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Tayx::Graphy::Fps::FpsMonitor::*)()>(&Tayx::Graphy::Fps::FpsMonitor::get_MaxFPS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::FpsMonitor*), "get_MaxFPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::FpsMonitor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::FpsMonitor::*)()>(&Tayx::Graphy::Fps::FpsMonitor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::FpsMonitor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::FpsMonitor::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::FpsMonitor::*)()>(&Tayx::Graphy::Fps::FpsMonitor::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::FpsMonitor*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::FpsMonitor::UpdateParameters
// Il2CppName: UpdateParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::FpsMonitor::*)()>(&Tayx::Graphy::Fps::FpsMonitor::UpdateParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::FpsMonitor*), "UpdateParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::FpsMonitor::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Fps::FpsMonitor::*)()>(&Tayx::Graphy::Fps::FpsMonitor::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Fps::FpsMonitor*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Fps::FpsMonitor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
