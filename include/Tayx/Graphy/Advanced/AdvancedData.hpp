// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Tayx.Graphy.UI.IMovable
#include "Tayx/Graphy/UI/IMovable.hpp"
// Including type: Tayx.Graphy.UI.IModifiableState
#include "Tayx/Graphy/UI/IModifiableState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Tayx.Graphy.Advanced
namespace Tayx::Graphy::Advanced {
  // Forward declaring type: AdvancedData
  class AdvancedData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Tayx::Graphy::Advanced::AdvancedData);
DEFINE_IL2CPP_ARG_TYPE(::Tayx::Graphy::Advanced::AdvancedData*, "Tayx.Graphy.Advanced", "AdvancedData");
// Type namespace: Tayx.Graphy.Advanced
namespace Tayx::Graphy::Advanced {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: Tayx.Graphy.Advanced.AdvancedData
  // [TokenAttribute] Offset: FFFFFFFF
  class AdvancedData : public ::UnityEngine::MonoBehaviour/*, public ::Tayx::Graphy::UI::IMovable, public ::Tayx::Graphy::UI::IModifiableState*/ {
    public:
    public:
    // private Tayx.Graphy.GraphyManager m_graphyManager
    // Size: 0x8
    // Offset: 0x18
    ::Tayx::Graphy::GraphyManager* m_graphyManager;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager*) == 0x8);
    // private UnityEngine.RectTransform m_rectTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::RectTransform* m_rectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.UI.Image> m_backgroundImages
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::UI::Image*>* m_backgroundImages;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::UI::Image*>*) == 0x8);
    // private UnityEngine.UI.Text m_graphicsDeviceVersionText
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Text* m_graphicsDeviceVersionText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text m_processorTypeText
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UI::Text* m_processorTypeText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text m_operatingSystemText
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::UI::Text* m_operatingSystemText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text m_systemMemoryText
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::UI::Text* m_systemMemoryText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text m_graphicsDeviceNameText
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UI::Text* m_graphicsDeviceNameText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text m_graphicsMemorySizeText
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::UI::Text* m_graphicsMemorySizeText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text m_screenResolutionText
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::UI::Text* m_screenResolutionText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text m_gameWindowResolutionText
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::UI::Text* m_gameWindowResolutionText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // [RangeAttribute] Offset: 0xADD7E4
    // private System.Single m_updateRate
    // Size: 0x4
    // Offset: 0x70
    float m_updateRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_deltaTime
    // Size: 0x4
    // Offset: 0x74
    float m_deltaTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Text.StringBuilder m_sb
    // Size: 0x8
    // Offset: 0x78
    ::System::Text::StringBuilder* m_sb;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private Tayx.Graphy.GraphyManager/ModuleState m_previousModuleState
    // Size: 0x4
    // Offset: 0x80
    ::Tayx::Graphy::GraphyManager::ModuleState m_previousModuleState;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager::ModuleState) == 0x4);
    // private Tayx.Graphy.GraphyManager/ModuleState m_currentModuleState
    // Size: 0x4
    // Offset: 0x84
    ::Tayx::Graphy::GraphyManager::ModuleState m_currentModuleState;
    // Field size check
    static_assert(sizeof(::Tayx::Graphy::GraphyManager::ModuleState) == 0x4);
    // private readonly System.String[] m_windowStrings
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::StringW> m_windowStrings;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Tayx::Graphy::UI::IMovable
    operator ::Tayx::Graphy::UI::IMovable() noexcept {
      return *reinterpret_cast<::Tayx::Graphy::UI::IMovable*>(this);
    }
    // Creating interface conversion operator: operator ::Tayx::Graphy::UI::IModifiableState
    operator ::Tayx::Graphy::UI::IModifiableState() noexcept {
      return *reinterpret_cast<::Tayx::Graphy::UI::IModifiableState*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Tayx.Graphy.GraphyManager m_graphyManager
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager*& dyn_m_graphyManager();
    // Get instance field reference: private UnityEngine.RectTransform m_rectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_m_rectTransform();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.UI.Image> m_backgroundImages
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::UI::Image*>*& dyn_m_backgroundImages();
    // Get instance field reference: private UnityEngine.UI.Text m_graphicsDeviceVersionText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_graphicsDeviceVersionText();
    // Get instance field reference: private UnityEngine.UI.Text m_processorTypeText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_processorTypeText();
    // Get instance field reference: private UnityEngine.UI.Text m_operatingSystemText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_operatingSystemText();
    // Get instance field reference: private UnityEngine.UI.Text m_systemMemoryText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_systemMemoryText();
    // Get instance field reference: private UnityEngine.UI.Text m_graphicsDeviceNameText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_graphicsDeviceNameText();
    // Get instance field reference: private UnityEngine.UI.Text m_graphicsMemorySizeText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_graphicsMemorySizeText();
    // Get instance field reference: private UnityEngine.UI.Text m_screenResolutionText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_screenResolutionText();
    // Get instance field reference: private UnityEngine.UI.Text m_gameWindowResolutionText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_m_gameWindowResolutionText();
    // Get instance field reference: private System.Single m_updateRate
    [[deprecated("Use field access instead!")]] float& dyn_m_updateRate();
    // Get instance field reference: private System.Single m_deltaTime
    [[deprecated("Use field access instead!")]] float& dyn_m_deltaTime();
    // Get instance field reference: private System.Text.StringBuilder m_sb
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn_m_sb();
    // Get instance field reference: private Tayx.Graphy.GraphyManager/ModuleState m_previousModuleState
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager::ModuleState& dyn_m_previousModuleState();
    // Get instance field reference: private Tayx.Graphy.GraphyManager/ModuleState m_currentModuleState
    [[deprecated("Use field access instead!")]] ::Tayx::Graphy::GraphyManager::ModuleState& dyn_m_currentModuleState();
    // Get instance field reference: private readonly System.String[] m_windowStrings
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_m_windowStrings();
    // private System.Void Awake()
    // Offset: 0x103E490
    void Awake();
    // private System.Void Update()
    // Offset: 0x103F4D8
    void Update();
    // public System.Void SetPosition(Tayx.Graphy.GraphyManager/ModulePosition newModulePosition)
    // Offset: 0x103FBF8
    void SetPosition(::Tayx::Graphy::GraphyManager::ModulePosition newModulePosition);
    // public System.Void SetState(Tayx.Graphy.GraphyManager/ModuleState state)
    // Offset: 0x1040468
    void SetState(::Tayx::Graphy::GraphyManager::ModuleState state);
    // public System.Void RestorePreviousState()
    // Offset: 0x1040658
    void RestorePreviousState();
    // public System.Void UpdateParameters()
    // Offset: 0x1040660
    void UpdateParameters();
    // private System.Void Init()
    // Offset: 0x103E494
    void Init();
    // public System.Void .ctor()
    // Offset: 0x1040D34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdvancedData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Tayx::Graphy::Advanced::AdvancedData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdvancedData*, creationType>()));
    }
  }; // Tayx.Graphy.Advanced.AdvancedData
  #pragma pack(pop)
  static check_size<sizeof(AdvancedData), 136 + sizeof(::ArrayW<::StringW>)> __Tayx_Graphy_Advanced_AdvancedDataSizeCheck;
  static_assert(sizeof(AdvancedData) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Tayx::Graphy::Advanced::AdvancedData::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Advanced::AdvancedData::*)()>(&Tayx::Graphy::Advanced::AdvancedData::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Advanced::AdvancedData*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Advanced::AdvancedData::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Advanced::AdvancedData::*)()>(&Tayx::Graphy::Advanced::AdvancedData::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Advanced::AdvancedData*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Advanced::AdvancedData::SetPosition
// Il2CppName: SetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Advanced::AdvancedData::*)(::Tayx::Graphy::GraphyManager::ModulePosition)>(&Tayx::Graphy::Advanced::AdvancedData::SetPosition)> {
  static const MethodInfo* get() {
    static auto* newModulePosition = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyManager/ModulePosition")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Advanced::AdvancedData*), "SetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newModulePosition});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Advanced::AdvancedData::SetState
// Il2CppName: SetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Advanced::AdvancedData::*)(::Tayx::Graphy::GraphyManager::ModuleState)>(&Tayx::Graphy::Advanced::AdvancedData::SetState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("Tayx.Graphy", "GraphyManager/ModuleState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Advanced::AdvancedData*), "SetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Advanced::AdvancedData::RestorePreviousState
// Il2CppName: RestorePreviousState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Advanced::AdvancedData::*)()>(&Tayx::Graphy::Advanced::AdvancedData::RestorePreviousState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Advanced::AdvancedData*), "RestorePreviousState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Advanced::AdvancedData::UpdateParameters
// Il2CppName: UpdateParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Advanced::AdvancedData::*)()>(&Tayx::Graphy::Advanced::AdvancedData::UpdateParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Advanced::AdvancedData*), "UpdateParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Advanced::AdvancedData::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Tayx::Graphy::Advanced::AdvancedData::*)()>(&Tayx::Graphy::Advanced::AdvancedData::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tayx::Graphy::Advanced::AdvancedData*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Tayx::Graphy::Advanced::AdvancedData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
