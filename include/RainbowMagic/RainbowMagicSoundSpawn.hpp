// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: RainbowMagic
namespace RainbowMagic {
  // Forward declaring type: RainbowMagicSoundSpawn
  class RainbowMagicSoundSpawn;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RainbowMagic::RainbowMagicSoundSpawn);
DEFINE_IL2CPP_ARG_TYPE(::RainbowMagic::RainbowMagicSoundSpawn*, "RainbowMagic", "RainbowMagicSoundSpawn");
// Type namespace: RainbowMagic
namespace RainbowMagic {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: RainbowMagic.RainbowMagicSoundSpawn
  // [TokenAttribute] Offset: FFFFFFFF
  class RainbowMagicSoundSpawn : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject prefabSound
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* prefabSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean destroyWhenDone
    // Size: 0x1
    // Offset: 0x20
    bool destroyWhenDone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean soundPrefabIsChild
    // Size: 0x1
    // Offset: 0x21
    bool soundPrefabIsChild;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: soundPrefabIsChild and: pitchRandomMultiplier
    char __padding2[0x2] = {};
    // [RangeAttribute] Offset: 0xADE930
    // public System.Single pitchRandomMultiplier
    // Size: 0x4
    // Offset: 0x24
    float pitchRandomMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject prefabSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_prefabSound();
    // Get instance field reference: public System.Boolean destroyWhenDone
    [[deprecated("Use field access instead!")]] bool& dyn_destroyWhenDone();
    // Get instance field reference: public System.Boolean soundPrefabIsChild
    [[deprecated("Use field access instead!")]] bool& dyn_soundPrefabIsChild();
    // Get instance field reference: public System.Single pitchRandomMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_pitchRandomMultiplier();
    // private System.Void Start()
    // Offset: 0xE27198
    void Start();
    // public System.Void .ctor()
    // Offset: 0xE2748C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RainbowMagicSoundSpawn* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RainbowMagic::RainbowMagicSoundSpawn::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RainbowMagicSoundSpawn*, creationType>()));
    }
  }; // RainbowMagic.RainbowMagicSoundSpawn
  #pragma pack(pop)
  static check_size<sizeof(RainbowMagicSoundSpawn), 36 + sizeof(float)> __RainbowMagic_RainbowMagicSoundSpawnSizeCheck;
  static_assert(sizeof(RainbowMagicSoundSpawn) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RainbowMagic::RainbowMagicSoundSpawn::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RainbowMagic::RainbowMagicSoundSpawn::*)()>(&RainbowMagic::RainbowMagicSoundSpawn::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RainbowMagic::RainbowMagicSoundSpawn*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RainbowMagic::RainbowMagicSoundSpawn::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
