// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: RequestInfusionCalculation
  class RequestInfusionCalculation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::RequestInfusionCalculation);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::RequestInfusionCalculation*, "ExtUI", "RequestInfusionCalculation");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.RequestInfusionCalculation
  // [TokenAttribute] Offset: FFFFFFFF
  class RequestInfusionCalculation : public ::Il2CppObject {
    public:
    public:
    // public System.Byte requestType
    // Size: 0x1
    // Offset: 0x10
    uint8_t requestType;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: requestType and: oldidx
    char __padding0[0x3] = {};
    // public System.Int32 oldidx
    // Size: 0x4
    // Offset: 0x14
    int oldidx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 newidx
    // Size: 0x4
    // Offset: 0x18
    int newidx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Byte requestType
    [[deprecated("Use field access instead!")]] uint8_t& dyn_requestType();
    // Get instance field reference: public System.Int32 oldidx
    [[deprecated("Use field access instead!")]] int& dyn_oldidx();
    // Get instance field reference: public System.Int32 newidx
    [[deprecated("Use field access instead!")]] int& dyn_newidx();
    // public System.Void .ctor()
    // Offset: 0x28CC050
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RequestInfusionCalculation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::RequestInfusionCalculation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RequestInfusionCalculation*, creationType>()));
    }
  }; // ExtUI.RequestInfusionCalculation
  #pragma pack(pop)
  static check_size<sizeof(RequestInfusionCalculation), 24 + sizeof(int)> __ExtUI_RequestInfusionCalculationSizeCheck;
  static_assert(sizeof(RequestInfusionCalculation) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::RequestInfusionCalculation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
