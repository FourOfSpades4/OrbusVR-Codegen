// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExtUI
namespace ExtUI {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: CharacterAchievementsArray
  class CharacterAchievementsArray;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::CharacterAchievementsArray);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::CharacterAchievementsArray*, "ExtUI", "CharacterAchievementsArray");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.CharacterAchievementsArray
  // [TokenAttribute] Offset: FFFFFFFF
  class CharacterAchievementsArray : public ::Il2CppObject {
    public:
    // Nested type: ::ExtUI::CharacterAchievementsArray::$$c__DisplayClass3_0
    class $$c__DisplayClass3_0;
    public:
    // public System.String characterid
    // Size: 0x8
    // Offset: 0x10
    ::StringW characterid;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.Single> achievements
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::StringW, float>* achievements;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, float>*) == 0x8);
    // private System.Collections.Generic.List`1<System.String> achievementNames
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::StringW>* achievementNames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Get instance field reference: public System.String characterid
    [[deprecated("Use field access instead!")]] ::StringW& dyn_characterid();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Single> achievements
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, float>*& dyn_achievements();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> achievementNames
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_achievementNames();
    // public System.Void waitForAchievements(System.Action callback)
    // Offset: 0xF48368
    void waitForAchievements(::System::Action* callback);
    // public System.Single GetAchievementPercentage(System.String achievementKey)
    // Offset: 0xF484F0
    float GetAchievementPercentage(::StringW achievementKey);
    // public System.Collections.Generic.List`1<System.String> GetAchievementNames()
    // Offset: 0xF485A0
    ::System::Collections::Generic::List_1<::StringW>* GetAchievementNames();
    // public System.Void .ctor()
    // Offset: 0xF485A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CharacterAchievementsArray* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::CharacterAchievementsArray::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CharacterAchievementsArray*, creationType>()));
    }
  }; // ExtUI.CharacterAchievementsArray
  #pragma pack(pop)
  static check_size<sizeof(CharacterAchievementsArray), 32 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __ExtUI_CharacterAchievementsArraySizeCheck;
  static_assert(sizeof(CharacterAchievementsArray) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::CharacterAchievementsArray::waitForAchievements
// Il2CppName: waitForAchievements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::CharacterAchievementsArray::*)(::System::Action*)>(&ExtUI::CharacterAchievementsArray::waitForAchievements)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::CharacterAchievementsArray*), "waitForAchievements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: ExtUI::CharacterAchievementsArray::GetAchievementPercentage
// Il2CppName: GetAchievementPercentage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ExtUI::CharacterAchievementsArray::*)(::StringW)>(&ExtUI::CharacterAchievementsArray::GetAchievementPercentage)> {
  static const MethodInfo* get() {
    static auto* achievementKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::CharacterAchievementsArray*), "GetAchievementPercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{achievementKey});
  }
};
// Writing MetadataGetter for method: ExtUI::CharacterAchievementsArray::GetAchievementNames
// Il2CppName: GetAchievementNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (ExtUI::CharacterAchievementsArray::*)()>(&ExtUI::CharacterAchievementsArray::GetAchievementNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::CharacterAchievementsArray*), "GetAchievementNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::CharacterAchievementsArray::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
