// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: NewCharacterSubmission
  class NewCharacterSubmission;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::NewCharacterSubmission);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::NewCharacterSubmission*, "ExtUI", "NewCharacterSubmission");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.NewCharacterSubmission
  // [TokenAttribute] Offset: FFFFFFFF
  class NewCharacterSubmission : public ::Il2CppObject {
    public:
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Byte mouthset
    // Size: 0x1
    // Offset: 0x18
    uint8_t mouthset;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte eyeset
    // Size: 0x1
    // Offset: 0x19
    uint8_t eyeset;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: eyeset and: skintone
    char __padding2[0x2] = {};
    // public System.Single skintone
    // Size: 0x4
    // Offset: 0x1C
    float skintone;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Byte haircolor
    // Size: 0x1
    // Offset: 0x20
    uint8_t haircolor;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte hairstyle
    // Size: 0x1
    // Offset: 0x21
    uint8_t hairstyle;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte nosestyle
    // Size: 0x1
    // Offset: 0x22
    uint8_t nosestyle;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte eyecolor
    // Size: 0x1
    // Offset: 0x23
    uint8_t eyecolor;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte discipline
    // Size: 0x1
    // Offset: 0x24
    uint8_t discipline;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte earstyle
    // Size: 0x1
    // Offset: 0x25
    uint8_t earstyle;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: earstyle and: breasts
    char __padding9[0x2] = {};
    // public System.Single breasts
    // Size: 0x4
    // Offset: 0x28
    float breasts;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single chest
    // Size: 0x4
    // Offset: 0x2C
    float chest;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single cheekBones
    // Size: 0x4
    // Offset: 0x30
    float cheekBones;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single cheeks
    // Size: 0x4
    // Offset: 0x34
    float cheeks;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single chin
    // Size: 0x4
    // Offset: 0x38
    float chin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single faceDepth
    // Size: 0x4
    // Offset: 0x3C
    float faceDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single forehead
    // Size: 0x4
    // Offset: 0x40
    float forehead;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single hips
    // Size: 0x4
    // Offset: 0x44
    float hips;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single neck
    // Size: 0x4
    // Offset: 0x48
    float neck;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single shoulders
    // Size: 0x4
    // Offset: 0x4C
    float shoulders;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single waist
    // Size: 0x4
    // Offset: 0x50
    float waist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: waist and: existingId
    char __padding20[0x4] = {};
    // public System.String existingId
    // Size: 0x8
    // Offset: 0x58
    ::StringW existingId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Byte primaryWeaponIdx
    // Size: 0x1
    // Offset: 0x60
    uint8_t primaryWeaponIdx;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.Byte mouthset
    [[deprecated("Use field access instead!")]] uint8_t& dyn_mouthset();
    // Get instance field reference: public System.Byte eyeset
    [[deprecated("Use field access instead!")]] uint8_t& dyn_eyeset();
    // Get instance field reference: public System.Single skintone
    [[deprecated("Use field access instead!")]] float& dyn_skintone();
    // Get instance field reference: public System.Byte haircolor
    [[deprecated("Use field access instead!")]] uint8_t& dyn_haircolor();
    // Get instance field reference: public System.Byte hairstyle
    [[deprecated("Use field access instead!")]] uint8_t& dyn_hairstyle();
    // Get instance field reference: public System.Byte nosestyle
    [[deprecated("Use field access instead!")]] uint8_t& dyn_nosestyle();
    // Get instance field reference: public System.Byte eyecolor
    [[deprecated("Use field access instead!")]] uint8_t& dyn_eyecolor();
    // Get instance field reference: public System.Byte discipline
    [[deprecated("Use field access instead!")]] uint8_t& dyn_discipline();
    // Get instance field reference: public System.Byte earstyle
    [[deprecated("Use field access instead!")]] uint8_t& dyn_earstyle();
    // Get instance field reference: public System.Single breasts
    [[deprecated("Use field access instead!")]] float& dyn_breasts();
    // Get instance field reference: public System.Single chest
    [[deprecated("Use field access instead!")]] float& dyn_chest();
    // Get instance field reference: public System.Single cheekBones
    [[deprecated("Use field access instead!")]] float& dyn_cheekBones();
    // Get instance field reference: public System.Single cheeks
    [[deprecated("Use field access instead!")]] float& dyn_cheeks();
    // Get instance field reference: public System.Single chin
    [[deprecated("Use field access instead!")]] float& dyn_chin();
    // Get instance field reference: public System.Single faceDepth
    [[deprecated("Use field access instead!")]] float& dyn_faceDepth();
    // Get instance field reference: public System.Single forehead
    [[deprecated("Use field access instead!")]] float& dyn_forehead();
    // Get instance field reference: public System.Single hips
    [[deprecated("Use field access instead!")]] float& dyn_hips();
    // Get instance field reference: public System.Single neck
    [[deprecated("Use field access instead!")]] float& dyn_neck();
    // Get instance field reference: public System.Single shoulders
    [[deprecated("Use field access instead!")]] float& dyn_shoulders();
    // Get instance field reference: public System.Single waist
    [[deprecated("Use field access instead!")]] float& dyn_waist();
    // Get instance field reference: public System.String existingId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_existingId();
    // Get instance field reference: public System.Byte primaryWeaponIdx
    [[deprecated("Use field access instead!")]] uint8_t& dyn_primaryWeaponIdx();
    // public System.Void .ctor()
    // Offset: 0x28E31AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NewCharacterSubmission* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::NewCharacterSubmission::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NewCharacterSubmission*, creationType>()));
    }
  }; // ExtUI.NewCharacterSubmission
  #pragma pack(pop)
  static check_size<sizeof(NewCharacterSubmission), 96 + sizeof(uint8_t)> __ExtUI_NewCharacterSubmissionSizeCheck;
  static_assert(sizeof(NewCharacterSubmission) == 0x61);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::NewCharacterSubmission::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
