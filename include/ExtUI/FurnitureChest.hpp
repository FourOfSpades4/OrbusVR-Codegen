// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: InventoryItemInstance
  class InventoryItemInstance;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: NetEntity
  class NetEntity;
  // Forward declaring type: ItemContainer
  class ItemContainer;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Completed forward declares
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: FurnitureChest
  class FurnitureChest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::FurnitureChest);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::FurnitureChest*, "ExtUI", "FurnitureChest");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.FurnitureChest
  // [TokenAttribute] Offset: FFFFFFFF
  class FurnitureChest : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::ExtUI::FurnitureChest::orbusNetMethodIdx
    struct orbusNetMethodIdx;
    // Nested type: ::ExtUI::FurnitureChest::orbusIncomingMethodIdx
    struct orbusIncomingMethodIdx;
    // Nested type: ::ExtUI::FurnitureChest::$$c__DisplayClass18_0
    class $$c__DisplayClass18_0;
    // Nested type: ::ExtUI::FurnitureChest::$$c__DisplayClass19_0
    class $$c__DisplayClass19_0;
    // Nested type: ::ExtUI::FurnitureChest::$$c__DisplayClass20_0
    class $$c__DisplayClass20_0;
    // Nested type: ::ExtUI::FurnitureChest::$$c
    class $$c;
    public:
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x18
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private ExtUI.InventoryItemInstance[] currentFurniture
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::ExtUI::InventoryItemInstance*> currentFurniture;
    // Field size check
    static_assert(sizeof(::ArrayW<::ExtUI::InventoryItemInstance*>) == 0x8);
    // public UnityEngine.GameObject[] furnitureSlots
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::GameObject*> furnitureSlots;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject furniturePrefab
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* furniturePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private MagicalActual.NetEntity myEntity
    // Size: 0x8
    // Offset: 0x38
    ::MagicalActual::NetEntity* myEntity;
    // Field size check
    static_assert(sizeof(::MagicalActual::NetEntity*) == 0x8);
    // private MagicalActual.ItemContainer myItemContainer
    // Size: 0x8
    // Offset: 0x40
    ::MagicalActual::ItemContainer* myItemContainer;
    // Field size check
    static_assert(sizeof(::MagicalActual::ItemContainer*) == 0x8);
    // private System.String furnitureName
    // Size: 0x8
    // Offset: 0x48
    ::StringW furnitureName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean buildMode
    // Size: 0x1
    // Offset: 0x50
    bool buildMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: private ExtUI.InventoryItemInstance[] currentFurniture
    [[deprecated("Use field access instead!")]] ::ArrayW<::ExtUI::InventoryItemInstance*>& dyn_currentFurniture();
    // Get instance field reference: public UnityEngine.GameObject[] furnitureSlots
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_furnitureSlots();
    // Get instance field reference: public UnityEngine.GameObject furniturePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_furniturePrefab();
    // Get instance field reference: private MagicalActual.NetEntity myEntity
    [[deprecated("Use field access instead!")]] ::MagicalActual::NetEntity*& dyn_myEntity();
    // Get instance field reference: private MagicalActual.ItemContainer myItemContainer
    [[deprecated("Use field access instead!")]] ::MagicalActual::ItemContainer*& dyn_myItemContainer();
    // Get instance field reference: private System.String furnitureName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_furnitureName();
    // Get instance field reference: private System.Boolean buildMode
    [[deprecated("Use field access instead!")]] bool& dyn_buildMode();
    // private System.Void Awake()
    // Offset: 0xF4A4D4
    void Awake();
    // private System.Void Start()
    // Offset: 0xF4A554
    void Start();
    // private System.Void ItemContainerInventoryChanged(MagicalActual.ItemContainer container)
    // Offset: 0xF4A558
    void ItemContainerInventoryChanged(::MagicalActual::ItemContainer* container);
    // private System.Void UpdateRoom()
    // Offset: 0xF4A55C
    void UpdateRoom();
    // public System.Boolean GetBuildMode()
    // Offset: 0xF4AF78
    bool GetBuildMode();
    // public System.Void ToggleBuildMode()
    // Offset: 0xF4AF80
    void ToggleBuildMode();
    // private System.Void UpdateAllInteractables()
    // Offset: 0xF4B1D4
    void UpdateAllInteractables();
    // private System.Void UpdateInteractable(System.Int32 slotNum)
    // Offset: 0xF4B41C
    void UpdateInteractable(int slotNum);
    // public System.Void LoadSavedPositionAndRotation(System.Int32 slotNum)
    // Offset: 0xF4AE18
    void LoadSavedPositionAndRotation(int slotNum);
    // public System.Void ResetSavedPositionAndRotation(System.Int32 slotNum)
    // Offset: 0xF4AD44
    void ResetSavedPositionAndRotation(int slotNum);
    // public System.Void SavePositionAndRotation(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Int32 slotNum)
    // Offset: 0xF4B648
    void SavePositionAndRotation(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, int slotNum);
    // public System.Void SaveAllObjectData()
    // Offset: 0xF4B018
    void SaveAllObjectData();
    // public System.Void RequestUpgrade()
    // Offset: 0xF4BA30
    void RequestUpgrade();
    // public System.Void orbusNetInit(MagicalActual.NetEntity entity)
    // Offset: 0xF4BB40
    void orbusNetInit(::MagicalActual::NetEntity* entity);
    // public System.Void .ctor()
    // Offset: 0xF4BD70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FurnitureChest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::FurnitureChest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FurnitureChest*, creationType>()));
    }
    // private System.Void <orbusNetInit>b__23_0(System.Collections.ArrayList results)
    // Offset: 0xF4BDC8
    void $orbusNetInit$b__23_0(::System::Collections::ArrayList* results);
  }; // ExtUI.FurnitureChest
  #pragma pack(pop)
  static check_size<sizeof(FurnitureChest), 80 + sizeof(bool)> __ExtUI_FurnitureChestSizeCheck;
  static_assert(sizeof(FurnitureChest) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::FurnitureChest::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FurnitureChest::*)()>(&ExtUI::FurnitureChest::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FurnitureChest*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::FurnitureChest::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FurnitureChest::*)()>(&ExtUI::FurnitureChest::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FurnitureChest*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::FurnitureChest::ItemContainerInventoryChanged
// Il2CppName: ItemContainerInventoryChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FurnitureChest::*)(::MagicalActual::ItemContainer*)>(&ExtUI::FurnitureChest::ItemContainerInventoryChanged)> {
  static const MethodInfo* get() {
    static auto* container = &::il2cpp_utils::GetClassFromName("MagicalActual", "ItemContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FurnitureChest*), "ItemContainerInventoryChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{container});
  }
};
// Writing MetadataGetter for method: ExtUI::FurnitureChest::UpdateRoom
// Il2CppName: UpdateRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FurnitureChest::*)()>(&ExtUI::FurnitureChest::UpdateRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FurnitureChest*), "UpdateRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::FurnitureChest::GetBuildMode
// Il2CppName: GetBuildMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExtUI::FurnitureChest::*)()>(&ExtUI::FurnitureChest::GetBuildMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FurnitureChest*), "GetBuildMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::FurnitureChest::ToggleBuildMode
// Il2CppName: ToggleBuildMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FurnitureChest::*)()>(&ExtUI::FurnitureChest::ToggleBuildMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FurnitureChest*), "ToggleBuildMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::FurnitureChest::UpdateAllInteractables
// Il2CppName: UpdateAllInteractables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FurnitureChest::*)()>(&ExtUI::FurnitureChest::UpdateAllInteractables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FurnitureChest*), "UpdateAllInteractables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::FurnitureChest::UpdateInteractable
// Il2CppName: UpdateInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FurnitureChest::*)(int)>(&ExtUI::FurnitureChest::UpdateInteractable)> {
  static const MethodInfo* get() {
    static auto* slotNum = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FurnitureChest*), "UpdateInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{slotNum});
  }
};
// Writing MetadataGetter for method: ExtUI::FurnitureChest::LoadSavedPositionAndRotation
// Il2CppName: LoadSavedPositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FurnitureChest::*)(int)>(&ExtUI::FurnitureChest::LoadSavedPositionAndRotation)> {
  static const MethodInfo* get() {
    static auto* slotNum = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FurnitureChest*), "LoadSavedPositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{slotNum});
  }
};
// Writing MetadataGetter for method: ExtUI::FurnitureChest::ResetSavedPositionAndRotation
// Il2CppName: ResetSavedPositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FurnitureChest::*)(int)>(&ExtUI::FurnitureChest::ResetSavedPositionAndRotation)> {
  static const MethodInfo* get() {
    static auto* slotNum = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FurnitureChest*), "ResetSavedPositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{slotNum});
  }
};
// Writing MetadataGetter for method: ExtUI::FurnitureChest::SavePositionAndRotation
// Il2CppName: SavePositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FurnitureChest::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, int)>(&ExtUI::FurnitureChest::SavePositionAndRotation)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* slotNum = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FurnitureChest*), "SavePositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation, slotNum});
  }
};
// Writing MetadataGetter for method: ExtUI::FurnitureChest::SaveAllObjectData
// Il2CppName: SaveAllObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FurnitureChest::*)()>(&ExtUI::FurnitureChest::SaveAllObjectData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FurnitureChest*), "SaveAllObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::FurnitureChest::RequestUpgrade
// Il2CppName: RequestUpgrade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FurnitureChest::*)()>(&ExtUI::FurnitureChest::RequestUpgrade)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FurnitureChest*), "RequestUpgrade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::FurnitureChest::orbusNetInit
// Il2CppName: orbusNetInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FurnitureChest::*)(::MagicalActual::NetEntity*)>(&ExtUI::FurnitureChest::orbusNetInit)> {
  static const MethodInfo* get() {
    static auto* entity = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FurnitureChest*), "orbusNetInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entity});
  }
};
// Writing MetadataGetter for method: ExtUI::FurnitureChest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExtUI::FurnitureChest::$orbusNetInit$b__23_0
// Il2CppName: <orbusNetInit>b__23_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FurnitureChest::*)(::System::Collections::ArrayList*)>(&ExtUI::FurnitureChest::$orbusNetInit$b__23_0)> {
  static const MethodInfo* get() {
    static auto* results = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FurnitureChest*), "<orbusNetInit>b__23_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{results});
  }
};
