// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: PrivateMessageResponse
  class PrivateMessageResponse;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::PrivateMessageResponse);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::PrivateMessageResponse*, "ExtUI", "PrivateMessageResponse");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.PrivateMessageResponse
  // [TokenAttribute] Offset: FFFFFFFF
  class PrivateMessageResponse : public ::Il2CppObject {
    public:
    public:
    // public System.String id
    // Size: 0x8
    // Offset: 0x10
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String[] messages
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::StringW> messages;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String[] fromNames
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::StringW> fromNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    public:
    // Get instance field reference: public System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: public System.String[] messages
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_messages();
    // Get instance field reference: public System.String[] fromNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_fromNames();
    // public System.Void .ctor()
    // Offset: 0x28E9108
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PrivateMessageResponse* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::PrivateMessageResponse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PrivateMessageResponse*, creationType>()));
    }
  }; // ExtUI.PrivateMessageResponse
  #pragma pack(pop)
  static check_size<sizeof(PrivateMessageResponse), 32 + sizeof(::ArrayW<::StringW>)> __ExtUI_PrivateMessageResponseSizeCheck;
  static_assert(sizeof(PrivateMessageResponse) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::PrivateMessageResponse::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
