// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: InventoryItemInstance
  class InventoryItemInstance;
}
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: NetEntity
  class NetEntity;
  // Forward declaring type: GenericChest
  class GenericChest;
  // Forward declaring type: ItemContainer
  class ItemContainer;
  // Forward declaring type: Vendor
  class Vendor;
  // Forward declaring type: WorldMenu
  class WorldMenu;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: TextAsset
  class TextAsset;
}
// Completed forward declares
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: MarketStall
  class MarketStall;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::MarketStall);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::MarketStall*, "ExtUI", "MarketStall");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.MarketStall
  // [TokenAttribute] Offset: FFFFFFFF
  class MarketStall : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::ExtUI::MarketStall::$$c__DisplayClass23_0
    class $$c__DisplayClass23_0;
    // Nested type: ::ExtUI::MarketStall::$$c
    class $$c;
    public:
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x18
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private MagicalActual.NetEntity myEntity
    // Size: 0x8
    // Offset: 0x20
    ::MagicalActual::NetEntity* myEntity;
    // Field size check
    static_assert(sizeof(::MagicalActual::NetEntity*) == 0x8);
    // public UnityEngine.GameObject[] ingredientSlots
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::GameObject*> ingredientSlots;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public MagicalActual.GenericChest myChest
    // Size: 0x8
    // Offset: 0x30
    ::MagicalActual::GenericChest* myChest;
    // Field size check
    static_assert(sizeof(::MagicalActual::GenericChest*) == 0x8);
    // private ExtUI.InventoryItemInstance[] currentIngredients
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::ExtUI::InventoryItemInstance*> currentIngredients;
    // Field size check
    static_assert(sizeof(::ArrayW<::ExtUI::InventoryItemInstance*>) == 0x8);
    // private MagicalActual.ItemContainer myItemContainer
    // Size: 0x8
    // Offset: 0x40
    ::MagicalActual::ItemContainer* myItemContainer;
    // Field size check
    static_assert(sizeof(::MagicalActual::ItemContainer*) == 0x8);
    // private MagicalActual.Vendor myVendor
    // Size: 0x8
    // Offset: 0x48
    ::MagicalActual::Vendor* myVendor;
    // Field size check
    static_assert(sizeof(::MagicalActual::Vendor*) == 0x8);
    // public UnityEngine.GameObject ownerMenuPoint
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* ownerMenuPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private MagicalActual.WorldMenu interactionMenu
    // Size: 0x8
    // Offset: 0x58
    ::MagicalActual::WorldMenu* interactionMenu;
    // Field size check
    static_assert(sizeof(::MagicalActual::WorldMenu*) == 0x8);
    // public UnityEngine.TextAsset ownerMenuHtml
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::TextAsset* ownerMenuHtml;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextAsset*) == 0x8);
    // public UnityEngine.GameObject myNpc
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* myNpc;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean menuStarted
    // Size: 0x1
    // Offset: 0x70
    bool menuStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: menuStarted and: playerOwnerId
    char __padding11[0x7] = {};
    // private System.String playerOwnerId
    // Size: 0x8
    // Offset: 0x78
    ::StringW playerOwnerId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: private MagicalActual.NetEntity myEntity
    [[deprecated("Use field access instead!")]] ::MagicalActual::NetEntity*& dyn_myEntity();
    // Get instance field reference: public UnityEngine.GameObject[] ingredientSlots
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_ingredientSlots();
    // Get instance field reference: public MagicalActual.GenericChest myChest
    [[deprecated("Use field access instead!")]] ::MagicalActual::GenericChest*& dyn_myChest();
    // Get instance field reference: private ExtUI.InventoryItemInstance[] currentIngredients
    [[deprecated("Use field access instead!")]] ::ArrayW<::ExtUI::InventoryItemInstance*>& dyn_currentIngredients();
    // Get instance field reference: private MagicalActual.ItemContainer myItemContainer
    [[deprecated("Use field access instead!")]] ::MagicalActual::ItemContainer*& dyn_myItemContainer();
    // Get instance field reference: private MagicalActual.Vendor myVendor
    [[deprecated("Use field access instead!")]] ::MagicalActual::Vendor*& dyn_myVendor();
    // Get instance field reference: public UnityEngine.GameObject ownerMenuPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_ownerMenuPoint();
    // Get instance field reference: private MagicalActual.WorldMenu interactionMenu
    [[deprecated("Use field access instead!")]] ::MagicalActual::WorldMenu*& dyn_interactionMenu();
    // Get instance field reference: public UnityEngine.TextAsset ownerMenuHtml
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextAsset*& dyn_ownerMenuHtml();
    // Get instance field reference: public UnityEngine.GameObject myNpc
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_myNpc();
    // Get instance field reference: private System.Boolean menuStarted
    [[deprecated("Use field access instead!")]] bool& dyn_menuStarted();
    // Get instance field reference: private System.String playerOwnerId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playerOwnerId();
    // private System.Void Awake()
    // Offset: 0x28E7540
    void Awake();
    // private System.Void Start()
    // Offset: 0x28E75D8
    void Start();
    // private System.Void UpdateOwnerMenu()
    // Offset: 0x28E75DC
    void UpdateOwnerMenu();
    // private System.Void ItemContainerInventoryChanged(MagicalActual.ItemContainer container)
    // Offset: 0x28E7A7C
    void ItemContainerInventoryChanged(::MagicalActual::ItemContainer* container);
    // private System.Void VendorInventoryChanged(MagicalActual.Vendor avendor)
    // Offset: 0x28E8280
    void VendorInventoryChanged(::MagicalActual::Vendor* avendor);
    // private System.Void PutItemInSlot(ExtUI.InventoryItemInstance itemInstance, UnityEngine.GameObject slot)
    // Offset: 0x28E8284
    void PutItemInSlot(::ExtUI::InventoryItemInstance* itemInstance, ::UnityEngine::GameObject* slot);
    // private System.Void UpdateTableDisplay()
    // Offset: 0x28E7AA0
    void UpdateTableDisplay();
    // private System.Void DetachedFromInterface()
    // Offset: 0x28E8590
    void DetachedFromInterface();
    // public System.Int32[] GetCurrentPrices()
    // Offset: 0x28E85C0
    ::ArrayW<int> GetCurrentPrices();
    // public ExtUI.InventoryItemInstance[] GetCurrentItems()
    // Offset: 0x28E85F0
    ::ArrayW<::ExtUI::InventoryItemInstance*> GetCurrentItems();
    // public System.Void SavePrices(System.String newprices)
    // Offset: 0x28E8620
    void SavePrices(::StringW newprices);
    // public System.Void PlayerInteraction()
    // Offset: 0x28E873C
    void PlayerInteraction();
    // private System.Void OnDestroy()
    // Offset: 0x28E8848
    void OnDestroy();
    // public System.Void WithdrawCurrency()
    // Offset: 0x28E88C8
    void WithdrawCurrency();
    // public System.Int32 AvailableCurrency()
    // Offset: 0x28E88F8
    int AvailableCurrency();
    // public System.Void orbusNetInit(MagicalActual.NetEntity entity)
    // Offset: 0x28E8928
    void orbusNetInit(::MagicalActual::NetEntity* entity);
    // public System.Void .ctor()
    // Offset: 0x28E89DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MarketStall* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::MarketStall::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MarketStall*, creationType>()));
    }
    // private System.Void <UpdateOwnerMenu>b__15_0()
    // Offset: 0x28E8A44
    void $UpdateOwnerMenu$b__15_0();
    // private System.Void <orbusNetInit>b__28_0(System.Object newvalue)
    // Offset: 0x28E8AD0
    void $orbusNetInit$b__28_0(::Il2CppObject* newvalue);
  }; // ExtUI.MarketStall
  #pragma pack(pop)
  static check_size<sizeof(MarketStall), 120 + sizeof(::StringW)> __ExtUI_MarketStallSizeCheck;
  static_assert(sizeof(MarketStall) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::MarketStall::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::MarketStall::*)()>(&ExtUI::MarketStall::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::MarketStall::*)()>(&ExtUI::MarketStall::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::UpdateOwnerMenu
// Il2CppName: UpdateOwnerMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::MarketStall::*)()>(&ExtUI::MarketStall::UpdateOwnerMenu)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "UpdateOwnerMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::ItemContainerInventoryChanged
// Il2CppName: ItemContainerInventoryChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::MarketStall::*)(::MagicalActual::ItemContainer*)>(&ExtUI::MarketStall::ItemContainerInventoryChanged)> {
  static const MethodInfo* get() {
    static auto* container = &::il2cpp_utils::GetClassFromName("MagicalActual", "ItemContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "ItemContainerInventoryChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{container});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::VendorInventoryChanged
// Il2CppName: VendorInventoryChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::MarketStall::*)(::MagicalActual::Vendor*)>(&ExtUI::MarketStall::VendorInventoryChanged)> {
  static const MethodInfo* get() {
    static auto* avendor = &::il2cpp_utils::GetClassFromName("MagicalActual", "Vendor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "VendorInventoryChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{avendor});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::PutItemInSlot
// Il2CppName: PutItemInSlot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::MarketStall::*)(::ExtUI::InventoryItemInstance*, ::UnityEngine::GameObject*)>(&ExtUI::MarketStall::PutItemInSlot)> {
  static const MethodInfo* get() {
    static auto* itemInstance = &::il2cpp_utils::GetClassFromName("ExtUI", "InventoryItemInstance")->byval_arg;
    static auto* slot = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "PutItemInSlot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{itemInstance, slot});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::UpdateTableDisplay
// Il2CppName: UpdateTableDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::MarketStall::*)()>(&ExtUI::MarketStall::UpdateTableDisplay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "UpdateTableDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::DetachedFromInterface
// Il2CppName: DetachedFromInterface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::MarketStall::*)()>(&ExtUI::MarketStall::DetachedFromInterface)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "DetachedFromInterface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::GetCurrentPrices
// Il2CppName: GetCurrentPrices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (ExtUI::MarketStall::*)()>(&ExtUI::MarketStall::GetCurrentPrices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "GetCurrentPrices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::GetCurrentItems
// Il2CppName: GetCurrentItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::ExtUI::InventoryItemInstance*> (ExtUI::MarketStall::*)()>(&ExtUI::MarketStall::GetCurrentItems)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "GetCurrentItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::SavePrices
// Il2CppName: SavePrices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::MarketStall::*)(::StringW)>(&ExtUI::MarketStall::SavePrices)> {
  static const MethodInfo* get() {
    static auto* newprices = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "SavePrices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newprices});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::PlayerInteraction
// Il2CppName: PlayerInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::MarketStall::*)()>(&ExtUI::MarketStall::PlayerInteraction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "PlayerInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::MarketStall::*)()>(&ExtUI::MarketStall::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::WithdrawCurrency
// Il2CppName: WithdrawCurrency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::MarketStall::*)()>(&ExtUI::MarketStall::WithdrawCurrency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "WithdrawCurrency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::AvailableCurrency
// Il2CppName: AvailableCurrency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExtUI::MarketStall::*)()>(&ExtUI::MarketStall::AvailableCurrency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "AvailableCurrency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::orbusNetInit
// Il2CppName: orbusNetInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::MarketStall::*)(::MagicalActual::NetEntity*)>(&ExtUI::MarketStall::orbusNetInit)> {
  static const MethodInfo* get() {
    static auto* entity = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "orbusNetInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entity});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExtUI::MarketStall::$UpdateOwnerMenu$b__15_0
// Il2CppName: <UpdateOwnerMenu>b__15_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::MarketStall::*)()>(&ExtUI::MarketStall::$UpdateOwnerMenu$b__15_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "<UpdateOwnerMenu>b__15_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::MarketStall::$orbusNetInit$b__28_0
// Il2CppName: <orbusNetInit>b__28_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::MarketStall::*)(::Il2CppObject*)>(&ExtUI::MarketStall::$orbusNetInit$b__28_0)> {
  static const MethodInfo* get() {
    static auto* newvalue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::MarketStall*), "<orbusNetInit>b__28_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newvalue});
  }
};
