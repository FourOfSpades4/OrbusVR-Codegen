// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: LfgPost
  class LfgPost;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::LfgPost);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::LfgPost*, "ExtUI", "LfgPost");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.LfgPost
  // [TokenAttribute] Offset: FFFFFFFF
  class LfgPost : public ::Il2CppObject {
    public:
    public:
    // public System.String id
    // Size: 0x8
    // Offset: 0x10
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String posterName
    // Size: 0x8
    // Offset: 0x18
    ::StringW posterName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String posterId
    // Size: 0x8
    // Offset: 0x20
    ::StringW posterId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String message
    // Size: 0x8
    // Offset: 0x28
    ::StringW message;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 minLevel
    // Size: 0x4
    // Offset: 0x30
    int minLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 maxLevel
    // Size: 0x4
    // Offset: 0x34
    int maxLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 timestamp
    // Size: 0x4
    // Offset: 0x38
    int timestamp;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: public System.String posterName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_posterName();
    // Get instance field reference: public System.String posterId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_posterId();
    // Get instance field reference: public System.String message
    [[deprecated("Use field access instead!")]] ::StringW& dyn_message();
    // Get instance field reference: public System.Int32 minLevel
    [[deprecated("Use field access instead!")]] int& dyn_minLevel();
    // Get instance field reference: public System.Int32 maxLevel
    [[deprecated("Use field access instead!")]] int& dyn_maxLevel();
    // Get instance field reference: public System.Int32 timestamp
    [[deprecated("Use field access instead!")]] int& dyn_timestamp();
    // public System.Void .ctor()
    // Offset: 0x28E7530
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LfgPost* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::LfgPost::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LfgPost*, creationType>()));
    }
  }; // ExtUI.LfgPost
  #pragma pack(pop)
  static check_size<sizeof(LfgPost), 56 + sizeof(int)> __ExtUI_LfgPostSizeCheck;
  static_assert(sizeof(LfgPost) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::LfgPost::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
