// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: ScoreboardEntry
  class ScoreboardEntry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::ScoreboardEntry);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::ScoreboardEntry*, "ExtUI", "ScoreboardEntry");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.ScoreboardEntry
  // [TokenAttribute] Offset: FFFFFFFF
  class ScoreboardEntry : public ::Il2CppObject {
    public:
    public:
    // public System.String playerName
    // Size: 0x8
    // Offset: 0x10
    ::StringW playerName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 kills
    // Size: 0x4
    // Offset: 0x18
    int kills;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 deaths
    // Size: 0x4
    // Offset: 0x1C
    int deaths;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 damageDone
    // Size: 0x4
    // Offset: 0x20
    int damageDone;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 damageTaken
    // Size: 0x4
    // Offset: 0x24
    int damageTaken;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 healingDone
    // Size: 0x4
    // Offset: 0x28
    int healingDone;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 healingTaken
    // Size: 0x4
    // Offset: 0x2C
    int healingTaken;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 captures
    // Size: 0x4
    // Offset: 0x30
    int captures;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single kdr
    // Size: 0x4
    // Offset: 0x34
    float kdr;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.String playerName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playerName();
    // Get instance field reference: public System.Int32 kills
    [[deprecated("Use field access instead!")]] int& dyn_kills();
    // Get instance field reference: public System.Int32 deaths
    [[deprecated("Use field access instead!")]] int& dyn_deaths();
    // Get instance field reference: public System.Int32 damageDone
    [[deprecated("Use field access instead!")]] int& dyn_damageDone();
    // Get instance field reference: public System.Int32 damageTaken
    [[deprecated("Use field access instead!")]] int& dyn_damageTaken();
    // Get instance field reference: public System.Int32 healingDone
    [[deprecated("Use field access instead!")]] int& dyn_healingDone();
    // Get instance field reference: public System.Int32 healingTaken
    [[deprecated("Use field access instead!")]] int& dyn_healingTaken();
    // Get instance field reference: public System.Int32 captures
    [[deprecated("Use field access instead!")]] int& dyn_captures();
    // Get instance field reference: public System.Single kdr
    [[deprecated("Use field access instead!")]] float& dyn_kdr();
    // public System.Void .ctor()
    // Offset: 0x28E929C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScoreboardEntry* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::ScoreboardEntry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScoreboardEntry*, creationType>()));
    }
  }; // ExtUI.ScoreboardEntry
  #pragma pack(pop)
  static check_size<sizeof(ScoreboardEntry), 52 + sizeof(float)> __ExtUI_ScoreboardEntrySizeCheck;
  static_assert(sizeof(ScoreboardEntry) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::ScoreboardEntry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
