// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExtUI
namespace ExtUI {
}
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: NetEntity
  class NetEntity;
  // Forward declaring type: ItemContainer
  class ItemContainer;
  // Forward declaring type: WorldMenu
  class WorldMenu;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Completed forward declares
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: FellowshipChest
  class FellowshipChest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::FellowshipChest);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::FellowshipChest*, "ExtUI", "FellowshipChest");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.FellowshipChest
  // [TokenAttribute] Offset: FFFFFFFF
  class FellowshipChest : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::ExtUI::FellowshipChest::$$c
    class $$c;
    public:
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x18
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private MagicalActual.NetEntity myEntity
    // Size: 0x8
    // Offset: 0x20
    ::MagicalActual::NetEntity* myEntity;
    // Field size check
    static_assert(sizeof(::MagicalActual::NetEntity*) == 0x8);
    // private MagicalActual.ItemContainer myItemContainer
    // Size: 0x8
    // Offset: 0x28
    ::MagicalActual::ItemContainer* myItemContainer;
    // Field size check
    static_assert(sizeof(::MagicalActual::ItemContainer*) == 0x8);
    // private MagicalActual.WorldMenu interactionMenu
    // Size: 0x8
    // Offset: 0x30
    ::MagicalActual::WorldMenu* interactionMenu;
    // Field size check
    static_assert(sizeof(::MagicalActual::WorldMenu*) == 0x8);
    // public System.String chestLog
    // Size: 0x8
    // Offset: 0x38
    ::StringW chestLog;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String fellowshipOwnerId
    // Size: 0x8
    // Offset: 0x40
    ::StringW fellowshipOwnerId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: private MagicalActual.NetEntity myEntity
    [[deprecated("Use field access instead!")]] ::MagicalActual::NetEntity*& dyn_myEntity();
    // Get instance field reference: private MagicalActual.ItemContainer myItemContainer
    [[deprecated("Use field access instead!")]] ::MagicalActual::ItemContainer*& dyn_myItemContainer();
    // Get instance field reference: private MagicalActual.WorldMenu interactionMenu
    [[deprecated("Use field access instead!")]] ::MagicalActual::WorldMenu*& dyn_interactionMenu();
    // Get instance field reference: public System.String chestLog
    [[deprecated("Use field access instead!")]] ::StringW& dyn_chestLog();
    // Get instance field reference: private System.String fellowshipOwnerId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_fellowshipOwnerId();
    // private System.Void Awake()
    // Offset: 0xF49B78
    void Awake();
    // private System.Void Start()
    // Offset: 0xF49BD0
    void Start();
    // private System.Void UpdateChestLog()
    // Offset: 0xF49BD4
    void UpdateChestLog();
    // private System.Void ItemContainerInventoryChanged(MagicalActual.ItemContainer container)
    // Offset: 0xF49D3C
    void ItemContainerInventoryChanged(::MagicalActual::ItemContainer* container);
    // public System.Void PlayerInteraction()
    // Offset: 0xF49D40
    void PlayerInteraction();
    // public System.Void WithdrawCurrency()
    // Offset: 0xF49D44
    void WithdrawCurrency();
    // public System.Int32 AvailableCurrency()
    // Offset: 0xF49D74
    int AvailableCurrency();
    // public System.Void orbusNetInit(MagicalActual.NetEntity entity)
    // Offset: 0xF49DA4
    void orbusNetInit(::MagicalActual::NetEntity* entity);
    // public System.Void .ctor()
    // Offset: 0xF49F08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FellowshipChest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::FellowshipChest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FellowshipChest*, creationType>()));
    }
    // private System.Void <orbusNetInit>b__13_0(System.Collections.ArrayList results)
    // Offset: 0xF49F70
    void $orbusNetInit$b__13_0(::System::Collections::ArrayList* results);
    // private System.Void <orbusNetInit>b__13_1(System.Object newvalue)
    // Offset: 0xF4A048
    void $orbusNetInit$b__13_1(::Il2CppObject* newvalue);
  }; // ExtUI.FellowshipChest
  #pragma pack(pop)
  static check_size<sizeof(FellowshipChest), 64 + sizeof(::StringW)> __ExtUI_FellowshipChestSizeCheck;
  static_assert(sizeof(FellowshipChest) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::FellowshipChest::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FellowshipChest::*)()>(&ExtUI::FellowshipChest::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FellowshipChest*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::FellowshipChest::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FellowshipChest::*)()>(&ExtUI::FellowshipChest::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FellowshipChest*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::FellowshipChest::UpdateChestLog
// Il2CppName: UpdateChestLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FellowshipChest::*)()>(&ExtUI::FellowshipChest::UpdateChestLog)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FellowshipChest*), "UpdateChestLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::FellowshipChest::ItemContainerInventoryChanged
// Il2CppName: ItemContainerInventoryChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FellowshipChest::*)(::MagicalActual::ItemContainer*)>(&ExtUI::FellowshipChest::ItemContainerInventoryChanged)> {
  static const MethodInfo* get() {
    static auto* container = &::il2cpp_utils::GetClassFromName("MagicalActual", "ItemContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FellowshipChest*), "ItemContainerInventoryChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{container});
  }
};
// Writing MetadataGetter for method: ExtUI::FellowshipChest::PlayerInteraction
// Il2CppName: PlayerInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FellowshipChest::*)()>(&ExtUI::FellowshipChest::PlayerInteraction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FellowshipChest*), "PlayerInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::FellowshipChest::WithdrawCurrency
// Il2CppName: WithdrawCurrency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FellowshipChest::*)()>(&ExtUI::FellowshipChest::WithdrawCurrency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FellowshipChest*), "WithdrawCurrency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::FellowshipChest::AvailableCurrency
// Il2CppName: AvailableCurrency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExtUI::FellowshipChest::*)()>(&ExtUI::FellowshipChest::AvailableCurrency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FellowshipChest*), "AvailableCurrency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::FellowshipChest::orbusNetInit
// Il2CppName: orbusNetInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FellowshipChest::*)(::MagicalActual::NetEntity*)>(&ExtUI::FellowshipChest::orbusNetInit)> {
  static const MethodInfo* get() {
    static auto* entity = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FellowshipChest*), "orbusNetInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entity});
  }
};
// Writing MetadataGetter for method: ExtUI::FellowshipChest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExtUI::FellowshipChest::$orbusNetInit$b__13_0
// Il2CppName: <orbusNetInit>b__13_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FellowshipChest::*)(::System::Collections::ArrayList*)>(&ExtUI::FellowshipChest::$orbusNetInit$b__13_0)> {
  static const MethodInfo* get() {
    static auto* results = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FellowshipChest*), "<orbusNetInit>b__13_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{results});
  }
};
// Writing MetadataGetter for method: ExtUI::FellowshipChest::$orbusNetInit$b__13_1
// Il2CppName: <orbusNetInit>b__13_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::FellowshipChest::*)(::Il2CppObject*)>(&ExtUI::FellowshipChest::$orbusNetInit$b__13_1)> {
  static const MethodInfo* get() {
    static auto* newvalue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::FellowshipChest*), "<orbusNetInit>b__13_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newvalue});
  }
};
