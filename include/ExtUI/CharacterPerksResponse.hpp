// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: CharacterPerksResponse
  class CharacterPerksResponse;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::CharacterPerksResponse);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::CharacterPerksResponse*, "ExtUI", "CharacterPerksResponse");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.CharacterPerksResponse
  // [TokenAttribute] Offset: FFFFFFFF
  class CharacterPerksResponse : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 mountSpeed
    // Size: 0x4
    // Offset: 0x10
    int mountSpeed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 luck
    // Size: 0x4
    // Offset: 0x14
    int luck;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 weight
    // Size: 0x4
    // Offset: 0x18
    int weight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 potionMaking
    // Size: 0x4
    // Offset: 0x1C
    int potionMaking;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 lureCrafting
    // Size: 0x4
    // Offset: 0x20
    int lureCrafting;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 potionAging
    // Size: 0x4
    // Offset: 0x24
    int potionAging;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 priceDecrease
    // Size: 0x4
    // Offset: 0x28
    int priceDecrease;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 dramCap
    // Size: 0x4
    // Offset: 0x2C
    int dramCap;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 fishing
    // Size: 0x4
    // Offset: 0x30
    int fishing;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 cauldronSpeed
    // Size: 0x4
    // Offset: 0x34
    int cauldronSpeed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Int32 mountSpeed
    [[deprecated("Use field access instead!")]] int& dyn_mountSpeed();
    // Get instance field reference: public System.Int32 luck
    [[deprecated("Use field access instead!")]] int& dyn_luck();
    // Get instance field reference: public System.Int32 weight
    [[deprecated("Use field access instead!")]] int& dyn_weight();
    // Get instance field reference: public System.Int32 potionMaking
    [[deprecated("Use field access instead!")]] int& dyn_potionMaking();
    // Get instance field reference: public System.Int32 lureCrafting
    [[deprecated("Use field access instead!")]] int& dyn_lureCrafting();
    // Get instance field reference: public System.Int32 potionAging
    [[deprecated("Use field access instead!")]] int& dyn_potionAging();
    // Get instance field reference: public System.Int32 priceDecrease
    [[deprecated("Use field access instead!")]] int& dyn_priceDecrease();
    // Get instance field reference: public System.Int32 dramCap
    [[deprecated("Use field access instead!")]] int& dyn_dramCap();
    // Get instance field reference: public System.Int32 fishing
    [[deprecated("Use field access instead!")]] int& dyn_fishing();
    // Get instance field reference: public System.Int32 cauldronSpeed
    [[deprecated("Use field access instead!")]] int& dyn_cauldronSpeed();
    // public System.Void .ctor()
    // Offset: 0xF48E48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CharacterPerksResponse* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::CharacterPerksResponse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CharacterPerksResponse*, creationType>()));
    }
  }; // ExtUI.CharacterPerksResponse
  #pragma pack(pop)
  static check_size<sizeof(CharacterPerksResponse), 52 + sizeof(int)> __ExtUI_CharacterPerksResponseSizeCheck;
  static_assert(sizeof(CharacterPerksResponse) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::CharacterPerksResponse::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
