// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: InventoryItemDescription
  class InventoryItemDescription;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::InventoryItemDescription);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::InventoryItemDescription*, "ExtUI", "InventoryItemDescription");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.InventoryItemDescription
  // [TokenAttribute] Offset: FFFFFFFF
  class InventoryItemDescription : public ::Il2CppObject {
    public:
    public:
    // public System.String description
    // Size: 0x8
    // Offset: 0x10
    ::StringW description;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 armor
    // Size: 0x4
    // Offset: 0x18
    int armor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 attack
    // Size: 0x4
    // Offset: 0x1C
    int attack;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 crit
    // Size: 0x4
    // Offset: 0x20
    int crit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 defense
    // Size: 0x4
    // Offset: 0x24
    int defense;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 magdefense
    // Size: 0x4
    // Offset: 0x28
    int magdefense;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 wisdom
    // Size: 0x4
    // Offset: 0x2C
    int wisdom;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 regen
    // Size: 0x4
    // Offset: 0x30
    int regen;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 speed
    // Size: 0x4
    // Offset: 0x34
    int speed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.String description
    [[deprecated("Use field access instead!")]] ::StringW& dyn_description();
    // Get instance field reference: public System.Int32 armor
    [[deprecated("Use field access instead!")]] int& dyn_armor();
    // Get instance field reference: public System.Int32 attack
    [[deprecated("Use field access instead!")]] int& dyn_attack();
    // Get instance field reference: public System.Int32 crit
    [[deprecated("Use field access instead!")]] int& dyn_crit();
    // Get instance field reference: public System.Int32 defense
    [[deprecated("Use field access instead!")]] int& dyn_defense();
    // Get instance field reference: public System.Int32 magdefense
    [[deprecated("Use field access instead!")]] int& dyn_magdefense();
    // Get instance field reference: public System.Int32 wisdom
    [[deprecated("Use field access instead!")]] int& dyn_wisdom();
    // Get instance field reference: public System.Int32 regen
    [[deprecated("Use field access instead!")]] int& dyn_regen();
    // Get instance field reference: public System.Int32 speed
    [[deprecated("Use field access instead!")]] int& dyn_speed();
    // public System.Void .ctor()
    // Offset: 0x28E46FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InventoryItemDescription* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::InventoryItemDescription::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InventoryItemDescription*, creationType>()));
    }
  }; // ExtUI.InventoryItemDescription
  #pragma pack(pop)
  static check_size<sizeof(InventoryItemDescription), 52 + sizeof(int)> __ExtUI_InventoryItemDescriptionSizeCheck;
  static_assert(sizeof(InventoryItemDescription) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::InventoryItemDescription::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
