// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: AccountCharacter
  class AccountCharacter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::AccountCharacter);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::AccountCharacter*, "ExtUI", "AccountCharacter");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.AccountCharacter
  // [TokenAttribute] Offset: FFFFFFFF
  class AccountCharacter : public ::Il2CppObject {
    public:
    public:
    // public System.String id
    // Size: 0x8
    // Offset: 0x10
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String name
    // Size: 0x8
    // Offset: 0x18
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 level
    // Size: 0x4
    // Offset: 0x20
    int level;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single skintone
    // Size: 0x4
    // Offset: 0x24
    float skintone;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.String customAppearance
    // Size: 0x8
    // Offset: 0x28
    ::StringW customAppearance;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String equipment
    // Size: 0x8
    // Offset: 0x30
    ::StringW equipment;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean showhelm
    // Size: 0x1
    // Offset: 0x38
    bool showhelm;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean refreshAvailable
    // Size: 0x1
    // Offset: 0x39
    bool refreshAvailable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: refreshAvailable and: timePlayed
    char __padding7[0x2] = {};
    // public System.Int32 timePlayed
    // Size: 0x4
    // Offset: 0x3C
    int timePlayed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.Int32 level
    [[deprecated("Use field access instead!")]] int& dyn_level();
    // Get instance field reference: public System.Single skintone
    [[deprecated("Use field access instead!")]] float& dyn_skintone();
    // Get instance field reference: public System.String customAppearance
    [[deprecated("Use field access instead!")]] ::StringW& dyn_customAppearance();
    // Get instance field reference: public System.String equipment
    [[deprecated("Use field access instead!")]] ::StringW& dyn_equipment();
    // Get instance field reference: public System.Boolean showhelm
    [[deprecated("Use field access instead!")]] bool& dyn_showhelm();
    // Get instance field reference: public System.Boolean refreshAvailable
    [[deprecated("Use field access instead!")]] bool& dyn_refreshAvailable();
    // Get instance field reference: public System.Int32 timePlayed
    [[deprecated("Use field access instead!")]] int& dyn_timePlayed();
    // public System.Void .ctor()
    // Offset: 0xF46E7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AccountCharacter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::AccountCharacter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AccountCharacter*, creationType>()));
    }
  }; // ExtUI.AccountCharacter
  #pragma pack(pop)
  static check_size<sizeof(AccountCharacter), 60 + sizeof(int)> __ExtUI_AccountCharacterSizeCheck;
  static_assert(sizeof(AccountCharacter) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::AccountCharacter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
