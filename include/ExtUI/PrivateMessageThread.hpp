// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExtUI
namespace ExtUI {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: PrivateMessageThread
  class PrivateMessageThread;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::PrivateMessageThread);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::PrivateMessageThread*, "ExtUI", "PrivateMessageThread");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.PrivateMessageThread
  // [TokenAttribute] Offset: FFFFFFFF
  class PrivateMessageThread : public ::Il2CppObject {
    public:
    // Nested type: ::ExtUI::PrivateMessageThread::$$c__DisplayClass3_0
    class $$c__DisplayClass3_0;
    public:
    // public System.String[] messages
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::StringW> messages;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String[] fromNames
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::StringW> fromNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String threadid
    // Size: 0x8
    // Offset: 0x20
    ::StringW threadid;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String[] messages
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_messages();
    // Get instance field reference: public System.String[] fromNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_fromNames();
    // Get instance field reference: public System.String threadid
    [[deprecated("Use field access instead!")]] ::StringW& dyn_threadid();
    // public System.Void waitForThread(System.Action callback)
    // Offset: 0x28DC790
    void waitForThread(::System::Action* callback);
    // public System.Void .ctor()
    // Offset: 0x28DC788
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PrivateMessageThread* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::PrivateMessageThread::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PrivateMessageThread*, creationType>()));
    }
  }; // ExtUI.PrivateMessageThread
  #pragma pack(pop)
  static check_size<sizeof(PrivateMessageThread), 32 + sizeof(::StringW)> __ExtUI_PrivateMessageThreadSizeCheck;
  static_assert(sizeof(PrivateMessageThread) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::PrivateMessageThread::waitForThread
// Il2CppName: waitForThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::PrivateMessageThread::*)(::System::Action*)>(&ExtUI::PrivateMessageThread::waitForThread)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::PrivateMessageThread*), "waitForThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: ExtUI::PrivateMessageThread::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
