// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: InventoryItem
  class InventoryItem;
  // Forward declaring type: InventoryItemMeta
  class InventoryItemMeta;
}
// Completed forward declares
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: InventoryItemInstance
  class InventoryItemInstance;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::InventoryItemInstance);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::InventoryItemInstance*, "ExtUI", "InventoryItemInstance");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.InventoryItemInstance
  // [TokenAttribute] Offset: FFFFFFFF
  class InventoryItemInstance : public ::Il2CppObject {
    public:
    public:
    // public ExtUI.InventoryItem baseItem
    // Size: 0x8
    // Offset: 0x10
    ::ExtUI::InventoryItem* baseItem;
    // Field size check
    static_assert(sizeof(::ExtUI::InventoryItem*) == 0x8);
    // public System.Int32 stacks
    // Size: 0x4
    // Offset: 0x18
    int stacks;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 currentDurability
    // Size: 0x4
    // Offset: 0x1C
    int currentDurability;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public ExtUI.InventoryItemMeta metaInfo
    // Size: 0x8
    // Offset: 0x20
    ::ExtUI::InventoryItemMeta* metaInfo;
    // Field size check
    static_assert(sizeof(::ExtUI::InventoryItemMeta*) == 0x8);
    // public System.Boolean isTradable
    // Size: 0x1
    // Offset: 0x28
    bool isTradable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isTradable and: armor
    char __padding4[0x3] = {};
    // public System.Int32 armor
    // Size: 0x4
    // Offset: 0x2C
    int armor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 attack
    // Size: 0x4
    // Offset: 0x30
    int attack;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 strength
    // Size: 0x4
    // Offset: 0x34
    int strength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 intellect
    // Size: 0x4
    // Offset: 0x38
    int intellect;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 regen
    // Size: 0x4
    // Offset: 0x3C
    int regen;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 defense
    // Size: 0x4
    // Offset: 0x40
    int defense;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 magdefense
    // Size: 0x4
    // Offset: 0x44
    int magdefense;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 vitality
    // Size: 0x4
    // Offset: 0x48
    int vitality;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 crit
    // Size: 0x4
    // Offset: 0x4C
    int crit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 wisdom
    // Size: 0x4
    // Offset: 0x50
    int wisdom;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 speed
    // Size: 0x4
    // Offset: 0x54
    int speed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 luck
    // Size: 0x4
    // Offset: 0x58
    int luck;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 maxDurability
    // Size: 0x4
    // Offset: 0x5C
    int maxDurability;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 itemLevel
    // Size: 0x4
    // Offset: 0x60
    int itemLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 itemPlusLevel
    // Size: 0x4
    // Offset: 0x64
    int itemPlusLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.String rarity
    // Size: 0x8
    // Offset: 0x68
    ::StringW rarity;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean perfect
    // Size: 0x1
    // Offset: 0x70
    bool perfect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: perfect and: loadout
    char __padding21[0x7] = {};
    // public System.String loadout
    // Size: 0x8
    // Offset: 0x78
    ::StringW loadout;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public ExtUI.InventoryItem baseItem
    [[deprecated("Use field access instead!")]] ::ExtUI::InventoryItem*& dyn_baseItem();
    // Get instance field reference: public System.Int32 stacks
    [[deprecated("Use field access instead!")]] int& dyn_stacks();
    // Get instance field reference: public System.Int32 currentDurability
    [[deprecated("Use field access instead!")]] int& dyn_currentDurability();
    // Get instance field reference: public ExtUI.InventoryItemMeta metaInfo
    [[deprecated("Use field access instead!")]] ::ExtUI::InventoryItemMeta*& dyn_metaInfo();
    // Get instance field reference: public System.Boolean isTradable
    [[deprecated("Use field access instead!")]] bool& dyn_isTradable();
    // Get instance field reference: public System.Int32 armor
    [[deprecated("Use field access instead!")]] int& dyn_armor();
    // Get instance field reference: public System.Int32 attack
    [[deprecated("Use field access instead!")]] int& dyn_attack();
    // Get instance field reference: public System.Int32 strength
    [[deprecated("Use field access instead!")]] int& dyn_strength();
    // Get instance field reference: public System.Int32 intellect
    [[deprecated("Use field access instead!")]] int& dyn_intellect();
    // Get instance field reference: public System.Int32 regen
    [[deprecated("Use field access instead!")]] int& dyn_regen();
    // Get instance field reference: public System.Int32 defense
    [[deprecated("Use field access instead!")]] int& dyn_defense();
    // Get instance field reference: public System.Int32 magdefense
    [[deprecated("Use field access instead!")]] int& dyn_magdefense();
    // Get instance field reference: public System.Int32 vitality
    [[deprecated("Use field access instead!")]] int& dyn_vitality();
    // Get instance field reference: public System.Int32 crit
    [[deprecated("Use field access instead!")]] int& dyn_crit();
    // Get instance field reference: public System.Int32 wisdom
    [[deprecated("Use field access instead!")]] int& dyn_wisdom();
    // Get instance field reference: public System.Int32 speed
    [[deprecated("Use field access instead!")]] int& dyn_speed();
    // Get instance field reference: public System.Int32 luck
    [[deprecated("Use field access instead!")]] int& dyn_luck();
    // Get instance field reference: public System.Int32 maxDurability
    [[deprecated("Use field access instead!")]] int& dyn_maxDurability();
    // Get instance field reference: public System.Int32 itemLevel
    [[deprecated("Use field access instead!")]] int& dyn_itemLevel();
    // Get instance field reference: public System.Int32 itemPlusLevel
    [[deprecated("Use field access instead!")]] int& dyn_itemPlusLevel();
    // Get instance field reference: public System.String rarity
    [[deprecated("Use field access instead!")]] ::StringW& dyn_rarity();
    // Get instance field reference: public System.Boolean perfect
    [[deprecated("Use field access instead!")]] bool& dyn_perfect();
    // Get instance field reference: public System.String loadout
    [[deprecated("Use field access instead!")]] ::StringW& dyn_loadout();
    // public System.Void .ctor(System.String itemInfo)
    // Offset: 0x28D071C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InventoryItemInstance* New_ctor(::StringW itemInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::InventoryItemInstance::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InventoryItemInstance*, creationType>(itemInfo)));
    }
    // public System.Boolean isBroken()
    // Offset: 0x28E4704
    bool isBroken();
    // public System.Int32 GetAppearanceId()
    // Offset: 0x28E472C
    int GetAppearanceId();
    // public System.String MetaDescription()
    // Offset: 0x28E4770
    ::StringW MetaDescription();
    // public System.Boolean CompareId(ExtUI.InventoryItemInstance otherItem)
    // Offset: 0x28E7464
    bool CompareId(::ExtUI::InventoryItemInstance* otherItem);
  }; // ExtUI.InventoryItemInstance
  #pragma pack(pop)
  static check_size<sizeof(InventoryItemInstance), 120 + sizeof(::StringW)> __ExtUI_InventoryItemInstanceSizeCheck;
  static_assert(sizeof(InventoryItemInstance) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::InventoryItemInstance::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: ExtUI::InventoryItemInstance::isBroken
// Il2CppName: isBroken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExtUI::InventoryItemInstance::*)()>(&ExtUI::InventoryItemInstance::isBroken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::InventoryItemInstance*), "isBroken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::InventoryItemInstance::GetAppearanceId
// Il2CppName: GetAppearanceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExtUI::InventoryItemInstance::*)()>(&ExtUI::InventoryItemInstance::GetAppearanceId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::InventoryItemInstance*), "GetAppearanceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::InventoryItemInstance::MetaDescription
// Il2CppName: MetaDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (ExtUI::InventoryItemInstance::*)()>(&ExtUI::InventoryItemInstance::MetaDescription)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtUI::InventoryItemInstance*), "MetaDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExtUI::InventoryItemInstance::CompareId
// Il2CppName: CompareId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ExtUI::InventoryItemInstance::*)(::ExtUI::InventoryItemInstance*)>(&ExtUI::InventoryItemInstance::CompareId)> {
  static const MethodInfo* get() {
    static auto* otherItem = &::il2cpp_utils::GetClassFromName("ExtUI", "InventoryItemInstance")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::InventoryItemInstance*), "CompareId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherItem});
  }
};
