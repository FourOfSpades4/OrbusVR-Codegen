// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: PrivateMessage
  class PrivateMessage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::PrivateMessage);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::PrivateMessage*, "ExtUI", "PrivateMessage");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x4D
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.PrivateMessage
  // [TokenAttribute] Offset: FFFFFFFF
  class PrivateMessage : public ::Il2CppObject {
    public:
    public:
    // public System.String id
    // Size: 0x8
    // Offset: 0x10
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String subject
    // Size: 0x8
    // Offset: 0x18
    ::StringW subject;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String[] readBy
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::StringW> readBy;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String from
    // Size: 0x8
    // Offset: 0x28
    ::StringW from;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String fromName
    // Size: 0x8
    // Offset: 0x30
    ::StringW fromName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String[] recipients
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::StringW> recipients;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String[] recipientNames
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::StringW> recipientNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.Int32 timestamp
    // Size: 0x4
    // Offset: 0x48
    int timestamp;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean isNew
    // Size: 0x1
    // Offset: 0x4C
    bool isNew;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: public System.String subject
    [[deprecated("Use field access instead!")]] ::StringW& dyn_subject();
    // Get instance field reference: public System.String[] readBy
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_readBy();
    // Get instance field reference: public System.String from
    [[deprecated("Use field access instead!")]] ::StringW& dyn_from();
    // Get instance field reference: public System.String fromName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_fromName();
    // Get instance field reference: public System.String[] recipients
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_recipients();
    // Get instance field reference: public System.String[] recipientNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_recipientNames();
    // Get instance field reference: public System.Int32 timestamp
    [[deprecated("Use field access instead!")]] int& dyn_timestamp();
    // Get instance field reference: public System.Boolean isNew
    [[deprecated("Use field access instead!")]] bool& dyn_isNew();
    // public System.Void .ctor()
    // Offset: 0x28E90F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PrivateMessage* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::PrivateMessage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PrivateMessage*, creationType>()));
    }
  }; // ExtUI.PrivateMessage
  #pragma pack(pop)
  static check_size<sizeof(PrivateMessage), 76 + sizeof(bool)> __ExtUI_PrivateMessageSizeCheck;
  static_assert(sizeof(PrivateMessage) == 0x4D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::PrivateMessage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
