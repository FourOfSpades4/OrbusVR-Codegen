// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: BlogPost
  class BlogPost;
}
// Completed forward declares
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: BlogPostList
  class BlogPostList;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::BlogPostList);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::BlogPostList*, "ExtUI", "BlogPostList");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.BlogPostList
  // [TokenAttribute] Offset: FFFFFFFF
  class BlogPostList : public ::Il2CppObject {
    public:
    public:
    // public ExtUI.BlogPost[] posts
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::ExtUI::BlogPost*> posts;
    // Field size check
    static_assert(sizeof(::ArrayW<::ExtUI::BlogPost*>) == 0x8);
    public:
    // Creating conversion operator: operator ::ArrayW<::ExtUI::BlogPost*>
    constexpr operator ::ArrayW<::ExtUI::BlogPost*>() const noexcept {
      return posts;
    }
    // Get instance field reference: public ExtUI.BlogPost[] posts
    [[deprecated("Use field access instead!")]] ::ArrayW<::ExtUI::BlogPost*>& dyn_posts();
    // public System.Void .ctor()
    // Offset: 0xF48360
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BlogPostList* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::BlogPostList::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BlogPostList*, creationType>()));
    }
  }; // ExtUI.BlogPostList
  #pragma pack(pop)
  static check_size<sizeof(BlogPostList), 16 + sizeof(::ArrayW<::ExtUI::BlogPost*>)> __ExtUI_BlogPostListSizeCheck;
  static_assert(sizeof(BlogPostList) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::BlogPostList::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
