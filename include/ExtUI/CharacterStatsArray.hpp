// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExtUI
namespace ExtUI {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: CharacterStatsArray
  class CharacterStatsArray;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::ExtUI::CharacterStatsArray);
DEFINE_IL2CPP_ARG_TYPE(::ExtUI::CharacterStatsArray*, "ExtUI", "CharacterStatsArray");
// Type namespace: ExtUI
namespace ExtUI {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: ExtUI.CharacterStatsArray
  // [TokenAttribute] Offset: FFFFFFFF
  class CharacterStatsArray : public ::Il2CppObject {
    public:
    // Nested type: ::ExtUI::CharacterStatsArray::$$c__DisplayClass2_0
    class $$c__DisplayClass2_0;
    public:
    // public System.String characterid
    // Size: 0x8
    // Offset: 0x10
    ::StringW characterid;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.Int32> stats
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::StringW, int>* stats;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, int>*) == 0x8);
    public:
    // Get instance field reference: public System.String characterid
    [[deprecated("Use field access instead!")]] ::StringW& dyn_characterid();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.Int32> stats
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, int>*& dyn_stats();
    // public System.Void waitForStats(System.Action callback)
    // Offset: 0xF48E50
    void waitForStats(::System::Action* callback);
    // public System.Int32 GetStat(System.String statKey)
    // Offset: 0xF48FB0
    int GetStat(::StringW statKey);
    // public System.Void .ctor()
    // Offset: 0xF49060
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CharacterStatsArray* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ExtUI::CharacterStatsArray::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CharacterStatsArray*, creationType>()));
    }
  }; // ExtUI.CharacterStatsArray
  #pragma pack(pop)
  static check_size<sizeof(CharacterStatsArray), 24 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, int>*)> __ExtUI_CharacterStatsArraySizeCheck;
  static_assert(sizeof(CharacterStatsArray) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: ExtUI::CharacterStatsArray::waitForStats
// Il2CppName: waitForStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtUI::CharacterStatsArray::*)(::System::Action*)>(&ExtUI::CharacterStatsArray::waitForStats)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::CharacterStatsArray*), "waitForStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: ExtUI::CharacterStatsArray::GetStat
// Il2CppName: GetStat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ExtUI::CharacterStatsArray::*)(::StringW)>(&ExtUI::CharacterStatsArray::GetStat)> {
  static const MethodInfo* get() {
    static auto* statKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(ExtUI::CharacterStatsArray*), "GetStat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statKey});
  }
};
// Writing MetadataGetter for method: ExtUI::CharacterStatsArray::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
