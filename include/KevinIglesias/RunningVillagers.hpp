// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: KevinIglesias
namespace KevinIglesias {
  // Forward declaring type: RunningVillagers
  class RunningVillagers;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::KevinIglesias::RunningVillagers);
DEFINE_IL2CPP_ARG_TYPE(::KevinIglesias::RunningVillagers*, "KevinIglesias", "RunningVillagers");
// Type namespace: KevinIglesias
namespace KevinIglesias {
  // Size: 0x25
  #pragma pack(push, 1)
  // Autogenerated type: KevinIglesias.RunningVillagers
  // [TokenAttribute] Offset: FFFFFFFF
  class RunningVillagers : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform villager
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* villager;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single destination
    // Size: 0x4
    // Offset: 0x20
    float destination;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean going
    // Size: 0x1
    // Offset: 0x24
    bool going;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Transform villager
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_villager();
    // Get instance field reference: public System.Single destination
    [[deprecated("Use field access instead!")]] float& dyn_destination();
    // Get instance field reference: public System.Boolean going
    [[deprecated("Use field access instead!")]] bool& dyn_going();
    // private System.Void Awake()
    // Offset: 0x1064AFC
    void Awake();
    // private System.Void Update()
    // Offset: 0x1064B24
    void Update();
    // public System.Void .ctor()
    // Offset: 0x1064CE4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RunningVillagers* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KevinIglesias::RunningVillagers::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RunningVillagers*, creationType>()));
    }
  }; // KevinIglesias.RunningVillagers
  #pragma pack(pop)
  static check_size<sizeof(RunningVillagers), 36 + sizeof(bool)> __KevinIglesias_RunningVillagersSizeCheck;
  static_assert(sizeof(RunningVillagers) == 0x25);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: KevinIglesias::RunningVillagers::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KevinIglesias::RunningVillagers::*)()>(&KevinIglesias::RunningVillagers::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KevinIglesias::RunningVillagers*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KevinIglesias::RunningVillagers::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KevinIglesias::RunningVillagers::*)()>(&KevinIglesias::RunningVillagers::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KevinIglesias::RunningVillagers*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KevinIglesias::RunningVillagers::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
