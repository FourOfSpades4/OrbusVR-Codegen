// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: KevinIglesias
namespace KevinIglesias {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Animator
  class Animator;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: KevinIglesias
namespace KevinIglesias {
  // Forward declaring type: BucketRoute
  class BucketRoute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::KevinIglesias::BucketRoute);
DEFINE_IL2CPP_ARG_TYPE(::KevinIglesias::BucketRoute*, "KevinIglesias", "BucketRoute");
// Type namespace: KevinIglesias
namespace KevinIglesias {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: KevinIglesias.BucketRoute
  // [TokenAttribute] Offset: FFFFFFFF
  class BucketRoute : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::KevinIglesias::BucketRoute::$ChangeBucket$d__8
    class $ChangeBucket$d__8;
    public:
    // public UnityEngine.GameObject[] buckets
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::GameObject*> buckets;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject liftedBucket
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* liftedBucket;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean drop
    // Size: 0x1
    // Offset: 0x28
    bool drop;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: drop and: villager
    char __padding2[0x7] = {};
    // public UnityEngine.Transform villager
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* villager;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Animator anim
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Animator* anim;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // public System.Boolean going
    // Size: 0x1
    // Offset: 0x40
    bool going;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject[] buckets
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_buckets();
    // Get instance field reference: public UnityEngine.GameObject liftedBucket
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_liftedBucket();
    // Get instance field reference: public System.Boolean drop
    [[deprecated("Use field access instead!")]] bool& dyn_drop();
    // Get instance field reference: public UnityEngine.Transform villager
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_villager();
    // Get instance field reference: private UnityEngine.Animator anim
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_anim();
    // Get instance field reference: public System.Boolean going
    [[deprecated("Use field access instead!")]] bool& dyn_going();
    // private System.Void Awake()
    // Offset: 0x1061228
    void Awake();
    // public System.Void LiftBucket(System.Single delay, System.Boolean lift)
    // Offset: 0x1061288
    void LiftBucket(float delay, bool lift);
    // public System.Collections.IEnumerator ChangeBucket(System.Single delay, System.Boolean lift)
    // Offset: 0x10612B8
    ::System::Collections::IEnumerator* ChangeBucket(float delay, bool lift);
    // public System.Void .ctor()
    // Offset: 0x10613A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BucketRoute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::KevinIglesias::BucketRoute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BucketRoute*, creationType>()));
    }
  }; // KevinIglesias.BucketRoute
  #pragma pack(pop)
  static check_size<sizeof(BucketRoute), 64 + sizeof(bool)> __KevinIglesias_BucketRouteSizeCheck;
  static_assert(sizeof(BucketRoute) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: KevinIglesias::BucketRoute::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KevinIglesias::BucketRoute::*)()>(&KevinIglesias::BucketRoute::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KevinIglesias::BucketRoute*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KevinIglesias::BucketRoute::LiftBucket
// Il2CppName: LiftBucket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KevinIglesias::BucketRoute::*)(float, bool)>(&KevinIglesias::BucketRoute::LiftBucket)> {
  static const MethodInfo* get() {
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KevinIglesias::BucketRoute*), "LiftBucket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delay, lift});
  }
};
// Writing MetadataGetter for method: KevinIglesias::BucketRoute::ChangeBucket
// Il2CppName: ChangeBucket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (KevinIglesias::BucketRoute::*)(float, bool)>(&KevinIglesias::BucketRoute::ChangeBucket)> {
  static const MethodInfo* get() {
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(KevinIglesias::BucketRoute*), "ChangeBucket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delay, lift});
  }
};
// Writing MetadataGetter for method: KevinIglesias::BucketRoute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
