// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayfulSystems.ProgressBar.ProgressBarProView
#include "PlayfulSystems/ProgressBar/ProgressBarProView.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Graphic
  class Graphic;
}
// Completed forward declares
// Type namespace: PlayfulSystems.ProgressBar
namespace PlayfulSystems::ProgressBar {
  // Forward declaring type: BarViewColorWhileMoving
  class BarViewColorWhileMoving;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayfulSystems::ProgressBar::BarViewColorWhileMoving);
DEFINE_IL2CPP_ARG_TYPE(::PlayfulSystems::ProgressBar::BarViewColorWhileMoving*, "PlayfulSystems.ProgressBar", "BarViewColorWhileMoving");
// Type namespace: PlayfulSystems.ProgressBar
namespace PlayfulSystems::ProgressBar {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: PlayfulSystems.ProgressBar.BarViewColorWhileMoving
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD0ED8
  class BarViewColorWhileMoving : public ::PlayfulSystems::ProgressBar::ProgressBarProView {
    public:
    public:
    // protected UnityEngine.UI.Graphic graphic
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Graphic* graphic;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Graphic*) == 0x8);
    // private UnityEngine.Color colorStatic
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Color colorStatic;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color colorMoving
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color colorMoving;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single blendTimeOnMove
    // Size: 0x4
    // Offset: 0x40
    float blendTimeOnMove;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single blendTimeOnStop
    // Size: 0x4
    // Offset: 0x44
    float blendTimeOnStop;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean isMoving
    // Size: 0x1
    // Offset: 0x48
    bool isMoving;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: protected UnityEngine.UI.Graphic graphic
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Graphic*& dyn_graphic();
    // Get instance field reference: private UnityEngine.Color colorStatic
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_colorStatic();
    // Get instance field reference: private UnityEngine.Color colorMoving
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_colorMoving();
    // Get instance field reference: private System.Single blendTimeOnMove
    [[deprecated("Use field access instead!")]] float& dyn_blendTimeOnMove();
    // Get instance field reference: private System.Single blendTimeOnStop
    [[deprecated("Use field access instead!")]] float& dyn_blendTimeOnStop();
    // Get instance field reference: private System.Boolean isMoving
    [[deprecated("Use field access instead!")]] bool& dyn_isMoving();
    // private System.Void OnEnable()
    // Offset: 0xEB3AA0
    void OnEnable();
    // private UnityEngine.Color GetCurrentColor()
    // Offset: 0xEB3C34
    ::UnityEngine::Color GetCurrentColor();
    // private System.Void SetDefaultColor()
    // Offset: 0xEB3AA4
    void SetDefaultColor();
    // public override System.Void UpdateView(System.Single currentValue, System.Single targetValue)
    // Offset: 0xEB3B50
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Void ProgressBarProView::UpdateView(System.Single currentValue, System.Single targetValue)
    void UpdateView(float currentValue, float targetValue);
    // public System.Void .ctor()
    // Offset: 0xEB3C74
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Void ProgressBarProView::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BarViewColorWhileMoving* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColorWhileMoving::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BarViewColorWhileMoving*, creationType>()));
    }
  }; // PlayfulSystems.ProgressBar.BarViewColorWhileMoving
  #pragma pack(pop)
  static check_size<sizeof(BarViewColorWhileMoving), 72 + sizeof(bool)> __PlayfulSystems_ProgressBar_BarViewColorWhileMovingSizeCheck;
  static_assert(sizeof(BarViewColorWhileMoving) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewColorWhileMoving::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::BarViewColorWhileMoving::*)()>(&PlayfulSystems::ProgressBar::BarViewColorWhileMoving::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewColorWhileMoving*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewColorWhileMoving::GetCurrentColor
// Il2CppName: GetCurrentColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (PlayfulSystems::ProgressBar::BarViewColorWhileMoving::*)()>(&PlayfulSystems::ProgressBar::BarViewColorWhileMoving::GetCurrentColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewColorWhileMoving*), "GetCurrentColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewColorWhileMoving::SetDefaultColor
// Il2CppName: SetDefaultColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::BarViewColorWhileMoving::*)()>(&PlayfulSystems::ProgressBar::BarViewColorWhileMoving::SetDefaultColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewColorWhileMoving*), "SetDefaultColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewColorWhileMoving::UpdateView
// Il2CppName: UpdateView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::BarViewColorWhileMoving::*)(float, float)>(&PlayfulSystems::ProgressBar::BarViewColorWhileMoving::UpdateView)> {
  static const MethodInfo* get() {
    static auto* currentValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewColorWhileMoving*), "UpdateView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentValue, targetValue});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewColorWhileMoving::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
