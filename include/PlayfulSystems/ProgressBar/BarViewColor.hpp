// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayfulSystems.ProgressBar.ProgressBarProView
#include "PlayfulSystems/ProgressBar/ProgressBarProView.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: PlayfulSystems::ProgressBar
namespace PlayfulSystems::ProgressBar {
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Graphic
  class Graphic;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Gradient
  class Gradient;
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: PlayfulSystems.ProgressBar
namespace PlayfulSystems::ProgressBar {
  // Forward declaring type: BarViewColor
  class BarViewColor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayfulSystems::ProgressBar::BarViewColor);
DEFINE_IL2CPP_ARG_TYPE(::PlayfulSystems::ProgressBar::BarViewColor*, "PlayfulSystems.ProgressBar", "BarViewColor");
// Type namespace: PlayfulSystems.ProgressBar
namespace PlayfulSystems::ProgressBar {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: PlayfulSystems.ProgressBar.BarViewColor
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD0E64
  class BarViewColor : public ::PlayfulSystems::ProgressBar::ProgressBarProView {
    public:
    // Nested type: ::PlayfulSystems::ProgressBar::BarViewColor::$DoBarColorAnim$d__16
    class $DoBarColorAnim$d__16;
    public:
    // protected UnityEngine.UI.Graphic graphic
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Graphic* graphic;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Graphic*) == 0x8);
    // [HeaderAttribute] Offset: 0xADE95C
    // [TooltipAttribute] Offset: 0xADE95C
    // private System.Boolean canOverrideColor
    // Size: 0x1
    // Offset: 0x20
    bool canOverrideColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canOverrideColor and: defaultColor
    char __padding1[0x3] = {};
    // private UnityEngine.Color defaultColor
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Color defaultColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [TooltipAttribute] Offset: 0xADE9DC
    // private System.Boolean useGradient
    // Size: 0x1
    // Offset: 0x34
    bool useGradient;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useGradient and: barGradient
    char __padding3[0x3] = {};
    // private UnityEngine.Gradient barGradient
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Gradient* barGradient;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private UnityEngine.Color flashColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color flashColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single flashcolorAlpha
    // Size: 0x4
    // Offset: 0x50
    float flashcolorAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single currentValue
    // Size: 0x4
    // Offset: 0x54
    float currentValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xADEA38
    // private System.Boolean flashOnGain
    // Size: 0x1
    // Offset: 0x58
    bool flashOnGain;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: flashOnGain and: gainColor
    char __padding8[0x3] = {};
    // private UnityEngine.Color gainColor
    // Size: 0x10
    // Offset: 0x5C
    ::UnityEngine::Color gainColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Boolean flashOnLoss
    // Size: 0x1
    // Offset: 0x6C
    bool flashOnLoss;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: flashOnLoss and: lossColor
    char __padding10[0x3] = {};
    // private UnityEngine.Color lossColor
    // Size: 0x10
    // Offset: 0x70
    ::UnityEngine::Color lossColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single flashTime
    // Size: 0x4
    // Offset: 0x80
    float flashTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: flashTime and: colorAnim
    char __padding12[0x4] = {};
    // private UnityEngine.Coroutine colorAnim
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Coroutine* colorAnim;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: protected UnityEngine.UI.Graphic graphic
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Graphic*& dyn_graphic();
    // Get instance field reference: private System.Boolean canOverrideColor
    [[deprecated("Use field access instead!")]] bool& dyn_canOverrideColor();
    // Get instance field reference: private UnityEngine.Color defaultColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_defaultColor();
    // Get instance field reference: private System.Boolean useGradient
    [[deprecated("Use field access instead!")]] bool& dyn_useGradient();
    // Get instance field reference: private UnityEngine.Gradient barGradient
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn_barGradient();
    // Get instance field reference: private UnityEngine.Color flashColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_flashColor();
    // Get instance field reference: private System.Single flashcolorAlpha
    [[deprecated("Use field access instead!")]] float& dyn_flashcolorAlpha();
    // Get instance field reference: private System.Single currentValue
    [[deprecated("Use field access instead!")]] float& dyn_currentValue();
    // Get instance field reference: private System.Boolean flashOnGain
    [[deprecated("Use field access instead!")]] bool& dyn_flashOnGain();
    // Get instance field reference: private UnityEngine.Color gainColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_gainColor();
    // Get instance field reference: private System.Boolean flashOnLoss
    [[deprecated("Use field access instead!")]] bool& dyn_flashOnLoss();
    // Get instance field reference: private UnityEngine.Color lossColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_lossColor();
    // Get instance field reference: private System.Single flashTime
    [[deprecated("Use field access instead!")]] float& dyn_flashTime();
    // Get instance field reference: private UnityEngine.Coroutine colorAnim
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_colorAnim();
    // private System.Void OnEnable()
    // Offset: 0xEB34A0
    void OnEnable();
    // private System.Collections.IEnumerator DoBarColorAnim(UnityEngine.Color targetColor, System.Single duration)
    // Offset: 0xEB3530
    ::System::Collections::IEnumerator* DoBarColorAnim(::UnityEngine::Color targetColor, float duration);
    // private System.Void SetOverrideColor(UnityEngine.Color color, System.Single alpha)
    // Offset: 0xEB3654
    void SetOverrideColor(::UnityEngine::Color color, float alpha);
    // private UnityEngine.Color GetCurrentColor(System.Single percentage)
    // Offset: 0xEB370C
    ::UnityEngine::Color GetCurrentColor(float percentage);
    // public override System.Void NewChangeStarted(System.Single currentValue, System.Single targetValue)
    // Offset: 0xEB34B0
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Void ProgressBarProView::NewChangeStarted(System.Single currentValue, System.Single targetValue)
    void NewChangeStarted(float currentValue, float targetValue);
    // public override System.Void SetBarColor(UnityEngine.Color color)
    // Offset: 0xEB3628
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Void ProgressBarProView::SetBarColor(UnityEngine.Color color)
    void SetBarColor(::UnityEngine::Color color);
    // public override System.Void UpdateView(System.Single currentValue, System.Single targetValue)
    // Offset: 0xEB3664
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Void ProgressBarProView::UpdateView(System.Single currentValue, System.Single targetValue)
    void UpdateView(float currentValue, float targetValue);
    // public override System.Void UpdateColor()
    // Offset: 0xEB3680
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Void ProgressBarProView::UpdateColor()
    void UpdateColor();
    // public System.Void .ctor()
    // Offset: 0xEB37EC
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Void ProgressBarProView::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BarViewColor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewColor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BarViewColor*, creationType>()));
    }
  }; // PlayfulSystems.ProgressBar.BarViewColor
  #pragma pack(pop)
  static check_size<sizeof(BarViewColor), 136 + sizeof(::UnityEngine::Coroutine*)> __PlayfulSystems_ProgressBar_BarViewColorSizeCheck;
  static_assert(sizeof(BarViewColor) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewColor::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::BarViewColor::*)()>(&PlayfulSystems::ProgressBar::BarViewColor::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewColor*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewColor::DoBarColorAnim
// Il2CppName: DoBarColorAnim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (PlayfulSystems::ProgressBar::BarViewColor::*)(::UnityEngine::Color, float)>(&PlayfulSystems::ProgressBar::BarViewColor::DoBarColorAnim)> {
  static const MethodInfo* get() {
    static auto* targetColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewColor*), "DoBarColorAnim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetColor, duration});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewColor::SetOverrideColor
// Il2CppName: SetOverrideColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::BarViewColor::*)(::UnityEngine::Color, float)>(&PlayfulSystems::ProgressBar::BarViewColor::SetOverrideColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* alpha = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewColor*), "SetOverrideColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, alpha});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewColor::GetCurrentColor
// Il2CppName: GetCurrentColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (PlayfulSystems::ProgressBar::BarViewColor::*)(float)>(&PlayfulSystems::ProgressBar::BarViewColor::GetCurrentColor)> {
  static const MethodInfo* get() {
    static auto* percentage = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewColor*), "GetCurrentColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percentage});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewColor::NewChangeStarted
// Il2CppName: NewChangeStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::BarViewColor::*)(float, float)>(&PlayfulSystems::ProgressBar::BarViewColor::NewChangeStarted)> {
  static const MethodInfo* get() {
    static auto* currentValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewColor*), "NewChangeStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentValue, targetValue});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewColor::SetBarColor
// Il2CppName: SetBarColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::BarViewColor::*)(::UnityEngine::Color)>(&PlayfulSystems::ProgressBar::BarViewColor::SetBarColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewColor*), "SetBarColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewColor::UpdateView
// Il2CppName: UpdateView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::BarViewColor::*)(float, float)>(&PlayfulSystems::ProgressBar::BarViewColor::UpdateView)> {
  static const MethodInfo* get() {
    static auto* currentValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewColor*), "UpdateView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentValue, targetValue});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewColor::UpdateColor
// Il2CppName: UpdateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::BarViewColor::*)()>(&PlayfulSystems::ProgressBar::BarViewColor::UpdateColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewColor*), "UpdateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewColor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
