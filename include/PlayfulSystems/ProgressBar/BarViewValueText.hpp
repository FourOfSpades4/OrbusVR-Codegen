// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayfulSystems.ProgressBar.ProgressBarProView
#include "PlayfulSystems/ProgressBar/ProgressBarProView.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: PlayfulSystems.ProgressBar
namespace PlayfulSystems::ProgressBar {
  // Forward declaring type: BarViewValueText
  class BarViewValueText;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayfulSystems::ProgressBar::BarViewValueText);
DEFINE_IL2CPP_ARG_TYPE(::PlayfulSystems::ProgressBar::BarViewValueText*, "PlayfulSystems.ProgressBar", "BarViewValueText");
// Type namespace: PlayfulSystems.ProgressBar
namespace PlayfulSystems::ProgressBar {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: PlayfulSystems.ProgressBar.BarViewValueText
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD10CC
  class BarViewValueText : public ::PlayfulSystems::ProgressBar::ProgressBarProView {
    public:
    public:
    // private UnityEngine.UI.Text text
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Text* text;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private System.String prefix
    // Size: 0x8
    // Offset: 0x20
    ::StringW prefix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single minValue
    // Size: 0x4
    // Offset: 0x28
    float minValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxValue
    // Size: 0x4
    // Offset: 0x2C
    float maxValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 numDecimals
    // Size: 0x4
    // Offset: 0x30
    int numDecimals;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean showMaxValue
    // Size: 0x1
    // Offset: 0x34
    bool showMaxValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showMaxValue and: numberUnit
    char __padding5[0x3] = {};
    // private System.String numberUnit
    // Size: 0x8
    // Offset: 0x38
    ::StringW numberUnit;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String suffix
    // Size: 0x8
    // Offset: 0x40
    ::StringW suffix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single lastDisplayValue
    // Size: 0x4
    // Offset: 0x48
    float lastDisplayValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.UI.Text text
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_text();
    // Get instance field reference: private System.String prefix
    [[deprecated("Use field access instead!")]] ::StringW& dyn_prefix();
    // Get instance field reference: private System.Single minValue
    [[deprecated("Use field access instead!")]] float& dyn_minValue();
    // Get instance field reference: private System.Single maxValue
    [[deprecated("Use field access instead!")]] float& dyn_maxValue();
    // Get instance field reference: private System.Int32 numDecimals
    [[deprecated("Use field access instead!")]] int& dyn_numDecimals();
    // Get instance field reference: private System.Boolean showMaxValue
    [[deprecated("Use field access instead!")]] bool& dyn_showMaxValue();
    // Get instance field reference: private System.String numberUnit
    [[deprecated("Use field access instead!")]] ::StringW& dyn_numberUnit();
    // Get instance field reference: private System.String suffix
    [[deprecated("Use field access instead!")]] ::StringW& dyn_suffix();
    // Get instance field reference: private System.Single lastDisplayValue
    [[deprecated("Use field access instead!")]] float& dyn_lastDisplayValue();
    // private System.Single GetDisplayValue(System.Single num)
    // Offset: 0xEB4FC0
    float GetDisplayValue(float num);
    // private System.Single GetRoundedDisplayValue(System.Single num)
    // Offset: 0xEB4B08
    float GetRoundedDisplayValue(float num);
    // private System.String FormatNumber(System.Single num)
    // Offset: 0xEB4F2C
    ::StringW FormatNumber(float num);
    // public override System.Boolean CanUpdateView(System.Single currentValue, System.Single targetValue)
    // Offset: 0xEB4A48
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Boolean ProgressBarProView::CanUpdateView(System.Single currentValue, System.Single targetValue)
    bool CanUpdateView(float currentValue, float targetValue);
    // public override System.Void UpdateView(System.Single currentValue, System.Single targetValue)
    // Offset: 0xEB4CA8
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Void ProgressBarProView::UpdateView(System.Single currentValue, System.Single targetValue)
    void UpdateView(float currentValue, float targetValue);
    // public System.Void .ctor()
    // Offset: 0xEB5048
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Void ProgressBarProView::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BarViewValueText* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewValueText::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BarViewValueText*, creationType>()));
    }
  }; // PlayfulSystems.ProgressBar.BarViewValueText
  #pragma pack(pop)
  static check_size<sizeof(BarViewValueText), 72 + sizeof(float)> __PlayfulSystems_ProgressBar_BarViewValueTextSizeCheck;
  static_assert(sizeof(BarViewValueText) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewValueText::GetDisplayValue
// Il2CppName: GetDisplayValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayfulSystems::ProgressBar::BarViewValueText::*)(float)>(&PlayfulSystems::ProgressBar::BarViewValueText::GetDisplayValue)> {
  static const MethodInfo* get() {
    static auto* num = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewValueText*), "GetDisplayValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{num});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewValueText::GetRoundedDisplayValue
// Il2CppName: GetRoundedDisplayValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayfulSystems::ProgressBar::BarViewValueText::*)(float)>(&PlayfulSystems::ProgressBar::BarViewValueText::GetRoundedDisplayValue)> {
  static const MethodInfo* get() {
    static auto* num = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewValueText*), "GetRoundedDisplayValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{num});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewValueText::FormatNumber
// Il2CppName: FormatNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (PlayfulSystems::ProgressBar::BarViewValueText::*)(float)>(&PlayfulSystems::ProgressBar::BarViewValueText::FormatNumber)> {
  static const MethodInfo* get() {
    static auto* num = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewValueText*), "FormatNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{num});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewValueText::CanUpdateView
// Il2CppName: CanUpdateView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayfulSystems::ProgressBar::BarViewValueText::*)(float, float)>(&PlayfulSystems::ProgressBar::BarViewValueText::CanUpdateView)> {
  static const MethodInfo* get() {
    static auto* currentValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewValueText*), "CanUpdateView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentValue, targetValue});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewValueText::UpdateView
// Il2CppName: UpdateView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::BarViewValueText::*)(float, float)>(&PlayfulSystems::ProgressBar::BarViewValueText::UpdateView)> {
  static const MethodInfo* get() {
    static auto* currentValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewValueText*), "UpdateView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentValue, targetValue});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewValueText::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
