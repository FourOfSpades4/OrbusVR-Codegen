// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayfulSystems.ProgressBar.ProgressBarProView
#include "PlayfulSystems/ProgressBar/ProgressBarProView.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
// Completed forward declares
// Type namespace: PlayfulSystems.ProgressBar
namespace PlayfulSystems::ProgressBar {
  // Forward declaring type: BarViewSizeImageFill
  class BarViewSizeImageFill;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayfulSystems::ProgressBar::BarViewSizeImageFill);
DEFINE_IL2CPP_ARG_TYPE(::PlayfulSystems::ProgressBar::BarViewSizeImageFill*, "PlayfulSystems.ProgressBar", "BarViewSizeImageFill");
// Type namespace: PlayfulSystems.ProgressBar
namespace PlayfulSystems::ProgressBar {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: PlayfulSystems.ProgressBar.BarViewSizeImageFill
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD1068
  class BarViewSizeImageFill : public ::PlayfulSystems::ProgressBar::ProgressBarProView {
    public:
    public:
    // protected UnityEngine.UI.Image image
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Image* image;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // private System.Boolean hideOnEmpty
    // Size: 0x1
    // Offset: 0x20
    bool hideOnEmpty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean useDiscreteSteps
    // Size: 0x1
    // Offset: 0x21
    bool useDiscreteSteps;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useDiscreteSteps and: numSteps
    char __padding2[0x2] = {};
    // private System.Int32 numSteps
    // Size: 0x4
    // Offset: 0x24
    int numSteps;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean isDisplaySizeZero
    // Size: 0x1
    // Offset: 0x28
    bool isDisplaySizeZero;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: protected UnityEngine.UI.Image image
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_image();
    // Get instance field reference: private System.Boolean hideOnEmpty
    [[deprecated("Use field access instead!")]] bool& dyn_hideOnEmpty();
    // Get instance field reference: private System.Boolean useDiscreteSteps
    [[deprecated("Use field access instead!")]] bool& dyn_useDiscreteSteps();
    // Get instance field reference: private System.Int32 numSteps
    [[deprecated("Use field access instead!")]] int& dyn_numSteps();
    // Get instance field reference: private System.Boolean isDisplaySizeZero
    [[deprecated("Use field access instead!")]] bool& dyn_isDisplaySizeZero();
    // private System.Single GetDisplayValue(System.Single display)
    // Offset: 0xEB492C
    float GetDisplayValue(float display);
    // public override System.Boolean CanUpdateView(System.Single currentValue, System.Single targetValue)
    // Offset: 0xEB4800
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Boolean ProgressBarProView::CanUpdateView(System.Single currentValue, System.Single targetValue)
    bool CanUpdateView(float currentValue, float targetValue);
    // public override System.Void UpdateView(System.Single currentValue, System.Single targetValue)
    // Offset: 0xEB483C
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Void ProgressBarProView::UpdateView(System.Single currentValue, System.Single targetValue)
    void UpdateView(float currentValue, float targetValue);
    // public System.Void .ctor()
    // Offset: 0xEB4A30
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Void ProgressBarProView::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BarViewSizeImageFill* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeImageFill::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BarViewSizeImageFill*, creationType>()));
    }
  }; // PlayfulSystems.ProgressBar.BarViewSizeImageFill
  #pragma pack(pop)
  static check_size<sizeof(BarViewSizeImageFill), 40 + sizeof(bool)> __PlayfulSystems_ProgressBar_BarViewSizeImageFillSizeCheck;
  static_assert(sizeof(BarViewSizeImageFill) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewSizeImageFill::GetDisplayValue
// Il2CppName: GetDisplayValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayfulSystems::ProgressBar::BarViewSizeImageFill::*)(float)>(&PlayfulSystems::ProgressBar::BarViewSizeImageFill::GetDisplayValue)> {
  static const MethodInfo* get() {
    static auto* display = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewSizeImageFill*), "GetDisplayValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{display});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewSizeImageFill::CanUpdateView
// Il2CppName: CanUpdateView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayfulSystems::ProgressBar::BarViewSizeImageFill::*)(float, float)>(&PlayfulSystems::ProgressBar::BarViewSizeImageFill::CanUpdateView)> {
  static const MethodInfo* get() {
    static auto* currentValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewSizeImageFill*), "CanUpdateView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentValue, targetValue});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewSizeImageFill::UpdateView
// Il2CppName: UpdateView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::BarViewSizeImageFill::*)(float, float)>(&PlayfulSystems::ProgressBar::BarViewSizeImageFill::UpdateView)> {
  static const MethodInfo* get() {
    static auto* currentValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewSizeImageFill*), "UpdateView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentValue, targetValue});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewSizeImageFill::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
