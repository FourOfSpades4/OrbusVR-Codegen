// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: PlayfulSystems.ProgressBar
namespace PlayfulSystems::ProgressBar {
  // Forward declaring type: ProgressBarProView
  class ProgressBarProView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayfulSystems::ProgressBar::ProgressBarProView);
DEFINE_IL2CPP_ARG_TYPE(::PlayfulSystems::ProgressBar::ProgressBarProView*, "PlayfulSystems.ProgressBar", "ProgressBarProView");
// Type namespace: PlayfulSystems.ProgressBar
namespace PlayfulSystems::ProgressBar {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: PlayfulSystems.ProgressBar.ProgressBarProView
  // [TokenAttribute] Offset: FFFFFFFF
  class ProgressBarProView : public ::UnityEngine::MonoBehaviour {
    public:
    // public System.Void NewChangeStarted(System.Single currentValue, System.Single targetValue)
    // Offset: 0xEB50B8
    void NewChangeStarted(float currentValue, float targetValue);
    // public System.Void SetBarColor(UnityEngine.Color color)
    // Offset: 0xEB50BC
    void SetBarColor(::UnityEngine::Color color);
    // public System.Void UpdateColor()
    // Offset: 0xEB50C0
    void UpdateColor();
    // public System.Boolean CanUpdateView(System.Single currentValue, System.Single targetValue)
    // Offset: 0xEB50C4
    bool CanUpdateView(float currentValue, float targetValue);
    // public System.Void UpdateView(System.Single currentValue, System.Single targetValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateView(float currentValue, float targetValue);
    // protected System.Void .ctor()
    // Offset: 0xEB384C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProgressBarProView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::ProgressBarProView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProgressBarProView*, creationType>()));
    }
  }; // PlayfulSystems.ProgressBar.ProgressBarProView
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::ProgressBarProView::NewChangeStarted
// Il2CppName: NewChangeStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::ProgressBarProView::*)(float, float)>(&PlayfulSystems::ProgressBar::ProgressBarProView::NewChangeStarted)> {
  static const MethodInfo* get() {
    static auto* currentValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::ProgressBarProView*), "NewChangeStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentValue, targetValue});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::ProgressBarProView::SetBarColor
// Il2CppName: SetBarColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::ProgressBarProView::*)(::UnityEngine::Color)>(&PlayfulSystems::ProgressBar::ProgressBarProView::SetBarColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::ProgressBarProView*), "SetBarColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::ProgressBarProView::UpdateColor
// Il2CppName: UpdateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::ProgressBarProView::*)()>(&PlayfulSystems::ProgressBar::ProgressBarProView::UpdateColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::ProgressBarProView*), "UpdateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::ProgressBarProView::CanUpdateView
// Il2CppName: CanUpdateView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayfulSystems::ProgressBar::ProgressBarProView::*)(float, float)>(&PlayfulSystems::ProgressBar::ProgressBarProView::CanUpdateView)> {
  static const MethodInfo* get() {
    static auto* currentValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::ProgressBarProView*), "CanUpdateView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentValue, targetValue});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::ProgressBarProView::UpdateView
// Il2CppName: UpdateView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::ProgressBarProView::*)(float, float)>(&PlayfulSystems::ProgressBar::ProgressBarProView::UpdateView)> {
  static const MethodInfo* get() {
    static auto* currentValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::ProgressBarProView*), "UpdateView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentValue, targetValue});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::ProgressBarProView::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
