// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlayfulSystems.ProgressBar.ProgressBarProView
#include "PlayfulSystems/ProgressBar/ProgressBarProView.hpp"
// Including type: UnityEngine.DrivenRectTransformTracker
#include "UnityEngine/DrivenRectTransformTracker.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Completed forward declares
// Type namespace: PlayfulSystems.ProgressBar
namespace PlayfulSystems::ProgressBar {
  // Forward declaring type: BarViewSizeAnchors
  class BarViewSizeAnchors;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::PlayfulSystems::ProgressBar::BarViewSizeAnchors);
DEFINE_IL2CPP_ARG_TYPE(::PlayfulSystems::ProgressBar::BarViewSizeAnchors*, "PlayfulSystems.ProgressBar", "BarViewSizeAnchors");
// Type namespace: PlayfulSystems.ProgressBar
namespace PlayfulSystems::ProgressBar {
  // Size: 0x2E
  #pragma pack(push, 1)
  // Autogenerated type: PlayfulSystems.ProgressBar.BarViewSizeAnchors
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD0FA0
  class BarViewSizeAnchors : public ::PlayfulSystems::ProgressBar::ProgressBarProView {
    public:
    // Nested type: ::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType
    struct FillType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType
    // [TokenAttribute] Offset: FFFFFFFF
    struct FillType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: FillType
      constexpr FillType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType LeftToRight
      static constexpr const int LeftToRight = 0;
      // Get static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType LeftToRight
      static ::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType _get_LeftToRight();
      // Set static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType LeftToRight
      static void _set_LeftToRight(::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType value);
      // static field const value: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType RightToLeft
      static constexpr const int RightToLeft = 1;
      // Get static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType RightToLeft
      static ::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType _get_RightToLeft();
      // Set static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType RightToLeft
      static void _set_RightToLeft(::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType value);
      // static field const value: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType TopToBottom
      static constexpr const int TopToBottom = 2;
      // Get static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType TopToBottom
      static ::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType _get_TopToBottom();
      // Set static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType TopToBottom
      static void _set_TopToBottom(::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType value);
      // static field const value: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType BottomToTop
      static constexpr const int BottomToTop = 3;
      // Get static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType BottomToTop
      static ::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType _get_BottomToTop();
      // Set static field: static public PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType BottomToTop
      static void _set_BottomToTop(::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType
    #pragma pack(pop)
    static check_size<sizeof(BarViewSizeAnchors::FillType), 0 + sizeof(int)> __PlayfulSystems_ProgressBar_BarViewSizeAnchors_FillTypeSizeCheck;
    static_assert(sizeof(BarViewSizeAnchors::FillType) == 0x4);
    public:
    // protected UnityEngine.RectTransform rectTrans
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::RectTransform* rectTrans;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // protected PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType fillType
    // Size: 0x4
    // Offset: 0x20
    ::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType fillType;
    // Field size check
    static_assert(sizeof(::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType) == 0x4);
    // private System.Boolean hideOnEmpty
    // Size: 0x1
    // Offset: 0x24
    bool hideOnEmpty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean useDiscreteSteps
    // Size: 0x1
    // Offset: 0x25
    bool useDiscreteSteps;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useDiscreteSteps and: numSteps
    char __padding3[0x2] = {};
    // private System.Int32 numSteps
    // Size: 0x4
    // Offset: 0x28
    int numSteps;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected UnityEngine.DrivenRectTransformTracker m_Tracker
    // Size: 0x1
    // Offset: 0x2C
    ::UnityEngine::DrivenRectTransformTracker m_Tracker;
    // Field size check
    static_assert(sizeof(::UnityEngine::DrivenRectTransformTracker) == 0x1);
    // protected System.Boolean isDisplaySizeZero
    // Size: 0x1
    // Offset: 0x2D
    bool isDisplaySizeZero;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: protected UnityEngine.RectTransform rectTrans
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_rectTrans();
    // Get instance field reference: protected PlayfulSystems.ProgressBar.BarViewSizeAnchors/FillType fillType
    [[deprecated("Use field access instead!")]] ::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType& dyn_fillType();
    // Get instance field reference: private System.Boolean hideOnEmpty
    [[deprecated("Use field access instead!")]] bool& dyn_hideOnEmpty();
    // Get instance field reference: private System.Boolean useDiscreteSteps
    [[deprecated("Use field access instead!")]] bool& dyn_useDiscreteSteps();
    // Get instance field reference: private System.Int32 numSteps
    [[deprecated("Use field access instead!")]] int& dyn_numSteps();
    // Get instance field reference: protected UnityEngine.DrivenRectTransformTracker m_Tracker
    [[deprecated("Use field access instead!")]] ::UnityEngine::DrivenRectTransformTracker& dyn_m_Tracker();
    // Get instance field reference: protected System.Boolean isDisplaySizeZero
    [[deprecated("Use field access instead!")]] bool& dyn_isDisplaySizeZero();
    // protected System.Void SetPivot(System.Single startEdge, System.Single endEdge)
    // Offset: 0xEB3CD4
    void SetPivot(float startEdge, float endEdge);
    // private System.Void UpdateTracker()
    // Offset: 0xEB4658
    void UpdateTracker();
    // private System.Void OnDisable()
    // Offset: 0xEB4688
    void OnDisable();
    // public override System.Boolean CanUpdateView(System.Single currentValue, System.Single targetValue)
    // Offset: 0xEB454C
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Boolean ProgressBarProView::CanUpdateView(System.Single currentValue, System.Single targetValue)
    bool CanUpdateView(float currentValue, float targetValue);
    // public override System.Void UpdateView(System.Single currentValue, System.Single targetValue)
    // Offset: 0xEB4588
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Void ProgressBarProView::UpdateView(System.Single currentValue, System.Single targetValue)
    void UpdateView(float currentValue, float targetValue);
    // public System.Void .ctor()
    // Offset: 0xEB40B0
    // Implemented from: PlayfulSystems.ProgressBar.ProgressBarProView
    // Base method: System.Void ProgressBarProView::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BarViewSizeAnchors* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::PlayfulSystems::ProgressBar::BarViewSizeAnchors::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BarViewSizeAnchors*, creationType>()));
    }
  }; // PlayfulSystems.ProgressBar.BarViewSizeAnchors
  #pragma pack(pop)
  static check_size<sizeof(BarViewSizeAnchors), 45 + sizeof(bool)> __PlayfulSystems_ProgressBar_BarViewSizeAnchorsSizeCheck;
  static_assert(sizeof(BarViewSizeAnchors) == 0x2E);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::PlayfulSystems::ProgressBar::BarViewSizeAnchors::FillType, "PlayfulSystems.ProgressBar", "BarViewSizeAnchors/FillType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewSizeAnchors::SetPivot
// Il2CppName: SetPivot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::BarViewSizeAnchors::*)(float, float)>(&PlayfulSystems::ProgressBar::BarViewSizeAnchors::SetPivot)> {
  static const MethodInfo* get() {
    static auto* startEdge = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* endEdge = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewSizeAnchors*), "SetPivot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startEdge, endEdge});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewSizeAnchors::UpdateTracker
// Il2CppName: UpdateTracker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::BarViewSizeAnchors::*)()>(&PlayfulSystems::ProgressBar::BarViewSizeAnchors::UpdateTracker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewSizeAnchors*), "UpdateTracker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewSizeAnchors::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::BarViewSizeAnchors::*)()>(&PlayfulSystems::ProgressBar::BarViewSizeAnchors::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewSizeAnchors*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewSizeAnchors::CanUpdateView
// Il2CppName: CanUpdateView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayfulSystems::ProgressBar::BarViewSizeAnchors::*)(float, float)>(&PlayfulSystems::ProgressBar::BarViewSizeAnchors::CanUpdateView)> {
  static const MethodInfo* get() {
    static auto* currentValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewSizeAnchors*), "CanUpdateView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentValue, targetValue});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewSizeAnchors::UpdateView
// Il2CppName: UpdateView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayfulSystems::ProgressBar::BarViewSizeAnchors::*)(float, float)>(&PlayfulSystems::ProgressBar::BarViewSizeAnchors::UpdateView)> {
  static const MethodInfo* get() {
    static auto* currentValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(PlayfulSystems::ProgressBar::BarViewSizeAnchors*), "UpdateView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentValue, targetValue});
  }
};
// Writing MetadataGetter for method: PlayfulSystems::ProgressBar::BarViewSizeAnchors::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
