// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: ButtonController
  class ButtonController;
  // Forward declaring type: ColliderZoneArgs
  class ColliderZoneArgs;
  // Forward declaring type: InteractableStateArgs
  class InteractableStateArgs;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: TrainButtonVisualController
  class TrainButtonVisualController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::TrainButtonVisualController);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::TrainButtonVisualController*, "OculusSampleFramework", "TrainButtonVisualController");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0xA4
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.TrainButtonVisualController
  // [TokenAttribute] Offset: FFFFFFFF
  class TrainButtonVisualController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::OculusSampleFramework::TrainButtonVisualController::$ResetPosition$d__26
    class $ResetPosition$d__26;
    public:
    // private UnityEngine.MeshRenderer _meshRenderer
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::MeshRenderer* meshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.MeshRenderer _glowRenderer
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::MeshRenderer* glowRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private OculusSampleFramework.ButtonController _buttonController
    // Size: 0x8
    // Offset: 0x28
    ::OculusSampleFramework::ButtonController* buttonController;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::ButtonController*) == 0x8);
    // private UnityEngine.Color _buttonContactColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color buttonContactColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _buttonActionColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color buttonActionColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.AudioSource _audioSource
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip _actionSoundEffect
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AudioClip* actionSoundEffect;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.Transform _buttonContactTransform
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* buttonContactTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single _contactMaxDisplacementDistance
    // Size: 0x4
    // Offset: 0x68
    float contactMaxDisplacementDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: contactMaxDisplacementDistance and: buttonMaterial
    char __padding8[0x4] = {};
    // private UnityEngine.Material _buttonMaterial
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Material* buttonMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Color _buttonDefaultColor
    // Size: 0x10
    // Offset: 0x78
    ::UnityEngine::Color buttonDefaultColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Int32 _materialColorId
    // Size: 0x4
    // Offset: 0x88
    int materialColorId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _buttonInContactOrActionStates
    // Size: 0x1
    // Offset: 0x8C
    bool buttonInContactOrActionStates;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: buttonInContactOrActionStates and: lerpToOldPositionCr
    char __padding12[0x3] = {};
    // private UnityEngine.Coroutine _lerpToOldPositionCr
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Coroutine* lerpToOldPositionCr;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private UnityEngine.Vector3 _oldPosition
    // Size: 0xC
    // Offset: 0x98
    ::UnityEngine::Vector3 oldPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single LERP_TO_OLD_POS_DURATION
    static constexpr const float LERP_TO_OLD_POS_DURATION = 1;
    // Get static field: static private System.Single LERP_TO_OLD_POS_DURATION
    static float _get_LERP_TO_OLD_POS_DURATION();
    // Set static field: static private System.Single LERP_TO_OLD_POS_DURATION
    static void _set_LERP_TO_OLD_POS_DURATION(float value);
    // static field const value: static private System.Single LOCAL_SIZE_HALVED
    static constexpr const float LOCAL_SIZE_HALVED = 0.5;
    // Get static field: static private System.Single LOCAL_SIZE_HALVED
    static float _get_LOCAL_SIZE_HALVED();
    // Set static field: static private System.Single LOCAL_SIZE_HALVED
    static void _set_LOCAL_SIZE_HALVED(float value);
    // Get instance field reference: private UnityEngine.MeshRenderer _meshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn__meshRenderer();
    // Get instance field reference: private UnityEngine.MeshRenderer _glowRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn__glowRenderer();
    // Get instance field reference: private OculusSampleFramework.ButtonController _buttonController
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::ButtonController*& dyn__buttonController();
    // Get instance field reference: private UnityEngine.Color _buttonContactColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__buttonContactColor();
    // Get instance field reference: private UnityEngine.Color _buttonActionColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__buttonActionColor();
    // Get instance field reference: private UnityEngine.AudioSource _audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn__audioSource();
    // Get instance field reference: private UnityEngine.AudioClip _actionSoundEffect
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn__actionSoundEffect();
    // Get instance field reference: private UnityEngine.Transform _buttonContactTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__buttonContactTransform();
    // Get instance field reference: private System.Single _contactMaxDisplacementDistance
    [[deprecated("Use field access instead!")]] float& dyn__contactMaxDisplacementDistance();
    // Get instance field reference: private UnityEngine.Material _buttonMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__buttonMaterial();
    // Get instance field reference: private UnityEngine.Color _buttonDefaultColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__buttonDefaultColor();
    // Get instance field reference: private System.Int32 _materialColorId
    [[deprecated("Use field access instead!")]] int& dyn__materialColorId();
    // Get instance field reference: private System.Boolean _buttonInContactOrActionStates
    [[deprecated("Use field access instead!")]] bool& dyn__buttonInContactOrActionStates();
    // Get instance field reference: private UnityEngine.Coroutine _lerpToOldPositionCr
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn__lerpToOldPositionCr();
    // Get instance field reference: private UnityEngine.Vector3 _oldPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__oldPosition();
    // private System.Void Awake()
    // Offset: 0xD7ED88
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0xD7EE5C
    void OnDestroy();
    // private System.Void OnEnable()
    // Offset: 0xD7EF10
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xD7F058
    void OnDisable();
    // private System.Void ActionOrInContactZoneStayEvent(OculusSampleFramework.ColliderZoneArgs collisionArgs)
    // Offset: 0xD7F1E4
    void ActionOrInContactZoneStayEvent(::OculusSampleFramework::ColliderZoneArgs* collisionArgs);
    // private System.Void InteractableStateChanged(OculusSampleFramework.InteractableStateArgs obj)
    // Offset: 0xD7F3C4
    void InteractableStateChanged(::OculusSampleFramework::InteractableStateArgs* obj);
    // private System.Void PlaySound(UnityEngine.AudioClip clip)
    // Offset: 0xD7F6EC
    void PlaySound(::UnityEngine::AudioClip* clip);
    // private System.Void StopResetLerping()
    // Offset: 0xD7F57C
    void StopResetLerping();
    // private System.Void LerpToOldPosition()
    // Offset: 0xD7F590
    void LerpToOldPosition();
    // private System.Collections.IEnumerator ResetPosition()
    // Offset: 0xD7F76C
    ::System::Collections::IEnumerator* ResetPosition();
    // public System.Void .ctor()
    // Offset: 0xD7F80C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrainButtonVisualController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::TrainButtonVisualController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrainButtonVisualController*, creationType>()));
    }
  }; // OculusSampleFramework.TrainButtonVisualController
  #pragma pack(pop)
  static check_size<sizeof(TrainButtonVisualController), 152 + sizeof(::UnityEngine::Vector3)> __OculusSampleFramework_TrainButtonVisualControllerSizeCheck;
  static_assert(sizeof(TrainButtonVisualController) == 0xA4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::TrainButtonVisualController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainButtonVisualController::*)()>(&OculusSampleFramework::TrainButtonVisualController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainButtonVisualController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainButtonVisualController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainButtonVisualController::*)()>(&OculusSampleFramework::TrainButtonVisualController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainButtonVisualController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainButtonVisualController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainButtonVisualController::*)()>(&OculusSampleFramework::TrainButtonVisualController::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainButtonVisualController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainButtonVisualController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainButtonVisualController::*)()>(&OculusSampleFramework::TrainButtonVisualController::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainButtonVisualController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainButtonVisualController::ActionOrInContactZoneStayEvent
// Il2CppName: ActionOrInContactZoneStayEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainButtonVisualController::*)(::OculusSampleFramework::ColliderZoneArgs*)>(&OculusSampleFramework::TrainButtonVisualController::ActionOrInContactZoneStayEvent)> {
  static const MethodInfo* get() {
    static auto* collisionArgs = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "ColliderZoneArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainButtonVisualController*), "ActionOrInContactZoneStayEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collisionArgs});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainButtonVisualController::InteractableStateChanged
// Il2CppName: InteractableStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainButtonVisualController::*)(::OculusSampleFramework::InteractableStateArgs*)>(&OculusSampleFramework::TrainButtonVisualController::InteractableStateChanged)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableStateArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainButtonVisualController*), "InteractableStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainButtonVisualController::PlaySound
// Il2CppName: PlaySound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainButtonVisualController::*)(::UnityEngine::AudioClip*)>(&OculusSampleFramework::TrainButtonVisualController::PlaySound)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainButtonVisualController*), "PlaySound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainButtonVisualController::StopResetLerping
// Il2CppName: StopResetLerping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainButtonVisualController::*)()>(&OculusSampleFramework::TrainButtonVisualController::StopResetLerping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainButtonVisualController*), "StopResetLerping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainButtonVisualController::LerpToOldPosition
// Il2CppName: LerpToOldPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainButtonVisualController::*)()>(&OculusSampleFramework::TrainButtonVisualController::LerpToOldPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainButtonVisualController*), "LerpToOldPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainButtonVisualController::ResetPosition
// Il2CppName: ResetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (OculusSampleFramework::TrainButtonVisualController::*)()>(&OculusSampleFramework::TrainButtonVisualController::ResetPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainButtonVisualController*), "ResetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainButtonVisualController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
