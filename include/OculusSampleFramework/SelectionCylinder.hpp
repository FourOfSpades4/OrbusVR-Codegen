// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Skipping declaration: SelectionState because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: SelectionCylinder
  class SelectionCylinder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::SelectionCylinder);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::SelectionCylinder*, "OculusSampleFramework", "SelectionCylinder");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.SelectionCylinder
  // [TokenAttribute] Offset: FFFFFFFF
  class SelectionCylinder : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::OculusSampleFramework::SelectionCylinder::SelectionState
    struct SelectionState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OculusSampleFramework.SelectionCylinder/SelectionState
    // [TokenAttribute] Offset: FFFFFFFF
    struct SelectionState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SelectionState
      constexpr SelectionState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OculusSampleFramework.SelectionCylinder/SelectionState Off
      static constexpr const int Off = 0;
      // Get static field: static public OculusSampleFramework.SelectionCylinder/SelectionState Off
      static ::OculusSampleFramework::SelectionCylinder::SelectionState _get_Off();
      // Set static field: static public OculusSampleFramework.SelectionCylinder/SelectionState Off
      static void _set_Off(::OculusSampleFramework::SelectionCylinder::SelectionState value);
      // static field const value: static public OculusSampleFramework.SelectionCylinder/SelectionState Selected
      static constexpr const int Selected = 1;
      // Get static field: static public OculusSampleFramework.SelectionCylinder/SelectionState Selected
      static ::OculusSampleFramework::SelectionCylinder::SelectionState _get_Selected();
      // Set static field: static public OculusSampleFramework.SelectionCylinder/SelectionState Selected
      static void _set_Selected(::OculusSampleFramework::SelectionCylinder::SelectionState value);
      // static field const value: static public OculusSampleFramework.SelectionCylinder/SelectionState Highlighted
      static constexpr const int Highlighted = 2;
      // Get static field: static public OculusSampleFramework.SelectionCylinder/SelectionState Highlighted
      static ::OculusSampleFramework::SelectionCylinder::SelectionState _get_Highlighted();
      // Set static field: static public OculusSampleFramework.SelectionCylinder/SelectionState Highlighted
      static void _set_Highlighted(::OculusSampleFramework::SelectionCylinder::SelectionState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OculusSampleFramework.SelectionCylinder/SelectionState
    #pragma pack(pop)
    static check_size<sizeof(SelectionCylinder::SelectionState), 0 + sizeof(int)> __OculusSampleFramework_SelectionCylinder_SelectionStateSizeCheck;
    static_assert(sizeof(SelectionCylinder::SelectionState) == 0x4);
    public:
    // private UnityEngine.MeshRenderer _selectionMeshRenderer
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::MeshRenderer* selectionMeshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.Material[] _selectionMaterials
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Material*> selectionMaterials;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // private UnityEngine.Color[] _defaultSelectionColors
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Color> defaultSelectionColors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // private UnityEngine.Color[] _highlightColors
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Color> highlightColors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // private OculusSampleFramework.SelectionCylinder/SelectionState _currSelectionState
    // Size: 0x4
    // Offset: 0x38
    ::OculusSampleFramework::SelectionCylinder::SelectionState currSelectionState;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::SelectionCylinder::SelectionState) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.Int32 _colorId
    static int _get__colorId();
    // Set static field: static private System.Int32 _colorId
    static void _set__colorId(int value);
    // Get instance field reference: private UnityEngine.MeshRenderer _selectionMeshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn__selectionMeshRenderer();
    // Get instance field reference: private UnityEngine.Material[] _selectionMaterials
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn__selectionMaterials();
    // Get instance field reference: private UnityEngine.Color[] _defaultSelectionColors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn__defaultSelectionColors();
    // Get instance field reference: private UnityEngine.Color[] _highlightColors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn__highlightColors();
    // Get instance field reference: private OculusSampleFramework.SelectionCylinder/SelectionState _currSelectionState
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::SelectionCylinder::SelectionState& dyn__currSelectionState();
    // public OculusSampleFramework.SelectionCylinder/SelectionState get_CurrSelectionState()
    // Offset: 0xD7D0E4
    ::OculusSampleFramework::SelectionCylinder::SelectionState get_CurrSelectionState();
    // public System.Void set_CurrSelectionState(OculusSampleFramework.SelectionCylinder/SelectionState value)
    // Offset: 0xD7D0EC
    void set_CurrSelectionState(::OculusSampleFramework::SelectionCylinder::SelectionState value);
    // private System.Void Awake()
    // Offset: 0xD7D2E4
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0xD7D53C
    void OnDestroy();
    // private System.Void AffectSelectionColor(UnityEngine.Color[] newColors)
    // Offset: 0xD7D194
    void AffectSelectionColor(::ArrayW<::UnityEngine::Color> newColors);
    // public System.Void .ctor()
    // Offset: 0xD7D628
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SelectionCylinder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::SelectionCylinder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SelectionCylinder*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xD7D630
    static void _cctor();
  }; // OculusSampleFramework.SelectionCylinder
  #pragma pack(pop)
  static check_size<sizeof(SelectionCylinder), 56 + sizeof(::OculusSampleFramework::SelectionCylinder::SelectionState)> __OculusSampleFramework_SelectionCylinderSizeCheck;
  static_assert(sizeof(SelectionCylinder) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::SelectionCylinder::SelectionState, "OculusSampleFramework", "SelectionCylinder/SelectionState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::SelectionCylinder::get_CurrSelectionState
// Il2CppName: get_CurrSelectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OculusSampleFramework::SelectionCylinder::SelectionState (OculusSampleFramework::SelectionCylinder::*)()>(&OculusSampleFramework::SelectionCylinder::get_CurrSelectionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::SelectionCylinder*), "get_CurrSelectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::SelectionCylinder::set_CurrSelectionState
// Il2CppName: set_CurrSelectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::SelectionCylinder::*)(::OculusSampleFramework::SelectionCylinder::SelectionState)>(&OculusSampleFramework::SelectionCylinder::set_CurrSelectionState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "SelectionCylinder/SelectionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::SelectionCylinder*), "set_CurrSelectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::SelectionCylinder::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::SelectionCylinder::*)()>(&OculusSampleFramework::SelectionCylinder::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::SelectionCylinder*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::SelectionCylinder::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::SelectionCylinder::*)()>(&OculusSampleFramework::SelectionCylinder::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::SelectionCylinder*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::SelectionCylinder::AffectSelectionColor
// Il2CppName: AffectSelectionColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::SelectionCylinder::*)(::ArrayW<::UnityEngine::Color>)>(&OculusSampleFramework::SelectionCylinder::AffectSelectionColor)> {
  static const MethodInfo* get() {
    static auto* newColors = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Color"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::SelectionCylinder*), "AffectSelectionColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newColors});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::SelectionCylinder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OculusSampleFramework::SelectionCylinder::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OculusSampleFramework::SelectionCylinder::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::SelectionCylinder*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
