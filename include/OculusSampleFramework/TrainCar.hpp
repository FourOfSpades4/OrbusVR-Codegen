// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OculusSampleFramework.TrainCarBase
#include "OculusSampleFramework/TrainCarBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: TrainCar
  class TrainCar;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::TrainCar);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::TrainCar*, "OculusSampleFramework", "TrainCar");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.TrainCar
  // [TokenAttribute] Offset: FFFFFFFF
  class TrainCar : public ::OculusSampleFramework::TrainCarBase {
    public:
    public:
    // private OculusSampleFramework.TrainCarBase _parentLocomotive
    // Size: 0x8
    // Offset: 0x50
    ::OculusSampleFramework::TrainCarBase* parentLocomotive;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::TrainCarBase*) == 0x8);
    // protected System.Single _distanceBehindParent
    // Size: 0x4
    // Offset: 0x58
    float distanceBehindParent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private OculusSampleFramework.TrainCarBase _parentLocomotive
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::TrainCarBase*& dyn__parentLocomotive();
    // Get instance field reference: protected System.Single _distanceBehindParent
    [[deprecated("Use field access instead!")]] float& dyn__distanceBehindParent();
    // public System.Single get_DistanceBehindParentScaled()
    // Offset: 0xD7FB78
    float get_DistanceBehindParentScaled();
    // protected override System.Void Awake()
    // Offset: 0xD7FB88
    // Implemented from: OculusSampleFramework.TrainCarBase
    // Base method: System.Void TrainCarBase::Awake()
    void Awake();
    // public override System.Void UpdatePosition()
    // Offset: 0xD7FB90
    // Implemented from: OculusSampleFramework.TrainCarBase
    // Base method: System.Void TrainCarBase::UpdatePosition()
    void UpdatePosition();
    // public System.Void .ctor()
    // Offset: 0xD8015C
    // Implemented from: OculusSampleFramework.TrainCarBase
    // Base method: System.Void TrainCarBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrainCar* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::TrainCar::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrainCar*, creationType>()));
    }
  }; // OculusSampleFramework.TrainCar
  #pragma pack(pop)
  static check_size<sizeof(TrainCar), 88 + sizeof(float)> __OculusSampleFramework_TrainCarSizeCheck;
  static_assert(sizeof(TrainCar) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::TrainCar::get_DistanceBehindParentScaled
// Il2CppName: get_DistanceBehindParentScaled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OculusSampleFramework::TrainCar::*)()>(&OculusSampleFramework::TrainCar::get_DistanceBehindParentScaled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCar*), "get_DistanceBehindParentScaled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCar::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCar::*)()>(&OculusSampleFramework::TrainCar::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCar*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCar::UpdatePosition
// Il2CppName: UpdatePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCar::*)()>(&OculusSampleFramework::TrainCar::UpdatePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCar*), "UpdatePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCar::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
