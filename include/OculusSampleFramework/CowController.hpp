// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animation
  class Animation;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: CowController
  class CowController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::CowController);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::CowController*, "OculusSampleFramework", "CowController");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.CowController
  // [TokenAttribute] Offset: FFFFFFFF
  class CowController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Animation _cowAnimation
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Animation* cowAnimation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animation*) == 0x8);
    // private UnityEngine.AudioSource _mooCowAudioSource
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioSource* mooCowAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Animation _cowAnimation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animation*& dyn__cowAnimation();
    // Get instance field reference: private UnityEngine.AudioSource _mooCowAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn__mooCowAudioSource();
    // private System.Void Start()
    // Offset: 0xD70734
    void Start();
    // public System.Void PlayMooSound()
    // Offset: 0xD70738
    void PlayMooSound();
    // public System.Void GoMooCowGo()
    // Offset: 0xD706DC
    void GoMooCowGo();
    // public System.Void .ctor()
    // Offset: 0xD7078C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CowController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::CowController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CowController*, creationType>()));
    }
  }; // OculusSampleFramework.CowController
  #pragma pack(pop)
  static check_size<sizeof(CowController), 32 + sizeof(::UnityEngine::AudioSource*)> __OculusSampleFramework_CowControllerSizeCheck;
  static_assert(sizeof(CowController) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::CowController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::CowController::*)()>(&OculusSampleFramework::CowController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::CowController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::CowController::PlayMooSound
// Il2CppName: PlayMooSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::CowController::*)()>(&OculusSampleFramework::CowController::PlayMooSound)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::CowController*), "PlayMooSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::CowController::GoMooCowGo
// Il2CppName: GoMooCowGo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::CowController::*)()>(&OculusSampleFramework::CowController::GoMooCowGo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::CowController*), "GoMooCowGo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::CowController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
