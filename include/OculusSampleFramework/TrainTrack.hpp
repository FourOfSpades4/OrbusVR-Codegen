// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: TrackSegment
  class TrackSegment;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: TrainTrack
  class TrainTrack;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::TrainTrack);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::TrainTrack*, "OculusSampleFramework", "TrainTrack");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.TrainTrack
  // [TokenAttribute] Offset: FFFFFFFF
  class TrainTrack : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single _gridSize
    // Size: 0x4
    // Offset: 0x18
    float gridSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _subDivCount
    // Size: 0x4
    // Offset: 0x1C
    int subDivCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Transform _segmentParent
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* segmentParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _trainParent
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* trainParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean _regnerateTrackMeshOnAwake
    // Size: 0x1
    // Offset: 0x30
    bool regnerateTrackMeshOnAwake;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: regnerateTrackMeshOnAwake and: trainLength
    char __padding4[0x3] = {};
    // private System.Single _trainLength
    // Size: 0x4
    // Offset: 0x34
    float trainLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private OculusSampleFramework.TrackSegment[] _trackSegments
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::OculusSampleFramework::TrackSegment*> trackSegments;
    // Field size check
    static_assert(sizeof(::ArrayW<::OculusSampleFramework::TrackSegment*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single _gridSize
    [[deprecated("Use field access instead!")]] float& dyn__gridSize();
    // Get instance field reference: private System.Int32 _subDivCount
    [[deprecated("Use field access instead!")]] int& dyn__subDivCount();
    // Get instance field reference: private UnityEngine.Transform _segmentParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__segmentParent();
    // Get instance field reference: private UnityEngine.Transform _trainParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__trainParent();
    // Get instance field reference: private System.Boolean _regnerateTrackMeshOnAwake
    [[deprecated("Use field access instead!")]] bool& dyn__regnerateTrackMeshOnAwake();
    // Get instance field reference: private System.Single _trainLength
    [[deprecated("Use field access instead!")]] float& dyn__trainLength();
    // Get instance field reference: private OculusSampleFramework.TrackSegment[] _trackSegments
    [[deprecated("Use field access instead!")]] ::ArrayW<::OculusSampleFramework::TrackSegment*>& dyn__trackSegments();
    // public System.Single get_TrackLength()
    // Offset: 0xD80348
    float get_TrackLength();
    // private System.Void set_TrackLength(System.Single value)
    // Offset: 0xD81A98
    void set_TrackLength(float value);
    // private System.Void Awake()
    // Offset: 0xD81AA0
    void Awake();
    // public OculusSampleFramework.TrackSegment GetSegment(System.Single distance)
    // Offset: 0xD80350
    ::OculusSampleFramework::TrackSegment* GetSegment(float distance);
    // public System.Void Regenerate()
    // Offset: 0xD81AA4
    void Regenerate();
    // private System.Void SetScale(System.Single ratio)
    // Offset: 0xD81D38
    void SetScale(float ratio);
    // public System.Void .ctor()
    // Offset: 0xD81E8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrainTrack* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::TrainTrack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrainTrack*, creationType>()));
    }
  }; // OculusSampleFramework.TrainTrack
  #pragma pack(pop)
  static check_size<sizeof(TrainTrack), 56 + sizeof(::ArrayW<::OculusSampleFramework::TrackSegment*>)> __OculusSampleFramework_TrainTrackSizeCheck;
  static_assert(sizeof(TrainTrack) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::TrainTrack::get_TrackLength
// Il2CppName: get_TrackLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OculusSampleFramework::TrainTrack::*)()>(&OculusSampleFramework::TrainTrack::get_TrackLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainTrack*), "get_TrackLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainTrack::set_TrackLength
// Il2CppName: set_TrackLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainTrack::*)(float)>(&OculusSampleFramework::TrainTrack::set_TrackLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainTrack*), "set_TrackLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainTrack::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainTrack::*)()>(&OculusSampleFramework::TrainTrack::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainTrack*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainTrack::GetSegment
// Il2CppName: GetSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::OculusSampleFramework::TrackSegment* (OculusSampleFramework::TrainTrack::*)(float)>(&OculusSampleFramework::TrainTrack::GetSegment)> {
  static const MethodInfo* get() {
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainTrack*), "GetSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distance});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainTrack::Regenerate
// Il2CppName: Regenerate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainTrack::*)()>(&OculusSampleFramework::TrainTrack::Regenerate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainTrack*), "Regenerate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainTrack::SetScale
// Il2CppName: SetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainTrack::*)(float)>(&OculusSampleFramework::TrainTrack::SetScale)> {
  static const MethodInfo* get() {
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainTrack*), "SetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ratio});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainTrack::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
