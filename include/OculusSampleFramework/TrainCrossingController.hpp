// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: SelectionCylinder
  class SelectionCylinder;
  // Forward declaring type: InteractableTool
  class InteractableTool;
  // Forward declaring type: InteractableStateArgs
  class InteractableStateArgs;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: TrainCrossingController
  class TrainCrossingController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::TrainCrossingController);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::TrainCrossingController*, "OculusSampleFramework", "TrainCrossingController");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.TrainCrossingController
  // [TokenAttribute] Offset: FFFFFFFF
  class TrainCrossingController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15
    class $AnimateCrossing$d__15;
    public:
    // private UnityEngine.AudioSource _audioSource
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip[] _crossingSounds
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::AudioClip*> crossingSounds;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // private UnityEngine.MeshRenderer _lightSide1Renderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MeshRenderer* lightSide1Renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.MeshRenderer _lightSide2Renderer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::MeshRenderer* lightSide2Renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private OculusSampleFramework.SelectionCylinder _selectionCylinder
    // Size: 0x8
    // Offset: 0x38
    ::OculusSampleFramework::SelectionCylinder* selectionCylinder;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::SelectionCylinder*) == 0x8);
    // private UnityEngine.Material _lightsSide1Mat
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Material* lightsSide1Mat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _lightsSide2Mat
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Material* lightsSide2Mat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Int32 _colorId
    // Size: 0x4
    // Offset: 0x50
    int colorId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: colorId and: xingAnimationCr
    char __padding7[0x4] = {};
    // private UnityEngine.Coroutine _xingAnimationCr
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Coroutine* xingAnimationCr;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private OculusSampleFramework.InteractableTool _toolInteractingWithMe
    // Size: 0x8
    // Offset: 0x60
    ::OculusSampleFramework::InteractableTool* toolInteractingWithMe;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::InteractableTool*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.AudioSource _audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn__audioSource();
    // Get instance field reference: private UnityEngine.AudioClip[] _crossingSounds
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn__crossingSounds();
    // Get instance field reference: private UnityEngine.MeshRenderer _lightSide1Renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn__lightSide1Renderer();
    // Get instance field reference: private UnityEngine.MeshRenderer _lightSide2Renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn__lightSide2Renderer();
    // Get instance field reference: private OculusSampleFramework.SelectionCylinder _selectionCylinder
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::SelectionCylinder*& dyn__selectionCylinder();
    // Get instance field reference: private UnityEngine.Material _lightsSide1Mat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__lightsSide1Mat();
    // Get instance field reference: private UnityEngine.Material _lightsSide2Mat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__lightsSide2Mat();
    // Get instance field reference: private System.Int32 _colorId
    [[deprecated("Use field access instead!")]] int& dyn__colorId();
    // Get instance field reference: private UnityEngine.Coroutine _xingAnimationCr
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn__xingAnimationCr();
    // Get instance field reference: private OculusSampleFramework.InteractableTool _toolInteractingWithMe
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::InteractableTool*& dyn__toolInteractingWithMe();
    // private System.Void Awake()
    // Offset: 0xD80518
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0xD80574
    void OnDestroy();
    // public System.Void CrossingButtonStateChanged(OculusSampleFramework.InteractableStateArgs obj)
    // Offset: 0xD80680
    void CrossingButtonStateChanged(::OculusSampleFramework::InteractableStateArgs* obj);
    // private System.Void Update()
    // Offset: 0xD80830
    void Update();
    // private System.Void ActivateTrainCrossing()
    // Offset: 0xD806EC
    void ActivateTrainCrossing();
    // private System.Collections.IEnumerator AnimateCrossing(System.Single animationLength)
    // Offset: 0xD80940
    ::System::Collections::IEnumerator* AnimateCrossing(float animationLength);
    // private System.Void AffectMaterials(UnityEngine.Material[] materials, UnityEngine.Color newColor)
    // Offset: 0xD80A04
    void AffectMaterials(::ArrayW<::UnityEngine::Material*> materials, ::UnityEngine::Color newColor);
    // private System.Void ToggleLightObjects(System.Boolean enableState)
    // Offset: 0xD80ACC
    void ToggleLightObjects(bool enableState);
    // public System.Void .ctor()
    // Offset: 0xD80B60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrainCrossingController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::TrainCrossingController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrainCrossingController*, creationType>()));
    }
  }; // OculusSampleFramework.TrainCrossingController
  #pragma pack(pop)
  static check_size<sizeof(TrainCrossingController), 96 + sizeof(::OculusSampleFramework::InteractableTool*)> __OculusSampleFramework_TrainCrossingControllerSizeCheck;
  static_assert(sizeof(TrainCrossingController) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::TrainCrossingController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCrossingController::*)()>(&OculusSampleFramework::TrainCrossingController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCrossingController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCrossingController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCrossingController::*)()>(&OculusSampleFramework::TrainCrossingController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCrossingController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCrossingController::CrossingButtonStateChanged
// Il2CppName: CrossingButtonStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCrossingController::*)(::OculusSampleFramework::InteractableStateArgs*)>(&OculusSampleFramework::TrainCrossingController::CrossingButtonStateChanged)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "InteractableStateArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCrossingController*), "CrossingButtonStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCrossingController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCrossingController::*)()>(&OculusSampleFramework::TrainCrossingController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCrossingController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCrossingController::ActivateTrainCrossing
// Il2CppName: ActivateTrainCrossing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCrossingController::*)()>(&OculusSampleFramework::TrainCrossingController::ActivateTrainCrossing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCrossingController*), "ActivateTrainCrossing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCrossingController::AnimateCrossing
// Il2CppName: AnimateCrossing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (OculusSampleFramework::TrainCrossingController::*)(float)>(&OculusSampleFramework::TrainCrossingController::AnimateCrossing)> {
  static const MethodInfo* get() {
    static auto* animationLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCrossingController*), "AnimateCrossing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animationLength});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCrossingController::AffectMaterials
// Il2CppName: AffectMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCrossingController::*)(::ArrayW<::UnityEngine::Material*>, ::UnityEngine::Color)>(&OculusSampleFramework::TrainCrossingController::AffectMaterials)> {
  static const MethodInfo* get() {
    static auto* materials = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Material"), 1)->byval_arg;
    static auto* newColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCrossingController*), "AffectMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materials, newColor});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCrossingController::ToggleLightObjects
// Il2CppName: ToggleLightObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCrossingController::*)(bool)>(&OculusSampleFramework::TrainCrossingController::ToggleLightObjects)> {
  static const MethodInfo* get() {
    static auto* enableState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCrossingController*), "ToggleLightObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enableState});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCrossingController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
