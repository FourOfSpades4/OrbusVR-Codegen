// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: EUiDisplayType
  struct EUiDisplayType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::EUiDisplayType, "OculusSampleFramework", "EUiDisplayType");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.EUiDisplayType
  // [TokenAttribute] Offset: FFFFFFFF
  struct EUiDisplayType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: EUiDisplayType
    constexpr EUiDisplayType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public OculusSampleFramework.EUiDisplayType EUDT_WorldGeoQuad
    static constexpr const int EUDT_WorldGeoQuad = 0;
    // Get static field: static public OculusSampleFramework.EUiDisplayType EUDT_WorldGeoQuad
    static ::OculusSampleFramework::EUiDisplayType _get_EUDT_WorldGeoQuad();
    // Set static field: static public OculusSampleFramework.EUiDisplayType EUDT_WorldGeoQuad
    static void _set_EUDT_WorldGeoQuad(::OculusSampleFramework::EUiDisplayType value);
    // static field const value: static public OculusSampleFramework.EUiDisplayType EUDT_OverlayQuad
    static constexpr const int EUDT_OverlayQuad = 1;
    // Get static field: static public OculusSampleFramework.EUiDisplayType EUDT_OverlayQuad
    static ::OculusSampleFramework::EUiDisplayType _get_EUDT_OverlayQuad();
    // Set static field: static public OculusSampleFramework.EUiDisplayType EUDT_OverlayQuad
    static void _set_EUDT_OverlayQuad(::OculusSampleFramework::EUiDisplayType value);
    // static field const value: static public OculusSampleFramework.EUiDisplayType EUDT_None
    static constexpr const int EUDT_None = 2;
    // Get static field: static public OculusSampleFramework.EUiDisplayType EUDT_None
    static ::OculusSampleFramework::EUiDisplayType _get_EUDT_None();
    // Set static field: static public OculusSampleFramework.EUiDisplayType EUDT_None
    static void _set_EUDT_None(::OculusSampleFramework::EUiDisplayType value);
    // static field const value: static public OculusSampleFramework.EUiDisplayType EUDT_MaxDislayTypes
    static constexpr const int EUDT_MaxDislayTypes = 3;
    // Get static field: static public OculusSampleFramework.EUiDisplayType EUDT_MaxDislayTypes
    static ::OculusSampleFramework::EUiDisplayType _get_EUDT_MaxDislayTypes();
    // Set static field: static public OculusSampleFramework.EUiDisplayType EUDT_MaxDislayTypes
    static void _set_EUDT_MaxDislayTypes(::OculusSampleFramework::EUiDisplayType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // OculusSampleFramework.EUiDisplayType
  #pragma pack(pop)
  static check_size<sizeof(EUiDisplayType), 0 + sizeof(int)> __OculusSampleFramework_EUiDisplayTypeSizeCheck;
  static_assert(sizeof(EUiDisplayType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
