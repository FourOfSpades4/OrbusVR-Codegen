// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: TrainTrack
  class TrainTrack;
  // Forward declaring type: Pose
  class Pose;
}
// Completed forward declares
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Forward declaring type: TrainCarBase
  class TrainCarBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::TrainCarBase);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::TrainCarBase*, "OculusSampleFramework", "TrainCarBase");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.TrainCarBase
  // [TokenAttribute] Offset: FFFFFFFF
  class TrainCarBase : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // protected UnityEngine.Transform _frontWheels
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* frontWheels;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // protected UnityEngine.Transform _rearWheels
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* rearWheels;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // protected OculusSampleFramework.TrainTrack _trainTrack
    // Size: 0x8
    // Offset: 0x28
    ::OculusSampleFramework::TrainTrack* trainTrack;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::TrainTrack*) == 0x8);
    // protected UnityEngine.Transform[] _individualWheels
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Transform*> individualWheels;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAE0014
    // private System.Single <Distance>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    float Distance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single scale
    // Size: 0x4
    // Offset: 0x3C
    float scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private OculusSampleFramework.Pose _frontPose
    // Size: 0x8
    // Offset: 0x40
    ::OculusSampleFramework::Pose* frontPose;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::Pose*) == 0x8);
    // private OculusSampleFramework.Pose _rearPose
    // Size: 0x8
    // Offset: 0x48
    ::OculusSampleFramework::Pose* rearPose;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::Pose*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private UnityEngine.Vector3 OFFSET
    static ::UnityEngine::Vector3 _get_OFFSET();
    // Set static field: static private UnityEngine.Vector3 OFFSET
    static void _set_OFFSET(::UnityEngine::Vector3 value);
    // static field const value: static private System.Single WHEEL_RADIUS
    static constexpr const float WHEEL_RADIUS = 0.027;
    // Get static field: static private System.Single WHEEL_RADIUS
    static float _get_WHEEL_RADIUS();
    // Set static field: static private System.Single WHEEL_RADIUS
    static void _set_WHEEL_RADIUS(float value);
    // static field const value: static private System.Single TWO_PI
    static constexpr const float TWO_PI = 6.2831855;
    // Get static field: static private System.Single TWO_PI
    static float _get_TWO_PI();
    // Set static field: static private System.Single TWO_PI
    static void _set_TWO_PI(float value);
    // Get instance field reference: protected UnityEngine.Transform _frontWheels
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__frontWheels();
    // Get instance field reference: protected UnityEngine.Transform _rearWheels
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__rearWheels();
    // Get instance field reference: protected OculusSampleFramework.TrainTrack _trainTrack
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::TrainTrack*& dyn__trainTrack();
    // Get instance field reference: protected UnityEngine.Transform[] _individualWheels
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn__individualWheels();
    // Get instance field reference: private System.Single <Distance>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$Distance$k__BackingField();
    // Get instance field reference: protected System.Single scale
    [[deprecated("Use field access instead!")]] float& dyn_scale();
    // Get instance field reference: private OculusSampleFramework.Pose _frontPose
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::Pose*& dyn__frontPose();
    // Get instance field reference: private OculusSampleFramework.Pose _rearPose
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::Pose*& dyn__rearPose();
    // public System.Single get_Distance()
    // Offset: 0xD7FBE0
    float get_Distance();
    // protected System.Void set_Distance(System.Single value)
    // Offset: 0xD7FBE8
    void set_Distance(float value);
    // public System.Single get_Scale()
    // Offset: 0xD80254
    float get_Scale();
    // public System.Void set_Scale(System.Single value)
    // Offset: 0xD8025C
    void set_Scale(float value);
    // protected System.Void Awake()
    // Offset: 0xD7FB8C
    void Awake();
    // public System.Void UpdatePose(System.Single distance, OculusSampleFramework.TrainCarBase train, OculusSampleFramework.Pose pose)
    // Offset: 0xD80264
    void UpdatePose(float distance, ::OculusSampleFramework::TrainCarBase* train, ::OculusSampleFramework::Pose* pose);
    // protected System.Void UpdateCarPosition()
    // Offset: 0xD7FBF0
    void UpdateCarPosition();
    // protected System.Void RotateCarWheels()
    // Offset: 0xD7FFDC
    void RotateCarWheels();
    // public System.Void UpdatePosition()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdatePosition();
    // protected System.Void .ctor()
    // Offset: 0xD801CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrainCarBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::TrainCarBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrainCarBase*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xD80490
    static void _cctor();
  }; // OculusSampleFramework.TrainCarBase
  #pragma pack(pop)
  static check_size<sizeof(TrainCarBase), 72 + sizeof(::OculusSampleFramework::Pose*)> __OculusSampleFramework_TrainCarBaseSizeCheck;
  static_assert(sizeof(TrainCarBase) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::TrainCarBase::get_Distance
// Il2CppName: get_Distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OculusSampleFramework::TrainCarBase::*)()>(&OculusSampleFramework::TrainCarBase::get_Distance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCarBase*), "get_Distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCarBase::set_Distance
// Il2CppName: set_Distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCarBase::*)(float)>(&OculusSampleFramework::TrainCarBase::set_Distance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCarBase*), "set_Distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCarBase::get_Scale
// Il2CppName: get_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OculusSampleFramework::TrainCarBase::*)()>(&OculusSampleFramework::TrainCarBase::get_Scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCarBase*), "get_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCarBase::set_Scale
// Il2CppName: set_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCarBase::*)(float)>(&OculusSampleFramework::TrainCarBase::set_Scale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCarBase*), "set_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCarBase::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCarBase::*)()>(&OculusSampleFramework::TrainCarBase::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCarBase*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCarBase::UpdatePose
// Il2CppName: UpdatePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCarBase::*)(float, ::OculusSampleFramework::TrainCarBase*, ::OculusSampleFramework::Pose*)>(&OculusSampleFramework::TrainCarBase::UpdatePose)> {
  static const MethodInfo* get() {
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* train = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "TrainCarBase")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("OculusSampleFramework", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCarBase*), "UpdatePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distance, train, pose});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCarBase::UpdateCarPosition
// Il2CppName: UpdateCarPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCarBase::*)()>(&OculusSampleFramework::TrainCarBase::UpdateCarPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCarBase*), "UpdateCarPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCarBase::RotateCarWheels
// Il2CppName: RotateCarWheels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCarBase::*)()>(&OculusSampleFramework::TrainCarBase::RotateCarWheels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCarBase*), "RotateCarWheels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCarBase::UpdatePosition
// Il2CppName: UpdatePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCarBase::*)()>(&OculusSampleFramework::TrainCarBase::UpdatePosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCarBase*), "UpdatePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCarBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OculusSampleFramework::TrainCarBase::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OculusSampleFramework::TrainCarBase::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCarBase*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
