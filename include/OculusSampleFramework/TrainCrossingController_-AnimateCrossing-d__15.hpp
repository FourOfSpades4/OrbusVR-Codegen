// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OculusSampleFramework.TrainCrossingController
#include "OculusSampleFramework/TrainCrossingController.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15);
DEFINE_IL2CPP_ARG_TYPE(::OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15*, "OculusSampleFramework", "TrainCrossingController/<AnimateCrossing>d__15");
// Type namespace: OculusSampleFramework
namespace OculusSampleFramework {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: OculusSampleFramework.TrainCrossingController/<AnimateCrossing>d__15
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: AD1734
  class TrainCrossingController::$AnimateCrossing$d__15 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
    public:
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$2__current
    char __padding0[0x4] = {};
    // private System.Object <>2__current
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* $$2__current;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public OculusSampleFramework.TrainCrossingController <>4__this
    // Size: 0x8
    // Offset: 0x20
    ::OculusSampleFramework::TrainCrossingController* $$4__this;
    // Field size check
    static_assert(sizeof(::OculusSampleFramework::TrainCrossingController*) == 0x8);
    // public System.Single animationLength
    // Size: 0x4
    // Offset: 0x28
    float animationLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <animationEndTime>5__2
    // Size: 0x4
    // Offset: 0x2C
    float $animationEndTime$5__2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <lightBlinkDuration>5__3
    // Size: 0x4
    // Offset: 0x30
    float $lightBlinkDuration$5__3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <lightBlinkStartTime>5__4
    // Size: 0x4
    // Offset: 0x34
    float $lightBlinkStartTime$5__4;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <lightBlinkEndTime>5__5
    // Size: 0x4
    // Offset: 0x38
    float $lightBlinkEndTime$5__5;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: $lightBlinkEndTime$5__5 and: $lightToBlinkOn$5__6
    char __padding7[0x4] = {};
    // private UnityEngine.Material <lightToBlinkOn>5__6
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Material* $lightToBlinkOn$5__6;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material <lightToBlinkOff>5__7
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Material* $lightToBlinkOff$5__7;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Color <onColor>5__8
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Color $onColor$5__8;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color <offColor>5__9
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Color $offColor$5__9;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
    operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
    }
    // Get instance field reference: private System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: private System.Object <>2__current
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$$2__current();
    // Get instance field reference: public OculusSampleFramework.TrainCrossingController <>4__this
    [[deprecated("Use field access instead!")]] ::OculusSampleFramework::TrainCrossingController*& dyn_$$4__this();
    // Get instance field reference: public System.Single animationLength
    [[deprecated("Use field access instead!")]] float& dyn_animationLength();
    // Get instance field reference: private System.Single <animationEndTime>5__2
    [[deprecated("Use field access instead!")]] float& dyn_$animationEndTime$5__2();
    // Get instance field reference: private System.Single <lightBlinkDuration>5__3
    [[deprecated("Use field access instead!")]] float& dyn_$lightBlinkDuration$5__3();
    // Get instance field reference: private System.Single <lightBlinkStartTime>5__4
    [[deprecated("Use field access instead!")]] float& dyn_$lightBlinkStartTime$5__4();
    // Get instance field reference: private System.Single <lightBlinkEndTime>5__5
    [[deprecated("Use field access instead!")]] float& dyn_$lightBlinkEndTime$5__5();
    // Get instance field reference: private UnityEngine.Material <lightToBlinkOn>5__6
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_$lightToBlinkOn$5__6();
    // Get instance field reference: private UnityEngine.Material <lightToBlinkOff>5__7
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_$lightToBlinkOff$5__7();
    // Get instance field reference: private UnityEngine.Color <onColor>5__8
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_$onColor$5__8();
    // Get instance field reference: private UnityEngine.Color <offColor>5__9
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_$offColor$5__9();
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0xD809D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrainCrossingController::$AnimateCrossing$d__15* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrainCrossingController::$AnimateCrossing$d__15*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0xD80BC0
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0xD80BC4
    bool MoveNext();
    // private System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()
    // Offset: 0xD80E94
    ::Il2CppObject* System_Collections_Generic_IEnumerator$System_Object$_get_Current();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0xD80E9C
    void System_Collections_IEnumerator_Reset();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0xD80F04
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
  }; // OculusSampleFramework.TrainCrossingController/<AnimateCrossing>d__15
  #pragma pack(pop)
  static check_size<sizeof(TrainCrossingController::$AnimateCrossing$d__15), 96 + sizeof(::UnityEngine::Color)> __OculusSampleFramework_TrainCrossingController_$AnimateCrossing$d__15SizeCheck;
  static_assert(sizeof(TrainCrossingController::$AnimateCrossing$d__15) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::*)()>(&OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::System_IDisposable_Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::*)()>(&OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::*)()>(&OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::*)()>(&OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::System_Collections_IEnumerator_Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::*)()>(&OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusSampleFramework::TrainCrossingController::$AnimateCrossing$d__15*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
