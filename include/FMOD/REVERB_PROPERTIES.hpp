// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: REVERB_PROPERTIES
  struct REVERB_PROPERTIES;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::REVERB_PROPERTIES, "FMOD", "REVERB_PROPERTIES");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.REVERB_PROPERTIES
  // [TokenAttribute] Offset: FFFFFFFF
  struct REVERB_PROPERTIES/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single DecayTime
    // Size: 0x4
    // Offset: 0x0
    float DecayTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single EarlyDelay
    // Size: 0x4
    // Offset: 0x4
    float EarlyDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single LateDelay
    // Size: 0x4
    // Offset: 0x8
    float LateDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single HFReference
    // Size: 0x4
    // Offset: 0xC
    float HFReference;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single HFDecayRatio
    // Size: 0x4
    // Offset: 0x10
    float HFDecayRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Diffusion
    // Size: 0x4
    // Offset: 0x14
    float Diffusion;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Density
    // Size: 0x4
    // Offset: 0x18
    float Density;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single LowShelfFrequency
    // Size: 0x4
    // Offset: 0x1C
    float LowShelfFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single LowShelfGain
    // Size: 0x4
    // Offset: 0x20
    float LowShelfGain;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single HighCut
    // Size: 0x4
    // Offset: 0x24
    float HighCut;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single EarlyLateMix
    // Size: 0x4
    // Offset: 0x28
    float EarlyLateMix;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single WetLevel
    // Size: 0x4
    // Offset: 0x2C
    float WetLevel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: REVERB_PROPERTIES
    constexpr REVERB_PROPERTIES(float DecayTime_ = {}, float EarlyDelay_ = {}, float LateDelay_ = {}, float HFReference_ = {}, float HFDecayRatio_ = {}, float Diffusion_ = {}, float Density_ = {}, float LowShelfFrequency_ = {}, float LowShelfGain_ = {}, float HighCut_ = {}, float EarlyLateMix_ = {}, float WetLevel_ = {}) noexcept : DecayTime{DecayTime_}, EarlyDelay{EarlyDelay_}, LateDelay{LateDelay_}, HFReference{HFReference_}, HFDecayRatio{HFDecayRatio_}, Diffusion{Diffusion_}, Density{Density_}, LowShelfFrequency{LowShelfFrequency_}, LowShelfGain{LowShelfGain_}, HighCut{HighCut_}, EarlyLateMix{EarlyLateMix_}, WetLevel{WetLevel_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single DecayTime
    [[deprecated("Use field access instead!")]] float& dyn_DecayTime();
    // Get instance field reference: public System.Single EarlyDelay
    [[deprecated("Use field access instead!")]] float& dyn_EarlyDelay();
    // Get instance field reference: public System.Single LateDelay
    [[deprecated("Use field access instead!")]] float& dyn_LateDelay();
    // Get instance field reference: public System.Single HFReference
    [[deprecated("Use field access instead!")]] float& dyn_HFReference();
    // Get instance field reference: public System.Single HFDecayRatio
    [[deprecated("Use field access instead!")]] float& dyn_HFDecayRatio();
    // Get instance field reference: public System.Single Diffusion
    [[deprecated("Use field access instead!")]] float& dyn_Diffusion();
    // Get instance field reference: public System.Single Density
    [[deprecated("Use field access instead!")]] float& dyn_Density();
    // Get instance field reference: public System.Single LowShelfFrequency
    [[deprecated("Use field access instead!")]] float& dyn_LowShelfFrequency();
    // Get instance field reference: public System.Single LowShelfGain
    [[deprecated("Use field access instead!")]] float& dyn_LowShelfGain();
    // Get instance field reference: public System.Single HighCut
    [[deprecated("Use field access instead!")]] float& dyn_HighCut();
    // Get instance field reference: public System.Single EarlyLateMix
    [[deprecated("Use field access instead!")]] float& dyn_EarlyLateMix();
    // Get instance field reference: public System.Single WetLevel
    [[deprecated("Use field access instead!")]] float& dyn_WetLevel();
    // public System.Void .ctor(System.Single decayTime, System.Single earlyDelay, System.Single lateDelay, System.Single hfReference, System.Single hfDecayRatio, System.Single diffusion, System.Single density, System.Single lowShelfFrequency, System.Single lowShelfGain, System.Single highCut, System.Single earlyLateMix, System.Single wetLevel)
    // Offset: 0xBBD850
    // ABORTED: conflicts with another method.  REVERB_PROPERTIES(float decayTime, float earlyDelay, float lateDelay, float hfReference, float hfDecayRatio, float diffusion, float density, float lowShelfFrequency, float lowShelfGain, float highCut, float earlyLateMix, float wetLevel);
  }; // FMOD.REVERB_PROPERTIES
  #pragma pack(pop)
  static check_size<sizeof(REVERB_PROPERTIES), 44 + sizeof(float)> __FMOD_REVERB_PROPERTIESSizeCheck;
  static_assert(sizeof(REVERB_PROPERTIES) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::REVERB_PROPERTIES::REVERB_PROPERTIES
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
