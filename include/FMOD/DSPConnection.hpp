// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
  // Forward declaring type: DSP
  struct DSP;
  // Forward declaring type: DSPCONNECTION_TYPE
  struct DSPCONNECTION_TYPE;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: DSPConnection
  struct DSPConnection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::DSPConnection, "FMOD", "DSPConnection");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.DSPConnection
  // [TokenAttribute] Offset: FFFFFFFF
  struct DSPConnection/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: DSPConnection
    constexpr DSPConnection(::System::IntPtr handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return handle;
    }
    // Get instance field reference: public System.IntPtr handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_handle();
    // public FMOD.RESULT getInput(out FMOD.DSP input)
    // Offset: 0xBBBFEC
    ::FMOD::RESULT getInput(ByRef<::FMOD::DSP> input);
    // public FMOD.RESULT getOutput(out FMOD.DSP output)
    // Offset: 0xBBBFF4
    ::FMOD::RESULT getOutput(ByRef<::FMOD::DSP> output);
    // public FMOD.RESULT setMix(System.Single volume)
    // Offset: 0xBBBFFC
    ::FMOD::RESULT setMix(float volume);
    // public FMOD.RESULT getMix(out System.Single volume)
    // Offset: 0xBBC004
    ::FMOD::RESULT getMix(ByRef<float> volume);
    // public FMOD.RESULT setMixMatrix(System.Single[] matrix, System.Int32 outchannels, System.Int32 inchannels, System.Int32 inchannel_hop)
    // Offset: 0xBBC00C
    ::FMOD::RESULT setMixMatrix(::ArrayW<float> matrix, int outchannels, int inchannels, int inchannel_hop);
    // public FMOD.RESULT getMixMatrix(System.Single[] matrix, out System.Int32 outchannels, out System.Int32 inchannels, System.Int32 inchannel_hop)
    // Offset: 0xBBC014
    ::FMOD::RESULT getMixMatrix(::ArrayW<float> matrix, ByRef<int> outchannels, ByRef<int> inchannels, int inchannel_hop);
    // public FMOD.RESULT getType(out FMOD.DSPCONNECTION_TYPE type)
    // Offset: 0xBBC01C
    ::FMOD::RESULT getType(ByRef<::FMOD::DSPCONNECTION_TYPE> type);
    // public FMOD.RESULT setUserData(System.IntPtr userdata)
    // Offset: 0xBBC024
    ::FMOD::RESULT setUserData(::System::IntPtr userdata);
    // public FMOD.RESULT getUserData(out System.IntPtr userdata)
    // Offset: 0xBBC02C
    ::FMOD::RESULT getUserData(ByRef<::System::IntPtr> userdata);
    // static private FMOD.RESULT FMOD5_DSPConnection_GetInput(System.IntPtr dspconnection, out System.IntPtr input)
    // Offset: 0x226CB2C
    static ::FMOD::RESULT FMOD5_DSPConnection_GetInput(::System::IntPtr dspconnection, ByRef<::System::IntPtr> input);
    // static private FMOD.RESULT FMOD5_DSPConnection_GetOutput(System.IntPtr dspconnection, out System.IntPtr output)
    // Offset: 0x226CBE0
    static ::FMOD::RESULT FMOD5_DSPConnection_GetOutput(::System::IntPtr dspconnection, ByRef<::System::IntPtr> output);
    // static private FMOD.RESULT FMOD5_DSPConnection_SetMix(System.IntPtr dspconnection, System.Single volume)
    // Offset: 0x226CC94
    static ::FMOD::RESULT FMOD5_DSPConnection_SetMix(::System::IntPtr dspconnection, float volume);
    // static private FMOD.RESULT FMOD5_DSPConnection_GetMix(System.IntPtr dspconnection, out System.Single volume)
    // Offset: 0x226CD48
    static ::FMOD::RESULT FMOD5_DSPConnection_GetMix(::System::IntPtr dspconnection, ByRef<float> volume);
    // static private FMOD.RESULT FMOD5_DSPConnection_SetMixMatrix(System.IntPtr dspconnection, System.Single[] matrix, System.Int32 outchannels, System.Int32 inchannels, System.Int32 inchannel_hop)
    // Offset: 0x226CDFC
    static ::FMOD::RESULT FMOD5_DSPConnection_SetMixMatrix(::System::IntPtr dspconnection, ::ArrayW<float> matrix, int outchannels, int inchannels, int inchannel_hop);
    // static private FMOD.RESULT FMOD5_DSPConnection_GetMixMatrix(System.IntPtr dspconnection, System.Single[] matrix, out System.Int32 outchannels, out System.Int32 inchannels, System.Int32 inchannel_hop)
    // Offset: 0x226CED8
    static ::FMOD::RESULT FMOD5_DSPConnection_GetMixMatrix(::System::IntPtr dspconnection, ::ArrayW<float> matrix, ByRef<int> outchannels, ByRef<int> inchannels, int inchannel_hop);
    // static private FMOD.RESULT FMOD5_DSPConnection_GetType(System.IntPtr dspconnection, out FMOD.DSPCONNECTION_TYPE type)
    // Offset: 0x226CFB4
    static ::FMOD::RESULT FMOD5_DSPConnection_GetType(::System::IntPtr dspconnection, ByRef<::FMOD::DSPCONNECTION_TYPE> type);
    // static private FMOD.RESULT FMOD5_DSPConnection_SetUserData(System.IntPtr dspconnection, System.IntPtr userdata)
    // Offset: 0x226D068
    static ::FMOD::RESULT FMOD5_DSPConnection_SetUserData(::System::IntPtr dspconnection, ::System::IntPtr userdata);
    // static private FMOD.RESULT FMOD5_DSPConnection_GetUserData(System.IntPtr dspconnection, out System.IntPtr userdata)
    // Offset: 0x226D11C
    static ::FMOD::RESULT FMOD5_DSPConnection_GetUserData(::System::IntPtr dspconnection, ByRef<::System::IntPtr> userdata);
    // public System.Boolean hasHandle()
    // Offset: 0xBBC034
    bool hasHandle();
    // public System.Void clearHandle()
    // Offset: 0xBBC03C
    void clearHandle();
  }; // FMOD.DSPConnection
  #pragma pack(pop)
  static check_size<sizeof(DSPConnection), 0 + sizeof(::System::IntPtr)> __FMOD_DSPConnectionSizeCheck;
  static_assert(sizeof(DSPConnection) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::DSPConnection::getInput
// Il2CppName: getInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSPConnection::*)(ByRef<::FMOD::DSP>)>(&FMOD::DSPConnection::getInput)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "getInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::getOutput
// Il2CppName: getOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSPConnection::*)(ByRef<::FMOD::DSP>)>(&FMOD::DSPConnection::getOutput)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "getOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::setMix
// Il2CppName: setMix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSPConnection::*)(float)>(&FMOD::DSPConnection::setMix)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "setMix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::getMix
// Il2CppName: getMix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSPConnection::*)(ByRef<float>)>(&FMOD::DSPConnection::getMix)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "getMix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::setMixMatrix
// Il2CppName: setMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSPConnection::*)(::ArrayW<float>, int, int, int)>(&FMOD::DSPConnection::setMixMatrix)> {
  static const MethodInfo* get() {
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inchannel_hop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "setMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix, outchannels, inchannels, inchannel_hop});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::getMixMatrix
// Il2CppName: getMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSPConnection::*)(::ArrayW<float>, ByRef<int>, ByRef<int>, int)>(&FMOD::DSPConnection::getMixMatrix)> {
  static const MethodInfo* get() {
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* inchannel_hop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "getMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix, outchannels, inchannels, inchannel_hop});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::getType
// Il2CppName: getType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSPConnection::*)(ByRef<::FMOD::DSPCONNECTION_TYPE>)>(&FMOD::DSPConnection::getType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("FMOD", "DSPCONNECTION_TYPE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "getType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::setUserData
// Il2CppName: setUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSPConnection::*)(::System::IntPtr)>(&FMOD::DSPConnection::setUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "setUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::getUserData
// Il2CppName: getUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSPConnection::*)(ByRef<::System::IntPtr>)>(&FMOD::DSPConnection::getUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "getUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::FMOD5_DSPConnection_GetInput
// Il2CppName: FMOD5_DSPConnection_GetInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::DSPConnection::FMOD5_DSPConnection_GetInput)> {
  static const MethodInfo* get() {
    static auto* dspconnection = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "FMOD5_DSPConnection_GetInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspconnection, input});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::FMOD5_DSPConnection_GetOutput
// Il2CppName: FMOD5_DSPConnection_GetOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::DSPConnection::FMOD5_DSPConnection_GetOutput)> {
  static const MethodInfo* get() {
    static auto* dspconnection = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "FMOD5_DSPConnection_GetOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspconnection, output});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::FMOD5_DSPConnection_SetMix
// Il2CppName: FMOD5_DSPConnection_SetMix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::DSPConnection::FMOD5_DSPConnection_SetMix)> {
  static const MethodInfo* get() {
    static auto* dspconnection = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "FMOD5_DSPConnection_SetMix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspconnection, volume});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::FMOD5_DSPConnection_GetMix
// Il2CppName: FMOD5_DSPConnection_GetMix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::DSPConnection::FMOD5_DSPConnection_GetMix)> {
  static const MethodInfo* get() {
    static auto* dspconnection = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "FMOD5_DSPConnection_GetMix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspconnection, volume});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::FMOD5_DSPConnection_SetMixMatrix
// Il2CppName: FMOD5_DSPConnection_SetMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<float>, int, int, int)>(&FMOD::DSPConnection::FMOD5_DSPConnection_SetMixMatrix)> {
  static const MethodInfo* get() {
    static auto* dspconnection = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inchannel_hop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "FMOD5_DSPConnection_SetMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspconnection, matrix, outchannels, inchannels, inchannel_hop});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::FMOD5_DSPConnection_GetMixMatrix
// Il2CppName: FMOD5_DSPConnection_GetMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<float>, ByRef<int>, ByRef<int>, int)>(&FMOD::DSPConnection::FMOD5_DSPConnection_GetMixMatrix)> {
  static const MethodInfo* get() {
    static auto* dspconnection = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* inchannel_hop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "FMOD5_DSPConnection_GetMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspconnection, matrix, outchannels, inchannels, inchannel_hop});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::FMOD5_DSPConnection_GetType
// Il2CppName: FMOD5_DSPConnection_GetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::DSPCONNECTION_TYPE>)>(&FMOD::DSPConnection::FMOD5_DSPConnection_GetType)> {
  static const MethodInfo* get() {
    static auto* dspconnection = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("FMOD", "DSPCONNECTION_TYPE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "FMOD5_DSPConnection_GetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspconnection, type});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::FMOD5_DSPConnection_SetUserData
// Il2CppName: FMOD5_DSPConnection_SetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::DSPConnection::FMOD5_DSPConnection_SetUserData)> {
  static const MethodInfo* get() {
    static auto* dspconnection = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "FMOD5_DSPConnection_SetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspconnection, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::FMOD5_DSPConnection_GetUserData
// Il2CppName: FMOD5_DSPConnection_GetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::DSPConnection::FMOD5_DSPConnection_GetUserData)> {
  static const MethodInfo* get() {
    static auto* dspconnection = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "FMOD5_DSPConnection_GetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspconnection, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::hasHandle
// Il2CppName: hasHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::DSPConnection::*)()>(&FMOD::DSPConnection::hasHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "hasHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::DSPConnection::clearHandle
// Il2CppName: clearHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::DSPConnection::*)()>(&FMOD::DSPConnection::clearHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSPConnection), "clearHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
