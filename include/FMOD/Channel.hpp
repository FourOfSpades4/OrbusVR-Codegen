// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: FMOD.IChannelControl
#include "FMOD/IChannelControl.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
  // Forward declaring type: TIMEUNIT
  struct TIMEUNIT;
  // Forward declaring type: ChannelGroup
  struct ChannelGroup;
  // Forward declaring type: Sound
  struct Sound;
  // Forward declaring type: System
  struct System;
  // Forward declaring type: MODE
  struct MODE;
  // Forward declaring type: CHANNEL_CALLBACK
  class CHANNEL_CALLBACK;
  // Forward declaring type: DSP
  struct DSP;
  // Forward declaring type: VECTOR
  struct VECTOR;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: Channel
  struct Channel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Channel, "FMOD", "Channel");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Channel
  // [TokenAttribute] Offset: FFFFFFFF
  struct Channel/*, public ::System::ValueType, public ::FMOD::IChannelControl*/ {
    public:
    public:
    // public System.IntPtr handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: Channel
    constexpr Channel(::System::IntPtr handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::FMOD::IChannelControl
    operator ::FMOD::IChannelControl() noexcept {
      return *reinterpret_cast<::FMOD::IChannelControl*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return handle;
    }
    // Get instance field reference: public System.IntPtr handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_handle();
    // public FMOD.RESULT setFrequency(System.Single frequency)
    // Offset: 0xBBB7E4
    ::FMOD::RESULT setFrequency(float frequency);
    // public FMOD.RESULT getFrequency(out System.Single frequency)
    // Offset: 0xBBB7EC
    ::FMOD::RESULT getFrequency(ByRef<float> frequency);
    // public FMOD.RESULT setPriority(System.Int32 priority)
    // Offset: 0xBBB7F4
    ::FMOD::RESULT setPriority(int priority);
    // public FMOD.RESULT getPriority(out System.Int32 priority)
    // Offset: 0xBBB7FC
    ::FMOD::RESULT getPriority(ByRef<int> priority);
    // public FMOD.RESULT setPosition(System.UInt32 position, FMOD.TIMEUNIT postype)
    // Offset: 0xBBB804
    ::FMOD::RESULT setPosition(uint position, ::FMOD::TIMEUNIT postype);
    // public FMOD.RESULT getPosition(out System.UInt32 position, FMOD.TIMEUNIT postype)
    // Offset: 0xBBB80C
    ::FMOD::RESULT getPosition(ByRef<uint> position, ::FMOD::TIMEUNIT postype);
    // public FMOD.RESULT setChannelGroup(FMOD.ChannelGroup channelgroup)
    // Offset: 0xBBB814
    ::FMOD::RESULT setChannelGroup(::FMOD::ChannelGroup channelgroup);
    // public FMOD.RESULT getChannelGroup(out FMOD.ChannelGroup channelgroup)
    // Offset: 0xBBB81C
    ::FMOD::RESULT getChannelGroup(ByRef<::FMOD::ChannelGroup> channelgroup);
    // public FMOD.RESULT setLoopCount(System.Int32 loopcount)
    // Offset: 0xBBB824
    ::FMOD::RESULT setLoopCount(int loopcount);
    // public FMOD.RESULT getLoopCount(out System.Int32 loopcount)
    // Offset: 0xBBB82C
    ::FMOD::RESULT getLoopCount(ByRef<int> loopcount);
    // public FMOD.RESULT setLoopPoints(System.UInt32 loopstart, FMOD.TIMEUNIT loopstarttype, System.UInt32 loopend, FMOD.TIMEUNIT loopendtype)
    // Offset: 0xBBB834
    ::FMOD::RESULT setLoopPoints(uint loopstart, ::FMOD::TIMEUNIT loopstarttype, uint loopend, ::FMOD::TIMEUNIT loopendtype);
    // public FMOD.RESULT getLoopPoints(out System.UInt32 loopstart, FMOD.TIMEUNIT loopstarttype, out System.UInt32 loopend, FMOD.TIMEUNIT loopendtype)
    // Offset: 0xBBB83C
    ::FMOD::RESULT getLoopPoints(ByRef<uint> loopstart, ::FMOD::TIMEUNIT loopstarttype, ByRef<uint> loopend, ::FMOD::TIMEUNIT loopendtype);
    // public FMOD.RESULT isVirtual(out System.Boolean isvirtual)
    // Offset: 0xBBB844
    ::FMOD::RESULT isVirtual(ByRef<bool> isvirtual);
    // public FMOD.RESULT getCurrentSound(out FMOD.Sound sound)
    // Offset: 0xBBB84C
    ::FMOD::RESULT getCurrentSound(ByRef<::FMOD::Sound> sound);
    // public FMOD.RESULT getIndex(out System.Int32 index)
    // Offset: 0xBBB854
    ::FMOD::RESULT getIndex(ByRef<int> index);
    // public FMOD.RESULT getSystemObject(out FMOD.System system)
    // Offset: 0xBBB85C
    ::FMOD::RESULT getSystemObject(ByRef<::FMOD::System> system);
    // public FMOD.RESULT stop()
    // Offset: 0xBBB864
    ::FMOD::RESULT stop();
    // public FMOD.RESULT setPaused(System.Boolean paused)
    // Offset: 0xBBB86C
    ::FMOD::RESULT setPaused(bool paused);
    // public FMOD.RESULT getPaused(out System.Boolean paused)
    // Offset: 0xBBB878
    ::FMOD::RESULT getPaused(ByRef<bool> paused);
    // public FMOD.RESULT setVolume(System.Single volume)
    // Offset: 0xBBB880
    ::FMOD::RESULT setVolume(float volume);
    // public FMOD.RESULT getVolume(out System.Single volume)
    // Offset: 0xBBB888
    ::FMOD::RESULT getVolume(ByRef<float> volume);
    // public FMOD.RESULT setVolumeRamp(System.Boolean ramp)
    // Offset: 0xBBB890
    ::FMOD::RESULT setVolumeRamp(bool ramp);
    // public FMOD.RESULT getVolumeRamp(out System.Boolean ramp)
    // Offset: 0xBBB89C
    ::FMOD::RESULT getVolumeRamp(ByRef<bool> ramp);
    // public FMOD.RESULT getAudibility(out System.Single audibility)
    // Offset: 0xBBB8A4
    ::FMOD::RESULT getAudibility(ByRef<float> audibility);
    // public FMOD.RESULT setPitch(System.Single pitch)
    // Offset: 0xBBB8AC
    ::FMOD::RESULT setPitch(float pitch);
    // public FMOD.RESULT getPitch(out System.Single pitch)
    // Offset: 0xBBB8B4
    ::FMOD::RESULT getPitch(ByRef<float> pitch);
    // public FMOD.RESULT setMute(System.Boolean mute)
    // Offset: 0xBBB8BC
    ::FMOD::RESULT setMute(bool mute);
    // public FMOD.RESULT getMute(out System.Boolean mute)
    // Offset: 0xBBB8C8
    ::FMOD::RESULT getMute(ByRef<bool> mute);
    // public FMOD.RESULT setReverbProperties(System.Int32 instance, System.Single wet)
    // Offset: 0xBBB8D0
    ::FMOD::RESULT setReverbProperties(int instance, float wet);
    // public FMOD.RESULT getReverbProperties(System.Int32 instance, out System.Single wet)
    // Offset: 0xBBB8D8
    ::FMOD::RESULT getReverbProperties(int instance, ByRef<float> wet);
    // public FMOD.RESULT setLowPassGain(System.Single gain)
    // Offset: 0xBBB8E0
    ::FMOD::RESULT setLowPassGain(float gain);
    // public FMOD.RESULT getLowPassGain(out System.Single gain)
    // Offset: 0xBBB8E8
    ::FMOD::RESULT getLowPassGain(ByRef<float> gain);
    // public FMOD.RESULT setMode(FMOD.MODE mode)
    // Offset: 0xBBB8F0
    ::FMOD::RESULT setMode(::FMOD::MODE mode);
    // public FMOD.RESULT getMode(out FMOD.MODE mode)
    // Offset: 0xBBB8F8
    ::FMOD::RESULT getMode(ByRef<::FMOD::MODE> mode);
    // public FMOD.RESULT setCallback(FMOD.CHANNEL_CALLBACK callback)
    // Offset: 0xBBB900
    ::FMOD::RESULT setCallback(::FMOD::CHANNEL_CALLBACK* callback);
    // public FMOD.RESULT isPlaying(out System.Boolean isplaying)
    // Offset: 0xBBB908
    ::FMOD::RESULT isPlaying(ByRef<bool> isplaying);
    // public FMOD.RESULT setPan(System.Single pan)
    // Offset: 0xBBB910
    ::FMOD::RESULT setPan(float pan);
    // public FMOD.RESULT setMixLevelsOutput(System.Single frontleft, System.Single frontright, System.Single center, System.Single lfe, System.Single surroundleft, System.Single surroundright, System.Single backleft, System.Single backright)
    // Offset: 0xBBB918
    ::FMOD::RESULT setMixLevelsOutput(float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright);
    // public FMOD.RESULT setMixLevelsInput(System.Single[] levels, System.Int32 numlevels)
    // Offset: 0xBBB920
    ::FMOD::RESULT setMixLevelsInput(::ArrayW<float> levels, int numlevels);
    // public FMOD.RESULT setMixMatrix(System.Single[] matrix, System.Int32 outchannels, System.Int32 inchannels, System.Int32 inchannel_hop)
    // Offset: 0xBBB928
    ::FMOD::RESULT setMixMatrix(::ArrayW<float> matrix, int outchannels, int inchannels, int inchannel_hop);
    // public FMOD.RESULT getMixMatrix(System.Single[] matrix, out System.Int32 outchannels, out System.Int32 inchannels, System.Int32 inchannel_hop)
    // Offset: 0xBBB930
    ::FMOD::RESULT getMixMatrix(::ArrayW<float> matrix, ByRef<int> outchannels, ByRef<int> inchannels, int inchannel_hop);
    // public FMOD.RESULT getDSPClock(out System.UInt64 dspclock, out System.UInt64 parentclock)
    // Offset: 0xBBB938
    ::FMOD::RESULT getDSPClock(ByRef<uint64_t> dspclock, ByRef<uint64_t> parentclock);
    // public FMOD.RESULT setDelay(System.UInt64 dspclock_start, System.UInt64 dspclock_end, System.Boolean stopchannels)
    // Offset: 0xBBB940
    ::FMOD::RESULT setDelay(uint64_t dspclock_start, uint64_t dspclock_end, bool stopchannels);
    // public FMOD.RESULT getDelay(out System.UInt64 dspclock_start, out System.UInt64 dspclock_end, out System.Boolean stopchannels)
    // Offset: 0xBBB94C
    ::FMOD::RESULT getDelay(ByRef<uint64_t> dspclock_start, ByRef<uint64_t> dspclock_end, ByRef<bool> stopchannels);
    // public FMOD.RESULT addFadePoint(System.UInt64 dspclock, System.Single volume)
    // Offset: 0xBBB954
    ::FMOD::RESULT addFadePoint(uint64_t dspclock, float volume);
    // public FMOD.RESULT setFadePointRamp(System.UInt64 dspclock, System.Single volume)
    // Offset: 0xBBB95C
    ::FMOD::RESULT setFadePointRamp(uint64_t dspclock, float volume);
    // public FMOD.RESULT removeFadePoints(System.UInt64 dspclock_start, System.UInt64 dspclock_end)
    // Offset: 0xBBB964
    ::FMOD::RESULT removeFadePoints(uint64_t dspclock_start, uint64_t dspclock_end);
    // public FMOD.RESULT getFadePoints(ref System.UInt32 numpoints, System.UInt64[] point_dspclock, System.Single[] point_volume)
    // Offset: 0xBBB96C
    ::FMOD::RESULT getFadePoints(ByRef<uint> numpoints, ::ArrayW<uint64_t> point_dspclock, ::ArrayW<float> point_volume);
    // public FMOD.RESULT getDSP(System.Int32 index, out FMOD.DSP dsp)
    // Offset: 0xBBB974
    ::FMOD::RESULT getDSP(int index, ByRef<::FMOD::DSP> dsp);
    // public FMOD.RESULT addDSP(System.Int32 index, FMOD.DSP dsp)
    // Offset: 0xBBB97C
    ::FMOD::RESULT addDSP(int index, ::FMOD::DSP dsp);
    // public FMOD.RESULT removeDSP(FMOD.DSP dsp)
    // Offset: 0xBBB984
    ::FMOD::RESULT removeDSP(::FMOD::DSP dsp);
    // public FMOD.RESULT getNumDSPs(out System.Int32 numdsps)
    // Offset: 0xBBB98C
    ::FMOD::RESULT getNumDSPs(ByRef<int> numdsps);
    // public FMOD.RESULT setDSPIndex(FMOD.DSP dsp, System.Int32 index)
    // Offset: 0xBBB994
    ::FMOD::RESULT setDSPIndex(::FMOD::DSP dsp, int index);
    // public FMOD.RESULT getDSPIndex(FMOD.DSP dsp, out System.Int32 index)
    // Offset: 0xBBB99C
    ::FMOD::RESULT getDSPIndex(::FMOD::DSP dsp, ByRef<int> index);
    // public FMOD.RESULT set3DAttributes(ref FMOD.VECTOR pos, ref FMOD.VECTOR vel, ref FMOD.VECTOR alt_pan_pos)
    // Offset: 0xBBB9A4
    ::FMOD::RESULT set3DAttributes(ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos);
    // public FMOD.RESULT get3DAttributes(out FMOD.VECTOR pos, out FMOD.VECTOR vel, out FMOD.VECTOR alt_pan_pos)
    // Offset: 0xBBB9AC
    ::FMOD::RESULT get3DAttributes(ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos);
    // public FMOD.RESULT set3DMinMaxDistance(System.Single mindistance, System.Single maxdistance)
    // Offset: 0xBBB9B4
    ::FMOD::RESULT set3DMinMaxDistance(float mindistance, float maxdistance);
    // public FMOD.RESULT get3DMinMaxDistance(out System.Single mindistance, out System.Single maxdistance)
    // Offset: 0xBBB9BC
    ::FMOD::RESULT get3DMinMaxDistance(ByRef<float> mindistance, ByRef<float> maxdistance);
    // public FMOD.RESULT set3DConeSettings(System.Single insideconeangle, System.Single outsideconeangle, System.Single outsidevolume)
    // Offset: 0xBBB9C4
    ::FMOD::RESULT set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume);
    // public FMOD.RESULT get3DConeSettings(out System.Single insideconeangle, out System.Single outsideconeangle, out System.Single outsidevolume)
    // Offset: 0xBBB9CC
    ::FMOD::RESULT get3DConeSettings(ByRef<float> insideconeangle, ByRef<float> outsideconeangle, ByRef<float> outsidevolume);
    // public FMOD.RESULT set3DConeOrientation(ref FMOD.VECTOR orientation)
    // Offset: 0xBBB9D4
    ::FMOD::RESULT set3DConeOrientation(ByRef<::FMOD::VECTOR> orientation);
    // public FMOD.RESULT get3DConeOrientation(out FMOD.VECTOR orientation)
    // Offset: 0xBBB9DC
    ::FMOD::RESULT get3DConeOrientation(ByRef<::FMOD::VECTOR> orientation);
    // public FMOD.RESULT set3DCustomRolloff(ref FMOD.VECTOR points, System.Int32 numpoints)
    // Offset: 0xBBB9E4
    ::FMOD::RESULT set3DCustomRolloff(ByRef<::FMOD::VECTOR> points, int numpoints);
    // public FMOD.RESULT get3DCustomRolloff(out System.IntPtr points, out System.Int32 numpoints)
    // Offset: 0xBBB9EC
    ::FMOD::RESULT get3DCustomRolloff(ByRef<::System::IntPtr> points, ByRef<int> numpoints);
    // public FMOD.RESULT set3DOcclusion(System.Single directocclusion, System.Single reverbocclusion)
    // Offset: 0xBBB9F4
    ::FMOD::RESULT set3DOcclusion(float directocclusion, float reverbocclusion);
    // public FMOD.RESULT get3DOcclusion(out System.Single directocclusion, out System.Single reverbocclusion)
    // Offset: 0xBBB9FC
    ::FMOD::RESULT get3DOcclusion(ByRef<float> directocclusion, ByRef<float> reverbocclusion);
    // public FMOD.RESULT set3DSpread(System.Single angle)
    // Offset: 0xBBBA04
    ::FMOD::RESULT set3DSpread(float angle);
    // public FMOD.RESULT get3DSpread(out System.Single angle)
    // Offset: 0xBBBA0C
    ::FMOD::RESULT get3DSpread(ByRef<float> angle);
    // public FMOD.RESULT set3DLevel(System.Single level)
    // Offset: 0xBBBA14
    ::FMOD::RESULT set3DLevel(float level);
    // public FMOD.RESULT get3DLevel(out System.Single level)
    // Offset: 0xBBBA1C
    ::FMOD::RESULT get3DLevel(ByRef<float> level);
    // public FMOD.RESULT set3DDopplerLevel(System.Single level)
    // Offset: 0xBBBA24
    ::FMOD::RESULT set3DDopplerLevel(float level);
    // public FMOD.RESULT get3DDopplerLevel(out System.Single level)
    // Offset: 0xBBBA2C
    ::FMOD::RESULT get3DDopplerLevel(ByRef<float> level);
    // public FMOD.RESULT set3DDistanceFilter(System.Boolean custom, System.Single customLevel, System.Single centerFreq)
    // Offset: 0xBBBA34
    ::FMOD::RESULT set3DDistanceFilter(bool custom, float customLevel, float centerFreq);
    // public FMOD.RESULT get3DDistanceFilter(out System.Boolean custom, out System.Single customLevel, out System.Single centerFreq)
    // Offset: 0xBBBA40
    ::FMOD::RESULT get3DDistanceFilter(ByRef<bool> custom, ByRef<float> customLevel, ByRef<float> centerFreq);
    // public FMOD.RESULT setUserData(System.IntPtr userdata)
    // Offset: 0xBBBA48
    ::FMOD::RESULT setUserData(::System::IntPtr userdata);
    // public FMOD.RESULT getUserData(out System.IntPtr userdata)
    // Offset: 0xBBBA50
    ::FMOD::RESULT getUserData(ByRef<::System::IntPtr> userdata);
    // static private FMOD.RESULT FMOD5_Channel_SetFrequency(System.IntPtr channel, System.Single frequency)
    // Offset: 0x2263118
    static ::FMOD::RESULT FMOD5_Channel_SetFrequency(::System::IntPtr channel, float frequency);
    // static private FMOD.RESULT FMOD5_Channel_GetFrequency(System.IntPtr channel, out System.Single frequency)
    // Offset: 0x22631CC
    static ::FMOD::RESULT FMOD5_Channel_GetFrequency(::System::IntPtr channel, ByRef<float> frequency);
    // static private FMOD.RESULT FMOD5_Channel_SetPriority(System.IntPtr channel, System.Int32 priority)
    // Offset: 0x2263280
    static ::FMOD::RESULT FMOD5_Channel_SetPriority(::System::IntPtr channel, int priority);
    // static private FMOD.RESULT FMOD5_Channel_GetPriority(System.IntPtr channel, out System.Int32 priority)
    // Offset: 0x2263334
    static ::FMOD::RESULT FMOD5_Channel_GetPriority(::System::IntPtr channel, ByRef<int> priority);
    // static private FMOD.RESULT FMOD5_Channel_SetPosition(System.IntPtr channel, System.UInt32 position, FMOD.TIMEUNIT postype)
    // Offset: 0x22633E8
    static ::FMOD::RESULT FMOD5_Channel_SetPosition(::System::IntPtr channel, uint position, ::FMOD::TIMEUNIT postype);
    // static private FMOD.RESULT FMOD5_Channel_GetPosition(System.IntPtr channel, out System.UInt32 position, FMOD.TIMEUNIT postype)
    // Offset: 0x22634A4
    static ::FMOD::RESULT FMOD5_Channel_GetPosition(::System::IntPtr channel, ByRef<uint> position, ::FMOD::TIMEUNIT postype);
    // static private FMOD.RESULT FMOD5_Channel_SetChannelGroup(System.IntPtr channel, System.IntPtr channelgroup)
    // Offset: 0x2263560
    static ::FMOD::RESULT FMOD5_Channel_SetChannelGroup(::System::IntPtr channel, ::System::IntPtr channelgroup);
    // static private FMOD.RESULT FMOD5_Channel_GetChannelGroup(System.IntPtr channel, out System.IntPtr channelgroup)
    // Offset: 0x2263614
    static ::FMOD::RESULT FMOD5_Channel_GetChannelGroup(::System::IntPtr channel, ByRef<::System::IntPtr> channelgroup);
    // static private FMOD.RESULT FMOD5_Channel_SetLoopCount(System.IntPtr channel, System.Int32 loopcount)
    // Offset: 0x22636C8
    static ::FMOD::RESULT FMOD5_Channel_SetLoopCount(::System::IntPtr channel, int loopcount);
    // static private FMOD.RESULT FMOD5_Channel_GetLoopCount(System.IntPtr channel, out System.Int32 loopcount)
    // Offset: 0x226377C
    static ::FMOD::RESULT FMOD5_Channel_GetLoopCount(::System::IntPtr channel, ByRef<int> loopcount);
    // static private FMOD.RESULT FMOD5_Channel_SetLoopPoints(System.IntPtr channel, System.UInt32 loopstart, FMOD.TIMEUNIT loopstarttype, System.UInt32 loopend, FMOD.TIMEUNIT loopendtype)
    // Offset: 0x2263830
    static ::FMOD::RESULT FMOD5_Channel_SetLoopPoints(::System::IntPtr channel, uint loopstart, ::FMOD::TIMEUNIT loopstarttype, uint loopend, ::FMOD::TIMEUNIT loopendtype);
    // static private FMOD.RESULT FMOD5_Channel_GetLoopPoints(System.IntPtr channel, out System.UInt32 loopstart, FMOD.TIMEUNIT loopstarttype, out System.UInt32 loopend, FMOD.TIMEUNIT loopendtype)
    // Offset: 0x2263904
    static ::FMOD::RESULT FMOD5_Channel_GetLoopPoints(::System::IntPtr channel, ByRef<uint> loopstart, ::FMOD::TIMEUNIT loopstarttype, ByRef<uint> loopend, ::FMOD::TIMEUNIT loopendtype);
    // static private FMOD.RESULT FMOD5_Channel_IsVirtual(System.IntPtr channel, out System.Boolean isvirtual)
    // Offset: 0x22639D8
    static ::FMOD::RESULT FMOD5_Channel_IsVirtual(::System::IntPtr channel, ByRef<bool> isvirtual);
    // static private FMOD.RESULT FMOD5_Channel_GetCurrentSound(System.IntPtr channel, out System.IntPtr sound)
    // Offset: 0x2263AA0
    static ::FMOD::RESULT FMOD5_Channel_GetCurrentSound(::System::IntPtr channel, ByRef<::System::IntPtr> sound);
    // static private FMOD.RESULT FMOD5_Channel_GetIndex(System.IntPtr channel, out System.Int32 index)
    // Offset: 0x2263B54
    static ::FMOD::RESULT FMOD5_Channel_GetIndex(::System::IntPtr channel, ByRef<int> index);
    // static private FMOD.RESULT FMOD5_Channel_GetSystemObject(System.IntPtr channel, out System.IntPtr system)
    // Offset: 0x2263C08
    static ::FMOD::RESULT FMOD5_Channel_GetSystemObject(::System::IntPtr channel, ByRef<::System::IntPtr> system);
    // static private FMOD.RESULT FMOD5_Channel_Stop(System.IntPtr channel)
    // Offset: 0x2263CBC
    static ::FMOD::RESULT FMOD5_Channel_Stop(::System::IntPtr channel);
    // static private FMOD.RESULT FMOD5_Channel_SetPaused(System.IntPtr channel, System.Boolean paused)
    // Offset: 0x2263D64
    static ::FMOD::RESULT FMOD5_Channel_SetPaused(::System::IntPtr channel, bool paused);
    // static private FMOD.RESULT FMOD5_Channel_GetPaused(System.IntPtr channel, out System.Boolean paused)
    // Offset: 0x2263E18
    static ::FMOD::RESULT FMOD5_Channel_GetPaused(::System::IntPtr channel, ByRef<bool> paused);
    // static private FMOD.RESULT FMOD5_Channel_SetVolume(System.IntPtr channel, System.Single volume)
    // Offset: 0x2263EE0
    static ::FMOD::RESULT FMOD5_Channel_SetVolume(::System::IntPtr channel, float volume);
    // static private FMOD.RESULT FMOD5_Channel_GetVolume(System.IntPtr channel, out System.Single volume)
    // Offset: 0x2263F94
    static ::FMOD::RESULT FMOD5_Channel_GetVolume(::System::IntPtr channel, ByRef<float> volume);
    // static private FMOD.RESULT FMOD5_Channel_SetVolumeRamp(System.IntPtr channel, System.Boolean ramp)
    // Offset: 0x226404C
    static ::FMOD::RESULT FMOD5_Channel_SetVolumeRamp(::System::IntPtr channel, bool ramp);
    // static private FMOD.RESULT FMOD5_Channel_GetVolumeRamp(System.IntPtr channel, out System.Boolean ramp)
    // Offset: 0x2264100
    static ::FMOD::RESULT FMOD5_Channel_GetVolumeRamp(::System::IntPtr channel, ByRef<bool> ramp);
    // static private FMOD.RESULT FMOD5_Channel_GetAudibility(System.IntPtr channel, out System.Single audibility)
    // Offset: 0x22641C8
    static ::FMOD::RESULT FMOD5_Channel_GetAudibility(::System::IntPtr channel, ByRef<float> audibility);
    // static private FMOD.RESULT FMOD5_Channel_SetPitch(System.IntPtr channel, System.Single pitch)
    // Offset: 0x226427C
    static ::FMOD::RESULT FMOD5_Channel_SetPitch(::System::IntPtr channel, float pitch);
    // static private FMOD.RESULT FMOD5_Channel_GetPitch(System.IntPtr channel, out System.Single pitch)
    // Offset: 0x2264330
    static ::FMOD::RESULT FMOD5_Channel_GetPitch(::System::IntPtr channel, ByRef<float> pitch);
    // static private FMOD.RESULT FMOD5_Channel_SetMute(System.IntPtr channel, System.Boolean mute)
    // Offset: 0x22643E8
    static ::FMOD::RESULT FMOD5_Channel_SetMute(::System::IntPtr channel, bool mute);
    // static private FMOD.RESULT FMOD5_Channel_GetMute(System.IntPtr channel, out System.Boolean mute)
    // Offset: 0x226449C
    static ::FMOD::RESULT FMOD5_Channel_GetMute(::System::IntPtr channel, ByRef<bool> mute);
    // static private FMOD.RESULT FMOD5_Channel_SetReverbProperties(System.IntPtr channel, System.Int32 instance, System.Single wet)
    // Offset: 0x2264564
    static ::FMOD::RESULT FMOD5_Channel_SetReverbProperties(::System::IntPtr channel, int instance, float wet);
    // static private FMOD.RESULT FMOD5_Channel_GetReverbProperties(System.IntPtr channel, System.Int32 instance, out System.Single wet)
    // Offset: 0x2264628
    static ::FMOD::RESULT FMOD5_Channel_GetReverbProperties(::System::IntPtr channel, int instance, ByRef<float> wet);
    // static private FMOD.RESULT FMOD5_Channel_SetLowPassGain(System.IntPtr channel, System.Single gain)
    // Offset: 0x22646E4
    static ::FMOD::RESULT FMOD5_Channel_SetLowPassGain(::System::IntPtr channel, float gain);
    // static private FMOD.RESULT FMOD5_Channel_GetLowPassGain(System.IntPtr channel, out System.Single gain)
    // Offset: 0x2264798
    static ::FMOD::RESULT FMOD5_Channel_GetLowPassGain(::System::IntPtr channel, ByRef<float> gain);
    // static private FMOD.RESULT FMOD5_Channel_SetMode(System.IntPtr channel, FMOD.MODE mode)
    // Offset: 0x226484C
    static ::FMOD::RESULT FMOD5_Channel_SetMode(::System::IntPtr channel, ::FMOD::MODE mode);
    // static private FMOD.RESULT FMOD5_Channel_GetMode(System.IntPtr channel, out FMOD.MODE mode)
    // Offset: 0x2264900
    static ::FMOD::RESULT FMOD5_Channel_GetMode(::System::IntPtr channel, ByRef<::FMOD::MODE> mode);
    // static private FMOD.RESULT FMOD5_Channel_SetCallback(System.IntPtr channel, FMOD.CHANNEL_CALLBACK callback)
    // Offset: 0x22649B4
    static ::FMOD::RESULT FMOD5_Channel_SetCallback(::System::IntPtr channel, ::FMOD::CHANNEL_CALLBACK* callback);
    // static private FMOD.RESULT FMOD5_Channel_IsPlaying(System.IntPtr channel, out System.Boolean isplaying)
    // Offset: 0x2264A70
    static ::FMOD::RESULT FMOD5_Channel_IsPlaying(::System::IntPtr channel, ByRef<bool> isplaying);
    // static private FMOD.RESULT FMOD5_Channel_SetPan(System.IntPtr channel, System.Single pan)
    // Offset: 0x2264B38
    static ::FMOD::RESULT FMOD5_Channel_SetPan(::System::IntPtr channel, float pan);
    // static private FMOD.RESULT FMOD5_Channel_SetMixLevelsOutput(System.IntPtr channel, System.Single frontleft, System.Single frontright, System.Single center, System.Single lfe, System.Single surroundleft, System.Single surroundright, System.Single backleft, System.Single backright)
    // Offset: 0x2264BEC
    static ::FMOD::RESULT FMOD5_Channel_SetMixLevelsOutput(::System::IntPtr channel, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright);
    // static private FMOD.RESULT FMOD5_Channel_SetMixLevelsInput(System.IntPtr channel, System.Single[] levels, System.Int32 numlevels)
    // Offset: 0x2264CF0
    static ::FMOD::RESULT FMOD5_Channel_SetMixLevelsInput(::System::IntPtr channel, ::ArrayW<float> levels, int numlevels);
    // static private FMOD.RESULT FMOD5_Channel_SetMixMatrix(System.IntPtr channel, System.Single[] matrix, System.Int32 outchannels, System.Int32 inchannels, System.Int32 inchannel_hop)
    // Offset: 0x2264DB4
    static ::FMOD::RESULT FMOD5_Channel_SetMixMatrix(::System::IntPtr channel, ::ArrayW<float> matrix, int outchannels, int inchannels, int inchannel_hop);
    // static private FMOD.RESULT FMOD5_Channel_GetMixMatrix(System.IntPtr channel, System.Single[] matrix, out System.Int32 outchannels, out System.Int32 inchannels, System.Int32 inchannel_hop)
    // Offset: 0x2264E90
    static ::FMOD::RESULT FMOD5_Channel_GetMixMatrix(::System::IntPtr channel, ::ArrayW<float> matrix, ByRef<int> outchannels, ByRef<int> inchannels, int inchannel_hop);
    // static private FMOD.RESULT FMOD5_Channel_GetDSPClock(System.IntPtr channel, out System.UInt64 dspclock, out System.UInt64 parentclock)
    // Offset: 0x2264F6C
    static ::FMOD::RESULT FMOD5_Channel_GetDSPClock(::System::IntPtr channel, ByRef<uint64_t> dspclock, ByRef<uint64_t> parentclock);
    // static private FMOD.RESULT FMOD5_Channel_SetDelay(System.IntPtr channel, System.UInt64 dspclock_start, System.UInt64 dspclock_end, System.Boolean stopchannels)
    // Offset: 0x226502C
    static ::FMOD::RESULT FMOD5_Channel_SetDelay(::System::IntPtr channel, uint64_t dspclock_start, uint64_t dspclock_end, bool stopchannels);
    // static private FMOD.RESULT FMOD5_Channel_GetDelay(System.IntPtr channel, out System.UInt64 dspclock_start, out System.UInt64 dspclock_end, out System.Boolean stopchannels)
    // Offset: 0x22650F8
    static ::FMOD::RESULT FMOD5_Channel_GetDelay(::System::IntPtr channel, ByRef<uint64_t> dspclock_start, ByRef<uint64_t> dspclock_end, ByRef<bool> stopchannels);
    // static private FMOD.RESULT FMOD5_Channel_AddFadePoint(System.IntPtr channel, System.UInt64 dspclock, System.Single volume)
    // Offset: 0x22651D8
    static ::FMOD::RESULT FMOD5_Channel_AddFadePoint(::System::IntPtr channel, uint64_t dspclock, float volume);
    // static private FMOD.RESULT FMOD5_Channel_SetFadePointRamp(System.IntPtr channel, System.UInt64 dspclock, System.Single volume)
    // Offset: 0x226529C
    static ::FMOD::RESULT FMOD5_Channel_SetFadePointRamp(::System::IntPtr channel, uint64_t dspclock, float volume);
    // static private FMOD.RESULT FMOD5_Channel_RemoveFadePoints(System.IntPtr channel, System.UInt64 dspclock_start, System.UInt64 dspclock_end)
    // Offset: 0x2265360
    static ::FMOD::RESULT FMOD5_Channel_RemoveFadePoints(::System::IntPtr channel, uint64_t dspclock_start, uint64_t dspclock_end);
    // static private FMOD.RESULT FMOD5_Channel_GetFadePoints(System.IntPtr channel, ref System.UInt32 numpoints, System.UInt64[] point_dspclock, System.Single[] point_volume)
    // Offset: 0x226541C
    static ::FMOD::RESULT FMOD5_Channel_GetFadePoints(::System::IntPtr channel, ByRef<uint> numpoints, ::ArrayW<uint64_t> point_dspclock, ::ArrayW<float> point_volume);
    // static private FMOD.RESULT FMOD5_Channel_GetDSP(System.IntPtr channel, System.Int32 index, out System.IntPtr dsp)
    // Offset: 0x22654F8
    static ::FMOD::RESULT FMOD5_Channel_GetDSP(::System::IntPtr channel, int index, ByRef<::System::IntPtr> dsp);
    // static private FMOD.RESULT FMOD5_Channel_AddDSP(System.IntPtr channel, System.Int32 index, System.IntPtr dsp)
    // Offset: 0x22655B0
    static ::FMOD::RESULT FMOD5_Channel_AddDSP(::System::IntPtr channel, int index, ::System::IntPtr dsp);
    // static private FMOD.RESULT FMOD5_Channel_RemoveDSP(System.IntPtr channel, System.IntPtr dsp)
    // Offset: 0x2265668
    static ::FMOD::RESULT FMOD5_Channel_RemoveDSP(::System::IntPtr channel, ::System::IntPtr dsp);
    // static private FMOD.RESULT FMOD5_Channel_GetNumDSPs(System.IntPtr channel, out System.Int32 numdsps)
    // Offset: 0x226571C
    static ::FMOD::RESULT FMOD5_Channel_GetNumDSPs(::System::IntPtr channel, ByRef<int> numdsps);
    // static private FMOD.RESULT FMOD5_Channel_SetDSPIndex(System.IntPtr channel, System.IntPtr dsp, System.Int32 index)
    // Offset: 0x22657D0
    static ::FMOD::RESULT FMOD5_Channel_SetDSPIndex(::System::IntPtr channel, ::System::IntPtr dsp, int index);
    // static private FMOD.RESULT FMOD5_Channel_GetDSPIndex(System.IntPtr channel, System.IntPtr dsp, out System.Int32 index)
    // Offset: 0x226588C
    static ::FMOD::RESULT FMOD5_Channel_GetDSPIndex(::System::IntPtr channel, ::System::IntPtr dsp, ByRef<int> index);
    // static private FMOD.RESULT FMOD5_Channel_Set3DAttributes(System.IntPtr channel, ref FMOD.VECTOR pos, ref FMOD.VECTOR vel, ref FMOD.VECTOR alt_pan_pos)
    // Offset: 0x2265948
    static ::FMOD::RESULT FMOD5_Channel_Set3DAttributes(::System::IntPtr channel, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos);
    // static private FMOD.RESULT FMOD5_Channel_Get3DAttributes(System.IntPtr channel, out FMOD.VECTOR pos, out FMOD.VECTOR vel, out FMOD.VECTOR alt_pan_pos)
    // Offset: 0x2265A14
    static ::FMOD::RESULT FMOD5_Channel_Get3DAttributes(::System::IntPtr channel, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos);
    // static private FMOD.RESULT FMOD5_Channel_Set3DMinMaxDistance(System.IntPtr channel, System.Single mindistance, System.Single maxdistance)
    // Offset: 0x2265AE0
    static ::FMOD::RESULT FMOD5_Channel_Set3DMinMaxDistance(::System::IntPtr channel, float mindistance, float maxdistance);
    // static private FMOD.RESULT FMOD5_Channel_Get3DMinMaxDistance(System.IntPtr channel, out System.Single mindistance, out System.Single maxdistance)
    // Offset: 0x2265B9C
    static ::FMOD::RESULT FMOD5_Channel_Get3DMinMaxDistance(::System::IntPtr channel, ByRef<float> mindistance, ByRef<float> maxdistance);
    // static private FMOD.RESULT FMOD5_Channel_Set3DConeSettings(System.IntPtr channel, System.Single insideconeangle, System.Single outsideconeangle, System.Single outsidevolume)
    // Offset: 0x2265C58
    static ::FMOD::RESULT FMOD5_Channel_Set3DConeSettings(::System::IntPtr channel, float insideconeangle, float outsideconeangle, float outsidevolume);
    // static private FMOD.RESULT FMOD5_Channel_Get3DConeSettings(System.IntPtr channel, out System.Single insideconeangle, out System.Single outsideconeangle, out System.Single outsidevolume)
    // Offset: 0x2265D24
    static ::FMOD::RESULT FMOD5_Channel_Get3DConeSettings(::System::IntPtr channel, ByRef<float> insideconeangle, ByRef<float> outsideconeangle, ByRef<float> outsidevolume);
    // static private FMOD.RESULT FMOD5_Channel_Set3DConeOrientation(System.IntPtr channel, ref FMOD.VECTOR orientation)
    // Offset: 0x2265DF0
    static ::FMOD::RESULT FMOD5_Channel_Set3DConeOrientation(::System::IntPtr channel, ByRef<::FMOD::VECTOR> orientation);
    // static private FMOD.RESULT FMOD5_Channel_Get3DConeOrientation(System.IntPtr channel, out FMOD.VECTOR orientation)
    // Offset: 0x2265EA4
    static ::FMOD::RESULT FMOD5_Channel_Get3DConeOrientation(::System::IntPtr channel, ByRef<::FMOD::VECTOR> orientation);
    // static private FMOD.RESULT FMOD5_Channel_Set3DCustomRolloff(System.IntPtr channel, ref FMOD.VECTOR points, System.Int32 numpoints)
    // Offset: 0x2265F58
    static ::FMOD::RESULT FMOD5_Channel_Set3DCustomRolloff(::System::IntPtr channel, ByRef<::FMOD::VECTOR> points, int numpoints);
    // static private FMOD.RESULT FMOD5_Channel_Get3DCustomRolloff(System.IntPtr channel, out System.IntPtr points, out System.Int32 numpoints)
    // Offset: 0x2266014
    static ::FMOD::RESULT FMOD5_Channel_Get3DCustomRolloff(::System::IntPtr channel, ByRef<::System::IntPtr> points, ByRef<int> numpoints);
    // static private FMOD.RESULT FMOD5_Channel_Set3DOcclusion(System.IntPtr channel, System.Single directocclusion, System.Single reverbocclusion)
    // Offset: 0x22660D0
    static ::FMOD::RESULT FMOD5_Channel_Set3DOcclusion(::System::IntPtr channel, float directocclusion, float reverbocclusion);
    // static private FMOD.RESULT FMOD5_Channel_Get3DOcclusion(System.IntPtr channel, out System.Single directocclusion, out System.Single reverbocclusion)
    // Offset: 0x226618C
    static ::FMOD::RESULT FMOD5_Channel_Get3DOcclusion(::System::IntPtr channel, ByRef<float> directocclusion, ByRef<float> reverbocclusion);
    // static private FMOD.RESULT FMOD5_Channel_Set3DSpread(System.IntPtr channel, System.Single angle)
    // Offset: 0x2266248
    static ::FMOD::RESULT FMOD5_Channel_Set3DSpread(::System::IntPtr channel, float angle);
    // static private FMOD.RESULT FMOD5_Channel_Get3DSpread(System.IntPtr channel, out System.Single angle)
    // Offset: 0x22662FC
    static ::FMOD::RESULT FMOD5_Channel_Get3DSpread(::System::IntPtr channel, ByRef<float> angle);
    // static private FMOD.RESULT FMOD5_Channel_Set3DLevel(System.IntPtr channel, System.Single level)
    // Offset: 0x22663B0
    static ::FMOD::RESULT FMOD5_Channel_Set3DLevel(::System::IntPtr channel, float level);
    // static private FMOD.RESULT FMOD5_Channel_Get3DLevel(System.IntPtr channel, out System.Single level)
    // Offset: 0x2266464
    static ::FMOD::RESULT FMOD5_Channel_Get3DLevel(::System::IntPtr channel, ByRef<float> level);
    // static private FMOD.RESULT FMOD5_Channel_Set3DDopplerLevel(System.IntPtr channel, System.Single level)
    // Offset: 0x2266518
    static ::FMOD::RESULT FMOD5_Channel_Set3DDopplerLevel(::System::IntPtr channel, float level);
    // static private FMOD.RESULT FMOD5_Channel_Get3DDopplerLevel(System.IntPtr channel, out System.Single level)
    // Offset: 0x22665CC
    static ::FMOD::RESULT FMOD5_Channel_Get3DDopplerLevel(::System::IntPtr channel, ByRef<float> level);
    // static private FMOD.RESULT FMOD5_Channel_Set3DDistanceFilter(System.IntPtr channel, System.Boolean custom, System.Single customLevel, System.Single centerFreq)
    // Offset: 0x2266684
    static ::FMOD::RESULT FMOD5_Channel_Set3DDistanceFilter(::System::IntPtr channel, bool custom, float customLevel, float centerFreq);
    // static private FMOD.RESULT FMOD5_Channel_Get3DDistanceFilter(System.IntPtr channel, out System.Boolean custom, out System.Single customLevel, out System.Single centerFreq)
    // Offset: 0x2266750
    static ::FMOD::RESULT FMOD5_Channel_Get3DDistanceFilter(::System::IntPtr channel, ByRef<bool> custom, ByRef<float> customLevel, ByRef<float> centerFreq);
    // static private FMOD.RESULT FMOD5_Channel_SetUserData(System.IntPtr channel, System.IntPtr userdata)
    // Offset: 0x2266830
    static ::FMOD::RESULT FMOD5_Channel_SetUserData(::System::IntPtr channel, ::System::IntPtr userdata);
    // static private FMOD.RESULT FMOD5_Channel_GetUserData(System.IntPtr channel, out System.IntPtr userdata)
    // Offset: 0x22668E4
    static ::FMOD::RESULT FMOD5_Channel_GetUserData(::System::IntPtr channel, ByRef<::System::IntPtr> userdata);
    // public System.Boolean hasHandle()
    // Offset: 0xBBBA58
    bool hasHandle();
    // public System.Void clearHandle()
    // Offset: 0xBBBA60
    void clearHandle();
  }; // FMOD.Channel
  #pragma pack(pop)
  static check_size<sizeof(Channel), 0 + sizeof(::System::IntPtr)> __FMOD_ChannelSizeCheck;
  static_assert(sizeof(Channel) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::Channel::setFrequency
// Il2CppName: setFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(float)>(&FMOD::Channel::setFrequency)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getFrequency
// Il2CppName: getFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<float>)>(&FMOD::Channel::getFrequency)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setPriority
// Il2CppName: setPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(int)>(&FMOD::Channel::setPriority)> {
  static const MethodInfo* get() {
    static auto* priority = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{priority});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getPriority
// Il2CppName: getPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<int>)>(&FMOD::Channel::getPriority)> {
  static const MethodInfo* get() {
    static auto* priority = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{priority});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setPosition
// Il2CppName: setPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(uint, ::FMOD::TIMEUNIT)>(&FMOD::Channel::setPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* postype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, postype});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getPosition
// Il2CppName: getPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<uint>, ::FMOD::TIMEUNIT)>(&FMOD::Channel::getPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* postype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, postype});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setChannelGroup
// Il2CppName: setChannelGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(::FMOD::ChannelGroup)>(&FMOD::Channel::setChannelGroup)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("FMOD", "ChannelGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setChannelGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getChannelGroup
// Il2CppName: getChannelGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<::FMOD::ChannelGroup>)>(&FMOD::Channel::getChannelGroup)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("FMOD", "ChannelGroup")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getChannelGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setLoopCount
// Il2CppName: setLoopCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(int)>(&FMOD::Channel::setLoopCount)> {
  static const MethodInfo* get() {
    static auto* loopcount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setLoopCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopcount});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getLoopCount
// Il2CppName: getLoopCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<int>)>(&FMOD::Channel::getLoopCount)> {
  static const MethodInfo* get() {
    static auto* loopcount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getLoopCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopcount});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setLoopPoints
// Il2CppName: setLoopPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(uint, ::FMOD::TIMEUNIT, uint, ::FMOD::TIMEUNIT)>(&FMOD::Channel::setLoopPoints)> {
  static const MethodInfo* get() {
    static auto* loopstart = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* loopstarttype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    static auto* loopend = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* loopendtype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setLoopPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopstart, loopstarttype, loopend, loopendtype});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getLoopPoints
// Il2CppName: getLoopPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<uint>, ::FMOD::TIMEUNIT, ByRef<uint>, ::FMOD::TIMEUNIT)>(&FMOD::Channel::getLoopPoints)> {
  static const MethodInfo* get() {
    static auto* loopstart = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* loopstarttype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    static auto* loopend = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* loopendtype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getLoopPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopstart, loopstarttype, loopend, loopendtype});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::isVirtual
// Il2CppName: isVirtual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<bool>)>(&FMOD::Channel::isVirtual)> {
  static const MethodInfo* get() {
    static auto* isvirtual = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "isVirtual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isvirtual});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getCurrentSound
// Il2CppName: getCurrentSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<::FMOD::Sound>)>(&FMOD::Channel::getCurrentSound)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("FMOD", "Sound")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getCurrentSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getIndex
// Il2CppName: getIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<int>)>(&FMOD::Channel::getIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getSystemObject
// Il2CppName: getSystemObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<::FMOD::System>)>(&FMOD::Channel::getSystemObject)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("FMOD", "System")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getSystemObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::stop
// Il2CppName: stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)()>(&FMOD::Channel::stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setPaused
// Il2CppName: setPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(bool)>(&FMOD::Channel::setPaused)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getPaused
// Il2CppName: getPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<bool>)>(&FMOD::Channel::getPaused)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setVolume
// Il2CppName: setVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(float)>(&FMOD::Channel::setVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getVolume
// Il2CppName: getVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<float>)>(&FMOD::Channel::getVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setVolumeRamp
// Il2CppName: setVolumeRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(bool)>(&FMOD::Channel::setVolumeRamp)> {
  static const MethodInfo* get() {
    static auto* ramp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setVolumeRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ramp});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getVolumeRamp
// Il2CppName: getVolumeRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<bool>)>(&FMOD::Channel::getVolumeRamp)> {
  static const MethodInfo* get() {
    static auto* ramp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getVolumeRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ramp});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getAudibility
// Il2CppName: getAudibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<float>)>(&FMOD::Channel::getAudibility)> {
  static const MethodInfo* get() {
    static auto* audibility = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getAudibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audibility});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setPitch
// Il2CppName: setPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(float)>(&FMOD::Channel::setPitch)> {
  static const MethodInfo* get() {
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitch});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getPitch
// Il2CppName: getPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<float>)>(&FMOD::Channel::getPitch)> {
  static const MethodInfo* get() {
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitch});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setMute
// Il2CppName: setMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(bool)>(&FMOD::Channel::setMute)> {
  static const MethodInfo* get() {
    static auto* mute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mute});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getMute
// Il2CppName: getMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<bool>)>(&FMOD::Channel::getMute)> {
  static const MethodInfo* get() {
    static auto* mute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mute});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setReverbProperties
// Il2CppName: setReverbProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(int, float)>(&FMOD::Channel::setReverbProperties)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wet = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setReverbProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, wet});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getReverbProperties
// Il2CppName: getReverbProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(int, ByRef<float>)>(&FMOD::Channel::getReverbProperties)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wet = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getReverbProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, wet});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setLowPassGain
// Il2CppName: setLowPassGain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(float)>(&FMOD::Channel::setLowPassGain)> {
  static const MethodInfo* get() {
    static auto* gain = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setLowPassGain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gain});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getLowPassGain
// Il2CppName: getLowPassGain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<float>)>(&FMOD::Channel::getLowPassGain)> {
  static const MethodInfo* get() {
    static auto* gain = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getLowPassGain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gain});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setMode
// Il2CppName: setMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(::FMOD::MODE)>(&FMOD::Channel::setMode)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getMode
// Il2CppName: getMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<::FMOD::MODE>)>(&FMOD::Channel::getMode)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setCallback
// Il2CppName: setCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(::FMOD::CHANNEL_CALLBACK*)>(&FMOD::Channel::setCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD", "CHANNEL_CALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::isPlaying
// Il2CppName: isPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<bool>)>(&FMOD::Channel::isPlaying)> {
  static const MethodInfo* get() {
    static auto* isplaying = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "isPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isplaying});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setPan
// Il2CppName: setPan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(float)>(&FMOD::Channel::setPan)> {
  static const MethodInfo* get() {
    static auto* pan = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setPan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pan});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setMixLevelsOutput
// Il2CppName: setMixLevelsOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(float, float, float, float, float, float, float, float)>(&FMOD::Channel::setMixLevelsOutput)> {
  static const MethodInfo* get() {
    static auto* frontleft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* frontright = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lfe = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* surroundleft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* surroundright = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* backleft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* backright = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setMixLevelsOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setMixLevelsInput
// Il2CppName: setMixLevelsInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(::ArrayW<float>, int)>(&FMOD::Channel::setMixLevelsInput)> {
  static const MethodInfo* get() {
    static auto* levels = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* numlevels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setMixLevelsInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{levels, numlevels});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setMixMatrix
// Il2CppName: setMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(::ArrayW<float>, int, int, int)>(&FMOD::Channel::setMixMatrix)> {
  static const MethodInfo* get() {
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inchannel_hop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix, outchannels, inchannels, inchannel_hop});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getMixMatrix
// Il2CppName: getMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(::ArrayW<float>, ByRef<int>, ByRef<int>, int)>(&FMOD::Channel::getMixMatrix)> {
  static const MethodInfo* get() {
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* inchannel_hop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix, outchannels, inchannels, inchannel_hop});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getDSPClock
// Il2CppName: getDSPClock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<uint64_t>, ByRef<uint64_t>)>(&FMOD::Channel::getDSPClock)> {
  static const MethodInfo* get() {
    static auto* dspclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* parentclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getDSPClock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock, parentclock});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setDelay
// Il2CppName: setDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(uint64_t, uint64_t, bool)>(&FMOD::Channel::setDelay)> {
  static const MethodInfo* get() {
    static auto* dspclock_start = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* dspclock_end = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* stopchannels = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock_start, dspclock_end, stopchannels});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getDelay
// Il2CppName: getDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<uint64_t>, ByRef<uint64_t>, ByRef<bool>)>(&FMOD::Channel::getDelay)> {
  static const MethodInfo* get() {
    static auto* dspclock_start = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* dspclock_end = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* stopchannels = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock_start, dspclock_end, stopchannels});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::addFadePoint
// Il2CppName: addFadePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(uint64_t, float)>(&FMOD::Channel::addFadePoint)> {
  static const MethodInfo* get() {
    static auto* dspclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "addFadePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock, volume});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setFadePointRamp
// Il2CppName: setFadePointRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(uint64_t, float)>(&FMOD::Channel::setFadePointRamp)> {
  static const MethodInfo* get() {
    static auto* dspclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setFadePointRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock, volume});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::removeFadePoints
// Il2CppName: removeFadePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(uint64_t, uint64_t)>(&FMOD::Channel::removeFadePoints)> {
  static const MethodInfo* get() {
    static auto* dspclock_start = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* dspclock_end = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "removeFadePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock_start, dspclock_end});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getFadePoints
// Il2CppName: getFadePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<uint>, ::ArrayW<uint64_t>, ::ArrayW<float>)>(&FMOD::Channel::getFadePoints)> {
  static const MethodInfo* get() {
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* point_dspclock = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* point_volume = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getFadePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numpoints, point_dspclock, point_volume});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getDSP
// Il2CppName: getDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(int, ByRef<::FMOD::DSP>)>(&FMOD::Channel::getDSP)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::addDSP
// Il2CppName: addDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(int, ::FMOD::DSP)>(&FMOD::Channel::addDSP)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "addDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::removeDSP
// Il2CppName: removeDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(::FMOD::DSP)>(&FMOD::Channel::removeDSP)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "removeDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getNumDSPs
// Il2CppName: getNumDSPs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<int>)>(&FMOD::Channel::getNumDSPs)> {
  static const MethodInfo* get() {
    static auto* numdsps = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getNumDSPs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numdsps});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setDSPIndex
// Il2CppName: setDSPIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(::FMOD::DSP, int)>(&FMOD::Channel::setDSPIndex)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setDSPIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getDSPIndex
// Il2CppName: getDSPIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(::FMOD::DSP, ByRef<int>)>(&FMOD::Channel::getDSPIndex)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getDSPIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::set3DAttributes
// Il2CppName: set3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::Channel::set3DAttributes)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* alt_pan_pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "set3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, vel, alt_pan_pos});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::get3DAttributes
// Il2CppName: get3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::Channel::get3DAttributes)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* alt_pan_pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "get3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, vel, alt_pan_pos});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::set3DMinMaxDistance
// Il2CppName: set3DMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(float, float)>(&FMOD::Channel::set3DMinMaxDistance)> {
  static const MethodInfo* get() {
    static auto* mindistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxdistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "set3DMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mindistance, maxdistance});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::get3DMinMaxDistance
// Il2CppName: get3DMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<float>, ByRef<float>)>(&FMOD::Channel::get3DMinMaxDistance)> {
  static const MethodInfo* get() {
    static auto* mindistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* maxdistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "get3DMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mindistance, maxdistance});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::set3DConeSettings
// Il2CppName: set3DConeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(float, float, float)>(&FMOD::Channel::set3DConeSettings)> {
  static const MethodInfo* get() {
    static auto* insideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* outsideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* outsidevolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "set3DConeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{insideconeangle, outsideconeangle, outsidevolume});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::get3DConeSettings
// Il2CppName: get3DConeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<float>, ByRef<float>, ByRef<float>)>(&FMOD::Channel::get3DConeSettings)> {
  static const MethodInfo* get() {
    static auto* insideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* outsideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* outsidevolume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "get3DConeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{insideconeangle, outsideconeangle, outsidevolume});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::set3DConeOrientation
// Il2CppName: set3DConeOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<::FMOD::VECTOR>)>(&FMOD::Channel::set3DConeOrientation)> {
  static const MethodInfo* get() {
    static auto* orientation = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "set3DConeOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{orientation});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::get3DConeOrientation
// Il2CppName: get3DConeOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<::FMOD::VECTOR>)>(&FMOD::Channel::get3DConeOrientation)> {
  static const MethodInfo* get() {
    static auto* orientation = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "get3DConeOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{orientation});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::set3DCustomRolloff
// Il2CppName: set3DCustomRolloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<::FMOD::VECTOR>, int)>(&FMOD::Channel::set3DCustomRolloff)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "set3DCustomRolloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, numpoints});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::get3DCustomRolloff
// Il2CppName: get3DCustomRolloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<::System::IntPtr>, ByRef<int>)>(&FMOD::Channel::get3DCustomRolloff)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "get3DCustomRolloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, numpoints});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::set3DOcclusion
// Il2CppName: set3DOcclusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(float, float)>(&FMOD::Channel::set3DOcclusion)> {
  static const MethodInfo* get() {
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "set3DOcclusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{directocclusion, reverbocclusion});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::get3DOcclusion
// Il2CppName: get3DOcclusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<float>, ByRef<float>)>(&FMOD::Channel::get3DOcclusion)> {
  static const MethodInfo* get() {
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "get3DOcclusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{directocclusion, reverbocclusion});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::set3DSpread
// Il2CppName: set3DSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(float)>(&FMOD::Channel::set3DSpread)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "set3DSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::get3DSpread
// Il2CppName: get3DSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<float>)>(&FMOD::Channel::get3DSpread)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "get3DSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::set3DLevel
// Il2CppName: set3DLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(float)>(&FMOD::Channel::set3DLevel)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "set3DLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::get3DLevel
// Il2CppName: get3DLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<float>)>(&FMOD::Channel::get3DLevel)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "get3DLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::set3DDopplerLevel
// Il2CppName: set3DDopplerLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(float)>(&FMOD::Channel::set3DDopplerLevel)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "set3DDopplerLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::get3DDopplerLevel
// Il2CppName: get3DDopplerLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<float>)>(&FMOD::Channel::get3DDopplerLevel)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "get3DDopplerLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::set3DDistanceFilter
// Il2CppName: set3DDistanceFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(bool, float, float)>(&FMOD::Channel::set3DDistanceFilter)> {
  static const MethodInfo* get() {
    static auto* custom = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* customLevel = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* centerFreq = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "set3DDistanceFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{custom, customLevel, centerFreq});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::get3DDistanceFilter
// Il2CppName: get3DDistanceFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<bool>, ByRef<float>, ByRef<float>)>(&FMOD::Channel::get3DDistanceFilter)> {
  static const MethodInfo* get() {
    static auto* custom = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* customLevel = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* centerFreq = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "get3DDistanceFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{custom, customLevel, centerFreq});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::setUserData
// Il2CppName: setUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(::System::IntPtr)>(&FMOD::Channel::setUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "setUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::getUserData
// Il2CppName: getUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Channel::*)(ByRef<::System::IntPtr>)>(&FMOD::Channel::getUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "getUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetFrequency
// Il2CppName: FMOD5_Channel_SetFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::Channel::FMOD5_Channel_SetFrequency)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, frequency});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetFrequency
// Il2CppName: FMOD5_Channel_GetFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::Channel::FMOD5_Channel_GetFrequency)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, frequency});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetPriority
// Il2CppName: FMOD5_Channel_SetPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int)>(&FMOD::Channel::FMOD5_Channel_SetPriority)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* priority = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, priority});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetPriority
// Il2CppName: FMOD5_Channel_GetPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Channel::FMOD5_Channel_GetPriority)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* priority = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, priority});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetPosition
// Il2CppName: FMOD5_Channel_SetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint, ::FMOD::TIMEUNIT)>(&FMOD::Channel::FMOD5_Channel_SetPosition)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* postype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, position, postype});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetPosition
// Il2CppName: FMOD5_Channel_GetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint>, ::FMOD::TIMEUNIT)>(&FMOD::Channel::FMOD5_Channel_GetPosition)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* postype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, position, postype});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetChannelGroup
// Il2CppName: FMOD5_Channel_SetChannelGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::Channel::FMOD5_Channel_SetChannelGroup)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetChannelGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, channelgroup});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetChannelGroup
// Il2CppName: FMOD5_Channel_GetChannelGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Channel::FMOD5_Channel_GetChannelGroup)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetChannelGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, channelgroup});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetLoopCount
// Il2CppName: FMOD5_Channel_SetLoopCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int)>(&FMOD::Channel::FMOD5_Channel_SetLoopCount)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* loopcount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetLoopCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, loopcount});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetLoopCount
// Il2CppName: FMOD5_Channel_GetLoopCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Channel::FMOD5_Channel_GetLoopCount)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* loopcount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetLoopCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, loopcount});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetLoopPoints
// Il2CppName: FMOD5_Channel_SetLoopPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint, ::FMOD::TIMEUNIT, uint, ::FMOD::TIMEUNIT)>(&FMOD::Channel::FMOD5_Channel_SetLoopPoints)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* loopstart = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* loopstarttype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    static auto* loopend = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* loopendtype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetLoopPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, loopstart, loopstarttype, loopend, loopendtype});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetLoopPoints
// Il2CppName: FMOD5_Channel_GetLoopPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint>, ::FMOD::TIMEUNIT, ByRef<uint>, ::FMOD::TIMEUNIT)>(&FMOD::Channel::FMOD5_Channel_GetLoopPoints)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* loopstart = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* loopstarttype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    static auto* loopend = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* loopendtype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetLoopPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, loopstart, loopstarttype, loopend, loopendtype});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_IsVirtual
// Il2CppName: FMOD5_Channel_IsVirtual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::Channel::FMOD5_Channel_IsVirtual)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* isvirtual = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_IsVirtual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, isvirtual});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetCurrentSound
// Il2CppName: FMOD5_Channel_GetCurrentSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Channel::FMOD5_Channel_GetCurrentSound)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetCurrentSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, sound});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetIndex
// Il2CppName: FMOD5_Channel_GetIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Channel::FMOD5_Channel_GetIndex)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, index});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetSystemObject
// Il2CppName: FMOD5_Channel_GetSystemObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Channel::FMOD5_Channel_GetSystemObject)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetSystemObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, system});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Stop
// Il2CppName: FMOD5_Channel_Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Channel::FMOD5_Channel_Stop)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetPaused
// Il2CppName: FMOD5_Channel_SetPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool)>(&FMOD::Channel::FMOD5_Channel_SetPaused)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, paused});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetPaused
// Il2CppName: FMOD5_Channel_GetPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::Channel::FMOD5_Channel_GetPaused)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, paused});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetVolume
// Il2CppName: FMOD5_Channel_SetVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::Channel::FMOD5_Channel_SetVolume)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, volume});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetVolume
// Il2CppName: FMOD5_Channel_GetVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::Channel::FMOD5_Channel_GetVolume)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, volume});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetVolumeRamp
// Il2CppName: FMOD5_Channel_SetVolumeRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool)>(&FMOD::Channel::FMOD5_Channel_SetVolumeRamp)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* ramp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetVolumeRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, ramp});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetVolumeRamp
// Il2CppName: FMOD5_Channel_GetVolumeRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::Channel::FMOD5_Channel_GetVolumeRamp)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* ramp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetVolumeRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, ramp});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetAudibility
// Il2CppName: FMOD5_Channel_GetAudibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::Channel::FMOD5_Channel_GetAudibility)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* audibility = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetAudibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, audibility});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetPitch
// Il2CppName: FMOD5_Channel_SetPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::Channel::FMOD5_Channel_SetPitch)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, pitch});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetPitch
// Il2CppName: FMOD5_Channel_GetPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::Channel::FMOD5_Channel_GetPitch)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, pitch});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetMute
// Il2CppName: FMOD5_Channel_SetMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool)>(&FMOD::Channel::FMOD5_Channel_SetMute)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, mute});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetMute
// Il2CppName: FMOD5_Channel_GetMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::Channel::FMOD5_Channel_GetMute)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, mute});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetReverbProperties
// Il2CppName: FMOD5_Channel_SetReverbProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, float)>(&FMOD::Channel::FMOD5_Channel_SetReverbProperties)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wet = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetReverbProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, instance, wet});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetReverbProperties
// Il2CppName: FMOD5_Channel_GetReverbProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<float>)>(&FMOD::Channel::FMOD5_Channel_GetReverbProperties)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wet = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetReverbProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, instance, wet});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetLowPassGain
// Il2CppName: FMOD5_Channel_SetLowPassGain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::Channel::FMOD5_Channel_SetLowPassGain)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* gain = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetLowPassGain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, gain});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetLowPassGain
// Il2CppName: FMOD5_Channel_GetLowPassGain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::Channel::FMOD5_Channel_GetLowPassGain)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* gain = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetLowPassGain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, gain});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetMode
// Il2CppName: FMOD5_Channel_SetMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::MODE)>(&FMOD::Channel::FMOD5_Channel_SetMode)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, mode});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetMode
// Il2CppName: FMOD5_Channel_GetMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::MODE>)>(&FMOD::Channel::FMOD5_Channel_GetMode)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, mode});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetCallback
// Il2CppName: FMOD5_Channel_SetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::CHANNEL_CALLBACK*)>(&FMOD::Channel::FMOD5_Channel_SetCallback)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD", "CHANNEL_CALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, callback});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_IsPlaying
// Il2CppName: FMOD5_Channel_IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::Channel::FMOD5_Channel_IsPlaying)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* isplaying = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, isplaying});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetPan
// Il2CppName: FMOD5_Channel_SetPan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::Channel::FMOD5_Channel_SetPan)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pan = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetPan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, pan});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetMixLevelsOutput
// Il2CppName: FMOD5_Channel_SetMixLevelsOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float, float, float, float, float, float, float, float)>(&FMOD::Channel::FMOD5_Channel_SetMixLevelsOutput)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* frontleft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* frontright = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lfe = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* surroundleft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* surroundright = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* backleft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* backright = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetMixLevelsOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetMixLevelsInput
// Il2CppName: FMOD5_Channel_SetMixLevelsInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<float>, int)>(&FMOD::Channel::FMOD5_Channel_SetMixLevelsInput)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* levels = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* numlevels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetMixLevelsInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, levels, numlevels});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetMixMatrix
// Il2CppName: FMOD5_Channel_SetMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<float>, int, int, int)>(&FMOD::Channel::FMOD5_Channel_SetMixMatrix)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inchannel_hop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, matrix, outchannels, inchannels, inchannel_hop});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetMixMatrix
// Il2CppName: FMOD5_Channel_GetMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<float>, ByRef<int>, ByRef<int>, int)>(&FMOD::Channel::FMOD5_Channel_GetMixMatrix)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* inchannel_hop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, matrix, outchannels, inchannels, inchannel_hop});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetDSPClock
// Il2CppName: FMOD5_Channel_GetDSPClock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint64_t>, ByRef<uint64_t>)>(&FMOD::Channel::FMOD5_Channel_GetDSPClock)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dspclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* parentclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetDSPClock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, dspclock, parentclock});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetDelay
// Il2CppName: FMOD5_Channel_SetDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint64_t, uint64_t, bool)>(&FMOD::Channel::FMOD5_Channel_SetDelay)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dspclock_start = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* dspclock_end = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* stopchannels = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, dspclock_start, dspclock_end, stopchannels});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetDelay
// Il2CppName: FMOD5_Channel_GetDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint64_t>, ByRef<uint64_t>, ByRef<bool>)>(&FMOD::Channel::FMOD5_Channel_GetDelay)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dspclock_start = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* dspclock_end = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* stopchannels = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, dspclock_start, dspclock_end, stopchannels});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_AddFadePoint
// Il2CppName: FMOD5_Channel_AddFadePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint64_t, float)>(&FMOD::Channel::FMOD5_Channel_AddFadePoint)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dspclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_AddFadePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, dspclock, volume});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetFadePointRamp
// Il2CppName: FMOD5_Channel_SetFadePointRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint64_t, float)>(&FMOD::Channel::FMOD5_Channel_SetFadePointRamp)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dspclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetFadePointRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, dspclock, volume});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_RemoveFadePoints
// Il2CppName: FMOD5_Channel_RemoveFadePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint64_t, uint64_t)>(&FMOD::Channel::FMOD5_Channel_RemoveFadePoints)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dspclock_start = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* dspclock_end = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_RemoveFadePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, dspclock_start, dspclock_end});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetFadePoints
// Il2CppName: FMOD5_Channel_GetFadePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint>, ::ArrayW<uint64_t>, ::ArrayW<float>)>(&FMOD::Channel::FMOD5_Channel_GetFadePoints)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* point_dspclock = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* point_volume = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetFadePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, numpoints, point_dspclock, point_volume});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetDSP
// Il2CppName: FMOD5_Channel_GetDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::System::IntPtr>)>(&FMOD::Channel::FMOD5_Channel_GetDSP)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, index, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_AddDSP
// Il2CppName: FMOD5_Channel_AddDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ::System::IntPtr)>(&FMOD::Channel::FMOD5_Channel_AddDSP)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_AddDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, index, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_RemoveDSP
// Il2CppName: FMOD5_Channel_RemoveDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::Channel::FMOD5_Channel_RemoveDSP)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_RemoveDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetNumDSPs
// Il2CppName: FMOD5_Channel_GetNumDSPs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Channel::FMOD5_Channel_GetNumDSPs)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numdsps = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetNumDSPs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, numdsps});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetDSPIndex
// Il2CppName: FMOD5_Channel_SetDSPIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, int)>(&FMOD::Channel::FMOD5_Channel_SetDSPIndex)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetDSPIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, dsp, index});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetDSPIndex
// Il2CppName: FMOD5_Channel_GetDSPIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, ByRef<int>)>(&FMOD::Channel::FMOD5_Channel_GetDSPIndex)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetDSPIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, dsp, index});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Set3DAttributes
// Il2CppName: FMOD5_Channel_Set3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::Channel::FMOD5_Channel_Set3DAttributes)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* alt_pan_pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Set3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, pos, vel, alt_pan_pos});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Get3DAttributes
// Il2CppName: FMOD5_Channel_Get3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::Channel::FMOD5_Channel_Get3DAttributes)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* alt_pan_pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Get3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, pos, vel, alt_pan_pos});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Set3DMinMaxDistance
// Il2CppName: FMOD5_Channel_Set3DMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float, float)>(&FMOD::Channel::FMOD5_Channel_Set3DMinMaxDistance)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mindistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxdistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Set3DMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, mindistance, maxdistance});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Get3DMinMaxDistance
// Il2CppName: FMOD5_Channel_Get3DMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>, ByRef<float>)>(&FMOD::Channel::FMOD5_Channel_Get3DMinMaxDistance)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mindistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* maxdistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Get3DMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, mindistance, maxdistance});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Set3DConeSettings
// Il2CppName: FMOD5_Channel_Set3DConeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float, float, float)>(&FMOD::Channel::FMOD5_Channel_Set3DConeSettings)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* insideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* outsideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* outsidevolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Set3DConeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, insideconeangle, outsideconeangle, outsidevolume});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Get3DConeSettings
// Il2CppName: FMOD5_Channel_Get3DConeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>, ByRef<float>, ByRef<float>)>(&FMOD::Channel::FMOD5_Channel_Get3DConeSettings)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* insideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* outsideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* outsidevolume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Get3DConeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, insideconeangle, outsideconeangle, outsidevolume});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Set3DConeOrientation
// Il2CppName: FMOD5_Channel_Set3DConeOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>)>(&FMOD::Channel::FMOD5_Channel_Set3DConeOrientation)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* orientation = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Set3DConeOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, orientation});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Get3DConeOrientation
// Il2CppName: FMOD5_Channel_Get3DConeOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>)>(&FMOD::Channel::FMOD5_Channel_Get3DConeOrientation)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* orientation = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Get3DConeOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, orientation});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Set3DCustomRolloff
// Il2CppName: FMOD5_Channel_Set3DCustomRolloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>, int)>(&FMOD::Channel::FMOD5_Channel_Set3DCustomRolloff)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* points = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Set3DCustomRolloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, points, numpoints});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Get3DCustomRolloff
// Il2CppName: FMOD5_Channel_Get3DCustomRolloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>, ByRef<int>)>(&FMOD::Channel::FMOD5_Channel_Get3DCustomRolloff)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* points = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Get3DCustomRolloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, points, numpoints});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Set3DOcclusion
// Il2CppName: FMOD5_Channel_Set3DOcclusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float, float)>(&FMOD::Channel::FMOD5_Channel_Set3DOcclusion)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Set3DOcclusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, directocclusion, reverbocclusion});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Get3DOcclusion
// Il2CppName: FMOD5_Channel_Get3DOcclusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>, ByRef<float>)>(&FMOD::Channel::FMOD5_Channel_Get3DOcclusion)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Get3DOcclusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, directocclusion, reverbocclusion});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Set3DSpread
// Il2CppName: FMOD5_Channel_Set3DSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::Channel::FMOD5_Channel_Set3DSpread)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Set3DSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, angle});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Get3DSpread
// Il2CppName: FMOD5_Channel_Get3DSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::Channel::FMOD5_Channel_Get3DSpread)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Get3DSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, angle});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Set3DLevel
// Il2CppName: FMOD5_Channel_Set3DLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::Channel::FMOD5_Channel_Set3DLevel)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Set3DLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, level});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Get3DLevel
// Il2CppName: FMOD5_Channel_Get3DLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::Channel::FMOD5_Channel_Get3DLevel)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Get3DLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, level});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Set3DDopplerLevel
// Il2CppName: FMOD5_Channel_Set3DDopplerLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::Channel::FMOD5_Channel_Set3DDopplerLevel)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Set3DDopplerLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, level});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Get3DDopplerLevel
// Il2CppName: FMOD5_Channel_Get3DDopplerLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::Channel::FMOD5_Channel_Get3DDopplerLevel)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Get3DDopplerLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, level});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Set3DDistanceFilter
// Il2CppName: FMOD5_Channel_Set3DDistanceFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool, float, float)>(&FMOD::Channel::FMOD5_Channel_Set3DDistanceFilter)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* custom = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* customLevel = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* centerFreq = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Set3DDistanceFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, custom, customLevel, centerFreq});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_Get3DDistanceFilter
// Il2CppName: FMOD5_Channel_Get3DDistanceFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>, ByRef<float>, ByRef<float>)>(&FMOD::Channel::FMOD5_Channel_Get3DDistanceFilter)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* custom = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* customLevel = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* centerFreq = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_Get3DDistanceFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, custom, customLevel, centerFreq});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_SetUserData
// Il2CppName: FMOD5_Channel_SetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::Channel::FMOD5_Channel_SetUserData)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_SetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::FMOD5_Channel_GetUserData
// Il2CppName: FMOD5_Channel_GetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Channel::FMOD5_Channel_GetUserData)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "FMOD5_Channel_GetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::hasHandle
// Il2CppName: hasHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::Channel::*)()>(&FMOD::Channel::hasHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "hasHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Channel::clearHandle
// Il2CppName: clearHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::Channel::*)()>(&FMOD::Channel::clearHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Channel), "clearHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
