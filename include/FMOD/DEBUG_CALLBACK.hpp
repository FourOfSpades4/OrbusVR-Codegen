// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
  // Forward declaring type: DEBUG_FLAGS
  struct DEBUG_FLAGS;
  // Forward declaring type: StringWrapper
  struct StringWrapper;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: DEBUG_CALLBACK
  class DEBUG_CALLBACK;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::FMOD::DEBUG_CALLBACK);
DEFINE_IL2CPP_ARG_TYPE(::FMOD::DEBUG_CALLBACK*, "FMOD", "DEBUG_CALLBACK");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.DEBUG_CALLBACK
  // [TokenAttribute] Offset: FFFFFFFF
  class DEBUG_CALLBACK : public ::System::MulticastDelegate {
    public:
    // public System.Void .ctor(System.Object object, System.IntPtr method)
    // Offset: 0x2269FB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DEBUG_CALLBACK* New_ctor(::Il2CppObject* object, ::System::IntPtr method) {
      static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::DEBUG_CALLBACK::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DEBUG_CALLBACK*, creationType>(object, method)));
    }
    // public FMOD.RESULT Invoke(FMOD.DEBUG_FLAGS flags, FMOD.StringWrapper file, System.Int32 line, FMOD.StringWrapper func, FMOD.StringWrapper message)
    // Offset: 0x2269FC8
    ::FMOD::RESULT Invoke(::FMOD::DEBUG_FLAGS flags, ::FMOD::StringWrapper file, int line, ::FMOD::StringWrapper func, ::FMOD::StringWrapper message);
    // public System.IAsyncResult BeginInvoke(FMOD.DEBUG_FLAGS flags, FMOD.StringWrapper file, System.Int32 line, FMOD.StringWrapper func, FMOD.StringWrapper message, System.AsyncCallback callback, System.Object object)
    // Offset: 0x226A4A8
    ::System::IAsyncResult* BeginInvoke(::FMOD::DEBUG_FLAGS flags, ::FMOD::StringWrapper file, int line, ::FMOD::StringWrapper func, ::FMOD::StringWrapper message, ::System::AsyncCallback* callback, ::Il2CppObject* object);
    // public FMOD.RESULT EndInvoke(System.IAsyncResult result)
    // Offset: 0x226A59C
    ::FMOD::RESULT EndInvoke(::System::IAsyncResult* result);
  }; // FMOD.DEBUG_CALLBACK
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::DEBUG_CALLBACK::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: FMOD::DEBUG_CALLBACK::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DEBUG_CALLBACK::*)(::FMOD::DEBUG_FLAGS, ::FMOD::StringWrapper, int, ::FMOD::StringWrapper, ::FMOD::StringWrapper)>(&FMOD::DEBUG_CALLBACK::Invoke)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD", "DEBUG_FLAGS")->byval_arg;
    static auto* file = &::il2cpp_utils::GetClassFromName("FMOD", "StringWrapper")->byval_arg;
    static auto* line = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* func = &::il2cpp_utils::GetClassFromName("FMOD", "StringWrapper")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("FMOD", "StringWrapper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DEBUG_CALLBACK*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags, file, line, func, message});
  }
};
// Writing MetadataGetter for method: FMOD::DEBUG_CALLBACK::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (FMOD::DEBUG_CALLBACK::*)(::FMOD::DEBUG_FLAGS, ::FMOD::StringWrapper, int, ::FMOD::StringWrapper, ::FMOD::StringWrapper, ::System::AsyncCallback*, ::Il2CppObject*)>(&FMOD::DEBUG_CALLBACK::BeginInvoke)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD", "DEBUG_FLAGS")->byval_arg;
    static auto* file = &::il2cpp_utils::GetClassFromName("FMOD", "StringWrapper")->byval_arg;
    static auto* line = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* func = &::il2cpp_utils::GetClassFromName("FMOD", "StringWrapper")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("FMOD", "StringWrapper")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* object = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DEBUG_CALLBACK*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags, file, line, func, message, callback, object});
  }
};
// Writing MetadataGetter for method: FMOD::DEBUG_CALLBACK::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DEBUG_CALLBACK::*)(::System::IAsyncResult*)>(&FMOD::DEBUG_CALLBACK::EndInvoke)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DEBUG_CALLBACK*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
