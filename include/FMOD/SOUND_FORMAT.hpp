// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: SOUND_FORMAT
  struct SOUND_FORMAT;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::SOUND_FORMAT, "FMOD", "SOUND_FORMAT");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.SOUND_FORMAT
  // [TokenAttribute] Offset: FFFFFFFF
  struct SOUND_FORMAT/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: SOUND_FORMAT
    constexpr SOUND_FORMAT(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.SOUND_FORMAT NONE
    static constexpr const int NONE = 0;
    // Get static field: static public FMOD.SOUND_FORMAT NONE
    static ::FMOD::SOUND_FORMAT _get_NONE();
    // Set static field: static public FMOD.SOUND_FORMAT NONE
    static void _set_NONE(::FMOD::SOUND_FORMAT value);
    // static field const value: static public FMOD.SOUND_FORMAT PCM8
    static constexpr const int PCM8 = 1;
    // Get static field: static public FMOD.SOUND_FORMAT PCM8
    static ::FMOD::SOUND_FORMAT _get_PCM8();
    // Set static field: static public FMOD.SOUND_FORMAT PCM8
    static void _set_PCM8(::FMOD::SOUND_FORMAT value);
    // static field const value: static public FMOD.SOUND_FORMAT PCM16
    static constexpr const int PCM16 = 2;
    // Get static field: static public FMOD.SOUND_FORMAT PCM16
    static ::FMOD::SOUND_FORMAT _get_PCM16();
    // Set static field: static public FMOD.SOUND_FORMAT PCM16
    static void _set_PCM16(::FMOD::SOUND_FORMAT value);
    // static field const value: static public FMOD.SOUND_FORMAT PCM24
    static constexpr const int PCM24 = 3;
    // Get static field: static public FMOD.SOUND_FORMAT PCM24
    static ::FMOD::SOUND_FORMAT _get_PCM24();
    // Set static field: static public FMOD.SOUND_FORMAT PCM24
    static void _set_PCM24(::FMOD::SOUND_FORMAT value);
    // static field const value: static public FMOD.SOUND_FORMAT PCM32
    static constexpr const int PCM32 = 4;
    // Get static field: static public FMOD.SOUND_FORMAT PCM32
    static ::FMOD::SOUND_FORMAT _get_PCM32();
    // Set static field: static public FMOD.SOUND_FORMAT PCM32
    static void _set_PCM32(::FMOD::SOUND_FORMAT value);
    // static field const value: static public FMOD.SOUND_FORMAT PCMFLOAT
    static constexpr const int PCMFLOAT = 5;
    // Get static field: static public FMOD.SOUND_FORMAT PCMFLOAT
    static ::FMOD::SOUND_FORMAT _get_PCMFLOAT();
    // Set static field: static public FMOD.SOUND_FORMAT PCMFLOAT
    static void _set_PCMFLOAT(::FMOD::SOUND_FORMAT value);
    // static field const value: static public FMOD.SOUND_FORMAT BITSTREAM
    static constexpr const int BITSTREAM = 6;
    // Get static field: static public FMOD.SOUND_FORMAT BITSTREAM
    static ::FMOD::SOUND_FORMAT _get_BITSTREAM();
    // Set static field: static public FMOD.SOUND_FORMAT BITSTREAM
    static void _set_BITSTREAM(::FMOD::SOUND_FORMAT value);
    // static field const value: static public FMOD.SOUND_FORMAT MAX
    static constexpr const int MAX = 7;
    // Get static field: static public FMOD.SOUND_FORMAT MAX
    static ::FMOD::SOUND_FORMAT _get_MAX();
    // Set static field: static public FMOD.SOUND_FORMAT MAX
    static void _set_MAX(::FMOD::SOUND_FORMAT value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // FMOD.SOUND_FORMAT
  #pragma pack(pop)
  static check_size<sizeof(SOUND_FORMAT), 0 + sizeof(int)> __FMOD_SOUND_FORMATSizeCheck;
  static_assert(sizeof(SOUND_FORMAT) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
