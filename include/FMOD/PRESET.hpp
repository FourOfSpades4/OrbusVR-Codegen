// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: REVERB_PROPERTIES
  struct REVERB_PROPERTIES;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: PRESET
  class PRESET;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::FMOD::PRESET);
DEFINE_IL2CPP_ARG_TYPE(::FMOD::PRESET*, "FMOD", "PRESET");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.PRESET
  // [TokenAttribute] Offset: FFFFFFFF
  class PRESET : public ::Il2CppObject {
    public:
    // static public FMOD.REVERB_PROPERTIES OFF()
    // Offset: 0x22DEFE8
    static ::FMOD::REVERB_PROPERTIES OFF();
    // static public FMOD.REVERB_PROPERTIES GENERIC()
    // Offset: 0x22DF038
    static ::FMOD::REVERB_PROPERTIES GENERIC();
    // static public FMOD.REVERB_PROPERTIES PADDEDCELL()
    // Offset: 0x22DF05C
    static ::FMOD::REVERB_PROPERTIES PADDEDCELL();
    // static public FMOD.REVERB_PROPERTIES ROOM()
    // Offset: 0x22DF080
    static ::FMOD::REVERB_PROPERTIES ROOM();
    // static public FMOD.REVERB_PROPERTIES BATHROOM()
    // Offset: 0x22DF0A4
    static ::FMOD::REVERB_PROPERTIES BATHROOM();
    // static public FMOD.REVERB_PROPERTIES LIVINGROOM()
    // Offset: 0x22DF0C8
    static ::FMOD::REVERB_PROPERTIES LIVINGROOM();
    // static public FMOD.REVERB_PROPERTIES STONEROOM()
    // Offset: 0x22DF0EC
    static ::FMOD::REVERB_PROPERTIES STONEROOM();
    // static public FMOD.REVERB_PROPERTIES AUDITORIUM()
    // Offset: 0x22DF110
    static ::FMOD::REVERB_PROPERTIES AUDITORIUM();
    // static public FMOD.REVERB_PROPERTIES CONCERTHALL()
    // Offset: 0x22DF134
    static ::FMOD::REVERB_PROPERTIES CONCERTHALL();
    // static public FMOD.REVERB_PROPERTIES CAVE()
    // Offset: 0x22DF158
    static ::FMOD::REVERB_PROPERTIES CAVE();
    // static public FMOD.REVERB_PROPERTIES ARENA()
    // Offset: 0x22DF17C
    static ::FMOD::REVERB_PROPERTIES ARENA();
    // static public FMOD.REVERB_PROPERTIES HANGAR()
    // Offset: 0x22DF1A0
    static ::FMOD::REVERB_PROPERTIES HANGAR();
    // static public FMOD.REVERB_PROPERTIES CARPETTEDHALLWAY()
    // Offset: 0x22DF1C4
    static ::FMOD::REVERB_PROPERTIES CARPETTEDHALLWAY();
    // static public FMOD.REVERB_PROPERTIES HALLWAY()
    // Offset: 0x22DF1E8
    static ::FMOD::REVERB_PROPERTIES HALLWAY();
    // static public FMOD.REVERB_PROPERTIES STONECORRIDOR()
    // Offset: 0x22DF20C
    static ::FMOD::REVERB_PROPERTIES STONECORRIDOR();
    // static public FMOD.REVERB_PROPERTIES ALLEY()
    // Offset: 0x22DF230
    static ::FMOD::REVERB_PROPERTIES ALLEY();
    // static public FMOD.REVERB_PROPERTIES FOREST()
    // Offset: 0x22DF254
    static ::FMOD::REVERB_PROPERTIES FOREST();
    // static public FMOD.REVERB_PROPERTIES CITY()
    // Offset: 0x22DF278
    static ::FMOD::REVERB_PROPERTIES CITY();
    // static public FMOD.REVERB_PROPERTIES MOUNTAINS()
    // Offset: 0x22DF29C
    static ::FMOD::REVERB_PROPERTIES MOUNTAINS();
    // static public FMOD.REVERB_PROPERTIES QUARRY()
    // Offset: 0x22DF2C0
    static ::FMOD::REVERB_PROPERTIES QUARRY();
    // static public FMOD.REVERB_PROPERTIES PLAIN()
    // Offset: 0x22DF2E4
    static ::FMOD::REVERB_PROPERTIES PLAIN();
    // static public FMOD.REVERB_PROPERTIES PARKINGLOT()
    // Offset: 0x22DF308
    static ::FMOD::REVERB_PROPERTIES PARKINGLOT();
    // static public FMOD.REVERB_PROPERTIES SEWERPIPE()
    // Offset: 0x22DF32C
    static ::FMOD::REVERB_PROPERTIES SEWERPIPE();
    // static public FMOD.REVERB_PROPERTIES UNDERWATER()
    // Offset: 0x22DF350
    static ::FMOD::REVERB_PROPERTIES UNDERWATER();
    // public System.Void .ctor()
    // Offset: 0x22DF374
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PRESET* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::PRESET::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PRESET*, creationType>()));
    }
  }; // FMOD.PRESET
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::PRESET::OFF
// Il2CppName: OFF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::OFF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "OFF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::GENERIC
// Il2CppName: GENERIC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::GENERIC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "GENERIC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::PADDEDCELL
// Il2CppName: PADDEDCELL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::PADDEDCELL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "PADDEDCELL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::ROOM
// Il2CppName: ROOM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::ROOM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "ROOM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::BATHROOM
// Il2CppName: BATHROOM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::BATHROOM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "BATHROOM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::LIVINGROOM
// Il2CppName: LIVINGROOM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::LIVINGROOM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "LIVINGROOM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::STONEROOM
// Il2CppName: STONEROOM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::STONEROOM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "STONEROOM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::AUDITORIUM
// Il2CppName: AUDITORIUM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::AUDITORIUM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "AUDITORIUM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::CONCERTHALL
// Il2CppName: CONCERTHALL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::CONCERTHALL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "CONCERTHALL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::CAVE
// Il2CppName: CAVE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::CAVE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "CAVE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::ARENA
// Il2CppName: ARENA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::ARENA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "ARENA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::HANGAR
// Il2CppName: HANGAR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::HANGAR)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "HANGAR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::CARPETTEDHALLWAY
// Il2CppName: CARPETTEDHALLWAY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::CARPETTEDHALLWAY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "CARPETTEDHALLWAY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::HALLWAY
// Il2CppName: HALLWAY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::HALLWAY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "HALLWAY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::STONECORRIDOR
// Il2CppName: STONECORRIDOR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::STONECORRIDOR)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "STONECORRIDOR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::ALLEY
// Il2CppName: ALLEY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::ALLEY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "ALLEY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::FOREST
// Il2CppName: FOREST
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::FOREST)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "FOREST", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::CITY
// Il2CppName: CITY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::CITY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "CITY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::MOUNTAINS
// Il2CppName: MOUNTAINS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::MOUNTAINS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "MOUNTAINS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::QUARRY
// Il2CppName: QUARRY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::QUARRY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "QUARRY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::PLAIN
// Il2CppName: PLAIN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::PLAIN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "PLAIN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::PARKINGLOT
// Il2CppName: PARKINGLOT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::PARKINGLOT)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "PARKINGLOT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::SEWERPIPE
// Il2CppName: SEWERPIPE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::SEWERPIPE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "SEWERPIPE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::UNDERWATER
// Il2CppName: UNDERWATER
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::REVERB_PROPERTIES (*)()>(&FMOD::PRESET::UNDERWATER)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::PRESET*), "UNDERWATER", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::PRESET::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
