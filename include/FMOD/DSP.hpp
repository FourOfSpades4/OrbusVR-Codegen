// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
  // Forward declaring type: System
  struct System;
  // Forward declaring type: DSPConnection
  struct DSPConnection;
  // Forward declaring type: DSPCONNECTION_TYPE
  struct DSPCONNECTION_TYPE;
  // Forward declaring type: CHANNELMASK
  struct CHANNELMASK;
  // Forward declaring type: SPEAKERMODE
  struct SPEAKERMODE;
  // Forward declaring type: DSP_PARAMETER_DESC
  struct DSP_PARAMETER_DESC;
  // Forward declaring type: DSP_TYPE
  struct DSP_TYPE;
  // Forward declaring type: DSP_METERING_INFO
  struct DSP_METERING_INFO;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: DSP
  struct DSP;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::DSP, "FMOD", "DSP");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.DSP
  // [TokenAttribute] Offset: FFFFFFFF
  struct DSP/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: DSP
    constexpr DSP(::System::IntPtr handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return handle;
    }
    // Get instance field reference: public System.IntPtr handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_handle();
    // public FMOD.RESULT release()
    // Offset: 0xBBBD50
    ::FMOD::RESULT release();
    // public FMOD.RESULT getSystemObject(out FMOD.System system)
    // Offset: 0xBBBD58
    ::FMOD::RESULT getSystemObject(ByRef<::FMOD::System> system);
    // public FMOD.RESULT addInput(FMOD.DSP target, out FMOD.DSPConnection connection, FMOD.DSPCONNECTION_TYPE type)
    // Offset: 0xBBBD60
    ::FMOD::RESULT addInput(::FMOD::DSP target, ByRef<::FMOD::DSPConnection> connection, ::FMOD::DSPCONNECTION_TYPE type);
    // public FMOD.RESULT disconnectFrom(FMOD.DSP target, FMOD.DSPConnection connection)
    // Offset: 0xBBBD68
    ::FMOD::RESULT disconnectFrom(::FMOD::DSP target, ::FMOD::DSPConnection connection);
    // public FMOD.RESULT disconnectAll(System.Boolean inputs, System.Boolean outputs)
    // Offset: 0xBBBD70
    ::FMOD::RESULT disconnectAll(bool inputs, bool outputs);
    // public FMOD.RESULT getNumInputs(out System.Int32 numinputs)
    // Offset: 0xBBBD80
    ::FMOD::RESULT getNumInputs(ByRef<int> numinputs);
    // public FMOD.RESULT getNumOutputs(out System.Int32 numoutputs)
    // Offset: 0xBBBD88
    ::FMOD::RESULT getNumOutputs(ByRef<int> numoutputs);
    // public FMOD.RESULT getInput(System.Int32 index, out FMOD.DSP input, out FMOD.DSPConnection inputconnection)
    // Offset: 0xBBBD90
    ::FMOD::RESULT getInput(int index, ByRef<::FMOD::DSP> input, ByRef<::FMOD::DSPConnection> inputconnection);
    // public FMOD.RESULT getOutput(System.Int32 index, out FMOD.DSP output, out FMOD.DSPConnection outputconnection)
    // Offset: 0xBBBD98
    ::FMOD::RESULT getOutput(int index, ByRef<::FMOD::DSP> output, ByRef<::FMOD::DSPConnection> outputconnection);
    // public FMOD.RESULT setActive(System.Boolean active)
    // Offset: 0xBBBDA0
    ::FMOD::RESULT setActive(bool active);
    // public FMOD.RESULT getActive(out System.Boolean active)
    // Offset: 0xBBBDAC
    ::FMOD::RESULT getActive(ByRef<bool> active);
    // public FMOD.RESULT setBypass(System.Boolean bypass)
    // Offset: 0xBBBDB4
    ::FMOD::RESULT setBypass(bool bypass);
    // public FMOD.RESULT getBypass(out System.Boolean bypass)
    // Offset: 0xBBBDC0
    ::FMOD::RESULT getBypass(ByRef<bool> bypass);
    // public FMOD.RESULT setWetDryMix(System.Single prewet, System.Single postwet, System.Single dry)
    // Offset: 0xBBBDC8
    ::FMOD::RESULT setWetDryMix(float prewet, float postwet, float dry);
    // public FMOD.RESULT getWetDryMix(out System.Single prewet, out System.Single postwet, out System.Single dry)
    // Offset: 0xBBBDD0
    ::FMOD::RESULT getWetDryMix(ByRef<float> prewet, ByRef<float> postwet, ByRef<float> dry);
    // public FMOD.RESULT setChannelFormat(FMOD.CHANNELMASK channelmask, System.Int32 numchannels, FMOD.SPEAKERMODE source_speakermode)
    // Offset: 0xBBBDD8
    ::FMOD::RESULT setChannelFormat(::FMOD::CHANNELMASK channelmask, int numchannels, ::FMOD::SPEAKERMODE source_speakermode);
    // public FMOD.RESULT getChannelFormat(out FMOD.CHANNELMASK channelmask, out System.Int32 numchannels, out FMOD.SPEAKERMODE source_speakermode)
    // Offset: 0xBBBDE0
    ::FMOD::RESULT getChannelFormat(ByRef<::FMOD::CHANNELMASK> channelmask, ByRef<int> numchannels, ByRef<::FMOD::SPEAKERMODE> source_speakermode);
    // public FMOD.RESULT getOutputChannelFormat(FMOD.CHANNELMASK inmask, System.Int32 inchannels, FMOD.SPEAKERMODE inspeakermode, out FMOD.CHANNELMASK outmask, out System.Int32 outchannels, out FMOD.SPEAKERMODE outspeakermode)
    // Offset: 0xBBBDE8
    ::FMOD::RESULT getOutputChannelFormat(::FMOD::CHANNELMASK inmask, int inchannels, ::FMOD::SPEAKERMODE inspeakermode, ByRef<::FMOD::CHANNELMASK> outmask, ByRef<int> outchannels, ByRef<::FMOD::SPEAKERMODE> outspeakermode);
    // public FMOD.RESULT reset()
    // Offset: 0xBBBDF0
    ::FMOD::RESULT reset();
    // public FMOD.RESULT setParameterFloat(System.Int32 index, System.Single value)
    // Offset: 0xBBBDF8
    ::FMOD::RESULT setParameterFloat(int index, float value);
    // public FMOD.RESULT setParameterInt(System.Int32 index, System.Int32 value)
    // Offset: 0xBBBE00
    ::FMOD::RESULT setParameterInt(int index, int value);
    // public FMOD.RESULT setParameterBool(System.Int32 index, System.Boolean value)
    // Offset: 0xBBBE08
    ::FMOD::RESULT setParameterBool(int index, bool value);
    // public FMOD.RESULT setParameterData(System.Int32 index, System.Byte[] data)
    // Offset: 0xBBBE14
    ::FMOD::RESULT setParameterData(int index, ::ArrayW<uint8_t> data);
    // public FMOD.RESULT getParameterFloat(System.Int32 index, out System.Single value)
    // Offset: 0xBBBE1C
    ::FMOD::RESULT getParameterFloat(int index, ByRef<float> value);
    // public FMOD.RESULT getParameterInt(System.Int32 index, out System.Int32 value)
    // Offset: 0xBBBE24
    ::FMOD::RESULT getParameterInt(int index, ByRef<int> value);
    // public FMOD.RESULT getParameterBool(System.Int32 index, out System.Boolean value)
    // Offset: 0xBBBE2C
    ::FMOD::RESULT getParameterBool(int index, ByRef<bool> value);
    // public FMOD.RESULT getParameterData(System.Int32 index, out System.IntPtr data, out System.UInt32 length)
    // Offset: 0xBBBE34
    ::FMOD::RESULT getParameterData(int index, ByRef<::System::IntPtr> data, ByRef<uint> length);
    // public FMOD.RESULT getNumParameters(out System.Int32 numparams)
    // Offset: 0xBBBE3C
    ::FMOD::RESULT getNumParameters(ByRef<int> numparams);
    // public FMOD.RESULT getParameterInfo(System.Int32 index, out FMOD.DSP_PARAMETER_DESC desc)
    // Offset: 0xBBBE44
    ::FMOD::RESULT getParameterInfo(int index, ByRef<::FMOD::DSP_PARAMETER_DESC> desc);
    // public FMOD.RESULT getDataParameterIndex(System.Int32 datatype, out System.Int32 index)
    // Offset: 0xBBBE4C
    ::FMOD::RESULT getDataParameterIndex(int datatype, ByRef<int> index);
    // public FMOD.RESULT showConfigDialog(System.IntPtr hwnd, System.Boolean show)
    // Offset: 0xBBBE54
    ::FMOD::RESULT showConfigDialog(::System::IntPtr hwnd, bool show);
    // public FMOD.RESULT getInfo(out System.String name, out System.UInt32 version, out System.Int32 channels, out System.Int32 configwidth, out System.Int32 configheight)
    // Offset: 0xBBBE60
    ::FMOD::RESULT getInfo(ByRef<::StringW> name, ByRef<uint> version, ByRef<int> channels, ByRef<int> configwidth, ByRef<int> configheight);
    // public FMOD.RESULT getInfo(out System.UInt32 version, out System.Int32 channels, out System.Int32 configwidth, out System.Int32 configheight)
    // Offset: 0xBBBE68
    ::FMOD::RESULT getInfo(ByRef<uint> version, ByRef<int> channels, ByRef<int> configwidth, ByRef<int> configheight);
    // public FMOD.RESULT getType(out FMOD.DSP_TYPE type)
    // Offset: 0xBBBE70
    ::FMOD::RESULT getType(ByRef<::FMOD::DSP_TYPE> type);
    // public FMOD.RESULT getIdle(out System.Boolean idle)
    // Offset: 0xBBBE78
    ::FMOD::RESULT getIdle(ByRef<bool> idle);
    // public FMOD.RESULT setUserData(System.IntPtr userdata)
    // Offset: 0xBBBE80
    ::FMOD::RESULT setUserData(::System::IntPtr userdata);
    // public FMOD.RESULT getUserData(out System.IntPtr userdata)
    // Offset: 0xBBBE88
    ::FMOD::RESULT getUserData(ByRef<::System::IntPtr> userdata);
    // public FMOD.RESULT setMeteringEnabled(System.Boolean inputEnabled, System.Boolean outputEnabled)
    // Offset: 0xBBBE90
    ::FMOD::RESULT setMeteringEnabled(bool inputEnabled, bool outputEnabled);
    // public FMOD.RESULT getMeteringEnabled(out System.Boolean inputEnabled, out System.Boolean outputEnabled)
    // Offset: 0xBBBEA0
    ::FMOD::RESULT getMeteringEnabled(ByRef<bool> inputEnabled, ByRef<bool> outputEnabled);
    // public FMOD.RESULT getMeteringInfo(System.IntPtr zero, out FMOD.DSP_METERING_INFO outputInfo)
    // Offset: 0xBBBEA8
    ::FMOD::RESULT getMeteringInfo(::System::IntPtr zero, ByRef<::FMOD::DSP_METERING_INFO> outputInfo);
    // public FMOD.RESULT getMeteringInfo(out FMOD.DSP_METERING_INFO inputInfo, System.IntPtr zero)
    // Offset: 0xBBBEB0
    ::FMOD::RESULT getMeteringInfo(ByRef<::FMOD::DSP_METERING_INFO> inputInfo, ::System::IntPtr zero);
    // public FMOD.RESULT getCPUUsage(out System.UInt32 exclusive, out System.UInt32 inclusive)
    // Offset: 0xBBBEB8
    ::FMOD::RESULT getCPUUsage(ByRef<uint> exclusive, ByRef<uint> inclusive);
    // static private FMOD.RESULT FMOD5_DSP_Release(System.IntPtr dsp)
    // Offset: 0x226A5E0
    static ::FMOD::RESULT FMOD5_DSP_Release(::System::IntPtr dsp);
    // static private FMOD.RESULT FMOD5_DSP_GetSystemObject(System.IntPtr dsp, out System.IntPtr system)
    // Offset: 0x226A684
    static ::FMOD::RESULT FMOD5_DSP_GetSystemObject(::System::IntPtr dsp, ByRef<::System::IntPtr> system);
    // static private FMOD.RESULT FMOD5_DSP_AddInput(System.IntPtr dsp, System.IntPtr target, out System.IntPtr connection, FMOD.DSPCONNECTION_TYPE type)
    // Offset: 0x226A738
    static ::FMOD::RESULT FMOD5_DSP_AddInput(::System::IntPtr dsp, ::System::IntPtr target, ByRef<::System::IntPtr> connection, ::FMOD::DSPCONNECTION_TYPE type);
    // static private FMOD.RESULT FMOD5_DSP_DisconnectFrom(System.IntPtr dsp, System.IntPtr target, System.IntPtr connection)
    // Offset: 0x226A804
    static ::FMOD::RESULT FMOD5_DSP_DisconnectFrom(::System::IntPtr dsp, ::System::IntPtr target, ::System::IntPtr connection);
    // static private FMOD.RESULT FMOD5_DSP_DisconnectAll(System.IntPtr dsp, System.Boolean inputs, System.Boolean outputs)
    // Offset: 0x226A8C4
    static ::FMOD::RESULT FMOD5_DSP_DisconnectAll(::System::IntPtr dsp, bool inputs, bool outputs);
    // static private FMOD.RESULT FMOD5_DSP_GetNumInputs(System.IntPtr dsp, out System.Int32 numinputs)
    // Offset: 0x226A980
    static ::FMOD::RESULT FMOD5_DSP_GetNumInputs(::System::IntPtr dsp, ByRef<int> numinputs);
    // static private FMOD.RESULT FMOD5_DSP_GetNumOutputs(System.IntPtr dsp, out System.Int32 numoutputs)
    // Offset: 0x226AA34
    static ::FMOD::RESULT FMOD5_DSP_GetNumOutputs(::System::IntPtr dsp, ByRef<int> numoutputs);
    // static private FMOD.RESULT FMOD5_DSP_GetInput(System.IntPtr dsp, System.Int32 index, out System.IntPtr input, out System.IntPtr inputconnection)
    // Offset: 0x226AAE8
    static ::FMOD::RESULT FMOD5_DSP_GetInput(::System::IntPtr dsp, int index, ByRef<::System::IntPtr> input, ByRef<::System::IntPtr> inputconnection);
    // static private FMOD.RESULT FMOD5_DSP_GetOutput(System.IntPtr dsp, System.Int32 index, out System.IntPtr output, out System.IntPtr outputconnection)
    // Offset: 0x226ABB4
    static ::FMOD::RESULT FMOD5_DSP_GetOutput(::System::IntPtr dsp, int index, ByRef<::System::IntPtr> output, ByRef<::System::IntPtr> outputconnection);
    // static private FMOD.RESULT FMOD5_DSP_SetActive(System.IntPtr dsp, System.Boolean active)
    // Offset: 0x226AC84
    static ::FMOD::RESULT FMOD5_DSP_SetActive(::System::IntPtr dsp, bool active);
    // static private FMOD.RESULT FMOD5_DSP_GetActive(System.IntPtr dsp, out System.Boolean active)
    // Offset: 0x226AD38
    static ::FMOD::RESULT FMOD5_DSP_GetActive(::System::IntPtr dsp, ByRef<bool> active);
    // static private FMOD.RESULT FMOD5_DSP_SetBypass(System.IntPtr dsp, System.Boolean bypass)
    // Offset: 0x226AE04
    static ::FMOD::RESULT FMOD5_DSP_SetBypass(::System::IntPtr dsp, bool bypass);
    // static private FMOD.RESULT FMOD5_DSP_GetBypass(System.IntPtr dsp, out System.Boolean bypass)
    // Offset: 0x226AEB8
    static ::FMOD::RESULT FMOD5_DSP_GetBypass(::System::IntPtr dsp, ByRef<bool> bypass);
    // static private FMOD.RESULT FMOD5_DSP_SetWetDryMix(System.IntPtr dsp, System.Single prewet, System.Single postwet, System.Single dry)
    // Offset: 0x226AF80
    static ::FMOD::RESULT FMOD5_DSP_SetWetDryMix(::System::IntPtr dsp, float prewet, float postwet, float dry);
    // static private FMOD.RESULT FMOD5_DSP_GetWetDryMix(System.IntPtr dsp, out System.Single prewet, out System.Single postwet, out System.Single dry)
    // Offset: 0x226B04C
    static ::FMOD::RESULT FMOD5_DSP_GetWetDryMix(::System::IntPtr dsp, ByRef<float> prewet, ByRef<float> postwet, ByRef<float> dry);
    // static private FMOD.RESULT FMOD5_DSP_SetChannelFormat(System.IntPtr dsp, FMOD.CHANNELMASK channelmask, System.Int32 numchannels, FMOD.SPEAKERMODE source_speakermode)
    // Offset: 0x226B118
    static ::FMOD::RESULT FMOD5_DSP_SetChannelFormat(::System::IntPtr dsp, ::FMOD::CHANNELMASK channelmask, int numchannels, ::FMOD::SPEAKERMODE source_speakermode);
    // static private FMOD.RESULT FMOD5_DSP_GetChannelFormat(System.IntPtr dsp, out FMOD.CHANNELMASK channelmask, out System.Int32 numchannels, out FMOD.SPEAKERMODE source_speakermode)
    // Offset: 0x226B1E4
    static ::FMOD::RESULT FMOD5_DSP_GetChannelFormat(::System::IntPtr dsp, ByRef<::FMOD::CHANNELMASK> channelmask, ByRef<int> numchannels, ByRef<::FMOD::SPEAKERMODE> source_speakermode);
    // static private FMOD.RESULT FMOD5_DSP_GetOutputChannelFormat(System.IntPtr dsp, FMOD.CHANNELMASK inmask, System.Int32 inchannels, FMOD.SPEAKERMODE inspeakermode, out FMOD.CHANNELMASK outmask, out System.Int32 outchannels, out FMOD.SPEAKERMODE outspeakermode)
    // Offset: 0x226B2B0
    static ::FMOD::RESULT FMOD5_DSP_GetOutputChannelFormat(::System::IntPtr dsp, ::FMOD::CHANNELMASK inmask, int inchannels, ::FMOD::SPEAKERMODE inspeakermode, ByRef<::FMOD::CHANNELMASK> outmask, ByRef<int> outchannels, ByRef<::FMOD::SPEAKERMODE> outspeakermode);
    // static private FMOD.RESULT FMOD5_DSP_Reset(System.IntPtr dsp)
    // Offset: 0x226B39C
    static ::FMOD::RESULT FMOD5_DSP_Reset(::System::IntPtr dsp);
    // static private FMOD.RESULT FMOD5_DSP_SetParameterFloat(System.IntPtr dsp, System.Int32 index, System.Single value)
    // Offset: 0x226B440
    static ::FMOD::RESULT FMOD5_DSP_SetParameterFloat(::System::IntPtr dsp, int index, float value);
    // static private FMOD.RESULT FMOD5_DSP_SetParameterInt(System.IntPtr dsp, System.Int32 index, System.Int32 value)
    // Offset: 0x226B504
    static ::FMOD::RESULT FMOD5_DSP_SetParameterInt(::System::IntPtr dsp, int index, int value);
    // static private FMOD.RESULT FMOD5_DSP_SetParameterBool(System.IntPtr dsp, System.Int32 index, System.Boolean value)
    // Offset: 0x226B5C4
    static ::FMOD::RESULT FMOD5_DSP_SetParameterBool(::System::IntPtr dsp, int index, bool value);
    // static private FMOD.RESULT FMOD5_DSP_SetParameterData(System.IntPtr dsp, System.Int32 index, System.IntPtr data, System.UInt32 length)
    // Offset: 0x226B724
    static ::FMOD::RESULT FMOD5_DSP_SetParameterData(::System::IntPtr dsp, int index, ::System::IntPtr data, uint length);
    // static private FMOD.RESULT FMOD5_DSP_GetParameterFloat(System.IntPtr dsp, System.Int32 index, out System.Single value, System.IntPtr valuestr, System.Int32 valuestrlen)
    // Offset: 0x226B84C
    static ::FMOD::RESULT FMOD5_DSP_GetParameterFloat(::System::IntPtr dsp, int index, ByRef<float> value, ::System::IntPtr valuestr, int valuestrlen);
    // static private FMOD.RESULT FMOD5_DSP_GetParameterInt(System.IntPtr dsp, System.Int32 index, out System.Int32 value, System.IntPtr valuestr, System.Int32 valuestrlen)
    // Offset: 0x226B97C
    static ::FMOD::RESULT FMOD5_DSP_GetParameterInt(::System::IntPtr dsp, int index, ByRef<int> value, ::System::IntPtr valuestr, int valuestrlen);
    // static private FMOD.RESULT FMOD5_DSP_GetParameterBool(System.IntPtr dsp, System.Int32 index, out System.Boolean value, System.IntPtr valuestr, System.Int32 valuestrlen)
    // Offset: 0x226BAAC
    static ::FMOD::RESULT FMOD5_DSP_GetParameterBool(::System::IntPtr dsp, int index, ByRef<bool> value, ::System::IntPtr valuestr, int valuestrlen);
    // static private FMOD.RESULT FMOD5_DSP_GetParameterData(System.IntPtr dsp, System.Int32 index, out System.IntPtr data, out System.UInt32 length, System.IntPtr valuestr, System.Int32 valuestrlen)
    // Offset: 0x226BC00
    static ::FMOD::RESULT FMOD5_DSP_GetParameterData(::System::IntPtr dsp, int index, ByRef<::System::IntPtr> data, ByRef<uint> length, ::System::IntPtr valuestr, int valuestrlen);
    // static private FMOD.RESULT FMOD5_DSP_GetNumParameters(System.IntPtr dsp, out System.Int32 numparams)
    // Offset: 0x226BCE4
    static ::FMOD::RESULT FMOD5_DSP_GetNumParameters(::System::IntPtr dsp, ByRef<int> numparams);
    // static private FMOD.RESULT FMOD5_DSP_GetParameterInfo(System.IntPtr dsp, System.Int32 index, out FMOD.DSP_PARAMETER_DESC desc)
    // Offset: 0x226BD98
    static ::FMOD::RESULT FMOD5_DSP_GetParameterInfo(::System::IntPtr dsp, int index, ByRef<::FMOD::DSP_PARAMETER_DESC> desc);
    // static private FMOD.RESULT FMOD5_DSP_GetDataParameterIndex(System.IntPtr dsp, System.Int32 datatype, out System.Int32 index)
    // Offset: 0x226BEA8
    static ::FMOD::RESULT FMOD5_DSP_GetDataParameterIndex(::System::IntPtr dsp, int datatype, ByRef<int> index);
    // static private FMOD.RESULT FMOD5_DSP_ShowConfigDialog(System.IntPtr dsp, System.IntPtr hwnd, System.Boolean show)
    // Offset: 0x226BF68
    static ::FMOD::RESULT FMOD5_DSP_ShowConfigDialog(::System::IntPtr dsp, ::System::IntPtr hwnd, bool show);
    // static private FMOD.RESULT FMOD5_DSP_GetInfo(System.IntPtr dsp, System.IntPtr name, out System.UInt32 version, out System.Int32 channels, out System.Int32 configwidth, out System.Int32 configheight)
    // Offset: 0x226C1F4
    static ::FMOD::RESULT FMOD5_DSP_GetInfo(::System::IntPtr dsp, ::System::IntPtr name, ByRef<uint> version, ByRef<int> channels, ByRef<int> configwidth, ByRef<int> configheight);
    // static private FMOD.RESULT FMOD5_DSP_GetType(System.IntPtr dsp, out FMOD.DSP_TYPE type)
    // Offset: 0x226C350
    static ::FMOD::RESULT FMOD5_DSP_GetType(::System::IntPtr dsp, ByRef<::FMOD::DSP_TYPE> type);
    // static private FMOD.RESULT FMOD5_DSP_GetIdle(System.IntPtr dsp, out System.Boolean idle)
    // Offset: 0x226C404
    static ::FMOD::RESULT FMOD5_DSP_GetIdle(::System::IntPtr dsp, ByRef<bool> idle);
    // static private FMOD.RESULT FMOD5_DSP_SetUserData(System.IntPtr dsp, System.IntPtr userdata)
    // Offset: 0x226C4CC
    static ::FMOD::RESULT FMOD5_DSP_SetUserData(::System::IntPtr dsp, ::System::IntPtr userdata);
    // static private FMOD.RESULT FMOD5_DSP_GetUserData(System.IntPtr dsp, out System.IntPtr userdata)
    // Offset: 0x226C580
    static ::FMOD::RESULT FMOD5_DSP_GetUserData(::System::IntPtr dsp, ByRef<::System::IntPtr> userdata);
    // static public FMOD.RESULT FMOD5_DSP_SetMeteringEnabled(System.IntPtr dsp, System.Boolean inputEnabled, System.Boolean outputEnabled)
    // Offset: 0x226C63C
    static ::FMOD::RESULT FMOD5_DSP_SetMeteringEnabled(::System::IntPtr dsp, bool inputEnabled, bool outputEnabled);
    // static public FMOD.RESULT FMOD5_DSP_GetMeteringEnabled(System.IntPtr dsp, out System.Boolean inputEnabled, out System.Boolean outputEnabled)
    // Offset: 0x226C6F8
    static ::FMOD::RESULT FMOD5_DSP_GetMeteringEnabled(::System::IntPtr dsp, ByRef<bool> inputEnabled, ByRef<bool> outputEnabled);
    // static public FMOD.RESULT FMOD5_DSP_GetMeteringInfo(System.IntPtr dsp, System.IntPtr zero, out FMOD.DSP_METERING_INFO outputInfo)
    // Offset: 0x226C7D8
    static ::FMOD::RESULT FMOD5_DSP_GetMeteringInfo(::System::IntPtr dsp, ::System::IntPtr zero, ByRef<::FMOD::DSP_METERING_INFO> outputInfo);
    // static public FMOD.RESULT FMOD5_DSP_GetMeteringInfo(System.IntPtr dsp, out FMOD.DSP_METERING_INFO inputInfo, System.IntPtr zero)
    // Offset: 0x226C8DC
    static ::FMOD::RESULT FMOD5_DSP_GetMeteringInfo(::System::IntPtr dsp, ByRef<::FMOD::DSP_METERING_INFO> inputInfo, ::System::IntPtr zero);
    // static public FMOD.RESULT FMOD5_DSP_GetCPUUsage(System.IntPtr dsp, out System.UInt32 exclusive, out System.UInt32 inclusive)
    // Offset: 0x226C9E0
    static ::FMOD::RESULT FMOD5_DSP_GetCPUUsage(::System::IntPtr dsp, ByRef<uint> exclusive, ByRef<uint> inclusive);
    // public System.Boolean hasHandle()
    // Offset: 0xBBBFA0
    bool hasHandle();
    // public System.Void clearHandle()
    // Offset: 0xBBBFA8
    void clearHandle();
  }; // FMOD.DSP
  #pragma pack(pop)
  static check_size<sizeof(DSP), 0 + sizeof(::System::IntPtr)> __FMOD_DSPSizeCheck;
  static_assert(sizeof(DSP) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::DSP::release
// Il2CppName: release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)()>(&FMOD::DSP::release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getSystemObject
// Il2CppName: getSystemObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<::FMOD::System>)>(&FMOD::DSP::getSystemObject)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("FMOD", "System")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getSystemObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::addInput
// Il2CppName: addInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(::FMOD::DSP, ByRef<::FMOD::DSPConnection>, ::FMOD::DSPCONNECTION_TYPE)>(&FMOD::DSP::addInput)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->byval_arg;
    static auto* connection = &::il2cpp_utils::GetClassFromName("FMOD", "DSPConnection")->this_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("FMOD", "DSPCONNECTION_TYPE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "addInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, connection, type});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::disconnectFrom
// Il2CppName: disconnectFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(::FMOD::DSP, ::FMOD::DSPConnection)>(&FMOD::DSP::disconnectFrom)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->byval_arg;
    static auto* connection = &::il2cpp_utils::GetClassFromName("FMOD", "DSPConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "disconnectFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, connection});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::disconnectAll
// Il2CppName: disconnectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(bool, bool)>(&FMOD::DSP::disconnectAll)> {
  static const MethodInfo* get() {
    static auto* inputs = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* outputs = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "disconnectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputs, outputs});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getNumInputs
// Il2CppName: getNumInputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<int>)>(&FMOD::DSP::getNumInputs)> {
  static const MethodInfo* get() {
    static auto* numinputs = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getNumInputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numinputs});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getNumOutputs
// Il2CppName: getNumOutputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<int>)>(&FMOD::DSP::getNumOutputs)> {
  static const MethodInfo* get() {
    static auto* numoutputs = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getNumOutputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numoutputs});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getInput
// Il2CppName: getInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(int, ByRef<::FMOD::DSP>, ByRef<::FMOD::DSPConnection>)>(&FMOD::DSP::getInput)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* input = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->this_arg;
    static auto* inputconnection = &::il2cpp_utils::GetClassFromName("FMOD", "DSPConnection")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, input, inputconnection});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getOutput
// Il2CppName: getOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(int, ByRef<::FMOD::DSP>, ByRef<::FMOD::DSPConnection>)>(&FMOD::DSP::getOutput)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->this_arg;
    static auto* outputconnection = &::il2cpp_utils::GetClassFromName("FMOD", "DSPConnection")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, output, outputconnection});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::setActive
// Il2CppName: setActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(bool)>(&FMOD::DSP::setActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "setActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getActive
// Il2CppName: getActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<bool>)>(&FMOD::DSP::getActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::setBypass
// Il2CppName: setBypass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(bool)>(&FMOD::DSP::setBypass)> {
  static const MethodInfo* get() {
    static auto* bypass = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "setBypass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bypass});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getBypass
// Il2CppName: getBypass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<bool>)>(&FMOD::DSP::getBypass)> {
  static const MethodInfo* get() {
    static auto* bypass = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getBypass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bypass});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::setWetDryMix
// Il2CppName: setWetDryMix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(float, float, float)>(&FMOD::DSP::setWetDryMix)> {
  static const MethodInfo* get() {
    static auto* prewet = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* postwet = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dry = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "setWetDryMix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prewet, postwet, dry});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getWetDryMix
// Il2CppName: getWetDryMix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<float>, ByRef<float>, ByRef<float>)>(&FMOD::DSP::getWetDryMix)> {
  static const MethodInfo* get() {
    static auto* prewet = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* postwet = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* dry = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getWetDryMix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prewet, postwet, dry});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::setChannelFormat
// Il2CppName: setChannelFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(::FMOD::CHANNELMASK, int, ::FMOD::SPEAKERMODE)>(&FMOD::DSP::setChannelFormat)> {
  static const MethodInfo* get() {
    static auto* channelmask = &::il2cpp_utils::GetClassFromName("FMOD", "CHANNELMASK")->byval_arg;
    static auto* numchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* source_speakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "setChannelFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelmask, numchannels, source_speakermode});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getChannelFormat
// Il2CppName: getChannelFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<::FMOD::CHANNELMASK>, ByRef<int>, ByRef<::FMOD::SPEAKERMODE>)>(&FMOD::DSP::getChannelFormat)> {
  static const MethodInfo* get() {
    static auto* channelmask = &::il2cpp_utils::GetClassFromName("FMOD", "CHANNELMASK")->this_arg;
    static auto* numchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* source_speakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getChannelFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelmask, numchannels, source_speakermode});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getOutputChannelFormat
// Il2CppName: getOutputChannelFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(::FMOD::CHANNELMASK, int, ::FMOD::SPEAKERMODE, ByRef<::FMOD::CHANNELMASK>, ByRef<int>, ByRef<::FMOD::SPEAKERMODE>)>(&FMOD::DSP::getOutputChannelFormat)> {
  static const MethodInfo* get() {
    static auto* inmask = &::il2cpp_utils::GetClassFromName("FMOD", "CHANNELMASK")->byval_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inspeakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->byval_arg;
    static auto* outmask = &::il2cpp_utils::GetClassFromName("FMOD", "CHANNELMASK")->this_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* outspeakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getOutputChannelFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inmask, inchannels, inspeakermode, outmask, outchannels, outspeakermode});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::reset
// Il2CppName: reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)()>(&FMOD::DSP::reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::setParameterFloat
// Il2CppName: setParameterFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(int, float)>(&FMOD::DSP::setParameterFloat)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "setParameterFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::setParameterInt
// Il2CppName: setParameterInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(int, int)>(&FMOD::DSP::setParameterInt)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "setParameterInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::setParameterBool
// Il2CppName: setParameterBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(int, bool)>(&FMOD::DSP::setParameterBool)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "setParameterBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::setParameterData
// Il2CppName: setParameterData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(int, ::ArrayW<uint8_t>)>(&FMOD::DSP::setParameterData)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "setParameterData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, data});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getParameterFloat
// Il2CppName: getParameterFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(int, ByRef<float>)>(&FMOD::DSP::getParameterFloat)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getParameterFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getParameterInt
// Il2CppName: getParameterInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(int, ByRef<int>)>(&FMOD::DSP::getParameterInt)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getParameterInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getParameterBool
// Il2CppName: getParameterBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(int, ByRef<bool>)>(&FMOD::DSP::getParameterBool)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getParameterBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getParameterData
// Il2CppName: getParameterData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(int, ByRef<::System::IntPtr>, ByRef<uint>)>(&FMOD::DSP::getParameterData)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getParameterData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, data, length});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getNumParameters
// Il2CppName: getNumParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<int>)>(&FMOD::DSP::getNumParameters)> {
  static const MethodInfo* get() {
    static auto* numparams = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getNumParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numparams});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getParameterInfo
// Il2CppName: getParameterInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(int, ByRef<::FMOD::DSP_PARAMETER_DESC>)>(&FMOD::DSP::getParameterInfo)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* desc = &::il2cpp_utils::GetClassFromName("FMOD", "DSP_PARAMETER_DESC")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getParameterInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, desc});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getDataParameterIndex
// Il2CppName: getDataParameterIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(int, ByRef<int>)>(&FMOD::DSP::getDataParameterIndex)> {
  static const MethodInfo* get() {
    static auto* datatype = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getDataParameterIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{datatype, index});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::showConfigDialog
// Il2CppName: showConfigDialog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(::System::IntPtr, bool)>(&FMOD::DSP::showConfigDialog)> {
  static const MethodInfo* get() {
    static auto* hwnd = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* show = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "showConfigDialog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hwnd, show});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getInfo
// Il2CppName: getInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<::StringW>, ByRef<uint>, ByRef<int>, ByRef<int>, ByRef<int>)>(&FMOD::DSP::getInfo)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* configwidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* configheight = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, version, channels, configwidth, configheight});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getInfo
// Il2CppName: getInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<uint>, ByRef<int>, ByRef<int>, ByRef<int>)>(&FMOD::DSP::getInfo)> {
  static const MethodInfo* get() {
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* configwidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* configheight = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{version, channels, configwidth, configheight});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getType
// Il2CppName: getType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<::FMOD::DSP_TYPE>)>(&FMOD::DSP::getType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("FMOD", "DSP_TYPE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getIdle
// Il2CppName: getIdle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<bool>)>(&FMOD::DSP::getIdle)> {
  static const MethodInfo* get() {
    static auto* idle = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getIdle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idle});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::setUserData
// Il2CppName: setUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(::System::IntPtr)>(&FMOD::DSP::setUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "setUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getUserData
// Il2CppName: getUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<::System::IntPtr>)>(&FMOD::DSP::getUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::setMeteringEnabled
// Il2CppName: setMeteringEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(bool, bool)>(&FMOD::DSP::setMeteringEnabled)> {
  static const MethodInfo* get() {
    static auto* inputEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* outputEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "setMeteringEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputEnabled, outputEnabled});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getMeteringEnabled
// Il2CppName: getMeteringEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<bool>, ByRef<bool>)>(&FMOD::DSP::getMeteringEnabled)> {
  static const MethodInfo* get() {
    static auto* inputEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* outputEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getMeteringEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputEnabled, outputEnabled});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getMeteringInfo
// Il2CppName: getMeteringInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(::System::IntPtr, ByRef<::FMOD::DSP_METERING_INFO>)>(&FMOD::DSP::getMeteringInfo)> {
  static const MethodInfo* get() {
    static auto* zero = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* outputInfo = &::il2cpp_utils::GetClassFromName("FMOD", "DSP_METERING_INFO")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getMeteringInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zero, outputInfo});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getMeteringInfo
// Il2CppName: getMeteringInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<::FMOD::DSP_METERING_INFO>, ::System::IntPtr)>(&FMOD::DSP::getMeteringInfo)> {
  static const MethodInfo* get() {
    static auto* inputInfo = &::il2cpp_utils::GetClassFromName("FMOD", "DSP_METERING_INFO")->this_arg;
    static auto* zero = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getMeteringInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputInfo, zero});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::getCPUUsage
// Il2CppName: getCPUUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::DSP::*)(ByRef<uint>, ByRef<uint>)>(&FMOD::DSP::getCPUUsage)> {
  static const MethodInfo* get() {
    static auto* exclusive = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* inclusive = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "getCPUUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exclusive, inclusive});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_Release
// Il2CppName: FMOD5_DSP_Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::DSP::FMOD5_DSP_Release)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetSystemObject
// Il2CppName: FMOD5_DSP_GetSystemObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::DSP::FMOD5_DSP_GetSystemObject)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetSystemObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, system});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_AddInput
// Il2CppName: FMOD5_DSP_AddInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, ByRef<::System::IntPtr>, ::FMOD::DSPCONNECTION_TYPE)>(&FMOD::DSP::FMOD5_DSP_AddInput)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* connection = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("FMOD", "DSPCONNECTION_TYPE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_AddInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, target, connection, type});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_DisconnectFrom
// Il2CppName: FMOD5_DSP_DisconnectFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, ::System::IntPtr)>(&FMOD::DSP::FMOD5_DSP_DisconnectFrom)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* connection = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_DisconnectFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, target, connection});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_DisconnectAll
// Il2CppName: FMOD5_DSP_DisconnectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool, bool)>(&FMOD::DSP::FMOD5_DSP_DisconnectAll)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* inputs = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* outputs = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_DisconnectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, inputs, outputs});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetNumInputs
// Il2CppName: FMOD5_DSP_GetNumInputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::DSP::FMOD5_DSP_GetNumInputs)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numinputs = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetNumInputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, numinputs});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetNumOutputs
// Il2CppName: FMOD5_DSP_GetNumOutputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::DSP::FMOD5_DSP_GetNumOutputs)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numoutputs = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetNumOutputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, numoutputs});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetInput
// Il2CppName: FMOD5_DSP_GetInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::System::IntPtr>, ByRef<::System::IntPtr>)>(&FMOD::DSP::FMOD5_DSP_GetInput)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* inputconnection = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index, input, inputconnection});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetOutput
// Il2CppName: FMOD5_DSP_GetOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::System::IntPtr>, ByRef<::System::IntPtr>)>(&FMOD::DSP::FMOD5_DSP_GetOutput)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* outputconnection = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index, output, outputconnection});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_SetActive
// Il2CppName: FMOD5_DSP_SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool)>(&FMOD::DSP::FMOD5_DSP_SetActive)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, active});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetActive
// Il2CppName: FMOD5_DSP_GetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::DSP::FMOD5_DSP_GetActive)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, active});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_SetBypass
// Il2CppName: FMOD5_DSP_SetBypass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool)>(&FMOD::DSP::FMOD5_DSP_SetBypass)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* bypass = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_SetBypass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, bypass});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetBypass
// Il2CppName: FMOD5_DSP_GetBypass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::DSP::FMOD5_DSP_GetBypass)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* bypass = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetBypass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, bypass});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_SetWetDryMix
// Il2CppName: FMOD5_DSP_SetWetDryMix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float, float, float)>(&FMOD::DSP::FMOD5_DSP_SetWetDryMix)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* prewet = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* postwet = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dry = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_SetWetDryMix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, prewet, postwet, dry});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetWetDryMix
// Il2CppName: FMOD5_DSP_GetWetDryMix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>, ByRef<float>, ByRef<float>)>(&FMOD::DSP::FMOD5_DSP_GetWetDryMix)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* prewet = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* postwet = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* dry = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetWetDryMix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, prewet, postwet, dry});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_SetChannelFormat
// Il2CppName: FMOD5_DSP_SetChannelFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::CHANNELMASK, int, ::FMOD::SPEAKERMODE)>(&FMOD::DSP::FMOD5_DSP_SetChannelFormat)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channelmask = &::il2cpp_utils::GetClassFromName("FMOD", "CHANNELMASK")->byval_arg;
    static auto* numchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* source_speakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_SetChannelFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, channelmask, numchannels, source_speakermode});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetChannelFormat
// Il2CppName: FMOD5_DSP_GetChannelFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::CHANNELMASK>, ByRef<int>, ByRef<::FMOD::SPEAKERMODE>)>(&FMOD::DSP::FMOD5_DSP_GetChannelFormat)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channelmask = &::il2cpp_utils::GetClassFromName("FMOD", "CHANNELMASK")->this_arg;
    static auto* numchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* source_speakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetChannelFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, channelmask, numchannels, source_speakermode});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetOutputChannelFormat
// Il2CppName: FMOD5_DSP_GetOutputChannelFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::CHANNELMASK, int, ::FMOD::SPEAKERMODE, ByRef<::FMOD::CHANNELMASK>, ByRef<int>, ByRef<::FMOD::SPEAKERMODE>)>(&FMOD::DSP::FMOD5_DSP_GetOutputChannelFormat)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* inmask = &::il2cpp_utils::GetClassFromName("FMOD", "CHANNELMASK")->byval_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inspeakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->byval_arg;
    static auto* outmask = &::il2cpp_utils::GetClassFromName("FMOD", "CHANNELMASK")->this_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* outspeakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetOutputChannelFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, inmask, inchannels, inspeakermode, outmask, outchannels, outspeakermode});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_Reset
// Il2CppName: FMOD5_DSP_Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::DSP::FMOD5_DSP_Reset)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_SetParameterFloat
// Il2CppName: FMOD5_DSP_SetParameterFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, float)>(&FMOD::DSP::FMOD5_DSP_SetParameterFloat)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_SetParameterFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index, value});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_SetParameterInt
// Il2CppName: FMOD5_DSP_SetParameterInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, int)>(&FMOD::DSP::FMOD5_DSP_SetParameterInt)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_SetParameterInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index, value});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_SetParameterBool
// Il2CppName: FMOD5_DSP_SetParameterBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, bool)>(&FMOD::DSP::FMOD5_DSP_SetParameterBool)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_SetParameterBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index, value});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_SetParameterData
// Il2CppName: FMOD5_DSP_SetParameterData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ::System::IntPtr, uint)>(&FMOD::DSP::FMOD5_DSP_SetParameterData)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_SetParameterData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index, data, length});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetParameterFloat
// Il2CppName: FMOD5_DSP_GetParameterFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<float>, ::System::IntPtr, int)>(&FMOD::DSP::FMOD5_DSP_GetParameterFloat)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* valuestr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* valuestrlen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetParameterFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index, value, valuestr, valuestrlen});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetParameterInt
// Il2CppName: FMOD5_DSP_GetParameterInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<int>, ::System::IntPtr, int)>(&FMOD::DSP::FMOD5_DSP_GetParameterInt)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* valuestr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* valuestrlen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetParameterInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index, value, valuestr, valuestrlen});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetParameterBool
// Il2CppName: FMOD5_DSP_GetParameterBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<bool>, ::System::IntPtr, int)>(&FMOD::DSP::FMOD5_DSP_GetParameterBool)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* valuestr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* valuestrlen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetParameterBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index, value, valuestr, valuestrlen});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetParameterData
// Il2CppName: FMOD5_DSP_GetParameterData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::System::IntPtr>, ByRef<uint>, ::System::IntPtr, int)>(&FMOD::DSP::FMOD5_DSP_GetParameterData)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* valuestr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* valuestrlen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetParameterData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index, data, length, valuestr, valuestrlen});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetNumParameters
// Il2CppName: FMOD5_DSP_GetNumParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::DSP::FMOD5_DSP_GetNumParameters)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numparams = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetNumParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, numparams});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetParameterInfo
// Il2CppName: FMOD5_DSP_GetParameterInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::FMOD::DSP_PARAMETER_DESC>)>(&FMOD::DSP::FMOD5_DSP_GetParameterInfo)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* desc = &::il2cpp_utils::GetClassFromName("FMOD", "DSP_PARAMETER_DESC")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetParameterInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index, desc});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetDataParameterIndex
// Il2CppName: FMOD5_DSP_GetDataParameterIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<int>)>(&FMOD::DSP::FMOD5_DSP_GetDataParameterIndex)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* datatype = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetDataParameterIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, datatype, index});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_ShowConfigDialog
// Il2CppName: FMOD5_DSP_ShowConfigDialog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, bool)>(&FMOD::DSP::FMOD5_DSP_ShowConfigDialog)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* hwnd = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* show = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_ShowConfigDialog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, hwnd, show});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetInfo
// Il2CppName: FMOD5_DSP_GetInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, ByRef<uint>, ByRef<int>, ByRef<int>, ByRef<int>)>(&FMOD::DSP::FMOD5_DSP_GetInfo)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* configwidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* configheight = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, name, version, channels, configwidth, configheight});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetType
// Il2CppName: FMOD5_DSP_GetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::DSP_TYPE>)>(&FMOD::DSP::FMOD5_DSP_GetType)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("FMOD", "DSP_TYPE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, type});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetIdle
// Il2CppName: FMOD5_DSP_GetIdle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::DSP::FMOD5_DSP_GetIdle)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* idle = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetIdle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, idle});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_SetUserData
// Il2CppName: FMOD5_DSP_SetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::DSP::FMOD5_DSP_SetUserData)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_SetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetUserData
// Il2CppName: FMOD5_DSP_GetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::DSP::FMOD5_DSP_GetUserData)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_SetMeteringEnabled
// Il2CppName: FMOD5_DSP_SetMeteringEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool, bool)>(&FMOD::DSP::FMOD5_DSP_SetMeteringEnabled)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* inputEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* outputEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_SetMeteringEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, inputEnabled, outputEnabled});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetMeteringEnabled
// Il2CppName: FMOD5_DSP_GetMeteringEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>, ByRef<bool>)>(&FMOD::DSP::FMOD5_DSP_GetMeteringEnabled)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* inputEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* outputEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetMeteringEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, inputEnabled, outputEnabled});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetMeteringInfo
// Il2CppName: FMOD5_DSP_GetMeteringInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, ByRef<::FMOD::DSP_METERING_INFO>)>(&FMOD::DSP::FMOD5_DSP_GetMeteringInfo)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* zero = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* outputInfo = &::il2cpp_utils::GetClassFromName("FMOD", "DSP_METERING_INFO")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetMeteringInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, zero, outputInfo});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetMeteringInfo
// Il2CppName: FMOD5_DSP_GetMeteringInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::DSP_METERING_INFO>, ::System::IntPtr)>(&FMOD::DSP::FMOD5_DSP_GetMeteringInfo)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* inputInfo = &::il2cpp_utils::GetClassFromName("FMOD", "DSP_METERING_INFO")->this_arg;
    static auto* zero = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetMeteringInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, inputInfo, zero});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::FMOD5_DSP_GetCPUUsage
// Il2CppName: FMOD5_DSP_GetCPUUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint>, ByRef<uint>)>(&FMOD::DSP::FMOD5_DSP_GetCPUUsage)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* exclusive = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* inclusive = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "FMOD5_DSP_GetCPUUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, exclusive, inclusive});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::hasHandle
// Il2CppName: hasHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::DSP::*)()>(&FMOD::DSP::hasHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "hasHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::DSP::clearHandle
// Il2CppName: clearHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::DSP::*)()>(&FMOD::DSP::clearHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::DSP), "clearHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
