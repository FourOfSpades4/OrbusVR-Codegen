// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: FMOD.TAGTYPE
#include "FMOD/TAGTYPE.hpp"
// Including type: FMOD.TAGDATATYPE
#include "FMOD/TAGDATATYPE.hpp"
// Including type: FMOD.StringWrapper
#include "FMOD/StringWrapper.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: TAG
  struct TAG;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::TAG, "FMOD", "TAG");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x1D
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.TAG
  // [TokenAttribute] Offset: FFFFFFFF
  struct TAG/*, public ::System::ValueType*/ {
    public:
    public:
    // public FMOD.TAGTYPE type
    // Size: 0x4
    // Offset: 0x0
    ::FMOD::TAGTYPE type;
    // Field size check
    static_assert(sizeof(::FMOD::TAGTYPE) == 0x4);
    // public FMOD.TAGDATATYPE datatype
    // Size: 0x4
    // Offset: 0x4
    ::FMOD::TAGDATATYPE datatype;
    // Field size check
    static_assert(sizeof(::FMOD::TAGDATATYPE) == 0x4);
    // public FMOD.StringWrapper name
    // Size: 0x8
    // Offset: 0x8
    ::FMOD::StringWrapper name;
    // Field size check
    static_assert(sizeof(::FMOD::StringWrapper) == 0x8);
    // public System.IntPtr data
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr data;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.UInt32 datalen
    // Size: 0x4
    // Offset: 0x18
    uint datalen;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Boolean updated
    // Size: 0x1
    // Offset: 0x1C
    bool updated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: TAG
    constexpr TAG(::FMOD::TAGTYPE type_ = {}, ::FMOD::TAGDATATYPE datatype_ = {}, ::FMOD::StringWrapper name_ = {}, ::System::IntPtr data_ = {}, uint datalen_ = {}, bool updated_ = {}) noexcept : type{type_}, datatype{datatype_}, name{name_}, data{data_}, datalen{datalen_}, updated{updated_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public FMOD.TAGTYPE type
    [[deprecated("Use field access instead!")]] ::FMOD::TAGTYPE& dyn_type();
    // Get instance field reference: public FMOD.TAGDATATYPE datatype
    [[deprecated("Use field access instead!")]] ::FMOD::TAGDATATYPE& dyn_datatype();
    // Get instance field reference: public FMOD.StringWrapper name
    [[deprecated("Use field access instead!")]] ::FMOD::StringWrapper& dyn_name();
    // Get instance field reference: public System.IntPtr data
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_data();
    // Get instance field reference: public System.UInt32 datalen
    [[deprecated("Use field access instead!")]] uint& dyn_datalen();
    // Get instance field reference: public System.Boolean updated
    [[deprecated("Use field access instead!")]] bool& dyn_updated();
  }; // FMOD.TAG
  #pragma pack(pop)
  static check_size<sizeof(TAG), 28 + sizeof(bool)> __FMOD_TAGSizeCheck;
  static_assert(sizeof(TAG) == 0x1D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
