// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: DSP_PARAMETER_SIDECHAIN
  struct DSP_PARAMETER_SIDECHAIN;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::DSP_PARAMETER_SIDECHAIN, "FMOD", "DSP_PARAMETER_SIDECHAIN");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.DSP_PARAMETER_SIDECHAIN
  // [TokenAttribute] Offset: FFFFFFFF
  struct DSP_PARAMETER_SIDECHAIN/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 sidechainenable
    // Size: 0x4
    // Offset: 0x0
    int sidechainenable;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: DSP_PARAMETER_SIDECHAIN
    constexpr DSP_PARAMETER_SIDECHAIN(int sidechainenable_ = {}) noexcept : sidechainenable{sidechainenable_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return sidechainenable;
    }
    // Get instance field reference: public System.Int32 sidechainenable
    [[deprecated("Use field access instead!")]] int& dyn_sidechainenable();
  }; // FMOD.DSP_PARAMETER_SIDECHAIN
  #pragma pack(pop)
  static check_size<sizeof(DSP_PARAMETER_SIDECHAIN), 0 + sizeof(int)> __FMOD_DSP_PARAMETER_SIDECHAINSizeCheck;
  static_assert(sizeof(DSP_PARAMETER_SIDECHAIN) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
