// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
  // Forward declaring type: System
  struct System;
  // Forward declaring type: VECTOR
  struct VECTOR;
  // Forward declaring type: TIMEUNIT
  struct TIMEUNIT;
  // Forward declaring type: SOUND_TYPE
  struct SOUND_TYPE;
  // Forward declaring type: SOUND_FORMAT
  struct SOUND_FORMAT;
  // Forward declaring type: TAG
  struct TAG;
  // Forward declaring type: OPENSTATE
  struct OPENSTATE;
  // Forward declaring type: SoundGroup
  struct SoundGroup;
  // Forward declaring type: MODE
  struct MODE;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: Sound
  struct Sound;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Sound, "FMOD", "Sound");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Sound
  // [TokenAttribute] Offset: FFFFFFFF
  struct Sound/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: Sound
    constexpr Sound(::System::IntPtr handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return handle;
    }
    // Get instance field reference: public System.IntPtr handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_handle();
    // public FMOD.RESULT release()
    // Offset: 0xBBD97C
    ::FMOD::RESULT release();
    // public FMOD.RESULT getSystemObject(out FMOD.System system)
    // Offset: 0xBBD984
    ::FMOD::RESULT getSystemObject(ByRef<::FMOD::System> system);
    // public FMOD.RESULT lock(System.UInt32 offset, System.UInt32 length, out System.IntPtr ptr1, out System.IntPtr ptr2, out System.UInt32 len1, out System.UInt32 len2)
    // Offset: 0xBBD98C
    ::FMOD::RESULT lock(uint offset, uint length, ByRef<::System::IntPtr> ptr1, ByRef<::System::IntPtr> ptr2, ByRef<uint> len1, ByRef<uint> len2);
    // public FMOD.RESULT unlock(System.IntPtr ptr1, System.IntPtr ptr2, System.UInt32 len1, System.UInt32 len2)
    // Offset: 0xBBD994
    ::FMOD::RESULT unlock(::System::IntPtr ptr1, ::System::IntPtr ptr2, uint len1, uint len2);
    // public FMOD.RESULT setDefaults(System.Single frequency, System.Int32 priority)
    // Offset: 0xBBD99C
    ::FMOD::RESULT setDefaults(float frequency, int priority);
    // public FMOD.RESULT getDefaults(out System.Single frequency, out System.Int32 priority)
    // Offset: 0xBBD9A4
    ::FMOD::RESULT getDefaults(ByRef<float> frequency, ByRef<int> priority);
    // public FMOD.RESULT set3DMinMaxDistance(System.Single min, System.Single max)
    // Offset: 0xBBD9AC
    ::FMOD::RESULT set3DMinMaxDistance(float min, float max);
    // public FMOD.RESULT get3DMinMaxDistance(out System.Single min, out System.Single max)
    // Offset: 0xBBD9B4
    ::FMOD::RESULT get3DMinMaxDistance(ByRef<float> min, ByRef<float> max);
    // public FMOD.RESULT set3DConeSettings(System.Single insideconeangle, System.Single outsideconeangle, System.Single outsidevolume)
    // Offset: 0xBBD9BC
    ::FMOD::RESULT set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume);
    // public FMOD.RESULT get3DConeSettings(out System.Single insideconeangle, out System.Single outsideconeangle, out System.Single outsidevolume)
    // Offset: 0xBBD9C4
    ::FMOD::RESULT get3DConeSettings(ByRef<float> insideconeangle, ByRef<float> outsideconeangle, ByRef<float> outsidevolume);
    // public FMOD.RESULT set3DCustomRolloff(ref FMOD.VECTOR points, System.Int32 numpoints)
    // Offset: 0xBBD9CC
    ::FMOD::RESULT set3DCustomRolloff(ByRef<::FMOD::VECTOR> points, int numpoints);
    // public FMOD.RESULT get3DCustomRolloff(out System.IntPtr points, out System.Int32 numpoints)
    // Offset: 0xBBD9D4
    ::FMOD::RESULT get3DCustomRolloff(ByRef<::System::IntPtr> points, ByRef<int> numpoints);
    // public FMOD.RESULT getSubSound(System.Int32 index, out FMOD.Sound subsound)
    // Offset: 0xBBD9DC
    ::FMOD::RESULT getSubSound(int index, ByRef<::FMOD::Sound> subsound);
    // public FMOD.RESULT getSubSoundParent(out FMOD.Sound parentsound)
    // Offset: 0xBBD9E4
    ::FMOD::RESULT getSubSoundParent(ByRef<::FMOD::Sound> parentsound);
    // public FMOD.RESULT getName(out System.String name, System.Int32 namelen)
    // Offset: 0xBBD9EC
    ::FMOD::RESULT getName(ByRef<::StringW> name, int namelen);
    // public FMOD.RESULT getLength(out System.UInt32 length, FMOD.TIMEUNIT lengthtype)
    // Offset: 0xBBD9F4
    ::FMOD::RESULT getLength(ByRef<uint> length, ::FMOD::TIMEUNIT lengthtype);
    // public FMOD.RESULT getFormat(out FMOD.SOUND_TYPE type, out FMOD.SOUND_FORMAT format, out System.Int32 channels, out System.Int32 bits)
    // Offset: 0xBBD9FC
    ::FMOD::RESULT getFormat(ByRef<::FMOD::SOUND_TYPE> type, ByRef<::FMOD::SOUND_FORMAT> format, ByRef<int> channels, ByRef<int> bits);
    // public FMOD.RESULT getNumSubSounds(out System.Int32 numsubsounds)
    // Offset: 0xBBDA04
    ::FMOD::RESULT getNumSubSounds(ByRef<int> numsubsounds);
    // public FMOD.RESULT getNumTags(out System.Int32 numtags, out System.Int32 numtagsupdated)
    // Offset: 0xBBDA0C
    ::FMOD::RESULT getNumTags(ByRef<int> numtags, ByRef<int> numtagsupdated);
    // public FMOD.RESULT getTag(System.String name, System.Int32 index, out FMOD.TAG tag)
    // Offset: 0xBBDA14
    ::FMOD::RESULT getTag(::StringW name, int index, ByRef<::FMOD::TAG> tag);
    // public FMOD.RESULT getOpenState(out FMOD.OPENSTATE openstate, out System.UInt32 percentbuffered, out System.Boolean starving, out System.Boolean diskbusy)
    // Offset: 0xBBDA1C
    ::FMOD::RESULT getOpenState(ByRef<::FMOD::OPENSTATE> openstate, ByRef<uint> percentbuffered, ByRef<bool> starving, ByRef<bool> diskbusy);
    // public FMOD.RESULT readData(System.IntPtr buffer, System.UInt32 lenbytes, out System.UInt32 read)
    // Offset: 0xBBDA24
    ::FMOD::RESULT readData(::System::IntPtr buffer, uint lenbytes, ByRef<uint> read);
    // public FMOD.RESULT seekData(System.UInt32 pcm)
    // Offset: 0xBBDA2C
    ::FMOD::RESULT seekData(uint pcm);
    // public FMOD.RESULT setSoundGroup(FMOD.SoundGroup soundgroup)
    // Offset: 0xBBDA34
    ::FMOD::RESULT setSoundGroup(::FMOD::SoundGroup soundgroup);
    // public FMOD.RESULT getSoundGroup(out FMOD.SoundGroup soundgroup)
    // Offset: 0xBBDA3C
    ::FMOD::RESULT getSoundGroup(ByRef<::FMOD::SoundGroup> soundgroup);
    // public FMOD.RESULT getNumSyncPoints(out System.Int32 numsyncpoints)
    // Offset: 0xBBDA44
    ::FMOD::RESULT getNumSyncPoints(ByRef<int> numsyncpoints);
    // public FMOD.RESULT getSyncPoint(System.Int32 index, out System.IntPtr point)
    // Offset: 0xBBDA4C
    ::FMOD::RESULT getSyncPoint(int index, ByRef<::System::IntPtr> point);
    // public FMOD.RESULT getSyncPointInfo(System.IntPtr point, out System.String name, System.Int32 namelen, out System.UInt32 offset, FMOD.TIMEUNIT offsettype)
    // Offset: 0xBBDA54
    ::FMOD::RESULT getSyncPointInfo(::System::IntPtr point, ByRef<::StringW> name, int namelen, ByRef<uint> offset, ::FMOD::TIMEUNIT offsettype);
    // public FMOD.RESULT getSyncPointInfo(System.IntPtr point, out System.UInt32 offset, FMOD.TIMEUNIT offsettype)
    // Offset: 0xBBDA5C
    ::FMOD::RESULT getSyncPointInfo(::System::IntPtr point, ByRef<uint> offset, ::FMOD::TIMEUNIT offsettype);
    // public FMOD.RESULT addSyncPoint(System.UInt32 offset, FMOD.TIMEUNIT offsettype, System.String name, out System.IntPtr point)
    // Offset: 0xBBDA64
    ::FMOD::RESULT addSyncPoint(uint offset, ::FMOD::TIMEUNIT offsettype, ::StringW name, ByRef<::System::IntPtr> point);
    // public FMOD.RESULT deleteSyncPoint(System.IntPtr point)
    // Offset: 0xBBDA6C
    ::FMOD::RESULT deleteSyncPoint(::System::IntPtr point);
    // public FMOD.RESULT setMode(FMOD.MODE mode)
    // Offset: 0xBBDA74
    ::FMOD::RESULT setMode(::FMOD::MODE mode);
    // public FMOD.RESULT getMode(out FMOD.MODE mode)
    // Offset: 0xBBDA7C
    ::FMOD::RESULT getMode(ByRef<::FMOD::MODE> mode);
    // public FMOD.RESULT setLoopCount(System.Int32 loopcount)
    // Offset: 0xBBDA84
    ::FMOD::RESULT setLoopCount(int loopcount);
    // public FMOD.RESULT getLoopCount(out System.Int32 loopcount)
    // Offset: 0xBBDA8C
    ::FMOD::RESULT getLoopCount(ByRef<int> loopcount);
    // public FMOD.RESULT setLoopPoints(System.UInt32 loopstart, FMOD.TIMEUNIT loopstarttype, System.UInt32 loopend, FMOD.TIMEUNIT loopendtype)
    // Offset: 0xBBDA94
    ::FMOD::RESULT setLoopPoints(uint loopstart, ::FMOD::TIMEUNIT loopstarttype, uint loopend, ::FMOD::TIMEUNIT loopendtype);
    // public FMOD.RESULT getLoopPoints(out System.UInt32 loopstart, FMOD.TIMEUNIT loopstarttype, out System.UInt32 loopend, FMOD.TIMEUNIT loopendtype)
    // Offset: 0xBBDA9C
    ::FMOD::RESULT getLoopPoints(ByRef<uint> loopstart, ::FMOD::TIMEUNIT loopstarttype, ByRef<uint> loopend, ::FMOD::TIMEUNIT loopendtype);
    // public FMOD.RESULT getMusicNumChannels(out System.Int32 numchannels)
    // Offset: 0xBBDAA4
    ::FMOD::RESULT getMusicNumChannels(ByRef<int> numchannels);
    // public FMOD.RESULT setMusicChannelVolume(System.Int32 channel, System.Single volume)
    // Offset: 0xBBDAAC
    ::FMOD::RESULT setMusicChannelVolume(int channel, float volume);
    // public FMOD.RESULT getMusicChannelVolume(System.Int32 channel, out System.Single volume)
    // Offset: 0xBBDAB4
    ::FMOD::RESULT getMusicChannelVolume(int channel, ByRef<float> volume);
    // public FMOD.RESULT setMusicSpeed(System.Single speed)
    // Offset: 0xBBDABC
    ::FMOD::RESULT setMusicSpeed(float speed);
    // public FMOD.RESULT getMusicSpeed(out System.Single speed)
    // Offset: 0xBBDAC4
    ::FMOD::RESULT getMusicSpeed(ByRef<float> speed);
    // public FMOD.RESULT setUserData(System.IntPtr userdata)
    // Offset: 0xBBDACC
    ::FMOD::RESULT setUserData(::System::IntPtr userdata);
    // public FMOD.RESULT getUserData(out System.IntPtr userdata)
    // Offset: 0xBBDAD4
    ::FMOD::RESULT getUserData(ByRef<::System::IntPtr> userdata);
    // static private FMOD.RESULT FMOD5_Sound_Release(System.IntPtr sound)
    // Offset: 0x22E1218
    static ::FMOD::RESULT FMOD5_Sound_Release(::System::IntPtr sound);
    // static private FMOD.RESULT FMOD5_Sound_GetSystemObject(System.IntPtr sound, out System.IntPtr system)
    // Offset: 0x22E12BC
    static ::FMOD::RESULT FMOD5_Sound_GetSystemObject(::System::IntPtr sound, ByRef<::System::IntPtr> system);
    // static private FMOD.RESULT FMOD5_Sound_Lock(System.IntPtr sound, System.UInt32 offset, System.UInt32 length, out System.IntPtr ptr1, out System.IntPtr ptr2, out System.UInt32 len1, out System.UInt32 len2)
    // Offset: 0x22E1370
    static ::FMOD::RESULT FMOD5_Sound_Lock(::System::IntPtr sound, uint offset, uint length, ByRef<::System::IntPtr> ptr1, ByRef<::System::IntPtr> ptr2, ByRef<uint> len1, ByRef<uint> len2);
    // static private FMOD.RESULT FMOD5_Sound_Unlock(System.IntPtr sound, System.IntPtr ptr1, System.IntPtr ptr2, System.UInt32 len1, System.UInt32 len2)
    // Offset: 0x22E145C
    static ::FMOD::RESULT FMOD5_Sound_Unlock(::System::IntPtr sound, ::System::IntPtr ptr1, ::System::IntPtr ptr2, uint len1, uint len2);
    // static private FMOD.RESULT FMOD5_Sound_SetDefaults(System.IntPtr sound, System.Single frequency, System.Int32 priority)
    // Offset: 0x22E1530
    static ::FMOD::RESULT FMOD5_Sound_SetDefaults(::System::IntPtr sound, float frequency, int priority);
    // static private FMOD.RESULT FMOD5_Sound_GetDefaults(System.IntPtr sound, out System.Single frequency, out System.Int32 priority)
    // Offset: 0x22E15F4
    static ::FMOD::RESULT FMOD5_Sound_GetDefaults(::System::IntPtr sound, ByRef<float> frequency, ByRef<int> priority);
    // static private FMOD.RESULT FMOD5_Sound_Set3DMinMaxDistance(System.IntPtr sound, System.Single min, System.Single max)
    // Offset: 0x22E16B0
    static ::FMOD::RESULT FMOD5_Sound_Set3DMinMaxDistance(::System::IntPtr sound, float min, float max);
    // static private FMOD.RESULT FMOD5_Sound_Get3DMinMaxDistance(System.IntPtr sound, out System.Single min, out System.Single max)
    // Offset: 0x22E176C
    static ::FMOD::RESULT FMOD5_Sound_Get3DMinMaxDistance(::System::IntPtr sound, ByRef<float> min, ByRef<float> max);
    // static private FMOD.RESULT FMOD5_Sound_Set3DConeSettings(System.IntPtr sound, System.Single insideconeangle, System.Single outsideconeangle, System.Single outsidevolume)
    // Offset: 0x22E1828
    static ::FMOD::RESULT FMOD5_Sound_Set3DConeSettings(::System::IntPtr sound, float insideconeangle, float outsideconeangle, float outsidevolume);
    // static private FMOD.RESULT FMOD5_Sound_Get3DConeSettings(System.IntPtr sound, out System.Single insideconeangle, out System.Single outsideconeangle, out System.Single outsidevolume)
    // Offset: 0x22E18F4
    static ::FMOD::RESULT FMOD5_Sound_Get3DConeSettings(::System::IntPtr sound, ByRef<float> insideconeangle, ByRef<float> outsideconeangle, ByRef<float> outsidevolume);
    // static private FMOD.RESULT FMOD5_Sound_Set3DCustomRolloff(System.IntPtr sound, ref FMOD.VECTOR points, System.Int32 numpoints)
    // Offset: 0x22E19C0
    static ::FMOD::RESULT FMOD5_Sound_Set3DCustomRolloff(::System::IntPtr sound, ByRef<::FMOD::VECTOR> points, int numpoints);
    // static private FMOD.RESULT FMOD5_Sound_Get3DCustomRolloff(System.IntPtr sound, out System.IntPtr points, out System.Int32 numpoints)
    // Offset: 0x22E1A7C
    static ::FMOD::RESULT FMOD5_Sound_Get3DCustomRolloff(::System::IntPtr sound, ByRef<::System::IntPtr> points, ByRef<int> numpoints);
    // static private FMOD.RESULT FMOD5_Sound_GetSubSound(System.IntPtr sound, System.Int32 index, out System.IntPtr subsound)
    // Offset: 0x22E1B38
    static ::FMOD::RESULT FMOD5_Sound_GetSubSound(::System::IntPtr sound, int index, ByRef<::System::IntPtr> subsound);
    // static private FMOD.RESULT FMOD5_Sound_GetSubSoundParent(System.IntPtr sound, out System.IntPtr parentsound)
    // Offset: 0x22E1BF4
    static ::FMOD::RESULT FMOD5_Sound_GetSubSoundParent(::System::IntPtr sound, ByRef<::System::IntPtr> parentsound);
    // static private FMOD.RESULT FMOD5_Sound_GetName(System.IntPtr sound, System.IntPtr name, System.Int32 namelen)
    // Offset: 0x22E1E50
    static ::FMOD::RESULT FMOD5_Sound_GetName(::System::IntPtr sound, ::System::IntPtr name, int namelen);
    // static private FMOD.RESULT FMOD5_Sound_GetLength(System.IntPtr sound, out System.UInt32 length, FMOD.TIMEUNIT lengthtype)
    // Offset: 0x22E2170
    static ::FMOD::RESULT FMOD5_Sound_GetLength(::System::IntPtr sound, ByRef<uint> length, ::FMOD::TIMEUNIT lengthtype);
    // static private FMOD.RESULT FMOD5_Sound_GetFormat(System.IntPtr sound, out FMOD.SOUND_TYPE type, out FMOD.SOUND_FORMAT format, out System.Int32 channels, out System.Int32 bits)
    // Offset: 0x22E222C
    static ::FMOD::RESULT FMOD5_Sound_GetFormat(::System::IntPtr sound, ByRef<::FMOD::SOUND_TYPE> type, ByRef<::FMOD::SOUND_FORMAT> format, ByRef<int> channels, ByRef<int> bits);
    // static private FMOD.RESULT FMOD5_Sound_GetNumSubSounds(System.IntPtr sound, out System.Int32 numsubsounds)
    // Offset: 0x22E2300
    static ::FMOD::RESULT FMOD5_Sound_GetNumSubSounds(::System::IntPtr sound, ByRef<int> numsubsounds);
    // static private FMOD.RESULT FMOD5_Sound_GetNumTags(System.IntPtr sound, out System.Int32 numtags, out System.Int32 numtagsupdated)
    // Offset: 0x22E23B4
    static ::FMOD::RESULT FMOD5_Sound_GetNumTags(::System::IntPtr sound, ByRef<int> numtags, ByRef<int> numtagsupdated);
    // static private FMOD.RESULT FMOD5_Sound_GetTag(System.IntPtr sound, System.Byte[] name, System.Int32 index, out FMOD.TAG tag)
    // Offset: 0x22E25CC
    static ::FMOD::RESULT FMOD5_Sound_GetTag(::System::IntPtr sound, ::ArrayW<uint8_t> name, int index, ByRef<::FMOD::TAG> tag);
    // static private FMOD.RESULT FMOD5_Sound_GetOpenState(System.IntPtr sound, out FMOD.OPENSTATE openstate, out System.UInt32 percentbuffered, out System.Boolean starving, out System.Boolean diskbusy)
    // Offset: 0x22E26DC
    static ::FMOD::RESULT FMOD5_Sound_GetOpenState(::System::IntPtr sound, ByRef<::FMOD::OPENSTATE> openstate, ByRef<uint> percentbuffered, ByRef<bool> starving, ByRef<bool> diskbusy);
    // static private FMOD.RESULT FMOD5_Sound_ReadData(System.IntPtr sound, System.IntPtr buffer, System.UInt32 lenbytes, out System.UInt32 read)
    // Offset: 0x22E27D4
    static ::FMOD::RESULT FMOD5_Sound_ReadData(::System::IntPtr sound, ::System::IntPtr buffer, uint lenbytes, ByRef<uint> read);
    // static private FMOD.RESULT FMOD5_Sound_SeekData(System.IntPtr sound, System.UInt32 pcm)
    // Offset: 0x22E28A0
    static ::FMOD::RESULT FMOD5_Sound_SeekData(::System::IntPtr sound, uint pcm);
    // static private FMOD.RESULT FMOD5_Sound_SetSoundGroup(System.IntPtr sound, System.IntPtr soundgroup)
    // Offset: 0x22E2954
    static ::FMOD::RESULT FMOD5_Sound_SetSoundGroup(::System::IntPtr sound, ::System::IntPtr soundgroup);
    // static private FMOD.RESULT FMOD5_Sound_GetSoundGroup(System.IntPtr sound, out System.IntPtr soundgroup)
    // Offset: 0x22E2A08
    static ::FMOD::RESULT FMOD5_Sound_GetSoundGroup(::System::IntPtr sound, ByRef<::System::IntPtr> soundgroup);
    // static private FMOD.RESULT FMOD5_Sound_GetNumSyncPoints(System.IntPtr sound, out System.Int32 numsyncpoints)
    // Offset: 0x22E2ABC
    static ::FMOD::RESULT FMOD5_Sound_GetNumSyncPoints(::System::IntPtr sound, ByRef<int> numsyncpoints);
    // static private FMOD.RESULT FMOD5_Sound_GetSyncPoint(System.IntPtr sound, System.Int32 index, out System.IntPtr point)
    // Offset: 0x22E2B70
    static ::FMOD::RESULT FMOD5_Sound_GetSyncPoint(::System::IntPtr sound, int index, ByRef<::System::IntPtr> point);
    // static private FMOD.RESULT FMOD5_Sound_GetSyncPointInfo(System.IntPtr sound, System.IntPtr point, System.IntPtr name, System.Int32 namelen, out System.UInt32 offset, FMOD.TIMEUNIT offsettype)
    // Offset: 0x22E2DF4
    static ::FMOD::RESULT FMOD5_Sound_GetSyncPointInfo(::System::IntPtr sound, ::System::IntPtr point, ::System::IntPtr name, int namelen, ByRef<uint> offset, ::FMOD::TIMEUNIT offsettype);
    // static private FMOD.RESULT FMOD5_Sound_AddSyncPoint(System.IntPtr sound, System.UInt32 offset, FMOD.TIMEUNIT offsettype, System.Byte[] name, out System.IntPtr point)
    // Offset: 0x22E30B0
    static ::FMOD::RESULT FMOD5_Sound_AddSyncPoint(::System::IntPtr sound, uint offset, ::FMOD::TIMEUNIT offsettype, ::ArrayW<uint8_t> name, ByRef<::System::IntPtr> point);
    // static private FMOD.RESULT FMOD5_Sound_DeleteSyncPoint(System.IntPtr sound, System.IntPtr point)
    // Offset: 0x22E318C
    static ::FMOD::RESULT FMOD5_Sound_DeleteSyncPoint(::System::IntPtr sound, ::System::IntPtr point);
    // static private FMOD.RESULT FMOD5_Sound_SetMode(System.IntPtr sound, FMOD.MODE mode)
    // Offset: 0x22E3240
    static ::FMOD::RESULT FMOD5_Sound_SetMode(::System::IntPtr sound, ::FMOD::MODE mode);
    // static private FMOD.RESULT FMOD5_Sound_GetMode(System.IntPtr sound, out FMOD.MODE mode)
    // Offset: 0x22E32F4
    static ::FMOD::RESULT FMOD5_Sound_GetMode(::System::IntPtr sound, ByRef<::FMOD::MODE> mode);
    // static private FMOD.RESULT FMOD5_Sound_SetLoopCount(System.IntPtr sound, System.Int32 loopcount)
    // Offset: 0x22E33A8
    static ::FMOD::RESULT FMOD5_Sound_SetLoopCount(::System::IntPtr sound, int loopcount);
    // static private FMOD.RESULT FMOD5_Sound_GetLoopCount(System.IntPtr sound, out System.Int32 loopcount)
    // Offset: 0x22E345C
    static ::FMOD::RESULT FMOD5_Sound_GetLoopCount(::System::IntPtr sound, ByRef<int> loopcount);
    // static private FMOD.RESULT FMOD5_Sound_SetLoopPoints(System.IntPtr sound, System.UInt32 loopstart, FMOD.TIMEUNIT loopstarttype, System.UInt32 loopend, FMOD.TIMEUNIT loopendtype)
    // Offset: 0x22E3510
    static ::FMOD::RESULT FMOD5_Sound_SetLoopPoints(::System::IntPtr sound, uint loopstart, ::FMOD::TIMEUNIT loopstarttype, uint loopend, ::FMOD::TIMEUNIT loopendtype);
    // static private FMOD.RESULT FMOD5_Sound_GetLoopPoints(System.IntPtr sound, out System.UInt32 loopstart, FMOD.TIMEUNIT loopstarttype, out System.UInt32 loopend, FMOD.TIMEUNIT loopendtype)
    // Offset: 0x22E35E4
    static ::FMOD::RESULT FMOD5_Sound_GetLoopPoints(::System::IntPtr sound, ByRef<uint> loopstart, ::FMOD::TIMEUNIT loopstarttype, ByRef<uint> loopend, ::FMOD::TIMEUNIT loopendtype);
    // static private FMOD.RESULT FMOD5_Sound_GetMusicNumChannels(System.IntPtr sound, out System.Int32 numchannels)
    // Offset: 0x22E36B8
    static ::FMOD::RESULT FMOD5_Sound_GetMusicNumChannels(::System::IntPtr sound, ByRef<int> numchannels);
    // static private FMOD.RESULT FMOD5_Sound_SetMusicChannelVolume(System.IntPtr sound, System.Int32 channel, System.Single volume)
    // Offset: 0x22E376C
    static ::FMOD::RESULT FMOD5_Sound_SetMusicChannelVolume(::System::IntPtr sound, int channel, float volume);
    // static private FMOD.RESULT FMOD5_Sound_GetMusicChannelVolume(System.IntPtr sound, System.Int32 channel, out System.Single volume)
    // Offset: 0x22E3830
    static ::FMOD::RESULT FMOD5_Sound_GetMusicChannelVolume(::System::IntPtr sound, int channel, ByRef<float> volume);
    // static private FMOD.RESULT FMOD5_Sound_SetMusicSpeed(System.IntPtr sound, System.Single speed)
    // Offset: 0x22E38EC
    static ::FMOD::RESULT FMOD5_Sound_SetMusicSpeed(::System::IntPtr sound, float speed);
    // static private FMOD.RESULT FMOD5_Sound_GetMusicSpeed(System.IntPtr sound, out System.Single speed)
    // Offset: 0x22E39A0
    static ::FMOD::RESULT FMOD5_Sound_GetMusicSpeed(::System::IntPtr sound, ByRef<float> speed);
    // static private FMOD.RESULT FMOD5_Sound_SetUserData(System.IntPtr sound, System.IntPtr userdata)
    // Offset: 0x22E3A54
    static ::FMOD::RESULT FMOD5_Sound_SetUserData(::System::IntPtr sound, ::System::IntPtr userdata);
    // static private FMOD.RESULT FMOD5_Sound_GetUserData(System.IntPtr sound, out System.IntPtr userdata)
    // Offset: 0x22E3B08
    static ::FMOD::RESULT FMOD5_Sound_GetUserData(::System::IntPtr sound, ByRef<::System::IntPtr> userdata);
    // public System.Boolean hasHandle()
    // Offset: 0xBBDADC
    bool hasHandle();
    // public System.Void clearHandle()
    // Offset: 0xBBDAE4
    void clearHandle();
  }; // FMOD.Sound
  #pragma pack(pop)
  static check_size<sizeof(Sound), 0 + sizeof(::System::IntPtr)> __FMOD_SoundSizeCheck;
  static_assert(sizeof(Sound) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::Sound::release
// Il2CppName: release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)()>(&FMOD::Sound::release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getSystemObject
// Il2CppName: getSystemObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<::FMOD::System>)>(&FMOD::Sound::getSystemObject)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("FMOD", "System")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getSystemObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::lock
// Il2CppName: lock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(uint, uint, ByRef<::System::IntPtr>, ByRef<::System::IntPtr>, ByRef<uint>, ByRef<uint>)>(&FMOD::Sound::lock)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* ptr1 = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* ptr2 = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* len1 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* len2 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "lock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, length, ptr1, ptr2, len1, len2});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::unlock
// Il2CppName: unlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(::System::IntPtr, ::System::IntPtr, uint, uint)>(&FMOD::Sound::unlock)> {
  static const MethodInfo* get() {
    static auto* ptr1 = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* ptr2 = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* len1 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* len2 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "unlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr1, ptr2, len1, len2});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::setDefaults
// Il2CppName: setDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(float, int)>(&FMOD::Sound::setDefaults)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* priority = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "setDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency, priority});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getDefaults
// Il2CppName: getDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<float>, ByRef<int>)>(&FMOD::Sound::getDefaults)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* priority = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency, priority});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::set3DMinMaxDistance
// Il2CppName: set3DMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(float, float)>(&FMOD::Sound::set3DMinMaxDistance)> {
  static const MethodInfo* get() {
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "set3DMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{min, max});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::get3DMinMaxDistance
// Il2CppName: get3DMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<float>, ByRef<float>)>(&FMOD::Sound::get3DMinMaxDistance)> {
  static const MethodInfo* get() {
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "get3DMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{min, max});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::set3DConeSettings
// Il2CppName: set3DConeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(float, float, float)>(&FMOD::Sound::set3DConeSettings)> {
  static const MethodInfo* get() {
    static auto* insideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* outsideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* outsidevolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "set3DConeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{insideconeangle, outsideconeangle, outsidevolume});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::get3DConeSettings
// Il2CppName: get3DConeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<float>, ByRef<float>, ByRef<float>)>(&FMOD::Sound::get3DConeSettings)> {
  static const MethodInfo* get() {
    static auto* insideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* outsideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* outsidevolume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "get3DConeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{insideconeangle, outsideconeangle, outsidevolume});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::set3DCustomRolloff
// Il2CppName: set3DCustomRolloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<::FMOD::VECTOR>, int)>(&FMOD::Sound::set3DCustomRolloff)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "set3DCustomRolloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, numpoints});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::get3DCustomRolloff
// Il2CppName: get3DCustomRolloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<::System::IntPtr>, ByRef<int>)>(&FMOD::Sound::get3DCustomRolloff)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "get3DCustomRolloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, numpoints});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getSubSound
// Il2CppName: getSubSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(int, ByRef<::FMOD::Sound>)>(&FMOD::Sound::getSubSound)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* subsound = &::il2cpp_utils::GetClassFromName("FMOD", "Sound")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getSubSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, subsound});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getSubSoundParent
// Il2CppName: getSubSoundParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<::FMOD::Sound>)>(&FMOD::Sound::getSubSoundParent)> {
  static const MethodInfo* get() {
    static auto* parentsound = &::il2cpp_utils::GetClassFromName("FMOD", "Sound")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getSubSoundParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentsound});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getName
// Il2CppName: getName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<::StringW>, int)>(&FMOD::Sound::getName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* namelen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, namelen});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getLength
// Il2CppName: getLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<uint>, ::FMOD::TIMEUNIT)>(&FMOD::Sound::getLength)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* lengthtype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length, lengthtype});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getFormat
// Il2CppName: getFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<::FMOD::SOUND_TYPE>, ByRef<::FMOD::SOUND_FORMAT>, ByRef<int>, ByRef<int>)>(&FMOD::Sound::getFormat)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("FMOD", "SOUND_TYPE")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("FMOD", "SOUND_FORMAT")->this_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, format, channels, bits});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getNumSubSounds
// Il2CppName: getNumSubSounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<int>)>(&FMOD::Sound::getNumSubSounds)> {
  static const MethodInfo* get() {
    static auto* numsubsounds = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getNumSubSounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numsubsounds});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getNumTags
// Il2CppName: getNumTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<int>, ByRef<int>)>(&FMOD::Sound::getNumTags)> {
  static const MethodInfo* get() {
    static auto* numtags = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* numtagsupdated = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getNumTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numtags, numtagsupdated});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getTag
// Il2CppName: getTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(::StringW, int, ByRef<::FMOD::TAG>)>(&FMOD::Sound::getTag)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tag = &::il2cpp_utils::GetClassFromName("FMOD", "TAG")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, index, tag});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getOpenState
// Il2CppName: getOpenState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<::FMOD::OPENSTATE>, ByRef<uint>, ByRef<bool>, ByRef<bool>)>(&FMOD::Sound::getOpenState)> {
  static const MethodInfo* get() {
    static auto* openstate = &::il2cpp_utils::GetClassFromName("FMOD", "OPENSTATE")->this_arg;
    static auto* percentbuffered = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* starving = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* diskbusy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getOpenState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{openstate, percentbuffered, starving, diskbusy});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::readData
// Il2CppName: readData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(::System::IntPtr, uint, ByRef<uint>)>(&FMOD::Sound::readData)> {
  static const MethodInfo* get() {
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* lenbytes = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* read = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "readData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, lenbytes, read});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::seekData
// Il2CppName: seekData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(uint)>(&FMOD::Sound::seekData)> {
  static const MethodInfo* get() {
    static auto* pcm = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "seekData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcm});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::setSoundGroup
// Il2CppName: setSoundGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(::FMOD::SoundGroup)>(&FMOD::Sound::setSoundGroup)> {
  static const MethodInfo* get() {
    static auto* soundgroup = &::il2cpp_utils::GetClassFromName("FMOD", "SoundGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "setSoundGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundgroup});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getSoundGroup
// Il2CppName: getSoundGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<::FMOD::SoundGroup>)>(&FMOD::Sound::getSoundGroup)> {
  static const MethodInfo* get() {
    static auto* soundgroup = &::il2cpp_utils::GetClassFromName("FMOD", "SoundGroup")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getSoundGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundgroup});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getNumSyncPoints
// Il2CppName: getNumSyncPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<int>)>(&FMOD::Sound::getNumSyncPoints)> {
  static const MethodInfo* get() {
    static auto* numsyncpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getNumSyncPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numsyncpoints});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getSyncPoint
// Il2CppName: getSyncPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(int, ByRef<::System::IntPtr>)>(&FMOD::Sound::getSyncPoint)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getSyncPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, point});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getSyncPointInfo
// Il2CppName: getSyncPointInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(::System::IntPtr, ByRef<::StringW>, int, ByRef<uint>, ::FMOD::TIMEUNIT)>(&FMOD::Sound::getSyncPointInfo)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* namelen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* offsettype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getSyncPointInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, name, namelen, offset, offsettype});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getSyncPointInfo
// Il2CppName: getSyncPointInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(::System::IntPtr, ByRef<uint>, ::FMOD::TIMEUNIT)>(&FMOD::Sound::getSyncPointInfo)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* offsettype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getSyncPointInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, offset, offsettype});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::addSyncPoint
// Il2CppName: addSyncPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(uint, ::FMOD::TIMEUNIT, ::StringW, ByRef<::System::IntPtr>)>(&FMOD::Sound::addSyncPoint)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* offsettype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "addSyncPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, offsettype, name, point});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::deleteSyncPoint
// Il2CppName: deleteSyncPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(::System::IntPtr)>(&FMOD::Sound::deleteSyncPoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "deleteSyncPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::setMode
// Il2CppName: setMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(::FMOD::MODE)>(&FMOD::Sound::setMode)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "setMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getMode
// Il2CppName: getMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<::FMOD::MODE>)>(&FMOD::Sound::getMode)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::setLoopCount
// Il2CppName: setLoopCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(int)>(&FMOD::Sound::setLoopCount)> {
  static const MethodInfo* get() {
    static auto* loopcount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "setLoopCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopcount});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getLoopCount
// Il2CppName: getLoopCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<int>)>(&FMOD::Sound::getLoopCount)> {
  static const MethodInfo* get() {
    static auto* loopcount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getLoopCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopcount});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::setLoopPoints
// Il2CppName: setLoopPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(uint, ::FMOD::TIMEUNIT, uint, ::FMOD::TIMEUNIT)>(&FMOD::Sound::setLoopPoints)> {
  static const MethodInfo* get() {
    static auto* loopstart = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* loopstarttype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    static auto* loopend = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* loopendtype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "setLoopPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopstart, loopstarttype, loopend, loopendtype});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getLoopPoints
// Il2CppName: getLoopPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<uint>, ::FMOD::TIMEUNIT, ByRef<uint>, ::FMOD::TIMEUNIT)>(&FMOD::Sound::getLoopPoints)> {
  static const MethodInfo* get() {
    static auto* loopstart = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* loopstarttype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    static auto* loopend = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* loopendtype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getLoopPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopstart, loopstarttype, loopend, loopendtype});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getMusicNumChannels
// Il2CppName: getMusicNumChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<int>)>(&FMOD::Sound::getMusicNumChannels)> {
  static const MethodInfo* get() {
    static auto* numchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getMusicNumChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numchannels});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::setMusicChannelVolume
// Il2CppName: setMusicChannelVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(int, float)>(&FMOD::Sound::setMusicChannelVolume)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "setMusicChannelVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, volume});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getMusicChannelVolume
// Il2CppName: getMusicChannelVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(int, ByRef<float>)>(&FMOD::Sound::getMusicChannelVolume)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getMusicChannelVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, volume});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::setMusicSpeed
// Il2CppName: setMusicSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(float)>(&FMOD::Sound::setMusicSpeed)> {
  static const MethodInfo* get() {
    static auto* speed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "setMusicSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{speed});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getMusicSpeed
// Il2CppName: getMusicSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<float>)>(&FMOD::Sound::getMusicSpeed)> {
  static const MethodInfo* get() {
    static auto* speed = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getMusicSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{speed});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::setUserData
// Il2CppName: setUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(::System::IntPtr)>(&FMOD::Sound::setUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "setUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::getUserData
// Il2CppName: getUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Sound::*)(ByRef<::System::IntPtr>)>(&FMOD::Sound::getUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "getUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_Release
// Il2CppName: FMOD5_Sound_Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Sound::FMOD5_Sound_Release)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetSystemObject
// Il2CppName: FMOD5_Sound_GetSystemObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Sound::FMOD5_Sound_GetSystemObject)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetSystemObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, system});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_Lock
// Il2CppName: FMOD5_Sound_Lock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint, uint, ByRef<::System::IntPtr>, ByRef<::System::IntPtr>, ByRef<uint>, ByRef<uint>)>(&FMOD::Sound::FMOD5_Sound_Lock)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* ptr1 = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* ptr2 = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* len1 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* len2 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_Lock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, offset, length, ptr1, ptr2, len1, len2});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_Unlock
// Il2CppName: FMOD5_Sound_Unlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, ::System::IntPtr, uint, uint)>(&FMOD::Sound::FMOD5_Sound_Unlock)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* ptr1 = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* ptr2 = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* len1 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* len2 = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_Unlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, ptr1, ptr2, len1, len2});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_SetDefaults
// Il2CppName: FMOD5_Sound_SetDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float, int)>(&FMOD::Sound::FMOD5_Sound_SetDefaults)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* priority = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_SetDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, frequency, priority});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetDefaults
// Il2CppName: FMOD5_Sound_GetDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>, ByRef<int>)>(&FMOD::Sound::FMOD5_Sound_GetDefaults)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* priority = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, frequency, priority});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_Set3DMinMaxDistance
// Il2CppName: FMOD5_Sound_Set3DMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float, float)>(&FMOD::Sound::FMOD5_Sound_Set3DMinMaxDistance)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_Set3DMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, min, max});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_Get3DMinMaxDistance
// Il2CppName: FMOD5_Sound_Get3DMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>, ByRef<float>)>(&FMOD::Sound::FMOD5_Sound_Get3DMinMaxDistance)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_Get3DMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, min, max});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_Set3DConeSettings
// Il2CppName: FMOD5_Sound_Set3DConeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float, float, float)>(&FMOD::Sound::FMOD5_Sound_Set3DConeSettings)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* insideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* outsideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* outsidevolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_Set3DConeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, insideconeangle, outsideconeangle, outsidevolume});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_Get3DConeSettings
// Il2CppName: FMOD5_Sound_Get3DConeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>, ByRef<float>, ByRef<float>)>(&FMOD::Sound::FMOD5_Sound_Get3DConeSettings)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* insideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* outsideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* outsidevolume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_Get3DConeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, insideconeangle, outsideconeangle, outsidevolume});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_Set3DCustomRolloff
// Il2CppName: FMOD5_Sound_Set3DCustomRolloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>, int)>(&FMOD::Sound::FMOD5_Sound_Set3DCustomRolloff)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* points = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_Set3DCustomRolloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, points, numpoints});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_Get3DCustomRolloff
// Il2CppName: FMOD5_Sound_Get3DCustomRolloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>, ByRef<int>)>(&FMOD::Sound::FMOD5_Sound_Get3DCustomRolloff)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* points = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_Get3DCustomRolloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, points, numpoints});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetSubSound
// Il2CppName: FMOD5_Sound_GetSubSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::System::IntPtr>)>(&FMOD::Sound::FMOD5_Sound_GetSubSound)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* subsound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetSubSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, index, subsound});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetSubSoundParent
// Il2CppName: FMOD5_Sound_GetSubSoundParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Sound::FMOD5_Sound_GetSubSoundParent)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* parentsound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetSubSoundParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, parentsound});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetName
// Il2CppName: FMOD5_Sound_GetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, int)>(&FMOD::Sound::FMOD5_Sound_GetName)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* namelen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, name, namelen});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetLength
// Il2CppName: FMOD5_Sound_GetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint>, ::FMOD::TIMEUNIT)>(&FMOD::Sound::FMOD5_Sound_GetLength)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* lengthtype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, length, lengthtype});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetFormat
// Il2CppName: FMOD5_Sound_GetFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::SOUND_TYPE>, ByRef<::FMOD::SOUND_FORMAT>, ByRef<int>, ByRef<int>)>(&FMOD::Sound::FMOD5_Sound_GetFormat)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("FMOD", "SOUND_TYPE")->this_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("FMOD", "SOUND_FORMAT")->this_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, type, format, channels, bits});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetNumSubSounds
// Il2CppName: FMOD5_Sound_GetNumSubSounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Sound::FMOD5_Sound_GetNumSubSounds)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numsubsounds = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetNumSubSounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, numsubsounds});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetNumTags
// Il2CppName: FMOD5_Sound_GetNumTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>, ByRef<int>)>(&FMOD::Sound::FMOD5_Sound_GetNumTags)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numtags = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* numtagsupdated = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetNumTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, numtags, numtagsupdated});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetTag
// Il2CppName: FMOD5_Sound_GetTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, int, ByRef<::FMOD::TAG>)>(&FMOD::Sound::FMOD5_Sound_GetTag)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tag = &::il2cpp_utils::GetClassFromName("FMOD", "TAG")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, name, index, tag});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetOpenState
// Il2CppName: FMOD5_Sound_GetOpenState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::OPENSTATE>, ByRef<uint>, ByRef<bool>, ByRef<bool>)>(&FMOD::Sound::FMOD5_Sound_GetOpenState)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* openstate = &::il2cpp_utils::GetClassFromName("FMOD", "OPENSTATE")->this_arg;
    static auto* percentbuffered = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* starving = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* diskbusy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetOpenState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, openstate, percentbuffered, starving, diskbusy});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_ReadData
// Il2CppName: FMOD5_Sound_ReadData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, uint, ByRef<uint>)>(&FMOD::Sound::FMOD5_Sound_ReadData)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* lenbytes = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* read = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_ReadData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, buffer, lenbytes, read});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_SeekData
// Il2CppName: FMOD5_Sound_SeekData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint)>(&FMOD::Sound::FMOD5_Sound_SeekData)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pcm = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_SeekData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, pcm});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_SetSoundGroup
// Il2CppName: FMOD5_Sound_SetSoundGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::Sound::FMOD5_Sound_SetSoundGroup)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* soundgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_SetSoundGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, soundgroup});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetSoundGroup
// Il2CppName: FMOD5_Sound_GetSoundGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Sound::FMOD5_Sound_GetSoundGroup)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* soundgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetSoundGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, soundgroup});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetNumSyncPoints
// Il2CppName: FMOD5_Sound_GetNumSyncPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Sound::FMOD5_Sound_GetNumSyncPoints)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numsyncpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetNumSyncPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, numsyncpoints});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetSyncPoint
// Il2CppName: FMOD5_Sound_GetSyncPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::System::IntPtr>)>(&FMOD::Sound::FMOD5_Sound_GetSyncPoint)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetSyncPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, index, point});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetSyncPointInfo
// Il2CppName: FMOD5_Sound_GetSyncPointInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, ::System::IntPtr, int, ByRef<uint>, ::FMOD::TIMEUNIT)>(&FMOD::Sound::FMOD5_Sound_GetSyncPointInfo)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* namelen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* offsettype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetSyncPointInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, point, name, namelen, offset, offsettype});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_AddSyncPoint
// Il2CppName: FMOD5_Sound_AddSyncPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint, ::FMOD::TIMEUNIT, ::ArrayW<uint8_t>, ByRef<::System::IntPtr>)>(&FMOD::Sound::FMOD5_Sound_AddSyncPoint)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* offsettype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    static auto* name = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_AddSyncPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, offset, offsettype, name, point});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_DeleteSyncPoint
// Il2CppName: FMOD5_Sound_DeleteSyncPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::Sound::FMOD5_Sound_DeleteSyncPoint)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_DeleteSyncPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, point});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_SetMode
// Il2CppName: FMOD5_Sound_SetMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::MODE)>(&FMOD::Sound::FMOD5_Sound_SetMode)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_SetMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, mode});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetMode
// Il2CppName: FMOD5_Sound_GetMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::MODE>)>(&FMOD::Sound::FMOD5_Sound_GetMode)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, mode});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_SetLoopCount
// Il2CppName: FMOD5_Sound_SetLoopCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int)>(&FMOD::Sound::FMOD5_Sound_SetLoopCount)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* loopcount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_SetLoopCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, loopcount});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetLoopCount
// Il2CppName: FMOD5_Sound_GetLoopCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Sound::FMOD5_Sound_GetLoopCount)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* loopcount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetLoopCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, loopcount});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_SetLoopPoints
// Il2CppName: FMOD5_Sound_SetLoopPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint, ::FMOD::TIMEUNIT, uint, ::FMOD::TIMEUNIT)>(&FMOD::Sound::FMOD5_Sound_SetLoopPoints)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* loopstart = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* loopstarttype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    static auto* loopend = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* loopendtype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_SetLoopPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, loopstart, loopstarttype, loopend, loopendtype});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetLoopPoints
// Il2CppName: FMOD5_Sound_GetLoopPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint>, ::FMOD::TIMEUNIT, ByRef<uint>, ::FMOD::TIMEUNIT)>(&FMOD::Sound::FMOD5_Sound_GetLoopPoints)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* loopstart = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* loopstarttype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    static auto* loopend = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* loopendtype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetLoopPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, loopstart, loopstarttype, loopend, loopendtype});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetMusicNumChannels
// Il2CppName: FMOD5_Sound_GetMusicNumChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Sound::FMOD5_Sound_GetMusicNumChannels)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetMusicNumChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, numchannels});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_SetMusicChannelVolume
// Il2CppName: FMOD5_Sound_SetMusicChannelVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, float)>(&FMOD::Sound::FMOD5_Sound_SetMusicChannelVolume)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_SetMusicChannelVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, channel, volume});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetMusicChannelVolume
// Il2CppName: FMOD5_Sound_GetMusicChannelVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<float>)>(&FMOD::Sound::FMOD5_Sound_GetMusicChannelVolume)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetMusicChannelVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, channel, volume});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_SetMusicSpeed
// Il2CppName: FMOD5_Sound_SetMusicSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::Sound::FMOD5_Sound_SetMusicSpeed)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* speed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_SetMusicSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, speed});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetMusicSpeed
// Il2CppName: FMOD5_Sound_GetMusicSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::Sound::FMOD5_Sound_GetMusicSpeed)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* speed = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetMusicSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, speed});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_SetUserData
// Il2CppName: FMOD5_Sound_SetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::Sound::FMOD5_Sound_SetUserData)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_SetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::FMOD5_Sound_GetUserData
// Il2CppName: FMOD5_Sound_GetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Sound::FMOD5_Sound_GetUserData)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "FMOD5_Sound_GetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::hasHandle
// Il2CppName: hasHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::Sound::*)()>(&FMOD::Sound::hasHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "hasHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Sound::clearHandle
// Il2CppName: clearHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::Sound::*)()>(&FMOD::Sound::clearHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Sound), "clearHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
