// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: DSP_PARAMETER_DESC_INT
  struct DSP_PARAMETER_DESC_INT;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::DSP_PARAMETER_DESC_INT, "FMOD", "DSP_PARAMETER_DESC_INT");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.DSP_PARAMETER_DESC_INT
  // [TokenAttribute] Offset: FFFFFFFF
  struct DSP_PARAMETER_DESC_INT/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 min
    // Size: 0x4
    // Offset: 0x0
    int min;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 max
    // Size: 0x4
    // Offset: 0x4
    int max;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 defaultval
    // Size: 0x4
    // Offset: 0x8
    int defaultval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean goestoinf
    // Size: 0x1
    // Offset: 0xC
    bool goestoinf;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: goestoinf and: valuenames
    char __padding3[0x3] = {};
    // public System.IntPtr valuenames
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr valuenames;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: DSP_PARAMETER_DESC_INT
    constexpr DSP_PARAMETER_DESC_INT(int min_ = {}, int max_ = {}, int defaultval_ = {}, bool goestoinf_ = {}, ::System::IntPtr valuenames_ = {}) noexcept : min{min_}, max{max_}, defaultval{defaultval_}, goestoinf{goestoinf_}, valuenames{valuenames_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 min
    [[deprecated("Use field access instead!")]] int& dyn_min();
    // Get instance field reference: public System.Int32 max
    [[deprecated("Use field access instead!")]] int& dyn_max();
    // Get instance field reference: public System.Int32 defaultval
    [[deprecated("Use field access instead!")]] int& dyn_defaultval();
    // Get instance field reference: public System.Boolean goestoinf
    [[deprecated("Use field access instead!")]] bool& dyn_goestoinf();
    // Get instance field reference: public System.IntPtr valuenames
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_valuenames();
  }; // FMOD.DSP_PARAMETER_DESC_INT
  #pragma pack(pop)
  static check_size<sizeof(DSP_PARAMETER_DESC_INT), 16 + sizeof(::System::IntPtr)> __FMOD_DSP_PARAMETER_DESC_INTSizeCheck;
  static_assert(sizeof(DSP_PARAMETER_DESC_INT) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
