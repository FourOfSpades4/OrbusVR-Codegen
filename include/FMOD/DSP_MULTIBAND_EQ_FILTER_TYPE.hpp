// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: DSP_MULTIBAND_EQ_FILTER_TYPE
  struct DSP_MULTIBAND_EQ_FILTER_TYPE;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE, "FMOD", "DSP_MULTIBAND_EQ_FILTER_TYPE");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE
  // [TokenAttribute] Offset: FFFFFFFF
  struct DSP_MULTIBAND_EQ_FILTER_TYPE/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: DSP_MULTIBAND_EQ_FILTER_TYPE
    constexpr DSP_MULTIBAND_EQ_FILTER_TYPE(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE DISABLED
    static constexpr const int DISABLED = 0;
    // Get static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE DISABLED
    static ::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE _get_DISABLED();
    // Set static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE DISABLED
    static void _set_DISABLED(::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE value);
    // static field const value: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE LOWPASS_12DB
    static constexpr const int LOWPASS_12DB = 1;
    // Get static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE LOWPASS_12DB
    static ::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE _get_LOWPASS_12DB();
    // Set static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE LOWPASS_12DB
    static void _set_LOWPASS_12DB(::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE value);
    // static field const value: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE LOWPASS_24DB
    static constexpr const int LOWPASS_24DB = 2;
    // Get static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE LOWPASS_24DB
    static ::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE _get_LOWPASS_24DB();
    // Set static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE LOWPASS_24DB
    static void _set_LOWPASS_24DB(::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE value);
    // static field const value: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE LOWPASS_48DB
    static constexpr const int LOWPASS_48DB = 3;
    // Get static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE LOWPASS_48DB
    static ::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE _get_LOWPASS_48DB();
    // Set static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE LOWPASS_48DB
    static void _set_LOWPASS_48DB(::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE value);
    // static field const value: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE HIGHPASS_12DB
    static constexpr const int HIGHPASS_12DB = 4;
    // Get static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE HIGHPASS_12DB
    static ::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE _get_HIGHPASS_12DB();
    // Set static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE HIGHPASS_12DB
    static void _set_HIGHPASS_12DB(::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE value);
    // static field const value: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE HIGHPASS_24DB
    static constexpr const int HIGHPASS_24DB = 5;
    // Get static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE HIGHPASS_24DB
    static ::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE _get_HIGHPASS_24DB();
    // Set static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE HIGHPASS_24DB
    static void _set_HIGHPASS_24DB(::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE value);
    // static field const value: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE HIGHPASS_48DB
    static constexpr const int HIGHPASS_48DB = 6;
    // Get static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE HIGHPASS_48DB
    static ::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE _get_HIGHPASS_48DB();
    // Set static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE HIGHPASS_48DB
    static void _set_HIGHPASS_48DB(::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE value);
    // static field const value: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE LOWSHELF
    static constexpr const int LOWSHELF = 7;
    // Get static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE LOWSHELF
    static ::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE _get_LOWSHELF();
    // Set static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE LOWSHELF
    static void _set_LOWSHELF(::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE value);
    // static field const value: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE HIGHSHELF
    static constexpr const int HIGHSHELF = 8;
    // Get static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE HIGHSHELF
    static ::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE _get_HIGHSHELF();
    // Set static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE HIGHSHELF
    static void _set_HIGHSHELF(::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE value);
    // static field const value: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE PEAKING
    static constexpr const int PEAKING = 9;
    // Get static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE PEAKING
    static ::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE _get_PEAKING();
    // Set static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE PEAKING
    static void _set_PEAKING(::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE value);
    // static field const value: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE BANDPASS
    static constexpr const int BANDPASS = 10;
    // Get static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE BANDPASS
    static ::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE _get_BANDPASS();
    // Set static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE BANDPASS
    static void _set_BANDPASS(::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE value);
    // static field const value: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE NOTCH
    static constexpr const int NOTCH = 11;
    // Get static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE NOTCH
    static ::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE _get_NOTCH();
    // Set static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE NOTCH
    static void _set_NOTCH(::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE value);
    // static field const value: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE ALLPASS
    static constexpr const int ALLPASS = 12;
    // Get static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE ALLPASS
    static ::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE _get_ALLPASS();
    // Set static field: static public FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE ALLPASS
    static void _set_ALLPASS(::FMOD::DSP_MULTIBAND_EQ_FILTER_TYPE value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // FMOD.DSP_MULTIBAND_EQ_FILTER_TYPE
  #pragma pack(pop)
  static check_size<sizeof(DSP_MULTIBAND_EQ_FILTER_TYPE), 0 + sizeof(int)> __FMOD_DSP_MULTIBAND_EQ_FILTER_TYPESizeCheck;
  static_assert(sizeof(DSP_MULTIBAND_EQ_FILTER_TYPE) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
