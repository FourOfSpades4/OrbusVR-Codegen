// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: CHANNELORDER
  struct CHANNELORDER;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::CHANNELORDER, "FMOD", "CHANNELORDER");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.CHANNELORDER
  // [TokenAttribute] Offset: FFFFFFFF
  struct CHANNELORDER/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: CHANNELORDER
    constexpr CHANNELORDER(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.CHANNELORDER DEFAULT
    static constexpr const int DEFAULT = 0;
    // Get static field: static public FMOD.CHANNELORDER DEFAULT
    static ::FMOD::CHANNELORDER _get_DEFAULT();
    // Set static field: static public FMOD.CHANNELORDER DEFAULT
    static void _set_DEFAULT(::FMOD::CHANNELORDER value);
    // static field const value: static public FMOD.CHANNELORDER WAVEFORMAT
    static constexpr const int WAVEFORMAT = 1;
    // Get static field: static public FMOD.CHANNELORDER WAVEFORMAT
    static ::FMOD::CHANNELORDER _get_WAVEFORMAT();
    // Set static field: static public FMOD.CHANNELORDER WAVEFORMAT
    static void _set_WAVEFORMAT(::FMOD::CHANNELORDER value);
    // static field const value: static public FMOD.CHANNELORDER PROTOOLS
    static constexpr const int PROTOOLS = 2;
    // Get static field: static public FMOD.CHANNELORDER PROTOOLS
    static ::FMOD::CHANNELORDER _get_PROTOOLS();
    // Set static field: static public FMOD.CHANNELORDER PROTOOLS
    static void _set_PROTOOLS(::FMOD::CHANNELORDER value);
    // static field const value: static public FMOD.CHANNELORDER ALLMONO
    static constexpr const int ALLMONO = 3;
    // Get static field: static public FMOD.CHANNELORDER ALLMONO
    static ::FMOD::CHANNELORDER _get_ALLMONO();
    // Set static field: static public FMOD.CHANNELORDER ALLMONO
    static void _set_ALLMONO(::FMOD::CHANNELORDER value);
    // static field const value: static public FMOD.CHANNELORDER ALLSTEREO
    static constexpr const int ALLSTEREO = 4;
    // Get static field: static public FMOD.CHANNELORDER ALLSTEREO
    static ::FMOD::CHANNELORDER _get_ALLSTEREO();
    // Set static field: static public FMOD.CHANNELORDER ALLSTEREO
    static void _set_ALLSTEREO(::FMOD::CHANNELORDER value);
    // static field const value: static public FMOD.CHANNELORDER ALSA
    static constexpr const int ALSA = 5;
    // Get static field: static public FMOD.CHANNELORDER ALSA
    static ::FMOD::CHANNELORDER _get_ALSA();
    // Set static field: static public FMOD.CHANNELORDER ALSA
    static void _set_ALSA(::FMOD::CHANNELORDER value);
    // static field const value: static public FMOD.CHANNELORDER MAX
    static constexpr const int MAX = 6;
    // Get static field: static public FMOD.CHANNELORDER MAX
    static ::FMOD::CHANNELORDER _get_MAX();
    // Set static field: static public FMOD.CHANNELORDER MAX
    static void _set_MAX(::FMOD::CHANNELORDER value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // FMOD.CHANNELORDER
  #pragma pack(pop)
  static check_size<sizeof(CHANNELORDER), 0 + sizeof(int)> __FMOD_CHANNELORDERSizeCheck;
  static_assert(sizeof(CHANNELORDER) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
