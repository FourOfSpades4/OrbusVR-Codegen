// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: MEMORY_TYPE
  struct MEMORY_TYPE;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::MEMORY_TYPE, "FMOD", "MEMORY_TYPE");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.MEMORY_TYPE
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  struct MEMORY_TYPE/*, public ::System::Enum*/ {
    public:
    public:
    // public System.UInt32 value__
    // Size: 0x4
    // Offset: 0x0
    uint value;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: MEMORY_TYPE
    constexpr MEMORY_TYPE(uint value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint
    constexpr operator uint() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.MEMORY_TYPE NORMAL
    static constexpr const uint NORMAL = 0u;
    // Get static field: static public FMOD.MEMORY_TYPE NORMAL
    static ::FMOD::MEMORY_TYPE _get_NORMAL();
    // Set static field: static public FMOD.MEMORY_TYPE NORMAL
    static void _set_NORMAL(::FMOD::MEMORY_TYPE value);
    // static field const value: static public FMOD.MEMORY_TYPE STREAM_FILE
    static constexpr const uint STREAM_FILE = 1u;
    // Get static field: static public FMOD.MEMORY_TYPE STREAM_FILE
    static ::FMOD::MEMORY_TYPE _get_STREAM_FILE();
    // Set static field: static public FMOD.MEMORY_TYPE STREAM_FILE
    static void _set_STREAM_FILE(::FMOD::MEMORY_TYPE value);
    // static field const value: static public FMOD.MEMORY_TYPE STREAM_DECODE
    static constexpr const uint STREAM_DECODE = 2u;
    // Get static field: static public FMOD.MEMORY_TYPE STREAM_DECODE
    static ::FMOD::MEMORY_TYPE _get_STREAM_DECODE();
    // Set static field: static public FMOD.MEMORY_TYPE STREAM_DECODE
    static void _set_STREAM_DECODE(::FMOD::MEMORY_TYPE value);
    // static field const value: static public FMOD.MEMORY_TYPE SAMPLEDATA
    static constexpr const uint SAMPLEDATA = 4u;
    // Get static field: static public FMOD.MEMORY_TYPE SAMPLEDATA
    static ::FMOD::MEMORY_TYPE _get_SAMPLEDATA();
    // Set static field: static public FMOD.MEMORY_TYPE SAMPLEDATA
    static void _set_SAMPLEDATA(::FMOD::MEMORY_TYPE value);
    // static field const value: static public FMOD.MEMORY_TYPE DSP_BUFFER
    static constexpr const uint DSP_BUFFER = 8u;
    // Get static field: static public FMOD.MEMORY_TYPE DSP_BUFFER
    static ::FMOD::MEMORY_TYPE _get_DSP_BUFFER();
    // Set static field: static public FMOD.MEMORY_TYPE DSP_BUFFER
    static void _set_DSP_BUFFER(::FMOD::MEMORY_TYPE value);
    // static field const value: static public FMOD.MEMORY_TYPE PLUGIN
    static constexpr const uint PLUGIN = 16u;
    // Get static field: static public FMOD.MEMORY_TYPE PLUGIN
    static ::FMOD::MEMORY_TYPE _get_PLUGIN();
    // Set static field: static public FMOD.MEMORY_TYPE PLUGIN
    static void _set_PLUGIN(::FMOD::MEMORY_TYPE value);
    // static field const value: static public FMOD.MEMORY_TYPE XBOX360_PHYSICAL
    static constexpr const uint XBOX360_PHYSICAL = 1048576u;
    // Get static field: static public FMOD.MEMORY_TYPE XBOX360_PHYSICAL
    static ::FMOD::MEMORY_TYPE _get_XBOX360_PHYSICAL();
    // Set static field: static public FMOD.MEMORY_TYPE XBOX360_PHYSICAL
    static void _set_XBOX360_PHYSICAL(::FMOD::MEMORY_TYPE value);
    // static field const value: static public FMOD.MEMORY_TYPE PERSISTENT
    static constexpr const uint PERSISTENT = 2097152u;
    // Get static field: static public FMOD.MEMORY_TYPE PERSISTENT
    static ::FMOD::MEMORY_TYPE _get_PERSISTENT();
    // Set static field: static public FMOD.MEMORY_TYPE PERSISTENT
    static void _set_PERSISTENT(::FMOD::MEMORY_TYPE value);
    // static field const value: static public FMOD.MEMORY_TYPE SECONDARY
    static constexpr const uint SECONDARY = 4194304u;
    // Get static field: static public FMOD.MEMORY_TYPE SECONDARY
    static ::FMOD::MEMORY_TYPE _get_SECONDARY();
    // Set static field: static public FMOD.MEMORY_TYPE SECONDARY
    static void _set_SECONDARY(::FMOD::MEMORY_TYPE value);
    // static field const value: static public FMOD.MEMORY_TYPE ALL
    static constexpr const uint ALL = 4294967295u;
    // Get static field: static public FMOD.MEMORY_TYPE ALL
    static ::FMOD::MEMORY_TYPE _get_ALL();
    // Set static field: static public FMOD.MEMORY_TYPE ALL
    static void _set_ALL(::FMOD::MEMORY_TYPE value);
    // Get instance field reference: public System.UInt32 value__
    [[deprecated("Use field access instead!")]] uint& dyn_value__();
  }; // FMOD.MEMORY_TYPE
  #pragma pack(pop)
  static check_size<sizeof(MEMORY_TYPE), 0 + sizeof(uint)> __FMOD_MEMORY_TYPESizeCheck;
  static_assert(sizeof(MEMORY_TYPE) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
