// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: TAGDATATYPE
  struct TAGDATATYPE;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::TAGDATATYPE, "FMOD", "TAGDATATYPE");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.TAGDATATYPE
  // [TokenAttribute] Offset: FFFFFFFF
  struct TAGDATATYPE/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TAGDATATYPE
    constexpr TAGDATATYPE(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.TAGDATATYPE BINARY
    static constexpr const int BINARY = 0;
    // Get static field: static public FMOD.TAGDATATYPE BINARY
    static ::FMOD::TAGDATATYPE _get_BINARY();
    // Set static field: static public FMOD.TAGDATATYPE BINARY
    static void _set_BINARY(::FMOD::TAGDATATYPE value);
    // static field const value: static public FMOD.TAGDATATYPE INT
    static constexpr const int INT = 1;
    // Get static field: static public FMOD.TAGDATATYPE INT
    static ::FMOD::TAGDATATYPE _get_INT();
    // Set static field: static public FMOD.TAGDATATYPE INT
    static void _set_INT(::FMOD::TAGDATATYPE value);
    // static field const value: static public FMOD.TAGDATATYPE FLOAT
    static constexpr const int FLOAT = 2;
    // Get static field: static public FMOD.TAGDATATYPE FLOAT
    static ::FMOD::TAGDATATYPE _get_FLOAT();
    // Set static field: static public FMOD.TAGDATATYPE FLOAT
    static void _set_FLOAT(::FMOD::TAGDATATYPE value);
    // static field const value: static public FMOD.TAGDATATYPE STRING
    static constexpr const int STRING = 3;
    // Get static field: static public FMOD.TAGDATATYPE STRING
    static ::FMOD::TAGDATATYPE _get_STRING();
    // Set static field: static public FMOD.TAGDATATYPE STRING
    static void _set_STRING(::FMOD::TAGDATATYPE value);
    // static field const value: static public FMOD.TAGDATATYPE STRING_UTF16
    static constexpr const int STRING_UTF16 = 4;
    // Get static field: static public FMOD.TAGDATATYPE STRING_UTF16
    static ::FMOD::TAGDATATYPE _get_STRING_UTF16();
    // Set static field: static public FMOD.TAGDATATYPE STRING_UTF16
    static void _set_STRING_UTF16(::FMOD::TAGDATATYPE value);
    // static field const value: static public FMOD.TAGDATATYPE STRING_UTF16BE
    static constexpr const int STRING_UTF16BE = 5;
    // Get static field: static public FMOD.TAGDATATYPE STRING_UTF16BE
    static ::FMOD::TAGDATATYPE _get_STRING_UTF16BE();
    // Set static field: static public FMOD.TAGDATATYPE STRING_UTF16BE
    static void _set_STRING_UTF16BE(::FMOD::TAGDATATYPE value);
    // static field const value: static public FMOD.TAGDATATYPE STRING_UTF8
    static constexpr const int STRING_UTF8 = 6;
    // Get static field: static public FMOD.TAGDATATYPE STRING_UTF8
    static ::FMOD::TAGDATATYPE _get_STRING_UTF8();
    // Set static field: static public FMOD.TAGDATATYPE STRING_UTF8
    static void _set_STRING_UTF8(::FMOD::TAGDATATYPE value);
    // static field const value: static public FMOD.TAGDATATYPE CDTOC
    static constexpr const int CDTOC = 7;
    // Get static field: static public FMOD.TAGDATATYPE CDTOC
    static ::FMOD::TAGDATATYPE _get_CDTOC();
    // Set static field: static public FMOD.TAGDATATYPE CDTOC
    static void _set_CDTOC(::FMOD::TAGDATATYPE value);
    // static field const value: static public FMOD.TAGDATATYPE MAX
    static constexpr const int MAX = 8;
    // Get static field: static public FMOD.TAGDATATYPE MAX
    static ::FMOD::TAGDATATYPE _get_MAX();
    // Set static field: static public FMOD.TAGDATATYPE MAX
    static void _set_MAX(::FMOD::TAGDATATYPE value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // FMOD.TAGDATATYPE
  #pragma pack(pop)
  static check_size<sizeof(TAGDATATYPE), 0 + sizeof(int)> __FMOD_TAGDATATYPESizeCheck;
  static_assert(sizeof(TAGDATATYPE) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
