// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: FMOD.VECTOR
#include "FMOD/VECTOR.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: Geometry
  struct Geometry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Geometry, "FMOD", "Geometry");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Geometry
  // [TokenAttribute] Offset: FFFFFFFF
  struct Geometry/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: Geometry
    constexpr Geometry(::System::IntPtr handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return handle;
    }
    // Get instance field reference: public System.IntPtr handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_handle();
    // public FMOD.RESULT release()
    // Offset: 0xBBD70C
    ::FMOD::RESULT release();
    // public FMOD.RESULT addPolygon(System.Single directocclusion, System.Single reverbocclusion, System.Boolean doublesided, System.Int32 numvertices, FMOD.VECTOR[] vertices, out System.Int32 polygonindex)
    // Offset: 0xBBD714
    ::FMOD::RESULT addPolygon(float directocclusion, float reverbocclusion, bool doublesided, int numvertices, ::ArrayW<::FMOD::VECTOR> vertices, ByRef<int> polygonindex);
    // public FMOD.RESULT getNumPolygons(out System.Int32 numpolygons)
    // Offset: 0xBBD720
    ::FMOD::RESULT getNumPolygons(ByRef<int> numpolygons);
    // public FMOD.RESULT getMaxPolygons(out System.Int32 maxpolygons, out System.Int32 maxvertices)
    // Offset: 0xBBD728
    ::FMOD::RESULT getMaxPolygons(ByRef<int> maxpolygons, ByRef<int> maxvertices);
    // public FMOD.RESULT getPolygonNumVertices(System.Int32 index, out System.Int32 numvertices)
    // Offset: 0xBBD730
    ::FMOD::RESULT getPolygonNumVertices(int index, ByRef<int> numvertices);
    // public FMOD.RESULT setPolygonVertex(System.Int32 index, System.Int32 vertexindex, ref FMOD.VECTOR vertex)
    // Offset: 0xBBD738
    ::FMOD::RESULT setPolygonVertex(int index, int vertexindex, ByRef<::FMOD::VECTOR> vertex);
    // public FMOD.RESULT getPolygonVertex(System.Int32 index, System.Int32 vertexindex, out FMOD.VECTOR vertex)
    // Offset: 0xBBD740
    ::FMOD::RESULT getPolygonVertex(int index, int vertexindex, ByRef<::FMOD::VECTOR> vertex);
    // public FMOD.RESULT setPolygonAttributes(System.Int32 index, System.Single directocclusion, System.Single reverbocclusion, System.Boolean doublesided)
    // Offset: 0xBBD748
    ::FMOD::RESULT setPolygonAttributes(int index, float directocclusion, float reverbocclusion, bool doublesided);
    // public FMOD.RESULT getPolygonAttributes(System.Int32 index, out System.Single directocclusion, out System.Single reverbocclusion, out System.Boolean doublesided)
    // Offset: 0xBBD754
    ::FMOD::RESULT getPolygonAttributes(int index, ByRef<float> directocclusion, ByRef<float> reverbocclusion, ByRef<bool> doublesided);
    // public FMOD.RESULT setActive(System.Boolean active)
    // Offset: 0xBBD75C
    ::FMOD::RESULT setActive(bool active);
    // public FMOD.RESULT getActive(out System.Boolean active)
    // Offset: 0xBBD768
    ::FMOD::RESULT getActive(ByRef<bool> active);
    // public FMOD.RESULT setRotation(ref FMOD.VECTOR forward, ref FMOD.VECTOR up)
    // Offset: 0xBBD770
    ::FMOD::RESULT setRotation(ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up);
    // public FMOD.RESULT getRotation(out FMOD.VECTOR forward, out FMOD.VECTOR up)
    // Offset: 0xBBD778
    ::FMOD::RESULT getRotation(ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up);
    // public FMOD.RESULT setPosition(ref FMOD.VECTOR position)
    // Offset: 0xBBD780
    ::FMOD::RESULT setPosition(ByRef<::FMOD::VECTOR> position);
    // public FMOD.RESULT getPosition(out FMOD.VECTOR position)
    // Offset: 0xBBD788
    ::FMOD::RESULT getPosition(ByRef<::FMOD::VECTOR> position);
    // public FMOD.RESULT setScale(ref FMOD.VECTOR scale)
    // Offset: 0xBBD790
    ::FMOD::RESULT setScale(ByRef<::FMOD::VECTOR> scale);
    // public FMOD.RESULT getScale(out FMOD.VECTOR scale)
    // Offset: 0xBBD798
    ::FMOD::RESULT getScale(ByRef<::FMOD::VECTOR> scale);
    // public FMOD.RESULT save(System.IntPtr data, out System.Int32 datasize)
    // Offset: 0xBBD7A0
    ::FMOD::RESULT save(::System::IntPtr data, ByRef<int> datasize);
    // public FMOD.RESULT setUserData(System.IntPtr userdata)
    // Offset: 0xBBD7A8
    ::FMOD::RESULT setUserData(::System::IntPtr userdata);
    // public FMOD.RESULT getUserData(out System.IntPtr userdata)
    // Offset: 0xBBD7B0
    ::FMOD::RESULT getUserData(ByRef<::System::IntPtr> userdata);
    // static private FMOD.RESULT FMOD5_Geometry_Release(System.IntPtr geometry)
    // Offset: 0x22DCD30
    static ::FMOD::RESULT FMOD5_Geometry_Release(::System::IntPtr geometry);
    // static private FMOD.RESULT FMOD5_Geometry_AddPolygon(System.IntPtr geometry, System.Single directocclusion, System.Single reverbocclusion, System.Boolean doublesided, System.Int32 numvertices, FMOD.VECTOR[] vertices, out System.Int32 polygonindex)
    // Offset: 0x22DCDD8
    static ::FMOD::RESULT FMOD5_Geometry_AddPolygon(::System::IntPtr geometry, float directocclusion, float reverbocclusion, bool doublesided, int numvertices, ::ArrayW<::FMOD::VECTOR> vertices, ByRef<int> polygonindex);
    // static private FMOD.RESULT FMOD5_Geometry_GetNumPolygons(System.IntPtr geometry, out System.Int32 numpolygons)
    // Offset: 0x22DCECC
    static ::FMOD::RESULT FMOD5_Geometry_GetNumPolygons(::System::IntPtr geometry, ByRef<int> numpolygons);
    // static private FMOD.RESULT FMOD5_Geometry_GetMaxPolygons(System.IntPtr geometry, out System.Int32 maxpolygons, out System.Int32 maxvertices)
    // Offset: 0x22DCF80
    static ::FMOD::RESULT FMOD5_Geometry_GetMaxPolygons(::System::IntPtr geometry, ByRef<int> maxpolygons, ByRef<int> maxvertices);
    // static private FMOD.RESULT FMOD5_Geometry_GetPolygonNumVertices(System.IntPtr geometry, System.Int32 index, out System.Int32 numvertices)
    // Offset: 0x22DD03C
    static ::FMOD::RESULT FMOD5_Geometry_GetPolygonNumVertices(::System::IntPtr geometry, int index, ByRef<int> numvertices);
    // static private FMOD.RESULT FMOD5_Geometry_SetPolygonVertex(System.IntPtr geometry, System.Int32 index, System.Int32 vertexindex, ref FMOD.VECTOR vertex)
    // Offset: 0x22DD0F8
    static ::FMOD::RESULT FMOD5_Geometry_SetPolygonVertex(::System::IntPtr geometry, int index, int vertexindex, ByRef<::FMOD::VECTOR> vertex);
    // static private FMOD.RESULT FMOD5_Geometry_GetPolygonVertex(System.IntPtr geometry, System.Int32 index, System.Int32 vertexindex, out FMOD.VECTOR vertex)
    // Offset: 0x22DD1C4
    static ::FMOD::RESULT FMOD5_Geometry_GetPolygonVertex(::System::IntPtr geometry, int index, int vertexindex, ByRef<::FMOD::VECTOR> vertex);
    // static private FMOD.RESULT FMOD5_Geometry_SetPolygonAttributes(System.IntPtr geometry, System.Int32 index, System.Single directocclusion, System.Single reverbocclusion, System.Boolean doublesided)
    // Offset: 0x22DD294
    static ::FMOD::RESULT FMOD5_Geometry_SetPolygonAttributes(::System::IntPtr geometry, int index, float directocclusion, float reverbocclusion, bool doublesided);
    // static private FMOD.RESULT FMOD5_Geometry_GetPolygonAttributes(System.IntPtr geometry, System.Int32 index, out System.Single directocclusion, out System.Single reverbocclusion, out System.Boolean doublesided)
    // Offset: 0x22DD368
    static ::FMOD::RESULT FMOD5_Geometry_GetPolygonAttributes(::System::IntPtr geometry, int index, ByRef<float> directocclusion, ByRef<float> reverbocclusion, ByRef<bool> doublesided);
    // static private FMOD.RESULT FMOD5_Geometry_SetActive(System.IntPtr geometry, System.Boolean active)
    // Offset: 0x22DD454
    static ::FMOD::RESULT FMOD5_Geometry_SetActive(::System::IntPtr geometry, bool active);
    // static private FMOD.RESULT FMOD5_Geometry_GetActive(System.IntPtr geometry, out System.Boolean active)
    // Offset: 0x22DD508
    static ::FMOD::RESULT FMOD5_Geometry_GetActive(::System::IntPtr geometry, ByRef<bool> active);
    // static private FMOD.RESULT FMOD5_Geometry_SetRotation(System.IntPtr geometry, ref FMOD.VECTOR forward, ref FMOD.VECTOR up)
    // Offset: 0x22DD5D0
    static ::FMOD::RESULT FMOD5_Geometry_SetRotation(::System::IntPtr geometry, ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up);
    // static private FMOD.RESULT FMOD5_Geometry_GetRotation(System.IntPtr geometry, out FMOD.VECTOR forward, out FMOD.VECTOR up)
    // Offset: 0x22DD68C
    static ::FMOD::RESULT FMOD5_Geometry_GetRotation(::System::IntPtr geometry, ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up);
    // static private FMOD.RESULT FMOD5_Geometry_SetPosition(System.IntPtr geometry, ref FMOD.VECTOR position)
    // Offset: 0x22DD748
    static ::FMOD::RESULT FMOD5_Geometry_SetPosition(::System::IntPtr geometry, ByRef<::FMOD::VECTOR> position);
    // static private FMOD.RESULT FMOD5_Geometry_GetPosition(System.IntPtr geometry, out FMOD.VECTOR position)
    // Offset: 0x22DD7FC
    static ::FMOD::RESULT FMOD5_Geometry_GetPosition(::System::IntPtr geometry, ByRef<::FMOD::VECTOR> position);
    // static private FMOD.RESULT FMOD5_Geometry_SetScale(System.IntPtr geometry, ref FMOD.VECTOR scale)
    // Offset: 0x22DD8B0
    static ::FMOD::RESULT FMOD5_Geometry_SetScale(::System::IntPtr geometry, ByRef<::FMOD::VECTOR> scale);
    // static private FMOD.RESULT FMOD5_Geometry_GetScale(System.IntPtr geometry, out FMOD.VECTOR scale)
    // Offset: 0x22DD964
    static ::FMOD::RESULT FMOD5_Geometry_GetScale(::System::IntPtr geometry, ByRef<::FMOD::VECTOR> scale);
    // static private FMOD.RESULT FMOD5_Geometry_Save(System.IntPtr geometry, System.IntPtr data, out System.Int32 datasize)
    // Offset: 0x22DDA18
    static ::FMOD::RESULT FMOD5_Geometry_Save(::System::IntPtr geometry, ::System::IntPtr data, ByRef<int> datasize);
    // static private FMOD.RESULT FMOD5_Geometry_SetUserData(System.IntPtr geometry, System.IntPtr userdata)
    // Offset: 0x22DDAD4
    static ::FMOD::RESULT FMOD5_Geometry_SetUserData(::System::IntPtr geometry, ::System::IntPtr userdata);
    // static private FMOD.RESULT FMOD5_Geometry_GetUserData(System.IntPtr geometry, out System.IntPtr userdata)
    // Offset: 0x22DDB88
    static ::FMOD::RESULT FMOD5_Geometry_GetUserData(::System::IntPtr geometry, ByRef<::System::IntPtr> userdata);
    // public System.Boolean hasHandle()
    // Offset: 0xBBD7B8
    bool hasHandle();
    // public System.Void clearHandle()
    // Offset: 0xBBD7C0
    void clearHandle();
  }; // FMOD.Geometry
  #pragma pack(pop)
  static check_size<sizeof(Geometry), 0 + sizeof(::System::IntPtr)> __FMOD_GeometrySizeCheck;
  static_assert(sizeof(Geometry) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::Geometry::release
// Il2CppName: release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)()>(&FMOD::Geometry::release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::addPolygon
// Il2CppName: addPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(float, float, bool, int, ::ArrayW<::FMOD::VECTOR>, ByRef<int>)>(&FMOD::Geometry::addPolygon)> {
  static const MethodInfo* get() {
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* doublesided = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* numvertices = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("FMOD", "VECTOR"), 1)->byval_arg;
    static auto* polygonindex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "addPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{directocclusion, reverbocclusion, doublesided, numvertices, vertices, polygonindex});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::getNumPolygons
// Il2CppName: getNumPolygons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(ByRef<int>)>(&FMOD::Geometry::getNumPolygons)> {
  static const MethodInfo* get() {
    static auto* numpolygons = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "getNumPolygons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numpolygons});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::getMaxPolygons
// Il2CppName: getMaxPolygons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(ByRef<int>, ByRef<int>)>(&FMOD::Geometry::getMaxPolygons)> {
  static const MethodInfo* get() {
    static auto* maxpolygons = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maxvertices = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "getMaxPolygons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxpolygons, maxvertices});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::getPolygonNumVertices
// Il2CppName: getPolygonNumVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(int, ByRef<int>)>(&FMOD::Geometry::getPolygonNumVertices)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* numvertices = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "getPolygonNumVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, numvertices});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::setPolygonVertex
// Il2CppName: setPolygonVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(int, int, ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::setPolygonVertex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertexindex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertex = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "setPolygonVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, vertexindex, vertex});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::getPolygonVertex
// Il2CppName: getPolygonVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(int, int, ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::getPolygonVertex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertexindex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertex = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "getPolygonVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, vertexindex, vertex});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::setPolygonAttributes
// Il2CppName: setPolygonAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(int, float, float, bool)>(&FMOD::Geometry::setPolygonAttributes)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* doublesided = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "setPolygonAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, directocclusion, reverbocclusion, doublesided});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::getPolygonAttributes
// Il2CppName: getPolygonAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(int, ByRef<float>, ByRef<float>, ByRef<bool>)>(&FMOD::Geometry::getPolygonAttributes)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* doublesided = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "getPolygonAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, directocclusion, reverbocclusion, doublesided});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::setActive
// Il2CppName: setActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(bool)>(&FMOD::Geometry::setActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "setActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::getActive
// Il2CppName: getActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(ByRef<bool>)>(&FMOD::Geometry::getActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "getActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::setRotation
// Il2CppName: setRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::setRotation)> {
  static const MethodInfo* get() {
    static auto* forward = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "setRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forward, up});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::getRotation
// Il2CppName: getRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::getRotation)> {
  static const MethodInfo* get() {
    static auto* forward = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "getRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forward, up});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::setPosition
// Il2CppName: setPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::setPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "setPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::getPosition
// Il2CppName: getPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::getPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "getPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::setScale
// Il2CppName: setScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::setScale)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "setScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::getScale
// Il2CppName: getScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::getScale)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "getScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::save
// Il2CppName: save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(::System::IntPtr, ByRef<int>)>(&FMOD::Geometry::save)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* datasize = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, datasize});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::setUserData
// Il2CppName: setUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(::System::IntPtr)>(&FMOD::Geometry::setUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "setUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::getUserData
// Il2CppName: getUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Geometry::*)(ByRef<::System::IntPtr>)>(&FMOD::Geometry::getUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "getUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_Release
// Il2CppName: FMOD5_Geometry_Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Geometry::FMOD5_Geometry_Release)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_AddPolygon
// Il2CppName: FMOD5_Geometry_AddPolygon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float, float, bool, int, ::ArrayW<::FMOD::VECTOR>, ByRef<int>)>(&FMOD::Geometry::FMOD5_Geometry_AddPolygon)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* doublesided = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* numvertices = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("FMOD", "VECTOR"), 1)->byval_arg;
    static auto* polygonindex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_AddPolygon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, directocclusion, reverbocclusion, doublesided, numvertices, vertices, polygonindex});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_GetNumPolygons
// Il2CppName: FMOD5_Geometry_GetNumPolygons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Geometry::FMOD5_Geometry_GetNumPolygons)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numpolygons = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_GetNumPolygons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, numpolygons});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_GetMaxPolygons
// Il2CppName: FMOD5_Geometry_GetMaxPolygons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>, ByRef<int>)>(&FMOD::Geometry::FMOD5_Geometry_GetMaxPolygons)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* maxpolygons = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maxvertices = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_GetMaxPolygons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, maxpolygons, maxvertices});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_GetPolygonNumVertices
// Il2CppName: FMOD5_Geometry_GetPolygonNumVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<int>)>(&FMOD::Geometry::FMOD5_Geometry_GetPolygonNumVertices)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* numvertices = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_GetPolygonNumVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, index, numvertices});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_SetPolygonVertex
// Il2CppName: FMOD5_Geometry_SetPolygonVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, int, ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::FMOD5_Geometry_SetPolygonVertex)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertexindex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertex = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_SetPolygonVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, index, vertexindex, vertex});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_GetPolygonVertex
// Il2CppName: FMOD5_Geometry_GetPolygonVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, int, ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::FMOD5_Geometry_GetPolygonVertex)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertexindex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertex = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_GetPolygonVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, index, vertexindex, vertex});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_SetPolygonAttributes
// Il2CppName: FMOD5_Geometry_SetPolygonAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, float, float, bool)>(&FMOD::Geometry::FMOD5_Geometry_SetPolygonAttributes)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* doublesided = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_SetPolygonAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, index, directocclusion, reverbocclusion, doublesided});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_GetPolygonAttributes
// Il2CppName: FMOD5_Geometry_GetPolygonAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<float>, ByRef<float>, ByRef<bool>)>(&FMOD::Geometry::FMOD5_Geometry_GetPolygonAttributes)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* doublesided = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_GetPolygonAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, index, directocclusion, reverbocclusion, doublesided});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_SetActive
// Il2CppName: FMOD5_Geometry_SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool)>(&FMOD::Geometry::FMOD5_Geometry_SetActive)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, active});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_GetActive
// Il2CppName: FMOD5_Geometry_GetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::Geometry::FMOD5_Geometry_GetActive)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_GetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, active});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_SetRotation
// Il2CppName: FMOD5_Geometry_SetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::FMOD5_Geometry_SetRotation)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* forward = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_SetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, forward, up});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_GetRotation
// Il2CppName: FMOD5_Geometry_GetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::FMOD5_Geometry_GetRotation)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* forward = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_GetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, forward, up});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_SetPosition
// Il2CppName: FMOD5_Geometry_SetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::FMOD5_Geometry_SetPosition)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_SetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, position});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_GetPosition
// Il2CppName: FMOD5_Geometry_GetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::FMOD5_Geometry_GetPosition)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_GetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, position});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_SetScale
// Il2CppName: FMOD5_Geometry_SetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::FMOD5_Geometry_SetScale)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_SetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, scale});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_GetScale
// Il2CppName: FMOD5_Geometry_GetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>)>(&FMOD::Geometry::FMOD5_Geometry_GetScale)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_GetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, scale});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_Save
// Il2CppName: FMOD5_Geometry_Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, ByRef<int>)>(&FMOD::Geometry::FMOD5_Geometry_Save)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* datasize = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, data, datasize});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_SetUserData
// Il2CppName: FMOD5_Geometry_SetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::Geometry::FMOD5_Geometry_SetUserData)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_SetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::FMOD5_Geometry_GetUserData
// Il2CppName: FMOD5_Geometry_GetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Geometry::FMOD5_Geometry_GetUserData)> {
  static const MethodInfo* get() {
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "FMOD5_Geometry_GetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geometry, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::hasHandle
// Il2CppName: hasHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::Geometry::*)()>(&FMOD::Geometry::hasHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "hasHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Geometry::clearHandle
// Il2CppName: clearHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::Geometry::*)()>(&FMOD::Geometry::clearHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Geometry), "clearHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
