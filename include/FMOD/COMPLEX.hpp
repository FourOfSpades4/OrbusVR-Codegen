// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: COMPLEX
  struct COMPLEX;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::COMPLEX, "FMOD", "COMPLEX");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.COMPLEX
  // [TokenAttribute] Offset: FFFFFFFF
  struct COMPLEX/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single real
    // Size: 0x4
    // Offset: 0x0
    float real;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single imag
    // Size: 0x4
    // Offset: 0x4
    float imag;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: COMPLEX
    constexpr COMPLEX(float real_ = {}, float imag_ = {}) noexcept : real{real_}, imag{imag_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single real
    [[deprecated("Use field access instead!")]] float& dyn_real();
    // Get instance field reference: public System.Single imag
    [[deprecated("Use field access instead!")]] float& dyn_imag();
  }; // FMOD.COMPLEX
  #pragma pack(pop)
  static check_size<sizeof(COMPLEX), 4 + sizeof(float)> __FMOD_COMPLEXSizeCheck;
  static_assert(sizeof(COMPLEX) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
