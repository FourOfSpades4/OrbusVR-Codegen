// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: OPENSTATE
  struct OPENSTATE;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::OPENSTATE, "FMOD", "OPENSTATE");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.OPENSTATE
  // [TokenAttribute] Offset: FFFFFFFF
  struct OPENSTATE/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: OPENSTATE
    constexpr OPENSTATE(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.OPENSTATE READY
    static constexpr const int READY = 0;
    // Get static field: static public FMOD.OPENSTATE READY
    static ::FMOD::OPENSTATE _get_READY();
    // Set static field: static public FMOD.OPENSTATE READY
    static void _set_READY(::FMOD::OPENSTATE value);
    // static field const value: static public FMOD.OPENSTATE LOADING
    static constexpr const int LOADING = 1;
    // Get static field: static public FMOD.OPENSTATE LOADING
    static ::FMOD::OPENSTATE _get_LOADING();
    // Set static field: static public FMOD.OPENSTATE LOADING
    static void _set_LOADING(::FMOD::OPENSTATE value);
    // static field const value: static public FMOD.OPENSTATE ERROR
    static constexpr const int ERROR = 2;
    // Get static field: static public FMOD.OPENSTATE ERROR
    static ::FMOD::OPENSTATE _get_ERROR();
    // Set static field: static public FMOD.OPENSTATE ERROR
    static void _set_ERROR(::FMOD::OPENSTATE value);
    // static field const value: static public FMOD.OPENSTATE CONNECTING
    static constexpr const int CONNECTING = 3;
    // Get static field: static public FMOD.OPENSTATE CONNECTING
    static ::FMOD::OPENSTATE _get_CONNECTING();
    // Set static field: static public FMOD.OPENSTATE CONNECTING
    static void _set_CONNECTING(::FMOD::OPENSTATE value);
    // static field const value: static public FMOD.OPENSTATE BUFFERING
    static constexpr const int BUFFERING = 4;
    // Get static field: static public FMOD.OPENSTATE BUFFERING
    static ::FMOD::OPENSTATE _get_BUFFERING();
    // Set static field: static public FMOD.OPENSTATE BUFFERING
    static void _set_BUFFERING(::FMOD::OPENSTATE value);
    // static field const value: static public FMOD.OPENSTATE SEEKING
    static constexpr const int SEEKING = 5;
    // Get static field: static public FMOD.OPENSTATE SEEKING
    static ::FMOD::OPENSTATE _get_SEEKING();
    // Set static field: static public FMOD.OPENSTATE SEEKING
    static void _set_SEEKING(::FMOD::OPENSTATE value);
    // static field const value: static public FMOD.OPENSTATE PLAYING
    static constexpr const int PLAYING = 6;
    // Get static field: static public FMOD.OPENSTATE PLAYING
    static ::FMOD::OPENSTATE _get_PLAYING();
    // Set static field: static public FMOD.OPENSTATE PLAYING
    static void _set_PLAYING(::FMOD::OPENSTATE value);
    // static field const value: static public FMOD.OPENSTATE SETPOSITION
    static constexpr const int SETPOSITION = 7;
    // Get static field: static public FMOD.OPENSTATE SETPOSITION
    static ::FMOD::OPENSTATE _get_SETPOSITION();
    // Set static field: static public FMOD.OPENSTATE SETPOSITION
    static void _set_SETPOSITION(::FMOD::OPENSTATE value);
    // static field const value: static public FMOD.OPENSTATE MAX
    static constexpr const int MAX = 8;
    // Get static field: static public FMOD.OPENSTATE MAX
    static ::FMOD::OPENSTATE _get_MAX();
    // Set static field: static public FMOD.OPENSTATE MAX
    static void _set_MAX(::FMOD::OPENSTATE value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // FMOD.OPENSTATE
  #pragma pack(pop)
  static check_size<sizeof(OPENSTATE), 0 + sizeof(int)> __FMOD_OPENSTATESizeCheck;
  static_assert(sizeof(OPENSTATE) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
