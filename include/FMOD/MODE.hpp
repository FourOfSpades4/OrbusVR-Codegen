// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: MODE
  struct MODE;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::MODE, "FMOD", "MODE");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.MODE
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  struct MODE/*, public ::System::Enum*/ {
    public:
    public:
    // public System.UInt32 value__
    // Size: 0x4
    // Offset: 0x0
    uint value;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: MODE
    constexpr MODE(uint value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint
    constexpr operator uint() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.MODE DEFAULT
    static constexpr const uint DEFAULT = 0u;
    // Get static field: static public FMOD.MODE DEFAULT
    static ::FMOD::MODE _get_DEFAULT();
    // Set static field: static public FMOD.MODE DEFAULT
    static void _set_DEFAULT(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE LOOP_OFF
    static constexpr const uint LOOP_OFF = 1u;
    // Get static field: static public FMOD.MODE LOOP_OFF
    static ::FMOD::MODE _get_LOOP_OFF();
    // Set static field: static public FMOD.MODE LOOP_OFF
    static void _set_LOOP_OFF(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE LOOP_NORMAL
    static constexpr const uint LOOP_NORMAL = 2u;
    // Get static field: static public FMOD.MODE LOOP_NORMAL
    static ::FMOD::MODE _get_LOOP_NORMAL();
    // Set static field: static public FMOD.MODE LOOP_NORMAL
    static void _set_LOOP_NORMAL(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE LOOP_BIDI
    static constexpr const uint LOOP_BIDI = 4u;
    // Get static field: static public FMOD.MODE LOOP_BIDI
    static ::FMOD::MODE _get_LOOP_BIDI();
    // Set static field: static public FMOD.MODE LOOP_BIDI
    static void _set_LOOP_BIDI(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE _2D
    static constexpr const uint _2D = 8u;
    // Get static field: static public FMOD.MODE _2D
    static ::FMOD::MODE _get__2D();
    // Set static field: static public FMOD.MODE _2D
    static void _set__2D(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE _3D
    static constexpr const uint _3D = 16u;
    // Get static field: static public FMOD.MODE _3D
    static ::FMOD::MODE _get__3D();
    // Set static field: static public FMOD.MODE _3D
    static void _set__3D(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE CREATESTREAM
    static constexpr const uint CREATESTREAM = 128u;
    // Get static field: static public FMOD.MODE CREATESTREAM
    static ::FMOD::MODE _get_CREATESTREAM();
    // Set static field: static public FMOD.MODE CREATESTREAM
    static void _set_CREATESTREAM(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE CREATESAMPLE
    static constexpr const uint CREATESAMPLE = 256u;
    // Get static field: static public FMOD.MODE CREATESAMPLE
    static ::FMOD::MODE _get_CREATESAMPLE();
    // Set static field: static public FMOD.MODE CREATESAMPLE
    static void _set_CREATESAMPLE(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE CREATECOMPRESSEDSAMPLE
    static constexpr const uint CREATECOMPRESSEDSAMPLE = 512u;
    // Get static field: static public FMOD.MODE CREATECOMPRESSEDSAMPLE
    static ::FMOD::MODE _get_CREATECOMPRESSEDSAMPLE();
    // Set static field: static public FMOD.MODE CREATECOMPRESSEDSAMPLE
    static void _set_CREATECOMPRESSEDSAMPLE(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE OPENUSER
    static constexpr const uint OPENUSER = 1024u;
    // Get static field: static public FMOD.MODE OPENUSER
    static ::FMOD::MODE _get_OPENUSER();
    // Set static field: static public FMOD.MODE OPENUSER
    static void _set_OPENUSER(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE OPENMEMORY
    static constexpr const uint OPENMEMORY = 2048u;
    // Get static field: static public FMOD.MODE OPENMEMORY
    static ::FMOD::MODE _get_OPENMEMORY();
    // Set static field: static public FMOD.MODE OPENMEMORY
    static void _set_OPENMEMORY(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE OPENMEMORY_POINT
    static constexpr const uint OPENMEMORY_POINT = 268435456u;
    // Get static field: static public FMOD.MODE OPENMEMORY_POINT
    static ::FMOD::MODE _get_OPENMEMORY_POINT();
    // Set static field: static public FMOD.MODE OPENMEMORY_POINT
    static void _set_OPENMEMORY_POINT(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE OPENRAW
    static constexpr const uint OPENRAW = 4096u;
    // Get static field: static public FMOD.MODE OPENRAW
    static ::FMOD::MODE _get_OPENRAW();
    // Set static field: static public FMOD.MODE OPENRAW
    static void _set_OPENRAW(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE OPENONLY
    static constexpr const uint OPENONLY = 8192u;
    // Get static field: static public FMOD.MODE OPENONLY
    static ::FMOD::MODE _get_OPENONLY();
    // Set static field: static public FMOD.MODE OPENONLY
    static void _set_OPENONLY(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE ACCURATETIME
    static constexpr const uint ACCURATETIME = 16384u;
    // Get static field: static public FMOD.MODE ACCURATETIME
    static ::FMOD::MODE _get_ACCURATETIME();
    // Set static field: static public FMOD.MODE ACCURATETIME
    static void _set_ACCURATETIME(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE MPEGSEARCH
    static constexpr const uint MPEGSEARCH = 32768u;
    // Get static field: static public FMOD.MODE MPEGSEARCH
    static ::FMOD::MODE _get_MPEGSEARCH();
    // Set static field: static public FMOD.MODE MPEGSEARCH
    static void _set_MPEGSEARCH(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE NONBLOCKING
    static constexpr const uint NONBLOCKING = 65536u;
    // Get static field: static public FMOD.MODE NONBLOCKING
    static ::FMOD::MODE _get_NONBLOCKING();
    // Set static field: static public FMOD.MODE NONBLOCKING
    static void _set_NONBLOCKING(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE UNIQUE
    static constexpr const uint UNIQUE = 131072u;
    // Get static field: static public FMOD.MODE UNIQUE
    static ::FMOD::MODE _get_UNIQUE();
    // Set static field: static public FMOD.MODE UNIQUE
    static void _set_UNIQUE(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE _3D_HEADRELATIVE
    static constexpr const uint _3D_HEADRELATIVE = 262144u;
    // Get static field: static public FMOD.MODE _3D_HEADRELATIVE
    static ::FMOD::MODE _get__3D_HEADRELATIVE();
    // Set static field: static public FMOD.MODE _3D_HEADRELATIVE
    static void _set__3D_HEADRELATIVE(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE _3D_WORLDRELATIVE
    static constexpr const uint _3D_WORLDRELATIVE = 524288u;
    // Get static field: static public FMOD.MODE _3D_WORLDRELATIVE
    static ::FMOD::MODE _get__3D_WORLDRELATIVE();
    // Set static field: static public FMOD.MODE _3D_WORLDRELATIVE
    static void _set__3D_WORLDRELATIVE(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE _3D_INVERSEROLLOFF
    static constexpr const uint _3D_INVERSEROLLOFF = 1048576u;
    // Get static field: static public FMOD.MODE _3D_INVERSEROLLOFF
    static ::FMOD::MODE _get__3D_INVERSEROLLOFF();
    // Set static field: static public FMOD.MODE _3D_INVERSEROLLOFF
    static void _set__3D_INVERSEROLLOFF(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE _3D_LINEARROLLOFF
    static constexpr const uint _3D_LINEARROLLOFF = 2097152u;
    // Get static field: static public FMOD.MODE _3D_LINEARROLLOFF
    static ::FMOD::MODE _get__3D_LINEARROLLOFF();
    // Set static field: static public FMOD.MODE _3D_LINEARROLLOFF
    static void _set__3D_LINEARROLLOFF(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE _3D_LINEARSQUAREROLLOFF
    static constexpr const uint _3D_LINEARSQUAREROLLOFF = 4194304u;
    // Get static field: static public FMOD.MODE _3D_LINEARSQUAREROLLOFF
    static ::FMOD::MODE _get__3D_LINEARSQUAREROLLOFF();
    // Set static field: static public FMOD.MODE _3D_LINEARSQUAREROLLOFF
    static void _set__3D_LINEARSQUAREROLLOFF(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE _3D_INVERSETAPEREDROLLOFF
    static constexpr const uint _3D_INVERSETAPEREDROLLOFF = 8388608u;
    // Get static field: static public FMOD.MODE _3D_INVERSETAPEREDROLLOFF
    static ::FMOD::MODE _get__3D_INVERSETAPEREDROLLOFF();
    // Set static field: static public FMOD.MODE _3D_INVERSETAPEREDROLLOFF
    static void _set__3D_INVERSETAPEREDROLLOFF(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE _3D_CUSTOMROLLOFF
    static constexpr const uint _3D_CUSTOMROLLOFF = 67108864u;
    // Get static field: static public FMOD.MODE _3D_CUSTOMROLLOFF
    static ::FMOD::MODE _get__3D_CUSTOMROLLOFF();
    // Set static field: static public FMOD.MODE _3D_CUSTOMROLLOFF
    static void _set__3D_CUSTOMROLLOFF(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE _3D_IGNOREGEOMETRY
    static constexpr const uint _3D_IGNOREGEOMETRY = 1073741824u;
    // Get static field: static public FMOD.MODE _3D_IGNOREGEOMETRY
    static ::FMOD::MODE _get__3D_IGNOREGEOMETRY();
    // Set static field: static public FMOD.MODE _3D_IGNOREGEOMETRY
    static void _set__3D_IGNOREGEOMETRY(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE IGNORETAGS
    static constexpr const uint IGNORETAGS = 33554432u;
    // Get static field: static public FMOD.MODE IGNORETAGS
    static ::FMOD::MODE _get_IGNORETAGS();
    // Set static field: static public FMOD.MODE IGNORETAGS
    static void _set_IGNORETAGS(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE LOWMEM
    static constexpr const uint LOWMEM = 134217728u;
    // Get static field: static public FMOD.MODE LOWMEM
    static ::FMOD::MODE _get_LOWMEM();
    // Set static field: static public FMOD.MODE LOWMEM
    static void _set_LOWMEM(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE LOADSECONDARYRAM
    static constexpr const uint LOADSECONDARYRAM = 536870912u;
    // Get static field: static public FMOD.MODE LOADSECONDARYRAM
    static ::FMOD::MODE _get_LOADSECONDARYRAM();
    // Set static field: static public FMOD.MODE LOADSECONDARYRAM
    static void _set_LOADSECONDARYRAM(::FMOD::MODE value);
    // static field const value: static public FMOD.MODE VIRTUAL_PLAYFROMSTART
    static constexpr const uint VIRTUAL_PLAYFROMSTART = 2147483648u;
    // Get static field: static public FMOD.MODE VIRTUAL_PLAYFROMSTART
    static ::FMOD::MODE _get_VIRTUAL_PLAYFROMSTART();
    // Set static field: static public FMOD.MODE VIRTUAL_PLAYFROMSTART
    static void _set_VIRTUAL_PLAYFROMSTART(::FMOD::MODE value);
    // Get instance field reference: public System.UInt32 value__
    [[deprecated("Use field access instead!")]] uint& dyn_value__();
  }; // FMOD.MODE
  #pragma pack(pop)
  static check_size<sizeof(MODE), 0 + sizeof(uint)> __FMOD_MODESizeCheck;
  static_assert(sizeof(MODE) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
