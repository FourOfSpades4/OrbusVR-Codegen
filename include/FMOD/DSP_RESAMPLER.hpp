// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: DSP_RESAMPLER
  struct DSP_RESAMPLER;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::DSP_RESAMPLER, "FMOD", "DSP_RESAMPLER");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.DSP_RESAMPLER
  // [TokenAttribute] Offset: FFFFFFFF
  struct DSP_RESAMPLER/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: DSP_RESAMPLER
    constexpr DSP_RESAMPLER(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.DSP_RESAMPLER DEFAULT
    static constexpr const int DEFAULT = 0;
    // Get static field: static public FMOD.DSP_RESAMPLER DEFAULT
    static ::FMOD::DSP_RESAMPLER _get_DEFAULT();
    // Set static field: static public FMOD.DSP_RESAMPLER DEFAULT
    static void _set_DEFAULT(::FMOD::DSP_RESAMPLER value);
    // static field const value: static public FMOD.DSP_RESAMPLER NOINTERP
    static constexpr const int NOINTERP = 1;
    // Get static field: static public FMOD.DSP_RESAMPLER NOINTERP
    static ::FMOD::DSP_RESAMPLER _get_NOINTERP();
    // Set static field: static public FMOD.DSP_RESAMPLER NOINTERP
    static void _set_NOINTERP(::FMOD::DSP_RESAMPLER value);
    // static field const value: static public FMOD.DSP_RESAMPLER LINEAR
    static constexpr const int LINEAR = 2;
    // Get static field: static public FMOD.DSP_RESAMPLER LINEAR
    static ::FMOD::DSP_RESAMPLER _get_LINEAR();
    // Set static field: static public FMOD.DSP_RESAMPLER LINEAR
    static void _set_LINEAR(::FMOD::DSP_RESAMPLER value);
    // static field const value: static public FMOD.DSP_RESAMPLER CUBIC
    static constexpr const int CUBIC = 3;
    // Get static field: static public FMOD.DSP_RESAMPLER CUBIC
    static ::FMOD::DSP_RESAMPLER _get_CUBIC();
    // Set static field: static public FMOD.DSP_RESAMPLER CUBIC
    static void _set_CUBIC(::FMOD::DSP_RESAMPLER value);
    // static field const value: static public FMOD.DSP_RESAMPLER SPLINE
    static constexpr const int SPLINE = 4;
    // Get static field: static public FMOD.DSP_RESAMPLER SPLINE
    static ::FMOD::DSP_RESAMPLER _get_SPLINE();
    // Set static field: static public FMOD.DSP_RESAMPLER SPLINE
    static void _set_SPLINE(::FMOD::DSP_RESAMPLER value);
    // static field const value: static public FMOD.DSP_RESAMPLER MAX
    static constexpr const int MAX = 5;
    // Get static field: static public FMOD.DSP_RESAMPLER MAX
    static ::FMOD::DSP_RESAMPLER _get_MAX();
    // Set static field: static public FMOD.DSP_RESAMPLER MAX
    static void _set_MAX(::FMOD::DSP_RESAMPLER value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // FMOD.DSP_RESAMPLER
  #pragma pack(pop)
  static check_size<sizeof(DSP_RESAMPLER), 0 + sizeof(int)> __FMOD_DSP_RESAMPLERSizeCheck;
  static_assert(sizeof(DSP_RESAMPLER) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
