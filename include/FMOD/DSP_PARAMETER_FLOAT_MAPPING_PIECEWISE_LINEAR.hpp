// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR
  struct DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR, "FMOD", "DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR
  // [TokenAttribute] Offset: FFFFFFFF
  struct DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 numpoints
    // Size: 0x4
    // Offset: 0x0
    int numpoints;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: numpoints and: pointparamvalues
    char __padding0[0x4] = {};
    // public System.IntPtr pointparamvalues
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr pointparamvalues;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr pointpositions
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr pointpositions;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR
    constexpr DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR(int numpoints_ = {}, ::System::IntPtr pointparamvalues_ = {}, ::System::IntPtr pointpositions_ = {}) noexcept : numpoints{numpoints_}, pointparamvalues{pointparamvalues_}, pointpositions{pointpositions_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 numpoints
    [[deprecated("Use field access instead!")]] int& dyn_numpoints();
    // Get instance field reference: public System.IntPtr pointparamvalues
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_pointparamvalues();
    // Get instance field reference: public System.IntPtr pointpositions
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_pointpositions();
  }; // FMOD.DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR
  #pragma pack(pop)
  static check_size<sizeof(DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR), 16 + sizeof(::System::IntPtr)> __FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEARSizeCheck;
  static_assert(sizeof(DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
