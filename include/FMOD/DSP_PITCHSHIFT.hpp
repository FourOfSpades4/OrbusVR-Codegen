// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: DSP_PITCHSHIFT
  struct DSP_PITCHSHIFT;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::DSP_PITCHSHIFT, "FMOD", "DSP_PITCHSHIFT");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.DSP_PITCHSHIFT
  // [TokenAttribute] Offset: FFFFFFFF
  struct DSP_PITCHSHIFT/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: DSP_PITCHSHIFT
    constexpr DSP_PITCHSHIFT(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.DSP_PITCHSHIFT PITCH
    static constexpr const int PITCH = 0;
    // Get static field: static public FMOD.DSP_PITCHSHIFT PITCH
    static ::FMOD::DSP_PITCHSHIFT _get_PITCH();
    // Set static field: static public FMOD.DSP_PITCHSHIFT PITCH
    static void _set_PITCH(::FMOD::DSP_PITCHSHIFT value);
    // static field const value: static public FMOD.DSP_PITCHSHIFT FFTSIZE
    static constexpr const int FFTSIZE = 1;
    // Get static field: static public FMOD.DSP_PITCHSHIFT FFTSIZE
    static ::FMOD::DSP_PITCHSHIFT _get_FFTSIZE();
    // Set static field: static public FMOD.DSP_PITCHSHIFT FFTSIZE
    static void _set_FFTSIZE(::FMOD::DSP_PITCHSHIFT value);
    // static field const value: static public FMOD.DSP_PITCHSHIFT OVERLAP
    static constexpr const int OVERLAP = 2;
    // Get static field: static public FMOD.DSP_PITCHSHIFT OVERLAP
    static ::FMOD::DSP_PITCHSHIFT _get_OVERLAP();
    // Set static field: static public FMOD.DSP_PITCHSHIFT OVERLAP
    static void _set_OVERLAP(::FMOD::DSP_PITCHSHIFT value);
    // static field const value: static public FMOD.DSP_PITCHSHIFT MAXCHANNELS
    static constexpr const int MAXCHANNELS = 3;
    // Get static field: static public FMOD.DSP_PITCHSHIFT MAXCHANNELS
    static ::FMOD::DSP_PITCHSHIFT _get_MAXCHANNELS();
    // Set static field: static public FMOD.DSP_PITCHSHIFT MAXCHANNELS
    static void _set_MAXCHANNELS(::FMOD::DSP_PITCHSHIFT value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // FMOD.DSP_PITCHSHIFT
  #pragma pack(pop)
  static check_size<sizeof(DSP_PITCHSHIFT), 0 + sizeof(int)> __FMOD_DSP_PITCHSHIFTSizeCheck;
  static_assert(sizeof(DSP_PITCHSHIFT) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
