// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
  // Forward declaring type: OUTPUTTYPE
  struct OUTPUTTYPE;
  // Forward declaring type: SPEAKERMODE
  struct SPEAKERMODE;
  // Forward declaring type: FILE_OPENCALLBACK
  class FILE_OPENCALLBACK;
  // Forward declaring type: FILE_CLOSECALLBACK
  class FILE_CLOSECALLBACK;
  // Forward declaring type: FILE_READCALLBACK
  class FILE_READCALLBACK;
  // Forward declaring type: FILE_SEEKCALLBACK
  class FILE_SEEKCALLBACK;
  // Forward declaring type: FILE_ASYNCREADCALLBACK
  class FILE_ASYNCREADCALLBACK;
  // Forward declaring type: FILE_ASYNCCANCELCALLBACK
  class FILE_ASYNCCANCELCALLBACK;
  // Forward declaring type: ADVANCEDSETTINGS
  struct ADVANCEDSETTINGS;
  // Forward declaring type: SYSTEM_CALLBACK
  class SYSTEM_CALLBACK;
  // Forward declaring type: SYSTEM_CALLBACK_TYPE
  struct SYSTEM_CALLBACK_TYPE;
  // Forward declaring type: PLUGINTYPE
  struct PLUGINTYPE;
  // Forward declaring type: DSP
  struct DSP;
  // Forward declaring type: DSP_DESCRIPTION
  struct DSP_DESCRIPTION;
  // Forward declaring type: INITFLAGS
  struct INITFLAGS;
  // Forward declaring type: SPEAKER
  struct SPEAKER;
  // Forward declaring type: TIMEUNIT
  struct TIMEUNIT;
  // Forward declaring type: VECTOR
  struct VECTOR;
  // Forward declaring type: CB_3D_ROLLOFFCALLBACK
  class CB_3D_ROLLOFFCALLBACK;
  // Forward declaring type: MODE
  struct MODE;
  // Forward declaring type: CREATESOUNDEXINFO
  struct CREATESOUNDEXINFO;
  // Forward declaring type: Sound
  struct Sound;
  // Forward declaring type: DSP_TYPE
  struct DSP_TYPE;
  // Forward declaring type: ChannelGroup
  struct ChannelGroup;
  // Forward declaring type: SoundGroup
  struct SoundGroup;
  // Forward declaring type: Reverb3D
  struct Reverb3D;
  // Forward declaring type: Channel
  struct Channel;
  // Forward declaring type: REVERB_PROPERTIES
  struct REVERB_PROPERTIES;
  // Forward declaring type: DRIVER_STATE
  struct DRIVER_STATE;
  // Forward declaring type: Geometry
  struct Geometry;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Guid
  struct Guid;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: System
  struct System;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::System, "FMOD", "System");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.System
  // [TokenAttribute] Offset: FFFFFFFF
  struct System/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: System
    constexpr System(::System::IntPtr handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return handle;
    }
    // Get instance field reference: public System.IntPtr handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_handle();
    // public FMOD.RESULT release()
    // Offset: 0xBA10A4
    ::FMOD::RESULT release();
    // public FMOD.RESULT setOutput(FMOD.OUTPUTTYPE output)
    // Offset: 0xBA10AC
    ::FMOD::RESULT setOutput(::FMOD::OUTPUTTYPE output);
    // public FMOD.RESULT getOutput(out FMOD.OUTPUTTYPE output)
    // Offset: 0xBA10B4
    ::FMOD::RESULT getOutput(ByRef<::FMOD::OUTPUTTYPE> output);
    // public FMOD.RESULT getNumDrivers(out System.Int32 numdrivers)
    // Offset: 0xBA10BC
    ::FMOD::RESULT getNumDrivers(ByRef<int> numdrivers);
    // public FMOD.RESULT getDriverInfo(System.Int32 id, out System.String name, System.Int32 namelen, out System.Guid guid, out System.Int32 systemrate, out FMOD.SPEAKERMODE speakermode, out System.Int32 speakermodechannels)
    // Offset: 0xBA10C4
    ::FMOD::RESULT getDriverInfo(int id, ByRef<::StringW> name, int namelen, ByRef<::System::Guid> guid, ByRef<int> systemrate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> speakermodechannels);
    // public FMOD.RESULT getDriverInfo(System.Int32 id, out System.Guid guid, out System.Int32 systemrate, out FMOD.SPEAKERMODE speakermode, out System.Int32 speakermodechannels)
    // Offset: 0xBA10CC
    ::FMOD::RESULT getDriverInfo(int id, ByRef<::System::Guid> guid, ByRef<int> systemrate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> speakermodechannels);
    // public FMOD.RESULT setDriver(System.Int32 driver)
    // Offset: 0xBA10D4
    ::FMOD::RESULT setDriver(int driver);
    // public FMOD.RESULT getDriver(out System.Int32 driver)
    // Offset: 0xBA10DC
    ::FMOD::RESULT getDriver(ByRef<int> driver);
    // public FMOD.RESULT setSoftwareChannels(System.Int32 numsoftwarechannels)
    // Offset: 0xBA10E4
    ::FMOD::RESULT setSoftwareChannels(int numsoftwarechannels);
    // public FMOD.RESULT getSoftwareChannels(out System.Int32 numsoftwarechannels)
    // Offset: 0xBA10EC
    ::FMOD::RESULT getSoftwareChannels(ByRef<int> numsoftwarechannels);
    // public FMOD.RESULT setSoftwareFormat(System.Int32 samplerate, FMOD.SPEAKERMODE speakermode, System.Int32 numrawspeakers)
    // Offset: 0xBA10F4
    ::FMOD::RESULT setSoftwareFormat(int samplerate, ::FMOD::SPEAKERMODE speakermode, int numrawspeakers);
    // public FMOD.RESULT getSoftwareFormat(out System.Int32 samplerate, out FMOD.SPEAKERMODE speakermode, out System.Int32 numrawspeakers)
    // Offset: 0xBA10FC
    ::FMOD::RESULT getSoftwareFormat(ByRef<int> samplerate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> numrawspeakers);
    // public FMOD.RESULT setDSPBufferSize(System.UInt32 bufferlength, System.Int32 numbuffers)
    // Offset: 0xBA1104
    ::FMOD::RESULT setDSPBufferSize(uint bufferlength, int numbuffers);
    // public FMOD.RESULT getDSPBufferSize(out System.UInt32 bufferlength, out System.Int32 numbuffers)
    // Offset: 0xBA110C
    ::FMOD::RESULT getDSPBufferSize(ByRef<uint> bufferlength, ByRef<int> numbuffers);
    // public FMOD.RESULT setFileSystem(FMOD.FILE_OPENCALLBACK useropen, FMOD.FILE_CLOSECALLBACK userclose, FMOD.FILE_READCALLBACK userread, FMOD.FILE_SEEKCALLBACK userseek, FMOD.FILE_ASYNCREADCALLBACK userasyncread, FMOD.FILE_ASYNCCANCELCALLBACK userasynccancel, System.Int32 blockalign)
    // Offset: 0xBA1114
    ::FMOD::RESULT setFileSystem(::FMOD::FILE_OPENCALLBACK* useropen, ::FMOD::FILE_CLOSECALLBACK* userclose, ::FMOD::FILE_READCALLBACK* userread, ::FMOD::FILE_SEEKCALLBACK* userseek, ::FMOD::FILE_ASYNCREADCALLBACK* userasyncread, ::FMOD::FILE_ASYNCCANCELCALLBACK* userasynccancel, int blockalign);
    // public FMOD.RESULT attachFileSystem(FMOD.FILE_OPENCALLBACK useropen, FMOD.FILE_CLOSECALLBACK userclose, FMOD.FILE_READCALLBACK userread, FMOD.FILE_SEEKCALLBACK userseek)
    // Offset: 0xBA111C
    ::FMOD::RESULT attachFileSystem(::FMOD::FILE_OPENCALLBACK* useropen, ::FMOD::FILE_CLOSECALLBACK* userclose, ::FMOD::FILE_READCALLBACK* userread, ::FMOD::FILE_SEEKCALLBACK* userseek);
    // public FMOD.RESULT setAdvancedSettings(ref FMOD.ADVANCEDSETTINGS settings)
    // Offset: 0xBA1124
    ::FMOD::RESULT setAdvancedSettings(ByRef<::FMOD::ADVANCEDSETTINGS> settings);
    // public FMOD.RESULT getAdvancedSettings(ref FMOD.ADVANCEDSETTINGS settings)
    // Offset: 0xBA112C
    ::FMOD::RESULT getAdvancedSettings(ByRef<::FMOD::ADVANCEDSETTINGS> settings);
    // public FMOD.RESULT setCallback(FMOD.SYSTEM_CALLBACK callback, FMOD.SYSTEM_CALLBACK_TYPE callbackmask)
    // Offset: 0xBA1134
    ::FMOD::RESULT setCallback(::FMOD::SYSTEM_CALLBACK* callback, ::FMOD::SYSTEM_CALLBACK_TYPE callbackmask);
    // public FMOD.RESULT setPluginPath(System.String path)
    // Offset: 0xBA113C
    ::FMOD::RESULT setPluginPath(::StringW path);
    // public FMOD.RESULT loadPlugin(System.String filename, out System.UInt32 handle, System.UInt32 priority)
    // Offset: 0xBA1144
    ::FMOD::RESULT loadPlugin(::StringW filename, ByRef<uint> handle, uint priority);
    // public FMOD.RESULT loadPlugin(System.String filename, out System.UInt32 handle)
    // Offset: 0xBA114C
    ::FMOD::RESULT loadPlugin(::StringW filename, ByRef<uint> handle);
    // public FMOD.RESULT unloadPlugin(System.UInt32 handle)
    // Offset: 0xBA1158
    ::FMOD::RESULT unloadPlugin(uint handle);
    // public FMOD.RESULT getNumNestedPlugins(System.UInt32 handle, out System.Int32 count)
    // Offset: 0xBA1160
    ::FMOD::RESULT getNumNestedPlugins(uint handle, ByRef<int> count);
    // public FMOD.RESULT getNestedPlugin(System.UInt32 handle, System.Int32 index, out System.UInt32 nestedhandle)
    // Offset: 0xBA1168
    ::FMOD::RESULT getNestedPlugin(uint handle, int index, ByRef<uint> nestedhandle);
    // public FMOD.RESULT getNumPlugins(FMOD.PLUGINTYPE plugintype, out System.Int32 numplugins)
    // Offset: 0xBA1170
    ::FMOD::RESULT getNumPlugins(::FMOD::PLUGINTYPE plugintype, ByRef<int> numplugins);
    // public FMOD.RESULT getPluginHandle(FMOD.PLUGINTYPE plugintype, System.Int32 index, out System.UInt32 handle)
    // Offset: 0xBA1178
    ::FMOD::RESULT getPluginHandle(::FMOD::PLUGINTYPE plugintype, int index, ByRef<uint> handle);
    // public FMOD.RESULT getPluginInfo(System.UInt32 handle, out FMOD.PLUGINTYPE plugintype, out System.String name, System.Int32 namelen, out System.UInt32 version)
    // Offset: 0xBA1180
    ::FMOD::RESULT getPluginInfo(uint handle, ByRef<::FMOD::PLUGINTYPE> plugintype, ByRef<::StringW> name, int namelen, ByRef<uint> version);
    // public FMOD.RESULT getPluginInfo(System.UInt32 handle, out FMOD.PLUGINTYPE plugintype, out System.UInt32 version)
    // Offset: 0xBA1188
    ::FMOD::RESULT getPluginInfo(uint handle, ByRef<::FMOD::PLUGINTYPE> plugintype, ByRef<uint> version);
    // public FMOD.RESULT setOutputByPlugin(System.UInt32 handle)
    // Offset: 0xBA1190
    ::FMOD::RESULT setOutputByPlugin(uint handle);
    // public FMOD.RESULT getOutputByPlugin(out System.UInt32 handle)
    // Offset: 0xBA1198
    ::FMOD::RESULT getOutputByPlugin(ByRef<uint> handle);
    // public FMOD.RESULT createDSPByPlugin(System.UInt32 handle, out FMOD.DSP dsp)
    // Offset: 0xBA11A0
    ::FMOD::RESULT createDSPByPlugin(uint handle, ByRef<::FMOD::DSP> dsp);
    // public FMOD.RESULT getDSPInfoByPlugin(System.UInt32 handle, out System.IntPtr description)
    // Offset: 0xBA11A8
    ::FMOD::RESULT getDSPInfoByPlugin(uint handle, ByRef<::System::IntPtr> description);
    // public FMOD.RESULT registerDSP(ref FMOD.DSP_DESCRIPTION description, out System.UInt32 handle)
    // Offset: 0xBA11B0
    ::FMOD::RESULT registerDSP(ByRef<::FMOD::DSP_DESCRIPTION> description, ByRef<uint> handle);
    // public FMOD.RESULT init(System.Int32 maxchannels, FMOD.INITFLAGS flags, System.IntPtr extradriverdata)
    // Offset: 0xBA11B8
    ::FMOD::RESULT init(int maxchannels, ::FMOD::INITFLAGS flags, ::System::IntPtr extradriverdata);
    // public FMOD.RESULT close()
    // Offset: 0xBA11C0
    ::FMOD::RESULT close();
    // public FMOD.RESULT update()
    // Offset: 0xBA11C8
    ::FMOD::RESULT update();
    // public FMOD.RESULT setSpeakerPosition(FMOD.SPEAKER speaker, System.Single x, System.Single y, System.Boolean active)
    // Offset: 0xBA11D0
    ::FMOD::RESULT setSpeakerPosition(::FMOD::SPEAKER speaker, float x, float y, bool active);
    // public FMOD.RESULT getSpeakerPosition(FMOD.SPEAKER speaker, out System.Single x, out System.Single y, out System.Boolean active)
    // Offset: 0xBA11DC
    ::FMOD::RESULT getSpeakerPosition(::FMOD::SPEAKER speaker, ByRef<float> x, ByRef<float> y, ByRef<bool> active);
    // public FMOD.RESULT setStreamBufferSize(System.UInt32 filebuffersize, FMOD.TIMEUNIT filebuffersizetype)
    // Offset: 0xBA11E4
    ::FMOD::RESULT setStreamBufferSize(uint filebuffersize, ::FMOD::TIMEUNIT filebuffersizetype);
    // public FMOD.RESULT getStreamBufferSize(out System.UInt32 filebuffersize, out FMOD.TIMEUNIT filebuffersizetype)
    // Offset: 0xBA11EC
    ::FMOD::RESULT getStreamBufferSize(ByRef<uint> filebuffersize, ByRef<::FMOD::TIMEUNIT> filebuffersizetype);
    // public FMOD.RESULT set3DSettings(System.Single dopplerscale, System.Single distancefactor, System.Single rolloffscale)
    // Offset: 0xBA11F4
    ::FMOD::RESULT set3DSettings(float dopplerscale, float distancefactor, float rolloffscale);
    // public FMOD.RESULT get3DSettings(out System.Single dopplerscale, out System.Single distancefactor, out System.Single rolloffscale)
    // Offset: 0xBA11FC
    ::FMOD::RESULT get3DSettings(ByRef<float> dopplerscale, ByRef<float> distancefactor, ByRef<float> rolloffscale);
    // public FMOD.RESULT set3DNumListeners(System.Int32 numlisteners)
    // Offset: 0xBA1204
    ::FMOD::RESULT set3DNumListeners(int numlisteners);
    // public FMOD.RESULT get3DNumListeners(out System.Int32 numlisteners)
    // Offset: 0xBA120C
    ::FMOD::RESULT get3DNumListeners(ByRef<int> numlisteners);
    // public FMOD.RESULT set3DListenerAttributes(System.Int32 listener, ref FMOD.VECTOR pos, ref FMOD.VECTOR vel, ref FMOD.VECTOR forward, ref FMOD.VECTOR up)
    // Offset: 0xBA1214
    ::FMOD::RESULT set3DListenerAttributes(int listener, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up);
    // public FMOD.RESULT get3DListenerAttributes(System.Int32 listener, out FMOD.VECTOR pos, out FMOD.VECTOR vel, out FMOD.VECTOR forward, out FMOD.VECTOR up)
    // Offset: 0xBA121C
    ::FMOD::RESULT get3DListenerAttributes(int listener, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up);
    // public FMOD.RESULT set3DRolloffCallback(FMOD.CB_3D_ROLLOFFCALLBACK callback)
    // Offset: 0xBA1224
    ::FMOD::RESULT set3DRolloffCallback(::FMOD::CB_3D_ROLLOFFCALLBACK* callback);
    // public FMOD.RESULT mixerSuspend()
    // Offset: 0xBA122C
    ::FMOD::RESULT mixerSuspend();
    // public FMOD.RESULT mixerResume()
    // Offset: 0xBA1234
    ::FMOD::RESULT mixerResume();
    // public FMOD.RESULT getDefaultMixMatrix(FMOD.SPEAKERMODE sourcespeakermode, FMOD.SPEAKERMODE targetspeakermode, System.Single[] matrix, System.Int32 matrixhop)
    // Offset: 0xBA123C
    ::FMOD::RESULT getDefaultMixMatrix(::FMOD::SPEAKERMODE sourcespeakermode, ::FMOD::SPEAKERMODE targetspeakermode, ::ArrayW<float> matrix, int matrixhop);
    // public FMOD.RESULT getSpeakerModeChannels(FMOD.SPEAKERMODE mode, out System.Int32 channels)
    // Offset: 0xBA1244
    ::FMOD::RESULT getSpeakerModeChannels(::FMOD::SPEAKERMODE mode, ByRef<int> channels);
    // public FMOD.RESULT getVersion(out System.UInt32 version)
    // Offset: 0xBA124C
    ::FMOD::RESULT getVersion(ByRef<uint> version);
    // public FMOD.RESULT getOutputHandle(out System.IntPtr handle)
    // Offset: 0xBA1254
    ::FMOD::RESULT getOutputHandle(ByRef<::System::IntPtr> handle);
    // public FMOD.RESULT getChannelsPlaying(out System.Int32 channels, out System.Int32 realchannels)
    // Offset: 0xBA125C
    ::FMOD::RESULT getChannelsPlaying(ByRef<int> channels, ByRef<int> realchannels);
    // public FMOD.RESULT getCPUUsage(out System.Single dsp, out System.Single stream, out System.Single geometry, out System.Single update, out System.Single total)
    // Offset: 0xBA1264
    ::FMOD::RESULT getCPUUsage(ByRef<float> dsp, ByRef<float> stream, ByRef<float> geometry, ByRef<float> update, ByRef<float> total);
    // public FMOD.RESULT getFileUsage(out System.Int64 sampleBytesRead, out System.Int64 streamBytesRead, out System.Int64 otherBytesRead)
    // Offset: 0xBA126C
    ::FMOD::RESULT getFileUsage(ByRef<int64_t> sampleBytesRead, ByRef<int64_t> streamBytesRead, ByRef<int64_t> otherBytesRead);
    // public FMOD.RESULT getSoundRAM(out System.Int32 currentalloced, out System.Int32 maxalloced, out System.Int32 total)
    // Offset: 0xBA1274
    ::FMOD::RESULT getSoundRAM(ByRef<int> currentalloced, ByRef<int> maxalloced, ByRef<int> total);
    // public FMOD.RESULT createSound(System.String name, FMOD.MODE mode, ref FMOD.CREATESOUNDEXINFO exinfo, out FMOD.Sound sound)
    // Offset: 0xBA127C
    ::FMOD::RESULT createSound(::StringW name, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::FMOD::Sound> sound);
    // public FMOD.RESULT createSound(System.Byte[] data, FMOD.MODE mode, ref FMOD.CREATESOUNDEXINFO exinfo, out FMOD.Sound sound)
    // Offset: 0xBA1284
    ::FMOD::RESULT createSound(::ArrayW<uint8_t> data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::FMOD::Sound> sound);
    // public FMOD.RESULT createSound(System.IntPtr name_or_data, FMOD.MODE mode, ref FMOD.CREATESOUNDEXINFO exinfo, out FMOD.Sound sound)
    // Offset: 0xBA128C
    ::FMOD::RESULT createSound(::System::IntPtr name_or_data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::FMOD::Sound> sound);
    // public FMOD.RESULT createSound(System.String name, FMOD.MODE mode, out FMOD.Sound sound)
    // Offset: 0xBA1294
    ::FMOD::RESULT createSound(::StringW name, ::FMOD::MODE mode, ByRef<::FMOD::Sound> sound);
    // public FMOD.RESULT createStream(System.String name, FMOD.MODE mode, ref FMOD.CREATESOUNDEXINFO exinfo, out FMOD.Sound sound)
    // Offset: 0xBA129C
    ::FMOD::RESULT createStream(::StringW name, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::FMOD::Sound> sound);
    // public FMOD.RESULT createStream(System.Byte[] data, FMOD.MODE mode, ref FMOD.CREATESOUNDEXINFO exinfo, out FMOD.Sound sound)
    // Offset: 0xBA12A4
    ::FMOD::RESULT createStream(::ArrayW<uint8_t> data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::FMOD::Sound> sound);
    // public FMOD.RESULT createStream(System.IntPtr name_or_data, FMOD.MODE mode, ref FMOD.CREATESOUNDEXINFO exinfo, out FMOD.Sound sound)
    // Offset: 0xBA12AC
    ::FMOD::RESULT createStream(::System::IntPtr name_or_data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::FMOD::Sound> sound);
    // public FMOD.RESULT createStream(System.String name, FMOD.MODE mode, out FMOD.Sound sound)
    // Offset: 0xBA12B4
    ::FMOD::RESULT createStream(::StringW name, ::FMOD::MODE mode, ByRef<::FMOD::Sound> sound);
    // public FMOD.RESULT createDSP(ref FMOD.DSP_DESCRIPTION description, out FMOD.DSP dsp)
    // Offset: 0xBA12BC
    ::FMOD::RESULT createDSP(ByRef<::FMOD::DSP_DESCRIPTION> description, ByRef<::FMOD::DSP> dsp);
    // public FMOD.RESULT createDSPByType(FMOD.DSP_TYPE type, out FMOD.DSP dsp)
    // Offset: 0xBA12C4
    ::FMOD::RESULT createDSPByType(::FMOD::DSP_TYPE type, ByRef<::FMOD::DSP> dsp);
    // public FMOD.RESULT createChannelGroup(System.String name, out FMOD.ChannelGroup channelgroup)
    // Offset: 0xBA12CC
    ::FMOD::RESULT createChannelGroup(::StringW name, ByRef<::FMOD::ChannelGroup> channelgroup);
    // public FMOD.RESULT createSoundGroup(System.String name, out FMOD.SoundGroup soundgroup)
    // Offset: 0xBA12D4
    ::FMOD::RESULT createSoundGroup(::StringW name, ByRef<::FMOD::SoundGroup> soundgroup);
    // public FMOD.RESULT createReverb3D(out FMOD.Reverb3D reverb)
    // Offset: 0xBA12DC
    ::FMOD::RESULT createReverb3D(ByRef<::FMOD::Reverb3D> reverb);
    // public FMOD.RESULT playSound(FMOD.Sound sound, FMOD.ChannelGroup channelGroup, System.Boolean paused, out FMOD.Channel channel)
    // Offset: 0xBA12E4
    ::FMOD::RESULT playSound(::FMOD::Sound sound, ::FMOD::ChannelGroup channelGroup, bool paused, ByRef<::FMOD::Channel> channel);
    // public FMOD.RESULT playDSP(FMOD.DSP dsp, FMOD.ChannelGroup channelGroup, System.Boolean paused, out FMOD.Channel channel)
    // Offset: 0xBA12F0
    ::FMOD::RESULT playDSP(::FMOD::DSP dsp, ::FMOD::ChannelGroup channelGroup, bool paused, ByRef<::FMOD::Channel> channel);
    // public FMOD.RESULT getChannel(System.Int32 channelid, out FMOD.Channel channel)
    // Offset: 0xBA12FC
    ::FMOD::RESULT getChannel(int channelid, ByRef<::FMOD::Channel> channel);
    // public FMOD.RESULT getMasterChannelGroup(out FMOD.ChannelGroup channelgroup)
    // Offset: 0xBA1304
    ::FMOD::RESULT getMasterChannelGroup(ByRef<::FMOD::ChannelGroup> channelgroup);
    // public FMOD.RESULT getMasterSoundGroup(out FMOD.SoundGroup soundgroup)
    // Offset: 0xBA130C
    ::FMOD::RESULT getMasterSoundGroup(ByRef<::FMOD::SoundGroup> soundgroup);
    // public FMOD.RESULT attachChannelGroupToPort(System.UInt32 portType, System.UInt64 portIndex, FMOD.ChannelGroup channelgroup, System.Boolean passThru)
    // Offset: 0xBA1314
    ::FMOD::RESULT attachChannelGroupToPort(uint portType, uint64_t portIndex, ::FMOD::ChannelGroup channelgroup, bool passThru);
    // public FMOD.RESULT detachChannelGroupFromPort(FMOD.ChannelGroup channelgroup)
    // Offset: 0xBA1320
    ::FMOD::RESULT detachChannelGroupFromPort(::FMOD::ChannelGroup channelgroup);
    // public FMOD.RESULT setReverbProperties(System.Int32 instance, ref FMOD.REVERB_PROPERTIES prop)
    // Offset: 0xBA1328
    ::FMOD::RESULT setReverbProperties(int instance, ByRef<::FMOD::REVERB_PROPERTIES> prop);
    // public FMOD.RESULT getReverbProperties(System.Int32 instance, out FMOD.REVERB_PROPERTIES prop)
    // Offset: 0xBA1330
    ::FMOD::RESULT getReverbProperties(int instance, ByRef<::FMOD::REVERB_PROPERTIES> prop);
    // public FMOD.RESULT lockDSP()
    // Offset: 0xBA1338
    ::FMOD::RESULT lockDSP();
    // public FMOD.RESULT unlockDSP()
    // Offset: 0xBA1340
    ::FMOD::RESULT unlockDSP();
    // public FMOD.RESULT getRecordNumDrivers(out System.Int32 numdrivers, out System.Int32 numconnected)
    // Offset: 0xBA1348
    ::FMOD::RESULT getRecordNumDrivers(ByRef<int> numdrivers, ByRef<int> numconnected);
    // public FMOD.RESULT getRecordDriverInfo(System.Int32 id, out System.String name, System.Int32 namelen, out System.Guid guid, out System.Int32 systemrate, out FMOD.SPEAKERMODE speakermode, out System.Int32 speakermodechannels, out FMOD.DRIVER_STATE state)
    // Offset: 0xBA1350
    ::FMOD::RESULT getRecordDriverInfo(int id, ByRef<::StringW> name, int namelen, ByRef<::System::Guid> guid, ByRef<int> systemrate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> speakermodechannels, ByRef<::FMOD::DRIVER_STATE> state);
    // public FMOD.RESULT getRecordDriverInfo(System.Int32 id, out System.Guid guid, out System.Int32 systemrate, out FMOD.SPEAKERMODE speakermode, out System.Int32 speakermodechannels, out FMOD.DRIVER_STATE state)
    // Offset: 0xBA1360
    ::FMOD::RESULT getRecordDriverInfo(int id, ByRef<::System::Guid> guid, ByRef<int> systemrate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> speakermodechannels, ByRef<::FMOD::DRIVER_STATE> state);
    // public FMOD.RESULT getRecordPosition(System.Int32 id, out System.UInt32 position)
    // Offset: 0xBA1368
    ::FMOD::RESULT getRecordPosition(int id, ByRef<uint> position);
    // public FMOD.RESULT recordStart(System.Int32 id, FMOD.Sound sound, System.Boolean loop)
    // Offset: 0xBA1370
    ::FMOD::RESULT recordStart(int id, ::FMOD::Sound sound, bool loop);
    // public FMOD.RESULT recordStop(System.Int32 id)
    // Offset: 0xBA137C
    ::FMOD::RESULT recordStop(int id);
    // public FMOD.RESULT isRecording(System.Int32 id, out System.Boolean recording)
    // Offset: 0xBA1384
    ::FMOD::RESULT isRecording(int id, ByRef<bool> recording);
    // public FMOD.RESULT createGeometry(System.Int32 maxpolygons, System.Int32 maxvertices, out FMOD.Geometry geometry)
    // Offset: 0xBA138C
    ::FMOD::RESULT createGeometry(int maxpolygons, int maxvertices, ByRef<::FMOD::Geometry> geometry);
    // public FMOD.RESULT setGeometrySettings(System.Single maxworldsize)
    // Offset: 0xBA1394
    ::FMOD::RESULT setGeometrySettings(float maxworldsize);
    // public FMOD.RESULT getGeometrySettings(out System.Single maxworldsize)
    // Offset: 0xBA139C
    ::FMOD::RESULT getGeometrySettings(ByRef<float> maxworldsize);
    // public FMOD.RESULT loadGeometry(System.IntPtr data, System.Int32 datasize, out FMOD.Geometry geometry)
    // Offset: 0xBA13A4
    ::FMOD::RESULT loadGeometry(::System::IntPtr data, int datasize, ByRef<::FMOD::Geometry> geometry);
    // public FMOD.RESULT getGeometryOcclusion(ref FMOD.VECTOR listener, ref FMOD.VECTOR source, out System.Single direct, out System.Single reverb)
    // Offset: 0xBA13AC
    ::FMOD::RESULT getGeometryOcclusion(ByRef<::FMOD::VECTOR> listener, ByRef<::FMOD::VECTOR> source, ByRef<float> direct, ByRef<float> reverb);
    // public FMOD.RESULT setNetworkProxy(System.String proxy)
    // Offset: 0xBA13B4
    ::FMOD::RESULT setNetworkProxy(::StringW proxy);
    // public FMOD.RESULT getNetworkProxy(out System.String proxy, System.Int32 proxylen)
    // Offset: 0xBA13BC
    ::FMOD::RESULT getNetworkProxy(ByRef<::StringW> proxy, int proxylen);
    // public FMOD.RESULT setNetworkTimeout(System.Int32 timeout)
    // Offset: 0xBA13C4
    ::FMOD::RESULT setNetworkTimeout(int timeout);
    // public FMOD.RESULT getNetworkTimeout(out System.Int32 timeout)
    // Offset: 0xBA13CC
    ::FMOD::RESULT getNetworkTimeout(ByRef<int> timeout);
    // public FMOD.RESULT setUserData(System.IntPtr userdata)
    // Offset: 0xBA13D4
    ::FMOD::RESULT setUserData(::System::IntPtr userdata);
    // public FMOD.RESULT getUserData(out System.IntPtr userdata)
    // Offset: 0xBA13DC
    ::FMOD::RESULT getUserData(ByRef<::System::IntPtr> userdata);
    // static private FMOD.RESULT FMOD5_System_Release(System.IntPtr system)
    // Offset: 0x15CD964
    static ::FMOD::RESULT FMOD5_System_Release(::System::IntPtr system);
    // static private FMOD.RESULT FMOD5_System_SetOutput(System.IntPtr system, FMOD.OUTPUTTYPE output)
    // Offset: 0x15CDA08
    static ::FMOD::RESULT FMOD5_System_SetOutput(::System::IntPtr system, ::FMOD::OUTPUTTYPE output);
    // static private FMOD.RESULT FMOD5_System_GetOutput(System.IntPtr system, out FMOD.OUTPUTTYPE output)
    // Offset: 0x15CDABC
    static ::FMOD::RESULT FMOD5_System_GetOutput(::System::IntPtr system, ByRef<::FMOD::OUTPUTTYPE> output);
    // static private FMOD.RESULT FMOD5_System_GetNumDrivers(System.IntPtr system, out System.Int32 numdrivers)
    // Offset: 0x15CDB70
    static ::FMOD::RESULT FMOD5_System_GetNumDrivers(::System::IntPtr system, ByRef<int> numdrivers);
    // static private FMOD.RESULT FMOD5_System_GetDriverInfo(System.IntPtr system, System.Int32 id, System.IntPtr name, System.Int32 namelen, out System.Guid guid, out System.Int32 systemrate, out FMOD.SPEAKERMODE speakermode, out System.Int32 speakermodechannels)
    // Offset: 0x15CDE14
    static ::FMOD::RESULT FMOD5_System_GetDriverInfo(::System::IntPtr system, int id, ::System::IntPtr name, int namelen, ByRef<::System::Guid> guid, ByRef<int> systemrate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> speakermodechannels);
    // static private FMOD.RESULT FMOD5_System_SetDriver(System.IntPtr system, System.Int32 driver)
    // Offset: 0x15CDFA8
    static ::FMOD::RESULT FMOD5_System_SetDriver(::System::IntPtr system, int driver);
    // static private FMOD.RESULT FMOD5_System_GetDriver(System.IntPtr system, out System.Int32 driver)
    // Offset: 0x15CE05C
    static ::FMOD::RESULT FMOD5_System_GetDriver(::System::IntPtr system, ByRef<int> driver);
    // static private FMOD.RESULT FMOD5_System_SetSoftwareChannels(System.IntPtr system, System.Int32 numsoftwarechannels)
    // Offset: 0x15CE110
    static ::FMOD::RESULT FMOD5_System_SetSoftwareChannels(::System::IntPtr system, int numsoftwarechannels);
    // static private FMOD.RESULT FMOD5_System_GetSoftwareChannels(System.IntPtr system, out System.Int32 numsoftwarechannels)
    // Offset: 0x15CE1C4
    static ::FMOD::RESULT FMOD5_System_GetSoftwareChannels(::System::IntPtr system, ByRef<int> numsoftwarechannels);
    // static private FMOD.RESULT FMOD5_System_SetSoftwareFormat(System.IntPtr system, System.Int32 samplerate, FMOD.SPEAKERMODE speakermode, System.Int32 numrawspeakers)
    // Offset: 0x15CE278
    static ::FMOD::RESULT FMOD5_System_SetSoftwareFormat(::System::IntPtr system, int samplerate, ::FMOD::SPEAKERMODE speakermode, int numrawspeakers);
    // static private FMOD.RESULT FMOD5_System_GetSoftwareFormat(System.IntPtr system, out System.Int32 samplerate, out FMOD.SPEAKERMODE speakermode, out System.Int32 numrawspeakers)
    // Offset: 0x15CE344
    static ::FMOD::RESULT FMOD5_System_GetSoftwareFormat(::System::IntPtr system, ByRef<int> samplerate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> numrawspeakers);
    // static private FMOD.RESULT FMOD5_System_SetDSPBufferSize(System.IntPtr system, System.UInt32 bufferlength, System.Int32 numbuffers)
    // Offset: 0x15CE410
    static ::FMOD::RESULT FMOD5_System_SetDSPBufferSize(::System::IntPtr system, uint bufferlength, int numbuffers);
    // static private FMOD.RESULT FMOD5_System_GetDSPBufferSize(System.IntPtr system, out System.UInt32 bufferlength, out System.Int32 numbuffers)
    // Offset: 0x15CE4CC
    static ::FMOD::RESULT FMOD5_System_GetDSPBufferSize(::System::IntPtr system, ByRef<uint> bufferlength, ByRef<int> numbuffers);
    // static private FMOD.RESULT FMOD5_System_SetFileSystem(System.IntPtr system, FMOD.FILE_OPENCALLBACK useropen, FMOD.FILE_CLOSECALLBACK userclose, FMOD.FILE_READCALLBACK userread, FMOD.FILE_SEEKCALLBACK userseek, FMOD.FILE_ASYNCREADCALLBACK userasyncread, FMOD.FILE_ASYNCCANCELCALLBACK userasynccancel, System.Int32 blockalign)
    // Offset: 0x15CE588
    static ::FMOD::RESULT FMOD5_System_SetFileSystem(::System::IntPtr system, ::FMOD::FILE_OPENCALLBACK* useropen, ::FMOD::FILE_CLOSECALLBACK* userclose, ::FMOD::FILE_READCALLBACK* userread, ::FMOD::FILE_SEEKCALLBACK* userseek, ::FMOD::FILE_ASYNCREADCALLBACK* userasyncread, ::FMOD::FILE_ASYNCCANCELCALLBACK* userasynccancel, int blockalign);
    // static private FMOD.RESULT FMOD5_System_AttachFileSystem(System.IntPtr system, FMOD.FILE_OPENCALLBACK useropen, FMOD.FILE_CLOSECALLBACK userclose, FMOD.FILE_READCALLBACK userread, FMOD.FILE_SEEKCALLBACK userseek)
    // Offset: 0x15CE6C8
    static ::FMOD::RESULT FMOD5_System_AttachFileSystem(::System::IntPtr system, ::FMOD::FILE_OPENCALLBACK* useropen, ::FMOD::FILE_CLOSECALLBACK* userclose, ::FMOD::FILE_READCALLBACK* userread, ::FMOD::FILE_SEEKCALLBACK* userseek);
    // static private FMOD.RESULT FMOD5_System_SetAdvancedSettings(System.IntPtr system, ref FMOD.ADVANCEDSETTINGS settings)
    // Offset: 0x15CE87C
    static ::FMOD::RESULT FMOD5_System_SetAdvancedSettings(::System::IntPtr system, ByRef<::FMOD::ADVANCEDSETTINGS> settings);
    // static private FMOD.RESULT FMOD5_System_GetAdvancedSettings(System.IntPtr system, ref FMOD.ADVANCEDSETTINGS settings)
    // Offset: 0x15CE9E4
    static ::FMOD::RESULT FMOD5_System_GetAdvancedSettings(::System::IntPtr system, ByRef<::FMOD::ADVANCEDSETTINGS> settings);
    // static private FMOD.RESULT FMOD5_System_SetCallback(System.IntPtr system, FMOD.SYSTEM_CALLBACK callback, FMOD.SYSTEM_CALLBACK_TYPE callbackmask)
    // Offset: 0x15CEA98
    static ::FMOD::RESULT FMOD5_System_SetCallback(::System::IntPtr system, ::FMOD::SYSTEM_CALLBACK* callback, ::FMOD::SYSTEM_CALLBACK_TYPE callbackmask);
    // static private FMOD.RESULT FMOD5_System_SetPluginPath(System.IntPtr system, System.Byte[] path)
    // Offset: 0x15CECA8
    static ::FMOD::RESULT FMOD5_System_SetPluginPath(::System::IntPtr system, ::ArrayW<uint8_t> path);
    // static private FMOD.RESULT FMOD5_System_LoadPlugin(System.IntPtr system, System.Byte[] filename, out System.UInt32 handle, System.UInt32 priority)
    // Offset: 0x15CEEC8
    static ::FMOD::RESULT FMOD5_System_LoadPlugin(::System::IntPtr system, ::ArrayW<uint8_t> filename, ByRef<uint> handle, uint priority);
    // static private FMOD.RESULT FMOD5_System_UnloadPlugin(System.IntPtr system, System.UInt32 handle)
    // Offset: 0x15CEFA4
    static ::FMOD::RESULT FMOD5_System_UnloadPlugin(::System::IntPtr system, uint handle);
    // static private FMOD.RESULT FMOD5_System_GetNumNestedPlugins(System.IntPtr system, System.UInt32 handle, out System.Int32 count)
    // Offset: 0x15CF058
    static ::FMOD::RESULT FMOD5_System_GetNumNestedPlugins(::System::IntPtr system, uint handle, ByRef<int> count);
    // static private FMOD.RESULT FMOD5_System_GetNestedPlugin(System.IntPtr system, System.UInt32 handle, System.Int32 index, out System.UInt32 nestedhandle)
    // Offset: 0x15CF114
    static ::FMOD::RESULT FMOD5_System_GetNestedPlugin(::System::IntPtr system, uint handle, int index, ByRef<uint> nestedhandle);
    // static private FMOD.RESULT FMOD5_System_GetNumPlugins(System.IntPtr system, FMOD.PLUGINTYPE plugintype, out System.Int32 numplugins)
    // Offset: 0x15CF1E0
    static ::FMOD::RESULT FMOD5_System_GetNumPlugins(::System::IntPtr system, ::FMOD::PLUGINTYPE plugintype, ByRef<int> numplugins);
    // static private FMOD.RESULT FMOD5_System_GetPluginHandle(System.IntPtr system, FMOD.PLUGINTYPE plugintype, System.Int32 index, out System.UInt32 handle)
    // Offset: 0x15CF29C
    static ::FMOD::RESULT FMOD5_System_GetPluginHandle(::System::IntPtr system, ::FMOD::PLUGINTYPE plugintype, int index, ByRef<uint> handle);
    // static private FMOD.RESULT FMOD5_System_GetPluginInfo(System.IntPtr system, System.UInt32 handle, out FMOD.PLUGINTYPE plugintype, System.IntPtr name, System.Int32 namelen, out System.UInt32 version)
    // Offset: 0x15CF538
    static ::FMOD::RESULT FMOD5_System_GetPluginInfo(::System::IntPtr system, uint handle, ByRef<::FMOD::PLUGINTYPE> plugintype, ::System::IntPtr name, int namelen, ByRef<uint> version);
    // static private FMOD.RESULT FMOD5_System_SetOutputByPlugin(System.IntPtr system, System.UInt32 handle)
    // Offset: 0x15CF690
    static ::FMOD::RESULT FMOD5_System_SetOutputByPlugin(::System::IntPtr system, uint handle);
    // static private FMOD.RESULT FMOD5_System_GetOutputByPlugin(System.IntPtr system, out System.UInt32 handle)
    // Offset: 0x15CF744
    static ::FMOD::RESULT FMOD5_System_GetOutputByPlugin(::System::IntPtr system, ByRef<uint> handle);
    // static private FMOD.RESULT FMOD5_System_CreateDSPByPlugin(System.IntPtr system, System.UInt32 handle, out System.IntPtr dsp)
    // Offset: 0x15CF7F8
    static ::FMOD::RESULT FMOD5_System_CreateDSPByPlugin(::System::IntPtr system, uint handle, ByRef<::System::IntPtr> dsp);
    // static private FMOD.RESULT FMOD5_System_GetDSPInfoByPlugin(System.IntPtr system, System.UInt32 handle, out System.IntPtr description)
    // Offset: 0x15CF8B4
    static ::FMOD::RESULT FMOD5_System_GetDSPInfoByPlugin(::System::IntPtr system, uint handle, ByRef<::System::IntPtr> description);
    // static private FMOD.RESULT FMOD5_System_RegisterDSP(System.IntPtr system, ref FMOD.DSP_DESCRIPTION description, out System.UInt32 handle)
    // Offset: 0x15CF970
    static ::FMOD::RESULT FMOD5_System_RegisterDSP(::System::IntPtr system, ByRef<::FMOD::DSP_DESCRIPTION> description, ByRef<uint> handle);
    // static private FMOD.RESULT FMOD5_System_Init(System.IntPtr system, System.Int32 maxchannels, FMOD.INITFLAGS flags, System.IntPtr extradriverdata)
    // Offset: 0x15CFA88
    static ::FMOD::RESULT FMOD5_System_Init(::System::IntPtr system, int maxchannels, ::FMOD::INITFLAGS flags, ::System::IntPtr extradriverdata);
    // static private FMOD.RESULT FMOD5_System_Close(System.IntPtr system)
    // Offset: 0x15CFB54
    static ::FMOD::RESULT FMOD5_System_Close(::System::IntPtr system);
    // static private FMOD.RESULT FMOD5_System_Update(System.IntPtr system)
    // Offset: 0x15CFBF8
    static ::FMOD::RESULT FMOD5_System_Update(::System::IntPtr system);
    // static private FMOD.RESULT FMOD5_System_SetSpeakerPosition(System.IntPtr system, FMOD.SPEAKER speaker, System.Single x, System.Single y, System.Boolean active)
    // Offset: 0x15CFCA0
    static ::FMOD::RESULT FMOD5_System_SetSpeakerPosition(::System::IntPtr system, ::FMOD::SPEAKER speaker, float x, float y, bool active);
    // static private FMOD.RESULT FMOD5_System_GetSpeakerPosition(System.IntPtr system, FMOD.SPEAKER speaker, out System.Single x, out System.Single y, out System.Boolean active)
    // Offset: 0x15CFD74
    static ::FMOD::RESULT FMOD5_System_GetSpeakerPosition(::System::IntPtr system, ::FMOD::SPEAKER speaker, ByRef<float> x, ByRef<float> y, ByRef<bool> active);
    // static private FMOD.RESULT FMOD5_System_SetStreamBufferSize(System.IntPtr system, System.UInt32 filebuffersize, FMOD.TIMEUNIT filebuffersizetype)
    // Offset: 0x15CFE5C
    static ::FMOD::RESULT FMOD5_System_SetStreamBufferSize(::System::IntPtr system, uint filebuffersize, ::FMOD::TIMEUNIT filebuffersizetype);
    // static private FMOD.RESULT FMOD5_System_GetStreamBufferSize(System.IntPtr system, out System.UInt32 filebuffersize, out FMOD.TIMEUNIT filebuffersizetype)
    // Offset: 0x15CFF18
    static ::FMOD::RESULT FMOD5_System_GetStreamBufferSize(::System::IntPtr system, ByRef<uint> filebuffersize, ByRef<::FMOD::TIMEUNIT> filebuffersizetype);
    // static private FMOD.RESULT FMOD5_System_Set3DSettings(System.IntPtr system, System.Single dopplerscale, System.Single distancefactor, System.Single rolloffscale)
    // Offset: 0x15CFFD4
    static ::FMOD::RESULT FMOD5_System_Set3DSettings(::System::IntPtr system, float dopplerscale, float distancefactor, float rolloffscale);
    // static private FMOD.RESULT FMOD5_System_Get3DSettings(System.IntPtr system, out System.Single dopplerscale, out System.Single distancefactor, out System.Single rolloffscale)
    // Offset: 0x15D00A0
    static ::FMOD::RESULT FMOD5_System_Get3DSettings(::System::IntPtr system, ByRef<float> dopplerscale, ByRef<float> distancefactor, ByRef<float> rolloffscale);
    // static private FMOD.RESULT FMOD5_System_Set3DNumListeners(System.IntPtr system, System.Int32 numlisteners)
    // Offset: 0x15D016C
    static ::FMOD::RESULT FMOD5_System_Set3DNumListeners(::System::IntPtr system, int numlisteners);
    // static private FMOD.RESULT FMOD5_System_Get3DNumListeners(System.IntPtr system, out System.Int32 numlisteners)
    // Offset: 0x15D0220
    static ::FMOD::RESULT FMOD5_System_Get3DNumListeners(::System::IntPtr system, ByRef<int> numlisteners);
    // static private FMOD.RESULT FMOD5_System_Set3DListenerAttributes(System.IntPtr system, System.Int32 listener, ref FMOD.VECTOR pos, ref FMOD.VECTOR vel, ref FMOD.VECTOR forward, ref FMOD.VECTOR up)
    // Offset: 0x15D02D4
    static ::FMOD::RESULT FMOD5_System_Set3DListenerAttributes(::System::IntPtr system, int listener, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up);
    // static private FMOD.RESULT FMOD5_System_Get3DListenerAttributes(System.IntPtr system, System.Int32 listener, out FMOD.VECTOR pos, out FMOD.VECTOR vel, out FMOD.VECTOR forward, out FMOD.VECTOR up)
    // Offset: 0x15D03B8
    static ::FMOD::RESULT FMOD5_System_Get3DListenerAttributes(::System::IntPtr system, int listener, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> forward, ByRef<::FMOD::VECTOR> up);
    // static private FMOD.RESULT FMOD5_System_Set3DRolloffCallback(System.IntPtr system, FMOD.CB_3D_ROLLOFFCALLBACK callback)
    // Offset: 0x15D049C
    static ::FMOD::RESULT FMOD5_System_Set3DRolloffCallback(::System::IntPtr system, ::FMOD::CB_3D_ROLLOFFCALLBACK* callback);
    // static private FMOD.RESULT FMOD5_System_MixerSuspend(System.IntPtr system)
    // Offset: 0x15D0558
    static ::FMOD::RESULT FMOD5_System_MixerSuspend(::System::IntPtr system);
    // static private FMOD.RESULT FMOD5_System_MixerResume(System.IntPtr system)
    // Offset: 0x15D05FC
    static ::FMOD::RESULT FMOD5_System_MixerResume(::System::IntPtr system);
    // static private FMOD.RESULT FMOD5_System_GetDefaultMixMatrix(System.IntPtr system, FMOD.SPEAKERMODE sourcespeakermode, FMOD.SPEAKERMODE targetspeakermode, System.Single[] matrix, System.Int32 matrixhop)
    // Offset: 0x15D06A0
    static ::FMOD::RESULT FMOD5_System_GetDefaultMixMatrix(::System::IntPtr system, ::FMOD::SPEAKERMODE sourcespeakermode, ::FMOD::SPEAKERMODE targetspeakermode, ::ArrayW<float> matrix, int matrixhop);
    // static private FMOD.RESULT FMOD5_System_GetSpeakerModeChannels(System.IntPtr system, FMOD.SPEAKERMODE mode, out System.Int32 channels)
    // Offset: 0x15D077C
    static ::FMOD::RESULT FMOD5_System_GetSpeakerModeChannels(::System::IntPtr system, ::FMOD::SPEAKERMODE mode, ByRef<int> channels);
    // static private FMOD.RESULT FMOD5_System_GetVersion(System.IntPtr system, out System.UInt32 version)
    // Offset: 0x15D0838
    static ::FMOD::RESULT FMOD5_System_GetVersion(::System::IntPtr system, ByRef<uint> version);
    // static private FMOD.RESULT FMOD5_System_GetOutputHandle(System.IntPtr system, out System.IntPtr handle)
    // Offset: 0x15D08EC
    static ::FMOD::RESULT FMOD5_System_GetOutputHandle(::System::IntPtr system, ByRef<::System::IntPtr> handle);
    // static private FMOD.RESULT FMOD5_System_GetChannelsPlaying(System.IntPtr system, out System.Int32 channels, out System.Int32 realchannels)
    // Offset: 0x15D09A0
    static ::FMOD::RESULT FMOD5_System_GetChannelsPlaying(::System::IntPtr system, ByRef<int> channels, ByRef<int> realchannels);
    // static private FMOD.RESULT FMOD5_System_GetCPUUsage(System.IntPtr system, out System.Single dsp, out System.Single stream, out System.Single geometry, out System.Single update, out System.Single total)
    // Offset: 0x15D0A5C
    static ::FMOD::RESULT FMOD5_System_GetCPUUsage(::System::IntPtr system, ByRef<float> dsp, ByRef<float> stream, ByRef<float> geometry, ByRef<float> update, ByRef<float> total);
    // static private FMOD.RESULT FMOD5_System_GetFileUsage(System.IntPtr system, out System.Int64 sampleBytesRead, out System.Int64 streamBytesRead, out System.Int64 otherBytesRead)
    // Offset: 0x15D0B40
    static ::FMOD::RESULT FMOD5_System_GetFileUsage(::System::IntPtr system, ByRef<int64_t> sampleBytesRead, ByRef<int64_t> streamBytesRead, ByRef<int64_t> otherBytesRead);
    // static private FMOD.RESULT FMOD5_System_GetSoundRAM(System.IntPtr system, out System.Int32 currentalloced, out System.Int32 maxalloced, out System.Int32 total)
    // Offset: 0x15D0C0C
    static ::FMOD::RESULT FMOD5_System_GetSoundRAM(::System::IntPtr system, ByRef<int> currentalloced, ByRef<int> maxalloced, ByRef<int> total);
    // static private FMOD.RESULT FMOD5_System_CreateSound(System.IntPtr system, System.Byte[] name_or_data, FMOD.MODE mode, ref FMOD.CREATESOUNDEXINFO exinfo, out System.IntPtr sound)
    // Offset: 0x15D0E44
    static ::FMOD::RESULT FMOD5_System_CreateSound(::System::IntPtr system, ::ArrayW<uint8_t> name_or_data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::System::IntPtr> sound);
    // static private FMOD.RESULT FMOD5_System_CreateSound(System.IntPtr system, System.IntPtr name_or_data, FMOD.MODE mode, ref FMOD.CREATESOUNDEXINFO exinfo, out System.IntPtr sound)
    // Offset: 0x15D0F28
    static ::FMOD::RESULT FMOD5_System_CreateSound(::System::IntPtr system, ::System::IntPtr name_or_data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::System::IntPtr> sound);
    // static private FMOD.RESULT FMOD5_System_CreateStream(System.IntPtr system, System.Byte[] name_or_data, FMOD.MODE mode, ref FMOD.CREATESOUNDEXINFO exinfo, out System.IntPtr sound)
    // Offset: 0x15D1250
    static ::FMOD::RESULT FMOD5_System_CreateStream(::System::IntPtr system, ::ArrayW<uint8_t> name_or_data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::System::IntPtr> sound);
    // static private FMOD.RESULT FMOD5_System_CreateStream(System.IntPtr system, System.IntPtr name_or_data, FMOD.MODE mode, ref FMOD.CREATESOUNDEXINFO exinfo, out System.IntPtr sound)
    // Offset: 0x15D1334
    static ::FMOD::RESULT FMOD5_System_CreateStream(::System::IntPtr system, ::System::IntPtr name_or_data, ::FMOD::MODE mode, ByRef<::FMOD::CREATESOUNDEXINFO> exinfo, ByRef<::System::IntPtr> sound);
    // static private FMOD.RESULT FMOD5_System_CreateDSP(System.IntPtr system, ref FMOD.DSP_DESCRIPTION description, out System.IntPtr dsp)
    // Offset: 0x15D14F0
    static ::FMOD::RESULT FMOD5_System_CreateDSP(::System::IntPtr system, ByRef<::FMOD::DSP_DESCRIPTION> description, ByRef<::System::IntPtr> dsp);
    // static private FMOD.RESULT FMOD5_System_CreateDSPByType(System.IntPtr system, FMOD.DSP_TYPE type, out System.IntPtr dsp)
    // Offset: 0x15D160C
    static ::FMOD::RESULT FMOD5_System_CreateDSPByType(::System::IntPtr system, ::FMOD::DSP_TYPE type, ByRef<::System::IntPtr> dsp);
    // static private FMOD.RESULT FMOD5_System_CreateChannelGroup(System.IntPtr system, System.Byte[] name, out System.IntPtr channelgroup)
    // Offset: 0x15D181C
    static ::FMOD::RESULT FMOD5_System_CreateChannelGroup(::System::IntPtr system, ::ArrayW<uint8_t> name, ByRef<::System::IntPtr> channelgroup);
    // static private FMOD.RESULT FMOD5_System_CreateSoundGroup(System.IntPtr system, System.Byte[] name, out System.IntPtr soundgroup)
    // Offset: 0x15D1A34
    static ::FMOD::RESULT FMOD5_System_CreateSoundGroup(::System::IntPtr system, ::ArrayW<uint8_t> name, ByRef<::System::IntPtr> soundgroup);
    // static private FMOD.RESULT FMOD5_System_CreateReverb3D(System.IntPtr system, out System.IntPtr reverb)
    // Offset: 0x15D1AF8
    static ::FMOD::RESULT FMOD5_System_CreateReverb3D(::System::IntPtr system, ByRef<::System::IntPtr> reverb);
    // static private FMOD.RESULT FMOD5_System_PlaySound(System.IntPtr system, System.IntPtr sound, System.IntPtr channelGroup, System.Boolean paused, out System.IntPtr channel)
    // Offset: 0x15D1BB0
    static ::FMOD::RESULT FMOD5_System_PlaySound(::System::IntPtr system, ::System::IntPtr sound, ::System::IntPtr channelGroup, bool paused, ByRef<::System::IntPtr> channel);
    // static private FMOD.RESULT FMOD5_System_PlayDSP(System.IntPtr system, System.IntPtr dsp, System.IntPtr channelGroup, System.Boolean paused, out System.IntPtr channel)
    // Offset: 0x15D1C88
    static ::FMOD::RESULT FMOD5_System_PlayDSP(::System::IntPtr system, ::System::IntPtr dsp, ::System::IntPtr channelGroup, bool paused, ByRef<::System::IntPtr> channel);
    // static private FMOD.RESULT FMOD5_System_GetChannel(System.IntPtr system, System.Int32 channelid, out System.IntPtr channel)
    // Offset: 0x15D1D5C
    static ::FMOD::RESULT FMOD5_System_GetChannel(::System::IntPtr system, int channelid, ByRef<::System::IntPtr> channel);
    // static private FMOD.RESULT FMOD5_System_GetMasterChannelGroup(System.IntPtr system, out System.IntPtr channelgroup)
    // Offset: 0x15D1E18
    static ::FMOD::RESULT FMOD5_System_GetMasterChannelGroup(::System::IntPtr system, ByRef<::System::IntPtr> channelgroup);
    // static private FMOD.RESULT FMOD5_System_GetMasterSoundGroup(System.IntPtr system, out System.IntPtr soundgroup)
    // Offset: 0x15D1ECC
    static ::FMOD::RESULT FMOD5_System_GetMasterSoundGroup(::System::IntPtr system, ByRef<::System::IntPtr> soundgroup);
    // static private FMOD.RESULT FMOD5_System_AttachChannelGroupToPort(System.IntPtr system, System.UInt32 portType, System.UInt64 portIndex, System.IntPtr channelgroup, System.Boolean passThru)
    // Offset: 0x15D1F84
    static ::FMOD::RESULT FMOD5_System_AttachChannelGroupToPort(::System::IntPtr system, uint portType, uint64_t portIndex, ::System::IntPtr channelgroup, bool passThru);
    // static private FMOD.RESULT FMOD5_System_DetachChannelGroupFromPort(System.IntPtr system, System.IntPtr channelgroup)
    // Offset: 0x15D2058
    static ::FMOD::RESULT FMOD5_System_DetachChannelGroupFromPort(::System::IntPtr system, ::System::IntPtr channelgroup);
    // static private FMOD.RESULT FMOD5_System_SetReverbProperties(System.IntPtr system, System.Int32 instance, ref FMOD.REVERB_PROPERTIES prop)
    // Offset: 0x15D210C
    static ::FMOD::RESULT FMOD5_System_SetReverbProperties(::System::IntPtr system, int instance, ByRef<::FMOD::REVERB_PROPERTIES> prop);
    // static private FMOD.RESULT FMOD5_System_GetReverbProperties(System.IntPtr system, System.Int32 instance, out FMOD.REVERB_PROPERTIES prop)
    // Offset: 0x15D21C8
    static ::FMOD::RESULT FMOD5_System_GetReverbProperties(::System::IntPtr system, int instance, ByRef<::FMOD::REVERB_PROPERTIES> prop);
    // static private FMOD.RESULT FMOD5_System_LockDSP(System.IntPtr system)
    // Offset: 0x15D2284
    static ::FMOD::RESULT FMOD5_System_LockDSP(::System::IntPtr system);
    // static private FMOD.RESULT FMOD5_System_UnlockDSP(System.IntPtr system)
    // Offset: 0x15D2328
    static ::FMOD::RESULT FMOD5_System_UnlockDSP(::System::IntPtr system);
    // static private FMOD.RESULT FMOD5_System_GetRecordNumDrivers(System.IntPtr system, out System.Int32 numdrivers, out System.Int32 numconnected)
    // Offset: 0x15D23CC
    static ::FMOD::RESULT FMOD5_System_GetRecordNumDrivers(::System::IntPtr system, ByRef<int> numdrivers, ByRef<int> numconnected);
    // static private FMOD.RESULT FMOD5_System_GetRecordDriverInfo(System.IntPtr system, System.Int32 id, System.IntPtr name, System.Int32 namelen, out System.Guid guid, out System.Int32 systemrate, out FMOD.SPEAKERMODE speakermode, out System.Int32 speakermodechannels, out FMOD.DRIVER_STATE state)
    // Offset: 0x15D2680
    static ::FMOD::RESULT FMOD5_System_GetRecordDriverInfo(::System::IntPtr system, int id, ::System::IntPtr name, int namelen, ByRef<::System::Guid> guid, ByRef<int> systemrate, ByRef<::FMOD::SPEAKERMODE> speakermode, ByRef<int> speakermodechannels, ByRef<::FMOD::DRIVER_STATE> state);
    // static private FMOD.RESULT FMOD5_System_GetRecordPosition(System.IntPtr system, System.Int32 id, out System.UInt32 position)
    // Offset: 0x15D2824
    static ::FMOD::RESULT FMOD5_System_GetRecordPosition(::System::IntPtr system, int id, ByRef<uint> position);
    // static private FMOD.RESULT FMOD5_System_RecordStart(System.IntPtr system, System.Int32 id, System.IntPtr sound, System.Boolean loop)
    // Offset: 0x15D28E4
    static ::FMOD::RESULT FMOD5_System_RecordStart(::System::IntPtr system, int id, ::System::IntPtr sound, bool loop);
    // static private FMOD.RESULT FMOD5_System_RecordStop(System.IntPtr system, System.Int32 id)
    // Offset: 0x15D29AC
    static ::FMOD::RESULT FMOD5_System_RecordStop(::System::IntPtr system, int id);
    // static private FMOD.RESULT FMOD5_System_IsRecording(System.IntPtr system, System.Int32 id, out System.Boolean recording)
    // Offset: 0x15D2A60
    static ::FMOD::RESULT FMOD5_System_IsRecording(::System::IntPtr system, int id, ByRef<bool> recording);
    // static private FMOD.RESULT FMOD5_System_CreateGeometry(System.IntPtr system, System.Int32 maxpolygons, System.Int32 maxvertices, out System.IntPtr geometry)
    // Offset: 0x15D2B30
    static ::FMOD::RESULT FMOD5_System_CreateGeometry(::System::IntPtr system, int maxpolygons, int maxvertices, ByRef<::System::IntPtr> geometry);
    // static private FMOD.RESULT FMOD5_System_SetGeometrySettings(System.IntPtr system, System.Single maxworldsize)
    // Offset: 0x15D2BFC
    static ::FMOD::RESULT FMOD5_System_SetGeometrySettings(::System::IntPtr system, float maxworldsize);
    // static private FMOD.RESULT FMOD5_System_GetGeometrySettings(System.IntPtr system, out System.Single maxworldsize)
    // Offset: 0x15D2CB0
    static ::FMOD::RESULT FMOD5_System_GetGeometrySettings(::System::IntPtr system, ByRef<float> maxworldsize);
    // static private FMOD.RESULT FMOD5_System_LoadGeometry(System.IntPtr system, System.IntPtr data, System.Int32 datasize, out System.IntPtr geometry)
    // Offset: 0x15D2D64
    static ::FMOD::RESULT FMOD5_System_LoadGeometry(::System::IntPtr system, ::System::IntPtr data, int datasize, ByRef<::System::IntPtr> geometry);
    // static private FMOD.RESULT FMOD5_System_GetGeometryOcclusion(System.IntPtr system, ref FMOD.VECTOR listener, ref FMOD.VECTOR source, out System.Single direct, out System.Single reverb)
    // Offset: 0x15D2E30
    static ::FMOD::RESULT FMOD5_System_GetGeometryOcclusion(::System::IntPtr system, ByRef<::FMOD::VECTOR> listener, ByRef<::FMOD::VECTOR> source, ByRef<float> direct, ByRef<float> reverb);
    // static private FMOD.RESULT FMOD5_System_SetNetworkProxy(System.IntPtr system, System.Byte[] proxy)
    // Offset: 0x15D3050
    static ::FMOD::RESULT FMOD5_System_SetNetworkProxy(::System::IntPtr system, ::ArrayW<uint8_t> proxy);
    // static private FMOD.RESULT FMOD5_System_GetNetworkProxy(System.IntPtr system, System.IntPtr proxy, System.Int32 proxylen)
    // Offset: 0x15D32BC
    static ::FMOD::RESULT FMOD5_System_GetNetworkProxy(::System::IntPtr system, ::System::IntPtr proxy, int proxylen);
    // static private FMOD.RESULT FMOD5_System_SetNetworkTimeout(System.IntPtr system, System.Int32 timeout)
    // Offset: 0x15D3378
    static ::FMOD::RESULT FMOD5_System_SetNetworkTimeout(::System::IntPtr system, int timeout);
    // static private FMOD.RESULT FMOD5_System_GetNetworkTimeout(System.IntPtr system, out System.Int32 timeout)
    // Offset: 0x15D342C
    static ::FMOD::RESULT FMOD5_System_GetNetworkTimeout(::System::IntPtr system, ByRef<int> timeout);
    // static private FMOD.RESULT FMOD5_System_SetUserData(System.IntPtr system, System.IntPtr userdata)
    // Offset: 0x15D34E0
    static ::FMOD::RESULT FMOD5_System_SetUserData(::System::IntPtr system, ::System::IntPtr userdata);
    // static private FMOD.RESULT FMOD5_System_GetUserData(System.IntPtr system, out System.IntPtr userdata)
    // Offset: 0x15D3594
    static ::FMOD::RESULT FMOD5_System_GetUserData(::System::IntPtr system, ByRef<::System::IntPtr> userdata);
    // public System.Boolean hasHandle()
    // Offset: 0xBA13E4
    bool hasHandle();
    // public System.Void clearHandle()
    // Offset: 0xBA13EC
    void clearHandle();
  }; // FMOD.System
  #pragma pack(pop)
  static check_size<sizeof(System), 0 + sizeof(::System::IntPtr)> __FMOD_SystemSizeCheck;
  static_assert(sizeof(System) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::System::release
// Il2CppName: release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)()>(&FMOD::System::release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::System::setOutput
// Il2CppName: setOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::FMOD::OUTPUTTYPE)>(&FMOD::System::setOutput)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("FMOD", "OUTPUTTYPE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: FMOD::System::getOutput
// Il2CppName: getOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<::FMOD::OUTPUTTYPE>)>(&FMOD::System::getOutput)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("FMOD", "OUTPUTTYPE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: FMOD::System::getNumDrivers
// Il2CppName: getNumDrivers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<int>)>(&FMOD::System::getNumDrivers)> {
  static const MethodInfo* get() {
    static auto* numdrivers = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getNumDrivers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numdrivers});
  }
};
// Writing MetadataGetter for method: FMOD::System::getDriverInfo
// Il2CppName: getDriverInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int, ByRef<::StringW>, int, ByRef<::System::Guid>, ByRef<int>, ByRef<::FMOD::SPEAKERMODE>, ByRef<int>)>(&FMOD::System::getDriverInfo)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* namelen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* systemrate = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* speakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->this_arg;
    static auto* speakermodechannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getDriverInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, name, namelen, guid, systemrate, speakermode, speakermodechannels});
  }
};
// Writing MetadataGetter for method: FMOD::System::getDriverInfo
// Il2CppName: getDriverInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int, ByRef<::System::Guid>, ByRef<int>, ByRef<::FMOD::SPEAKERMODE>, ByRef<int>)>(&FMOD::System::getDriverInfo)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* systemrate = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* speakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->this_arg;
    static auto* speakermodechannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getDriverInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, guid, systemrate, speakermode, speakermodechannels});
  }
};
// Writing MetadataGetter for method: FMOD::System::setDriver
// Il2CppName: setDriver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int)>(&FMOD::System::setDriver)> {
  static const MethodInfo* get() {
    static auto* driver = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setDriver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{driver});
  }
};
// Writing MetadataGetter for method: FMOD::System::getDriver
// Il2CppName: getDriver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<int>)>(&FMOD::System::getDriver)> {
  static const MethodInfo* get() {
    static auto* driver = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getDriver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{driver});
  }
};
// Writing MetadataGetter for method: FMOD::System::setSoftwareChannels
// Il2CppName: setSoftwareChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int)>(&FMOD::System::setSoftwareChannels)> {
  static const MethodInfo* get() {
    static auto* numsoftwarechannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setSoftwareChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numsoftwarechannels});
  }
};
// Writing MetadataGetter for method: FMOD::System::getSoftwareChannels
// Il2CppName: getSoftwareChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<int>)>(&FMOD::System::getSoftwareChannels)> {
  static const MethodInfo* get() {
    static auto* numsoftwarechannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getSoftwareChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numsoftwarechannels});
  }
};
// Writing MetadataGetter for method: FMOD::System::setSoftwareFormat
// Il2CppName: setSoftwareFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int, ::FMOD::SPEAKERMODE, int)>(&FMOD::System::setSoftwareFormat)> {
  static const MethodInfo* get() {
    static auto* samplerate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* speakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->byval_arg;
    static auto* numrawspeakers = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setSoftwareFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samplerate, speakermode, numrawspeakers});
  }
};
// Writing MetadataGetter for method: FMOD::System::getSoftwareFormat
// Il2CppName: getSoftwareFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<int>, ByRef<::FMOD::SPEAKERMODE>, ByRef<int>)>(&FMOD::System::getSoftwareFormat)> {
  static const MethodInfo* get() {
    static auto* samplerate = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* speakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->this_arg;
    static auto* numrawspeakers = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getSoftwareFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samplerate, speakermode, numrawspeakers});
  }
};
// Writing MetadataGetter for method: FMOD::System::setDSPBufferSize
// Il2CppName: setDSPBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(uint, int)>(&FMOD::System::setDSPBufferSize)> {
  static const MethodInfo* get() {
    static auto* bufferlength = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* numbuffers = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setDSPBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufferlength, numbuffers});
  }
};
// Writing MetadataGetter for method: FMOD::System::getDSPBufferSize
// Il2CppName: getDSPBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<uint>, ByRef<int>)>(&FMOD::System::getDSPBufferSize)> {
  static const MethodInfo* get() {
    static auto* bufferlength = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* numbuffers = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getDSPBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufferlength, numbuffers});
  }
};
// Writing MetadataGetter for method: FMOD::System::setFileSystem
// Il2CppName: setFileSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::FMOD::FILE_OPENCALLBACK*, ::FMOD::FILE_CLOSECALLBACK*, ::FMOD::FILE_READCALLBACK*, ::FMOD::FILE_SEEKCALLBACK*, ::FMOD::FILE_ASYNCREADCALLBACK*, ::FMOD::FILE_ASYNCCANCELCALLBACK*, int)>(&FMOD::System::setFileSystem)> {
  static const MethodInfo* get() {
    static auto* useropen = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_OPENCALLBACK")->byval_arg;
    static auto* userclose = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_CLOSECALLBACK")->byval_arg;
    static auto* userread = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_READCALLBACK")->byval_arg;
    static auto* userseek = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_SEEKCALLBACK")->byval_arg;
    static auto* userasyncread = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_ASYNCREADCALLBACK")->byval_arg;
    static auto* userasynccancel = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_ASYNCCANCELCALLBACK")->byval_arg;
    static auto* blockalign = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setFileSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useropen, userclose, userread, userseek, userasyncread, userasynccancel, blockalign});
  }
};
// Writing MetadataGetter for method: FMOD::System::attachFileSystem
// Il2CppName: attachFileSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::FMOD::FILE_OPENCALLBACK*, ::FMOD::FILE_CLOSECALLBACK*, ::FMOD::FILE_READCALLBACK*, ::FMOD::FILE_SEEKCALLBACK*)>(&FMOD::System::attachFileSystem)> {
  static const MethodInfo* get() {
    static auto* useropen = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_OPENCALLBACK")->byval_arg;
    static auto* userclose = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_CLOSECALLBACK")->byval_arg;
    static auto* userread = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_READCALLBACK")->byval_arg;
    static auto* userseek = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_SEEKCALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "attachFileSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useropen, userclose, userread, userseek});
  }
};
// Writing MetadataGetter for method: FMOD::System::setAdvancedSettings
// Il2CppName: setAdvancedSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<::FMOD::ADVANCEDSETTINGS>)>(&FMOD::System::setAdvancedSettings)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("FMOD", "ADVANCEDSETTINGS")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setAdvancedSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings});
  }
};
// Writing MetadataGetter for method: FMOD::System::getAdvancedSettings
// Il2CppName: getAdvancedSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<::FMOD::ADVANCEDSETTINGS>)>(&FMOD::System::getAdvancedSettings)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("FMOD", "ADVANCEDSETTINGS")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getAdvancedSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings});
  }
};
// Writing MetadataGetter for method: FMOD::System::setCallback
// Il2CppName: setCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::FMOD::SYSTEM_CALLBACK*, ::FMOD::SYSTEM_CALLBACK_TYPE)>(&FMOD::System::setCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD", "SYSTEM_CALLBACK")->byval_arg;
    static auto* callbackmask = &::il2cpp_utils::GetClassFromName("FMOD", "SYSTEM_CALLBACK_TYPE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, callbackmask});
  }
};
// Writing MetadataGetter for method: FMOD::System::setPluginPath
// Il2CppName: setPluginPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::StringW)>(&FMOD::System::setPluginPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setPluginPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: FMOD::System::loadPlugin
// Il2CppName: loadPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::StringW, ByRef<uint>, uint)>(&FMOD::System::loadPlugin)> {
  static const MethodInfo* get() {
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* priority = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "loadPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filename, handle, priority});
  }
};
// Writing MetadataGetter for method: FMOD::System::loadPlugin
// Il2CppName: loadPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::StringW, ByRef<uint>)>(&FMOD::System::loadPlugin)> {
  static const MethodInfo* get() {
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "loadPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filename, handle});
  }
};
// Writing MetadataGetter for method: FMOD::System::unloadPlugin
// Il2CppName: unloadPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(uint)>(&FMOD::System::unloadPlugin)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "unloadPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: FMOD::System::getNumNestedPlugins
// Il2CppName: getNumNestedPlugins
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(uint, ByRef<int>)>(&FMOD::System::getNumNestedPlugins)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getNumNestedPlugins", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, count});
  }
};
// Writing MetadataGetter for method: FMOD::System::getNestedPlugin
// Il2CppName: getNestedPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(uint, int, ByRef<uint>)>(&FMOD::System::getNestedPlugin)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nestedhandle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getNestedPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, index, nestedhandle});
  }
};
// Writing MetadataGetter for method: FMOD::System::getNumPlugins
// Il2CppName: getNumPlugins
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::FMOD::PLUGINTYPE, ByRef<int>)>(&FMOD::System::getNumPlugins)> {
  static const MethodInfo* get() {
    static auto* plugintype = &::il2cpp_utils::GetClassFromName("FMOD", "PLUGINTYPE")->byval_arg;
    static auto* numplugins = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getNumPlugins", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{plugintype, numplugins});
  }
};
// Writing MetadataGetter for method: FMOD::System::getPluginHandle
// Il2CppName: getPluginHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::FMOD::PLUGINTYPE, int, ByRef<uint>)>(&FMOD::System::getPluginHandle)> {
  static const MethodInfo* get() {
    static auto* plugintype = &::il2cpp_utils::GetClassFromName("FMOD", "PLUGINTYPE")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getPluginHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{plugintype, index, handle});
  }
};
// Writing MetadataGetter for method: FMOD::System::getPluginInfo
// Il2CppName: getPluginInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(uint, ByRef<::FMOD::PLUGINTYPE>, ByRef<::StringW>, int, ByRef<uint>)>(&FMOD::System::getPluginInfo)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* plugintype = &::il2cpp_utils::GetClassFromName("FMOD", "PLUGINTYPE")->this_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* namelen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getPluginInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, plugintype, name, namelen, version});
  }
};
// Writing MetadataGetter for method: FMOD::System::getPluginInfo
// Il2CppName: getPluginInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(uint, ByRef<::FMOD::PLUGINTYPE>, ByRef<uint>)>(&FMOD::System::getPluginInfo)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* plugintype = &::il2cpp_utils::GetClassFromName("FMOD", "PLUGINTYPE")->this_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getPluginInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, plugintype, version});
  }
};
// Writing MetadataGetter for method: FMOD::System::setOutputByPlugin
// Il2CppName: setOutputByPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(uint)>(&FMOD::System::setOutputByPlugin)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setOutputByPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: FMOD::System::getOutputByPlugin
// Il2CppName: getOutputByPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<uint>)>(&FMOD::System::getOutputByPlugin)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getOutputByPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: FMOD::System::createDSPByPlugin
// Il2CppName: createDSPByPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(uint, ByRef<::FMOD::DSP>)>(&FMOD::System::createDSPByPlugin)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "createDSPByPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::System::getDSPInfoByPlugin
// Il2CppName: getDSPInfoByPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(uint, ByRef<::System::IntPtr>)>(&FMOD::System::getDSPInfoByPlugin)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* description = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getDSPInfoByPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, description});
  }
};
// Writing MetadataGetter for method: FMOD::System::registerDSP
// Il2CppName: registerDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<::FMOD::DSP_DESCRIPTION>, ByRef<uint>)>(&FMOD::System::registerDSP)> {
  static const MethodInfo* get() {
    static auto* description = &::il2cpp_utils::GetClassFromName("FMOD", "DSP_DESCRIPTION")->this_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "registerDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{description, handle});
  }
};
// Writing MetadataGetter for method: FMOD::System::init
// Il2CppName: init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int, ::FMOD::INITFLAGS, ::System::IntPtr)>(&FMOD::System::init)> {
  static const MethodInfo* get() {
    static auto* maxchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD", "INITFLAGS")->byval_arg;
    static auto* extradriverdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxchannels, flags, extradriverdata});
  }
};
// Writing MetadataGetter for method: FMOD::System::close
// Il2CppName: close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)()>(&FMOD::System::close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::System::update
// Il2CppName: update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)()>(&FMOD::System::update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::System::setSpeakerPosition
// Il2CppName: setSpeakerPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::FMOD::SPEAKER, float, float, bool)>(&FMOD::System::setSpeakerPosition)> {
  static const MethodInfo* get() {
    static auto* speaker = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKER")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setSpeakerPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{speaker, x, y, active});
  }
};
// Writing MetadataGetter for method: FMOD::System::getSpeakerPosition
// Il2CppName: getSpeakerPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::FMOD::SPEAKER, ByRef<float>, ByRef<float>, ByRef<bool>)>(&FMOD::System::getSpeakerPosition)> {
  static const MethodInfo* get() {
    static auto* speaker = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKER")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getSpeakerPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{speaker, x, y, active});
  }
};
// Writing MetadataGetter for method: FMOD::System::setStreamBufferSize
// Il2CppName: setStreamBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(uint, ::FMOD::TIMEUNIT)>(&FMOD::System::setStreamBufferSize)> {
  static const MethodInfo* get() {
    static auto* filebuffersize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* filebuffersizetype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setStreamBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filebuffersize, filebuffersizetype});
  }
};
// Writing MetadataGetter for method: FMOD::System::getStreamBufferSize
// Il2CppName: getStreamBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<uint>, ByRef<::FMOD::TIMEUNIT>)>(&FMOD::System::getStreamBufferSize)> {
  static const MethodInfo* get() {
    static auto* filebuffersize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* filebuffersizetype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getStreamBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filebuffersize, filebuffersizetype});
  }
};
// Writing MetadataGetter for method: FMOD::System::set3DSettings
// Il2CppName: set3DSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(float, float, float)>(&FMOD::System::set3DSettings)> {
  static const MethodInfo* get() {
    static auto* dopplerscale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* distancefactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rolloffscale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "set3DSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dopplerscale, distancefactor, rolloffscale});
  }
};
// Writing MetadataGetter for method: FMOD::System::get3DSettings
// Il2CppName: get3DSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<float>, ByRef<float>, ByRef<float>)>(&FMOD::System::get3DSettings)> {
  static const MethodInfo* get() {
    static auto* dopplerscale = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* distancefactor = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* rolloffscale = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "get3DSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dopplerscale, distancefactor, rolloffscale});
  }
};
// Writing MetadataGetter for method: FMOD::System::set3DNumListeners
// Il2CppName: set3DNumListeners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int)>(&FMOD::System::set3DNumListeners)> {
  static const MethodInfo* get() {
    static auto* numlisteners = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "set3DNumListeners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numlisteners});
  }
};
// Writing MetadataGetter for method: FMOD::System::get3DNumListeners
// Il2CppName: get3DNumListeners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<int>)>(&FMOD::System::get3DNumListeners)> {
  static const MethodInfo* get() {
    static auto* numlisteners = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "get3DNumListeners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numlisteners});
  }
};
// Writing MetadataGetter for method: FMOD::System::set3DListenerAttributes
// Il2CppName: set3DListenerAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::System::set3DListenerAttributes)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* forward = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "set3DListenerAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener, pos, vel, forward, up});
  }
};
// Writing MetadataGetter for method: FMOD::System::get3DListenerAttributes
// Il2CppName: get3DListenerAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::System::get3DListenerAttributes)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* forward = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "get3DListenerAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener, pos, vel, forward, up});
  }
};
// Writing MetadataGetter for method: FMOD::System::set3DRolloffCallback
// Il2CppName: set3DRolloffCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::FMOD::CB_3D_ROLLOFFCALLBACK*)>(&FMOD::System::set3DRolloffCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD", "CB_3D_ROLLOFFCALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "set3DRolloffCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: FMOD::System::mixerSuspend
// Il2CppName: mixerSuspend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)()>(&FMOD::System::mixerSuspend)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "mixerSuspend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::System::mixerResume
// Il2CppName: mixerResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)()>(&FMOD::System::mixerResume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "mixerResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::System::getDefaultMixMatrix
// Il2CppName: getDefaultMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::FMOD::SPEAKERMODE, ::FMOD::SPEAKERMODE, ::ArrayW<float>, int)>(&FMOD::System::getDefaultMixMatrix)> {
  static const MethodInfo* get() {
    static auto* sourcespeakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->byval_arg;
    static auto* targetspeakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->byval_arg;
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* matrixhop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getDefaultMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourcespeakermode, targetspeakermode, matrix, matrixhop});
  }
};
// Writing MetadataGetter for method: FMOD::System::getSpeakerModeChannels
// Il2CppName: getSpeakerModeChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::FMOD::SPEAKERMODE, ByRef<int>)>(&FMOD::System::getSpeakerModeChannels)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getSpeakerModeChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode, channels});
  }
};
// Writing MetadataGetter for method: FMOD::System::getVersion
// Il2CppName: getVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<uint>)>(&FMOD::System::getVersion)> {
  static const MethodInfo* get() {
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{version});
  }
};
// Writing MetadataGetter for method: FMOD::System::getOutputHandle
// Il2CppName: getOutputHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<::System::IntPtr>)>(&FMOD::System::getOutputHandle)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getOutputHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: FMOD::System::getChannelsPlaying
// Il2CppName: getChannelsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<int>, ByRef<int>)>(&FMOD::System::getChannelsPlaying)> {
  static const MethodInfo* get() {
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* realchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getChannelsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channels, realchannels});
  }
};
// Writing MetadataGetter for method: FMOD::System::getCPUUsage
// Il2CppName: getCPUUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<float>, ByRef<float>, ByRef<float>, ByRef<float>, ByRef<float>)>(&FMOD::System::getCPUUsage)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* update = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* total = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getCPUUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, stream, geometry, update, total});
  }
};
// Writing MetadataGetter for method: FMOD::System::getFileUsage
// Il2CppName: getFileUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<int64_t>, ByRef<int64_t>, ByRef<int64_t>)>(&FMOD::System::getFileUsage)> {
  static const MethodInfo* get() {
    static auto* sampleBytesRead = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* streamBytesRead = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* otherBytesRead = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getFileUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sampleBytesRead, streamBytesRead, otherBytesRead});
  }
};
// Writing MetadataGetter for method: FMOD::System::getSoundRAM
// Il2CppName: getSoundRAM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<int>, ByRef<int>, ByRef<int>)>(&FMOD::System::getSoundRAM)> {
  static const MethodInfo* get() {
    static auto* currentalloced = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maxalloced = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* total = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getSoundRAM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentalloced, maxalloced, total});
  }
};
// Writing MetadataGetter for method: FMOD::System::createSound
// Il2CppName: createSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::StringW, ::FMOD::MODE, ByRef<::FMOD::CREATESOUNDEXINFO>, ByRef<::FMOD::Sound>)>(&FMOD::System::createSound)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    static auto* exinfo = &::il2cpp_utils::GetClassFromName("FMOD", "CREATESOUNDEXINFO")->this_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("FMOD", "Sound")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "createSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, mode, exinfo, sound});
  }
};
// Writing MetadataGetter for method: FMOD::System::createSound
// Il2CppName: createSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::ArrayW<uint8_t>, ::FMOD::MODE, ByRef<::FMOD::CREATESOUNDEXINFO>, ByRef<::FMOD::Sound>)>(&FMOD::System::createSound)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    static auto* exinfo = &::il2cpp_utils::GetClassFromName("FMOD", "CREATESOUNDEXINFO")->this_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("FMOD", "Sound")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "createSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, mode, exinfo, sound});
  }
};
// Writing MetadataGetter for method: FMOD::System::createSound
// Il2CppName: createSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::System::IntPtr, ::FMOD::MODE, ByRef<::FMOD::CREATESOUNDEXINFO>, ByRef<::FMOD::Sound>)>(&FMOD::System::createSound)> {
  static const MethodInfo* get() {
    static auto* name_or_data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    static auto* exinfo = &::il2cpp_utils::GetClassFromName("FMOD", "CREATESOUNDEXINFO")->this_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("FMOD", "Sound")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "createSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name_or_data, mode, exinfo, sound});
  }
};
// Writing MetadataGetter for method: FMOD::System::createSound
// Il2CppName: createSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::StringW, ::FMOD::MODE, ByRef<::FMOD::Sound>)>(&FMOD::System::createSound)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("FMOD", "Sound")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "createSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, mode, sound});
  }
};
// Writing MetadataGetter for method: FMOD::System::createStream
// Il2CppName: createStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::StringW, ::FMOD::MODE, ByRef<::FMOD::CREATESOUNDEXINFO>, ByRef<::FMOD::Sound>)>(&FMOD::System::createStream)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    static auto* exinfo = &::il2cpp_utils::GetClassFromName("FMOD", "CREATESOUNDEXINFO")->this_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("FMOD", "Sound")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "createStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, mode, exinfo, sound});
  }
};
// Writing MetadataGetter for method: FMOD::System::createStream
// Il2CppName: createStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::ArrayW<uint8_t>, ::FMOD::MODE, ByRef<::FMOD::CREATESOUNDEXINFO>, ByRef<::FMOD::Sound>)>(&FMOD::System::createStream)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    static auto* exinfo = &::il2cpp_utils::GetClassFromName("FMOD", "CREATESOUNDEXINFO")->this_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("FMOD", "Sound")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "createStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, mode, exinfo, sound});
  }
};
// Writing MetadataGetter for method: FMOD::System::createStream
// Il2CppName: createStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::System::IntPtr, ::FMOD::MODE, ByRef<::FMOD::CREATESOUNDEXINFO>, ByRef<::FMOD::Sound>)>(&FMOD::System::createStream)> {
  static const MethodInfo* get() {
    static auto* name_or_data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    static auto* exinfo = &::il2cpp_utils::GetClassFromName("FMOD", "CREATESOUNDEXINFO")->this_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("FMOD", "Sound")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "createStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name_or_data, mode, exinfo, sound});
  }
};
// Writing MetadataGetter for method: FMOD::System::createStream
// Il2CppName: createStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::StringW, ::FMOD::MODE, ByRef<::FMOD::Sound>)>(&FMOD::System::createStream)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("FMOD", "Sound")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "createStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, mode, sound});
  }
};
// Writing MetadataGetter for method: FMOD::System::createDSP
// Il2CppName: createDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<::FMOD::DSP_DESCRIPTION>, ByRef<::FMOD::DSP>)>(&FMOD::System::createDSP)> {
  static const MethodInfo* get() {
    static auto* description = &::il2cpp_utils::GetClassFromName("FMOD", "DSP_DESCRIPTION")->this_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "createDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{description, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::System::createDSPByType
// Il2CppName: createDSPByType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::FMOD::DSP_TYPE, ByRef<::FMOD::DSP>)>(&FMOD::System::createDSPByType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("FMOD", "DSP_TYPE")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "createDSPByType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::System::createChannelGroup
// Il2CppName: createChannelGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::StringW, ByRef<::FMOD::ChannelGroup>)>(&FMOD::System::createChannelGroup)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("FMOD", "ChannelGroup")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "createChannelGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, channelgroup});
  }
};
// Writing MetadataGetter for method: FMOD::System::createSoundGroup
// Il2CppName: createSoundGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::StringW, ByRef<::FMOD::SoundGroup>)>(&FMOD::System::createSoundGroup)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* soundgroup = &::il2cpp_utils::GetClassFromName("FMOD", "SoundGroup")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "createSoundGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, soundgroup});
  }
};
// Writing MetadataGetter for method: FMOD::System::createReverb3D
// Il2CppName: createReverb3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<::FMOD::Reverb3D>)>(&FMOD::System::createReverb3D)> {
  static const MethodInfo* get() {
    static auto* reverb = &::il2cpp_utils::GetClassFromName("FMOD", "Reverb3D")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "createReverb3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reverb});
  }
};
// Writing MetadataGetter for method: FMOD::System::playSound
// Il2CppName: playSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::FMOD::Sound, ::FMOD::ChannelGroup, bool, ByRef<::FMOD::Channel>)>(&FMOD::System::playSound)> {
  static const MethodInfo* get() {
    static auto* sound = &::il2cpp_utils::GetClassFromName("FMOD", "Sound")->byval_arg;
    static auto* channelGroup = &::il2cpp_utils::GetClassFromName("FMOD", "ChannelGroup")->byval_arg;
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("FMOD", "Channel")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "playSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sound, channelGroup, paused, channel});
  }
};
// Writing MetadataGetter for method: FMOD::System::playDSP
// Il2CppName: playDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::FMOD::DSP, ::FMOD::ChannelGroup, bool, ByRef<::FMOD::Channel>)>(&FMOD::System::playDSP)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->byval_arg;
    static auto* channelGroup = &::il2cpp_utils::GetClassFromName("FMOD", "ChannelGroup")->byval_arg;
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("FMOD", "Channel")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "playDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, channelGroup, paused, channel});
  }
};
// Writing MetadataGetter for method: FMOD::System::getChannel
// Il2CppName: getChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int, ByRef<::FMOD::Channel>)>(&FMOD::System::getChannel)> {
  static const MethodInfo* get() {
    static auto* channelid = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("FMOD", "Channel")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelid, channel});
  }
};
// Writing MetadataGetter for method: FMOD::System::getMasterChannelGroup
// Il2CppName: getMasterChannelGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<::FMOD::ChannelGroup>)>(&FMOD::System::getMasterChannelGroup)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("FMOD", "ChannelGroup")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getMasterChannelGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup});
  }
};
// Writing MetadataGetter for method: FMOD::System::getMasterSoundGroup
// Il2CppName: getMasterSoundGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<::FMOD::SoundGroup>)>(&FMOD::System::getMasterSoundGroup)> {
  static const MethodInfo* get() {
    static auto* soundgroup = &::il2cpp_utils::GetClassFromName("FMOD", "SoundGroup")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getMasterSoundGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundgroup});
  }
};
// Writing MetadataGetter for method: FMOD::System::attachChannelGroupToPort
// Il2CppName: attachChannelGroupToPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(uint, uint64_t, ::FMOD::ChannelGroup, bool)>(&FMOD::System::attachChannelGroupToPort)> {
  static const MethodInfo* get() {
    static auto* portType = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* portIndex = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("FMOD", "ChannelGroup")->byval_arg;
    static auto* passThru = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "attachChannelGroupToPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{portType, portIndex, channelgroup, passThru});
  }
};
// Writing MetadataGetter for method: FMOD::System::detachChannelGroupFromPort
// Il2CppName: detachChannelGroupFromPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::FMOD::ChannelGroup)>(&FMOD::System::detachChannelGroupFromPort)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("FMOD", "ChannelGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "detachChannelGroupFromPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup});
  }
};
// Writing MetadataGetter for method: FMOD::System::setReverbProperties
// Il2CppName: setReverbProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int, ByRef<::FMOD::REVERB_PROPERTIES>)>(&FMOD::System::setReverbProperties)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* prop = &::il2cpp_utils::GetClassFromName("FMOD", "REVERB_PROPERTIES")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setReverbProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, prop});
  }
};
// Writing MetadataGetter for method: FMOD::System::getReverbProperties
// Il2CppName: getReverbProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int, ByRef<::FMOD::REVERB_PROPERTIES>)>(&FMOD::System::getReverbProperties)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* prop = &::il2cpp_utils::GetClassFromName("FMOD", "REVERB_PROPERTIES")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getReverbProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, prop});
  }
};
// Writing MetadataGetter for method: FMOD::System::lockDSP
// Il2CppName: lockDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)()>(&FMOD::System::lockDSP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "lockDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::System::unlockDSP
// Il2CppName: unlockDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)()>(&FMOD::System::unlockDSP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "unlockDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::System::getRecordNumDrivers
// Il2CppName: getRecordNumDrivers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<int>, ByRef<int>)>(&FMOD::System::getRecordNumDrivers)> {
  static const MethodInfo* get() {
    static auto* numdrivers = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* numconnected = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getRecordNumDrivers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numdrivers, numconnected});
  }
};
// Writing MetadataGetter for method: FMOD::System::getRecordDriverInfo
// Il2CppName: getRecordDriverInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int, ByRef<::StringW>, int, ByRef<::System::Guid>, ByRef<int>, ByRef<::FMOD::SPEAKERMODE>, ByRef<int>, ByRef<::FMOD::DRIVER_STATE>)>(&FMOD::System::getRecordDriverInfo)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* namelen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* systemrate = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* speakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->this_arg;
    static auto* speakermodechannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("FMOD", "DRIVER_STATE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getRecordDriverInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, name, namelen, guid, systemrate, speakermode, speakermodechannels, state});
  }
};
// Writing MetadataGetter for method: FMOD::System::getRecordDriverInfo
// Il2CppName: getRecordDriverInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int, ByRef<::System::Guid>, ByRef<int>, ByRef<::FMOD::SPEAKERMODE>, ByRef<int>, ByRef<::FMOD::DRIVER_STATE>)>(&FMOD::System::getRecordDriverInfo)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* systemrate = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* speakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->this_arg;
    static auto* speakermodechannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("FMOD", "DRIVER_STATE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getRecordDriverInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, guid, systemrate, speakermode, speakermodechannels, state});
  }
};
// Writing MetadataGetter for method: FMOD::System::getRecordPosition
// Il2CppName: getRecordPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int, ByRef<uint>)>(&FMOD::System::getRecordPosition)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getRecordPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, position});
  }
};
// Writing MetadataGetter for method: FMOD::System::recordStart
// Il2CppName: recordStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int, ::FMOD::Sound, bool)>(&FMOD::System::recordStart)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("FMOD", "Sound")->byval_arg;
    static auto* loop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "recordStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, sound, loop});
  }
};
// Writing MetadataGetter for method: FMOD::System::recordStop
// Il2CppName: recordStop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int)>(&FMOD::System::recordStop)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "recordStop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: FMOD::System::isRecording
// Il2CppName: isRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int, ByRef<bool>)>(&FMOD::System::isRecording)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* recording = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "isRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, recording});
  }
};
// Writing MetadataGetter for method: FMOD::System::createGeometry
// Il2CppName: createGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int, int, ByRef<::FMOD::Geometry>)>(&FMOD::System::createGeometry)> {
  static const MethodInfo* get() {
    static auto* maxpolygons = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxvertices = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* geometry = &::il2cpp_utils::GetClassFromName("FMOD", "Geometry")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "createGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxpolygons, maxvertices, geometry});
  }
};
// Writing MetadataGetter for method: FMOD::System::setGeometrySettings
// Il2CppName: setGeometrySettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(float)>(&FMOD::System::setGeometrySettings)> {
  static const MethodInfo* get() {
    static auto* maxworldsize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setGeometrySettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxworldsize});
  }
};
// Writing MetadataGetter for method: FMOD::System::getGeometrySettings
// Il2CppName: getGeometrySettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<float>)>(&FMOD::System::getGeometrySettings)> {
  static const MethodInfo* get() {
    static auto* maxworldsize = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getGeometrySettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxworldsize});
  }
};
// Writing MetadataGetter for method: FMOD::System::loadGeometry
// Il2CppName: loadGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::System::IntPtr, int, ByRef<::FMOD::Geometry>)>(&FMOD::System::loadGeometry)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* datasize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* geometry = &::il2cpp_utils::GetClassFromName("FMOD", "Geometry")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "loadGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, datasize, geometry});
  }
};
// Writing MetadataGetter for method: FMOD::System::getGeometryOcclusion
// Il2CppName: getGeometryOcclusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<float>, ByRef<float>)>(&FMOD::System::getGeometryOcclusion)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* direct = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* reverb = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getGeometryOcclusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener, source, direct, reverb});
  }
};
// Writing MetadataGetter for method: FMOD::System::setNetworkProxy
// Il2CppName: setNetworkProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::StringW)>(&FMOD::System::setNetworkProxy)> {
  static const MethodInfo* get() {
    static auto* proxy = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setNetworkProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{proxy});
  }
};
// Writing MetadataGetter for method: FMOD::System::getNetworkProxy
// Il2CppName: getNetworkProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<::StringW>, int)>(&FMOD::System::getNetworkProxy)> {
  static const MethodInfo* get() {
    static auto* proxy = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* proxylen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getNetworkProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{proxy, proxylen});
  }
};
// Writing MetadataGetter for method: FMOD::System::setNetworkTimeout
// Il2CppName: setNetworkTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(int)>(&FMOD::System::setNetworkTimeout)> {
  static const MethodInfo* get() {
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setNetworkTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeout});
  }
};
// Writing MetadataGetter for method: FMOD::System::getNetworkTimeout
// Il2CppName: getNetworkTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<int>)>(&FMOD::System::getNetworkTimeout)> {
  static const MethodInfo* get() {
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getNetworkTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeout});
  }
};
// Writing MetadataGetter for method: FMOD::System::setUserData
// Il2CppName: setUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(::System::IntPtr)>(&FMOD::System::setUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "setUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::System::getUserData
// Il2CppName: getUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::System::*)(ByRef<::System::IntPtr>)>(&FMOD::System::getUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "getUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_Release
// Il2CppName: FMOD5_System_Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::System::FMOD5_System_Release)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetOutput
// Il2CppName: FMOD5_System_SetOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::OUTPUTTYPE)>(&FMOD::System::FMOD5_System_SetOutput)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("FMOD", "OUTPUTTYPE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, output});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetOutput
// Il2CppName: FMOD5_System_GetOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::OUTPUTTYPE>)>(&FMOD::System::FMOD5_System_GetOutput)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("FMOD", "OUTPUTTYPE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, output});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetNumDrivers
// Il2CppName: FMOD5_System_GetNumDrivers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::System::FMOD5_System_GetNumDrivers)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numdrivers = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetNumDrivers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, numdrivers});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetDriverInfo
// Il2CppName: FMOD5_System_GetDriverInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ::System::IntPtr, int, ByRef<::System::Guid>, ByRef<int>, ByRef<::FMOD::SPEAKERMODE>, ByRef<int>)>(&FMOD::System::FMOD5_System_GetDriverInfo)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* namelen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* systemrate = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* speakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->this_arg;
    static auto* speakermodechannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetDriverInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, id, name, namelen, guid, systemrate, speakermode, speakermodechannels});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetDriver
// Il2CppName: FMOD5_System_SetDriver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int)>(&FMOD::System::FMOD5_System_SetDriver)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* driver = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetDriver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, driver});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetDriver
// Il2CppName: FMOD5_System_GetDriver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::System::FMOD5_System_GetDriver)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* driver = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetDriver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, driver});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetSoftwareChannels
// Il2CppName: FMOD5_System_SetSoftwareChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int)>(&FMOD::System::FMOD5_System_SetSoftwareChannels)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numsoftwarechannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetSoftwareChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, numsoftwarechannels});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetSoftwareChannels
// Il2CppName: FMOD5_System_GetSoftwareChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::System::FMOD5_System_GetSoftwareChannels)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numsoftwarechannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetSoftwareChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, numsoftwarechannels});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetSoftwareFormat
// Il2CppName: FMOD5_System_SetSoftwareFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ::FMOD::SPEAKERMODE, int)>(&FMOD::System::FMOD5_System_SetSoftwareFormat)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* samplerate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* speakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->byval_arg;
    static auto* numrawspeakers = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetSoftwareFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, samplerate, speakermode, numrawspeakers});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetSoftwareFormat
// Il2CppName: FMOD5_System_GetSoftwareFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>, ByRef<::FMOD::SPEAKERMODE>, ByRef<int>)>(&FMOD::System::FMOD5_System_GetSoftwareFormat)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* samplerate = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* speakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->this_arg;
    static auto* numrawspeakers = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetSoftwareFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, samplerate, speakermode, numrawspeakers});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetDSPBufferSize
// Il2CppName: FMOD5_System_SetDSPBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint, int)>(&FMOD::System::FMOD5_System_SetDSPBufferSize)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* bufferlength = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* numbuffers = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetDSPBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, bufferlength, numbuffers});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetDSPBufferSize
// Il2CppName: FMOD5_System_GetDSPBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint>, ByRef<int>)>(&FMOD::System::FMOD5_System_GetDSPBufferSize)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* bufferlength = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* numbuffers = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetDSPBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, bufferlength, numbuffers});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetFileSystem
// Il2CppName: FMOD5_System_SetFileSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::FILE_OPENCALLBACK*, ::FMOD::FILE_CLOSECALLBACK*, ::FMOD::FILE_READCALLBACK*, ::FMOD::FILE_SEEKCALLBACK*, ::FMOD::FILE_ASYNCREADCALLBACK*, ::FMOD::FILE_ASYNCCANCELCALLBACK*, int)>(&FMOD::System::FMOD5_System_SetFileSystem)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* useropen = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_OPENCALLBACK")->byval_arg;
    static auto* userclose = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_CLOSECALLBACK")->byval_arg;
    static auto* userread = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_READCALLBACK")->byval_arg;
    static auto* userseek = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_SEEKCALLBACK")->byval_arg;
    static auto* userasyncread = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_ASYNCREADCALLBACK")->byval_arg;
    static auto* userasynccancel = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_ASYNCCANCELCALLBACK")->byval_arg;
    static auto* blockalign = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetFileSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, useropen, userclose, userread, userseek, userasyncread, userasynccancel, blockalign});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_AttachFileSystem
// Il2CppName: FMOD5_System_AttachFileSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::FILE_OPENCALLBACK*, ::FMOD::FILE_CLOSECALLBACK*, ::FMOD::FILE_READCALLBACK*, ::FMOD::FILE_SEEKCALLBACK*)>(&FMOD::System::FMOD5_System_AttachFileSystem)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* useropen = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_OPENCALLBACK")->byval_arg;
    static auto* userclose = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_CLOSECALLBACK")->byval_arg;
    static auto* userread = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_READCALLBACK")->byval_arg;
    static auto* userseek = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_SEEKCALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_AttachFileSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, useropen, userclose, userread, userseek});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetAdvancedSettings
// Il2CppName: FMOD5_System_SetAdvancedSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::ADVANCEDSETTINGS>)>(&FMOD::System::FMOD5_System_SetAdvancedSettings)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("FMOD", "ADVANCEDSETTINGS")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetAdvancedSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, settings});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetAdvancedSettings
// Il2CppName: FMOD5_System_GetAdvancedSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::ADVANCEDSETTINGS>)>(&FMOD::System::FMOD5_System_GetAdvancedSettings)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("FMOD", "ADVANCEDSETTINGS")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetAdvancedSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, settings});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetCallback
// Il2CppName: FMOD5_System_SetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::SYSTEM_CALLBACK*, ::FMOD::SYSTEM_CALLBACK_TYPE)>(&FMOD::System::FMOD5_System_SetCallback)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD", "SYSTEM_CALLBACK")->byval_arg;
    static auto* callbackmask = &::il2cpp_utils::GetClassFromName("FMOD", "SYSTEM_CALLBACK_TYPE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, callback, callbackmask});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetPluginPath
// Il2CppName: FMOD5_System_SetPluginPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>)>(&FMOD::System::FMOD5_System_SetPluginPath)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* path = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetPluginPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, path});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_LoadPlugin
// Il2CppName: FMOD5_System_LoadPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ByRef<uint>, uint)>(&FMOD::System::FMOD5_System_LoadPlugin)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* filename = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* priority = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_LoadPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, filename, handle, priority});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_UnloadPlugin
// Il2CppName: FMOD5_System_UnloadPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint)>(&FMOD::System::FMOD5_System_UnloadPlugin)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_UnloadPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, handle});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetNumNestedPlugins
// Il2CppName: FMOD5_System_GetNumNestedPlugins
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint, ByRef<int>)>(&FMOD::System::FMOD5_System_GetNumNestedPlugins)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetNumNestedPlugins", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, handle, count});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetNestedPlugin
// Il2CppName: FMOD5_System_GetNestedPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint, int, ByRef<uint>)>(&FMOD::System::FMOD5_System_GetNestedPlugin)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nestedhandle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetNestedPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, handle, index, nestedhandle});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetNumPlugins
// Il2CppName: FMOD5_System_GetNumPlugins
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::PLUGINTYPE, ByRef<int>)>(&FMOD::System::FMOD5_System_GetNumPlugins)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* plugintype = &::il2cpp_utils::GetClassFromName("FMOD", "PLUGINTYPE")->byval_arg;
    static auto* numplugins = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetNumPlugins", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, plugintype, numplugins});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetPluginHandle
// Il2CppName: FMOD5_System_GetPluginHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::PLUGINTYPE, int, ByRef<uint>)>(&FMOD::System::FMOD5_System_GetPluginHandle)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* plugintype = &::il2cpp_utils::GetClassFromName("FMOD", "PLUGINTYPE")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetPluginHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, plugintype, index, handle});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetPluginInfo
// Il2CppName: FMOD5_System_GetPluginInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint, ByRef<::FMOD::PLUGINTYPE>, ::System::IntPtr, int, ByRef<uint>)>(&FMOD::System::FMOD5_System_GetPluginInfo)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* plugintype = &::il2cpp_utils::GetClassFromName("FMOD", "PLUGINTYPE")->this_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* namelen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetPluginInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, handle, plugintype, name, namelen, version});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetOutputByPlugin
// Il2CppName: FMOD5_System_SetOutputByPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint)>(&FMOD::System::FMOD5_System_SetOutputByPlugin)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetOutputByPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, handle});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetOutputByPlugin
// Il2CppName: FMOD5_System_GetOutputByPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint>)>(&FMOD::System::FMOD5_System_GetOutputByPlugin)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetOutputByPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, handle});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_CreateDSPByPlugin
// Il2CppName: FMOD5_System_CreateDSPByPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_CreateDSPByPlugin)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_CreateDSPByPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, handle, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetDSPInfoByPlugin
// Il2CppName: FMOD5_System_GetDSPInfoByPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_GetDSPInfoByPlugin)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* description = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetDSPInfoByPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, handle, description});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_RegisterDSP
// Il2CppName: FMOD5_System_RegisterDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::DSP_DESCRIPTION>, ByRef<uint>)>(&FMOD::System::FMOD5_System_RegisterDSP)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* description = &::il2cpp_utils::GetClassFromName("FMOD", "DSP_DESCRIPTION")->this_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_RegisterDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, description, handle});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_Init
// Il2CppName: FMOD5_System_Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ::FMOD::INITFLAGS, ::System::IntPtr)>(&FMOD::System::FMOD5_System_Init)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* maxchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD", "INITFLAGS")->byval_arg;
    static auto* extradriverdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, maxchannels, flags, extradriverdata});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_Close
// Il2CppName: FMOD5_System_Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::System::FMOD5_System_Close)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_Update
// Il2CppName: FMOD5_System_Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::System::FMOD5_System_Update)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetSpeakerPosition
// Il2CppName: FMOD5_System_SetSpeakerPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::SPEAKER, float, float, bool)>(&FMOD::System::FMOD5_System_SetSpeakerPosition)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* speaker = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKER")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetSpeakerPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, speaker, x, y, active});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetSpeakerPosition
// Il2CppName: FMOD5_System_GetSpeakerPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::SPEAKER, ByRef<float>, ByRef<float>, ByRef<bool>)>(&FMOD::System::FMOD5_System_GetSpeakerPosition)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* speaker = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKER")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetSpeakerPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, speaker, x, y, active});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetStreamBufferSize
// Il2CppName: FMOD5_System_SetStreamBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint, ::FMOD::TIMEUNIT)>(&FMOD::System::FMOD5_System_SetStreamBufferSize)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* filebuffersize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* filebuffersizetype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetStreamBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, filebuffersize, filebuffersizetype});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetStreamBufferSize
// Il2CppName: FMOD5_System_GetStreamBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint>, ByRef<::FMOD::TIMEUNIT>)>(&FMOD::System::FMOD5_System_GetStreamBufferSize)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* filebuffersize = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* filebuffersizetype = &::il2cpp_utils::GetClassFromName("FMOD", "TIMEUNIT")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetStreamBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, filebuffersize, filebuffersizetype});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_Set3DSettings
// Il2CppName: FMOD5_System_Set3DSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float, float, float)>(&FMOD::System::FMOD5_System_Set3DSettings)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dopplerscale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* distancefactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rolloffscale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_Set3DSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, dopplerscale, distancefactor, rolloffscale});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_Get3DSettings
// Il2CppName: FMOD5_System_Get3DSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>, ByRef<float>, ByRef<float>)>(&FMOD::System::FMOD5_System_Get3DSettings)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dopplerscale = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* distancefactor = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* rolloffscale = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_Get3DSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, dopplerscale, distancefactor, rolloffscale});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_Set3DNumListeners
// Il2CppName: FMOD5_System_Set3DNumListeners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int)>(&FMOD::System::FMOD5_System_Set3DNumListeners)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numlisteners = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_Set3DNumListeners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, numlisteners});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_Get3DNumListeners
// Il2CppName: FMOD5_System_Get3DNumListeners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::System::FMOD5_System_Get3DNumListeners)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numlisteners = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_Get3DNumListeners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, numlisteners});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_Set3DListenerAttributes
// Il2CppName: FMOD5_System_Set3DListenerAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::System::FMOD5_System_Set3DListenerAttributes)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* listener = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* forward = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_Set3DListenerAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, listener, pos, vel, forward, up});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_Get3DListenerAttributes
// Il2CppName: FMOD5_System_Get3DListenerAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::System::FMOD5_System_Get3DListenerAttributes)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* listener = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* forward = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_Get3DListenerAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, listener, pos, vel, forward, up});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_Set3DRolloffCallback
// Il2CppName: FMOD5_System_Set3DRolloffCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::CB_3D_ROLLOFFCALLBACK*)>(&FMOD::System::FMOD5_System_Set3DRolloffCallback)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD", "CB_3D_ROLLOFFCALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_Set3DRolloffCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, callback});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_MixerSuspend
// Il2CppName: FMOD5_System_MixerSuspend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::System::FMOD5_System_MixerSuspend)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_MixerSuspend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_MixerResume
// Il2CppName: FMOD5_System_MixerResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::System::FMOD5_System_MixerResume)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_MixerResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetDefaultMixMatrix
// Il2CppName: FMOD5_System_GetDefaultMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::SPEAKERMODE, ::FMOD::SPEAKERMODE, ::ArrayW<float>, int)>(&FMOD::System::FMOD5_System_GetDefaultMixMatrix)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* sourcespeakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->byval_arg;
    static auto* targetspeakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->byval_arg;
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* matrixhop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetDefaultMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, sourcespeakermode, targetspeakermode, matrix, matrixhop});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetSpeakerModeChannels
// Il2CppName: FMOD5_System_GetSpeakerModeChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::SPEAKERMODE, ByRef<int>)>(&FMOD::System::FMOD5_System_GetSpeakerModeChannels)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetSpeakerModeChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, mode, channels});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetVersion
// Il2CppName: FMOD5_System_GetVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint>)>(&FMOD::System::FMOD5_System_GetVersion)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, version});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetOutputHandle
// Il2CppName: FMOD5_System_GetOutputHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_GetOutputHandle)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetOutputHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, handle});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetChannelsPlaying
// Il2CppName: FMOD5_System_GetChannelsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>, ByRef<int>)>(&FMOD::System::FMOD5_System_GetChannelsPlaying)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* realchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetChannelsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, channels, realchannels});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetCPUUsage
// Il2CppName: FMOD5_System_GetCPUUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>, ByRef<float>, ByRef<float>, ByRef<float>, ByRef<float>)>(&FMOD::System::FMOD5_System_GetCPUUsage)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* update = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* total = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetCPUUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, dsp, stream, geometry, update, total});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetFileUsage
// Il2CppName: FMOD5_System_GetFileUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int64_t>, ByRef<int64_t>, ByRef<int64_t>)>(&FMOD::System::FMOD5_System_GetFileUsage)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* sampleBytesRead = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* streamBytesRead = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    static auto* otherBytesRead = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetFileUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, sampleBytesRead, streamBytesRead, otherBytesRead});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetSoundRAM
// Il2CppName: FMOD5_System_GetSoundRAM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>, ByRef<int>, ByRef<int>)>(&FMOD::System::FMOD5_System_GetSoundRAM)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* currentalloced = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maxalloced = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* total = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetSoundRAM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, currentalloced, maxalloced, total});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_CreateSound
// Il2CppName: FMOD5_System_CreateSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ::FMOD::MODE, ByRef<::FMOD::CREATESOUNDEXINFO>, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_CreateSound)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name_or_data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    static auto* exinfo = &::il2cpp_utils::GetClassFromName("FMOD", "CREATESOUNDEXINFO")->this_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_CreateSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, name_or_data, mode, exinfo, sound});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_CreateSound
// Il2CppName: FMOD5_System_CreateSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, ::FMOD::MODE, ByRef<::FMOD::CREATESOUNDEXINFO>, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_CreateSound)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name_or_data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    static auto* exinfo = &::il2cpp_utils::GetClassFromName("FMOD", "CREATESOUNDEXINFO")->this_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_CreateSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, name_or_data, mode, exinfo, sound});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_CreateStream
// Il2CppName: FMOD5_System_CreateStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ::FMOD::MODE, ByRef<::FMOD::CREATESOUNDEXINFO>, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_CreateStream)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name_or_data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    static auto* exinfo = &::il2cpp_utils::GetClassFromName("FMOD", "CREATESOUNDEXINFO")->this_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_CreateStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, name_or_data, mode, exinfo, sound});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_CreateStream
// Il2CppName: FMOD5_System_CreateStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, ::FMOD::MODE, ByRef<::FMOD::CREATESOUNDEXINFO>, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_CreateStream)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name_or_data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    static auto* exinfo = &::il2cpp_utils::GetClassFromName("FMOD", "CREATESOUNDEXINFO")->this_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_CreateStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, name_or_data, mode, exinfo, sound});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_CreateDSP
// Il2CppName: FMOD5_System_CreateDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::DSP_DESCRIPTION>, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_CreateDSP)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* description = &::il2cpp_utils::GetClassFromName("FMOD", "DSP_DESCRIPTION")->this_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_CreateDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, description, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_CreateDSPByType
// Il2CppName: FMOD5_System_CreateDSPByType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::DSP_TYPE, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_CreateDSPByType)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("FMOD", "DSP_TYPE")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_CreateDSPByType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, type, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_CreateChannelGroup
// Il2CppName: FMOD5_System_CreateChannelGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_CreateChannelGroup)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_CreateChannelGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, name, channelgroup});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_CreateSoundGroup
// Il2CppName: FMOD5_System_CreateSoundGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_CreateSoundGroup)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* soundgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_CreateSoundGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, name, soundgroup});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_CreateReverb3D
// Il2CppName: FMOD5_System_CreateReverb3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_CreateReverb3D)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* reverb = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_CreateReverb3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, reverb});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_PlaySound
// Il2CppName: FMOD5_System_PlaySound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, ::System::IntPtr, bool, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_PlaySound)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channelGroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_PlaySound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, sound, channelGroup, paused, channel});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_PlayDSP
// Il2CppName: FMOD5_System_PlayDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, ::System::IntPtr, bool, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_PlayDSP)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channelGroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_PlayDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, dsp, channelGroup, paused, channel});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetChannel
// Il2CppName: FMOD5_System_GetChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_GetChannel)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channelid = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, channelid, channel});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetMasterChannelGroup
// Il2CppName: FMOD5_System_GetMasterChannelGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_GetMasterChannelGroup)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetMasterChannelGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, channelgroup});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetMasterSoundGroup
// Il2CppName: FMOD5_System_GetMasterSoundGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_GetMasterSoundGroup)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* soundgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetMasterSoundGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, soundgroup});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_AttachChannelGroupToPort
// Il2CppName: FMOD5_System_AttachChannelGroupToPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint, uint64_t, ::System::IntPtr, bool)>(&FMOD::System::FMOD5_System_AttachChannelGroupToPort)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* portType = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* portIndex = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* passThru = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_AttachChannelGroupToPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, portType, portIndex, channelgroup, passThru});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_DetachChannelGroupFromPort
// Il2CppName: FMOD5_System_DetachChannelGroupFromPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::System::FMOD5_System_DetachChannelGroupFromPort)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_DetachChannelGroupFromPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, channelgroup});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetReverbProperties
// Il2CppName: FMOD5_System_SetReverbProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::FMOD::REVERB_PROPERTIES>)>(&FMOD::System::FMOD5_System_SetReverbProperties)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* prop = &::il2cpp_utils::GetClassFromName("FMOD", "REVERB_PROPERTIES")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetReverbProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, instance, prop});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetReverbProperties
// Il2CppName: FMOD5_System_GetReverbProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::FMOD::REVERB_PROPERTIES>)>(&FMOD::System::FMOD5_System_GetReverbProperties)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* prop = &::il2cpp_utils::GetClassFromName("FMOD", "REVERB_PROPERTIES")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetReverbProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, instance, prop});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_LockDSP
// Il2CppName: FMOD5_System_LockDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::System::FMOD5_System_LockDSP)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_LockDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_UnlockDSP
// Il2CppName: FMOD5_System_UnlockDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::System::FMOD5_System_UnlockDSP)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_UnlockDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetRecordNumDrivers
// Il2CppName: FMOD5_System_GetRecordNumDrivers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>, ByRef<int>)>(&FMOD::System::FMOD5_System_GetRecordNumDrivers)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numdrivers = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* numconnected = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetRecordNumDrivers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, numdrivers, numconnected});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetRecordDriverInfo
// Il2CppName: FMOD5_System_GetRecordDriverInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ::System::IntPtr, int, ByRef<::System::Guid>, ByRef<int>, ByRef<::FMOD::SPEAKERMODE>, ByRef<int>, ByRef<::FMOD::DRIVER_STATE>)>(&FMOD::System::FMOD5_System_GetRecordDriverInfo)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* namelen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* systemrate = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* speakermode = &::il2cpp_utils::GetClassFromName("FMOD", "SPEAKERMODE")->this_arg;
    static auto* speakermodechannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("FMOD", "DRIVER_STATE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetRecordDriverInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, id, name, namelen, guid, systemrate, speakermode, speakermodechannels, state});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetRecordPosition
// Il2CppName: FMOD5_System_GetRecordPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<uint>)>(&FMOD::System::FMOD5_System_GetRecordPosition)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetRecordPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, id, position});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_RecordStart
// Il2CppName: FMOD5_System_RecordStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ::System::IntPtr, bool)>(&FMOD::System::FMOD5_System_RecordStart)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sound = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* loop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_RecordStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, id, sound, loop});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_RecordStop
// Il2CppName: FMOD5_System_RecordStop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int)>(&FMOD::System::FMOD5_System_RecordStop)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_RecordStop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, id});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_IsRecording
// Il2CppName: FMOD5_System_IsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<bool>)>(&FMOD::System::FMOD5_System_IsRecording)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* recording = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_IsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, id, recording});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_CreateGeometry
// Il2CppName: FMOD5_System_CreateGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, int, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_CreateGeometry)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* maxpolygons = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxvertices = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_CreateGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, maxpolygons, maxvertices, geometry});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetGeometrySettings
// Il2CppName: FMOD5_System_SetGeometrySettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::System::FMOD5_System_SetGeometrySettings)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* maxworldsize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetGeometrySettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, maxworldsize});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetGeometrySettings
// Il2CppName: FMOD5_System_GetGeometrySettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::System::FMOD5_System_GetGeometrySettings)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* maxworldsize = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetGeometrySettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, maxworldsize});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_LoadGeometry
// Il2CppName: FMOD5_System_LoadGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, int, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_LoadGeometry)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* datasize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* geometry = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_LoadGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, data, datasize, geometry});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetGeometryOcclusion
// Il2CppName: FMOD5_System_GetGeometryOcclusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<float>, ByRef<float>)>(&FMOD::System::FMOD5_System_GetGeometryOcclusion)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* listener = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* direct = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* reverb = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetGeometryOcclusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, listener, source, direct, reverb});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetNetworkProxy
// Il2CppName: FMOD5_System_SetNetworkProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>)>(&FMOD::System::FMOD5_System_SetNetworkProxy)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* proxy = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetNetworkProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, proxy});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetNetworkProxy
// Il2CppName: FMOD5_System_GetNetworkProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, int)>(&FMOD::System::FMOD5_System_GetNetworkProxy)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* proxy = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* proxylen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetNetworkProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, proxy, proxylen});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetNetworkTimeout
// Il2CppName: FMOD5_System_SetNetworkTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int)>(&FMOD::System::FMOD5_System_SetNetworkTimeout)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetNetworkTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, timeout});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetNetworkTimeout
// Il2CppName: FMOD5_System_GetNetworkTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::System::FMOD5_System_GetNetworkTimeout)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetNetworkTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, timeout});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_SetUserData
// Il2CppName: FMOD5_System_SetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::System::FMOD5_System_SetUserData)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_SetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::System::FMOD5_System_GetUserData
// Il2CppName: FMOD5_System_GetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::System::FMOD5_System_GetUserData)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "FMOD5_System_GetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::System::hasHandle
// Il2CppName: hasHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::System::*)()>(&FMOD::System::hasHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "hasHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::System::clearHandle
// Il2CppName: clearHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::System::*)()>(&FMOD::System::clearHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::System), "clearHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
