// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
  // Forward declaring type: System
  struct System;
  // Forward declaring type: MODE
  struct MODE;
  // Forward declaring type: CHANNEL_CALLBACK
  class CHANNEL_CALLBACK;
  // Forward declaring type: DSP
  struct DSP;
  // Forward declaring type: VECTOR
  struct VECTOR;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: IChannelControl
  class IChannelControl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::FMOD::IChannelControl);
DEFINE_IL2CPP_ARG_TYPE(::FMOD::IChannelControl*, "FMOD", "IChannelControl");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.IChannelControl
  // [TokenAttribute] Offset: FFFFFFFF
  class IChannelControl {
    public:
    // public FMOD.RESULT getSystemObject(out FMOD.System system)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getSystemObject(ByRef<::FMOD::System> system);
    // public FMOD.RESULT stop()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT stop();
    // public FMOD.RESULT setPaused(System.Boolean paused)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setPaused(bool paused);
    // public FMOD.RESULT getPaused(out System.Boolean paused)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getPaused(ByRef<bool> paused);
    // public FMOD.RESULT setVolume(System.Single volume)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setVolume(float volume);
    // public FMOD.RESULT getVolume(out System.Single volume)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getVolume(ByRef<float> volume);
    // public FMOD.RESULT setVolumeRamp(System.Boolean ramp)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setVolumeRamp(bool ramp);
    // public FMOD.RESULT getVolumeRamp(out System.Boolean ramp)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getVolumeRamp(ByRef<bool> ramp);
    // public FMOD.RESULT getAudibility(out System.Single audibility)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getAudibility(ByRef<float> audibility);
    // public FMOD.RESULT setPitch(System.Single pitch)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setPitch(float pitch);
    // public FMOD.RESULT getPitch(out System.Single pitch)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getPitch(ByRef<float> pitch);
    // public FMOD.RESULT setMute(System.Boolean mute)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setMute(bool mute);
    // public FMOD.RESULT getMute(out System.Boolean mute)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getMute(ByRef<bool> mute);
    // public FMOD.RESULT setReverbProperties(System.Int32 instance, System.Single wet)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setReverbProperties(int instance, float wet);
    // public FMOD.RESULT getReverbProperties(System.Int32 instance, out System.Single wet)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getReverbProperties(int instance, ByRef<float> wet);
    // public FMOD.RESULT setLowPassGain(System.Single gain)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setLowPassGain(float gain);
    // public FMOD.RESULT getLowPassGain(out System.Single gain)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getLowPassGain(ByRef<float> gain);
    // public FMOD.RESULT setMode(FMOD.MODE mode)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setMode(::FMOD::MODE mode);
    // public FMOD.RESULT getMode(out FMOD.MODE mode)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getMode(ByRef<::FMOD::MODE> mode);
    // public FMOD.RESULT setCallback(FMOD.CHANNEL_CALLBACK callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setCallback(::FMOD::CHANNEL_CALLBACK* callback);
    // public FMOD.RESULT isPlaying(out System.Boolean isplaying)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT isPlaying(ByRef<bool> isplaying);
    // public FMOD.RESULT setPan(System.Single pan)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setPan(float pan);
    // public FMOD.RESULT setMixLevelsOutput(System.Single frontleft, System.Single frontright, System.Single center, System.Single lfe, System.Single surroundleft, System.Single surroundright, System.Single backleft, System.Single backright)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setMixLevelsOutput(float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright);
    // public FMOD.RESULT setMixLevelsInput(System.Single[] levels, System.Int32 numlevels)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setMixLevelsInput(::ArrayW<float> levels, int numlevels);
    // public FMOD.RESULT setMixMatrix(System.Single[] matrix, System.Int32 outchannels, System.Int32 inchannels, System.Int32 inchannel_hop)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setMixMatrix(::ArrayW<float> matrix, int outchannels, int inchannels, int inchannel_hop);
    // public FMOD.RESULT getMixMatrix(System.Single[] matrix, out System.Int32 outchannels, out System.Int32 inchannels, System.Int32 inchannel_hop)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getMixMatrix(::ArrayW<float> matrix, ByRef<int> outchannels, ByRef<int> inchannels, int inchannel_hop);
    // public FMOD.RESULT getDSPClock(out System.UInt64 dspclock, out System.UInt64 parentclock)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getDSPClock(ByRef<uint64_t> dspclock, ByRef<uint64_t> parentclock);
    // public FMOD.RESULT setDelay(System.UInt64 dspclock_start, System.UInt64 dspclock_end, System.Boolean stopchannels)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setDelay(uint64_t dspclock_start, uint64_t dspclock_end, bool stopchannels);
    // public FMOD.RESULT getDelay(out System.UInt64 dspclock_start, out System.UInt64 dspclock_end, out System.Boolean stopchannels)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getDelay(ByRef<uint64_t> dspclock_start, ByRef<uint64_t> dspclock_end, ByRef<bool> stopchannels);
    // public FMOD.RESULT addFadePoint(System.UInt64 dspclock, System.Single volume)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT addFadePoint(uint64_t dspclock, float volume);
    // public FMOD.RESULT setFadePointRamp(System.UInt64 dspclock, System.Single volume)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setFadePointRamp(uint64_t dspclock, float volume);
    // public FMOD.RESULT removeFadePoints(System.UInt64 dspclock_start, System.UInt64 dspclock_end)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT removeFadePoints(uint64_t dspclock_start, uint64_t dspclock_end);
    // public FMOD.RESULT getFadePoints(ref System.UInt32 numpoints, System.UInt64[] point_dspclock, System.Single[] point_volume)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getFadePoints(ByRef<uint> numpoints, ::ArrayW<uint64_t> point_dspclock, ::ArrayW<float> point_volume);
    // public FMOD.RESULT getDSP(System.Int32 index, out FMOD.DSP dsp)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getDSP(int index, ByRef<::FMOD::DSP> dsp);
    // public FMOD.RESULT addDSP(System.Int32 index, FMOD.DSP dsp)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT addDSP(int index, ::FMOD::DSP dsp);
    // public FMOD.RESULT removeDSP(FMOD.DSP dsp)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT removeDSP(::FMOD::DSP dsp);
    // public FMOD.RESULT getNumDSPs(out System.Int32 numdsps)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getNumDSPs(ByRef<int> numdsps);
    // public FMOD.RESULT setDSPIndex(FMOD.DSP dsp, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setDSPIndex(::FMOD::DSP dsp, int index);
    // public FMOD.RESULT getDSPIndex(FMOD.DSP dsp, out System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getDSPIndex(::FMOD::DSP dsp, ByRef<int> index);
    // public FMOD.RESULT set3DAttributes(ref FMOD.VECTOR pos, ref FMOD.VECTOR vel, ref FMOD.VECTOR alt_pan_pos)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT set3DAttributes(ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos);
    // public FMOD.RESULT get3DAttributes(out FMOD.VECTOR pos, out FMOD.VECTOR vel, out FMOD.VECTOR alt_pan_pos)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT get3DAttributes(ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos);
    // public FMOD.RESULT set3DMinMaxDistance(System.Single mindistance, System.Single maxdistance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT set3DMinMaxDistance(float mindistance, float maxdistance);
    // public FMOD.RESULT get3DMinMaxDistance(out System.Single mindistance, out System.Single maxdistance)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT get3DMinMaxDistance(ByRef<float> mindistance, ByRef<float> maxdistance);
    // public FMOD.RESULT set3DConeSettings(System.Single insideconeangle, System.Single outsideconeangle, System.Single outsidevolume)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume);
    // public FMOD.RESULT get3DConeSettings(out System.Single insideconeangle, out System.Single outsideconeangle, out System.Single outsidevolume)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT get3DConeSettings(ByRef<float> insideconeangle, ByRef<float> outsideconeangle, ByRef<float> outsidevolume);
    // public FMOD.RESULT set3DConeOrientation(ref FMOD.VECTOR orientation)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT set3DConeOrientation(ByRef<::FMOD::VECTOR> orientation);
    // public FMOD.RESULT get3DConeOrientation(out FMOD.VECTOR orientation)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT get3DConeOrientation(ByRef<::FMOD::VECTOR> orientation);
    // public FMOD.RESULT set3DCustomRolloff(ref FMOD.VECTOR points, System.Int32 numpoints)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT set3DCustomRolloff(ByRef<::FMOD::VECTOR> points, int numpoints);
    // public FMOD.RESULT get3DCustomRolloff(out System.IntPtr points, out System.Int32 numpoints)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT get3DCustomRolloff(ByRef<::System::IntPtr> points, ByRef<int> numpoints);
    // public FMOD.RESULT set3DOcclusion(System.Single directocclusion, System.Single reverbocclusion)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT set3DOcclusion(float directocclusion, float reverbocclusion);
    // public FMOD.RESULT get3DOcclusion(out System.Single directocclusion, out System.Single reverbocclusion)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT get3DOcclusion(ByRef<float> directocclusion, ByRef<float> reverbocclusion);
    // public FMOD.RESULT set3DSpread(System.Single angle)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT set3DSpread(float angle);
    // public FMOD.RESULT get3DSpread(out System.Single angle)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT get3DSpread(ByRef<float> angle);
    // public FMOD.RESULT set3DLevel(System.Single level)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT set3DLevel(float level);
    // public FMOD.RESULT get3DLevel(out System.Single level)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT get3DLevel(ByRef<float> level);
    // public FMOD.RESULT set3DDopplerLevel(System.Single level)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT set3DDopplerLevel(float level);
    // public FMOD.RESULT get3DDopplerLevel(out System.Single level)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT get3DDopplerLevel(ByRef<float> level);
    // public FMOD.RESULT set3DDistanceFilter(System.Boolean custom, System.Single customLevel, System.Single centerFreq)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT set3DDistanceFilter(bool custom, float customLevel, float centerFreq);
    // public FMOD.RESULT get3DDistanceFilter(out System.Boolean custom, out System.Single customLevel, out System.Single centerFreq)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT get3DDistanceFilter(ByRef<bool> custom, ByRef<float> customLevel, ByRef<float> centerFreq);
    // public FMOD.RESULT setUserData(System.IntPtr userdata)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT setUserData(::System::IntPtr userdata);
    // public FMOD.RESULT getUserData(out System.IntPtr userdata)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::FMOD::RESULT getUserData(ByRef<::System::IntPtr> userdata);
  }; // FMOD.IChannelControl
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::IChannelControl::getSystemObject
// Il2CppName: getSystemObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<::FMOD::System>)>(&FMOD::IChannelControl::getSystemObject)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("FMOD", "System")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getSystemObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::stop
// Il2CppName: stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)()>(&FMOD::IChannelControl::stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setPaused
// Il2CppName: setPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(bool)>(&FMOD::IChannelControl::setPaused)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getPaused
// Il2CppName: getPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<bool>)>(&FMOD::IChannelControl::getPaused)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setVolume
// Il2CppName: setVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(float)>(&FMOD::IChannelControl::setVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getVolume
// Il2CppName: getVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<float>)>(&FMOD::IChannelControl::getVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setVolumeRamp
// Il2CppName: setVolumeRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(bool)>(&FMOD::IChannelControl::setVolumeRamp)> {
  static const MethodInfo* get() {
    static auto* ramp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setVolumeRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ramp});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getVolumeRamp
// Il2CppName: getVolumeRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<bool>)>(&FMOD::IChannelControl::getVolumeRamp)> {
  static const MethodInfo* get() {
    static auto* ramp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getVolumeRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ramp});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getAudibility
// Il2CppName: getAudibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<float>)>(&FMOD::IChannelControl::getAudibility)> {
  static const MethodInfo* get() {
    static auto* audibility = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getAudibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audibility});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setPitch
// Il2CppName: setPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(float)>(&FMOD::IChannelControl::setPitch)> {
  static const MethodInfo* get() {
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitch});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getPitch
// Il2CppName: getPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<float>)>(&FMOD::IChannelControl::getPitch)> {
  static const MethodInfo* get() {
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitch});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setMute
// Il2CppName: setMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(bool)>(&FMOD::IChannelControl::setMute)> {
  static const MethodInfo* get() {
    static auto* mute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mute});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getMute
// Il2CppName: getMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<bool>)>(&FMOD::IChannelControl::getMute)> {
  static const MethodInfo* get() {
    static auto* mute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mute});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setReverbProperties
// Il2CppName: setReverbProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(int, float)>(&FMOD::IChannelControl::setReverbProperties)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wet = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setReverbProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, wet});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getReverbProperties
// Il2CppName: getReverbProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(int, ByRef<float>)>(&FMOD::IChannelControl::getReverbProperties)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wet = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getReverbProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, wet});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setLowPassGain
// Il2CppName: setLowPassGain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(float)>(&FMOD::IChannelControl::setLowPassGain)> {
  static const MethodInfo* get() {
    static auto* gain = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setLowPassGain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gain});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getLowPassGain
// Il2CppName: getLowPassGain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<float>)>(&FMOD::IChannelControl::getLowPassGain)> {
  static const MethodInfo* get() {
    static auto* gain = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getLowPassGain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gain});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setMode
// Il2CppName: setMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(::FMOD::MODE)>(&FMOD::IChannelControl::setMode)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getMode
// Il2CppName: getMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<::FMOD::MODE>)>(&FMOD::IChannelControl::getMode)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setCallback
// Il2CppName: setCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(::FMOD::CHANNEL_CALLBACK*)>(&FMOD::IChannelControl::setCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD", "CHANNEL_CALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::isPlaying
// Il2CppName: isPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<bool>)>(&FMOD::IChannelControl::isPlaying)> {
  static const MethodInfo* get() {
    static auto* isplaying = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "isPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isplaying});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setPan
// Il2CppName: setPan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(float)>(&FMOD::IChannelControl::setPan)> {
  static const MethodInfo* get() {
    static auto* pan = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setPan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pan});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setMixLevelsOutput
// Il2CppName: setMixLevelsOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(float, float, float, float, float, float, float, float)>(&FMOD::IChannelControl::setMixLevelsOutput)> {
  static const MethodInfo* get() {
    static auto* frontleft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* frontright = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lfe = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* surroundleft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* surroundright = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* backleft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* backright = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setMixLevelsOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setMixLevelsInput
// Il2CppName: setMixLevelsInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(::ArrayW<float>, int)>(&FMOD::IChannelControl::setMixLevelsInput)> {
  static const MethodInfo* get() {
    static auto* levels = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* numlevels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setMixLevelsInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{levels, numlevels});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setMixMatrix
// Il2CppName: setMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(::ArrayW<float>, int, int, int)>(&FMOD::IChannelControl::setMixMatrix)> {
  static const MethodInfo* get() {
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inchannel_hop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix, outchannels, inchannels, inchannel_hop});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getMixMatrix
// Il2CppName: getMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(::ArrayW<float>, ByRef<int>, ByRef<int>, int)>(&FMOD::IChannelControl::getMixMatrix)> {
  static const MethodInfo* get() {
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* inchannel_hop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix, outchannels, inchannels, inchannel_hop});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getDSPClock
// Il2CppName: getDSPClock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<uint64_t>, ByRef<uint64_t>)>(&FMOD::IChannelControl::getDSPClock)> {
  static const MethodInfo* get() {
    static auto* dspclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* parentclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getDSPClock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock, parentclock});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setDelay
// Il2CppName: setDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(uint64_t, uint64_t, bool)>(&FMOD::IChannelControl::setDelay)> {
  static const MethodInfo* get() {
    static auto* dspclock_start = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* dspclock_end = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* stopchannels = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock_start, dspclock_end, stopchannels});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getDelay
// Il2CppName: getDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<uint64_t>, ByRef<uint64_t>, ByRef<bool>)>(&FMOD::IChannelControl::getDelay)> {
  static const MethodInfo* get() {
    static auto* dspclock_start = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* dspclock_end = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* stopchannels = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock_start, dspclock_end, stopchannels});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::addFadePoint
// Il2CppName: addFadePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(uint64_t, float)>(&FMOD::IChannelControl::addFadePoint)> {
  static const MethodInfo* get() {
    static auto* dspclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "addFadePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock, volume});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setFadePointRamp
// Il2CppName: setFadePointRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(uint64_t, float)>(&FMOD::IChannelControl::setFadePointRamp)> {
  static const MethodInfo* get() {
    static auto* dspclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setFadePointRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock, volume});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::removeFadePoints
// Il2CppName: removeFadePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(uint64_t, uint64_t)>(&FMOD::IChannelControl::removeFadePoints)> {
  static const MethodInfo* get() {
    static auto* dspclock_start = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* dspclock_end = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "removeFadePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock_start, dspclock_end});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getFadePoints
// Il2CppName: getFadePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<uint>, ::ArrayW<uint64_t>, ::ArrayW<float>)>(&FMOD::IChannelControl::getFadePoints)> {
  static const MethodInfo* get() {
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* point_dspclock = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* point_volume = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getFadePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numpoints, point_dspclock, point_volume});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getDSP
// Il2CppName: getDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(int, ByRef<::FMOD::DSP>)>(&FMOD::IChannelControl::getDSP)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::addDSP
// Il2CppName: addDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(int, ::FMOD::DSP)>(&FMOD::IChannelControl::addDSP)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "addDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::removeDSP
// Il2CppName: removeDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(::FMOD::DSP)>(&FMOD::IChannelControl::removeDSP)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "removeDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getNumDSPs
// Il2CppName: getNumDSPs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<int>)>(&FMOD::IChannelControl::getNumDSPs)> {
  static const MethodInfo* get() {
    static auto* numdsps = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getNumDSPs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numdsps});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setDSPIndex
// Il2CppName: setDSPIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(::FMOD::DSP, int)>(&FMOD::IChannelControl::setDSPIndex)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setDSPIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getDSPIndex
// Il2CppName: getDSPIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(::FMOD::DSP, ByRef<int>)>(&FMOD::IChannelControl::getDSPIndex)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getDSPIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::set3DAttributes
// Il2CppName: set3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::IChannelControl::set3DAttributes)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* alt_pan_pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "set3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, vel, alt_pan_pos});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::get3DAttributes
// Il2CppName: get3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::IChannelControl::get3DAttributes)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* alt_pan_pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "get3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, vel, alt_pan_pos});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::set3DMinMaxDistance
// Il2CppName: set3DMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(float, float)>(&FMOD::IChannelControl::set3DMinMaxDistance)> {
  static const MethodInfo* get() {
    static auto* mindistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxdistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "set3DMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mindistance, maxdistance});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::get3DMinMaxDistance
// Il2CppName: get3DMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<float>, ByRef<float>)>(&FMOD::IChannelControl::get3DMinMaxDistance)> {
  static const MethodInfo* get() {
    static auto* mindistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* maxdistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "get3DMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mindistance, maxdistance});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::set3DConeSettings
// Il2CppName: set3DConeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(float, float, float)>(&FMOD::IChannelControl::set3DConeSettings)> {
  static const MethodInfo* get() {
    static auto* insideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* outsideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* outsidevolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "set3DConeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{insideconeangle, outsideconeangle, outsidevolume});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::get3DConeSettings
// Il2CppName: get3DConeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<float>, ByRef<float>, ByRef<float>)>(&FMOD::IChannelControl::get3DConeSettings)> {
  static const MethodInfo* get() {
    static auto* insideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* outsideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* outsidevolume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "get3DConeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{insideconeangle, outsideconeangle, outsidevolume});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::set3DConeOrientation
// Il2CppName: set3DConeOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<::FMOD::VECTOR>)>(&FMOD::IChannelControl::set3DConeOrientation)> {
  static const MethodInfo* get() {
    static auto* orientation = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "set3DConeOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{orientation});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::get3DConeOrientation
// Il2CppName: get3DConeOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<::FMOD::VECTOR>)>(&FMOD::IChannelControl::get3DConeOrientation)> {
  static const MethodInfo* get() {
    static auto* orientation = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "get3DConeOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{orientation});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::set3DCustomRolloff
// Il2CppName: set3DCustomRolloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<::FMOD::VECTOR>, int)>(&FMOD::IChannelControl::set3DCustomRolloff)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "set3DCustomRolloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, numpoints});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::get3DCustomRolloff
// Il2CppName: get3DCustomRolloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<::System::IntPtr>, ByRef<int>)>(&FMOD::IChannelControl::get3DCustomRolloff)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "get3DCustomRolloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, numpoints});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::set3DOcclusion
// Il2CppName: set3DOcclusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(float, float)>(&FMOD::IChannelControl::set3DOcclusion)> {
  static const MethodInfo* get() {
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "set3DOcclusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{directocclusion, reverbocclusion});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::get3DOcclusion
// Il2CppName: get3DOcclusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<float>, ByRef<float>)>(&FMOD::IChannelControl::get3DOcclusion)> {
  static const MethodInfo* get() {
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "get3DOcclusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{directocclusion, reverbocclusion});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::set3DSpread
// Il2CppName: set3DSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(float)>(&FMOD::IChannelControl::set3DSpread)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "set3DSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::get3DSpread
// Il2CppName: get3DSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<float>)>(&FMOD::IChannelControl::get3DSpread)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "get3DSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::set3DLevel
// Il2CppName: set3DLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(float)>(&FMOD::IChannelControl::set3DLevel)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "set3DLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::get3DLevel
// Il2CppName: get3DLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<float>)>(&FMOD::IChannelControl::get3DLevel)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "get3DLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::set3DDopplerLevel
// Il2CppName: set3DDopplerLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(float)>(&FMOD::IChannelControl::set3DDopplerLevel)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "set3DDopplerLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::get3DDopplerLevel
// Il2CppName: get3DDopplerLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<float>)>(&FMOD::IChannelControl::get3DDopplerLevel)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "get3DDopplerLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::set3DDistanceFilter
// Il2CppName: set3DDistanceFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(bool, float, float)>(&FMOD::IChannelControl::set3DDistanceFilter)> {
  static const MethodInfo* get() {
    static auto* custom = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* customLevel = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* centerFreq = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "set3DDistanceFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{custom, customLevel, centerFreq});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::get3DDistanceFilter
// Il2CppName: get3DDistanceFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<bool>, ByRef<float>, ByRef<float>)>(&FMOD::IChannelControl::get3DDistanceFilter)> {
  static const MethodInfo* get() {
    static auto* custom = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* customLevel = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* centerFreq = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "get3DDistanceFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{custom, customLevel, centerFreq});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::setUserData
// Il2CppName: setUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(::System::IntPtr)>(&FMOD::IChannelControl::setUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "setUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::IChannelControl::getUserData
// Il2CppName: getUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::IChannelControl::*)(ByRef<::System::IntPtr>)>(&FMOD::IChannelControl::getUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::IChannelControl*), "getUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
