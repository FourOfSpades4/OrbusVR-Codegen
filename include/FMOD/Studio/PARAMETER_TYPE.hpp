// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: PARAMETER_TYPE
  struct PARAMETER_TYPE;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::PARAMETER_TYPE, "FMOD.Studio", "PARAMETER_TYPE");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.Studio.PARAMETER_TYPE
  // [TokenAttribute] Offset: FFFFFFFF
  struct PARAMETER_TYPE/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: PARAMETER_TYPE
    constexpr PARAMETER_TYPE(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.Studio.PARAMETER_TYPE GAME_CONTROLLED
    static constexpr const int GAME_CONTROLLED = 0;
    // Get static field: static public FMOD.Studio.PARAMETER_TYPE GAME_CONTROLLED
    static ::FMOD::Studio::PARAMETER_TYPE _get_GAME_CONTROLLED();
    // Set static field: static public FMOD.Studio.PARAMETER_TYPE GAME_CONTROLLED
    static void _set_GAME_CONTROLLED(::FMOD::Studio::PARAMETER_TYPE value);
    // static field const value: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_DISTANCE
    static constexpr const int AUTOMATIC_DISTANCE = 1;
    // Get static field: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_DISTANCE
    static ::FMOD::Studio::PARAMETER_TYPE _get_AUTOMATIC_DISTANCE();
    // Set static field: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_DISTANCE
    static void _set_AUTOMATIC_DISTANCE(::FMOD::Studio::PARAMETER_TYPE value);
    // static field const value: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_EVENT_CONE_ANGLE
    static constexpr const int AUTOMATIC_EVENT_CONE_ANGLE = 2;
    // Get static field: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_EVENT_CONE_ANGLE
    static ::FMOD::Studio::PARAMETER_TYPE _get_AUTOMATIC_EVENT_CONE_ANGLE();
    // Set static field: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_EVENT_CONE_ANGLE
    static void _set_AUTOMATIC_EVENT_CONE_ANGLE(::FMOD::Studio::PARAMETER_TYPE value);
    // static field const value: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_EVENT_ORIENTATION
    static constexpr const int AUTOMATIC_EVENT_ORIENTATION = 3;
    // Get static field: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_EVENT_ORIENTATION
    static ::FMOD::Studio::PARAMETER_TYPE _get_AUTOMATIC_EVENT_ORIENTATION();
    // Set static field: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_EVENT_ORIENTATION
    static void _set_AUTOMATIC_EVENT_ORIENTATION(::FMOD::Studio::PARAMETER_TYPE value);
    // static field const value: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_DIRECTION
    static constexpr const int AUTOMATIC_DIRECTION = 4;
    // Get static field: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_DIRECTION
    static ::FMOD::Studio::PARAMETER_TYPE _get_AUTOMATIC_DIRECTION();
    // Set static field: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_DIRECTION
    static void _set_AUTOMATIC_DIRECTION(::FMOD::Studio::PARAMETER_TYPE value);
    // static field const value: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_ELEVATION
    static constexpr const int AUTOMATIC_ELEVATION = 5;
    // Get static field: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_ELEVATION
    static ::FMOD::Studio::PARAMETER_TYPE _get_AUTOMATIC_ELEVATION();
    // Set static field: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_ELEVATION
    static void _set_AUTOMATIC_ELEVATION(::FMOD::Studio::PARAMETER_TYPE value);
    // static field const value: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_LISTENER_ORIENTATION
    static constexpr const int AUTOMATIC_LISTENER_ORIENTATION = 6;
    // Get static field: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_LISTENER_ORIENTATION
    static ::FMOD::Studio::PARAMETER_TYPE _get_AUTOMATIC_LISTENER_ORIENTATION();
    // Set static field: static public FMOD.Studio.PARAMETER_TYPE AUTOMATIC_LISTENER_ORIENTATION
    static void _set_AUTOMATIC_LISTENER_ORIENTATION(::FMOD::Studio::PARAMETER_TYPE value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // FMOD.Studio.PARAMETER_TYPE
  #pragma pack(pop)
  static check_size<sizeof(PARAMETER_TYPE), 0 + sizeof(int)> __FMOD_Studio_PARAMETER_TYPESizeCheck;
  static_assert(sizeof(PARAMETER_TYPE) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
