// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: FMOD.StringWrapper
#include "FMOD/StringWrapper.hpp"
// Including type: FMOD.Studio.USER_PROPERTY_TYPE
#include "FMOD/Studio/USER_PROPERTY_TYPE.hpp"
// Including type: FMOD.Studio.Union_IntBoolFloatString
#include "FMOD/Studio/Union_IntBoolFloatString.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: USER_PROPERTY
  struct USER_PROPERTY;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::USER_PROPERTY, "FMOD.Studio", "USER_PROPERTY");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Studio.USER_PROPERTY
  // [TokenAttribute] Offset: FFFFFFFF
  struct USER_PROPERTY/*, public ::System::ValueType*/ {
    public:
    public:
    // public FMOD.StringWrapper name
    // Size: 0x8
    // Offset: 0x0
    ::FMOD::StringWrapper name;
    // Field size check
    static_assert(sizeof(::FMOD::StringWrapper) == 0x8);
    // public FMOD.Studio.USER_PROPERTY_TYPE type
    // Size: 0x4
    // Offset: 0x8
    ::FMOD::Studio::USER_PROPERTY_TYPE type;
    // Field size check
    static_assert(sizeof(::FMOD::Studio::USER_PROPERTY_TYPE) == 0x4);
    // private FMOD.Studio.Union_IntBoolFloatString value
    // Size: 0xFFFFFFFF
    // Offset: 0x10
    ::FMOD::Studio::Union_IntBoolFloatString value;
    public:
    // Creating value type constructor for type: USER_PROPERTY
    constexpr USER_PROPERTY(::FMOD::StringWrapper name_ = {}, ::FMOD::Studio::USER_PROPERTY_TYPE type_ = {}, ::FMOD::Studio::Union_IntBoolFloatString value_ = {}) noexcept : name{name_}, type{type_}, value{value_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public FMOD.StringWrapper name
    [[deprecated("Use field access instead!")]] ::FMOD::StringWrapper& dyn_name();
    // Get instance field reference: public FMOD.Studio.USER_PROPERTY_TYPE type
    [[deprecated("Use field access instead!")]] ::FMOD::Studio::USER_PROPERTY_TYPE& dyn_type();
    // Get instance field reference: private FMOD.Studio.Union_IntBoolFloatString value
    [[deprecated("Use field access instead!")]] ::FMOD::Studio::Union_IntBoolFloatString& dyn_value();
    // public System.Int32 intValue()
    // Offset: 0xBA0FD0
    int intValue();
    // public System.Boolean boolValue()
    // Offset: 0xBA0FE8
    bool boolValue();
    // public System.Single floatValue()
    // Offset: 0xBA100C
    float floatValue();
    // public System.String stringValue()
    // Offset: 0xBA1028
    ::StringW stringValue();
  }; // FMOD.Studio.USER_PROPERTY
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::Studio::USER_PROPERTY::intValue
// Il2CppName: intValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FMOD::Studio::USER_PROPERTY::*)()>(&FMOD::Studio::USER_PROPERTY::intValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::USER_PROPERTY), "intValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::USER_PROPERTY::boolValue
// Il2CppName: boolValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::Studio::USER_PROPERTY::*)()>(&FMOD::Studio::USER_PROPERTY::boolValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::USER_PROPERTY), "boolValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::USER_PROPERTY::floatValue
// Il2CppName: floatValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (FMOD::Studio::USER_PROPERTY::*)()>(&FMOD::Studio::USER_PROPERTY::floatValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::USER_PROPERTY), "floatValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::USER_PROPERTY::stringValue
// Il2CppName: stringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (FMOD::Studio::USER_PROPERTY::*)()>(&FMOD::Studio::USER_PROPERTY::stringValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::USER_PROPERTY), "stringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
