// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: EVENT_PROPERTY
  struct EVENT_PROPERTY;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::EVENT_PROPERTY, "FMOD.Studio", "EVENT_PROPERTY");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.Studio.EVENT_PROPERTY
  // [TokenAttribute] Offset: FFFFFFFF
  struct EVENT_PROPERTY/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: EVENT_PROPERTY
    constexpr EVENT_PROPERTY(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.Studio.EVENT_PROPERTY CHANNELPRIORITY
    static constexpr const int CHANNELPRIORITY = 0;
    // Get static field: static public FMOD.Studio.EVENT_PROPERTY CHANNELPRIORITY
    static ::FMOD::Studio::EVENT_PROPERTY _get_CHANNELPRIORITY();
    // Set static field: static public FMOD.Studio.EVENT_PROPERTY CHANNELPRIORITY
    static void _set_CHANNELPRIORITY(::FMOD::Studio::EVENT_PROPERTY value);
    // static field const value: static public FMOD.Studio.EVENT_PROPERTY SCHEDULE_DELAY
    static constexpr const int SCHEDULE_DELAY = 1;
    // Get static field: static public FMOD.Studio.EVENT_PROPERTY SCHEDULE_DELAY
    static ::FMOD::Studio::EVENT_PROPERTY _get_SCHEDULE_DELAY();
    // Set static field: static public FMOD.Studio.EVENT_PROPERTY SCHEDULE_DELAY
    static void _set_SCHEDULE_DELAY(::FMOD::Studio::EVENT_PROPERTY value);
    // static field const value: static public FMOD.Studio.EVENT_PROPERTY SCHEDULE_LOOKAHEAD
    static constexpr const int SCHEDULE_LOOKAHEAD = 2;
    // Get static field: static public FMOD.Studio.EVENT_PROPERTY SCHEDULE_LOOKAHEAD
    static ::FMOD::Studio::EVENT_PROPERTY _get_SCHEDULE_LOOKAHEAD();
    // Set static field: static public FMOD.Studio.EVENT_PROPERTY SCHEDULE_LOOKAHEAD
    static void _set_SCHEDULE_LOOKAHEAD(::FMOD::Studio::EVENT_PROPERTY value);
    // static field const value: static public FMOD.Studio.EVENT_PROPERTY MINIMUM_DISTANCE
    static constexpr const int MINIMUM_DISTANCE = 3;
    // Get static field: static public FMOD.Studio.EVENT_PROPERTY MINIMUM_DISTANCE
    static ::FMOD::Studio::EVENT_PROPERTY _get_MINIMUM_DISTANCE();
    // Set static field: static public FMOD.Studio.EVENT_PROPERTY MINIMUM_DISTANCE
    static void _set_MINIMUM_DISTANCE(::FMOD::Studio::EVENT_PROPERTY value);
    // static field const value: static public FMOD.Studio.EVENT_PROPERTY MAXIMUM_DISTANCE
    static constexpr const int MAXIMUM_DISTANCE = 4;
    // Get static field: static public FMOD.Studio.EVENT_PROPERTY MAXIMUM_DISTANCE
    static ::FMOD::Studio::EVENT_PROPERTY _get_MAXIMUM_DISTANCE();
    // Set static field: static public FMOD.Studio.EVENT_PROPERTY MAXIMUM_DISTANCE
    static void _set_MAXIMUM_DISTANCE(::FMOD::Studio::EVENT_PROPERTY value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // FMOD.Studio.EVENT_PROPERTY
  #pragma pack(pop)
  static check_size<sizeof(EVENT_PROPERTY), 0 + sizeof(int)> __FMOD_Studio_EVENT_PROPERTYSizeCheck;
  static_assert(sizeof(EVENT_PROPERTY) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
