// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
  // Forward declaring type: ATTRIBUTES_3D
  struct ATTRIBUTES_3D;
  // Forward declaring type: ChannelGroup
  struct ChannelGroup;
}
// Forward declaring namespace: FMOD::Studio
namespace FMOD::Studio {
  // Forward declaring type: EventDescription
  struct EventDescription;
  // Forward declaring type: EVENT_PROPERTY
  struct EVENT_PROPERTY;
  // Forward declaring type: STOP_MODE
  struct STOP_MODE;
  // Forward declaring type: PLAYBACK_STATE
  struct PLAYBACK_STATE;
  // Forward declaring type: ParameterInstance
  struct ParameterInstance;
  // Forward declaring type: EVENT_CALLBACK
  class EVENT_CALLBACK;
  // Forward declaring type: EVENT_CALLBACK_TYPE
  struct EVENT_CALLBACK_TYPE;
}
// Completed forward declares
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: EventInstance
  struct EventInstance;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::EventInstance, "FMOD.Studio", "EventInstance");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Studio.EventInstance
  // [TokenAttribute] Offset: FFFFFFFF
  struct EventInstance/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: EventInstance
    constexpr EventInstance(::System::IntPtr handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return handle;
    }
    // Get instance field reference: public System.IntPtr handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_handle();
    // public FMOD.RESULT getDescription(out FMOD.Studio.EventDescription description)
    // Offset: 0xBBE168
    ::FMOD::RESULT getDescription(ByRef<::FMOD::Studio::EventDescription> description);
    // public FMOD.RESULT getVolume(out System.Single volume, out System.Single finalvolume)
    // Offset: 0xBBE170
    ::FMOD::RESULT getVolume(ByRef<float> volume, ByRef<float> finalvolume);
    // public FMOD.RESULT setVolume(System.Single volume)
    // Offset: 0xBBE178
    ::FMOD::RESULT setVolume(float volume);
    // public FMOD.RESULT getPitch(out System.Single pitch, out System.Single finalpitch)
    // Offset: 0xBBE180
    ::FMOD::RESULT getPitch(ByRef<float> pitch, ByRef<float> finalpitch);
    // public FMOD.RESULT setPitch(System.Single pitch)
    // Offset: 0xBBE188
    ::FMOD::RESULT setPitch(float pitch);
    // public FMOD.RESULT get3DAttributes(out FMOD.ATTRIBUTES_3D attributes)
    // Offset: 0xBBE190
    ::FMOD::RESULT get3DAttributes(ByRef<::FMOD::ATTRIBUTES_3D> attributes);
    // public FMOD.RESULT set3DAttributes(FMOD.ATTRIBUTES_3D attributes)
    // Offset: 0xBBE198
    ::FMOD::RESULT set3DAttributes(::FMOD::ATTRIBUTES_3D attributes);
    // public FMOD.RESULT getListenerMask(out System.UInt32 mask)
    // Offset: 0xBBE1D4
    ::FMOD::RESULT getListenerMask(ByRef<uint> mask);
    // public FMOD.RESULT setListenerMask(System.UInt32 mask)
    // Offset: 0xBBE1DC
    ::FMOD::RESULT setListenerMask(uint mask);
    // public FMOD.RESULT getProperty(FMOD.Studio.EVENT_PROPERTY index, out System.Single value)
    // Offset: 0xBBE1E4
    ::FMOD::RESULT getProperty(::FMOD::Studio::EVENT_PROPERTY index, ByRef<float> value);
    // public FMOD.RESULT setProperty(FMOD.Studio.EVENT_PROPERTY index, System.Single value)
    // Offset: 0xBBE1EC
    ::FMOD::RESULT setProperty(::FMOD::Studio::EVENT_PROPERTY index, float value);
    // public FMOD.RESULT getReverbLevel(System.Int32 index, out System.Single level)
    // Offset: 0xBBE1F4
    ::FMOD::RESULT getReverbLevel(int index, ByRef<float> level);
    // public FMOD.RESULT setReverbLevel(System.Int32 index, System.Single level)
    // Offset: 0xBBE1FC
    ::FMOD::RESULT setReverbLevel(int index, float level);
    // public FMOD.RESULT getPaused(out System.Boolean paused)
    // Offset: 0xBBE204
    ::FMOD::RESULT getPaused(ByRef<bool> paused);
    // public FMOD.RESULT setPaused(System.Boolean paused)
    // Offset: 0xBBE20C
    ::FMOD::RESULT setPaused(bool paused);
    // public FMOD.RESULT start()
    // Offset: 0xBBE218
    ::FMOD::RESULT start();
    // public FMOD.RESULT stop(FMOD.Studio.STOP_MODE mode)
    // Offset: 0xBBE220
    ::FMOD::RESULT stop(::FMOD::Studio::STOP_MODE mode);
    // public FMOD.RESULT getTimelinePosition(out System.Int32 position)
    // Offset: 0xBBE228
    ::FMOD::RESULT getTimelinePosition(ByRef<int> position);
    // public FMOD.RESULT setTimelinePosition(System.Int32 position)
    // Offset: 0xBBE230
    ::FMOD::RESULT setTimelinePosition(int position);
    // public FMOD.RESULT getPlaybackState(out FMOD.Studio.PLAYBACK_STATE state)
    // Offset: 0xBBE238
    ::FMOD::RESULT getPlaybackState(ByRef<::FMOD::Studio::PLAYBACK_STATE> state);
    // public FMOD.RESULT getChannelGroup(out FMOD.ChannelGroup group)
    // Offset: 0xBBE240
    ::FMOD::RESULT getChannelGroup(ByRef<::FMOD::ChannelGroup> group);
    // public FMOD.RESULT release()
    // Offset: 0xBBE248
    ::FMOD::RESULT release();
    // public FMOD.RESULT isVirtual(out System.Boolean virtualState)
    // Offset: 0xBBE250
    ::FMOD::RESULT isVirtual(ByRef<bool> virtualState);
    // public FMOD.RESULT getParameter(System.String name, out FMOD.Studio.ParameterInstance instance)
    // Offset: 0xBBE258
    ::FMOD::RESULT getParameter(::StringW name, ByRef<::FMOD::Studio::ParameterInstance> instance);
    // public FMOD.RESULT getParameterCount(out System.Int32 count)
    // Offset: 0xBBE260
    ::FMOD::RESULT getParameterCount(ByRef<int> count);
    // public FMOD.RESULT getParameterByIndex(System.Int32 index, out FMOD.Studio.ParameterInstance instance)
    // Offset: 0xBBE268
    ::FMOD::RESULT getParameterByIndex(int index, ByRef<::FMOD::Studio::ParameterInstance> instance);
    // public FMOD.RESULT getParameterValue(System.String name, out System.Single value, out System.Single finalvalue)
    // Offset: 0xBBE270
    ::FMOD::RESULT getParameterValue(::StringW name, ByRef<float> value, ByRef<float> finalvalue);
    // public FMOD.RESULT setParameterValue(System.String name, System.Single value)
    // Offset: 0xBBE278
    ::FMOD::RESULT setParameterValue(::StringW name, float value);
    // public FMOD.RESULT getParameterValueByIndex(System.Int32 index, out System.Single value, out System.Single finalvalue)
    // Offset: 0xBBE280
    ::FMOD::RESULT getParameterValueByIndex(int index, ByRef<float> value, ByRef<float> finalvalue);
    // public FMOD.RESULT setParameterValueByIndex(System.Int32 index, System.Single value)
    // Offset: 0xBBE288
    ::FMOD::RESULT setParameterValueByIndex(int index, float value);
    // public FMOD.RESULT setParameterValuesByIndices(System.Int32[] indices, System.Single[] values, System.Int32 count)
    // Offset: 0xBBE290
    ::FMOD::RESULT setParameterValuesByIndices(::ArrayW<int> indices, ::ArrayW<float> values, int count);
    // public FMOD.RESULT triggerCue()
    // Offset: 0xBBE298
    ::FMOD::RESULT triggerCue();
    // public FMOD.RESULT setCallback(FMOD.Studio.EVENT_CALLBACK callback, FMOD.Studio.EVENT_CALLBACK_TYPE callbackmask)
    // Offset: 0xBBE2A0
    ::FMOD::RESULT setCallback(::FMOD::Studio::EVENT_CALLBACK* callback, ::FMOD::Studio::EVENT_CALLBACK_TYPE callbackmask);
    // public FMOD.RESULT getUserData(out System.IntPtr userdata)
    // Offset: 0xBBE2A8
    ::FMOD::RESULT getUserData(ByRef<::System::IntPtr> userdata);
    // public FMOD.RESULT setUserData(System.IntPtr userdata)
    // Offset: 0xBBE2B0
    ::FMOD::RESULT setUserData(::System::IntPtr userdata);
    // static private System.Boolean FMOD_Studio_EventInstance_IsValid(System.IntPtr _event)
    // Offset: 0x22ED750
    static bool FMOD_Studio_EventInstance_IsValid(::System::IntPtr _event);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetDescription(System.IntPtr _event, out System.IntPtr description)
    // Offset: 0x22EB9D4
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetDescription(::System::IntPtr _event, ByRef<::System::IntPtr> description);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetVolume(System.IntPtr _event, out System.Single volume, out System.Single finalvolume)
    // Offset: 0x22EBA88
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetVolume(::System::IntPtr _event, ByRef<float> volume, ByRef<float> finalvolume);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_SetVolume(System.IntPtr _event, System.Single volume)
    // Offset: 0x22EBB44
    static ::FMOD::RESULT FMOD_Studio_EventInstance_SetVolume(::System::IntPtr _event, float volume);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetPitch(System.IntPtr _event, out System.Single pitch, out System.Single finalpitch)
    // Offset: 0x22EBBF8
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetPitch(::System::IntPtr _event, ByRef<float> pitch, ByRef<float> finalpitch);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_SetPitch(System.IntPtr _event, System.Single pitch)
    // Offset: 0x22EBCB4
    static ::FMOD::RESULT FMOD_Studio_EventInstance_SetPitch(::System::IntPtr _event, float pitch);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_Get3DAttributes(System.IntPtr _event, out FMOD.ATTRIBUTES_3D attributes)
    // Offset: 0x22EBD68
    static ::FMOD::RESULT FMOD_Studio_EventInstance_Get3DAttributes(::System::IntPtr _event, ByRef<::FMOD::ATTRIBUTES_3D> attributes);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_Set3DAttributes(System.IntPtr _event, ref FMOD.ATTRIBUTES_3D attributes)
    // Offset: 0x22EBE1C
    static ::FMOD::RESULT FMOD_Studio_EventInstance_Set3DAttributes(::System::IntPtr _event, ByRef<::FMOD::ATTRIBUTES_3D> attributes);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetListenerMask(System.IntPtr _event, out System.UInt32 mask)
    // Offset: 0x22EBED0
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetListenerMask(::System::IntPtr _event, ByRef<uint> mask);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_SetListenerMask(System.IntPtr _event, System.UInt32 mask)
    // Offset: 0x22EBF84
    static ::FMOD::RESULT FMOD_Studio_EventInstance_SetListenerMask(::System::IntPtr _event, uint mask);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetProperty(System.IntPtr _event, FMOD.Studio.EVENT_PROPERTY index, out System.Single value)
    // Offset: 0x22EC038
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetProperty(::System::IntPtr _event, ::FMOD::Studio::EVENT_PROPERTY index, ByRef<float> value);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_SetProperty(System.IntPtr _event, FMOD.Studio.EVENT_PROPERTY index, System.Single value)
    // Offset: 0x22EC0F4
    static ::FMOD::RESULT FMOD_Studio_EventInstance_SetProperty(::System::IntPtr _event, ::FMOD::Studio::EVENT_PROPERTY index, float value);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetReverbLevel(System.IntPtr _event, System.Int32 index, out System.Single level)
    // Offset: 0x22EC1B8
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetReverbLevel(::System::IntPtr _event, int index, ByRef<float> level);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_SetReverbLevel(System.IntPtr _event, System.Int32 index, System.Single level)
    // Offset: 0x22EC274
    static ::FMOD::RESULT FMOD_Studio_EventInstance_SetReverbLevel(::System::IntPtr _event, int index, float level);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetPaused(System.IntPtr _event, out System.Boolean paused)
    // Offset: 0x22EC338
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetPaused(::System::IntPtr _event, ByRef<bool> paused);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_SetPaused(System.IntPtr _event, System.Boolean paused)
    // Offset: 0x22EC404
    static ::FMOD::RESULT FMOD_Studio_EventInstance_SetPaused(::System::IntPtr _event, bool paused);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_Start(System.IntPtr _event)
    // Offset: 0x22EC4B8
    static ::FMOD::RESULT FMOD_Studio_EventInstance_Start(::System::IntPtr _event);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_Stop(System.IntPtr _event, FMOD.Studio.STOP_MODE mode)
    // Offset: 0x22EC55C
    static ::FMOD::RESULT FMOD_Studio_EventInstance_Stop(::System::IntPtr _event, ::FMOD::Studio::STOP_MODE mode);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetTimelinePosition(System.IntPtr _event, out System.Int32 position)
    // Offset: 0x22EC610
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetTimelinePosition(::System::IntPtr _event, ByRef<int> position);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_SetTimelinePosition(System.IntPtr _event, System.Int32 position)
    // Offset: 0x22EC6C4
    static ::FMOD::RESULT FMOD_Studio_EventInstance_SetTimelinePosition(::System::IntPtr _event, int position);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetPlaybackState(System.IntPtr _event, out FMOD.Studio.PLAYBACK_STATE state)
    // Offset: 0x22EC778
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetPlaybackState(::System::IntPtr _event, ByRef<::FMOD::Studio::PLAYBACK_STATE> state);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetChannelGroup(System.IntPtr _event, out System.IntPtr group)
    // Offset: 0x22EC82C
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetChannelGroup(::System::IntPtr _event, ByRef<::System::IntPtr> group);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_Release(System.IntPtr _event)
    // Offset: 0x22EC8E0
    static ::FMOD::RESULT FMOD_Studio_EventInstance_Release(::System::IntPtr _event);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_IsVirtual(System.IntPtr _event, out System.Boolean virtualState)
    // Offset: 0x22EC984
    static ::FMOD::RESULT FMOD_Studio_EventInstance_IsVirtual(::System::IntPtr _event, ByRef<bool> virtualState);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetParameter(System.IntPtr _event, System.Byte[] name, out System.IntPtr parameter)
    // Offset: 0x22ECB98
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetParameter(::System::IntPtr _event, ::ArrayW<uint8_t> name, ByRef<::System::IntPtr> parameter);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetParameterByIndex(System.IntPtr _event, System.Int32 index, out System.IntPtr parameter)
    // Offset: 0x22ECD10
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetParameterByIndex(::System::IntPtr _event, int index, ByRef<::System::IntPtr> parameter);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetParameterCount(System.IntPtr _event, out System.Int32 count)
    // Offset: 0x22ECC5C
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetParameterCount(::System::IntPtr _event, ByRef<int> count);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetParameterValue(System.IntPtr _event, System.Byte[] name, out System.Single value, out System.Single finalvalue)
    // Offset: 0x22ECF28
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetParameterValue(::System::IntPtr _event, ::ArrayW<uint8_t> name, ByRef<float> value, ByRef<float> finalvalue);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_SetParameterValue(System.IntPtr _event, System.Byte[] name, System.Single value)
    // Offset: 0x22ED150
    static ::FMOD::RESULT FMOD_Studio_EventInstance_SetParameterValue(::System::IntPtr _event, ::ArrayW<uint8_t> name, float value);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetParameterValueByIndex(System.IntPtr _event, System.Int32 index, out System.Single value, out System.Single finalvalue)
    // Offset: 0x22ED21C
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetParameterValueByIndex(::System::IntPtr _event, int index, ByRef<float> value, ByRef<float> finalvalue);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_SetParameterValueByIndex(System.IntPtr _event, System.Int32 index, System.Single value)
    // Offset: 0x22ED2E8
    static ::FMOD::RESULT FMOD_Studio_EventInstance_SetParameterValueByIndex(::System::IntPtr _event, int index, float value);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_SetParameterValuesByIndices(System.IntPtr _event, System.Int32[] indices, System.Single[] values, System.Int32 count)
    // Offset: 0x22ED3AC
    static ::FMOD::RESULT FMOD_Studio_EventInstance_SetParameterValuesByIndices(::System::IntPtr _event, ::ArrayW<int> indices, ::ArrayW<float> values, int count);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_TriggerCue(System.IntPtr _event)
    // Offset: 0x22ED488
    static ::FMOD::RESULT FMOD_Studio_EventInstance_TriggerCue(::System::IntPtr _event);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_SetCallback(System.IntPtr _event, FMOD.Studio.EVENT_CALLBACK callback, FMOD.Studio.EVENT_CALLBACK_TYPE callbackmask)
    // Offset: 0x22ED52C
    static ::FMOD::RESULT FMOD_Studio_EventInstance_SetCallback(::System::IntPtr _event, ::FMOD::Studio::EVENT_CALLBACK* callback, ::FMOD::Studio::EVENT_CALLBACK_TYPE callbackmask);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_GetUserData(System.IntPtr _event, out System.IntPtr userdata)
    // Offset: 0x22ED5F0
    static ::FMOD::RESULT FMOD_Studio_EventInstance_GetUserData(::System::IntPtr _event, ByRef<::System::IntPtr> userdata);
    // static private FMOD.RESULT FMOD_Studio_EventInstance_SetUserData(System.IntPtr _event, System.IntPtr userdata)
    // Offset: 0x22ED6A4
    static ::FMOD::RESULT FMOD_Studio_EventInstance_SetUserData(::System::IntPtr _event, ::System::IntPtr userdata);
    // public System.Boolean hasHandle()
    // Offset: 0xBBE2B8
    bool hasHandle();
    // public System.Void clearHandle()
    // Offset: 0xBBE2C0
    void clearHandle();
    // public System.Boolean isValid()
    // Offset: 0xBBE304
    bool isValid();
  }; // FMOD.Studio.EventInstance
  #pragma pack(pop)
  static check_size<sizeof(EventInstance), 0 + sizeof(::System::IntPtr)> __FMOD_Studio_EventInstanceSizeCheck;
  static_assert(sizeof(EventInstance) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getDescription
// Il2CppName: getDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(ByRef<::FMOD::Studio::EventDescription>)>(&FMOD::Studio::EventInstance::getDescription)> {
  static const MethodInfo* get() {
    static auto* description = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EventDescription")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{description});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getVolume
// Il2CppName: getVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(ByRef<float>, ByRef<float>)>(&FMOD::Studio::EventInstance::getVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* finalvolume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume, finalvolume});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::setVolume
// Il2CppName: setVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(float)>(&FMOD::Studio::EventInstance::setVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "setVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getPitch
// Il2CppName: getPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(ByRef<float>, ByRef<float>)>(&FMOD::Studio::EventInstance::getPitch)> {
  static const MethodInfo* get() {
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* finalpitch = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitch, finalpitch});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::setPitch
// Il2CppName: setPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(float)>(&FMOD::Studio::EventInstance::setPitch)> {
  static const MethodInfo* get() {
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "setPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitch});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::get3DAttributes
// Il2CppName: get3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(ByRef<::FMOD::ATTRIBUTES_3D>)>(&FMOD::Studio::EventInstance::get3DAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::GetClassFromName("FMOD", "ATTRIBUTES_3D")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "get3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::set3DAttributes
// Il2CppName: set3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(::FMOD::ATTRIBUTES_3D)>(&FMOD::Studio::EventInstance::set3DAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::GetClassFromName("FMOD", "ATTRIBUTES_3D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "set3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getListenerMask
// Il2CppName: getListenerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(ByRef<uint>)>(&FMOD::Studio::EventInstance::getListenerMask)> {
  static const MethodInfo* get() {
    static auto* mask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getListenerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mask});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::setListenerMask
// Il2CppName: setListenerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(uint)>(&FMOD::Studio::EventInstance::setListenerMask)> {
  static const MethodInfo* get() {
    static auto* mask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "setListenerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mask});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getProperty
// Il2CppName: getProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(::FMOD::Studio::EVENT_PROPERTY, ByRef<float>)>(&FMOD::Studio::EventInstance::getProperty)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EVENT_PROPERTY")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::setProperty
// Il2CppName: setProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(::FMOD::Studio::EVENT_PROPERTY, float)>(&FMOD::Studio::EventInstance::setProperty)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EVENT_PROPERTY")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "setProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getReverbLevel
// Il2CppName: getReverbLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(int, ByRef<float>)>(&FMOD::Studio::EventInstance::getReverbLevel)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getReverbLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, level});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::setReverbLevel
// Il2CppName: setReverbLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(int, float)>(&FMOD::Studio::EventInstance::setReverbLevel)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "setReverbLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, level});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getPaused
// Il2CppName: getPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(ByRef<bool>)>(&FMOD::Studio::EventInstance::getPaused)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::setPaused
// Il2CppName: setPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(bool)>(&FMOD::Studio::EventInstance::setPaused)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "setPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::start
// Il2CppName: start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)()>(&FMOD::Studio::EventInstance::start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::stop
// Il2CppName: stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(::FMOD::Studio::STOP_MODE)>(&FMOD::Studio::EventInstance::stop)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "STOP_MODE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getTimelinePosition
// Il2CppName: getTimelinePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(ByRef<int>)>(&FMOD::Studio::EventInstance::getTimelinePosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getTimelinePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::setTimelinePosition
// Il2CppName: setTimelinePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(int)>(&FMOD::Studio::EventInstance::setTimelinePosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "setTimelinePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getPlaybackState
// Il2CppName: getPlaybackState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(ByRef<::FMOD::Studio::PLAYBACK_STATE>)>(&FMOD::Studio::EventInstance::getPlaybackState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "PLAYBACK_STATE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getPlaybackState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getChannelGroup
// Il2CppName: getChannelGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(ByRef<::FMOD::ChannelGroup>)>(&FMOD::Studio::EventInstance::getChannelGroup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("FMOD", "ChannelGroup")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getChannelGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::release
// Il2CppName: release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)()>(&FMOD::Studio::EventInstance::release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::isVirtual
// Il2CppName: isVirtual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(ByRef<bool>)>(&FMOD::Studio::EventInstance::isVirtual)> {
  static const MethodInfo* get() {
    static auto* virtualState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "isVirtual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{virtualState});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getParameter
// Il2CppName: getParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(::StringW, ByRef<::FMOD::Studio::ParameterInstance>)>(&FMOD::Studio::EventInstance::getParameter)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* instance = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "ParameterInstance")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, instance});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getParameterCount
// Il2CppName: getParameterCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(ByRef<int>)>(&FMOD::Studio::EventInstance::getParameterCount)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getParameterCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getParameterByIndex
// Il2CppName: getParameterByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(int, ByRef<::FMOD::Studio::ParameterInstance>)>(&FMOD::Studio::EventInstance::getParameterByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* instance = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "ParameterInstance")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getParameterByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, instance});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getParameterValue
// Il2CppName: getParameterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(::StringW, ByRef<float>, ByRef<float>)>(&FMOD::Studio::EventInstance::getParameterValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* finalvalue = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getParameterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value, finalvalue});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::setParameterValue
// Il2CppName: setParameterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(::StringW, float)>(&FMOD::Studio::EventInstance::setParameterValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "setParameterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getParameterValueByIndex
// Il2CppName: getParameterValueByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(int, ByRef<float>, ByRef<float>)>(&FMOD::Studio::EventInstance::getParameterValueByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* finalvalue = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getParameterValueByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value, finalvalue});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::setParameterValueByIndex
// Il2CppName: setParameterValueByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(int, float)>(&FMOD::Studio::EventInstance::setParameterValueByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "setParameterValueByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::setParameterValuesByIndices
// Il2CppName: setParameterValuesByIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(::ArrayW<int>, ::ArrayW<float>, int)>(&FMOD::Studio::EventInstance::setParameterValuesByIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "setParameterValuesByIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices, values, count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::triggerCue
// Il2CppName: triggerCue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)()>(&FMOD::Studio::EventInstance::triggerCue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "triggerCue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::setCallback
// Il2CppName: setCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(::FMOD::Studio::EVENT_CALLBACK*, ::FMOD::Studio::EVENT_CALLBACK_TYPE)>(&FMOD::Studio::EventInstance::setCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EVENT_CALLBACK")->byval_arg;
    static auto* callbackmask = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EVENT_CALLBACK_TYPE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "setCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, callbackmask});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::getUserData
// Il2CppName: getUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(ByRef<::System::IntPtr>)>(&FMOD::Studio::EventInstance::getUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "getUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::setUserData
// Il2CppName: setUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventInstance::*)(::System::IntPtr)>(&FMOD::Studio::EventInstance::setUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "setUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_IsValid
// Il2CppName: FMOD_Studio_EventInstance_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_IsValid)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetDescription
// Il2CppName: FMOD_Studio_EventInstance_GetDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetDescription)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* description = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, description});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetVolume
// Il2CppName: FMOD_Studio_EventInstance_GetVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>, ByRef<float>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetVolume)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* finalvolume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, volume, finalvolume});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetVolume
// Il2CppName: FMOD_Studio_EventInstance_SetVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetVolume)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_SetVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, volume});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetPitch
// Il2CppName: FMOD_Studio_EventInstance_GetPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>, ByRef<float>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetPitch)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* finalpitch = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, pitch, finalpitch});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetPitch
// Il2CppName: FMOD_Studio_EventInstance_SetPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetPitch)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_SetPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, pitch});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_Get3DAttributes
// Il2CppName: FMOD_Studio_EventInstance_Get3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::ATTRIBUTES_3D>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_Get3DAttributes)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* attributes = &::il2cpp_utils::GetClassFromName("FMOD", "ATTRIBUTES_3D")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_Get3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, attributes});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_Set3DAttributes
// Il2CppName: FMOD_Studio_EventInstance_Set3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::ATTRIBUTES_3D>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_Set3DAttributes)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* attributes = &::il2cpp_utils::GetClassFromName("FMOD", "ATTRIBUTES_3D")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_Set3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, attributes});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetListenerMask
// Il2CppName: FMOD_Studio_EventInstance_GetListenerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetListenerMask)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetListenerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, mask});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetListenerMask
// Il2CppName: FMOD_Studio_EventInstance_SetListenerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetListenerMask)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_SetListenerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, mask});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetProperty
// Il2CppName: FMOD_Studio_EventInstance_GetProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::Studio::EVENT_PROPERTY, ByRef<float>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetProperty)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EVENT_PROPERTY")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, index, value});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetProperty
// Il2CppName: FMOD_Studio_EventInstance_SetProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::Studio::EVENT_PROPERTY, float)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetProperty)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EVENT_PROPERTY")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_SetProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, index, value});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetReverbLevel
// Il2CppName: FMOD_Studio_EventInstance_GetReverbLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<float>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetReverbLevel)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetReverbLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, index, level});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetReverbLevel
// Il2CppName: FMOD_Studio_EventInstance_SetReverbLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, float)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetReverbLevel)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_SetReverbLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, index, level});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetPaused
// Il2CppName: FMOD_Studio_EventInstance_GetPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetPaused)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, paused});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetPaused
// Il2CppName: FMOD_Studio_EventInstance_SetPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetPaused)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_SetPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, paused});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_Start
// Il2CppName: FMOD_Studio_EventInstance_Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_Start)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_Stop
// Il2CppName: FMOD_Studio_EventInstance_Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::Studio::STOP_MODE)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_Stop)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "STOP_MODE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, mode});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetTimelinePosition
// Il2CppName: FMOD_Studio_EventInstance_GetTimelinePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetTimelinePosition)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetTimelinePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, position});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetTimelinePosition
// Il2CppName: FMOD_Studio_EventInstance_SetTimelinePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetTimelinePosition)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_SetTimelinePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, position});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetPlaybackState
// Il2CppName: FMOD_Studio_EventInstance_GetPlaybackState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::Studio::PLAYBACK_STATE>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetPlaybackState)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "PLAYBACK_STATE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetPlaybackState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, state});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetChannelGroup
// Il2CppName: FMOD_Studio_EventInstance_GetChannelGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetChannelGroup)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* group = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetChannelGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, group});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_Release
// Il2CppName: FMOD_Studio_EventInstance_Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_Release)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_IsVirtual
// Il2CppName: FMOD_Studio_EventInstance_IsVirtual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_IsVirtual)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* virtualState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_IsVirtual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, virtualState});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetParameter
// Il2CppName: FMOD_Studio_EventInstance_GetParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ByRef<::System::IntPtr>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetParameter)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* parameter = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, name, parameter});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetParameterByIndex
// Il2CppName: FMOD_Studio_EventInstance_GetParameterByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::System::IntPtr>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetParameterByIndex)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parameter = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetParameterByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, index, parameter});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetParameterCount
// Il2CppName: FMOD_Studio_EventInstance_GetParameterCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetParameterCount)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetParameterCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetParameterValue
// Il2CppName: FMOD_Studio_EventInstance_GetParameterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ByRef<float>, ByRef<float>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetParameterValue)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* finalvalue = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetParameterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, name, value, finalvalue});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetParameterValue
// Il2CppName: FMOD_Studio_EventInstance_SetParameterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, float)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetParameterValue)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_SetParameterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, name, value});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetParameterValueByIndex
// Il2CppName: FMOD_Studio_EventInstance_GetParameterValueByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<float>, ByRef<float>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetParameterValueByIndex)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* finalvalue = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetParameterValueByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, index, value, finalvalue});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetParameterValueByIndex
// Il2CppName: FMOD_Studio_EventInstance_SetParameterValueByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, float)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetParameterValueByIndex)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_SetParameterValueByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, index, value});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetParameterValuesByIndices
// Il2CppName: FMOD_Studio_EventInstance_SetParameterValuesByIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<int>, ::ArrayW<float>, int)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetParameterValuesByIndices)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_SetParameterValuesByIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, indices, values, count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_TriggerCue
// Il2CppName: FMOD_Studio_EventInstance_TriggerCue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_TriggerCue)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_TriggerCue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetCallback
// Il2CppName: FMOD_Studio_EventInstance_SetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::Studio::EVENT_CALLBACK*, ::FMOD::Studio::EVENT_CALLBACK_TYPE)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetCallback)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EVENT_CALLBACK")->byval_arg;
    static auto* callbackmask = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EVENT_CALLBACK_TYPE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_SetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, callback, callbackmask});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetUserData
// Il2CppName: FMOD_Studio_EventInstance_GetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_GetUserData)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_GetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetUserData
// Il2CppName: FMOD_Studio_EventInstance_SetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::Studio::EventInstance::FMOD_Studio_EventInstance_SetUserData)> {
  static const MethodInfo* get() {
    static auto* _event = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "FMOD_Studio_EventInstance_SetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_event, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::hasHandle
// Il2CppName: hasHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::Studio::EventInstance::*)()>(&FMOD::Studio::EventInstance::hasHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "hasHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::clearHandle
// Il2CppName: clearHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::Studio::EventInstance::*)()>(&FMOD::Studio::EventInstance::clearHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "clearHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventInstance::isValid
// Il2CppName: isValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::Studio::EventInstance::*)()>(&FMOD::Studio::EventInstance::isValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventInstance), "isValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
