// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: FMOD.Studio.Bank
#include "FMOD/Studio/Bank.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
  // Forward declaring type: INITFLAGS
  struct INITFLAGS;
  // Forward declaring type: System
  struct System;
  // Forward declaring type: ATTRIBUTES_3D
  struct ATTRIBUTES_3D;
}
// Forward declaring namespace: FMOD::Studio
namespace FMOD::Studio {
  // Forward declaring type: ADVANCEDSETTINGS
  struct ADVANCEDSETTINGS;
  // Forward declaring type: INITFLAGS
  struct INITFLAGS;
  // Skipping declaration: EventDescription because it is already included!
  // Skipping declaration: Bus because it is already included!
  // Skipping declaration: VCA because it is already included!
  // Forward declaring type: CPU_USAGE
  struct CPU_USAGE;
  // Forward declaring type: SOUND_INFO
  struct SOUND_INFO;
  // Forward declaring type: LOAD_BANK_FLAGS
  struct LOAD_BANK_FLAGS;
  // Forward declaring type: BANK_INFO
  struct BANK_INFO;
  // Forward declaring type: COMMANDCAPTURE_FLAGS
  struct COMMANDCAPTURE_FLAGS;
  // Forward declaring type: COMMANDREPLAY_FLAGS
  struct COMMANDREPLAY_FLAGS;
  // Forward declaring type: CommandReplay
  struct CommandReplay;
  // Forward declaring type: BUFFER_USAGE
  struct BUFFER_USAGE;
  // Forward declaring type: SYSTEM_CALLBACK
  class SYSTEM_CALLBACK;
  // Forward declaring type: SYSTEM_CALLBACK_TYPE
  struct SYSTEM_CALLBACK_TYPE;
  // Forward declaring type: LOAD_MEMORY_MODE
  struct LOAD_MEMORY_MODE;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Guid
  struct Guid;
}
// Completed forward declares
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: System
  struct System;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::System, "FMOD.Studio", "System");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Studio.System
  // [TokenAttribute] Offset: FFFFFFFF
  struct System/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: System
    constexpr System(::System::IntPtr handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return handle;
    }
    // Get instance field reference: public System.IntPtr handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_handle();
    // static public FMOD.RESULT create(out FMOD.Studio.System studiosystem)
    // Offset: 0x15C9CA8
    static ::FMOD::RESULT create(ByRef<::FMOD::Studio::System> studiosystem);
    // public FMOD.RESULT setAdvancedSettings(FMOD.Studio.ADVANCEDSETTINGS settings)
    // Offset: 0xBA0C80
    ::FMOD::RESULT setAdvancedSettings(::FMOD::Studio::ADVANCEDSETTINGS settings);
    // public FMOD.RESULT getAdvancedSettings(out FMOD.Studio.ADVANCEDSETTINGS settings)
    // Offset: 0xBA0CB4
    ::FMOD::RESULT getAdvancedSettings(ByRef<::FMOD::Studio::ADVANCEDSETTINGS> settings);
    // public FMOD.RESULT initialize(System.Int32 maxchannels, FMOD.Studio.INITFLAGS studioFlags, FMOD.INITFLAGS flags, System.IntPtr extradriverdata)
    // Offset: 0xBA0CBC
    ::FMOD::RESULT initialize(int maxchannels, ::FMOD::Studio::INITFLAGS studioFlags, ::FMOD::INITFLAGS flags, ::System::IntPtr extradriverdata);
    // public FMOD.RESULT release()
    // Offset: 0xBA0CC4
    ::FMOD::RESULT release();
    // public FMOD.RESULT update()
    // Offset: 0xBA0CCC
    ::FMOD::RESULT update();
    // public FMOD.RESULT getLowLevelSystem(out FMOD.System system)
    // Offset: 0xBA0CD4
    ::FMOD::RESULT getLowLevelSystem(ByRef<::FMOD::System> system);
    // public FMOD.RESULT getEvent(System.String path, out FMOD.Studio.EventDescription _event)
    // Offset: 0xBA0CDC
    ::FMOD::RESULT getEvent(::StringW path, ByRef<::FMOD::Studio::EventDescription> _event);
    // public FMOD.RESULT getBus(System.String path, out FMOD.Studio.Bus bus)
    // Offset: 0xBA0CE4
    ::FMOD::RESULT getBus(::StringW path, ByRef<::FMOD::Studio::Bus> bus);
    // public FMOD.RESULT getVCA(System.String path, out FMOD.Studio.VCA vca)
    // Offset: 0xBA0CEC
    ::FMOD::RESULT getVCA(::StringW path, ByRef<::FMOD::Studio::VCA> vca);
    // public FMOD.RESULT getBank(System.String path, out FMOD.Studio.Bank bank)
    // Offset: 0xBA0CF4
    ::FMOD::RESULT getBank(::StringW path, ByRef<::FMOD::Studio::Bank> bank);
    // public FMOD.RESULT getEventByID(System.Guid guid, out FMOD.Studio.EventDescription _event)
    // Offset: 0xBA0CFC
    ::FMOD::RESULT getEventByID(::System::Guid guid, ByRef<::FMOD::Studio::EventDescription> _event);
    // public FMOD.RESULT getBusByID(System.Guid guid, out FMOD.Studio.Bus bus)
    // Offset: 0xBA0D28
    ::FMOD::RESULT getBusByID(::System::Guid guid, ByRef<::FMOD::Studio::Bus> bus);
    // public FMOD.RESULT getVCAByID(System.Guid guid, out FMOD.Studio.VCA vca)
    // Offset: 0xBA0D54
    ::FMOD::RESULT getVCAByID(::System::Guid guid, ByRef<::FMOD::Studio::VCA> vca);
    // public FMOD.RESULT getBankByID(System.Guid guid, out FMOD.Studio.Bank bank)
    // Offset: 0xBA0D80
    ::FMOD::RESULT getBankByID(::System::Guid guid, ByRef<::FMOD::Studio::Bank> bank);
    // public FMOD.RESULT getSoundInfo(System.String key, out FMOD.Studio.SOUND_INFO info)
    // Offset: 0xBA0DAC
    ::FMOD::RESULT getSoundInfo(::StringW key, ByRef<::FMOD::Studio::SOUND_INFO> info);
    // public FMOD.RESULT lookupID(System.String path, out System.Guid guid)
    // Offset: 0xBA0DB4
    ::FMOD::RESULT lookupID(::StringW path, ByRef<::System::Guid> guid);
    // public FMOD.RESULT lookupPath(System.Guid guid, out System.String path)
    // Offset: 0xBA0DBC
    ::FMOD::RESULT lookupPath(::System::Guid guid, ByRef<::StringW> path);
    // public FMOD.RESULT getNumListeners(out System.Int32 numlisteners)
    // Offset: 0xBA0DC4
    ::FMOD::RESULT getNumListeners(ByRef<int> numlisteners);
    // public FMOD.RESULT setNumListeners(System.Int32 numlisteners)
    // Offset: 0xBA0DCC
    ::FMOD::RESULT setNumListeners(int numlisteners);
    // public FMOD.RESULT getListenerAttributes(System.Int32 listener, out FMOD.ATTRIBUTES_3D attributes)
    // Offset: 0xBA0DD4
    ::FMOD::RESULT getListenerAttributes(int listener, ByRef<::FMOD::ATTRIBUTES_3D> attributes);
    // public FMOD.RESULT setListenerAttributes(System.Int32 listener, FMOD.ATTRIBUTES_3D attributes)
    // Offset: 0xBA0DDC
    ::FMOD::RESULT setListenerAttributes(int listener, ::FMOD::ATTRIBUTES_3D attributes);
    // public FMOD.RESULT getListenerWeight(System.Int32 listener, out System.Single weight)
    // Offset: 0xBA0E18
    ::FMOD::RESULT getListenerWeight(int listener, ByRef<float> weight);
    // public FMOD.RESULT setListenerWeight(System.Int32 listener, System.Single weight)
    // Offset: 0xBA0E20
    ::FMOD::RESULT setListenerWeight(int listener, float weight);
    // public FMOD.RESULT loadBankFile(System.String name, FMOD.Studio.LOAD_BANK_FLAGS flags, out FMOD.Studio.Bank bank)
    // Offset: 0xBA0E28
    ::FMOD::RESULT loadBankFile(::StringW name, ::FMOD::Studio::LOAD_BANK_FLAGS flags, ByRef<::FMOD::Studio::Bank> bank);
    // public FMOD.RESULT loadBankMemory(System.Byte[] buffer, FMOD.Studio.LOAD_BANK_FLAGS flags, out FMOD.Studio.Bank bank)
    // Offset: 0xBA0E30
    ::FMOD::RESULT loadBankMemory(::ArrayW<uint8_t> buffer, ::FMOD::Studio::LOAD_BANK_FLAGS flags, ByRef<::FMOD::Studio::Bank> bank);
    // public FMOD.RESULT loadBankCustom(FMOD.Studio.BANK_INFO info, FMOD.Studio.LOAD_BANK_FLAGS flags, out FMOD.Studio.Bank bank)
    // Offset: 0xBA0E38
    ::FMOD::RESULT loadBankCustom(::FMOD::Studio::BANK_INFO info, ::FMOD::Studio::LOAD_BANK_FLAGS flags, ByRef<::FMOD::Studio::Bank> bank);
    // public FMOD.RESULT unloadAll()
    // Offset: 0xBA0E7C
    ::FMOD::RESULT unloadAll();
    // public FMOD.RESULT flushCommands()
    // Offset: 0xBA0E84
    ::FMOD::RESULT flushCommands();
    // public FMOD.RESULT flushSampleLoading()
    // Offset: 0xBA0E8C
    ::FMOD::RESULT flushSampleLoading();
    // public FMOD.RESULT startCommandCapture(System.String path, FMOD.Studio.COMMANDCAPTURE_FLAGS flags)
    // Offset: 0xBA0E94
    ::FMOD::RESULT startCommandCapture(::StringW path, ::FMOD::Studio::COMMANDCAPTURE_FLAGS flags);
    // public FMOD.RESULT stopCommandCapture()
    // Offset: 0xBA0E9C
    ::FMOD::RESULT stopCommandCapture();
    // public FMOD.RESULT loadCommandReplay(System.String path, FMOD.Studio.COMMANDREPLAY_FLAGS flags, out FMOD.Studio.CommandReplay replay)
    // Offset: 0xBA0EA4
    ::FMOD::RESULT loadCommandReplay(::StringW path, ::FMOD::Studio::COMMANDREPLAY_FLAGS flags, ByRef<::FMOD::Studio::CommandReplay> replay);
    // public FMOD.RESULT getBankCount(out System.Int32 count)
    // Offset: 0xBA0EAC
    ::FMOD::RESULT getBankCount(ByRef<int> count);
    // public FMOD.RESULT getBankList(out FMOD.Studio.Bank[] array)
    // Offset: 0xBA0EB4
    ::FMOD::RESULT getBankList(ByRef<::ArrayW<::FMOD::Studio::Bank>> array);
    // public FMOD.RESULT getCPUUsage(out FMOD.Studio.CPU_USAGE usage)
    // Offset: 0xBA0EBC
    ::FMOD::RESULT getCPUUsage(ByRef<::FMOD::Studio::CPU_USAGE> usage);
    // public FMOD.RESULT getBufferUsage(out FMOD.Studio.BUFFER_USAGE usage)
    // Offset: 0xBA0EC4
    ::FMOD::RESULT getBufferUsage(ByRef<::FMOD::Studio::BUFFER_USAGE> usage);
    // public FMOD.RESULT resetBufferUsage()
    // Offset: 0xBA0ECC
    ::FMOD::RESULT resetBufferUsage();
    // public FMOD.RESULT setCallback(FMOD.Studio.SYSTEM_CALLBACK callback, FMOD.Studio.SYSTEM_CALLBACK_TYPE callbackmask)
    // Offset: 0xBA0ED4
    ::FMOD::RESULT setCallback(::FMOD::Studio::SYSTEM_CALLBACK* callback, ::FMOD::Studio::SYSTEM_CALLBACK_TYPE callbackmask);
    // public FMOD.RESULT getUserData(out System.IntPtr userdata)
    // Offset: 0xBA0EDC
    ::FMOD::RESULT getUserData(ByRef<::System::IntPtr> userdata);
    // public FMOD.RESULT setUserData(System.IntPtr userdata)
    // Offset: 0xBA0EE4
    ::FMOD::RESULT setUserData(::System::IntPtr userdata);
    // static private FMOD.RESULT FMOD_Studio_System_Create(out System.IntPtr studiosystem, System.UInt32 headerversion)
    // Offset: 0x15C9CB4
    static ::FMOD::RESULT FMOD_Studio_System_Create(ByRef<::System::IntPtr> studiosystem, uint headerversion);
    // static private System.Boolean FMOD_Studio_System_IsValid(System.IntPtr studiosystem)
    // Offset: 0x15CCE98
    static bool FMOD_Studio_System_IsValid(::System::IntPtr studiosystem);
    // static private FMOD.RESULT FMOD_Studio_System_SetAdvancedSettings(System.IntPtr studiosystem, ref FMOD.Studio.ADVANCEDSETTINGS settings)
    // Offset: 0x15C9E24
    static ::FMOD::RESULT FMOD_Studio_System_SetAdvancedSettings(::System::IntPtr studiosystem, ByRef<::FMOD::Studio::ADVANCEDSETTINGS> settings);
    // static private FMOD.RESULT FMOD_Studio_System_GetAdvancedSettings(System.IntPtr studiosystem, out FMOD.Studio.ADVANCEDSETTINGS settings)
    // Offset: 0x15C9F94
    static ::FMOD::RESULT FMOD_Studio_System_GetAdvancedSettings(::System::IntPtr studiosystem, ByRef<::FMOD::Studio::ADVANCEDSETTINGS> settings);
    // static private FMOD.RESULT FMOD_Studio_System_Initialize(System.IntPtr studiosystem, System.Int32 maxchannels, FMOD.Studio.INITFLAGS studioFlags, FMOD.INITFLAGS flags, System.IntPtr extradriverdata)
    // Offset: 0x15CA048
    static ::FMOD::RESULT FMOD_Studio_System_Initialize(::System::IntPtr studiosystem, int maxchannels, ::FMOD::Studio::INITFLAGS studioFlags, ::FMOD::INITFLAGS flags, ::System::IntPtr extradriverdata);
    // static private FMOD.RESULT FMOD_Studio_System_Release(System.IntPtr studiosystem)
    // Offset: 0x15CA11C
    static ::FMOD::RESULT FMOD_Studio_System_Release(::System::IntPtr studiosystem);
    // static private FMOD.RESULT FMOD_Studio_System_Update(System.IntPtr studiosystem)
    // Offset: 0x15CA1C0
    static ::FMOD::RESULT FMOD_Studio_System_Update(::System::IntPtr studiosystem);
    // static private FMOD.RESULT FMOD_Studio_System_GetLowLevelSystem(System.IntPtr studiosystem, out System.IntPtr system)
    // Offset: 0x15CA264
    static ::FMOD::RESULT FMOD_Studio_System_GetLowLevelSystem(::System::IntPtr studiosystem, ByRef<::System::IntPtr> system);
    // static private FMOD.RESULT FMOD_Studio_System_GetEvent(System.IntPtr studiosystem, System.Byte[] path, out System.IntPtr description)
    // Offset: 0x15CA46C
    static ::FMOD::RESULT FMOD_Studio_System_GetEvent(::System::IntPtr studiosystem, ::ArrayW<uint8_t> path, ByRef<::System::IntPtr> description);
    // static private FMOD.RESULT FMOD_Studio_System_GetBus(System.IntPtr studiosystem, System.Byte[] path, out System.IntPtr bus)
    // Offset: 0x15CA684
    static ::FMOD::RESULT FMOD_Studio_System_GetBus(::System::IntPtr studiosystem, ::ArrayW<uint8_t> path, ByRef<::System::IntPtr> bus);
    // static private FMOD.RESULT FMOD_Studio_System_GetVCA(System.IntPtr studiosystem, System.Byte[] path, out System.IntPtr vca)
    // Offset: 0x15CA89C
    static ::FMOD::RESULT FMOD_Studio_System_GetVCA(::System::IntPtr studiosystem, ::ArrayW<uint8_t> path, ByRef<::System::IntPtr> vca);
    // static private FMOD.RESULT FMOD_Studio_System_GetBank(System.IntPtr studiosystem, System.Byte[] path, out System.IntPtr bank)
    // Offset: 0x15CAAB4
    static ::FMOD::RESULT FMOD_Studio_System_GetBank(::System::IntPtr studiosystem, ::ArrayW<uint8_t> path, ByRef<::System::IntPtr> bank);
    // static private FMOD.RESULT FMOD_Studio_System_GetEventByID(System.IntPtr studiosystem, ref System.Guid guid, out System.IntPtr description)
    // Offset: 0x15CAB9C
    static ::FMOD::RESULT FMOD_Studio_System_GetEventByID(::System::IntPtr studiosystem, ByRef<::System::Guid> guid, ByRef<::System::IntPtr> description);
    // static private FMOD.RESULT FMOD_Studio_System_GetBusByID(System.IntPtr studiosystem, ref System.Guid guid, out System.IntPtr bus)
    // Offset: 0x15CAC7C
    static ::FMOD::RESULT FMOD_Studio_System_GetBusByID(::System::IntPtr studiosystem, ByRef<::System::Guid> guid, ByRef<::System::IntPtr> bus);
    // static private FMOD.RESULT FMOD_Studio_System_GetVCAByID(System.IntPtr studiosystem, ref System.Guid guid, out System.IntPtr vca)
    // Offset: 0x15CAD5C
    static ::FMOD::RESULT FMOD_Studio_System_GetVCAByID(::System::IntPtr studiosystem, ByRef<::System::Guid> guid, ByRef<::System::IntPtr> vca);
    // static private FMOD.RESULT FMOD_Studio_System_GetBankByID(System.IntPtr studiosystem, ref System.Guid guid, out System.IntPtr bank)
    // Offset: 0x15CAE3C
    static ::FMOD::RESULT FMOD_Studio_System_GetBankByID(::System::IntPtr studiosystem, ByRef<::System::Guid> guid, ByRef<::System::IntPtr> bank);
    // static private FMOD.RESULT FMOD_Studio_System_GetSoundInfo(System.IntPtr studiosystem, System.Byte[] key, out FMOD.Studio.SOUND_INFO info)
    // Offset: 0x15CB04C
    static ::FMOD::RESULT FMOD_Studio_System_GetSoundInfo(::System::IntPtr studiosystem, ::ArrayW<uint8_t> key, ByRef<::FMOD::Studio::SOUND_INFO> info);
    // static private FMOD.RESULT FMOD_Studio_System_LookupID(System.IntPtr studiosystem, System.Byte[] path, out System.Guid guid)
    // Offset: 0x15CB264
    static ::FMOD::RESULT FMOD_Studio_System_LookupID(::System::IntPtr studiosystem, ::ArrayW<uint8_t> path, ByRef<::System::Guid> guid);
    // static private FMOD.RESULT FMOD_Studio_System_LookupPath(System.IntPtr studiosystem, ref System.Guid guid, System.IntPtr path, System.Int32 size, out System.Int32 retrieved)
    // Offset: 0x15CB56C
    static ::FMOD::RESULT FMOD_Studio_System_LookupPath(::System::IntPtr studiosystem, ByRef<::System::Guid> guid, ::System::IntPtr path, int size, ByRef<int> retrieved);
    // static private FMOD.RESULT FMOD_Studio_System_GetNumListeners(System.IntPtr studiosystem, out System.Int32 numlisteners)
    // Offset: 0x15CB640
    static ::FMOD::RESULT FMOD_Studio_System_GetNumListeners(::System::IntPtr studiosystem, ByRef<int> numlisteners);
    // static private FMOD.RESULT FMOD_Studio_System_SetNumListeners(System.IntPtr studiosystem, System.Int32 numlisteners)
    // Offset: 0x15CB6F4
    static ::FMOD::RESULT FMOD_Studio_System_SetNumListeners(::System::IntPtr studiosystem, int numlisteners);
    // static private FMOD.RESULT FMOD_Studio_System_GetListenerAttributes(System.IntPtr studiosystem, System.Int32 listener, out FMOD.ATTRIBUTES_3D attributes)
    // Offset: 0x15CB7A8
    static ::FMOD::RESULT FMOD_Studio_System_GetListenerAttributes(::System::IntPtr studiosystem, int listener, ByRef<::FMOD::ATTRIBUTES_3D> attributes);
    // static private FMOD.RESULT FMOD_Studio_System_SetListenerAttributes(System.IntPtr studiosystem, System.Int32 listener, ref FMOD.ATTRIBUTES_3D attributes)
    // Offset: 0x15CB864
    static ::FMOD::RESULT FMOD_Studio_System_SetListenerAttributes(::System::IntPtr studiosystem, int listener, ByRef<::FMOD::ATTRIBUTES_3D> attributes);
    // static private FMOD.RESULT FMOD_Studio_System_GetListenerWeight(System.IntPtr studiosystem, System.Int32 listener, out System.Single weight)
    // Offset: 0x15CB920
    static ::FMOD::RESULT FMOD_Studio_System_GetListenerWeight(::System::IntPtr studiosystem, int listener, ByRef<float> weight);
    // static private FMOD.RESULT FMOD_Studio_System_SetListenerWeight(System.IntPtr studiosystem, System.Int32 listener, System.Single weight)
    // Offset: 0x15CB9DC
    static ::FMOD::RESULT FMOD_Studio_System_SetListenerWeight(::System::IntPtr studiosystem, int listener, float weight);
    // static private FMOD.RESULT FMOD_Studio_System_LoadBankFile(System.IntPtr studiosystem, System.Byte[] filename, FMOD.Studio.LOAD_BANK_FLAGS flags, out System.IntPtr bank)
    // Offset: 0x15CBC04
    static ::FMOD::RESULT FMOD_Studio_System_LoadBankFile(::System::IntPtr studiosystem, ::ArrayW<uint8_t> filename, ::FMOD::Studio::LOAD_BANK_FLAGS flags, ByRef<::System::IntPtr> bank);
    // static private FMOD.RESULT FMOD_Studio_System_LoadBankMemory(System.IntPtr studiosystem, System.IntPtr buffer, System.Int32 length, FMOD.Studio.LOAD_MEMORY_MODE mode, FMOD.Studio.LOAD_BANK_FLAGS flags, out System.IntPtr bank)
    // Offset: 0x15CBD6C
    static ::FMOD::RESULT FMOD_Studio_System_LoadBankMemory(::System::IntPtr studiosystem, ::System::IntPtr buffer, int length, ::FMOD::Studio::LOAD_MEMORY_MODE mode, ::FMOD::Studio::LOAD_BANK_FLAGS flags, ByRef<::System::IntPtr> bank);
    // static private FMOD.RESULT FMOD_Studio_System_LoadBankCustom(System.IntPtr studiosystem, ref FMOD.Studio.BANK_INFO info, FMOD.Studio.LOAD_BANK_FLAGS flags, out System.IntPtr bank)
    // Offset: 0x15CBF30
    static ::FMOD::RESULT FMOD_Studio_System_LoadBankCustom(::System::IntPtr studiosystem, ByRef<::FMOD::Studio::BANK_INFO> info, ::FMOD::Studio::LOAD_BANK_FLAGS flags, ByRef<::System::IntPtr> bank);
    // static private FMOD.RESULT FMOD_Studio_System_UnloadAll(System.IntPtr studiosystem)
    // Offset: 0x15CC068
    static ::FMOD::RESULT FMOD_Studio_System_UnloadAll(::System::IntPtr studiosystem);
    // static private FMOD.RESULT FMOD_Studio_System_FlushCommands(System.IntPtr studiosystem)
    // Offset: 0x15CC10C
    static ::FMOD::RESULT FMOD_Studio_System_FlushCommands(::System::IntPtr studiosystem);
    // static private FMOD.RESULT FMOD_Studio_System_FlushSampleLoading(System.IntPtr studiosystem)
    // Offset: 0x15CC1B0
    static ::FMOD::RESULT FMOD_Studio_System_FlushSampleLoading(::System::IntPtr studiosystem);
    // static private FMOD.RESULT FMOD_Studio_System_StartCommandCapture(System.IntPtr studiosystem, System.Byte[] path, FMOD.Studio.COMMANDCAPTURE_FLAGS flags)
    // Offset: 0x15CC3A8
    static ::FMOD::RESULT FMOD_Studio_System_StartCommandCapture(::System::IntPtr studiosystem, ::ArrayW<uint8_t> path, ::FMOD::Studio::COMMANDCAPTURE_FLAGS flags);
    // static private FMOD.RESULT FMOD_Studio_System_StopCommandCapture(System.IntPtr studiosystem)
    // Offset: 0x15CC46C
    static ::FMOD::RESULT FMOD_Studio_System_StopCommandCapture(::System::IntPtr studiosystem);
    // static private FMOD.RESULT FMOD_Studio_System_LoadCommandReplay(System.IntPtr studiosystem, System.Byte[] path, FMOD.Studio.COMMANDREPLAY_FLAGS flags, out System.IntPtr commandReplay)
    // Offset: 0x15CC674
    static ::FMOD::RESULT FMOD_Studio_System_LoadCommandReplay(::System::IntPtr studiosystem, ::ArrayW<uint8_t> path, ::FMOD::Studio::COMMANDREPLAY_FLAGS flags, ByRef<::System::IntPtr> commandReplay);
    // static private FMOD.RESULT FMOD_Studio_System_GetBankCount(System.IntPtr studiosystem, out System.Int32 count)
    // Offset: 0x15CC748
    static ::FMOD::RESULT FMOD_Studio_System_GetBankCount(::System::IntPtr studiosystem, ByRef<int> count);
    // static private FMOD.RESULT FMOD_Studio_System_GetBankList(System.IntPtr studiosystem, System.IntPtr[] array, System.Int32 capacity, out System.Int32 count)
    // Offset: 0x15CC994
    static ::FMOD::RESULT FMOD_Studio_System_GetBankList(::System::IntPtr studiosystem, ::ArrayW<::System::IntPtr> array, int capacity, ByRef<int> count);
    // static private FMOD.RESULT FMOD_Studio_System_GetCPUUsage(System.IntPtr studiosystem, out FMOD.Studio.CPU_USAGE usage)
    // Offset: 0x15CCA68
    static ::FMOD::RESULT FMOD_Studio_System_GetCPUUsage(::System::IntPtr studiosystem, ByRef<::FMOD::Studio::CPU_USAGE> usage);
    // static private FMOD.RESULT FMOD_Studio_System_GetBufferUsage(System.IntPtr studiosystem, out FMOD.Studio.BUFFER_USAGE usage)
    // Offset: 0x15CCB1C
    static ::FMOD::RESULT FMOD_Studio_System_GetBufferUsage(::System::IntPtr studiosystem, ByRef<::FMOD::Studio::BUFFER_USAGE> usage);
    // static private FMOD.RESULT FMOD_Studio_System_ResetBufferUsage(System.IntPtr studiosystem)
    // Offset: 0x15CCBD0
    static ::FMOD::RESULT FMOD_Studio_System_ResetBufferUsage(::System::IntPtr studiosystem);
    // static private FMOD.RESULT FMOD_Studio_System_SetCallback(System.IntPtr studiosystem, FMOD.Studio.SYSTEM_CALLBACK callback, FMOD.Studio.SYSTEM_CALLBACK_TYPE callbackmask)
    // Offset: 0x15CCC74
    static ::FMOD::RESULT FMOD_Studio_System_SetCallback(::System::IntPtr studiosystem, ::FMOD::Studio::SYSTEM_CALLBACK* callback, ::FMOD::Studio::SYSTEM_CALLBACK_TYPE callbackmask);
    // static private FMOD.RESULT FMOD_Studio_System_GetUserData(System.IntPtr studiosystem, out System.IntPtr userdata)
    // Offset: 0x15CCD38
    static ::FMOD::RESULT FMOD_Studio_System_GetUserData(::System::IntPtr studiosystem, ByRef<::System::IntPtr> userdata);
    // static private FMOD.RESULT FMOD_Studio_System_SetUserData(System.IntPtr studiosystem, System.IntPtr userdata)
    // Offset: 0x15CCDEC
    static ::FMOD::RESULT FMOD_Studio_System_SetUserData(::System::IntPtr studiosystem, ::System::IntPtr userdata);
    // public System.Boolean hasHandle()
    // Offset: 0xBA0EEC
    bool hasHandle();
    // public System.Void clearHandle()
    // Offset: 0xBA0EF4
    void clearHandle();
    // public System.Boolean isValid()
    // Offset: 0xBA0F38
    bool isValid();
  }; // FMOD.Studio.System
  #pragma pack(pop)
  static check_size<sizeof(System), 0 + sizeof(::System::IntPtr)> __FMOD_Studio_SystemSizeCheck;
  static_assert(sizeof(System) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::Studio::System::create
// Il2CppName: create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(ByRef<::FMOD::Studio::System>)>(&FMOD::Studio::System::create)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "System")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::setAdvancedSettings
// Il2CppName: setAdvancedSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::FMOD::Studio::ADVANCEDSETTINGS)>(&FMOD::Studio::System::setAdvancedSettings)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "ADVANCEDSETTINGS")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "setAdvancedSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getAdvancedSettings
// Il2CppName: getAdvancedSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(ByRef<::FMOD::Studio::ADVANCEDSETTINGS>)>(&FMOD::Studio::System::getAdvancedSettings)> {
  static const MethodInfo* get() {
    static auto* settings = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "ADVANCEDSETTINGS")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getAdvancedSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settings});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::initialize
// Il2CppName: initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(int, ::FMOD::Studio::INITFLAGS, ::FMOD::INITFLAGS, ::System::IntPtr)>(&FMOD::Studio::System::initialize)> {
  static const MethodInfo* get() {
    static auto* maxchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* studioFlags = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "INITFLAGS")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD", "INITFLAGS")->byval_arg;
    static auto* extradriverdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxchannels, studioFlags, flags, extradriverdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::release
// Il2CppName: release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)()>(&FMOD::Studio::System::release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::update
// Il2CppName: update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)()>(&FMOD::Studio::System::update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getLowLevelSystem
// Il2CppName: getLowLevelSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(ByRef<::FMOD::System>)>(&FMOD::Studio::System::getLowLevelSystem)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("FMOD", "System")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getLowLevelSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getEvent
// Il2CppName: getEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::StringW, ByRef<::FMOD::Studio::EventDescription>)>(&FMOD::Studio::System::getEvent)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* _event = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EventDescription")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, _event});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getBus
// Il2CppName: getBus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::StringW, ByRef<::FMOD::Studio::Bus>)>(&FMOD::Studio::System::getBus)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bus = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "Bus")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getBus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, bus});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getVCA
// Il2CppName: getVCA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::StringW, ByRef<::FMOD::Studio::VCA>)>(&FMOD::Studio::System::getVCA)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* vca = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "VCA")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getVCA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, vca});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getBank
// Il2CppName: getBank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::StringW, ByRef<::FMOD::Studio::Bank>)>(&FMOD::Studio::System::getBank)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bank = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "Bank")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getBank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, bank});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getEventByID
// Il2CppName: getEventByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::System::Guid, ByRef<::FMOD::Studio::EventDescription>)>(&FMOD::Studio::System::getEventByID)> {
  static const MethodInfo* get() {
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* _event = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EventDescription")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getEventByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guid, _event});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getBusByID
// Il2CppName: getBusByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::System::Guid, ByRef<::FMOD::Studio::Bus>)>(&FMOD::Studio::System::getBusByID)> {
  static const MethodInfo* get() {
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* bus = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "Bus")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getBusByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guid, bus});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getVCAByID
// Il2CppName: getVCAByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::System::Guid, ByRef<::FMOD::Studio::VCA>)>(&FMOD::Studio::System::getVCAByID)> {
  static const MethodInfo* get() {
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* vca = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "VCA")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getVCAByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guid, vca});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getBankByID
// Il2CppName: getBankByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::System::Guid, ByRef<::FMOD::Studio::Bank>)>(&FMOD::Studio::System::getBankByID)> {
  static const MethodInfo* get() {
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* bank = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "Bank")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getBankByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guid, bank});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getSoundInfo
// Il2CppName: getSoundInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::StringW, ByRef<::FMOD::Studio::SOUND_INFO>)>(&FMOD::Studio::System::getSoundInfo)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "SOUND_INFO")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getSoundInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, info});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::lookupID
// Il2CppName: lookupID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::StringW, ByRef<::System::Guid>)>(&FMOD::Studio::System::lookupID)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "lookupID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, guid});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::lookupPath
// Il2CppName: lookupPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::System::Guid, ByRef<::StringW>)>(&FMOD::Studio::System::lookupPath)> {
  static const MethodInfo* get() {
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "lookupPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guid, path});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getNumListeners
// Il2CppName: getNumListeners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(ByRef<int>)>(&FMOD::Studio::System::getNumListeners)> {
  static const MethodInfo* get() {
    static auto* numlisteners = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getNumListeners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numlisteners});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::setNumListeners
// Il2CppName: setNumListeners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(int)>(&FMOD::Studio::System::setNumListeners)> {
  static const MethodInfo* get() {
    static auto* numlisteners = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "setNumListeners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numlisteners});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getListenerAttributes
// Il2CppName: getListenerAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(int, ByRef<::FMOD::ATTRIBUTES_3D>)>(&FMOD::Studio::System::getListenerAttributes)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attributes = &::il2cpp_utils::GetClassFromName("FMOD", "ATTRIBUTES_3D")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getListenerAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener, attributes});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::setListenerAttributes
// Il2CppName: setListenerAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(int, ::FMOD::ATTRIBUTES_3D)>(&FMOD::Studio::System::setListenerAttributes)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attributes = &::il2cpp_utils::GetClassFromName("FMOD", "ATTRIBUTES_3D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "setListenerAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener, attributes});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getListenerWeight
// Il2CppName: getListenerWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(int, ByRef<float>)>(&FMOD::Studio::System::getListenerWeight)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getListenerWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener, weight});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::setListenerWeight
// Il2CppName: setListenerWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(int, float)>(&FMOD::Studio::System::setListenerWeight)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "setListenerWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener, weight});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::loadBankFile
// Il2CppName: loadBankFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::StringW, ::FMOD::Studio::LOAD_BANK_FLAGS, ByRef<::FMOD::Studio::Bank>)>(&FMOD::Studio::System::loadBankFile)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "LOAD_BANK_FLAGS")->byval_arg;
    static auto* bank = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "Bank")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "loadBankFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, flags, bank});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::loadBankMemory
// Il2CppName: loadBankMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::ArrayW<uint8_t>, ::FMOD::Studio::LOAD_BANK_FLAGS, ByRef<::FMOD::Studio::Bank>)>(&FMOD::Studio::System::loadBankMemory)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "LOAD_BANK_FLAGS")->byval_arg;
    static auto* bank = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "Bank")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "loadBankMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, flags, bank});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::loadBankCustom
// Il2CppName: loadBankCustom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::FMOD::Studio::BANK_INFO, ::FMOD::Studio::LOAD_BANK_FLAGS, ByRef<::FMOD::Studio::Bank>)>(&FMOD::Studio::System::loadBankCustom)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "BANK_INFO")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "LOAD_BANK_FLAGS")->byval_arg;
    static auto* bank = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "Bank")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "loadBankCustom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, flags, bank});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::unloadAll
// Il2CppName: unloadAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)()>(&FMOD::Studio::System::unloadAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "unloadAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::flushCommands
// Il2CppName: flushCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)()>(&FMOD::Studio::System::flushCommands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "flushCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::flushSampleLoading
// Il2CppName: flushSampleLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)()>(&FMOD::Studio::System::flushSampleLoading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "flushSampleLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::startCommandCapture
// Il2CppName: startCommandCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::StringW, ::FMOD::Studio::COMMANDCAPTURE_FLAGS)>(&FMOD::Studio::System::startCommandCapture)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "COMMANDCAPTURE_FLAGS")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "startCommandCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, flags});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::stopCommandCapture
// Il2CppName: stopCommandCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)()>(&FMOD::Studio::System::stopCommandCapture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "stopCommandCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::loadCommandReplay
// Il2CppName: loadCommandReplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::StringW, ::FMOD::Studio::COMMANDREPLAY_FLAGS, ByRef<::FMOD::Studio::CommandReplay>)>(&FMOD::Studio::System::loadCommandReplay)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "COMMANDREPLAY_FLAGS")->byval_arg;
    static auto* replay = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "CommandReplay")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "loadCommandReplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, flags, replay});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getBankCount
// Il2CppName: getBankCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(ByRef<int>)>(&FMOD::Studio::System::getBankCount)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getBankCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getBankList
// Il2CppName: getBankList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(ByRef<::ArrayW<::FMOD::Studio::Bank>>)>(&FMOD::Studio::System::getBankList)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("FMOD.Studio", "Bank"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getBankList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getCPUUsage
// Il2CppName: getCPUUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(ByRef<::FMOD::Studio::CPU_USAGE>)>(&FMOD::Studio::System::getCPUUsage)> {
  static const MethodInfo* get() {
    static auto* usage = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "CPU_USAGE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getCPUUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{usage});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getBufferUsage
// Il2CppName: getBufferUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(ByRef<::FMOD::Studio::BUFFER_USAGE>)>(&FMOD::Studio::System::getBufferUsage)> {
  static const MethodInfo* get() {
    static auto* usage = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "BUFFER_USAGE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getBufferUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{usage});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::resetBufferUsage
// Il2CppName: resetBufferUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)()>(&FMOD::Studio::System::resetBufferUsage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "resetBufferUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::setCallback
// Il2CppName: setCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::FMOD::Studio::SYSTEM_CALLBACK*, ::FMOD::Studio::SYSTEM_CALLBACK_TYPE)>(&FMOD::Studio::System::setCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "SYSTEM_CALLBACK")->byval_arg;
    static auto* callbackmask = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "SYSTEM_CALLBACK_TYPE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "setCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, callbackmask});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::getUserData
// Il2CppName: getUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(ByRef<::System::IntPtr>)>(&FMOD::Studio::System::getUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "getUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::setUserData
// Il2CppName: setUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::System::*)(::System::IntPtr)>(&FMOD::Studio::System::setUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "setUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_Create
// Il2CppName: FMOD_Studio_System_Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(ByRef<::System::IntPtr>, uint)>(&FMOD::Studio::System::FMOD_Studio_System_Create)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* headerversion = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, headerversion});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_IsValid
// Il2CppName: FMOD_Studio_System_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr)>(&FMOD::Studio::System::FMOD_Studio_System_IsValid)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_SetAdvancedSettings
// Il2CppName: FMOD_Studio_System_SetAdvancedSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::Studio::ADVANCEDSETTINGS>)>(&FMOD::Studio::System::FMOD_Studio_System_SetAdvancedSettings)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "ADVANCEDSETTINGS")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_SetAdvancedSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, settings});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetAdvancedSettings
// Il2CppName: FMOD_Studio_System_GetAdvancedSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::Studio::ADVANCEDSETTINGS>)>(&FMOD::Studio::System::FMOD_Studio_System_GetAdvancedSettings)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* settings = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "ADVANCEDSETTINGS")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetAdvancedSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, settings});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_Initialize
// Il2CppName: FMOD_Studio_System_Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ::FMOD::Studio::INITFLAGS, ::FMOD::INITFLAGS, ::System::IntPtr)>(&FMOD::Studio::System::FMOD_Studio_System_Initialize)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* maxchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* studioFlags = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "INITFLAGS")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD", "INITFLAGS")->byval_arg;
    static auto* extradriverdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, maxchannels, studioFlags, flags, extradriverdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_Release
// Il2CppName: FMOD_Studio_System_Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::System::FMOD_Studio_System_Release)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_Update
// Il2CppName: FMOD_Studio_System_Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::System::FMOD_Studio_System_Update)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetLowLevelSystem
// Il2CppName: FMOD_Studio_System_GetLowLevelSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Studio::System::FMOD_Studio_System_GetLowLevelSystem)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetLowLevelSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, system});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetEvent
// Il2CppName: FMOD_Studio_System_GetEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ByRef<::System::IntPtr>)>(&FMOD::Studio::System::FMOD_Studio_System_GetEvent)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* path = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* description = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, path, description});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetBus
// Il2CppName: FMOD_Studio_System_GetBus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ByRef<::System::IntPtr>)>(&FMOD::Studio::System::FMOD_Studio_System_GetBus)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* path = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* bus = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetBus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, path, bus});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetVCA
// Il2CppName: FMOD_Studio_System_GetVCA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ByRef<::System::IntPtr>)>(&FMOD::Studio::System::FMOD_Studio_System_GetVCA)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* path = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* vca = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetVCA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, path, vca});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetBank
// Il2CppName: FMOD_Studio_System_GetBank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ByRef<::System::IntPtr>)>(&FMOD::Studio::System::FMOD_Studio_System_GetBank)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* path = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* bank = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetBank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, path, bank});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetEventByID
// Il2CppName: FMOD_Studio_System_GetEventByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::Guid>, ByRef<::System::IntPtr>)>(&FMOD::Studio::System::FMOD_Studio_System_GetEventByID)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* description = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetEventByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, guid, description});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetBusByID
// Il2CppName: FMOD_Studio_System_GetBusByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::Guid>, ByRef<::System::IntPtr>)>(&FMOD::Studio::System::FMOD_Studio_System_GetBusByID)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* bus = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetBusByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, guid, bus});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetVCAByID
// Il2CppName: FMOD_Studio_System_GetVCAByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::Guid>, ByRef<::System::IntPtr>)>(&FMOD::Studio::System::FMOD_Studio_System_GetVCAByID)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* vca = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetVCAByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, guid, vca});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetBankByID
// Il2CppName: FMOD_Studio_System_GetBankByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::Guid>, ByRef<::System::IntPtr>)>(&FMOD::Studio::System::FMOD_Studio_System_GetBankByID)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* bank = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetBankByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, guid, bank});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetSoundInfo
// Il2CppName: FMOD_Studio_System_GetSoundInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ByRef<::FMOD::Studio::SOUND_INFO>)>(&FMOD::Studio::System::FMOD_Studio_System_GetSoundInfo)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* key = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "SOUND_INFO")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetSoundInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, key, info});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_LookupID
// Il2CppName: FMOD_Studio_System_LookupID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ByRef<::System::Guid>)>(&FMOD::Studio::System::FMOD_Studio_System_LookupID)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* path = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_LookupID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, path, guid});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_LookupPath
// Il2CppName: FMOD_Studio_System_LookupPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::Guid>, ::System::IntPtr, int, ByRef<int>)>(&FMOD::Studio::System::FMOD_Studio_System_LookupPath)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* guid = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* retrieved = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_LookupPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, guid, path, size, retrieved});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetNumListeners
// Il2CppName: FMOD_Studio_System_GetNumListeners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Studio::System::FMOD_Studio_System_GetNumListeners)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numlisteners = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetNumListeners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, numlisteners});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_SetNumListeners
// Il2CppName: FMOD_Studio_System_SetNumListeners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int)>(&FMOD::Studio::System::FMOD_Studio_System_SetNumListeners)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numlisteners = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_SetNumListeners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, numlisteners});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetListenerAttributes
// Il2CppName: FMOD_Studio_System_GetListenerAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::FMOD::ATTRIBUTES_3D>)>(&FMOD::Studio::System::FMOD_Studio_System_GetListenerAttributes)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* listener = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attributes = &::il2cpp_utils::GetClassFromName("FMOD", "ATTRIBUTES_3D")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetListenerAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, listener, attributes});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_SetListenerAttributes
// Il2CppName: FMOD_Studio_System_SetListenerAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::FMOD::ATTRIBUTES_3D>)>(&FMOD::Studio::System::FMOD_Studio_System_SetListenerAttributes)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* listener = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attributes = &::il2cpp_utils::GetClassFromName("FMOD", "ATTRIBUTES_3D")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_SetListenerAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, listener, attributes});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetListenerWeight
// Il2CppName: FMOD_Studio_System_GetListenerWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<float>)>(&FMOD::Studio::System::FMOD_Studio_System_GetListenerWeight)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* listener = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetListenerWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, listener, weight});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_SetListenerWeight
// Il2CppName: FMOD_Studio_System_SetListenerWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, float)>(&FMOD::Studio::System::FMOD_Studio_System_SetListenerWeight)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* listener = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* weight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_SetListenerWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, listener, weight});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_LoadBankFile
// Il2CppName: FMOD_Studio_System_LoadBankFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ::FMOD::Studio::LOAD_BANK_FLAGS, ByRef<::System::IntPtr>)>(&FMOD::Studio::System::FMOD_Studio_System_LoadBankFile)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* filename = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "LOAD_BANK_FLAGS")->byval_arg;
    static auto* bank = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_LoadBankFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, filename, flags, bank});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_LoadBankMemory
// Il2CppName: FMOD_Studio_System_LoadBankMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, int, ::FMOD::Studio::LOAD_MEMORY_MODE, ::FMOD::Studio::LOAD_BANK_FLAGS, ByRef<::System::IntPtr>)>(&FMOD::Studio::System::FMOD_Studio_System_LoadBankMemory)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* buffer = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "LOAD_MEMORY_MODE")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "LOAD_BANK_FLAGS")->byval_arg;
    static auto* bank = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_LoadBankMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, buffer, length, mode, flags, bank});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_LoadBankCustom
// Il2CppName: FMOD_Studio_System_LoadBankCustom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::Studio::BANK_INFO>, ::FMOD::Studio::LOAD_BANK_FLAGS, ByRef<::System::IntPtr>)>(&FMOD::Studio::System::FMOD_Studio_System_LoadBankCustom)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "BANK_INFO")->this_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "LOAD_BANK_FLAGS")->byval_arg;
    static auto* bank = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_LoadBankCustom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, info, flags, bank});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_UnloadAll
// Il2CppName: FMOD_Studio_System_UnloadAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::System::FMOD_Studio_System_UnloadAll)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_UnloadAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_FlushCommands
// Il2CppName: FMOD_Studio_System_FlushCommands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::System::FMOD_Studio_System_FlushCommands)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_FlushCommands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_FlushSampleLoading
// Il2CppName: FMOD_Studio_System_FlushSampleLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::System::FMOD_Studio_System_FlushSampleLoading)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_FlushSampleLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_StartCommandCapture
// Il2CppName: FMOD_Studio_System_StartCommandCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ::FMOD::Studio::COMMANDCAPTURE_FLAGS)>(&FMOD::Studio::System::FMOD_Studio_System_StartCommandCapture)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* path = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "COMMANDCAPTURE_FLAGS")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_StartCommandCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, path, flags});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_StopCommandCapture
// Il2CppName: FMOD_Studio_System_StopCommandCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::System::FMOD_Studio_System_StopCommandCapture)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_StopCommandCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_LoadCommandReplay
// Il2CppName: FMOD_Studio_System_LoadCommandReplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ::FMOD::Studio::COMMANDREPLAY_FLAGS, ByRef<::System::IntPtr>)>(&FMOD::Studio::System::FMOD_Studio_System_LoadCommandReplay)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* path = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "COMMANDREPLAY_FLAGS")->byval_arg;
    static auto* commandReplay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_LoadCommandReplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, path, flags, commandReplay});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetBankCount
// Il2CppName: FMOD_Studio_System_GetBankCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Studio::System::FMOD_Studio_System_GetBankCount)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetBankCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetBankList
// Il2CppName: FMOD_Studio_System_GetBankList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<::System::IntPtr>, int, ByRef<int>)>(&FMOD::Studio::System::FMOD_Studio_System_GetBankList)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "IntPtr"), 1)->byval_arg;
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetBankList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, array, capacity, count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetCPUUsage
// Il2CppName: FMOD_Studio_System_GetCPUUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::Studio::CPU_USAGE>)>(&FMOD::Studio::System::FMOD_Studio_System_GetCPUUsage)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* usage = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "CPU_USAGE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetCPUUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, usage});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetBufferUsage
// Il2CppName: FMOD_Studio_System_GetBufferUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::Studio::BUFFER_USAGE>)>(&FMOD::Studio::System::FMOD_Studio_System_GetBufferUsage)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* usage = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "BUFFER_USAGE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetBufferUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, usage});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_ResetBufferUsage
// Il2CppName: FMOD_Studio_System_ResetBufferUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::System::FMOD_Studio_System_ResetBufferUsage)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_ResetBufferUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_SetCallback
// Il2CppName: FMOD_Studio_System_SetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::Studio::SYSTEM_CALLBACK*, ::FMOD::Studio::SYSTEM_CALLBACK_TYPE)>(&FMOD::Studio::System::FMOD_Studio_System_SetCallback)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "SYSTEM_CALLBACK")->byval_arg;
    static auto* callbackmask = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "SYSTEM_CALLBACK_TYPE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_SetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, callback, callbackmask});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_GetUserData
// Il2CppName: FMOD_Studio_System_GetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Studio::System::FMOD_Studio_System_GetUserData)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_GetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::FMOD_Studio_System_SetUserData
// Il2CppName: FMOD_Studio_System_SetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::Studio::System::FMOD_Studio_System_SetUserData)> {
  static const MethodInfo* get() {
    static auto* studiosystem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "FMOD_Studio_System_SetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{studiosystem, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::hasHandle
// Il2CppName: hasHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::Studio::System::*)()>(&FMOD::Studio::System::hasHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "hasHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::clearHandle
// Il2CppName: clearHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::Studio::System::*)()>(&FMOD::Studio::System::clearHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "clearHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::System::isValid
// Il2CppName: isValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::Studio::System::*)()>(&FMOD::Studio::System::isValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::System), "isValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
