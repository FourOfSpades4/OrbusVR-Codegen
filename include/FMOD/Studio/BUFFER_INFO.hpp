// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: BUFFER_INFO
  struct BUFFER_INFO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::BUFFER_INFO, "FMOD.Studio", "BUFFER_INFO");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Studio.BUFFER_INFO
  // [TokenAttribute] Offset: FFFFFFFF
  struct BUFFER_INFO/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 currentusage
    // Size: 0x4
    // Offset: 0x0
    int currentusage;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 peakusage
    // Size: 0x4
    // Offset: 0x4
    int peakusage;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 capacity
    // Size: 0x4
    // Offset: 0x8
    int capacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 stallcount
    // Size: 0x4
    // Offset: 0xC
    int stallcount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single stalltime
    // Size: 0x4
    // Offset: 0x10
    float stalltime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: BUFFER_INFO
    constexpr BUFFER_INFO(int currentusage_ = {}, int peakusage_ = {}, int capacity_ = {}, int stallcount_ = {}, float stalltime_ = {}) noexcept : currentusage{currentusage_}, peakusage{peakusage_}, capacity{capacity_}, stallcount{stallcount_}, stalltime{stalltime_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 currentusage
    [[deprecated("Use field access instead!")]] int& dyn_currentusage();
    // Get instance field reference: public System.Int32 peakusage
    [[deprecated("Use field access instead!")]] int& dyn_peakusage();
    // Get instance field reference: public System.Int32 capacity
    [[deprecated("Use field access instead!")]] int& dyn_capacity();
    // Get instance field reference: public System.Int32 stallcount
    [[deprecated("Use field access instead!")]] int& dyn_stallcount();
    // Get instance field reference: public System.Single stalltime
    [[deprecated("Use field access instead!")]] float& dyn_stalltime();
  }; // FMOD.Studio.BUFFER_INFO
  #pragma pack(pop)
  static check_size<sizeof(BUFFER_INFO), 16 + sizeof(float)> __FMOD_Studio_BUFFER_INFOSizeCheck;
  static_assert(sizeof(BUFFER_INFO) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
