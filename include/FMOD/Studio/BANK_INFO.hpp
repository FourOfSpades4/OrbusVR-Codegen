// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: FILE_OPENCALLBACK
  class FILE_OPENCALLBACK;
  // Forward declaring type: FILE_CLOSECALLBACK
  class FILE_CLOSECALLBACK;
  // Forward declaring type: FILE_READCALLBACK
  class FILE_READCALLBACK;
  // Forward declaring type: FILE_SEEKCALLBACK
  class FILE_SEEKCALLBACK;
}
// Completed forward declares
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: BANK_INFO
  struct BANK_INFO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::BANK_INFO, "FMOD.Studio", "BANK_INFO");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Studio.BANK_INFO
  // [TokenAttribute] Offset: FFFFFFFF
  struct BANK_INFO/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 size
    // Size: 0x4
    // Offset: 0x0
    int size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: size and: userdata
    char __padding0[0x4] = {};
    // public System.IntPtr userdata
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr userdata;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.Int32 userdatalength
    // Size: 0x4
    // Offset: 0x10
    int userdatalength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: userdatalength and: opencallback
    char __padding2[0x4] = {};
    // public FMOD.FILE_OPENCALLBACK opencallback
    // Size: 0x8
    // Offset: 0x18
    ::FMOD::FILE_OPENCALLBACK* opencallback;
    // Field size check
    static_assert(sizeof(::FMOD::FILE_OPENCALLBACK*) == 0x8);
    // public FMOD.FILE_CLOSECALLBACK closecallback
    // Size: 0x8
    // Offset: 0x20
    ::FMOD::FILE_CLOSECALLBACK* closecallback;
    // Field size check
    static_assert(sizeof(::FMOD::FILE_CLOSECALLBACK*) == 0x8);
    // public FMOD.FILE_READCALLBACK readcallback
    // Size: 0x8
    // Offset: 0x28
    ::FMOD::FILE_READCALLBACK* readcallback;
    // Field size check
    static_assert(sizeof(::FMOD::FILE_READCALLBACK*) == 0x8);
    // public FMOD.FILE_SEEKCALLBACK seekcallback
    // Size: 0x8
    // Offset: 0x30
    ::FMOD::FILE_SEEKCALLBACK* seekcallback;
    // Field size check
    static_assert(sizeof(::FMOD::FILE_SEEKCALLBACK*) == 0x8);
    public:
    // Creating value type constructor for type: BANK_INFO
    constexpr BANK_INFO(int size_ = {}, ::System::IntPtr userdata_ = {}, int userdatalength_ = {}, ::FMOD::FILE_OPENCALLBACK* opencallback_ = {}, ::FMOD::FILE_CLOSECALLBACK* closecallback_ = {}, ::FMOD::FILE_READCALLBACK* readcallback_ = {}, ::FMOD::FILE_SEEKCALLBACK* seekcallback_ = {}) noexcept : size{size_}, userdata{userdata_}, userdatalength{userdatalength_}, opencallback{opencallback_}, closecallback{closecallback_}, readcallback{readcallback_}, seekcallback{seekcallback_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 size
    [[deprecated("Use field access instead!")]] int& dyn_size();
    // Get instance field reference: public System.IntPtr userdata
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_userdata();
    // Get instance field reference: public System.Int32 userdatalength
    [[deprecated("Use field access instead!")]] int& dyn_userdatalength();
    // Get instance field reference: public FMOD.FILE_OPENCALLBACK opencallback
    [[deprecated("Use field access instead!")]] ::FMOD::FILE_OPENCALLBACK*& dyn_opencallback();
    // Get instance field reference: public FMOD.FILE_CLOSECALLBACK closecallback
    [[deprecated("Use field access instead!")]] ::FMOD::FILE_CLOSECALLBACK*& dyn_closecallback();
    // Get instance field reference: public FMOD.FILE_READCALLBACK readcallback
    [[deprecated("Use field access instead!")]] ::FMOD::FILE_READCALLBACK*& dyn_readcallback();
    // Get instance field reference: public FMOD.FILE_SEEKCALLBACK seekcallback
    [[deprecated("Use field access instead!")]] ::FMOD::FILE_SEEKCALLBACK*& dyn_seekcallback();
  }; // FMOD.Studio.BANK_INFO
  #pragma pack(pop)
  static check_size<sizeof(BANK_INFO), 48 + sizeof(::FMOD::FILE_SEEKCALLBACK*)> __FMOD_Studio_BANK_INFOSizeCheck;
  static_assert(sizeof(BANK_INFO) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
