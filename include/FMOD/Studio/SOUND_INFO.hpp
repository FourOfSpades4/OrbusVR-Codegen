// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: FMOD.MODE
#include "FMOD/MODE.hpp"
// Including type: FMOD.CREATESOUNDEXINFO
#include "FMOD/CREATESOUNDEXINFO.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: SOUND_INFO
  struct SOUND_INFO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::SOUND_INFO, "FMOD.Studio", "SOUND_INFO");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Size: 0xFC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Studio.SOUND_INFO
  // [TokenAttribute] Offset: FFFFFFFF
  struct SOUND_INFO/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr name_or_data
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr name_or_data;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public FMOD.MODE mode
    // Size: 0x4
    // Offset: 0x8
    ::FMOD::MODE mode;
    // Field size check
    static_assert(sizeof(::FMOD::MODE) == 0x4);
    // Padding between fields: mode and: exinfo
    char __padding1[0x4] = {};
    // public FMOD.CREATESOUNDEXINFO exinfo
    // Size: 0xE8
    // Offset: 0x10
    ::FMOD::CREATESOUNDEXINFO exinfo;
    // Field size check
    static_assert(sizeof(::FMOD::CREATESOUNDEXINFO) == 0xE8);
    // public System.Int32 subsoundindex
    // Size: 0x4
    // Offset: 0xF8
    int subsoundindex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: SOUND_INFO
    constexpr SOUND_INFO(::System::IntPtr name_or_data_ = {}, ::FMOD::MODE mode_ = {}, ::FMOD::CREATESOUNDEXINFO exinfo_ = {}, int subsoundindex_ = {}) noexcept : name_or_data{name_or_data_}, mode{mode_}, exinfo{exinfo_}, subsoundindex{subsoundindex_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.IntPtr name_or_data
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_name_or_data();
    // Get instance field reference: public FMOD.MODE mode
    [[deprecated("Use field access instead!")]] ::FMOD::MODE& dyn_mode();
    // Get instance field reference: public FMOD.CREATESOUNDEXINFO exinfo
    [[deprecated("Use field access instead!")]] ::FMOD::CREATESOUNDEXINFO& dyn_exinfo();
    // Get instance field reference: public System.Int32 subsoundindex
    [[deprecated("Use field access instead!")]] int& dyn_subsoundindex();
    // public System.String get_name()
    // Offset: 0xBA0C5C
    ::StringW get_name();
  }; // FMOD.Studio.SOUND_INFO
  #pragma pack(pop)
  static check_size<sizeof(SOUND_INFO), 248 + sizeof(int)> __FMOD_Studio_SOUND_INFOSizeCheck;
  static_assert(sizeof(SOUND_INFO) == 0xFC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::Studio::SOUND_INFO::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (FMOD::Studio::SOUND_INFO::*)()>(&FMOD::Studio::SOUND_INFO::get_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::SOUND_INFO), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
