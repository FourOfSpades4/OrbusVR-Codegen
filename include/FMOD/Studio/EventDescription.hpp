// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: FMOD.Studio.EventInstance
#include "FMOD/Studio/EventInstance.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Guid
  struct Guid;
}
// Forward declaring namespace: FMOD::Studio
namespace FMOD::Studio {
  // Forward declaring type: PARAMETER_DESCRIPTION
  struct PARAMETER_DESCRIPTION;
  // Forward declaring type: USER_PROPERTY
  struct USER_PROPERTY;
  // Forward declaring type: LOADING_STATE
  struct LOADING_STATE;
  // Forward declaring type: EVENT_CALLBACK
  class EVENT_CALLBACK;
  // Forward declaring type: EVENT_CALLBACK_TYPE
  struct EVENT_CALLBACK_TYPE;
}
// Completed forward declares
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: EventDescription
  struct EventDescription;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::EventDescription, "FMOD.Studio", "EventDescription");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Studio.EventDescription
  // [TokenAttribute] Offset: FFFFFFFF
  struct EventDescription/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: EventDescription
    constexpr EventDescription(::System::IntPtr handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return handle;
    }
    // Get instance field reference: public System.IntPtr handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_handle();
    // public FMOD.RESULT getID(out System.Guid id)
    // Offset: 0xBBE03C
    ::FMOD::RESULT getID(ByRef<::System::Guid> id);
    // public FMOD.RESULT getPath(out System.String path)
    // Offset: 0xBBE044
    ::FMOD::RESULT getPath(ByRef<::StringW> path);
    // public FMOD.RESULT getParameterCount(out System.Int32 count)
    // Offset: 0xBBE04C
    ::FMOD::RESULT getParameterCount(ByRef<int> count);
    // public FMOD.RESULT getParameterByIndex(System.Int32 index, out FMOD.Studio.PARAMETER_DESCRIPTION parameter)
    // Offset: 0xBBE054
    ::FMOD::RESULT getParameterByIndex(int index, ByRef<::FMOD::Studio::PARAMETER_DESCRIPTION> parameter);
    // public FMOD.RESULT getParameter(System.String name, out FMOD.Studio.PARAMETER_DESCRIPTION parameter)
    // Offset: 0xBBE05C
    ::FMOD::RESULT getParameter(::StringW name, ByRef<::FMOD::Studio::PARAMETER_DESCRIPTION> parameter);
    // public FMOD.RESULT getUserPropertyCount(out System.Int32 count)
    // Offset: 0xBBE064
    ::FMOD::RESULT getUserPropertyCount(ByRef<int> count);
    // public FMOD.RESULT getUserPropertyByIndex(System.Int32 index, out FMOD.Studio.USER_PROPERTY property)
    // Offset: 0xBBE06C
    ::FMOD::RESULT getUserPropertyByIndex(int index, ByRef<::FMOD::Studio::USER_PROPERTY> property);
    // public FMOD.RESULT getUserProperty(System.String name, out FMOD.Studio.USER_PROPERTY property)
    // Offset: 0xBBE074
    ::FMOD::RESULT getUserProperty(::StringW name, ByRef<::FMOD::Studio::USER_PROPERTY> property);
    // public FMOD.RESULT getLength(out System.Int32 length)
    // Offset: 0xBBE07C
    ::FMOD::RESULT getLength(ByRef<int> length);
    // public FMOD.RESULT getMinimumDistance(out System.Single distance)
    // Offset: 0xBBE084
    ::FMOD::RESULT getMinimumDistance(ByRef<float> distance);
    // public FMOD.RESULT getMaximumDistance(out System.Single distance)
    // Offset: 0xBBE08C
    ::FMOD::RESULT getMaximumDistance(ByRef<float> distance);
    // public FMOD.RESULT getSoundSize(out System.Single size)
    // Offset: 0xBBE094
    ::FMOD::RESULT getSoundSize(ByRef<float> size);
    // public FMOD.RESULT isSnapshot(out System.Boolean snapshot)
    // Offset: 0xBBE09C
    ::FMOD::RESULT isSnapshot(ByRef<bool> snapshot);
    // public FMOD.RESULT isOneshot(out System.Boolean oneshot)
    // Offset: 0xBBE0A4
    ::FMOD::RESULT isOneshot(ByRef<bool> oneshot);
    // public FMOD.RESULT isStream(out System.Boolean isStream)
    // Offset: 0xBBE0AC
    ::FMOD::RESULT isStream(ByRef<bool> isStream);
    // public FMOD.RESULT is3D(out System.Boolean is3D)
    // Offset: 0xBBE0B4
    ::FMOD::RESULT is3D(ByRef<bool> is3D);
    // public FMOD.RESULT hasCue(out System.Boolean cue)
    // Offset: 0xBBE0BC
    ::FMOD::RESULT hasCue(ByRef<bool> cue);
    // public FMOD.RESULT createInstance(out FMOD.Studio.EventInstance instance)
    // Offset: 0xBBE0C4
    ::FMOD::RESULT createInstance(ByRef<::FMOD::Studio::EventInstance> instance);
    // public FMOD.RESULT getInstanceCount(out System.Int32 count)
    // Offset: 0xBBE0CC
    ::FMOD::RESULT getInstanceCount(ByRef<int> count);
    // public FMOD.RESULT getInstanceList(out FMOD.Studio.EventInstance[] array)
    // Offset: 0xBBE0D4
    ::FMOD::RESULT getInstanceList(ByRef<::ArrayW<::FMOD::Studio::EventInstance>> array);
    // public FMOD.RESULT loadSampleData()
    // Offset: 0xBBE0DC
    ::FMOD::RESULT loadSampleData();
    // public FMOD.RESULT unloadSampleData()
    // Offset: 0xBBE0E4
    ::FMOD::RESULT unloadSampleData();
    // public FMOD.RESULT getSampleLoadingState(out FMOD.Studio.LOADING_STATE state)
    // Offset: 0xBBE0EC
    ::FMOD::RESULT getSampleLoadingState(ByRef<::FMOD::Studio::LOADING_STATE> state);
    // public FMOD.RESULT releaseAllInstances()
    // Offset: 0xBBE0F4
    ::FMOD::RESULT releaseAllInstances();
    // public FMOD.RESULT setCallback(FMOD.Studio.EVENT_CALLBACK callback, FMOD.Studio.EVENT_CALLBACK_TYPE callbackmask)
    // Offset: 0xBBE0FC
    ::FMOD::RESULT setCallback(::FMOD::Studio::EVENT_CALLBACK* callback, ::FMOD::Studio::EVENT_CALLBACK_TYPE callbackmask);
    // public FMOD.RESULT getUserData(out System.IntPtr userdata)
    // Offset: 0xBBE104
    ::FMOD::RESULT getUserData(ByRef<::System::IntPtr> userdata);
    // public FMOD.RESULT setUserData(System.IntPtr userdata)
    // Offset: 0xBBE10C
    ::FMOD::RESULT setUserData(::System::IntPtr userdata);
    // static private System.Boolean FMOD_Studio_EventDescription_IsValid(System.IntPtr eventdescription)
    // Offset: 0x22EB860
    static bool FMOD_Studio_EventDescription_IsValid(::System::IntPtr eventdescription);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetID(System.IntPtr eventdescription, out System.Guid id)
    // Offset: 0x22E9DE8
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetID(::System::IntPtr eventdescription, ByRef<::System::Guid> id);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetPath(System.IntPtr eventdescription, System.IntPtr path, System.Int32 size, out System.Int32 retrieved)
    // Offset: 0x22EA0CC
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetPath(::System::IntPtr eventdescription, ::System::IntPtr path, int size, ByRef<int> retrieved);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetParameterCount(System.IntPtr eventdescription, out System.Int32 count)
    // Offset: 0x22EA198
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetParameterCount(::System::IntPtr eventdescription, ByRef<int> count);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetParameterByIndex(System.IntPtr eventdescription, System.Int32 index, out FMOD.Studio.PARAMETER_DESCRIPTION parameter)
    // Offset: 0x22EA24C
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetParameterByIndex(::System::IntPtr eventdescription, int index, ByRef<::FMOD::Studio::PARAMETER_DESCRIPTION> parameter);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetParameter(System.IntPtr eventdescription, System.Byte[] name, out FMOD.Studio.PARAMETER_DESCRIPTION parameter)
    // Offset: 0x22EA454
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetParameter(::System::IntPtr eventdescription, ::ArrayW<uint8_t> name, ByRef<::FMOD::Studio::PARAMETER_DESCRIPTION> parameter);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetUserPropertyCount(System.IntPtr eventdescription, out System.Int32 count)
    // Offset: 0x22EA518
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetUserPropertyCount(::System::IntPtr eventdescription, ByRef<int> count);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetUserPropertyByIndex(System.IntPtr eventdescription, System.Int32 index, out FMOD.Studio.USER_PROPERTY property)
    // Offset: 0x22EA5CC
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetUserPropertyByIndex(::System::IntPtr eventdescription, int index, ByRef<::FMOD::Studio::USER_PROPERTY> property);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetUserProperty(System.IntPtr eventdescription, System.Byte[] name, out FMOD.Studio.USER_PROPERTY property)
    // Offset: 0x22EA810
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetUserProperty(::System::IntPtr eventdescription, ::ArrayW<uint8_t> name, ByRef<::FMOD::Studio::USER_PROPERTY> property);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetLength(System.IntPtr eventdescription, out System.Int32 length)
    // Offset: 0x22EA910
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetLength(::System::IntPtr eventdescription, ByRef<int> length);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetMinimumDistance(System.IntPtr eventdescription, out System.Single distance)
    // Offset: 0x22EA9C4
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetMinimumDistance(::System::IntPtr eventdescription, ByRef<float> distance);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetMaximumDistance(System.IntPtr eventdescription, out System.Single distance)
    // Offset: 0x22EAA78
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetMaximumDistance(::System::IntPtr eventdescription, ByRef<float> distance);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetSoundSize(System.IntPtr eventdescription, out System.Single size)
    // Offset: 0x22EAB2C
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetSoundSize(::System::IntPtr eventdescription, ByRef<float> size);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_IsSnapshot(System.IntPtr eventdescription, out System.Boolean snapshot)
    // Offset: 0x22EABE0
    static ::FMOD::RESULT FMOD_Studio_EventDescription_IsSnapshot(::System::IntPtr eventdescription, ByRef<bool> snapshot);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_IsOneshot(System.IntPtr eventdescription, out System.Boolean oneshot)
    // Offset: 0x22EACA8
    static ::FMOD::RESULT FMOD_Studio_EventDescription_IsOneshot(::System::IntPtr eventdescription, ByRef<bool> oneshot);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_IsStream(System.IntPtr eventdescription, out System.Boolean isStream)
    // Offset: 0x22EAD70
    static ::FMOD::RESULT FMOD_Studio_EventDescription_IsStream(::System::IntPtr eventdescription, ByRef<bool> isStream);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_Is3D(System.IntPtr eventdescription, out System.Boolean is3D)
    // Offset: 0x22EAE38
    static ::FMOD::RESULT FMOD_Studio_EventDescription_Is3D(::System::IntPtr eventdescription, ByRef<bool> is3D);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_HasCue(System.IntPtr eventdescription, out System.Boolean cue)
    // Offset: 0x22EAF00
    static ::FMOD::RESULT FMOD_Studio_EventDescription_HasCue(::System::IntPtr eventdescription, ByRef<bool> cue);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_CreateInstance(System.IntPtr eventdescription, out System.IntPtr instance)
    // Offset: 0x22EAFC8
    static ::FMOD::RESULT FMOD_Studio_EventDescription_CreateInstance(::System::IntPtr eventdescription, ByRef<::System::IntPtr> instance);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetInstanceCount(System.IntPtr eventdescription, out System.Int32 count)
    // Offset: 0x22EB07C
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetInstanceCount(::System::IntPtr eventdescription, ByRef<int> count);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetInstanceList(System.IntPtr eventdescription, System.IntPtr[] array, System.Int32 capacity, out System.Int32 count)
    // Offset: 0x22EB2C8
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetInstanceList(::System::IntPtr eventdescription, ::ArrayW<::System::IntPtr> array, int capacity, ByRef<int> count);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_LoadSampleData(System.IntPtr eventdescription)
    // Offset: 0x22EB39C
    static ::FMOD::RESULT FMOD_Studio_EventDescription_LoadSampleData(::System::IntPtr eventdescription);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_UnloadSampleData(System.IntPtr eventdescription)
    // Offset: 0x22EB440
    static ::FMOD::RESULT FMOD_Studio_EventDescription_UnloadSampleData(::System::IntPtr eventdescription);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetSampleLoadingState(System.IntPtr eventdescription, out FMOD.Studio.LOADING_STATE state)
    // Offset: 0x22EB4E4
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetSampleLoadingState(::System::IntPtr eventdescription, ByRef<::FMOD::Studio::LOADING_STATE> state);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_ReleaseAllInstances(System.IntPtr eventdescription)
    // Offset: 0x22EB598
    static ::FMOD::RESULT FMOD_Studio_EventDescription_ReleaseAllInstances(::System::IntPtr eventdescription);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_SetCallback(System.IntPtr eventdescription, FMOD.Studio.EVENT_CALLBACK callback, FMOD.Studio.EVENT_CALLBACK_TYPE callbackmask)
    // Offset: 0x22EB63C
    static ::FMOD::RESULT FMOD_Studio_EventDescription_SetCallback(::System::IntPtr eventdescription, ::FMOD::Studio::EVENT_CALLBACK* callback, ::FMOD::Studio::EVENT_CALLBACK_TYPE callbackmask);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_GetUserData(System.IntPtr eventdescription, out System.IntPtr userdata)
    // Offset: 0x22EB700
    static ::FMOD::RESULT FMOD_Studio_EventDescription_GetUserData(::System::IntPtr eventdescription, ByRef<::System::IntPtr> userdata);
    // static private FMOD.RESULT FMOD_Studio_EventDescription_SetUserData(System.IntPtr eventdescription, System.IntPtr userdata)
    // Offset: 0x22EB7B4
    static ::FMOD::RESULT FMOD_Studio_EventDescription_SetUserData(::System::IntPtr eventdescription, ::System::IntPtr userdata);
    // public System.Boolean hasHandle()
    // Offset: 0xBBE114
    bool hasHandle();
    // public System.Void clearHandle()
    // Offset: 0xBBE11C
    void clearHandle();
    // public System.Boolean isValid()
    // Offset: 0xBBE160
    bool isValid();
  }; // FMOD.Studio.EventDescription
  #pragma pack(pop)
  static check_size<sizeof(EventDescription), 0 + sizeof(::System::IntPtr)> __FMOD_Studio_EventDescriptionSizeCheck;
  static_assert(sizeof(EventDescription) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getID
// Il2CppName: getID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<::System::Guid>)>(&FMOD::Studio::EventDescription::getID)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getPath
// Il2CppName: getPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<::StringW>)>(&FMOD::Studio::EventDescription::getPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getParameterCount
// Il2CppName: getParameterCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<int>)>(&FMOD::Studio::EventDescription::getParameterCount)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getParameterCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getParameterByIndex
// Il2CppName: getParameterByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(int, ByRef<::FMOD::Studio::PARAMETER_DESCRIPTION>)>(&FMOD::Studio::EventDescription::getParameterByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parameter = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "PARAMETER_DESCRIPTION")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getParameterByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, parameter});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getParameter
// Il2CppName: getParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(::StringW, ByRef<::FMOD::Studio::PARAMETER_DESCRIPTION>)>(&FMOD::Studio::EventDescription::getParameter)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parameter = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "PARAMETER_DESCRIPTION")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, parameter});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getUserPropertyCount
// Il2CppName: getUserPropertyCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<int>)>(&FMOD::Studio::EventDescription::getUserPropertyCount)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getUserPropertyCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getUserPropertyByIndex
// Il2CppName: getUserPropertyByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(int, ByRef<::FMOD::Studio::USER_PROPERTY>)>(&FMOD::Studio::EventDescription::getUserPropertyByIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* property = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "USER_PROPERTY")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getUserPropertyByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, property});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getUserProperty
// Il2CppName: getUserProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(::StringW, ByRef<::FMOD::Studio::USER_PROPERTY>)>(&FMOD::Studio::EventDescription::getUserProperty)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* property = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "USER_PROPERTY")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getUserProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, property});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getLength
// Il2CppName: getLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<int>)>(&FMOD::Studio::EventDescription::getLength)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getMinimumDistance
// Il2CppName: getMinimumDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<float>)>(&FMOD::Studio::EventDescription::getMinimumDistance)> {
  static const MethodInfo* get() {
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getMinimumDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distance});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getMaximumDistance
// Il2CppName: getMaximumDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<float>)>(&FMOD::Studio::EventDescription::getMaximumDistance)> {
  static const MethodInfo* get() {
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getMaximumDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distance});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getSoundSize
// Il2CppName: getSoundSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<float>)>(&FMOD::Studio::EventDescription::getSoundSize)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getSoundSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::isSnapshot
// Il2CppName: isSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<bool>)>(&FMOD::Studio::EventDescription::isSnapshot)> {
  static const MethodInfo* get() {
    static auto* snapshot = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "isSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{snapshot});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::isOneshot
// Il2CppName: isOneshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<bool>)>(&FMOD::Studio::EventDescription::isOneshot)> {
  static const MethodInfo* get() {
    static auto* oneshot = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "isOneshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oneshot});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::isStream
// Il2CppName: isStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<bool>)>(&FMOD::Studio::EventDescription::isStream)> {
  static const MethodInfo* get() {
    static auto* isStream = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "isStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isStream});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::is3D
// Il2CppName: is3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<bool>)>(&FMOD::Studio::EventDescription::is3D)> {
  static const MethodInfo* get() {
    static auto* is3D = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "is3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{is3D});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::hasCue
// Il2CppName: hasCue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<bool>)>(&FMOD::Studio::EventDescription::hasCue)> {
  static const MethodInfo* get() {
    static auto* cue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "hasCue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cue});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::createInstance
// Il2CppName: createInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<::FMOD::Studio::EventInstance>)>(&FMOD::Studio::EventDescription::createInstance)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EventInstance")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "createInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getInstanceCount
// Il2CppName: getInstanceCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<int>)>(&FMOD::Studio::EventDescription::getInstanceCount)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getInstanceCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getInstanceList
// Il2CppName: getInstanceList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<::ArrayW<::FMOD::Studio::EventInstance>>)>(&FMOD::Studio::EventDescription::getInstanceList)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("FMOD.Studio", "EventInstance"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getInstanceList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::loadSampleData
// Il2CppName: loadSampleData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)()>(&FMOD::Studio::EventDescription::loadSampleData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "loadSampleData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::unloadSampleData
// Il2CppName: unloadSampleData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)()>(&FMOD::Studio::EventDescription::unloadSampleData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "unloadSampleData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getSampleLoadingState
// Il2CppName: getSampleLoadingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<::FMOD::Studio::LOADING_STATE>)>(&FMOD::Studio::EventDescription::getSampleLoadingState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "LOADING_STATE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getSampleLoadingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::releaseAllInstances
// Il2CppName: releaseAllInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)()>(&FMOD::Studio::EventDescription::releaseAllInstances)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "releaseAllInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::setCallback
// Il2CppName: setCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(::FMOD::Studio::EVENT_CALLBACK*, ::FMOD::Studio::EVENT_CALLBACK_TYPE)>(&FMOD::Studio::EventDescription::setCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EVENT_CALLBACK")->byval_arg;
    static auto* callbackmask = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EVENT_CALLBACK_TYPE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "setCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, callbackmask});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::getUserData
// Il2CppName: getUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(ByRef<::System::IntPtr>)>(&FMOD::Studio::EventDescription::getUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "getUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::setUserData
// Il2CppName: setUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EventDescription::*)(::System::IntPtr)>(&FMOD::Studio::EventDescription::setUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "setUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_IsValid
// Il2CppName: FMOD_Studio_EventDescription_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_IsValid)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetID
// Il2CppName: FMOD_Studio_EventDescription_GetID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::Guid>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetID)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, id});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetPath
// Il2CppName: FMOD_Studio_EventDescription_GetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, int, ByRef<int>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetPath)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* retrieved = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, path, size, retrieved});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetParameterCount
// Il2CppName: FMOD_Studio_EventDescription_GetParameterCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetParameterCount)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetParameterCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetParameterByIndex
// Il2CppName: FMOD_Studio_EventDescription_GetParameterByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::FMOD::Studio::PARAMETER_DESCRIPTION>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetParameterByIndex)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parameter = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "PARAMETER_DESCRIPTION")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetParameterByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, index, parameter});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetParameter
// Il2CppName: FMOD_Studio_EventDescription_GetParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ByRef<::FMOD::Studio::PARAMETER_DESCRIPTION>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetParameter)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* parameter = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "PARAMETER_DESCRIPTION")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, name, parameter});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetUserPropertyCount
// Il2CppName: FMOD_Studio_EventDescription_GetUserPropertyCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetUserPropertyCount)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetUserPropertyCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetUserPropertyByIndex
// Il2CppName: FMOD_Studio_EventDescription_GetUserPropertyByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::FMOD::Studio::USER_PROPERTY>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetUserPropertyByIndex)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* property = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "USER_PROPERTY")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetUserPropertyByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, index, property});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetUserProperty
// Il2CppName: FMOD_Studio_EventDescription_GetUserProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>, ByRef<::FMOD::Studio::USER_PROPERTY>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetUserProperty)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* property = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "USER_PROPERTY")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetUserProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, name, property});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetLength
// Il2CppName: FMOD_Studio_EventDescription_GetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetLength)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, length});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetMinimumDistance
// Il2CppName: FMOD_Studio_EventDescription_GetMinimumDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetMinimumDistance)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetMinimumDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, distance});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetMaximumDistance
// Il2CppName: FMOD_Studio_EventDescription_GetMaximumDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetMaximumDistance)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetMaximumDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, distance});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetSoundSize
// Il2CppName: FMOD_Studio_EventDescription_GetSoundSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetSoundSize)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetSoundSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, size});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_IsSnapshot
// Il2CppName: FMOD_Studio_EventDescription_IsSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_IsSnapshot)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* snapshot = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_IsSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, snapshot});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_IsOneshot
// Il2CppName: FMOD_Studio_EventDescription_IsOneshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_IsOneshot)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* oneshot = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_IsOneshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, oneshot});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_IsStream
// Il2CppName: FMOD_Studio_EventDescription_IsStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_IsStream)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* isStream = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_IsStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, isStream});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_Is3D
// Il2CppName: FMOD_Studio_EventDescription_Is3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_Is3D)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* is3D = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_Is3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, is3D});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_HasCue
// Il2CppName: FMOD_Studio_EventDescription_HasCue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_HasCue)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* cue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_HasCue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, cue});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_CreateInstance
// Il2CppName: FMOD_Studio_EventDescription_CreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_CreateInstance)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_CreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, instance});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetInstanceCount
// Il2CppName: FMOD_Studio_EventDescription_GetInstanceCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetInstanceCount)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetInstanceCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetInstanceList
// Il2CppName: FMOD_Studio_EventDescription_GetInstanceList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<::System::IntPtr>, int, ByRef<int>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetInstanceList)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "IntPtr"), 1)->byval_arg;
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetInstanceList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, array, capacity, count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_LoadSampleData
// Il2CppName: FMOD_Studio_EventDescription_LoadSampleData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_LoadSampleData)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_LoadSampleData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_UnloadSampleData
// Il2CppName: FMOD_Studio_EventDescription_UnloadSampleData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_UnloadSampleData)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_UnloadSampleData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetSampleLoadingState
// Il2CppName: FMOD_Studio_EventDescription_GetSampleLoadingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::Studio::LOADING_STATE>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetSampleLoadingState)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "LOADING_STATE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetSampleLoadingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, state});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_ReleaseAllInstances
// Il2CppName: FMOD_Studio_EventDescription_ReleaseAllInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_ReleaseAllInstances)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_ReleaseAllInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_SetCallback
// Il2CppName: FMOD_Studio_EventDescription_SetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::Studio::EVENT_CALLBACK*, ::FMOD::Studio::EVENT_CALLBACK_TYPE)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_SetCallback)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EVENT_CALLBACK")->byval_arg;
    static auto* callbackmask = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EVENT_CALLBACK_TYPE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_SetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, callback, callbackmask});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetUserData
// Il2CppName: FMOD_Studio_EventDescription_GetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_GetUserData)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_GetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_SetUserData
// Il2CppName: FMOD_Studio_EventDescription_SetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::Studio::EventDescription::FMOD_Studio_EventDescription_SetUserData)> {
  static const MethodInfo* get() {
    static auto* eventdescription = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "FMOD_Studio_EventDescription_SetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventdescription, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::hasHandle
// Il2CppName: hasHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::Studio::EventDescription::*)()>(&FMOD::Studio::EventDescription::hasHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "hasHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::clearHandle
// Il2CppName: clearHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::Studio::EventDescription::*)()>(&FMOD::Studio::EventDescription::clearHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "clearHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EventDescription::isValid
// Il2CppName: isValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::Studio::EventDescription::*)()>(&FMOD::Studio::EventDescription::isValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EventDescription), "isValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
