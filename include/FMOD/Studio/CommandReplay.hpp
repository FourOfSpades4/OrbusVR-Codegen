// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
}
// Forward declaring namespace: FMOD::Studio
namespace FMOD::Studio {
  // Forward declaring type: System
  struct System;
  // Forward declaring type: COMMAND_INFO
  struct COMMAND_INFO;
  // Forward declaring type: PLAYBACK_STATE
  struct PLAYBACK_STATE;
  // Forward declaring type: COMMANDREPLAY_FRAME_CALLBACK
  class COMMANDREPLAY_FRAME_CALLBACK;
  // Forward declaring type: COMMANDREPLAY_LOAD_BANK_CALLBACK
  class COMMANDREPLAY_LOAD_BANK_CALLBACK;
  // Forward declaring type: COMMANDREPLAY_CREATE_INSTANCE_CALLBACK
  class COMMANDREPLAY_CREATE_INSTANCE_CALLBACK;
}
// Completed forward declares
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: CommandReplay
  struct CommandReplay;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::CommandReplay, "FMOD.Studio", "CommandReplay");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Studio.CommandReplay
  // [TokenAttribute] Offset: FFFFFFFF
  struct CommandReplay/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: CommandReplay
    constexpr CommandReplay(::System::IntPtr handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return handle;
    }
    // Get instance field reference: public System.IntPtr handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_handle();
    // public FMOD.RESULT getSystem(out FMOD.Studio.System system)
    // Offset: 0xBBDF24
    ::FMOD::RESULT getSystem(ByRef<::FMOD::Studio::System> system);
    // public FMOD.RESULT getLength(out System.Single totalTime)
    // Offset: 0xBBDF2C
    ::FMOD::RESULT getLength(ByRef<float> totalTime);
    // public FMOD.RESULT getCommandCount(out System.Int32 count)
    // Offset: 0xBBDF34
    ::FMOD::RESULT getCommandCount(ByRef<int> count);
    // public FMOD.RESULT getCommandInfo(System.Int32 commandIndex, out FMOD.Studio.COMMAND_INFO info)
    // Offset: 0xBBDF3C
    ::FMOD::RESULT getCommandInfo(int commandIndex, ByRef<::FMOD::Studio::COMMAND_INFO> info);
    // public FMOD.RESULT getCommandString(System.Int32 commandIndex, out System.String description)
    // Offset: 0xBBDF44
    ::FMOD::RESULT getCommandString(int commandIndex, ByRef<::StringW> description);
    // public FMOD.RESULT getCommandAtTime(System.Single time, out System.Int32 commandIndex)
    // Offset: 0xBBDF4C
    ::FMOD::RESULT getCommandAtTime(float time, ByRef<int> commandIndex);
    // public FMOD.RESULT setBankPath(System.String bankPath)
    // Offset: 0xBBDF54
    ::FMOD::RESULT setBankPath(::StringW bankPath);
    // public FMOD.RESULT start()
    // Offset: 0xBBDF5C
    ::FMOD::RESULT start();
    // public FMOD.RESULT stop()
    // Offset: 0xBBDF64
    ::FMOD::RESULT stop();
    // public FMOD.RESULT seekToTime(System.Single time)
    // Offset: 0xBBDF6C
    ::FMOD::RESULT seekToTime(float time);
    // public FMOD.RESULT seekToCommand(System.Int32 commandIndex)
    // Offset: 0xBBDF74
    ::FMOD::RESULT seekToCommand(int commandIndex);
    // public FMOD.RESULT getPaused(out System.Boolean paused)
    // Offset: 0xBBDF7C
    ::FMOD::RESULT getPaused(ByRef<bool> paused);
    // public FMOD.RESULT setPaused(System.Boolean paused)
    // Offset: 0xBBDF84
    ::FMOD::RESULT setPaused(bool paused);
    // public FMOD.RESULT getPlaybackState(out FMOD.Studio.PLAYBACK_STATE state)
    // Offset: 0xBBDF90
    ::FMOD::RESULT getPlaybackState(ByRef<::FMOD::Studio::PLAYBACK_STATE> state);
    // public FMOD.RESULT getCurrentCommand(out System.Int32 commandIndex, out System.Single currentTime)
    // Offset: 0xBBDF98
    ::FMOD::RESULT getCurrentCommand(ByRef<int> commandIndex, ByRef<float> currentTime);
    // public FMOD.RESULT release()
    // Offset: 0xBBDFA0
    ::FMOD::RESULT release();
    // public FMOD.RESULT setFrameCallback(FMOD.Studio.COMMANDREPLAY_FRAME_CALLBACK callback)
    // Offset: 0xBBDFA8
    ::FMOD::RESULT setFrameCallback(::FMOD::Studio::COMMANDREPLAY_FRAME_CALLBACK* callback);
    // public FMOD.RESULT setLoadBankCallback(FMOD.Studio.COMMANDREPLAY_LOAD_BANK_CALLBACK callback)
    // Offset: 0xBBDFB0
    ::FMOD::RESULT setLoadBankCallback(::FMOD::Studio::COMMANDREPLAY_LOAD_BANK_CALLBACK* callback);
    // public FMOD.RESULT setCreateInstanceCallback(FMOD.Studio.COMMANDREPLAY_CREATE_INSTANCE_CALLBACK callback)
    // Offset: 0xBBDFB8
    ::FMOD::RESULT setCreateInstanceCallback(::FMOD::Studio::COMMANDREPLAY_CREATE_INSTANCE_CALLBACK* callback);
    // public FMOD.RESULT getUserData(out System.IntPtr userdata)
    // Offset: 0xBBDFC0
    ::FMOD::RESULT getUserData(ByRef<::System::IntPtr> userdata);
    // public FMOD.RESULT setUserData(System.IntPtr userdata)
    // Offset: 0xBBDFC8
    ::FMOD::RESULT setUserData(::System::IntPtr userdata);
    // static private System.Boolean FMOD_Studio_CommandReplay_IsValid(System.IntPtr replay)
    // Offset: 0x22E96A4
    static bool FMOD_Studio_CommandReplay_IsValid(::System::IntPtr replay);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_GetSystem(System.IntPtr replay, out System.IntPtr system)
    // Offset: 0x22E8424
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_GetSystem(::System::IntPtr replay, ByRef<::System::IntPtr> system);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_GetLength(System.IntPtr replay, out System.Single totalTime)
    // Offset: 0x22E84D8
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_GetLength(::System::IntPtr replay, ByRef<float> totalTime);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_GetCommandCount(System.IntPtr replay, out System.Int32 count)
    // Offset: 0x22E858C
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_GetCommandCount(::System::IntPtr replay, ByRef<int> count);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_GetCommandInfo(System.IntPtr replay, System.Int32 commandIndex, out FMOD.Studio.COMMAND_INFO info)
    // Offset: 0x22E8640
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_GetCommandInfo(::System::IntPtr replay, int commandIndex, ByRef<::FMOD::Studio::COMMAND_INFO> info);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_GetCommandString(System.IntPtr replay, System.Int32 commandIndex, System.IntPtr description, System.Int32 capacity)
    // Offset: 0x22E893C
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_GetCommandString(::System::IntPtr replay, int commandIndex, ::System::IntPtr description, int capacity);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_GetCommandAtTime(System.IntPtr replay, System.Single time, out System.Int32 commandIndex)
    // Offset: 0x22E8A08
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_GetCommandAtTime(::System::IntPtr replay, float time, ByRef<int> commandIndex);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_SetBankPath(System.IntPtr replay, System.Byte[] bankPath)
    // Offset: 0x22E8C10
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_SetBankPath(::System::IntPtr replay, ::ArrayW<uint8_t> bankPath);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_Start(System.IntPtr replay)
    // Offset: 0x22E8CCC
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_Start(::System::IntPtr replay);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_Stop(System.IntPtr replay)
    // Offset: 0x22E8D70
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_Stop(::System::IntPtr replay);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_SeekToTime(System.IntPtr replay, System.Single time)
    // Offset: 0x22E8E14
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_SeekToTime(::System::IntPtr replay, float time);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_SeekToCommand(System.IntPtr replay, System.Int32 commandIndex)
    // Offset: 0x22E8EC8
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_SeekToCommand(::System::IntPtr replay, int commandIndex);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_GetPaused(System.IntPtr replay, out System.Boolean paused)
    // Offset: 0x22E8F7C
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_GetPaused(::System::IntPtr replay, ByRef<bool> paused);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_SetPaused(System.IntPtr replay, System.Boolean paused)
    // Offset: 0x22E9048
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_SetPaused(::System::IntPtr replay, bool paused);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_GetPlaybackState(System.IntPtr replay, out FMOD.Studio.PLAYBACK_STATE state)
    // Offset: 0x22E90FC
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_GetPlaybackState(::System::IntPtr replay, ByRef<::FMOD::Studio::PLAYBACK_STATE> state);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_GetCurrentCommand(System.IntPtr replay, out System.Int32 commandIndex, out System.Single currentTime)
    // Offset: 0x22E91B0
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_GetCurrentCommand(::System::IntPtr replay, ByRef<int> commandIndex, ByRef<float> currentTime);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_Release(System.IntPtr replay)
    // Offset: 0x22E926C
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_Release(::System::IntPtr replay);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_SetFrameCallback(System.IntPtr replay, FMOD.Studio.COMMANDREPLAY_FRAME_CALLBACK callback)
    // Offset: 0x22E9310
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_SetFrameCallback(::System::IntPtr replay, ::FMOD::Studio::COMMANDREPLAY_FRAME_CALLBACK* callback);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_SetLoadBankCallback(System.IntPtr replay, FMOD.Studio.COMMANDREPLAY_LOAD_BANK_CALLBACK callback)
    // Offset: 0x22E93CC
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_SetLoadBankCallback(::System::IntPtr replay, ::FMOD::Studio::COMMANDREPLAY_LOAD_BANK_CALLBACK* callback);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_SetCreateInstanceCallback(System.IntPtr replay, FMOD.Studio.COMMANDREPLAY_CREATE_INSTANCE_CALLBACK callback)
    // Offset: 0x22E9488
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_SetCreateInstanceCallback(::System::IntPtr replay, ::FMOD::Studio::COMMANDREPLAY_CREATE_INSTANCE_CALLBACK* callback);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_GetUserData(System.IntPtr replay, out System.IntPtr userdata)
    // Offset: 0x22E9544
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_GetUserData(::System::IntPtr replay, ByRef<::System::IntPtr> userdata);
    // static private FMOD.RESULT FMOD_Studio_CommandReplay_SetUserData(System.IntPtr replay, System.IntPtr userdata)
    // Offset: 0x22E95F8
    static ::FMOD::RESULT FMOD_Studio_CommandReplay_SetUserData(::System::IntPtr replay, ::System::IntPtr userdata);
    // public System.Boolean hasHandle()
    // Offset: 0xBBDFD0
    bool hasHandle();
    // public System.Void clearHandle()
    // Offset: 0xBBDFD8
    void clearHandle();
    // public System.Boolean isValid()
    // Offset: 0xBBE01C
    bool isValid();
  }; // FMOD.Studio.CommandReplay
  #pragma pack(pop)
  static check_size<sizeof(CommandReplay), 0 + sizeof(::System::IntPtr)> __FMOD_Studio_CommandReplaySizeCheck;
  static_assert(sizeof(CommandReplay) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::getSystem
// Il2CppName: getSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(ByRef<::FMOD::Studio::System>)>(&FMOD::Studio::CommandReplay::getSystem)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "System")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "getSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::getLength
// Il2CppName: getLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(ByRef<float>)>(&FMOD::Studio::CommandReplay::getLength)> {
  static const MethodInfo* get() {
    static auto* totalTime = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "getLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{totalTime});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::getCommandCount
// Il2CppName: getCommandCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(ByRef<int>)>(&FMOD::Studio::CommandReplay::getCommandCount)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "getCommandCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::getCommandInfo
// Il2CppName: getCommandInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(int, ByRef<::FMOD::Studio::COMMAND_INFO>)>(&FMOD::Studio::CommandReplay::getCommandInfo)> {
  static const MethodInfo* get() {
    static auto* commandIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "COMMAND_INFO")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "getCommandInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{commandIndex, info});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::getCommandString
// Il2CppName: getCommandString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(int, ByRef<::StringW>)>(&FMOD::Studio::CommandReplay::getCommandString)> {
  static const MethodInfo* get() {
    static auto* commandIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* description = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "getCommandString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{commandIndex, description});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::getCommandAtTime
// Il2CppName: getCommandAtTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(float, ByRef<int>)>(&FMOD::Studio::CommandReplay::getCommandAtTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* commandIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "getCommandAtTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, commandIndex});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::setBankPath
// Il2CppName: setBankPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(::StringW)>(&FMOD::Studio::CommandReplay::setBankPath)> {
  static const MethodInfo* get() {
    static auto* bankPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "setBankPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bankPath});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::start
// Il2CppName: start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)()>(&FMOD::Studio::CommandReplay::start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::stop
// Il2CppName: stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)()>(&FMOD::Studio::CommandReplay::stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::seekToTime
// Il2CppName: seekToTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(float)>(&FMOD::Studio::CommandReplay::seekToTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "seekToTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::seekToCommand
// Il2CppName: seekToCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(int)>(&FMOD::Studio::CommandReplay::seekToCommand)> {
  static const MethodInfo* get() {
    static auto* commandIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "seekToCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{commandIndex});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::getPaused
// Il2CppName: getPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(ByRef<bool>)>(&FMOD::Studio::CommandReplay::getPaused)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "getPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::setPaused
// Il2CppName: setPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(bool)>(&FMOD::Studio::CommandReplay::setPaused)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "setPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::getPlaybackState
// Il2CppName: getPlaybackState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(ByRef<::FMOD::Studio::PLAYBACK_STATE>)>(&FMOD::Studio::CommandReplay::getPlaybackState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "PLAYBACK_STATE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "getPlaybackState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::getCurrentCommand
// Il2CppName: getCurrentCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(ByRef<int>, ByRef<float>)>(&FMOD::Studio::CommandReplay::getCurrentCommand)> {
  static const MethodInfo* get() {
    static auto* commandIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "getCurrentCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{commandIndex, currentTime});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::release
// Il2CppName: release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)()>(&FMOD::Studio::CommandReplay::release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::setFrameCallback
// Il2CppName: setFrameCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(::FMOD::Studio::COMMANDREPLAY_FRAME_CALLBACK*)>(&FMOD::Studio::CommandReplay::setFrameCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "COMMANDREPLAY_FRAME_CALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "setFrameCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::setLoadBankCallback
// Il2CppName: setLoadBankCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(::FMOD::Studio::COMMANDREPLAY_LOAD_BANK_CALLBACK*)>(&FMOD::Studio::CommandReplay::setLoadBankCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "COMMANDREPLAY_LOAD_BANK_CALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "setLoadBankCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::setCreateInstanceCallback
// Il2CppName: setCreateInstanceCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(::FMOD::Studio::COMMANDREPLAY_CREATE_INSTANCE_CALLBACK*)>(&FMOD::Studio::CommandReplay::setCreateInstanceCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "COMMANDREPLAY_CREATE_INSTANCE_CALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "setCreateInstanceCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::getUserData
// Il2CppName: getUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(ByRef<::System::IntPtr>)>(&FMOD::Studio::CommandReplay::getUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "getUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::setUserData
// Il2CppName: setUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::CommandReplay::*)(::System::IntPtr)>(&FMOD::Studio::CommandReplay::setUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "setUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_IsValid
// Il2CppName: FMOD_Studio_CommandReplay_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_IsValid)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetSystem
// Il2CppName: FMOD_Studio_CommandReplay_GetSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetSystem)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_GetSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, system});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetLength
// Il2CppName: FMOD_Studio_CommandReplay_GetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetLength)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* totalTime = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_GetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, totalTime});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetCommandCount
// Il2CppName: FMOD_Studio_CommandReplay_GetCommandCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetCommandCount)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_GetCommandCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, count});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetCommandInfo
// Il2CppName: FMOD_Studio_CommandReplay_GetCommandInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::FMOD::Studio::COMMAND_INFO>)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetCommandInfo)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* commandIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "COMMAND_INFO")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_GetCommandInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, commandIndex, info});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetCommandString
// Il2CppName: FMOD_Studio_CommandReplay_GetCommandString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ::System::IntPtr, int)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetCommandString)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* commandIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* description = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_GetCommandString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, commandIndex, description, capacity});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetCommandAtTime
// Il2CppName: FMOD_Studio_CommandReplay_GetCommandAtTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float, ByRef<int>)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetCommandAtTime)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* commandIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_GetCommandAtTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, time, commandIndex});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SetBankPath
// Il2CppName: FMOD_Studio_CommandReplay_SetBankPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<uint8_t>)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SetBankPath)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* bankPath = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_SetBankPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, bankPath});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_Start
// Il2CppName: FMOD_Studio_CommandReplay_Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_Start)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_Stop
// Il2CppName: FMOD_Studio_CommandReplay_Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_Stop)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SeekToTime
// Il2CppName: FMOD_Studio_CommandReplay_SeekToTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SeekToTime)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_SeekToTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, time});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SeekToCommand
// Il2CppName: FMOD_Studio_CommandReplay_SeekToCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SeekToCommand)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* commandIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_SeekToCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, commandIndex});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetPaused
// Il2CppName: FMOD_Studio_CommandReplay_GetPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetPaused)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_GetPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, paused});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SetPaused
// Il2CppName: FMOD_Studio_CommandReplay_SetPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SetPaused)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_SetPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, paused});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetPlaybackState
// Il2CppName: FMOD_Studio_CommandReplay_GetPlaybackState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::Studio::PLAYBACK_STATE>)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetPlaybackState)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "PLAYBACK_STATE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_GetPlaybackState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, state});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetCurrentCommand
// Il2CppName: FMOD_Studio_CommandReplay_GetCurrentCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>, ByRef<float>)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetCurrentCommand)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* commandIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_GetCurrentCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, commandIndex, currentTime});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_Release
// Il2CppName: FMOD_Studio_CommandReplay_Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_Release)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SetFrameCallback
// Il2CppName: FMOD_Studio_CommandReplay_SetFrameCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::Studio::COMMANDREPLAY_FRAME_CALLBACK*)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SetFrameCallback)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "COMMANDREPLAY_FRAME_CALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_SetFrameCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, callback});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SetLoadBankCallback
// Il2CppName: FMOD_Studio_CommandReplay_SetLoadBankCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::Studio::COMMANDREPLAY_LOAD_BANK_CALLBACK*)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SetLoadBankCallback)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "COMMANDREPLAY_LOAD_BANK_CALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_SetLoadBankCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, callback});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SetCreateInstanceCallback
// Il2CppName: FMOD_Studio_CommandReplay_SetCreateInstanceCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::Studio::COMMANDREPLAY_CREATE_INSTANCE_CALLBACK*)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SetCreateInstanceCallback)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "COMMANDREPLAY_CREATE_INSTANCE_CALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_SetCreateInstanceCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, callback});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetUserData
// Il2CppName: FMOD_Studio_CommandReplay_GetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_GetUserData)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_GetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SetUserData
// Il2CppName: FMOD_Studio_CommandReplay_SetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::Studio::CommandReplay::FMOD_Studio_CommandReplay_SetUserData)> {
  static const MethodInfo* get() {
    static auto* replay = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "FMOD_Studio_CommandReplay_SetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{replay, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::hasHandle
// Il2CppName: hasHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::Studio::CommandReplay::*)()>(&FMOD::Studio::CommandReplay::hasHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "hasHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::clearHandle
// Il2CppName: clearHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::Studio::CommandReplay::*)()>(&FMOD::Studio::CommandReplay::clearHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "clearHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::CommandReplay::isValid
// Il2CppName: isValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::Studio::CommandReplay::*)()>(&FMOD::Studio::CommandReplay::isValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::CommandReplay), "isValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
