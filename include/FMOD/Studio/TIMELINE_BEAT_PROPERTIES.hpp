// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: TIMELINE_BEAT_PROPERTIES
  struct TIMELINE_BEAT_PROPERTIES;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::TIMELINE_BEAT_PROPERTIES, "FMOD.Studio", "TIMELINE_BEAT_PROPERTIES");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Studio.TIMELINE_BEAT_PROPERTIES
  // [TokenAttribute] Offset: FFFFFFFF
  struct TIMELINE_BEAT_PROPERTIES/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 bar
    // Size: 0x4
    // Offset: 0x0
    int bar;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 beat
    // Size: 0x4
    // Offset: 0x4
    int beat;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 position
    // Size: 0x4
    // Offset: 0x8
    int position;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single tempo
    // Size: 0x4
    // Offset: 0xC
    float tempo;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 timesignatureupper
    // Size: 0x4
    // Offset: 0x10
    int timesignatureupper;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 timesignaturelower
    // Size: 0x4
    // Offset: 0x14
    int timesignaturelower;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TIMELINE_BEAT_PROPERTIES
    constexpr TIMELINE_BEAT_PROPERTIES(int bar_ = {}, int beat_ = {}, int position_ = {}, float tempo_ = {}, int timesignatureupper_ = {}, int timesignaturelower_ = {}) noexcept : bar{bar_}, beat{beat_}, position{position_}, tempo{tempo_}, timesignatureupper{timesignatureupper_}, timesignaturelower{timesignaturelower_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 bar
    [[deprecated("Use field access instead!")]] int& dyn_bar();
    // Get instance field reference: public System.Int32 beat
    [[deprecated("Use field access instead!")]] int& dyn_beat();
    // Get instance field reference: public System.Int32 position
    [[deprecated("Use field access instead!")]] int& dyn_position();
    // Get instance field reference: public System.Single tempo
    [[deprecated("Use field access instead!")]] float& dyn_tempo();
    // Get instance field reference: public System.Int32 timesignatureupper
    [[deprecated("Use field access instead!")]] int& dyn_timesignatureupper();
    // Get instance field reference: public System.Int32 timesignaturelower
    [[deprecated("Use field access instead!")]] int& dyn_timesignaturelower();
  }; // FMOD.Studio.TIMELINE_BEAT_PROPERTIES
  #pragma pack(pop)
  static check_size<sizeof(TIMELINE_BEAT_PROPERTIES), 20 + sizeof(int)> __FMOD_Studio_TIMELINE_BEAT_PROPERTIESSizeCheck;
  static_assert(sizeof(TIMELINE_BEAT_PROPERTIES) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
