// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: CPU_USAGE
  struct CPU_USAGE;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::CPU_USAGE, "FMOD.Studio", "CPU_USAGE");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Studio.CPU_USAGE
  // [TokenAttribute] Offset: FFFFFFFF
  struct CPU_USAGE/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single dspusage
    // Size: 0x4
    // Offset: 0x0
    float dspusage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single streamusage
    // Size: 0x4
    // Offset: 0x4
    float streamusage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single geometryusage
    // Size: 0x4
    // Offset: 0x8
    float geometryusage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single updateusage
    // Size: 0x4
    // Offset: 0xC
    float updateusage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single studiousage
    // Size: 0x4
    // Offset: 0x10
    float studiousage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: CPU_USAGE
    constexpr CPU_USAGE(float dspusage_ = {}, float streamusage_ = {}, float geometryusage_ = {}, float updateusage_ = {}, float studiousage_ = {}) noexcept : dspusage{dspusage_}, streamusage{streamusage_}, geometryusage{geometryusage_}, updateusage{updateusage_}, studiousage{studiousage_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single dspusage
    [[deprecated("Use field access instead!")]] float& dyn_dspusage();
    // Get instance field reference: public System.Single streamusage
    [[deprecated("Use field access instead!")]] float& dyn_streamusage();
    // Get instance field reference: public System.Single geometryusage
    [[deprecated("Use field access instead!")]] float& dyn_geometryusage();
    // Get instance field reference: public System.Single updateusage
    [[deprecated("Use field access instead!")]] float& dyn_updateusage();
    // Get instance field reference: public System.Single studiousage
    [[deprecated("Use field access instead!")]] float& dyn_studiousage();
  }; // FMOD.Studio.CPU_USAGE
  #pragma pack(pop)
  static check_size<sizeof(CPU_USAGE), 16 + sizeof(float)> __FMOD_Studio_CPU_USAGESizeCheck;
  static_assert(sizeof(CPU_USAGE) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
