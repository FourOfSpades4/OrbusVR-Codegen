// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: USER_PROPERTY_TYPE
  struct USER_PROPERTY_TYPE;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::USER_PROPERTY_TYPE, "FMOD.Studio", "USER_PROPERTY_TYPE");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.Studio.USER_PROPERTY_TYPE
  // [TokenAttribute] Offset: FFFFFFFF
  struct USER_PROPERTY_TYPE/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: USER_PROPERTY_TYPE
    constexpr USER_PROPERTY_TYPE(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.Studio.USER_PROPERTY_TYPE INTEGER
    static constexpr const int INTEGER = 0;
    // Get static field: static public FMOD.Studio.USER_PROPERTY_TYPE INTEGER
    static ::FMOD::Studio::USER_PROPERTY_TYPE _get_INTEGER();
    // Set static field: static public FMOD.Studio.USER_PROPERTY_TYPE INTEGER
    static void _set_INTEGER(::FMOD::Studio::USER_PROPERTY_TYPE value);
    // static field const value: static public FMOD.Studio.USER_PROPERTY_TYPE BOOLEAN
    static constexpr const int BOOLEAN = 1;
    // Get static field: static public FMOD.Studio.USER_PROPERTY_TYPE BOOLEAN
    static ::FMOD::Studio::USER_PROPERTY_TYPE _get_BOOLEAN();
    // Set static field: static public FMOD.Studio.USER_PROPERTY_TYPE BOOLEAN
    static void _set_BOOLEAN(::FMOD::Studio::USER_PROPERTY_TYPE value);
    // static field const value: static public FMOD.Studio.USER_PROPERTY_TYPE FLOAT
    static constexpr const int FLOAT = 2;
    // Get static field: static public FMOD.Studio.USER_PROPERTY_TYPE FLOAT
    static ::FMOD::Studio::USER_PROPERTY_TYPE _get_FLOAT();
    // Set static field: static public FMOD.Studio.USER_PROPERTY_TYPE FLOAT
    static void _set_FLOAT(::FMOD::Studio::USER_PROPERTY_TYPE value);
    // static field const value: static public FMOD.Studio.USER_PROPERTY_TYPE STRING
    static constexpr const int STRING = 3;
    // Get static field: static public FMOD.Studio.USER_PROPERTY_TYPE STRING
    static ::FMOD::Studio::USER_PROPERTY_TYPE _get_STRING();
    // Set static field: static public FMOD.Studio.USER_PROPERTY_TYPE STRING
    static void _set_STRING(::FMOD::Studio::USER_PROPERTY_TYPE value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // FMOD.Studio.USER_PROPERTY_TYPE
  #pragma pack(pop)
  static check_size<sizeof(USER_PROPERTY_TYPE), 0 + sizeof(int)> __FMOD_Studio_USER_PROPERTY_TYPESizeCheck;
  static_assert(sizeof(USER_PROPERTY_TYPE) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
