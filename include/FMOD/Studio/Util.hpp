// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Guid
  struct Guid;
}
// Completed forward declares
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: Util
  struct Util;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::Util, "FMOD.Studio", "Util");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Size: 0x0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Studio.Util
  // [TokenAttribute] Offset: FFFFFFFF
  struct Util/*, public ::System::ValueType*/ {
    public:
    // Creating value type constructor for type: Util
    constexpr Util() noexcept {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static public FMOD.RESULT ParseID(System.String idString, out System.Guid id)
    // Offset: 0x15CD0C8
    static ::FMOD::RESULT ParseID(::StringW idString, ByRef<::System::Guid> id);
    // static private FMOD.RESULT FMOD_Studio_ParseID(System.Byte[] idString, out System.Guid id)
    // Offset: 0x15CD214
    static ::FMOD::RESULT FMOD_Studio_ParseID(::ArrayW<uint8_t> idString, ByRef<::System::Guid> id);
  }; // FMOD.Studio.Util
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::Studio::Util::ParseID
// Il2CppName: ParseID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::StringW, ByRef<::System::Guid>)>(&FMOD::Studio::Util::ParseID)> {
  static const MethodInfo* get() {
    static auto* idString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::Util), "ParseID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idString, id});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::Util::FMOD_Studio_ParseID
// Il2CppName: FMOD_Studio_ParseID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::ArrayW<uint8_t>, ByRef<::System::Guid>)>(&FMOD::Studio::Util::FMOD_Studio_ParseID)> {
  static const MethodInfo* get() {
    static auto* idString = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Guid")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::Util), "FMOD_Studio_ParseID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idString, id});
  }
};
