// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
}
// Forward declaring namespace: FMOD::Studio
namespace FMOD::Studio {
  // Forward declaring type: EVENT_CALLBACK_TYPE
  struct EVENT_CALLBACK_TYPE;
  // Forward declaring type: EventInstance
  struct EventInstance;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: EVENT_CALLBACK
  class EVENT_CALLBACK;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::FMOD::Studio::EVENT_CALLBACK);
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::EVENT_CALLBACK*, "FMOD.Studio", "EVENT_CALLBACK");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.Studio.EVENT_CALLBACK
  // [TokenAttribute] Offset: FFFFFFFF
  class EVENT_CALLBACK : public ::System::MulticastDelegate {
    public:
    // public System.Void .ctor(System.Object object, System.IntPtr method)
    // Offset: 0x22E9810
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EVENT_CALLBACK* New_ctor(::Il2CppObject* object, ::System::IntPtr method) {
      static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Studio::EVENT_CALLBACK::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EVENT_CALLBACK*, creationType>(object, method)));
    }
    // public FMOD.RESULT Invoke(FMOD.Studio.EVENT_CALLBACK_TYPE type, FMOD.Studio.EventInstance eventInstance, System.IntPtr parameters)
    // Offset: 0x22E9820
    ::FMOD::RESULT Invoke(::FMOD::Studio::EVENT_CALLBACK_TYPE type, ::FMOD::Studio::EventInstance eventInstance, ::System::IntPtr parameters);
    // public System.IAsyncResult BeginInvoke(FMOD.Studio.EVENT_CALLBACK_TYPE type, FMOD.Studio.EventInstance eventInstance, System.IntPtr parameters, System.AsyncCallback callback, System.Object object)
    // Offset: 0x22E9CD8
    ::System::IAsyncResult* BeginInvoke(::FMOD::Studio::EVENT_CALLBACK_TYPE type, ::FMOD::Studio::EventInstance eventInstance, ::System::IntPtr parameters, ::System::AsyncCallback* callback, ::Il2CppObject* object);
    // public FMOD.RESULT EndInvoke(System.IAsyncResult result)
    // Offset: 0x22E9DA4
    ::FMOD::RESULT EndInvoke(::System::IAsyncResult* result);
  }; // FMOD.Studio.EVENT_CALLBACK
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::Studio::EVENT_CALLBACK::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: FMOD::Studio::EVENT_CALLBACK::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EVENT_CALLBACK::*)(::FMOD::Studio::EVENT_CALLBACK_TYPE, ::FMOD::Studio::EventInstance, ::System::IntPtr)>(&FMOD::Studio::EVENT_CALLBACK::Invoke)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EVENT_CALLBACK_TYPE")->byval_arg;
    static auto* eventInstance = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EventInstance")->byval_arg;
    static auto* parameters = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EVENT_CALLBACK*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, eventInstance, parameters});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EVENT_CALLBACK::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (FMOD::Studio::EVENT_CALLBACK::*)(::FMOD::Studio::EVENT_CALLBACK_TYPE, ::FMOD::Studio::EventInstance, ::System::IntPtr, ::System::AsyncCallback*, ::Il2CppObject*)>(&FMOD::Studio::EVENT_CALLBACK::BeginInvoke)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EVENT_CALLBACK_TYPE")->byval_arg;
    static auto* eventInstance = &::il2cpp_utils::GetClassFromName("FMOD.Studio", "EventInstance")->byval_arg;
    static auto* parameters = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* object = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EVENT_CALLBACK*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, eventInstance, parameters, callback, object});
  }
};
// Writing MetadataGetter for method: FMOD::Studio::EVENT_CALLBACK::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Studio::EVENT_CALLBACK::*)(::System::IAsyncResult*)>(&FMOD::Studio::EVENT_CALLBACK::EndInvoke)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Studio::EVENT_CALLBACK*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
