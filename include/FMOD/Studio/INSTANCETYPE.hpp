// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Forward declaring type: INSTANCETYPE
  struct INSTANCETYPE;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Studio::INSTANCETYPE, "FMOD.Studio", "INSTANCETYPE");
// Type namespace: FMOD.Studio
namespace FMOD::Studio {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.Studio.INSTANCETYPE
  // [TokenAttribute] Offset: FFFFFFFF
  struct INSTANCETYPE/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: INSTANCETYPE
    constexpr INSTANCETYPE(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.Studio.INSTANCETYPE NONE
    static constexpr const int NONE = 0;
    // Get static field: static public FMOD.Studio.INSTANCETYPE NONE
    static ::FMOD::Studio::INSTANCETYPE _get_NONE();
    // Set static field: static public FMOD.Studio.INSTANCETYPE NONE
    static void _set_NONE(::FMOD::Studio::INSTANCETYPE value);
    // static field const value: static public FMOD.Studio.INSTANCETYPE SYSTEM
    static constexpr const int SYSTEM = 1;
    // Get static field: static public FMOD.Studio.INSTANCETYPE SYSTEM
    static ::FMOD::Studio::INSTANCETYPE _get_SYSTEM();
    // Set static field: static public FMOD.Studio.INSTANCETYPE SYSTEM
    static void _set_SYSTEM(::FMOD::Studio::INSTANCETYPE value);
    // static field const value: static public FMOD.Studio.INSTANCETYPE EVENTDESCRIPTION
    static constexpr const int EVENTDESCRIPTION = 2;
    // Get static field: static public FMOD.Studio.INSTANCETYPE EVENTDESCRIPTION
    static ::FMOD::Studio::INSTANCETYPE _get_EVENTDESCRIPTION();
    // Set static field: static public FMOD.Studio.INSTANCETYPE EVENTDESCRIPTION
    static void _set_EVENTDESCRIPTION(::FMOD::Studio::INSTANCETYPE value);
    // static field const value: static public FMOD.Studio.INSTANCETYPE EVENTINSTANCE
    static constexpr const int EVENTINSTANCE = 3;
    // Get static field: static public FMOD.Studio.INSTANCETYPE EVENTINSTANCE
    static ::FMOD::Studio::INSTANCETYPE _get_EVENTINSTANCE();
    // Set static field: static public FMOD.Studio.INSTANCETYPE EVENTINSTANCE
    static void _set_EVENTINSTANCE(::FMOD::Studio::INSTANCETYPE value);
    // static field const value: static public FMOD.Studio.INSTANCETYPE PARAMETERINSTANCE
    static constexpr const int PARAMETERINSTANCE = 4;
    // Get static field: static public FMOD.Studio.INSTANCETYPE PARAMETERINSTANCE
    static ::FMOD::Studio::INSTANCETYPE _get_PARAMETERINSTANCE();
    // Set static field: static public FMOD.Studio.INSTANCETYPE PARAMETERINSTANCE
    static void _set_PARAMETERINSTANCE(::FMOD::Studio::INSTANCETYPE value);
    // static field const value: static public FMOD.Studio.INSTANCETYPE BUS
    static constexpr const int BUS = 5;
    // Get static field: static public FMOD.Studio.INSTANCETYPE BUS
    static ::FMOD::Studio::INSTANCETYPE _get_BUS();
    // Set static field: static public FMOD.Studio.INSTANCETYPE BUS
    static void _set_BUS(::FMOD::Studio::INSTANCETYPE value);
    // static field const value: static public FMOD.Studio.INSTANCETYPE VCA
    static constexpr const int VCA = 6;
    // Get static field: static public FMOD.Studio.INSTANCETYPE VCA
    static ::FMOD::Studio::INSTANCETYPE _get_VCA();
    // Set static field: static public FMOD.Studio.INSTANCETYPE VCA
    static void _set_VCA(::FMOD::Studio::INSTANCETYPE value);
    // static field const value: static public FMOD.Studio.INSTANCETYPE BANK
    static constexpr const int BANK = 7;
    // Get static field: static public FMOD.Studio.INSTANCETYPE BANK
    static ::FMOD::Studio::INSTANCETYPE _get_BANK();
    // Set static field: static public FMOD.Studio.INSTANCETYPE BANK
    static void _set_BANK(::FMOD::Studio::INSTANCETYPE value);
    // static field const value: static public FMOD.Studio.INSTANCETYPE COMMANDREPLAY
    static constexpr const int COMMANDREPLAY = 8;
    // Get static field: static public FMOD.Studio.INSTANCETYPE COMMANDREPLAY
    static ::FMOD::Studio::INSTANCETYPE _get_COMMANDREPLAY();
    // Set static field: static public FMOD.Studio.INSTANCETYPE COMMANDREPLAY
    static void _set_COMMANDREPLAY(::FMOD::Studio::INSTANCETYPE value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // FMOD.Studio.INSTANCETYPE
  #pragma pack(pop)
  static check_size<sizeof(INSTANCETYPE), 0 + sizeof(int)> __FMOD_Studio_INSTANCETYPESizeCheck;
  static_assert(sizeof(INSTANCETYPE) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
