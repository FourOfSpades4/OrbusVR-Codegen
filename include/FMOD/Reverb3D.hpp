// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
  // Forward declaring type: VECTOR
  struct VECTOR;
  // Forward declaring type: REVERB_PROPERTIES
  struct REVERB_PROPERTIES;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: Reverb3D
  struct Reverb3D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Reverb3D, "FMOD", "Reverb3D");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Reverb3D
  // [TokenAttribute] Offset: FFFFFFFF
  struct Reverb3D/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: Reverb3D
    constexpr Reverb3D(::System::IntPtr handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return handle;
    }
    // Get instance field reference: public System.IntPtr handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_handle();
    // public FMOD.RESULT release()
    // Offset: 0xBBD87C
    ::FMOD::RESULT release();
    // public FMOD.RESULT set3DAttributes(ref FMOD.VECTOR position, System.Single mindistance, System.Single maxdistance)
    // Offset: 0xBBD884
    ::FMOD::RESULT set3DAttributes(ByRef<::FMOD::VECTOR> position, float mindistance, float maxdistance);
    // public FMOD.RESULT get3DAttributes(ref FMOD.VECTOR position, ref System.Single mindistance, ref System.Single maxdistance)
    // Offset: 0xBBD88C
    ::FMOD::RESULT get3DAttributes(ByRef<::FMOD::VECTOR> position, ByRef<float> mindistance, ByRef<float> maxdistance);
    // public FMOD.RESULT setProperties(ref FMOD.REVERB_PROPERTIES properties)
    // Offset: 0xBBD894
    ::FMOD::RESULT setProperties(ByRef<::FMOD::REVERB_PROPERTIES> properties);
    // public FMOD.RESULT getProperties(ref FMOD.REVERB_PROPERTIES properties)
    // Offset: 0xBBD89C
    ::FMOD::RESULT getProperties(ByRef<::FMOD::REVERB_PROPERTIES> properties);
    // public FMOD.RESULT setActive(System.Boolean active)
    // Offset: 0xBBD8A4
    ::FMOD::RESULT setActive(bool active);
    // public FMOD.RESULT getActive(out System.Boolean active)
    // Offset: 0xBBD8B0
    ::FMOD::RESULT getActive(ByRef<bool> active);
    // public FMOD.RESULT setUserData(System.IntPtr userdata)
    // Offset: 0xBBD8B8
    ::FMOD::RESULT setUserData(::System::IntPtr userdata);
    // public FMOD.RESULT getUserData(out System.IntPtr userdata)
    // Offset: 0xBBD8C0
    ::FMOD::RESULT getUserData(ByRef<::System::IntPtr> userdata);
    // static private FMOD.RESULT FMOD5_Reverb3D_Release(System.IntPtr reverb)
    // Offset: 0x22DF384
    static ::FMOD::RESULT FMOD5_Reverb3D_Release(::System::IntPtr reverb);
    // static private FMOD.RESULT FMOD5_Reverb3D_Set3DAttributes(System.IntPtr reverb, ref FMOD.VECTOR position, System.Single mindistance, System.Single maxdistance)
    // Offset: 0x22DF428
    static ::FMOD::RESULT FMOD5_Reverb3D_Set3DAttributes(::System::IntPtr reverb, ByRef<::FMOD::VECTOR> position, float mindistance, float maxdistance);
    // static private FMOD.RESULT FMOD5_Reverb3D_Get3DAttributes(System.IntPtr reverb, ref FMOD.VECTOR position, ref System.Single mindistance, ref System.Single maxdistance)
    // Offset: 0x22DF4F4
    static ::FMOD::RESULT FMOD5_Reverb3D_Get3DAttributes(::System::IntPtr reverb, ByRef<::FMOD::VECTOR> position, ByRef<float> mindistance, ByRef<float> maxdistance);
    // static private FMOD.RESULT FMOD5_Reverb3D_SetProperties(System.IntPtr reverb, ref FMOD.REVERB_PROPERTIES properties)
    // Offset: 0x22DF5C0
    static ::FMOD::RESULT FMOD5_Reverb3D_SetProperties(::System::IntPtr reverb, ByRef<::FMOD::REVERB_PROPERTIES> properties);
    // static private FMOD.RESULT FMOD5_Reverb3D_GetProperties(System.IntPtr reverb, ref FMOD.REVERB_PROPERTIES properties)
    // Offset: 0x22DF674
    static ::FMOD::RESULT FMOD5_Reverb3D_GetProperties(::System::IntPtr reverb, ByRef<::FMOD::REVERB_PROPERTIES> properties);
    // static private FMOD.RESULT FMOD5_Reverb3D_SetActive(System.IntPtr reverb, System.Boolean active)
    // Offset: 0x22DF72C
    static ::FMOD::RESULT FMOD5_Reverb3D_SetActive(::System::IntPtr reverb, bool active);
    // static private FMOD.RESULT FMOD5_Reverb3D_GetActive(System.IntPtr reverb, out System.Boolean active)
    // Offset: 0x22DF7E0
    static ::FMOD::RESULT FMOD5_Reverb3D_GetActive(::System::IntPtr reverb, ByRef<bool> active);
    // static private FMOD.RESULT FMOD5_Reverb3D_SetUserData(System.IntPtr reverb, System.IntPtr userdata)
    // Offset: 0x22DF8A8
    static ::FMOD::RESULT FMOD5_Reverb3D_SetUserData(::System::IntPtr reverb, ::System::IntPtr userdata);
    // static private FMOD.RESULT FMOD5_Reverb3D_GetUserData(System.IntPtr reverb, out System.IntPtr userdata)
    // Offset: 0x22DF95C
    static ::FMOD::RESULT FMOD5_Reverb3D_GetUserData(::System::IntPtr reverb, ByRef<::System::IntPtr> userdata);
    // public System.Boolean hasHandle()
    // Offset: 0xBBD8C8
    bool hasHandle();
    // public System.Void clearHandle()
    // Offset: 0xBBD8D0
    void clearHandle();
  }; // FMOD.Reverb3D
  #pragma pack(pop)
  static check_size<sizeof(Reverb3D), 0 + sizeof(::System::IntPtr)> __FMOD_Reverb3DSizeCheck;
  static_assert(sizeof(Reverb3D) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::Reverb3D::release
// Il2CppName: release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Reverb3D::*)()>(&FMOD::Reverb3D::release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::set3DAttributes
// Il2CppName: set3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Reverb3D::*)(ByRef<::FMOD::VECTOR>, float, float)>(&FMOD::Reverb3D::set3DAttributes)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* mindistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxdistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "set3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, mindistance, maxdistance});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::get3DAttributes
// Il2CppName: get3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Reverb3D::*)(ByRef<::FMOD::VECTOR>, ByRef<float>, ByRef<float>)>(&FMOD::Reverb3D::get3DAttributes)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* mindistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* maxdistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "get3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, mindistance, maxdistance});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::setProperties
// Il2CppName: setProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Reverb3D::*)(ByRef<::FMOD::REVERB_PROPERTIES>)>(&FMOD::Reverb3D::setProperties)> {
  static const MethodInfo* get() {
    static auto* properties = &::il2cpp_utils::GetClassFromName("FMOD", "REVERB_PROPERTIES")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "setProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{properties});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::getProperties
// Il2CppName: getProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Reverb3D::*)(ByRef<::FMOD::REVERB_PROPERTIES>)>(&FMOD::Reverb3D::getProperties)> {
  static const MethodInfo* get() {
    static auto* properties = &::il2cpp_utils::GetClassFromName("FMOD", "REVERB_PROPERTIES")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "getProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{properties});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::setActive
// Il2CppName: setActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Reverb3D::*)(bool)>(&FMOD::Reverb3D::setActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "setActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::getActive
// Il2CppName: getActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Reverb3D::*)(ByRef<bool>)>(&FMOD::Reverb3D::getActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "getActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::setUserData
// Il2CppName: setUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Reverb3D::*)(::System::IntPtr)>(&FMOD::Reverb3D::setUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "setUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::getUserData
// Il2CppName: getUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::Reverb3D::*)(ByRef<::System::IntPtr>)>(&FMOD::Reverb3D::getUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "getUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::FMOD5_Reverb3D_Release
// Il2CppName: FMOD5_Reverb3D_Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::Reverb3D::FMOD5_Reverb3D_Release)> {
  static const MethodInfo* get() {
    static auto* reverb = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "FMOD5_Reverb3D_Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reverb});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::FMOD5_Reverb3D_Set3DAttributes
// Il2CppName: FMOD5_Reverb3D_Set3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>, float, float)>(&FMOD::Reverb3D::FMOD5_Reverb3D_Set3DAttributes)> {
  static const MethodInfo* get() {
    static auto* reverb = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* mindistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxdistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "FMOD5_Reverb3D_Set3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reverb, position, mindistance, maxdistance});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::FMOD5_Reverb3D_Get3DAttributes
// Il2CppName: FMOD5_Reverb3D_Get3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>, ByRef<float>, ByRef<float>)>(&FMOD::Reverb3D::FMOD5_Reverb3D_Get3DAttributes)> {
  static const MethodInfo* get() {
    static auto* reverb = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* mindistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* maxdistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "FMOD5_Reverb3D_Get3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reverb, position, mindistance, maxdistance});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::FMOD5_Reverb3D_SetProperties
// Il2CppName: FMOD5_Reverb3D_SetProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::REVERB_PROPERTIES>)>(&FMOD::Reverb3D::FMOD5_Reverb3D_SetProperties)> {
  static const MethodInfo* get() {
    static auto* reverb = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("FMOD", "REVERB_PROPERTIES")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "FMOD5_Reverb3D_SetProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reverb, properties});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::FMOD5_Reverb3D_GetProperties
// Il2CppName: FMOD5_Reverb3D_GetProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::REVERB_PROPERTIES>)>(&FMOD::Reverb3D::FMOD5_Reverb3D_GetProperties)> {
  static const MethodInfo* get() {
    static auto* reverb = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* properties = &::il2cpp_utils::GetClassFromName("FMOD", "REVERB_PROPERTIES")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "FMOD5_Reverb3D_GetProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reverb, properties});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::FMOD5_Reverb3D_SetActive
// Il2CppName: FMOD5_Reverb3D_SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool)>(&FMOD::Reverb3D::FMOD5_Reverb3D_SetActive)> {
  static const MethodInfo* get() {
    static auto* reverb = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "FMOD5_Reverb3D_SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reverb, active});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::FMOD5_Reverb3D_GetActive
// Il2CppName: FMOD5_Reverb3D_GetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::Reverb3D::FMOD5_Reverb3D_GetActive)> {
  static const MethodInfo* get() {
    static auto* reverb = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "FMOD5_Reverb3D_GetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reverb, active});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::FMOD5_Reverb3D_SetUserData
// Il2CppName: FMOD5_Reverb3D_SetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::Reverb3D::FMOD5_Reverb3D_SetUserData)> {
  static const MethodInfo* get() {
    static auto* reverb = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "FMOD5_Reverb3D_SetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reverb, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::FMOD5_Reverb3D_GetUserData
// Il2CppName: FMOD5_Reverb3D_GetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::Reverb3D::FMOD5_Reverb3D_GetUserData)> {
  static const MethodInfo* get() {
    static auto* reverb = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "FMOD5_Reverb3D_GetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reverb, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::hasHandle
// Il2CppName: hasHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::Reverb3D::*)()>(&FMOD::Reverb3D::hasHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "hasHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::Reverb3D::clearHandle
// Il2CppName: clearHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::Reverb3D::*)()>(&FMOD::Reverb3D::clearHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::Reverb3D), "clearHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
