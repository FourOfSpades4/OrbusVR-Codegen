// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: FMOD.IChannelControl
#include "FMOD/IChannelControl.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
  // Forward declaring type: DSPConnection
  struct DSPConnection;
  // Forward declaring type: Channel
  struct Channel;
  // Forward declaring type: System
  struct System;
  // Forward declaring type: MODE
  struct MODE;
  // Forward declaring type: CHANNEL_CALLBACK
  class CHANNEL_CALLBACK;
  // Forward declaring type: DSP
  struct DSP;
  // Forward declaring type: VECTOR
  struct VECTOR;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: ChannelGroup
  struct ChannelGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::ChannelGroup, "FMOD", "ChannelGroup");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.ChannelGroup
  // [TokenAttribute] Offset: FFFFFFFF
  struct ChannelGroup/*, public ::System::ValueType, public ::FMOD::IChannelControl*/ {
    public:
    public:
    // public System.IntPtr handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: ChannelGroup
    constexpr ChannelGroup(::System::IntPtr handle_ = {}) noexcept : handle{handle_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::FMOD::IChannelControl
    operator ::FMOD::IChannelControl() noexcept {
      return *reinterpret_cast<::FMOD::IChannelControl*>(this);
    }
    // Creating conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept {
      return handle;
    }
    // Get instance field reference: public System.IntPtr handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_handle();
    // public FMOD.RESULT release()
    // Offset: 0xBBBAA4
    ::FMOD::RESULT release();
    // public FMOD.RESULT addGroup(FMOD.ChannelGroup group, System.Boolean propagatedspclock, out FMOD.DSPConnection connection)
    // Offset: 0xBBBAAC
    ::FMOD::RESULT addGroup(::FMOD::ChannelGroup group, bool propagatedspclock, ByRef<::FMOD::DSPConnection> connection);
    // public FMOD.RESULT getNumGroups(out System.Int32 numgroups)
    // Offset: 0xBBBAB8
    ::FMOD::RESULT getNumGroups(ByRef<int> numgroups);
    // public FMOD.RESULT getGroup(System.Int32 index, out FMOD.ChannelGroup group)
    // Offset: 0xBBBAC0
    ::FMOD::RESULT getGroup(int index, ByRef<::FMOD::ChannelGroup> group);
    // public FMOD.RESULT getParentGroup(out FMOD.ChannelGroup group)
    // Offset: 0xBBBAC8
    ::FMOD::RESULT getParentGroup(ByRef<::FMOD::ChannelGroup> group);
    // public FMOD.RESULT getName(out System.String name, System.Int32 namelen)
    // Offset: 0xBBBAD0
    ::FMOD::RESULT getName(ByRef<::StringW> name, int namelen);
    // public FMOD.RESULT getNumChannels(out System.Int32 numchannels)
    // Offset: 0xBBBAD8
    ::FMOD::RESULT getNumChannels(ByRef<int> numchannels);
    // public FMOD.RESULT getChannel(System.Int32 index, out FMOD.Channel channel)
    // Offset: 0xBBBAE0
    ::FMOD::RESULT getChannel(int index, ByRef<::FMOD::Channel> channel);
    // public FMOD.RESULT getSystemObject(out FMOD.System system)
    // Offset: 0xBBBAE8
    ::FMOD::RESULT getSystemObject(ByRef<::FMOD::System> system);
    // public FMOD.RESULT stop()
    // Offset: 0xBBBAF0
    ::FMOD::RESULT stop();
    // public FMOD.RESULT setPaused(System.Boolean paused)
    // Offset: 0xBBBAF8
    ::FMOD::RESULT setPaused(bool paused);
    // public FMOD.RESULT getPaused(out System.Boolean paused)
    // Offset: 0xBBBB04
    ::FMOD::RESULT getPaused(ByRef<bool> paused);
    // public FMOD.RESULT setVolume(System.Single volume)
    // Offset: 0xBBBB0C
    ::FMOD::RESULT setVolume(float volume);
    // public FMOD.RESULT getVolume(out System.Single volume)
    // Offset: 0xBBBB14
    ::FMOD::RESULT getVolume(ByRef<float> volume);
    // public FMOD.RESULT setVolumeRamp(System.Boolean ramp)
    // Offset: 0xBBBB1C
    ::FMOD::RESULT setVolumeRamp(bool ramp);
    // public FMOD.RESULT getVolumeRamp(out System.Boolean ramp)
    // Offset: 0xBBBB28
    ::FMOD::RESULT getVolumeRamp(ByRef<bool> ramp);
    // public FMOD.RESULT getAudibility(out System.Single audibility)
    // Offset: 0xBBBB30
    ::FMOD::RESULT getAudibility(ByRef<float> audibility);
    // public FMOD.RESULT setPitch(System.Single pitch)
    // Offset: 0xBBBB38
    ::FMOD::RESULT setPitch(float pitch);
    // public FMOD.RESULT getPitch(out System.Single pitch)
    // Offset: 0xBBBB40
    ::FMOD::RESULT getPitch(ByRef<float> pitch);
    // public FMOD.RESULT setMute(System.Boolean mute)
    // Offset: 0xBBBB48
    ::FMOD::RESULT setMute(bool mute);
    // public FMOD.RESULT getMute(out System.Boolean mute)
    // Offset: 0xBBBB54
    ::FMOD::RESULT getMute(ByRef<bool> mute);
    // public FMOD.RESULT setReverbProperties(System.Int32 instance, System.Single wet)
    // Offset: 0xBBBB5C
    ::FMOD::RESULT setReverbProperties(int instance, float wet);
    // public FMOD.RESULT getReverbProperties(System.Int32 instance, out System.Single wet)
    // Offset: 0xBBBB64
    ::FMOD::RESULT getReverbProperties(int instance, ByRef<float> wet);
    // public FMOD.RESULT setLowPassGain(System.Single gain)
    // Offset: 0xBBBB6C
    ::FMOD::RESULT setLowPassGain(float gain);
    // public FMOD.RESULT getLowPassGain(out System.Single gain)
    // Offset: 0xBBBB74
    ::FMOD::RESULT getLowPassGain(ByRef<float> gain);
    // public FMOD.RESULT setMode(FMOD.MODE mode)
    // Offset: 0xBBBB7C
    ::FMOD::RESULT setMode(::FMOD::MODE mode);
    // public FMOD.RESULT getMode(out FMOD.MODE mode)
    // Offset: 0xBBBB84
    ::FMOD::RESULT getMode(ByRef<::FMOD::MODE> mode);
    // public FMOD.RESULT setCallback(FMOD.CHANNEL_CALLBACK callback)
    // Offset: 0xBBBB8C
    ::FMOD::RESULT setCallback(::FMOD::CHANNEL_CALLBACK* callback);
    // public FMOD.RESULT isPlaying(out System.Boolean isplaying)
    // Offset: 0xBBBB94
    ::FMOD::RESULT isPlaying(ByRef<bool> isplaying);
    // public FMOD.RESULT setPan(System.Single pan)
    // Offset: 0xBBBB9C
    ::FMOD::RESULT setPan(float pan);
    // public FMOD.RESULT setMixLevelsOutput(System.Single frontleft, System.Single frontright, System.Single center, System.Single lfe, System.Single surroundleft, System.Single surroundright, System.Single backleft, System.Single backright)
    // Offset: 0xBBBBA4
    ::FMOD::RESULT setMixLevelsOutput(float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright);
    // public FMOD.RESULT setMixLevelsInput(System.Single[] levels, System.Int32 numlevels)
    // Offset: 0xBBBBAC
    ::FMOD::RESULT setMixLevelsInput(::ArrayW<float> levels, int numlevels);
    // public FMOD.RESULT setMixMatrix(System.Single[] matrix, System.Int32 outchannels, System.Int32 inchannels, System.Int32 inchannel_hop)
    // Offset: 0xBBBBB4
    ::FMOD::RESULT setMixMatrix(::ArrayW<float> matrix, int outchannels, int inchannels, int inchannel_hop);
    // public FMOD.RESULT getMixMatrix(System.Single[] matrix, out System.Int32 outchannels, out System.Int32 inchannels, System.Int32 inchannel_hop)
    // Offset: 0xBBBBBC
    ::FMOD::RESULT getMixMatrix(::ArrayW<float> matrix, ByRef<int> outchannels, ByRef<int> inchannels, int inchannel_hop);
    // public FMOD.RESULT getDSPClock(out System.UInt64 dspclock, out System.UInt64 parentclock)
    // Offset: 0xBBBBC4
    ::FMOD::RESULT getDSPClock(ByRef<uint64_t> dspclock, ByRef<uint64_t> parentclock);
    // public FMOD.RESULT setDelay(System.UInt64 dspclock_start, System.UInt64 dspclock_end, System.Boolean stopchannels)
    // Offset: 0xBBBBCC
    ::FMOD::RESULT setDelay(uint64_t dspclock_start, uint64_t dspclock_end, bool stopchannels);
    // public FMOD.RESULT getDelay(out System.UInt64 dspclock_start, out System.UInt64 dspclock_end, out System.Boolean stopchannels)
    // Offset: 0xBBBBD8
    ::FMOD::RESULT getDelay(ByRef<uint64_t> dspclock_start, ByRef<uint64_t> dspclock_end, ByRef<bool> stopchannels);
    // public FMOD.RESULT addFadePoint(System.UInt64 dspclock, System.Single volume)
    // Offset: 0xBBBBE0
    ::FMOD::RESULT addFadePoint(uint64_t dspclock, float volume);
    // public FMOD.RESULT setFadePointRamp(System.UInt64 dspclock, System.Single volume)
    // Offset: 0xBBBBE8
    ::FMOD::RESULT setFadePointRamp(uint64_t dspclock, float volume);
    // public FMOD.RESULT removeFadePoints(System.UInt64 dspclock_start, System.UInt64 dspclock_end)
    // Offset: 0xBBBBF0
    ::FMOD::RESULT removeFadePoints(uint64_t dspclock_start, uint64_t dspclock_end);
    // public FMOD.RESULT getFadePoints(ref System.UInt32 numpoints, System.UInt64[] point_dspclock, System.Single[] point_volume)
    // Offset: 0xBBBBF8
    ::FMOD::RESULT getFadePoints(ByRef<uint> numpoints, ::ArrayW<uint64_t> point_dspclock, ::ArrayW<float> point_volume);
    // public FMOD.RESULT getDSP(System.Int32 index, out FMOD.DSP dsp)
    // Offset: 0xBBBC00
    ::FMOD::RESULT getDSP(int index, ByRef<::FMOD::DSP> dsp);
    // public FMOD.RESULT addDSP(System.Int32 index, FMOD.DSP dsp)
    // Offset: 0xBBBC08
    ::FMOD::RESULT addDSP(int index, ::FMOD::DSP dsp);
    // public FMOD.RESULT removeDSP(FMOD.DSP dsp)
    // Offset: 0xBBBC10
    ::FMOD::RESULT removeDSP(::FMOD::DSP dsp);
    // public FMOD.RESULT getNumDSPs(out System.Int32 numdsps)
    // Offset: 0xBBBC18
    ::FMOD::RESULT getNumDSPs(ByRef<int> numdsps);
    // public FMOD.RESULT setDSPIndex(FMOD.DSP dsp, System.Int32 index)
    // Offset: 0xBBBC20
    ::FMOD::RESULT setDSPIndex(::FMOD::DSP dsp, int index);
    // public FMOD.RESULT getDSPIndex(FMOD.DSP dsp, out System.Int32 index)
    // Offset: 0xBBBC28
    ::FMOD::RESULT getDSPIndex(::FMOD::DSP dsp, ByRef<int> index);
    // public FMOD.RESULT set3DAttributes(ref FMOD.VECTOR pos, ref FMOD.VECTOR vel, ref FMOD.VECTOR alt_pan_pos)
    // Offset: 0xBBBC30
    ::FMOD::RESULT set3DAttributes(ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos);
    // public FMOD.RESULT get3DAttributes(out FMOD.VECTOR pos, out FMOD.VECTOR vel, out FMOD.VECTOR alt_pan_pos)
    // Offset: 0xBBBC38
    ::FMOD::RESULT get3DAttributes(ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos);
    // public FMOD.RESULT set3DMinMaxDistance(System.Single mindistance, System.Single maxdistance)
    // Offset: 0xBBBC40
    ::FMOD::RESULT set3DMinMaxDistance(float mindistance, float maxdistance);
    // public FMOD.RESULT get3DMinMaxDistance(out System.Single mindistance, out System.Single maxdistance)
    // Offset: 0xBBBC48
    ::FMOD::RESULT get3DMinMaxDistance(ByRef<float> mindistance, ByRef<float> maxdistance);
    // public FMOD.RESULT set3DConeSettings(System.Single insideconeangle, System.Single outsideconeangle, System.Single outsidevolume)
    // Offset: 0xBBBC50
    ::FMOD::RESULT set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume);
    // public FMOD.RESULT get3DConeSettings(out System.Single insideconeangle, out System.Single outsideconeangle, out System.Single outsidevolume)
    // Offset: 0xBBBC58
    ::FMOD::RESULT get3DConeSettings(ByRef<float> insideconeangle, ByRef<float> outsideconeangle, ByRef<float> outsidevolume);
    // public FMOD.RESULT set3DConeOrientation(ref FMOD.VECTOR orientation)
    // Offset: 0xBBBC60
    ::FMOD::RESULT set3DConeOrientation(ByRef<::FMOD::VECTOR> orientation);
    // public FMOD.RESULT get3DConeOrientation(out FMOD.VECTOR orientation)
    // Offset: 0xBBBC68
    ::FMOD::RESULT get3DConeOrientation(ByRef<::FMOD::VECTOR> orientation);
    // public FMOD.RESULT set3DCustomRolloff(ref FMOD.VECTOR points, System.Int32 numpoints)
    // Offset: 0xBBBC70
    ::FMOD::RESULT set3DCustomRolloff(ByRef<::FMOD::VECTOR> points, int numpoints);
    // public FMOD.RESULT get3DCustomRolloff(out System.IntPtr points, out System.Int32 numpoints)
    // Offset: 0xBBBC78
    ::FMOD::RESULT get3DCustomRolloff(ByRef<::System::IntPtr> points, ByRef<int> numpoints);
    // public FMOD.RESULT set3DOcclusion(System.Single directocclusion, System.Single reverbocclusion)
    // Offset: 0xBBBC80
    ::FMOD::RESULT set3DOcclusion(float directocclusion, float reverbocclusion);
    // public FMOD.RESULT get3DOcclusion(out System.Single directocclusion, out System.Single reverbocclusion)
    // Offset: 0xBBBC88
    ::FMOD::RESULT get3DOcclusion(ByRef<float> directocclusion, ByRef<float> reverbocclusion);
    // public FMOD.RESULT set3DSpread(System.Single angle)
    // Offset: 0xBBBC90
    ::FMOD::RESULT set3DSpread(float angle);
    // public FMOD.RESULT get3DSpread(out System.Single angle)
    // Offset: 0xBBBC98
    ::FMOD::RESULT get3DSpread(ByRef<float> angle);
    // public FMOD.RESULT set3DLevel(System.Single level)
    // Offset: 0xBBBCA0
    ::FMOD::RESULT set3DLevel(float level);
    // public FMOD.RESULT get3DLevel(out System.Single level)
    // Offset: 0xBBBCA8
    ::FMOD::RESULT get3DLevel(ByRef<float> level);
    // public FMOD.RESULT set3DDopplerLevel(System.Single level)
    // Offset: 0xBBBCB0
    ::FMOD::RESULT set3DDopplerLevel(float level);
    // public FMOD.RESULT get3DDopplerLevel(out System.Single level)
    // Offset: 0xBBBCB8
    ::FMOD::RESULT get3DDopplerLevel(ByRef<float> level);
    // public FMOD.RESULT set3DDistanceFilter(System.Boolean custom, System.Single customLevel, System.Single centerFreq)
    // Offset: 0xBBBCC0
    ::FMOD::RESULT set3DDistanceFilter(bool custom, float customLevel, float centerFreq);
    // public FMOD.RESULT get3DDistanceFilter(out System.Boolean custom, out System.Single customLevel, out System.Single centerFreq)
    // Offset: 0xBBBCCC
    ::FMOD::RESULT get3DDistanceFilter(ByRef<bool> custom, ByRef<float> customLevel, ByRef<float> centerFreq);
    // public FMOD.RESULT setUserData(System.IntPtr userdata)
    // Offset: 0xBBBCD4
    ::FMOD::RESULT setUserData(::System::IntPtr userdata);
    // public FMOD.RESULT getUserData(out System.IntPtr userdata)
    // Offset: 0xBBBCDC
    ::FMOD::RESULT getUserData(ByRef<::System::IntPtr> userdata);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Release(System.IntPtr channelgroup)
    // Offset: 0x2266A28
    static ::FMOD::RESULT FMOD5_ChannelGroup_Release(::System::IntPtr channelgroup);
    // static private FMOD.RESULT FMOD5_ChannelGroup_AddGroup(System.IntPtr channelgroup, System.IntPtr group, System.Boolean propogatedspclocks, out System.IntPtr connection)
    // Offset: 0x2266AD0
    static ::FMOD::RESULT FMOD5_ChannelGroup_AddGroup(::System::IntPtr channelgroup, ::System::IntPtr group, bool propogatedspclocks, ByRef<::System::IntPtr> connection);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetNumGroups(System.IntPtr channelgroup, out System.Int32 numgroups)
    // Offset: 0x2266B9C
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetNumGroups(::System::IntPtr channelgroup, ByRef<int> numgroups);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetGroup(System.IntPtr channelgroup, System.Int32 index, out System.IntPtr group)
    // Offset: 0x2266C50
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetGroup(::System::IntPtr channelgroup, int index, ByRef<::System::IntPtr> group);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetParentGroup(System.IntPtr channelgroup, out System.IntPtr group)
    // Offset: 0x2266D0C
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetParentGroup(::System::IntPtr channelgroup, ByRef<::System::IntPtr> group);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetName(System.IntPtr channelgroup, System.IntPtr name, System.Int32 namelen)
    // Offset: 0x2266F70
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetName(::System::IntPtr channelgroup, ::System::IntPtr name, int namelen);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetNumChannels(System.IntPtr channelgroup, out System.Int32 numchannels)
    // Offset: 0x226702C
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetNumChannels(::System::IntPtr channelgroup, ByRef<int> numchannels);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetChannel(System.IntPtr channelgroup, System.Int32 index, out System.IntPtr channel)
    // Offset: 0x22670E0
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetChannel(::System::IntPtr channelgroup, int index, ByRef<::System::IntPtr> channel);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetSystemObject(System.IntPtr channelgroup, out System.IntPtr system)
    // Offset: 0x226719C
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetSystemObject(::System::IntPtr channelgroup, ByRef<::System::IntPtr> system);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Stop(System.IntPtr channelgroup)
    // Offset: 0x2267250
    static ::FMOD::RESULT FMOD5_ChannelGroup_Stop(::System::IntPtr channelgroup);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetPaused(System.IntPtr channelgroup, System.Boolean paused)
    // Offset: 0x22672F8
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetPaused(::System::IntPtr channelgroup, bool paused);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetPaused(System.IntPtr channelgroup, out System.Boolean paused)
    // Offset: 0x22673AC
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetPaused(::System::IntPtr channelgroup, ByRef<bool> paused);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetVolume(System.IntPtr channelgroup, System.Single volume)
    // Offset: 0x2267474
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetVolume(::System::IntPtr channelgroup, float volume);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetVolume(System.IntPtr channelgroup, out System.Single volume)
    // Offset: 0x2267528
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetVolume(::System::IntPtr channelgroup, ByRef<float> volume);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetVolumeRamp(System.IntPtr channelgroup, System.Boolean ramp)
    // Offset: 0x22675E0
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetVolumeRamp(::System::IntPtr channelgroup, bool ramp);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetVolumeRamp(System.IntPtr channelgroup, out System.Boolean ramp)
    // Offset: 0x2267694
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetVolumeRamp(::System::IntPtr channelgroup, ByRef<bool> ramp);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetAudibility(System.IntPtr channelgroup, out System.Single audibility)
    // Offset: 0x226775C
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetAudibility(::System::IntPtr channelgroup, ByRef<float> audibility);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetPitch(System.IntPtr channelgroup, System.Single pitch)
    // Offset: 0x2267810
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetPitch(::System::IntPtr channelgroup, float pitch);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetPitch(System.IntPtr channelgroup, out System.Single pitch)
    // Offset: 0x22678C4
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetPitch(::System::IntPtr channelgroup, ByRef<float> pitch);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetMute(System.IntPtr channelgroup, System.Boolean mute)
    // Offset: 0x226797C
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetMute(::System::IntPtr channelgroup, bool mute);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetMute(System.IntPtr channelgroup, out System.Boolean mute)
    // Offset: 0x2267A30
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetMute(::System::IntPtr channelgroup, ByRef<bool> mute);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetReverbProperties(System.IntPtr channelgroup, System.Int32 instance, System.Single wet)
    // Offset: 0x2267AF8
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetReverbProperties(::System::IntPtr channelgroup, int instance, float wet);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetReverbProperties(System.IntPtr channelgroup, System.Int32 instance, out System.Single wet)
    // Offset: 0x2267BBC
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetReverbProperties(::System::IntPtr channelgroup, int instance, ByRef<float> wet);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetLowPassGain(System.IntPtr channelgroup, System.Single gain)
    // Offset: 0x2267C78
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetLowPassGain(::System::IntPtr channelgroup, float gain);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetLowPassGain(System.IntPtr channelgroup, out System.Single gain)
    // Offset: 0x2267D2C
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetLowPassGain(::System::IntPtr channelgroup, ByRef<float> gain);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetMode(System.IntPtr channelgroup, FMOD.MODE mode)
    // Offset: 0x2267DE0
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetMode(::System::IntPtr channelgroup, ::FMOD::MODE mode);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetMode(System.IntPtr channelgroup, out FMOD.MODE mode)
    // Offset: 0x2267E94
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetMode(::System::IntPtr channelgroup, ByRef<::FMOD::MODE> mode);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetCallback(System.IntPtr channelgroup, FMOD.CHANNEL_CALLBACK callback)
    // Offset: 0x2267F48
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetCallback(::System::IntPtr channelgroup, ::FMOD::CHANNEL_CALLBACK* callback);
    // static private FMOD.RESULT FMOD5_ChannelGroup_IsPlaying(System.IntPtr channelgroup, out System.Boolean isplaying)
    // Offset: 0x2268004
    static ::FMOD::RESULT FMOD5_ChannelGroup_IsPlaying(::System::IntPtr channelgroup, ByRef<bool> isplaying);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetPan(System.IntPtr channelgroup, System.Single pan)
    // Offset: 0x22680CC
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetPan(::System::IntPtr channelgroup, float pan);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetMixLevelsOutput(System.IntPtr channelgroup, System.Single frontleft, System.Single frontright, System.Single center, System.Single lfe, System.Single surroundleft, System.Single surroundright, System.Single backleft, System.Single backright)
    // Offset: 0x2268180
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetMixLevelsOutput(::System::IntPtr channelgroup, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetMixLevelsInput(System.IntPtr channelgroup, System.Single[] levels, System.Int32 numlevels)
    // Offset: 0x2268284
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetMixLevelsInput(::System::IntPtr channelgroup, ::ArrayW<float> levels, int numlevels);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetMixMatrix(System.IntPtr channelgroup, System.Single[] matrix, System.Int32 outchannels, System.Int32 inchannels, System.Int32 inchannel_hop)
    // Offset: 0x2268348
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetMixMatrix(::System::IntPtr channelgroup, ::ArrayW<float> matrix, int outchannels, int inchannels, int inchannel_hop);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetMixMatrix(System.IntPtr channelgroup, System.Single[] matrix, out System.Int32 outchannels, out System.Int32 inchannels, System.Int32 inchannel_hop)
    // Offset: 0x2268424
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetMixMatrix(::System::IntPtr channelgroup, ::ArrayW<float> matrix, ByRef<int> outchannels, ByRef<int> inchannels, int inchannel_hop);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetDSPClock(System.IntPtr channelgroup, out System.UInt64 dspclock, out System.UInt64 parentclock)
    // Offset: 0x2268500
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetDSPClock(::System::IntPtr channelgroup, ByRef<uint64_t> dspclock, ByRef<uint64_t> parentclock);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetDelay(System.IntPtr channelgroup, System.UInt64 dspclock_start, System.UInt64 dspclock_end, System.Boolean stopchannels)
    // Offset: 0x22685C0
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetDelay(::System::IntPtr channelgroup, uint64_t dspclock_start, uint64_t dspclock_end, bool stopchannels);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetDelay(System.IntPtr channelgroup, out System.UInt64 dspclock_start, out System.UInt64 dspclock_end, out System.Boolean stopchannels)
    // Offset: 0x226868C
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetDelay(::System::IntPtr channelgroup, ByRef<uint64_t> dspclock_start, ByRef<uint64_t> dspclock_end, ByRef<bool> stopchannels);
    // static private FMOD.RESULT FMOD5_ChannelGroup_AddFadePoint(System.IntPtr channelgroup, System.UInt64 dspclock, System.Single volume)
    // Offset: 0x226876C
    static ::FMOD::RESULT FMOD5_ChannelGroup_AddFadePoint(::System::IntPtr channelgroup, uint64_t dspclock, float volume);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetFadePointRamp(System.IntPtr channelgroup, System.UInt64 dspclock, System.Single volume)
    // Offset: 0x2268830
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetFadePointRamp(::System::IntPtr channelgroup, uint64_t dspclock, float volume);
    // static private FMOD.RESULT FMOD5_ChannelGroup_RemoveFadePoints(System.IntPtr channelgroup, System.UInt64 dspclock_start, System.UInt64 dspclock_end)
    // Offset: 0x22688F4
    static ::FMOD::RESULT FMOD5_ChannelGroup_RemoveFadePoints(::System::IntPtr channelgroup, uint64_t dspclock_start, uint64_t dspclock_end);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetFadePoints(System.IntPtr channelgroup, ref System.UInt32 numpoints, System.UInt64[] point_dspclock, System.Single[] point_volume)
    // Offset: 0x22689B0
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetFadePoints(::System::IntPtr channelgroup, ByRef<uint> numpoints, ::ArrayW<uint64_t> point_dspclock, ::ArrayW<float> point_volume);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetDSP(System.IntPtr channelgroup, System.Int32 index, out System.IntPtr dsp)
    // Offset: 0x2268A88
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetDSP(::System::IntPtr channelgroup, int index, ByRef<::System::IntPtr> dsp);
    // static private FMOD.RESULT FMOD5_ChannelGroup_AddDSP(System.IntPtr channelgroup, System.Int32 index, System.IntPtr dsp)
    // Offset: 0x2268B44
    static ::FMOD::RESULT FMOD5_ChannelGroup_AddDSP(::System::IntPtr channelgroup, int index, ::System::IntPtr dsp);
    // static private FMOD.RESULT FMOD5_ChannelGroup_RemoveDSP(System.IntPtr channelgroup, System.IntPtr dsp)
    // Offset: 0x2268C00
    static ::FMOD::RESULT FMOD5_ChannelGroup_RemoveDSP(::System::IntPtr channelgroup, ::System::IntPtr dsp);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetNumDSPs(System.IntPtr channelgroup, out System.Int32 numdsps)
    // Offset: 0x2268CB4
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetNumDSPs(::System::IntPtr channelgroup, ByRef<int> numdsps);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetDSPIndex(System.IntPtr channelgroup, System.IntPtr dsp, System.Int32 index)
    // Offset: 0x2268D68
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetDSPIndex(::System::IntPtr channelgroup, ::System::IntPtr dsp, int index);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetDSPIndex(System.IntPtr channelgroup, System.IntPtr dsp, out System.Int32 index)
    // Offset: 0x2268E24
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetDSPIndex(::System::IntPtr channelgroup, ::System::IntPtr dsp, ByRef<int> index);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Set3DAttributes(System.IntPtr channelgroup, ref FMOD.VECTOR pos, ref FMOD.VECTOR vel, ref FMOD.VECTOR alt_pan_pos)
    // Offset: 0x2268EE0
    static ::FMOD::RESULT FMOD5_ChannelGroup_Set3DAttributes(::System::IntPtr channelgroup, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Get3DAttributes(System.IntPtr channelgroup, out FMOD.VECTOR pos, out FMOD.VECTOR vel, out FMOD.VECTOR alt_pan_pos)
    // Offset: 0x2268FAC
    static ::FMOD::RESULT FMOD5_ChannelGroup_Get3DAttributes(::System::IntPtr channelgroup, ByRef<::FMOD::VECTOR> pos, ByRef<::FMOD::VECTOR> vel, ByRef<::FMOD::VECTOR> alt_pan_pos);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Set3DMinMaxDistance(System.IntPtr channelgroup, System.Single mindistance, System.Single maxdistance)
    // Offset: 0x2269078
    static ::FMOD::RESULT FMOD5_ChannelGroup_Set3DMinMaxDistance(::System::IntPtr channelgroup, float mindistance, float maxdistance);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Get3DMinMaxDistance(System.IntPtr channelgroup, out System.Single mindistance, out System.Single maxdistance)
    // Offset: 0x2269134
    static ::FMOD::RESULT FMOD5_ChannelGroup_Get3DMinMaxDistance(::System::IntPtr channelgroup, ByRef<float> mindistance, ByRef<float> maxdistance);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Set3DConeSettings(System.IntPtr channelgroup, System.Single insideconeangle, System.Single outsideconeangle, System.Single outsidevolume)
    // Offset: 0x22691F0
    static ::FMOD::RESULT FMOD5_ChannelGroup_Set3DConeSettings(::System::IntPtr channelgroup, float insideconeangle, float outsideconeangle, float outsidevolume);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Get3DConeSettings(System.IntPtr channelgroup, out System.Single insideconeangle, out System.Single outsideconeangle, out System.Single outsidevolume)
    // Offset: 0x22692BC
    static ::FMOD::RESULT FMOD5_ChannelGroup_Get3DConeSettings(::System::IntPtr channelgroup, ByRef<float> insideconeangle, ByRef<float> outsideconeangle, ByRef<float> outsidevolume);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Set3DConeOrientation(System.IntPtr channelgroup, ref FMOD.VECTOR orientation)
    // Offset: 0x2269388
    static ::FMOD::RESULT FMOD5_ChannelGroup_Set3DConeOrientation(::System::IntPtr channelgroup, ByRef<::FMOD::VECTOR> orientation);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Get3DConeOrientation(System.IntPtr channelgroup, out FMOD.VECTOR orientation)
    // Offset: 0x226943C
    static ::FMOD::RESULT FMOD5_ChannelGroup_Get3DConeOrientation(::System::IntPtr channelgroup, ByRef<::FMOD::VECTOR> orientation);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Set3DCustomRolloff(System.IntPtr channelgroup, ref FMOD.VECTOR points, System.Int32 numpoints)
    // Offset: 0x22694F0
    static ::FMOD::RESULT FMOD5_ChannelGroup_Set3DCustomRolloff(::System::IntPtr channelgroup, ByRef<::FMOD::VECTOR> points, int numpoints);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Get3DCustomRolloff(System.IntPtr channelgroup, out System.IntPtr points, out System.Int32 numpoints)
    // Offset: 0x22695AC
    static ::FMOD::RESULT FMOD5_ChannelGroup_Get3DCustomRolloff(::System::IntPtr channelgroup, ByRef<::System::IntPtr> points, ByRef<int> numpoints);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Set3DOcclusion(System.IntPtr channelgroup, System.Single directocclusion, System.Single reverbocclusion)
    // Offset: 0x2269668
    static ::FMOD::RESULT FMOD5_ChannelGroup_Set3DOcclusion(::System::IntPtr channelgroup, float directocclusion, float reverbocclusion);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Get3DOcclusion(System.IntPtr channelgroup, out System.Single directocclusion, out System.Single reverbocclusion)
    // Offset: 0x2269724
    static ::FMOD::RESULT FMOD5_ChannelGroup_Get3DOcclusion(::System::IntPtr channelgroup, ByRef<float> directocclusion, ByRef<float> reverbocclusion);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Set3DSpread(System.IntPtr channelgroup, System.Single angle)
    // Offset: 0x22697E0
    static ::FMOD::RESULT FMOD5_ChannelGroup_Set3DSpread(::System::IntPtr channelgroup, float angle);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Get3DSpread(System.IntPtr channelgroup, out System.Single angle)
    // Offset: 0x2269894
    static ::FMOD::RESULT FMOD5_ChannelGroup_Get3DSpread(::System::IntPtr channelgroup, ByRef<float> angle);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Set3DLevel(System.IntPtr channelgroup, System.Single level)
    // Offset: 0x2269948
    static ::FMOD::RESULT FMOD5_ChannelGroup_Set3DLevel(::System::IntPtr channelgroup, float level);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Get3DLevel(System.IntPtr channelgroup, out System.Single level)
    // Offset: 0x22699FC
    static ::FMOD::RESULT FMOD5_ChannelGroup_Get3DLevel(::System::IntPtr channelgroup, ByRef<float> level);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Set3DDopplerLevel(System.IntPtr channelgroup, System.Single level)
    // Offset: 0x2269AB0
    static ::FMOD::RESULT FMOD5_ChannelGroup_Set3DDopplerLevel(::System::IntPtr channelgroup, float level);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Get3DDopplerLevel(System.IntPtr channelgroup, out System.Single level)
    // Offset: 0x2269B64
    static ::FMOD::RESULT FMOD5_ChannelGroup_Get3DDopplerLevel(::System::IntPtr channelgroup, ByRef<float> level);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Set3DDistanceFilter(System.IntPtr channelgroup, System.Boolean custom, System.Single customLevel, System.Single centerFreq)
    // Offset: 0x2269C1C
    static ::FMOD::RESULT FMOD5_ChannelGroup_Set3DDistanceFilter(::System::IntPtr channelgroup, bool custom, float customLevel, float centerFreq);
    // static private FMOD.RESULT FMOD5_ChannelGroup_Get3DDistanceFilter(System.IntPtr channelgroup, out System.Boolean custom, out System.Single customLevel, out System.Single centerFreq)
    // Offset: 0x2269CE8
    static ::FMOD::RESULT FMOD5_ChannelGroup_Get3DDistanceFilter(::System::IntPtr channelgroup, ByRef<bool> custom, ByRef<float> customLevel, ByRef<float> centerFreq);
    // static private FMOD.RESULT FMOD5_ChannelGroup_SetUserData(System.IntPtr channelgroup, System.IntPtr userdata)
    // Offset: 0x2269DC8
    static ::FMOD::RESULT FMOD5_ChannelGroup_SetUserData(::System::IntPtr channelgroup, ::System::IntPtr userdata);
    // static private FMOD.RESULT FMOD5_ChannelGroup_GetUserData(System.IntPtr channelgroup, out System.IntPtr userdata)
    // Offset: 0x2269E7C
    static ::FMOD::RESULT FMOD5_ChannelGroup_GetUserData(::System::IntPtr channelgroup, ByRef<::System::IntPtr> userdata);
    // public System.Boolean hasHandle()
    // Offset: 0xBBBCE4
    bool hasHandle();
    // public System.Void clearHandle()
    // Offset: 0xBBBCEC
    void clearHandle();
  }; // FMOD.ChannelGroup
  #pragma pack(pop)
  static check_size<sizeof(ChannelGroup), 0 + sizeof(::System::IntPtr)> __FMOD_ChannelGroupSizeCheck;
  static_assert(sizeof(ChannelGroup) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::ChannelGroup::release
// Il2CppName: release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)()>(&FMOD::ChannelGroup::release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::addGroup
// Il2CppName: addGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(::FMOD::ChannelGroup, bool, ByRef<::FMOD::DSPConnection>)>(&FMOD::ChannelGroup::addGroup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("FMOD", "ChannelGroup")->byval_arg;
    static auto* propagatedspclock = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* connection = &::il2cpp_utils::GetClassFromName("FMOD", "DSPConnection")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "addGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group, propagatedspclock, connection});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getNumGroups
// Il2CppName: getNumGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<int>)>(&FMOD::ChannelGroup::getNumGroups)> {
  static const MethodInfo* get() {
    static auto* numgroups = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getNumGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numgroups});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getGroup
// Il2CppName: getGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(int, ByRef<::FMOD::ChannelGroup>)>(&FMOD::ChannelGroup::getGroup)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* group = &::il2cpp_utils::GetClassFromName("FMOD", "ChannelGroup")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, group});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getParentGroup
// Il2CppName: getParentGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<::FMOD::ChannelGroup>)>(&FMOD::ChannelGroup::getParentGroup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("FMOD", "ChannelGroup")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getParentGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getName
// Il2CppName: getName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<::StringW>, int)>(&FMOD::ChannelGroup::getName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* namelen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, namelen});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getNumChannels
// Il2CppName: getNumChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<int>)>(&FMOD::ChannelGroup::getNumChannels)> {
  static const MethodInfo* get() {
    static auto* numchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getNumChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numchannels});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getChannel
// Il2CppName: getChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(int, ByRef<::FMOD::Channel>)>(&FMOD::ChannelGroup::getChannel)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("FMOD", "Channel")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, channel});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getSystemObject
// Il2CppName: getSystemObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<::FMOD::System>)>(&FMOD::ChannelGroup::getSystemObject)> {
  static const MethodInfo* get() {
    static auto* system = &::il2cpp_utils::GetClassFromName("FMOD", "System")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getSystemObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{system});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::stop
// Il2CppName: stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)()>(&FMOD::ChannelGroup::stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setPaused
// Il2CppName: setPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(bool)>(&FMOD::ChannelGroup::setPaused)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getPaused
// Il2CppName: getPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<bool>)>(&FMOD::ChannelGroup::getPaused)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setVolume
// Il2CppName: setVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(float)>(&FMOD::ChannelGroup::setVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getVolume
// Il2CppName: getVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<float>)>(&FMOD::ChannelGroup::getVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setVolumeRamp
// Il2CppName: setVolumeRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(bool)>(&FMOD::ChannelGroup::setVolumeRamp)> {
  static const MethodInfo* get() {
    static auto* ramp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setVolumeRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ramp});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getVolumeRamp
// Il2CppName: getVolumeRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<bool>)>(&FMOD::ChannelGroup::getVolumeRamp)> {
  static const MethodInfo* get() {
    static auto* ramp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getVolumeRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ramp});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getAudibility
// Il2CppName: getAudibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<float>)>(&FMOD::ChannelGroup::getAudibility)> {
  static const MethodInfo* get() {
    static auto* audibility = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getAudibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audibility});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setPitch
// Il2CppName: setPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(float)>(&FMOD::ChannelGroup::setPitch)> {
  static const MethodInfo* get() {
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitch});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getPitch
// Il2CppName: getPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<float>)>(&FMOD::ChannelGroup::getPitch)> {
  static const MethodInfo* get() {
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitch});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setMute
// Il2CppName: setMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(bool)>(&FMOD::ChannelGroup::setMute)> {
  static const MethodInfo* get() {
    static auto* mute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mute});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getMute
// Il2CppName: getMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<bool>)>(&FMOD::ChannelGroup::getMute)> {
  static const MethodInfo* get() {
    static auto* mute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mute});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setReverbProperties
// Il2CppName: setReverbProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(int, float)>(&FMOD::ChannelGroup::setReverbProperties)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wet = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setReverbProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, wet});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getReverbProperties
// Il2CppName: getReverbProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(int, ByRef<float>)>(&FMOD::ChannelGroup::getReverbProperties)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wet = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getReverbProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, wet});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setLowPassGain
// Il2CppName: setLowPassGain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(float)>(&FMOD::ChannelGroup::setLowPassGain)> {
  static const MethodInfo* get() {
    static auto* gain = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setLowPassGain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gain});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getLowPassGain
// Il2CppName: getLowPassGain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<float>)>(&FMOD::ChannelGroup::getLowPassGain)> {
  static const MethodInfo* get() {
    static auto* gain = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getLowPassGain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gain});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setMode
// Il2CppName: setMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(::FMOD::MODE)>(&FMOD::ChannelGroup::setMode)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getMode
// Il2CppName: getMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<::FMOD::MODE>)>(&FMOD::ChannelGroup::getMode)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setCallback
// Il2CppName: setCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(::FMOD::CHANNEL_CALLBACK*)>(&FMOD::ChannelGroup::setCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD", "CHANNEL_CALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::isPlaying
// Il2CppName: isPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<bool>)>(&FMOD::ChannelGroup::isPlaying)> {
  static const MethodInfo* get() {
    static auto* isplaying = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "isPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isplaying});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setPan
// Il2CppName: setPan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(float)>(&FMOD::ChannelGroup::setPan)> {
  static const MethodInfo* get() {
    static auto* pan = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setPan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pan});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setMixLevelsOutput
// Il2CppName: setMixLevelsOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(float, float, float, float, float, float, float, float)>(&FMOD::ChannelGroup::setMixLevelsOutput)> {
  static const MethodInfo* get() {
    static auto* frontleft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* frontright = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lfe = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* surroundleft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* surroundright = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* backleft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* backright = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setMixLevelsOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setMixLevelsInput
// Il2CppName: setMixLevelsInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(::ArrayW<float>, int)>(&FMOD::ChannelGroup::setMixLevelsInput)> {
  static const MethodInfo* get() {
    static auto* levels = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* numlevels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setMixLevelsInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{levels, numlevels});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setMixMatrix
// Il2CppName: setMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(::ArrayW<float>, int, int, int)>(&FMOD::ChannelGroup::setMixMatrix)> {
  static const MethodInfo* get() {
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inchannel_hop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix, outchannels, inchannels, inchannel_hop});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getMixMatrix
// Il2CppName: getMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(::ArrayW<float>, ByRef<int>, ByRef<int>, int)>(&FMOD::ChannelGroup::getMixMatrix)> {
  static const MethodInfo* get() {
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* inchannel_hop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix, outchannels, inchannels, inchannel_hop});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getDSPClock
// Il2CppName: getDSPClock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<uint64_t>, ByRef<uint64_t>)>(&FMOD::ChannelGroup::getDSPClock)> {
  static const MethodInfo* get() {
    static auto* dspclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* parentclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getDSPClock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock, parentclock});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setDelay
// Il2CppName: setDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(uint64_t, uint64_t, bool)>(&FMOD::ChannelGroup::setDelay)> {
  static const MethodInfo* get() {
    static auto* dspclock_start = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* dspclock_end = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* stopchannels = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock_start, dspclock_end, stopchannels});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getDelay
// Il2CppName: getDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<uint64_t>, ByRef<uint64_t>, ByRef<bool>)>(&FMOD::ChannelGroup::getDelay)> {
  static const MethodInfo* get() {
    static auto* dspclock_start = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* dspclock_end = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* stopchannels = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock_start, dspclock_end, stopchannels});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::addFadePoint
// Il2CppName: addFadePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(uint64_t, float)>(&FMOD::ChannelGroup::addFadePoint)> {
  static const MethodInfo* get() {
    static auto* dspclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "addFadePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock, volume});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setFadePointRamp
// Il2CppName: setFadePointRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(uint64_t, float)>(&FMOD::ChannelGroup::setFadePointRamp)> {
  static const MethodInfo* get() {
    static auto* dspclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setFadePointRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock, volume});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::removeFadePoints
// Il2CppName: removeFadePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(uint64_t, uint64_t)>(&FMOD::ChannelGroup::removeFadePoints)> {
  static const MethodInfo* get() {
    static auto* dspclock_start = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* dspclock_end = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "removeFadePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dspclock_start, dspclock_end});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getFadePoints
// Il2CppName: getFadePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<uint>, ::ArrayW<uint64_t>, ::ArrayW<float>)>(&FMOD::ChannelGroup::getFadePoints)> {
  static const MethodInfo* get() {
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* point_dspclock = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* point_volume = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getFadePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numpoints, point_dspclock, point_volume});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getDSP
// Il2CppName: getDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(int, ByRef<::FMOD::DSP>)>(&FMOD::ChannelGroup::getDSP)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::addDSP
// Il2CppName: addDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(int, ::FMOD::DSP)>(&FMOD::ChannelGroup::addDSP)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "addDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::removeDSP
// Il2CppName: removeDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(::FMOD::DSP)>(&FMOD::ChannelGroup::removeDSP)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "removeDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getNumDSPs
// Il2CppName: getNumDSPs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<int>)>(&FMOD::ChannelGroup::getNumDSPs)> {
  static const MethodInfo* get() {
    static auto* numdsps = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getNumDSPs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{numdsps});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setDSPIndex
// Il2CppName: setDSPIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(::FMOD::DSP, int)>(&FMOD::ChannelGroup::setDSPIndex)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setDSPIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getDSPIndex
// Il2CppName: getDSPIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(::FMOD::DSP, ByRef<int>)>(&FMOD::ChannelGroup::getDSPIndex)> {
  static const MethodInfo* get() {
    static auto* dsp = &::il2cpp_utils::GetClassFromName("FMOD", "DSP")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getDSPIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dsp, index});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::set3DAttributes
// Il2CppName: set3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::ChannelGroup::set3DAttributes)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* alt_pan_pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "set3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, vel, alt_pan_pos});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::get3DAttributes
// Il2CppName: get3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::ChannelGroup::get3DAttributes)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* alt_pan_pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "get3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, vel, alt_pan_pos});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::set3DMinMaxDistance
// Il2CppName: set3DMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(float, float)>(&FMOD::ChannelGroup::set3DMinMaxDistance)> {
  static const MethodInfo* get() {
    static auto* mindistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxdistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "set3DMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mindistance, maxdistance});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::get3DMinMaxDistance
// Il2CppName: get3DMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<float>, ByRef<float>)>(&FMOD::ChannelGroup::get3DMinMaxDistance)> {
  static const MethodInfo* get() {
    static auto* mindistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* maxdistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "get3DMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mindistance, maxdistance});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::set3DConeSettings
// Il2CppName: set3DConeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(float, float, float)>(&FMOD::ChannelGroup::set3DConeSettings)> {
  static const MethodInfo* get() {
    static auto* insideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* outsideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* outsidevolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "set3DConeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{insideconeangle, outsideconeangle, outsidevolume});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::get3DConeSettings
// Il2CppName: get3DConeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<float>, ByRef<float>, ByRef<float>)>(&FMOD::ChannelGroup::get3DConeSettings)> {
  static const MethodInfo* get() {
    static auto* insideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* outsideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* outsidevolume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "get3DConeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{insideconeangle, outsideconeangle, outsidevolume});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::set3DConeOrientation
// Il2CppName: set3DConeOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<::FMOD::VECTOR>)>(&FMOD::ChannelGroup::set3DConeOrientation)> {
  static const MethodInfo* get() {
    static auto* orientation = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "set3DConeOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{orientation});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::get3DConeOrientation
// Il2CppName: get3DConeOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<::FMOD::VECTOR>)>(&FMOD::ChannelGroup::get3DConeOrientation)> {
  static const MethodInfo* get() {
    static auto* orientation = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "get3DConeOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{orientation});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::set3DCustomRolloff
// Il2CppName: set3DCustomRolloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<::FMOD::VECTOR>, int)>(&FMOD::ChannelGroup::set3DCustomRolloff)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "set3DCustomRolloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, numpoints});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::get3DCustomRolloff
// Il2CppName: get3DCustomRolloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<::System::IntPtr>, ByRef<int>)>(&FMOD::ChannelGroup::get3DCustomRolloff)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "get3DCustomRolloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, numpoints});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::set3DOcclusion
// Il2CppName: set3DOcclusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(float, float)>(&FMOD::ChannelGroup::set3DOcclusion)> {
  static const MethodInfo* get() {
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "set3DOcclusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{directocclusion, reverbocclusion});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::get3DOcclusion
// Il2CppName: get3DOcclusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<float>, ByRef<float>)>(&FMOD::ChannelGroup::get3DOcclusion)> {
  static const MethodInfo* get() {
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "get3DOcclusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{directocclusion, reverbocclusion});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::set3DSpread
// Il2CppName: set3DSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(float)>(&FMOD::ChannelGroup::set3DSpread)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "set3DSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::get3DSpread
// Il2CppName: get3DSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<float>)>(&FMOD::ChannelGroup::get3DSpread)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "get3DSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::set3DLevel
// Il2CppName: set3DLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(float)>(&FMOD::ChannelGroup::set3DLevel)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "set3DLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::get3DLevel
// Il2CppName: get3DLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<float>)>(&FMOD::ChannelGroup::get3DLevel)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "get3DLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::set3DDopplerLevel
// Il2CppName: set3DDopplerLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(float)>(&FMOD::ChannelGroup::set3DDopplerLevel)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "set3DDopplerLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::get3DDopplerLevel
// Il2CppName: get3DDopplerLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<float>)>(&FMOD::ChannelGroup::get3DDopplerLevel)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "get3DDopplerLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::set3DDistanceFilter
// Il2CppName: set3DDistanceFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(bool, float, float)>(&FMOD::ChannelGroup::set3DDistanceFilter)> {
  static const MethodInfo* get() {
    static auto* custom = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* customLevel = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* centerFreq = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "set3DDistanceFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{custom, customLevel, centerFreq});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::get3DDistanceFilter
// Il2CppName: get3DDistanceFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<bool>, ByRef<float>, ByRef<float>)>(&FMOD::ChannelGroup::get3DDistanceFilter)> {
  static const MethodInfo* get() {
    static auto* custom = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* customLevel = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* centerFreq = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "get3DDistanceFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{custom, customLevel, centerFreq});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::setUserData
// Il2CppName: setUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(::System::IntPtr)>(&FMOD::ChannelGroup::setUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "setUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::getUserData
// Il2CppName: getUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (FMOD::ChannelGroup::*)(ByRef<::System::IntPtr>)>(&FMOD::ChannelGroup::getUserData)> {
  static const MethodInfo* get() {
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "getUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userdata});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Release
// Il2CppName: FMOD5_ChannelGroup_Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Release)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_AddGroup
// Il2CppName: FMOD5_ChannelGroup_AddGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, bool, ByRef<::System::IntPtr>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_AddGroup)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* group = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* propogatedspclocks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* connection = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_AddGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, group, propogatedspclocks, connection});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetNumGroups
// Il2CppName: FMOD5_ChannelGroup_GetNumGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetNumGroups)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numgroups = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetNumGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, numgroups});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetGroup
// Il2CppName: FMOD5_ChannelGroup_GetGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::System::IntPtr>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetGroup)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* group = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, index, group});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetParentGroup
// Il2CppName: FMOD5_ChannelGroup_GetParentGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetParentGroup)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* group = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetParentGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, group});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetName
// Il2CppName: FMOD5_ChannelGroup_GetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, int)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetName)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* namelen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, name, namelen});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetNumChannels
// Il2CppName: FMOD5_ChannelGroup_GetNumChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetNumChannels)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetNumChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, numchannels});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetChannel
// Il2CppName: FMOD5_ChannelGroup_GetChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::System::IntPtr>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetChannel)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, index, channel});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetSystemObject
// Il2CppName: FMOD5_ChannelGroup_GetSystemObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetSystemObject)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* system = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetSystemObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, system});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Stop
// Il2CppName: FMOD5_ChannelGroup_Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Stop)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetPaused
// Il2CppName: FMOD5_ChannelGroup_SetPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetPaused)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, paused});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetPaused
// Il2CppName: FMOD5_ChannelGroup_GetPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetPaused)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, paused});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetVolume
// Il2CppName: FMOD5_ChannelGroup_SetVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetVolume)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, volume});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetVolume
// Il2CppName: FMOD5_ChannelGroup_GetVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetVolume)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, volume});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetVolumeRamp
// Il2CppName: FMOD5_ChannelGroup_SetVolumeRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetVolumeRamp)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* ramp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetVolumeRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, ramp});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetVolumeRamp
// Il2CppName: FMOD5_ChannelGroup_GetVolumeRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetVolumeRamp)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* ramp = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetVolumeRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, ramp});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetAudibility
// Il2CppName: FMOD5_ChannelGroup_GetAudibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetAudibility)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* audibility = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetAudibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, audibility});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetPitch
// Il2CppName: FMOD5_ChannelGroup_SetPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetPitch)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, pitch});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetPitch
// Il2CppName: FMOD5_ChannelGroup_GetPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetPitch)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, pitch});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMute
// Il2CppName: FMOD5_ChannelGroup_SetMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMute)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, mute});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetMute
// Il2CppName: FMOD5_ChannelGroup_GetMute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetMute)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetMute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, mute});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetReverbProperties
// Il2CppName: FMOD5_ChannelGroup_SetReverbProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, float)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetReverbProperties)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wet = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetReverbProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, instance, wet});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetReverbProperties
// Il2CppName: FMOD5_ChannelGroup_GetReverbProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<float>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetReverbProperties)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* wet = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetReverbProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, instance, wet});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetLowPassGain
// Il2CppName: FMOD5_ChannelGroup_SetLowPassGain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetLowPassGain)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* gain = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetLowPassGain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, gain});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetLowPassGain
// Il2CppName: FMOD5_ChannelGroup_GetLowPassGain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetLowPassGain)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* gain = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetLowPassGain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, gain});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMode
// Il2CppName: FMOD5_ChannelGroup_SetMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::MODE)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMode)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, mode});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetMode
// Il2CppName: FMOD5_ChannelGroup_GetMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::MODE>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetMode)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "MODE")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, mode});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetCallback
// Il2CppName: FMOD5_ChannelGroup_SetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::FMOD::CHANNEL_CALLBACK*)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetCallback)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD", "CHANNEL_CALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, callback});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_IsPlaying
// Il2CppName: FMOD5_ChannelGroup_IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_IsPlaying)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* isplaying = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, isplaying});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetPan
// Il2CppName: FMOD5_ChannelGroup_SetPan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetPan)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pan = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetPan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, pan});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMixLevelsOutput
// Il2CppName: FMOD5_ChannelGroup_SetMixLevelsOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float, float, float, float, float, float, float, float)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMixLevelsOutput)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* frontleft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* frontright = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* center = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lfe = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* surroundleft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* surroundright = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* backleft = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* backright = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetMixLevelsOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, frontleft, frontright, center, lfe, surroundleft, surroundright, backleft, backright});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMixLevelsInput
// Il2CppName: FMOD5_ChannelGroup_SetMixLevelsInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<float>, int)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMixLevelsInput)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* levels = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* numlevels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetMixLevelsInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, levels, numlevels});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMixMatrix
// Il2CppName: FMOD5_ChannelGroup_SetMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<float>, int, int, int)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetMixMatrix)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inchannel_hop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, matrix, outchannels, inchannels, inchannel_hop});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetMixMatrix
// Il2CppName: FMOD5_ChannelGroup_GetMixMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::ArrayW<float>, ByRef<int>, ByRef<int>, int)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetMixMatrix)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* matrix = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* inchannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* inchannel_hop = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetMixMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, matrix, outchannels, inchannels, inchannel_hop});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDSPClock
// Il2CppName: FMOD5_ChannelGroup_GetDSPClock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint64_t>, ByRef<uint64_t>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDSPClock)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dspclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* parentclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetDSPClock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, dspclock, parentclock});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetDelay
// Il2CppName: FMOD5_ChannelGroup_SetDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint64_t, uint64_t, bool)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetDelay)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dspclock_start = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* dspclock_end = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* stopchannels = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, dspclock_start, dspclock_end, stopchannels});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDelay
// Il2CppName: FMOD5_ChannelGroup_GetDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint64_t>, ByRef<uint64_t>, ByRef<bool>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDelay)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dspclock_start = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* dspclock_end = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* stopchannels = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, dspclock_start, dspclock_end, stopchannels});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_AddFadePoint
// Il2CppName: FMOD5_ChannelGroup_AddFadePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint64_t, float)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_AddFadePoint)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dspclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_AddFadePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, dspclock, volume});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetFadePointRamp
// Il2CppName: FMOD5_ChannelGroup_SetFadePointRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint64_t, float)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetFadePointRamp)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dspclock = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetFadePointRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, dspclock, volume});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_RemoveFadePoints
// Il2CppName: FMOD5_ChannelGroup_RemoveFadePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, uint64_t, uint64_t)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_RemoveFadePoints)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dspclock_start = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* dspclock_end = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_RemoveFadePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, dspclock_start, dspclock_end});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetFadePoints
// Il2CppName: FMOD5_ChannelGroup_GetFadePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<uint>, ::ArrayW<uint64_t>, ::ArrayW<float>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetFadePoints)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* point_dspclock = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt64"), 1)->byval_arg;
    static auto* point_volume = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetFadePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, numpoints, point_dspclock, point_volume});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDSP
// Il2CppName: FMOD5_ChannelGroup_GetDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ByRef<::System::IntPtr>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDSP)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, index, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_AddDSP
// Il2CppName: FMOD5_ChannelGroup_AddDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ::System::IntPtr)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_AddDSP)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_AddDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, index, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_RemoveDSP
// Il2CppName: FMOD5_ChannelGroup_RemoveDSP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_RemoveDSP)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_RemoveDSP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, dsp});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetNumDSPs
// Il2CppName: FMOD5_ChannelGroup_GetNumDSPs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<int>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetNumDSPs)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* numdsps = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetNumDSPs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, numdsps});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetDSPIndex
// Il2CppName: FMOD5_ChannelGroup_SetDSPIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, int)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetDSPIndex)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetDSPIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, dsp, index});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDSPIndex
// Il2CppName: FMOD5_ChannelGroup_GetDSPIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr, ByRef<int>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetDSPIndex)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dsp = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetDSPIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, dsp, index});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DAttributes
// Il2CppName: FMOD5_ChannelGroup_Set3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DAttributes)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* alt_pan_pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Set3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, pos, vel, alt_pan_pos});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DAttributes
// Il2CppName: FMOD5_ChannelGroup_Get3DAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>, ByRef<::FMOD::VECTOR>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DAttributes)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* vel = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* alt_pan_pos = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Get3DAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, pos, vel, alt_pan_pos});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DMinMaxDistance
// Il2CppName: FMOD5_ChannelGroup_Set3DMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float, float)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DMinMaxDistance)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mindistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxdistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Set3DMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, mindistance, maxdistance});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DMinMaxDistance
// Il2CppName: FMOD5_ChannelGroup_Get3DMinMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>, ByRef<float>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DMinMaxDistance)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mindistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* maxdistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Get3DMinMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, mindistance, maxdistance});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DConeSettings
// Il2CppName: FMOD5_ChannelGroup_Set3DConeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float, float, float)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DConeSettings)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* insideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* outsideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* outsidevolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Set3DConeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, insideconeangle, outsideconeangle, outsidevolume});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DConeSettings
// Il2CppName: FMOD5_ChannelGroup_Get3DConeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>, ByRef<float>, ByRef<float>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DConeSettings)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* insideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* outsideconeangle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* outsidevolume = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Get3DConeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, insideconeangle, outsideconeangle, outsidevolume});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DConeOrientation
// Il2CppName: FMOD5_ChannelGroup_Set3DConeOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DConeOrientation)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* orientation = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Set3DConeOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, orientation});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DConeOrientation
// Il2CppName: FMOD5_ChannelGroup_Get3DConeOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DConeOrientation)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* orientation = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Get3DConeOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, orientation});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DCustomRolloff
// Il2CppName: FMOD5_ChannelGroup_Set3DCustomRolloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::FMOD::VECTOR>, int)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DCustomRolloff)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* points = &::il2cpp_utils::GetClassFromName("FMOD", "VECTOR")->this_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Set3DCustomRolloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, points, numpoints});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DCustomRolloff
// Il2CppName: FMOD5_ChannelGroup_Get3DCustomRolloff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>, ByRef<int>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DCustomRolloff)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* points = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    static auto* numpoints = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Get3DCustomRolloff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, points, numpoints});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DOcclusion
// Il2CppName: FMOD5_ChannelGroup_Set3DOcclusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float, float)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DOcclusion)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Set3DOcclusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, directocclusion, reverbocclusion});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DOcclusion
// Il2CppName: FMOD5_ChannelGroup_Get3DOcclusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>, ByRef<float>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DOcclusion)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* directocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* reverbocclusion = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Get3DOcclusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, directocclusion, reverbocclusion});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DSpread
// Il2CppName: FMOD5_ChannelGroup_Set3DSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DSpread)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Set3DSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, angle});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DSpread
// Il2CppName: FMOD5_ChannelGroup_Get3DSpread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DSpread)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Get3DSpread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, angle});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DLevel
// Il2CppName: FMOD5_ChannelGroup_Set3DLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DLevel)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Set3DLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, level});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DLevel
// Il2CppName: FMOD5_ChannelGroup_Get3DLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DLevel)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Get3DLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, level});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DDopplerLevel
// Il2CppName: FMOD5_ChannelGroup_Set3DDopplerLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, float)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DDopplerLevel)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Set3DDopplerLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, level});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DDopplerLevel
// Il2CppName: FMOD5_ChannelGroup_Get3DDopplerLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<float>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DDopplerLevel)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Get3DDopplerLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, level});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DDistanceFilter
// Il2CppName: FMOD5_ChannelGroup_Set3DDistanceFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, bool, float, float)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Set3DDistanceFilter)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* custom = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* customLevel = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* centerFreq = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Set3DDistanceFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, custom, customLevel, centerFreq});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DDistanceFilter
// Il2CppName: FMOD5_ChannelGroup_Get3DDistanceFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<bool>, ByRef<float>, ByRef<float>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_Get3DDistanceFilter)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* custom = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* customLevel = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* centerFreq = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_Get3DDistanceFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, custom, customLevel, centerFreq});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_SetUserData
// Il2CppName: FMOD5_ChannelGroup_SetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ::System::IntPtr)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_SetUserData)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_SetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::FMOD5_ChannelGroup_GetUserData
// Il2CppName: FMOD5_ChannelGroup_GetUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, ByRef<::System::IntPtr>)>(&FMOD::ChannelGroup::FMOD5_ChannelGroup_GetUserData)> {
  static const MethodInfo* get() {
    static auto* channelgroup = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "FMOD5_ChannelGroup_GetUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelgroup, userdata});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::hasHandle
// Il2CppName: hasHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::ChannelGroup::*)()>(&FMOD::ChannelGroup::hasHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "hasHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::ChannelGroup::clearHandle
// Il2CppName: clearHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::ChannelGroup::*)()>(&FMOD::ChannelGroup::clearHandle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::ChannelGroup), "clearHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
