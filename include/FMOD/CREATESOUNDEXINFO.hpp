// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: FMOD.SOUND_FORMAT
#include "FMOD/SOUND_FORMAT.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: FMOD.SOUND_TYPE
#include "FMOD/SOUND_TYPE.hpp"
// Including type: FMOD.CHANNELORDER
#include "FMOD/CHANNELORDER.hpp"
// Including type: FMOD.CHANNELMASK
#include "FMOD/CHANNELMASK.hpp"
// Including type: FMOD.TIMEUNIT
#include "FMOD/TIMEUNIT.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: SOUND_PCMREADCALLBACK
  class SOUND_PCMREADCALLBACK;
  // Forward declaring type: SOUND_PCMSETPOSCALLBACK
  class SOUND_PCMSETPOSCALLBACK;
  // Forward declaring type: SOUND_NONBLOCKCALLBACK
  class SOUND_NONBLOCKCALLBACK;
  // Forward declaring type: FILE_OPENCALLBACK
  class FILE_OPENCALLBACK;
  // Forward declaring type: FILE_CLOSECALLBACK
  class FILE_CLOSECALLBACK;
  // Forward declaring type: FILE_READCALLBACK
  class FILE_READCALLBACK;
  // Forward declaring type: FILE_SEEKCALLBACK
  class FILE_SEEKCALLBACK;
  // Forward declaring type: FILE_ASYNCREADCALLBACK
  class FILE_ASYNCREADCALLBACK;
  // Forward declaring type: FILE_ASYNCCANCELCALLBACK
  class FILE_ASYNCCANCELCALLBACK;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: CREATESOUNDEXINFO
  struct CREATESOUNDEXINFO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::CREATESOUNDEXINFO, "FMOD", "CREATESOUNDEXINFO");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0xE8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.CREATESOUNDEXINFO
  // [TokenAttribute] Offset: FFFFFFFF
  struct CREATESOUNDEXINFO/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 cbsize
    // Size: 0x4
    // Offset: 0x0
    int cbsize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.UInt32 length
    // Size: 0x4
    // Offset: 0x4
    uint length;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 fileoffset
    // Size: 0x4
    // Offset: 0x8
    uint fileoffset;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Int32 numchannels
    // Size: 0x4
    // Offset: 0xC
    int numchannels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 defaultfrequency
    // Size: 0x4
    // Offset: 0x10
    int defaultfrequency;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public FMOD.SOUND_FORMAT format
    // Size: 0x4
    // Offset: 0x14
    ::FMOD::SOUND_FORMAT format;
    // Field size check
    static_assert(sizeof(::FMOD::SOUND_FORMAT) == 0x4);
    // public System.UInt32 decodebuffersize
    // Size: 0x4
    // Offset: 0x18
    uint decodebuffersize;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Int32 initialsubsound
    // Size: 0x4
    // Offset: 0x1C
    int initialsubsound;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 numsubsounds
    // Size: 0x4
    // Offset: 0x20
    int numsubsounds;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: numsubsounds and: inclusionlist
    char __padding8[0x4] = {};
    // public System.IntPtr inclusionlist
    // Size: 0x8
    // Offset: 0x28
    ::System::IntPtr inclusionlist;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.Int32 inclusionlistnum
    // Size: 0x4
    // Offset: 0x30
    int inclusionlistnum;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: inclusionlistnum and: pcmreadcallback_handle
    char __padding10[0x4] = {};
    // public System.IntPtr pcmreadcallback_handle
    // Size: 0x8
    // Offset: 0x38
    ::System::IntPtr pcmreadcallback_handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr pcmsetposcallback_handle
    // Size: 0x8
    // Offset: 0x40
    ::System::IntPtr pcmsetposcallback_handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr nonblockcallback_handle
    // Size: 0x8
    // Offset: 0x48
    ::System::IntPtr nonblockcallback_handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr dlsname
    // Size: 0x8
    // Offset: 0x50
    ::System::IntPtr dlsname;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr encryptionkey
    // Size: 0x8
    // Offset: 0x58
    ::System::IntPtr encryptionkey;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.Int32 maxpolyphony
    // Size: 0x4
    // Offset: 0x60
    int maxpolyphony;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: maxpolyphony and: userdata
    char __padding16[0x4] = {};
    // public System.IntPtr userdata
    // Size: 0x8
    // Offset: 0x68
    ::System::IntPtr userdata;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public FMOD.SOUND_TYPE suggestedsoundtype
    // Size: 0x4
    // Offset: 0x70
    ::FMOD::SOUND_TYPE suggestedsoundtype;
    // Field size check
    static_assert(sizeof(::FMOD::SOUND_TYPE) == 0x4);
    // Padding between fields: suggestedsoundtype and: fileuseropen_handle
    char __padding18[0x4] = {};
    // public System.IntPtr fileuseropen_handle
    // Size: 0x8
    // Offset: 0x78
    ::System::IntPtr fileuseropen_handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr fileuserclose_handle
    // Size: 0x8
    // Offset: 0x80
    ::System::IntPtr fileuserclose_handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr fileuserread_handle
    // Size: 0x8
    // Offset: 0x88
    ::System::IntPtr fileuserread_handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr fileuserseek_handle
    // Size: 0x8
    // Offset: 0x90
    ::System::IntPtr fileuserseek_handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr fileuserasyncread_handle
    // Size: 0x8
    // Offset: 0x98
    ::System::IntPtr fileuserasyncread_handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr fileuserasynccancel_handle
    // Size: 0x8
    // Offset: 0xA0
    ::System::IntPtr fileuserasynccancel_handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr fileuserdata
    // Size: 0x8
    // Offset: 0xA8
    ::System::IntPtr fileuserdata;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.Int32 filebuffersize
    // Size: 0x4
    // Offset: 0xB0
    int filebuffersize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public FMOD.CHANNELORDER channelorder
    // Size: 0x4
    // Offset: 0xB4
    ::FMOD::CHANNELORDER channelorder;
    // Field size check
    static_assert(sizeof(::FMOD::CHANNELORDER) == 0x4);
    // public FMOD.CHANNELMASK channelmask
    // Size: 0x4
    // Offset: 0xB8
    ::FMOD::CHANNELMASK channelmask;
    // Field size check
    static_assert(sizeof(::FMOD::CHANNELMASK) == 0x4);
    // Padding between fields: channelmask and: initialsoundgroup
    char __padding28[0x4] = {};
    // public System.IntPtr initialsoundgroup
    // Size: 0x8
    // Offset: 0xC0
    ::System::IntPtr initialsoundgroup;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.UInt32 initialseekposition
    // Size: 0x4
    // Offset: 0xC8
    uint initialseekposition;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public FMOD.TIMEUNIT initialseekpostype
    // Size: 0x4
    // Offset: 0xCC
    ::FMOD::TIMEUNIT initialseekpostype;
    // Field size check
    static_assert(sizeof(::FMOD::TIMEUNIT) == 0x4);
    // public System.Int32 ignoresetfilesystem
    // Size: 0x4
    // Offset: 0xD0
    int ignoresetfilesystem;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.UInt32 audioqueuepolicy
    // Size: 0x4
    // Offset: 0xD4
    uint audioqueuepolicy;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 minmidigranularity
    // Size: 0x4
    // Offset: 0xD8
    uint minmidigranularity;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Int32 nonblockthreadid
    // Size: 0x4
    // Offset: 0xDC
    int nonblockthreadid;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.IntPtr fsbguid
    // Size: 0x8
    // Offset: 0xE0
    ::System::IntPtr fsbguid;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    public:
    // Creating value type constructor for type: CREATESOUNDEXINFO
    constexpr CREATESOUNDEXINFO(int cbsize_ = {}, uint length_ = {}, uint fileoffset_ = {}, int numchannels_ = {}, int defaultfrequency_ = {}, ::FMOD::SOUND_FORMAT format_ = {}, uint decodebuffersize_ = {}, int initialsubsound_ = {}, int numsubsounds_ = {}, ::System::IntPtr inclusionlist_ = {}, int inclusionlistnum_ = {}, ::System::IntPtr pcmreadcallback_handle_ = {}, ::System::IntPtr pcmsetposcallback_handle_ = {}, ::System::IntPtr nonblockcallback_handle_ = {}, ::System::IntPtr dlsname_ = {}, ::System::IntPtr encryptionkey_ = {}, int maxpolyphony_ = {}, ::System::IntPtr userdata_ = {}, ::FMOD::SOUND_TYPE suggestedsoundtype_ = {}, ::System::IntPtr fileuseropen_handle_ = {}, ::System::IntPtr fileuserclose_handle_ = {}, ::System::IntPtr fileuserread_handle_ = {}, ::System::IntPtr fileuserseek_handle_ = {}, ::System::IntPtr fileuserasyncread_handle_ = {}, ::System::IntPtr fileuserasynccancel_handle_ = {}, ::System::IntPtr fileuserdata_ = {}, int filebuffersize_ = {}, ::FMOD::CHANNELORDER channelorder_ = {}, ::FMOD::CHANNELMASK channelmask_ = {}, ::System::IntPtr initialsoundgroup_ = {}, uint initialseekposition_ = {}, ::FMOD::TIMEUNIT initialseekpostype_ = {}, int ignoresetfilesystem_ = {}, uint audioqueuepolicy_ = {}, uint minmidigranularity_ = {}, int nonblockthreadid_ = {}, ::System::IntPtr fsbguid_ = {}) noexcept : cbsize{cbsize_}, length{length_}, fileoffset{fileoffset_}, numchannels{numchannels_}, defaultfrequency{defaultfrequency_}, format{format_}, decodebuffersize{decodebuffersize_}, initialsubsound{initialsubsound_}, numsubsounds{numsubsounds_}, inclusionlist{inclusionlist_}, inclusionlistnum{inclusionlistnum_}, pcmreadcallback_handle{pcmreadcallback_handle_}, pcmsetposcallback_handle{pcmsetposcallback_handle_}, nonblockcallback_handle{nonblockcallback_handle_}, dlsname{dlsname_}, encryptionkey{encryptionkey_}, maxpolyphony{maxpolyphony_}, userdata{userdata_}, suggestedsoundtype{suggestedsoundtype_}, fileuseropen_handle{fileuseropen_handle_}, fileuserclose_handle{fileuserclose_handle_}, fileuserread_handle{fileuserread_handle_}, fileuserseek_handle{fileuserseek_handle_}, fileuserasyncread_handle{fileuserasyncread_handle_}, fileuserasynccancel_handle{fileuserasynccancel_handle_}, fileuserdata{fileuserdata_}, filebuffersize{filebuffersize_}, channelorder{channelorder_}, channelmask{channelmask_}, initialsoundgroup{initialsoundgroup_}, initialseekposition{initialseekposition_}, initialseekpostype{initialseekpostype_}, ignoresetfilesystem{ignoresetfilesystem_}, audioqueuepolicy{audioqueuepolicy_}, minmidigranularity{minmidigranularity_}, nonblockthreadid{nonblockthreadid_}, fsbguid{fsbguid_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 cbsize
    [[deprecated("Use field access instead!")]] int& dyn_cbsize();
    // Get instance field reference: public System.UInt32 length
    [[deprecated("Use field access instead!")]] uint& dyn_length();
    // Get instance field reference: public System.UInt32 fileoffset
    [[deprecated("Use field access instead!")]] uint& dyn_fileoffset();
    // Get instance field reference: public System.Int32 numchannels
    [[deprecated("Use field access instead!")]] int& dyn_numchannels();
    // Get instance field reference: public System.Int32 defaultfrequency
    [[deprecated("Use field access instead!")]] int& dyn_defaultfrequency();
    // Get instance field reference: public FMOD.SOUND_FORMAT format
    [[deprecated("Use field access instead!")]] ::FMOD::SOUND_FORMAT& dyn_format();
    // Get instance field reference: public System.UInt32 decodebuffersize
    [[deprecated("Use field access instead!")]] uint& dyn_decodebuffersize();
    // Get instance field reference: public System.Int32 initialsubsound
    [[deprecated("Use field access instead!")]] int& dyn_initialsubsound();
    // Get instance field reference: public System.Int32 numsubsounds
    [[deprecated("Use field access instead!")]] int& dyn_numsubsounds();
    // Get instance field reference: public System.IntPtr inclusionlist
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_inclusionlist();
    // Get instance field reference: public System.Int32 inclusionlistnum
    [[deprecated("Use field access instead!")]] int& dyn_inclusionlistnum();
    // Get instance field reference: public System.IntPtr pcmreadcallback_handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_pcmreadcallback_handle();
    // Get instance field reference: public System.IntPtr pcmsetposcallback_handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_pcmsetposcallback_handle();
    // Get instance field reference: public System.IntPtr nonblockcallback_handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_nonblockcallback_handle();
    // Get instance field reference: public System.IntPtr dlsname
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_dlsname();
    // Get instance field reference: public System.IntPtr encryptionkey
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_encryptionkey();
    // Get instance field reference: public System.Int32 maxpolyphony
    [[deprecated("Use field access instead!")]] int& dyn_maxpolyphony();
    // Get instance field reference: public System.IntPtr userdata
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_userdata();
    // Get instance field reference: public FMOD.SOUND_TYPE suggestedsoundtype
    [[deprecated("Use field access instead!")]] ::FMOD::SOUND_TYPE& dyn_suggestedsoundtype();
    // Get instance field reference: public System.IntPtr fileuseropen_handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_fileuseropen_handle();
    // Get instance field reference: public System.IntPtr fileuserclose_handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_fileuserclose_handle();
    // Get instance field reference: public System.IntPtr fileuserread_handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_fileuserread_handle();
    // Get instance field reference: public System.IntPtr fileuserseek_handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_fileuserseek_handle();
    // Get instance field reference: public System.IntPtr fileuserasyncread_handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_fileuserasyncread_handle();
    // Get instance field reference: public System.IntPtr fileuserasynccancel_handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_fileuserasynccancel_handle();
    // Get instance field reference: public System.IntPtr fileuserdata
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_fileuserdata();
    // Get instance field reference: public System.Int32 filebuffersize
    [[deprecated("Use field access instead!")]] int& dyn_filebuffersize();
    // Get instance field reference: public FMOD.CHANNELORDER channelorder
    [[deprecated("Use field access instead!")]] ::FMOD::CHANNELORDER& dyn_channelorder();
    // Get instance field reference: public FMOD.CHANNELMASK channelmask
    [[deprecated("Use field access instead!")]] ::FMOD::CHANNELMASK& dyn_channelmask();
    // Get instance field reference: public System.IntPtr initialsoundgroup
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_initialsoundgroup();
    // Get instance field reference: public System.UInt32 initialseekposition
    [[deprecated("Use field access instead!")]] uint& dyn_initialseekposition();
    // Get instance field reference: public FMOD.TIMEUNIT initialseekpostype
    [[deprecated("Use field access instead!")]] ::FMOD::TIMEUNIT& dyn_initialseekpostype();
    // Get instance field reference: public System.Int32 ignoresetfilesystem
    [[deprecated("Use field access instead!")]] int& dyn_ignoresetfilesystem();
    // Get instance field reference: public System.UInt32 audioqueuepolicy
    [[deprecated("Use field access instead!")]] uint& dyn_audioqueuepolicy();
    // Get instance field reference: public System.UInt32 minmidigranularity
    [[deprecated("Use field access instead!")]] uint& dyn_minmidigranularity();
    // Get instance field reference: public System.Int32 nonblockthreadid
    [[deprecated("Use field access instead!")]] int& dyn_nonblockthreadid();
    // Get instance field reference: public System.IntPtr fsbguid
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_fsbguid();
    // public System.Void set_pcmreadcallback(FMOD.SOUND_PCMREADCALLBACK value)
    // Offset: 0xBBB79C
    void set_pcmreadcallback(::FMOD::SOUND_PCMREADCALLBACK* value);
    // public System.Void set_pcmsetposcallback(FMOD.SOUND_PCMSETPOSCALLBACK value)
    // Offset: 0xBBB7A4
    void set_pcmsetposcallback(::FMOD::SOUND_PCMSETPOSCALLBACK* value);
    // public System.Void set_nonblockcallback(FMOD.SOUND_NONBLOCKCALLBACK value)
    // Offset: 0xBBB7AC
    void set_nonblockcallback(::FMOD::SOUND_NONBLOCKCALLBACK* value);
    // public System.Void set_fileuseropen(FMOD.FILE_OPENCALLBACK value)
    // Offset: 0xBBB7B4
    void set_fileuseropen(::FMOD::FILE_OPENCALLBACK* value);
    // public System.Void set_fileuserclose(FMOD.FILE_CLOSECALLBACK value)
    // Offset: 0xBBB7BC
    void set_fileuserclose(::FMOD::FILE_CLOSECALLBACK* value);
    // public System.Void set_fileuserread(FMOD.FILE_READCALLBACK value)
    // Offset: 0xBBB7C4
    void set_fileuserread(::FMOD::FILE_READCALLBACK* value);
    // public System.Void set_fileuserseek(FMOD.FILE_SEEKCALLBACK value)
    // Offset: 0xBBB7CC
    void set_fileuserseek(::FMOD::FILE_SEEKCALLBACK* value);
    // public System.Void set_fileuserasyncread(FMOD.FILE_ASYNCREADCALLBACK value)
    // Offset: 0xBBB7D4
    void set_fileuserasyncread(::FMOD::FILE_ASYNCREADCALLBACK* value);
    // public System.Void set_fileuserasynccancel(FMOD.FILE_ASYNCCANCELCALLBACK value)
    // Offset: 0xBBB7DC
    void set_fileuserasynccancel(::FMOD::FILE_ASYNCCANCELCALLBACK* value);
  }; // FMOD.CREATESOUNDEXINFO
  #pragma pack(pop)
  static check_size<sizeof(CREATESOUNDEXINFO), 224 + sizeof(::System::IntPtr)> __FMOD_CREATESOUNDEXINFOSizeCheck;
  static_assert(sizeof(CREATESOUNDEXINFO) == 0xE8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::CREATESOUNDEXINFO::set_pcmreadcallback
// Il2CppName: set_pcmreadcallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::CREATESOUNDEXINFO::*)(::FMOD::SOUND_PCMREADCALLBACK*)>(&FMOD::CREATESOUNDEXINFO::set_pcmreadcallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("FMOD", "SOUND_PCMREADCALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::CREATESOUNDEXINFO), "set_pcmreadcallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: FMOD::CREATESOUNDEXINFO::set_pcmsetposcallback
// Il2CppName: set_pcmsetposcallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::CREATESOUNDEXINFO::*)(::FMOD::SOUND_PCMSETPOSCALLBACK*)>(&FMOD::CREATESOUNDEXINFO::set_pcmsetposcallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("FMOD", "SOUND_PCMSETPOSCALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::CREATESOUNDEXINFO), "set_pcmsetposcallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: FMOD::CREATESOUNDEXINFO::set_nonblockcallback
// Il2CppName: set_nonblockcallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::CREATESOUNDEXINFO::*)(::FMOD::SOUND_NONBLOCKCALLBACK*)>(&FMOD::CREATESOUNDEXINFO::set_nonblockcallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("FMOD", "SOUND_NONBLOCKCALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::CREATESOUNDEXINFO), "set_nonblockcallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: FMOD::CREATESOUNDEXINFO::set_fileuseropen
// Il2CppName: set_fileuseropen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::CREATESOUNDEXINFO::*)(::FMOD::FILE_OPENCALLBACK*)>(&FMOD::CREATESOUNDEXINFO::set_fileuseropen)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_OPENCALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::CREATESOUNDEXINFO), "set_fileuseropen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: FMOD::CREATESOUNDEXINFO::set_fileuserclose
// Il2CppName: set_fileuserclose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::CREATESOUNDEXINFO::*)(::FMOD::FILE_CLOSECALLBACK*)>(&FMOD::CREATESOUNDEXINFO::set_fileuserclose)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_CLOSECALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::CREATESOUNDEXINFO), "set_fileuserclose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: FMOD::CREATESOUNDEXINFO::set_fileuserread
// Il2CppName: set_fileuserread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::CREATESOUNDEXINFO::*)(::FMOD::FILE_READCALLBACK*)>(&FMOD::CREATESOUNDEXINFO::set_fileuserread)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_READCALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::CREATESOUNDEXINFO), "set_fileuserread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: FMOD::CREATESOUNDEXINFO::set_fileuserseek
// Il2CppName: set_fileuserseek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::CREATESOUNDEXINFO::*)(::FMOD::FILE_SEEKCALLBACK*)>(&FMOD::CREATESOUNDEXINFO::set_fileuserseek)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_SEEKCALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::CREATESOUNDEXINFO), "set_fileuserseek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: FMOD::CREATESOUNDEXINFO::set_fileuserasyncread
// Il2CppName: set_fileuserasyncread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::CREATESOUNDEXINFO::*)(::FMOD::FILE_ASYNCREADCALLBACK*)>(&FMOD::CREATESOUNDEXINFO::set_fileuserasyncread)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_ASYNCREADCALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::CREATESOUNDEXINFO), "set_fileuserasyncread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: FMOD::CREATESOUNDEXINFO::set_fileuserasynccancel
// Il2CppName: set_fileuserasynccancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::CREATESOUNDEXINFO::*)(::FMOD::FILE_ASYNCCANCELCALLBACK*)>(&FMOD::CREATESOUNDEXINFO::set_fileuserasynccancel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("FMOD", "FILE_ASYNCCANCELCALLBACK")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::CREATESOUNDEXINFO), "set_fileuserasynccancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
