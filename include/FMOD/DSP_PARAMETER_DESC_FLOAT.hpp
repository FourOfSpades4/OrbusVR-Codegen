// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: FMOD.DSP_PARAMETER_FLOAT_MAPPING
#include "FMOD/DSP_PARAMETER_FLOAT_MAPPING.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: DSP_PARAMETER_DESC_FLOAT
  struct DSP_PARAMETER_DESC_FLOAT;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::DSP_PARAMETER_DESC_FLOAT, "FMOD", "DSP_PARAMETER_DESC_FLOAT");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.DSP_PARAMETER_DESC_FLOAT
  // [TokenAttribute] Offset: FFFFFFFF
  struct DSP_PARAMETER_DESC_FLOAT/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single min
    // Size: 0x4
    // Offset: 0x0
    float min;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single max
    // Size: 0x4
    // Offset: 0x4
    float max;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single defaultval
    // Size: 0x4
    // Offset: 0x8
    float defaultval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: defaultval and: mapping
    char __padding2[0x4] = {};
    // public FMOD.DSP_PARAMETER_FLOAT_MAPPING mapping
    // Size: 0x20
    // Offset: 0x10
    ::FMOD::DSP_PARAMETER_FLOAT_MAPPING mapping;
    // Field size check
    static_assert(sizeof(::FMOD::DSP_PARAMETER_FLOAT_MAPPING) == 0x20);
    public:
    // Creating value type constructor for type: DSP_PARAMETER_DESC_FLOAT
    constexpr DSP_PARAMETER_DESC_FLOAT(float min_ = {}, float max_ = {}, float defaultval_ = {}, ::FMOD::DSP_PARAMETER_FLOAT_MAPPING mapping_ = {}) noexcept : min{min_}, max{max_}, defaultval{defaultval_}, mapping{mapping_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single min
    [[deprecated("Use field access instead!")]] float& dyn_min();
    // Get instance field reference: public System.Single max
    [[deprecated("Use field access instead!")]] float& dyn_max();
    // Get instance field reference: public System.Single defaultval
    [[deprecated("Use field access instead!")]] float& dyn_defaultval();
    // Get instance field reference: public FMOD.DSP_PARAMETER_FLOAT_MAPPING mapping
    [[deprecated("Use field access instead!")]] ::FMOD::DSP_PARAMETER_FLOAT_MAPPING& dyn_mapping();
  }; // FMOD.DSP_PARAMETER_DESC_FLOAT
  #pragma pack(pop)
  static check_size<sizeof(DSP_PARAMETER_DESC_FLOAT), 16 + sizeof(::FMOD::DSP_PARAMETER_FLOAT_MAPPING)> __FMOD_DSP_PARAMETER_DESC_FLOATSizeCheck;
  static_assert(sizeof(DSP_PARAMETER_DESC_FLOAT) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
