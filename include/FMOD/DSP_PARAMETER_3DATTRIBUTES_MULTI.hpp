// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: FMOD.ATTRIBUTES_3D
#include "FMOD/ATTRIBUTES_3D.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: DSP_PARAMETER_3DATTRIBUTES_MULTI
  struct DSP_PARAMETER_3DATTRIBUTES_MULTI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::DSP_PARAMETER_3DATTRIBUTES_MULTI, "FMOD", "DSP_PARAMETER_3DATTRIBUTES_MULTI");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x48
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.DSP_PARAMETER_3DATTRIBUTES_MULTI
  // [TokenAttribute] Offset: FFFFFFFF
  struct DSP_PARAMETER_3DATTRIBUTES_MULTI/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 numlisteners
    // Size: 0x4
    // Offset: 0x0
    int numlisteners;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: numlisteners and: relative
    char __padding0[0x4] = {};
    // public FMOD.ATTRIBUTES_3D[] relative
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<::FMOD::ATTRIBUTES_3D> relative;
    // Field size check
    static_assert(sizeof(::ArrayW<::FMOD::ATTRIBUTES_3D>) == 0x8);
    // public System.Single[] weight
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<float> weight;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public FMOD.ATTRIBUTES_3D absolute
    // Size: 0x30
    // Offset: 0x18
    ::FMOD::ATTRIBUTES_3D absolute;
    // Field size check
    static_assert(sizeof(::FMOD::ATTRIBUTES_3D) == 0x30);
    public:
    // Creating value type constructor for type: DSP_PARAMETER_3DATTRIBUTES_MULTI
    constexpr DSP_PARAMETER_3DATTRIBUTES_MULTI(int numlisteners_ = {}, ::ArrayW<::FMOD::ATTRIBUTES_3D> relative_ = ::ArrayW<::FMOD::ATTRIBUTES_3D>(static_cast<void*>(nullptr)), ::ArrayW<float> weight_ = ::ArrayW<float>(static_cast<void*>(nullptr)), ::FMOD::ATTRIBUTES_3D absolute_ = {}) noexcept : numlisteners{numlisteners_}, relative{relative_}, weight{weight_}, absolute{absolute_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 numlisteners
    [[deprecated("Use field access instead!")]] int& dyn_numlisteners();
    // Get instance field reference: public FMOD.ATTRIBUTES_3D[] relative
    [[deprecated("Use field access instead!")]] ::ArrayW<::FMOD::ATTRIBUTES_3D>& dyn_relative();
    // Get instance field reference: public System.Single[] weight
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_weight();
    // Get instance field reference: public FMOD.ATTRIBUTES_3D absolute
    [[deprecated("Use field access instead!")]] ::FMOD::ATTRIBUTES_3D& dyn_absolute();
  }; // FMOD.DSP_PARAMETER_3DATTRIBUTES_MULTI
  #pragma pack(pop)
  static check_size<sizeof(DSP_PARAMETER_3DATTRIBUTES_MULTI), 24 + sizeof(::FMOD::ATTRIBUTES_3D)> __FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTISizeCheck;
  static_assert(sizeof(DSP_PARAMETER_3DATTRIBUTES_MULTI) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
