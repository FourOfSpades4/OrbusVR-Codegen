// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: SOUND_TYPE
  struct SOUND_TYPE;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::SOUND_TYPE, "FMOD", "SOUND_TYPE");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.SOUND_TYPE
  // [TokenAttribute] Offset: FFFFFFFF
  struct SOUND_TYPE/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: SOUND_TYPE
    constexpr SOUND_TYPE(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.SOUND_TYPE UNKNOWN
    static constexpr const int UNKNOWN = 0;
    // Get static field: static public FMOD.SOUND_TYPE UNKNOWN
    static ::FMOD::SOUND_TYPE _get_UNKNOWN();
    // Set static field: static public FMOD.SOUND_TYPE UNKNOWN
    static void _set_UNKNOWN(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE AIFF
    static constexpr const int AIFF = 1;
    // Get static field: static public FMOD.SOUND_TYPE AIFF
    static ::FMOD::SOUND_TYPE _get_AIFF();
    // Set static field: static public FMOD.SOUND_TYPE AIFF
    static void _set_AIFF(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE ASF
    static constexpr const int ASF = 2;
    // Get static field: static public FMOD.SOUND_TYPE ASF
    static ::FMOD::SOUND_TYPE _get_ASF();
    // Set static field: static public FMOD.SOUND_TYPE ASF
    static void _set_ASF(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE DLS
    static constexpr const int DLS = 3;
    // Get static field: static public FMOD.SOUND_TYPE DLS
    static ::FMOD::SOUND_TYPE _get_DLS();
    // Set static field: static public FMOD.SOUND_TYPE DLS
    static void _set_DLS(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE FLAC
    static constexpr const int FLAC = 4;
    // Get static field: static public FMOD.SOUND_TYPE FLAC
    static ::FMOD::SOUND_TYPE _get_FLAC();
    // Set static field: static public FMOD.SOUND_TYPE FLAC
    static void _set_FLAC(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE FSB
    static constexpr const int FSB = 5;
    // Get static field: static public FMOD.SOUND_TYPE FSB
    static ::FMOD::SOUND_TYPE _get_FSB();
    // Set static field: static public FMOD.SOUND_TYPE FSB
    static void _set_FSB(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE IT
    static constexpr const int IT = 6;
    // Get static field: static public FMOD.SOUND_TYPE IT
    static ::FMOD::SOUND_TYPE _get_IT();
    // Set static field: static public FMOD.SOUND_TYPE IT
    static void _set_IT(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE MIDI
    static constexpr const int MIDI = 7;
    // Get static field: static public FMOD.SOUND_TYPE MIDI
    static ::FMOD::SOUND_TYPE _get_MIDI();
    // Set static field: static public FMOD.SOUND_TYPE MIDI
    static void _set_MIDI(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE MOD
    static constexpr const int MOD = 8;
    // Get static field: static public FMOD.SOUND_TYPE MOD
    static ::FMOD::SOUND_TYPE _get_MOD();
    // Set static field: static public FMOD.SOUND_TYPE MOD
    static void _set_MOD(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE MPEG
    static constexpr const int MPEG = 9;
    // Get static field: static public FMOD.SOUND_TYPE MPEG
    static ::FMOD::SOUND_TYPE _get_MPEG();
    // Set static field: static public FMOD.SOUND_TYPE MPEG
    static void _set_MPEG(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE OGGVORBIS
    static constexpr const int OGGVORBIS = 10;
    // Get static field: static public FMOD.SOUND_TYPE OGGVORBIS
    static ::FMOD::SOUND_TYPE _get_OGGVORBIS();
    // Set static field: static public FMOD.SOUND_TYPE OGGVORBIS
    static void _set_OGGVORBIS(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE PLAYLIST
    static constexpr const int PLAYLIST = 11;
    // Get static field: static public FMOD.SOUND_TYPE PLAYLIST
    static ::FMOD::SOUND_TYPE _get_PLAYLIST();
    // Set static field: static public FMOD.SOUND_TYPE PLAYLIST
    static void _set_PLAYLIST(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE RAW
    static constexpr const int RAW = 12;
    // Get static field: static public FMOD.SOUND_TYPE RAW
    static ::FMOD::SOUND_TYPE _get_RAW();
    // Set static field: static public FMOD.SOUND_TYPE RAW
    static void _set_RAW(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE S3M
    static constexpr const int S3M = 13;
    // Get static field: static public FMOD.SOUND_TYPE S3M
    static ::FMOD::SOUND_TYPE _get_S3M();
    // Set static field: static public FMOD.SOUND_TYPE S3M
    static void _set_S3M(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE USER
    static constexpr const int USER = 14;
    // Get static field: static public FMOD.SOUND_TYPE USER
    static ::FMOD::SOUND_TYPE _get_USER();
    // Set static field: static public FMOD.SOUND_TYPE USER
    static void _set_USER(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE WAV
    static constexpr const int WAV = 15;
    // Get static field: static public FMOD.SOUND_TYPE WAV
    static ::FMOD::SOUND_TYPE _get_WAV();
    // Set static field: static public FMOD.SOUND_TYPE WAV
    static void _set_WAV(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE XM
    static constexpr const int XM = 16;
    // Get static field: static public FMOD.SOUND_TYPE XM
    static ::FMOD::SOUND_TYPE _get_XM();
    // Set static field: static public FMOD.SOUND_TYPE XM
    static void _set_XM(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE XMA
    static constexpr const int XMA = 17;
    // Get static field: static public FMOD.SOUND_TYPE XMA
    static ::FMOD::SOUND_TYPE _get_XMA();
    // Set static field: static public FMOD.SOUND_TYPE XMA
    static void _set_XMA(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE AUDIOQUEUE
    static constexpr const int AUDIOQUEUE = 18;
    // Get static field: static public FMOD.SOUND_TYPE AUDIOQUEUE
    static ::FMOD::SOUND_TYPE _get_AUDIOQUEUE();
    // Set static field: static public FMOD.SOUND_TYPE AUDIOQUEUE
    static void _set_AUDIOQUEUE(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE AT9
    static constexpr const int AT9 = 19;
    // Get static field: static public FMOD.SOUND_TYPE AT9
    static ::FMOD::SOUND_TYPE _get_AT9();
    // Set static field: static public FMOD.SOUND_TYPE AT9
    static void _set_AT9(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE VORBIS
    static constexpr const int VORBIS = 20;
    // Get static field: static public FMOD.SOUND_TYPE VORBIS
    static ::FMOD::SOUND_TYPE _get_VORBIS();
    // Set static field: static public FMOD.SOUND_TYPE VORBIS
    static void _set_VORBIS(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE MEDIA_FOUNDATION
    static constexpr const int MEDIA_FOUNDATION = 21;
    // Get static field: static public FMOD.SOUND_TYPE MEDIA_FOUNDATION
    static ::FMOD::SOUND_TYPE _get_MEDIA_FOUNDATION();
    // Set static field: static public FMOD.SOUND_TYPE MEDIA_FOUNDATION
    static void _set_MEDIA_FOUNDATION(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE MEDIACODEC
    static constexpr const int MEDIACODEC = 22;
    // Get static field: static public FMOD.SOUND_TYPE MEDIACODEC
    static ::FMOD::SOUND_TYPE _get_MEDIACODEC();
    // Set static field: static public FMOD.SOUND_TYPE MEDIACODEC
    static void _set_MEDIACODEC(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE FADPCM
    static constexpr const int FADPCM = 23;
    // Get static field: static public FMOD.SOUND_TYPE FADPCM
    static ::FMOD::SOUND_TYPE _get_FADPCM();
    // Set static field: static public FMOD.SOUND_TYPE FADPCM
    static void _set_FADPCM(::FMOD::SOUND_TYPE value);
    // static field const value: static public FMOD.SOUND_TYPE MAX
    static constexpr const int MAX = 24;
    // Get static field: static public FMOD.SOUND_TYPE MAX
    static ::FMOD::SOUND_TYPE _get_MAX();
    // Set static field: static public FMOD.SOUND_TYPE MAX
    static void _set_MAX(::FMOD::SOUND_TYPE value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // FMOD.SOUND_TYPE
  #pragma pack(pop)
  static check_size<sizeof(SOUND_TYPE), 0 + sizeof(int)> __FMOD_SOUND_TYPESizeCheck;
  static_assert(sizeof(SOUND_TYPE) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
