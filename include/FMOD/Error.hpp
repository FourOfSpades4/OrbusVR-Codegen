// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: Error
  class Error;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::FMOD::Error);
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Error*, "FMOD", "Error");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.Error
  // [TokenAttribute] Offset: FFFFFFFF
  class Error : public ::Il2CppObject {
    public:
    // static public System.String String(FMOD.RESULT errcode)
    // Offset: 0x22DA96C
    static ::StringW String(::FMOD::RESULT errcode);
    // public System.Void .ctor()
    // Offset: 0x22DA9D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Error* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::Error::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Error*, creationType>()));
    }
  }; // FMOD.Error
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::Error::String
// Il2CppName: String
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::FMOD::RESULT)>(&FMOD::Error::String)> {
  static const MethodInfo* get() {
    static auto* errcode = &::il2cpp_utils::GetClassFromName("FMOD", "RESULT")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Error*), "String", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{errcode});
  }
};
// Writing MetadataGetter for method: FMOD::Error::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
