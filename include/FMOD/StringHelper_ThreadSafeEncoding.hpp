// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: FMOD.StringHelper
#include "FMOD/StringHelper.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: UTF8Encoding
  class UTF8Encoding;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::FMOD::StringHelper::ThreadSafeEncoding);
DEFINE_IL2CPP_ARG_TYPE(::FMOD::StringHelper::ThreadSafeEncoding*, "FMOD", "StringHelper/ThreadSafeEncoding");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.StringHelper/ThreadSafeEncoding
  // [TokenAttribute] Offset: FFFFFFFF
  class StringHelper::ThreadSafeEncoding : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Text.UTF8Encoding encoding
    // Size: 0x8
    // Offset: 0x10
    ::System::Text::UTF8Encoding* encoding;
    // Field size check
    static_assert(sizeof(::System::Text::UTF8Encoding*) == 0x8);
    // private System.Byte[] encodedBuffer
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint8_t> encodedBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Char[] decodedBuffer
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::Il2CppChar> decodedBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // private System.Boolean inUse
    // Size: 0x1
    // Offset: 0x28
    bool inUse;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Text.UTF8Encoding encoding
    [[deprecated("Use field access instead!")]] ::System::Text::UTF8Encoding*& dyn_encoding();
    // Get instance field reference: private System.Byte[] encodedBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_encodedBuffer();
    // Get instance field reference: private System.Char[] decodedBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn_decodedBuffer();
    // Get instance field reference: private System.Boolean inUse
    [[deprecated("Use field access instead!")]] bool& dyn_inUse();
    // public System.Boolean InUse()
    // Offset: 0x22E4A60
    bool InUse();
    // public System.Void SetInUse()
    // Offset: 0x22E4B00
    void SetInUse();
    // private System.Int32 roundUpPowerTwo(System.Int32 number)
    // Offset: 0x22E4B84
    int roundUpPowerTwo(int number);
    // public System.Byte[] byteFromStringUTF8(System.String s)
    // Offset: 0x22DA6E0
    ::ArrayW<uint8_t> byteFromStringUTF8(::StringW s);
    // public System.String stringFromNative(System.IntPtr nativePtr)
    // Offset: 0x22E1F04
    ::StringW stringFromNative(::System::IntPtr nativePtr);
    // public System.Void Dispose()
    // Offset: 0x22E4B9C
    void Dispose();
    // public System.Void .ctor()
    // Offset: 0x22E4A68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringHelper::ThreadSafeEncoding* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::FMOD::StringHelper::ThreadSafeEncoding::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringHelper::ThreadSafeEncoding*, creationType>()));
    }
  }; // FMOD.StringHelper/ThreadSafeEncoding
  #pragma pack(pop)
  static check_size<sizeof(StringHelper::ThreadSafeEncoding), 40 + sizeof(bool)> __FMOD_StringHelper_ThreadSafeEncodingSizeCheck;
  static_assert(sizeof(StringHelper::ThreadSafeEncoding) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::StringHelper::ThreadSafeEncoding::InUse
// Il2CppName: InUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FMOD::StringHelper::ThreadSafeEncoding::*)()>(&FMOD::StringHelper::ThreadSafeEncoding::InUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::StringHelper::ThreadSafeEncoding*), "InUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::StringHelper::ThreadSafeEncoding::SetInUse
// Il2CppName: SetInUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::StringHelper::ThreadSafeEncoding::*)()>(&FMOD::StringHelper::ThreadSafeEncoding::SetInUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::StringHelper::ThreadSafeEncoding*), "SetInUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::StringHelper::ThreadSafeEncoding::roundUpPowerTwo
// Il2CppName: roundUpPowerTwo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FMOD::StringHelper::ThreadSafeEncoding::*)(int)>(&FMOD::StringHelper::ThreadSafeEncoding::roundUpPowerTwo)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::StringHelper::ThreadSafeEncoding*), "roundUpPowerTwo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number});
  }
};
// Writing MetadataGetter for method: FMOD::StringHelper::ThreadSafeEncoding::byteFromStringUTF8
// Il2CppName: byteFromStringUTF8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (FMOD::StringHelper::ThreadSafeEncoding::*)(::StringW)>(&FMOD::StringHelper::ThreadSafeEncoding::byteFromStringUTF8)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::StringHelper::ThreadSafeEncoding*), "byteFromStringUTF8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: FMOD::StringHelper::ThreadSafeEncoding::stringFromNative
// Il2CppName: stringFromNative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (FMOD::StringHelper::ThreadSafeEncoding::*)(::System::IntPtr)>(&FMOD::StringHelper::ThreadSafeEncoding::stringFromNative)> {
  static const MethodInfo* get() {
    static auto* nativePtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::StringHelper::ThreadSafeEncoding*), "stringFromNative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nativePtr});
  }
};
// Writing MetadataGetter for method: FMOD::StringHelper::ThreadSafeEncoding::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FMOD::StringHelper::ThreadSafeEncoding::*)()>(&FMOD::StringHelper::ThreadSafeEncoding::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FMOD::StringHelper::ThreadSafeEncoding*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FMOD::StringHelper::ThreadSafeEncoding::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
