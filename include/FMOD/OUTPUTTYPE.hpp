// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: OUTPUTTYPE
  struct OUTPUTTYPE;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::OUTPUTTYPE, "FMOD", "OUTPUTTYPE");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.OUTPUTTYPE
  // [TokenAttribute] Offset: FFFFFFFF
  struct OUTPUTTYPE/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: OUTPUTTYPE
    constexpr OUTPUTTYPE(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.OUTPUTTYPE AUTODETECT
    static constexpr const int AUTODETECT = 0;
    // Get static field: static public FMOD.OUTPUTTYPE AUTODETECT
    static ::FMOD::OUTPUTTYPE _get_AUTODETECT();
    // Set static field: static public FMOD.OUTPUTTYPE AUTODETECT
    static void _set_AUTODETECT(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE UNKNOWN
    static constexpr const int UNKNOWN = 1;
    // Get static field: static public FMOD.OUTPUTTYPE UNKNOWN
    static ::FMOD::OUTPUTTYPE _get_UNKNOWN();
    // Set static field: static public FMOD.OUTPUTTYPE UNKNOWN
    static void _set_UNKNOWN(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE NOSOUND
    static constexpr const int NOSOUND = 2;
    // Get static field: static public FMOD.OUTPUTTYPE NOSOUND
    static ::FMOD::OUTPUTTYPE _get_NOSOUND();
    // Set static field: static public FMOD.OUTPUTTYPE NOSOUND
    static void _set_NOSOUND(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE WAVWRITER
    static constexpr const int WAVWRITER = 3;
    // Get static field: static public FMOD.OUTPUTTYPE WAVWRITER
    static ::FMOD::OUTPUTTYPE _get_WAVWRITER();
    // Set static field: static public FMOD.OUTPUTTYPE WAVWRITER
    static void _set_WAVWRITER(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE NOSOUND_NRT
    static constexpr const int NOSOUND_NRT = 4;
    // Get static field: static public FMOD.OUTPUTTYPE NOSOUND_NRT
    static ::FMOD::OUTPUTTYPE _get_NOSOUND_NRT();
    // Set static field: static public FMOD.OUTPUTTYPE NOSOUND_NRT
    static void _set_NOSOUND_NRT(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE WAVWRITER_NRT
    static constexpr const int WAVWRITER_NRT = 5;
    // Get static field: static public FMOD.OUTPUTTYPE WAVWRITER_NRT
    static ::FMOD::OUTPUTTYPE _get_WAVWRITER_NRT();
    // Set static field: static public FMOD.OUTPUTTYPE WAVWRITER_NRT
    static void _set_WAVWRITER_NRT(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE DSOUND
    static constexpr const int DSOUND = 6;
    // Get static field: static public FMOD.OUTPUTTYPE DSOUND
    static ::FMOD::OUTPUTTYPE _get_DSOUND();
    // Set static field: static public FMOD.OUTPUTTYPE DSOUND
    static void _set_DSOUND(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE WINMM
    static constexpr const int WINMM = 7;
    // Get static field: static public FMOD.OUTPUTTYPE WINMM
    static ::FMOD::OUTPUTTYPE _get_WINMM();
    // Set static field: static public FMOD.OUTPUTTYPE WINMM
    static void _set_WINMM(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE WASAPI
    static constexpr const int WASAPI = 8;
    // Get static field: static public FMOD.OUTPUTTYPE WASAPI
    static ::FMOD::OUTPUTTYPE _get_WASAPI();
    // Set static field: static public FMOD.OUTPUTTYPE WASAPI
    static void _set_WASAPI(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE ASIO
    static constexpr const int ASIO = 9;
    // Get static field: static public FMOD.OUTPUTTYPE ASIO
    static ::FMOD::OUTPUTTYPE _get_ASIO();
    // Set static field: static public FMOD.OUTPUTTYPE ASIO
    static void _set_ASIO(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE PULSEAUDIO
    static constexpr const int PULSEAUDIO = 10;
    // Get static field: static public FMOD.OUTPUTTYPE PULSEAUDIO
    static ::FMOD::OUTPUTTYPE _get_PULSEAUDIO();
    // Set static field: static public FMOD.OUTPUTTYPE PULSEAUDIO
    static void _set_PULSEAUDIO(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE ALSA
    static constexpr const int ALSA = 11;
    // Get static field: static public FMOD.OUTPUTTYPE ALSA
    static ::FMOD::OUTPUTTYPE _get_ALSA();
    // Set static field: static public FMOD.OUTPUTTYPE ALSA
    static void _set_ALSA(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE COREAUDIO
    static constexpr const int COREAUDIO = 12;
    // Get static field: static public FMOD.OUTPUTTYPE COREAUDIO
    static ::FMOD::OUTPUTTYPE _get_COREAUDIO();
    // Set static field: static public FMOD.OUTPUTTYPE COREAUDIO
    static void _set_COREAUDIO(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE XAUDIO
    static constexpr const int XAUDIO = 13;
    // Get static field: static public FMOD.OUTPUTTYPE XAUDIO
    static ::FMOD::OUTPUTTYPE _get_XAUDIO();
    // Set static field: static public FMOD.OUTPUTTYPE XAUDIO
    static void _set_XAUDIO(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE PS3
    static constexpr const int PS3 = 14;
    // Get static field: static public FMOD.OUTPUTTYPE PS3
    static ::FMOD::OUTPUTTYPE _get_PS3();
    // Set static field: static public FMOD.OUTPUTTYPE PS3
    static void _set_PS3(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE AUDIOTRACK
    static constexpr const int AUDIOTRACK = 15;
    // Get static field: static public FMOD.OUTPUTTYPE AUDIOTRACK
    static ::FMOD::OUTPUTTYPE _get_AUDIOTRACK();
    // Set static field: static public FMOD.OUTPUTTYPE AUDIOTRACK
    static void _set_AUDIOTRACK(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE OPENSL
    static constexpr const int OPENSL = 16;
    // Get static field: static public FMOD.OUTPUTTYPE OPENSL
    static ::FMOD::OUTPUTTYPE _get_OPENSL();
    // Set static field: static public FMOD.OUTPUTTYPE OPENSL
    static void _set_OPENSL(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE WIIU
    static constexpr const int WIIU = 17;
    // Get static field: static public FMOD.OUTPUTTYPE WIIU
    static ::FMOD::OUTPUTTYPE _get_WIIU();
    // Set static field: static public FMOD.OUTPUTTYPE WIIU
    static void _set_WIIU(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE AUDIOOUT
    static constexpr const int AUDIOOUT = 18;
    // Get static field: static public FMOD.OUTPUTTYPE AUDIOOUT
    static ::FMOD::OUTPUTTYPE _get_AUDIOOUT();
    // Set static field: static public FMOD.OUTPUTTYPE AUDIOOUT
    static void _set_AUDIOOUT(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE AUDIO3D
    static constexpr const int AUDIO3D = 19;
    // Get static field: static public FMOD.OUTPUTTYPE AUDIO3D
    static ::FMOD::OUTPUTTYPE _get_AUDIO3D();
    // Set static field: static public FMOD.OUTPUTTYPE AUDIO3D
    static void _set_AUDIO3D(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE ATMOS
    static constexpr const int ATMOS = 20;
    // Get static field: static public FMOD.OUTPUTTYPE ATMOS
    static ::FMOD::OUTPUTTYPE _get_ATMOS();
    // Set static field: static public FMOD.OUTPUTTYPE ATMOS
    static void _set_ATMOS(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE WEBAUDIO
    static constexpr const int WEBAUDIO = 21;
    // Get static field: static public FMOD.OUTPUTTYPE WEBAUDIO
    static ::FMOD::OUTPUTTYPE _get_WEBAUDIO();
    // Set static field: static public FMOD.OUTPUTTYPE WEBAUDIO
    static void _set_WEBAUDIO(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE NNAUDIO
    static constexpr const int NNAUDIO = 22;
    // Get static field: static public FMOD.OUTPUTTYPE NNAUDIO
    static ::FMOD::OUTPUTTYPE _get_NNAUDIO();
    // Set static field: static public FMOD.OUTPUTTYPE NNAUDIO
    static void _set_NNAUDIO(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE WINSONIC
    static constexpr const int WINSONIC = 23;
    // Get static field: static public FMOD.OUTPUTTYPE WINSONIC
    static ::FMOD::OUTPUTTYPE _get_WINSONIC();
    // Set static field: static public FMOD.OUTPUTTYPE WINSONIC
    static void _set_WINSONIC(::FMOD::OUTPUTTYPE value);
    // static field const value: static public FMOD.OUTPUTTYPE MAX
    static constexpr const int MAX = 24;
    // Get static field: static public FMOD.OUTPUTTYPE MAX
    static ::FMOD::OUTPUTTYPE _get_MAX();
    // Set static field: static public FMOD.OUTPUTTYPE MAX
    static void _set_MAX(::FMOD::OUTPUTTYPE value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // FMOD.OUTPUTTYPE
  #pragma pack(pop)
  static check_size<sizeof(OUTPUTTYPE), 0 + sizeof(int)> __FMOD_OUTPUTTYPESizeCheck;
  static_assert(sizeof(OUTPUTTYPE) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
