// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
  // Forward declaring type: MEMORY_ALLOC_CALLBACK
  class MEMORY_ALLOC_CALLBACK;
  // Forward declaring type: MEMORY_REALLOC_CALLBACK
  class MEMORY_REALLOC_CALLBACK;
  // Forward declaring type: MEMORY_FREE_CALLBACK
  class MEMORY_FREE_CALLBACK;
  // Forward declaring type: MEMORY_TYPE
  struct MEMORY_TYPE;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: Memory
  struct Memory;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Memory, "FMOD", "Memory");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Memory
  // [TokenAttribute] Offset: FFFFFFFF
  struct Memory/*, public ::System::ValueType*/ {
    public:
    // Creating value type constructor for type: Memory
    constexpr Memory() noexcept {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static public FMOD.RESULT Initialize(System.IntPtr poolmem, System.Int32 poollen, FMOD.MEMORY_ALLOC_CALLBACK useralloc, FMOD.MEMORY_REALLOC_CALLBACK userrealloc, FMOD.MEMORY_FREE_CALLBACK userfree, FMOD.MEMORY_TYPE memtypeflags)
    // Offset: 0x22DEE24
    static ::FMOD::RESULT Initialize(::System::IntPtr poolmem, int poollen, ::FMOD::MEMORY_ALLOC_CALLBACK* useralloc, ::FMOD::MEMORY_REALLOC_CALLBACK* userrealloc, ::FMOD::MEMORY_FREE_CALLBACK* userfree, ::FMOD::MEMORY_TYPE memtypeflags);
    // static public FMOD.RESULT GetStats(out System.Int32 currentalloced, out System.Int32 maxalloced)
    // Offset: 0x22DEF24
    static ::FMOD::RESULT GetStats(ByRef<int> currentalloced, ByRef<int> maxalloced);
    // static public FMOD.RESULT GetStats(out System.Int32 currentalloced, out System.Int32 maxalloced, System.Boolean blocking)
    // Offset: 0x22DEF2C
    static ::FMOD::RESULT GetStats(ByRef<int> currentalloced, ByRef<int> maxalloced, bool blocking);
    // static private FMOD.RESULT FMOD5_Memory_Initialize(System.IntPtr poolmem, System.Int32 poollen, FMOD.MEMORY_ALLOC_CALLBACK useralloc, FMOD.MEMORY_REALLOC_CALLBACK userrealloc, FMOD.MEMORY_FREE_CALLBACK userfree, FMOD.MEMORY_TYPE memtypeflags)
    // Offset: 0x22DEE28
    static ::FMOD::RESULT FMOD5_Memory_Initialize(::System::IntPtr poolmem, int poollen, ::FMOD::MEMORY_ALLOC_CALLBACK* useralloc, ::FMOD::MEMORY_REALLOC_CALLBACK* userrealloc, ::FMOD::MEMORY_FREE_CALLBACK* userfree, ::FMOD::MEMORY_TYPE memtypeflags);
    // static private FMOD.RESULT FMOD5_Memory_GetStats(out System.Int32 currentalloced, out System.Int32 maxalloced, System.Boolean blocking)
    // Offset: 0x22DEF34
    static ::FMOD::RESULT FMOD5_Memory_GetStats(ByRef<int> currentalloced, ByRef<int> maxalloced, bool blocking);
  }; // FMOD.Memory
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::Memory::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ::FMOD::MEMORY_ALLOC_CALLBACK*, ::FMOD::MEMORY_REALLOC_CALLBACK*, ::FMOD::MEMORY_FREE_CALLBACK*, ::FMOD::MEMORY_TYPE)>(&FMOD::Memory::Initialize)> {
  static const MethodInfo* get() {
    static auto* poolmem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* poollen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* useralloc = &::il2cpp_utils::GetClassFromName("FMOD", "MEMORY_ALLOC_CALLBACK")->byval_arg;
    static auto* userrealloc = &::il2cpp_utils::GetClassFromName("FMOD", "MEMORY_REALLOC_CALLBACK")->byval_arg;
    static auto* userfree = &::il2cpp_utils::GetClassFromName("FMOD", "MEMORY_FREE_CALLBACK")->byval_arg;
    static auto* memtypeflags = &::il2cpp_utils::GetClassFromName("FMOD", "MEMORY_TYPE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Memory), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poolmem, poollen, useralloc, userrealloc, userfree, memtypeflags});
  }
};
// Writing MetadataGetter for method: FMOD::Memory::GetStats
// Il2CppName: GetStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(ByRef<int>, ByRef<int>)>(&FMOD::Memory::GetStats)> {
  static const MethodInfo* get() {
    static auto* currentalloced = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maxalloced = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Memory), "GetStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentalloced, maxalloced});
  }
};
// Writing MetadataGetter for method: FMOD::Memory::GetStats
// Il2CppName: GetStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(ByRef<int>, ByRef<int>, bool)>(&FMOD::Memory::GetStats)> {
  static const MethodInfo* get() {
    static auto* currentalloced = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maxalloced = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Memory), "GetStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentalloced, maxalloced, blocking});
  }
};
// Writing MetadataGetter for method: FMOD::Memory::FMOD5_Memory_Initialize
// Il2CppName: FMOD5_Memory_Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::System::IntPtr, int, ::FMOD::MEMORY_ALLOC_CALLBACK*, ::FMOD::MEMORY_REALLOC_CALLBACK*, ::FMOD::MEMORY_FREE_CALLBACK*, ::FMOD::MEMORY_TYPE)>(&FMOD::Memory::FMOD5_Memory_Initialize)> {
  static const MethodInfo* get() {
    static auto* poolmem = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* poollen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* useralloc = &::il2cpp_utils::GetClassFromName("FMOD", "MEMORY_ALLOC_CALLBACK")->byval_arg;
    static auto* userrealloc = &::il2cpp_utils::GetClassFromName("FMOD", "MEMORY_REALLOC_CALLBACK")->byval_arg;
    static auto* userfree = &::il2cpp_utils::GetClassFromName("FMOD", "MEMORY_FREE_CALLBACK")->byval_arg;
    static auto* memtypeflags = &::il2cpp_utils::GetClassFromName("FMOD", "MEMORY_TYPE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Memory), "FMOD5_Memory_Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poolmem, poollen, useralloc, userrealloc, userfree, memtypeflags});
  }
};
// Writing MetadataGetter for method: FMOD::Memory::FMOD5_Memory_GetStats
// Il2CppName: FMOD5_Memory_GetStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(ByRef<int>, ByRef<int>, bool)>(&FMOD::Memory::FMOD5_Memory_GetStats)> {
  static const MethodInfo* get() {
    static auto* currentalloced = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maxalloced = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Memory), "FMOD5_Memory_GetStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentalloced, maxalloced, blocking});
  }
};
