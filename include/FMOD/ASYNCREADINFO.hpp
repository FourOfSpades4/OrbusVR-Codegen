// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: ASYNCREADINFO_DONE_CALLBACK
  class ASYNCREADINFO_DONE_CALLBACK;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: ASYNCREADINFO
  struct ASYNCREADINFO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::ASYNCREADINFO, "FMOD", "ASYNCREADINFO");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.ASYNCREADINFO
  // [TokenAttribute] Offset: FFFFFFFF
  struct ASYNCREADINFO/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.UInt32 offset
    // Size: 0x4
    // Offset: 0x8
    uint offset;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 sizebytes
    // Size: 0x4
    // Offset: 0xC
    uint sizebytes;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Int32 priority
    // Size: 0x4
    // Offset: 0x10
    int priority;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: priority and: userdata
    char __padding3[0x4] = {};
    // public System.IntPtr userdata
    // Size: 0x8
    // Offset: 0x18
    ::System::IntPtr userdata;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr buffer
    // Size: 0x8
    // Offset: 0x20
    ::System::IntPtr buffer;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.UInt32 bytesread
    // Size: 0x4
    // Offset: 0x28
    uint bytesread;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: bytesread and: done
    char __padding6[0x4] = {};
    // public FMOD.ASYNCREADINFO_DONE_CALLBACK done
    // Size: 0x8
    // Offset: 0x30
    ::FMOD::ASYNCREADINFO_DONE_CALLBACK* done;
    // Field size check
    static_assert(sizeof(::FMOD::ASYNCREADINFO_DONE_CALLBACK*) == 0x8);
    public:
    // Creating value type constructor for type: ASYNCREADINFO
    constexpr ASYNCREADINFO(::System::IntPtr handle_ = {}, uint offset_ = {}, uint sizebytes_ = {}, int priority_ = {}, ::System::IntPtr userdata_ = {}, ::System::IntPtr buffer_ = {}, uint bytesread_ = {}, ::FMOD::ASYNCREADINFO_DONE_CALLBACK* done_ = {}) noexcept : handle{handle_}, offset{offset_}, sizebytes{sizebytes_}, priority{priority_}, userdata{userdata_}, buffer{buffer_}, bytesread{bytesread_}, done{done_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.IntPtr handle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_handle();
    // Get instance field reference: public System.UInt32 offset
    [[deprecated("Use field access instead!")]] uint& dyn_offset();
    // Get instance field reference: public System.UInt32 sizebytes
    [[deprecated("Use field access instead!")]] uint& dyn_sizebytes();
    // Get instance field reference: public System.Int32 priority
    [[deprecated("Use field access instead!")]] int& dyn_priority();
    // Get instance field reference: public System.IntPtr userdata
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_userdata();
    // Get instance field reference: public System.IntPtr buffer
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_buffer();
    // Get instance field reference: public System.UInt32 bytesread
    [[deprecated("Use field access instead!")]] uint& dyn_bytesread();
    // Get instance field reference: public FMOD.ASYNCREADINFO_DONE_CALLBACK done
    [[deprecated("Use field access instead!")]] ::FMOD::ASYNCREADINFO_DONE_CALLBACK*& dyn_done();
  }; // FMOD.ASYNCREADINFO
  #pragma pack(pop)
  static check_size<sizeof(ASYNCREADINFO), 48 + sizeof(::FMOD::ASYNCREADINFO_DONE_CALLBACK*)> __FMOD_ASYNCREADINFOSizeCheck;
  static_assert(sizeof(ASYNCREADINFO) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
