// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: DEBUG_FLAGS
  struct DEBUG_FLAGS;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::DEBUG_FLAGS, "FMOD", "DEBUG_FLAGS");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: FMOD.DEBUG_FLAGS
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  struct DEBUG_FLAGS/*, public ::System::Enum*/ {
    public:
    public:
    // public System.UInt32 value__
    // Size: 0x4
    // Offset: 0x0
    uint value;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: DEBUG_FLAGS
    constexpr DEBUG_FLAGS(uint value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint
    constexpr operator uint() const noexcept {
      return value;
    }
    // static field const value: static public FMOD.DEBUG_FLAGS NONE
    static constexpr const uint NONE = 0u;
    // Get static field: static public FMOD.DEBUG_FLAGS NONE
    static ::FMOD::DEBUG_FLAGS _get_NONE();
    // Set static field: static public FMOD.DEBUG_FLAGS NONE
    static void _set_NONE(::FMOD::DEBUG_FLAGS value);
    // static field const value: static public FMOD.DEBUG_FLAGS ERROR
    static constexpr const uint ERROR = 1u;
    // Get static field: static public FMOD.DEBUG_FLAGS ERROR
    static ::FMOD::DEBUG_FLAGS _get_ERROR();
    // Set static field: static public FMOD.DEBUG_FLAGS ERROR
    static void _set_ERROR(::FMOD::DEBUG_FLAGS value);
    // static field const value: static public FMOD.DEBUG_FLAGS WARNING
    static constexpr const uint WARNING = 2u;
    // Get static field: static public FMOD.DEBUG_FLAGS WARNING
    static ::FMOD::DEBUG_FLAGS _get_WARNING();
    // Set static field: static public FMOD.DEBUG_FLAGS WARNING
    static void _set_WARNING(::FMOD::DEBUG_FLAGS value);
    // static field const value: static public FMOD.DEBUG_FLAGS LOG
    static constexpr const uint LOG = 4u;
    // Get static field: static public FMOD.DEBUG_FLAGS LOG
    static ::FMOD::DEBUG_FLAGS _get_LOG();
    // Set static field: static public FMOD.DEBUG_FLAGS LOG
    static void _set_LOG(::FMOD::DEBUG_FLAGS value);
    // static field const value: static public FMOD.DEBUG_FLAGS TYPE_MEMORY
    static constexpr const uint TYPE_MEMORY = 256u;
    // Get static field: static public FMOD.DEBUG_FLAGS TYPE_MEMORY
    static ::FMOD::DEBUG_FLAGS _get_TYPE_MEMORY();
    // Set static field: static public FMOD.DEBUG_FLAGS TYPE_MEMORY
    static void _set_TYPE_MEMORY(::FMOD::DEBUG_FLAGS value);
    // static field const value: static public FMOD.DEBUG_FLAGS TYPE_FILE
    static constexpr const uint TYPE_FILE = 512u;
    // Get static field: static public FMOD.DEBUG_FLAGS TYPE_FILE
    static ::FMOD::DEBUG_FLAGS _get_TYPE_FILE();
    // Set static field: static public FMOD.DEBUG_FLAGS TYPE_FILE
    static void _set_TYPE_FILE(::FMOD::DEBUG_FLAGS value);
    // static field const value: static public FMOD.DEBUG_FLAGS TYPE_CODEC
    static constexpr const uint TYPE_CODEC = 1024u;
    // Get static field: static public FMOD.DEBUG_FLAGS TYPE_CODEC
    static ::FMOD::DEBUG_FLAGS _get_TYPE_CODEC();
    // Set static field: static public FMOD.DEBUG_FLAGS TYPE_CODEC
    static void _set_TYPE_CODEC(::FMOD::DEBUG_FLAGS value);
    // static field const value: static public FMOD.DEBUG_FLAGS TYPE_TRACE
    static constexpr const uint TYPE_TRACE = 2048u;
    // Get static field: static public FMOD.DEBUG_FLAGS TYPE_TRACE
    static ::FMOD::DEBUG_FLAGS _get_TYPE_TRACE();
    // Set static field: static public FMOD.DEBUG_FLAGS TYPE_TRACE
    static void _set_TYPE_TRACE(::FMOD::DEBUG_FLAGS value);
    // static field const value: static public FMOD.DEBUG_FLAGS DISPLAY_TIMESTAMPS
    static constexpr const uint DISPLAY_TIMESTAMPS = 65536u;
    // Get static field: static public FMOD.DEBUG_FLAGS DISPLAY_TIMESTAMPS
    static ::FMOD::DEBUG_FLAGS _get_DISPLAY_TIMESTAMPS();
    // Set static field: static public FMOD.DEBUG_FLAGS DISPLAY_TIMESTAMPS
    static void _set_DISPLAY_TIMESTAMPS(::FMOD::DEBUG_FLAGS value);
    // static field const value: static public FMOD.DEBUG_FLAGS DISPLAY_LINENUMBERS
    static constexpr const uint DISPLAY_LINENUMBERS = 131072u;
    // Get static field: static public FMOD.DEBUG_FLAGS DISPLAY_LINENUMBERS
    static ::FMOD::DEBUG_FLAGS _get_DISPLAY_LINENUMBERS();
    // Set static field: static public FMOD.DEBUG_FLAGS DISPLAY_LINENUMBERS
    static void _set_DISPLAY_LINENUMBERS(::FMOD::DEBUG_FLAGS value);
    // static field const value: static public FMOD.DEBUG_FLAGS DISPLAY_THREAD
    static constexpr const uint DISPLAY_THREAD = 262144u;
    // Get static field: static public FMOD.DEBUG_FLAGS DISPLAY_THREAD
    static ::FMOD::DEBUG_FLAGS _get_DISPLAY_THREAD();
    // Set static field: static public FMOD.DEBUG_FLAGS DISPLAY_THREAD
    static void _set_DISPLAY_THREAD(::FMOD::DEBUG_FLAGS value);
    // Get instance field reference: public System.UInt32 value__
    [[deprecated("Use field access instead!")]] uint& dyn_value__();
  }; // FMOD.DEBUG_FLAGS
  #pragma pack(pop)
  static check_size<sizeof(DEBUG_FLAGS), 0 + sizeof(uint)> __FMOD_DEBUG_FLAGSSizeCheck;
  static_assert(sizeof(DEBUG_FLAGS) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
