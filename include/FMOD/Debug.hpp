// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: FMOD
namespace FMOD {
  // Forward declaring type: RESULT
  struct RESULT;
  // Forward declaring type: DEBUG_FLAGS
  struct DEBUG_FLAGS;
  // Forward declaring type: DEBUG_MODE
  struct DEBUG_MODE;
  // Forward declaring type: DEBUG_CALLBACK
  class DEBUG_CALLBACK;
}
// Completed forward declares
// Type namespace: FMOD
namespace FMOD {
  // Forward declaring type: Debug
  struct Debug;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::FMOD::Debug, "FMOD", "Debug");
// Type namespace: FMOD
namespace FMOD {
  // Size: 0x0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FMOD.Debug
  // [TokenAttribute] Offset: FFFFFFFF
  struct Debug/*, public ::System::ValueType*/ {
    public:
    // Creating value type constructor for type: Debug
    constexpr Debug() noexcept {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static public FMOD.RESULT Initialize(FMOD.DEBUG_FLAGS flags, FMOD.DEBUG_MODE mode, FMOD.DEBUG_CALLBACK callback, System.String filename)
    // Offset: 0x22DA2F4
    static ::FMOD::RESULT Initialize(::FMOD::DEBUG_FLAGS flags, ::FMOD::DEBUG_MODE mode, ::FMOD::DEBUG_CALLBACK* callback, ::StringW filename);
    // static private FMOD.RESULT FMOD5_Debug_Initialize(FMOD.DEBUG_FLAGS flags, FMOD.DEBUG_MODE mode, FMOD.DEBUG_CALLBACK callback, System.Byte[] filename)
    // Offset: 0x22DA898
    static ::FMOD::RESULT FMOD5_Debug_Initialize(::FMOD::DEBUG_FLAGS flags, ::FMOD::DEBUG_MODE mode, ::FMOD::DEBUG_CALLBACK* callback, ::ArrayW<uint8_t> filename);
  }; // FMOD.Debug
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: FMOD::Debug::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::FMOD::DEBUG_FLAGS, ::FMOD::DEBUG_MODE, ::FMOD::DEBUG_CALLBACK*, ::StringW)>(&FMOD::Debug::Initialize)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD", "DEBUG_FLAGS")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "DEBUG_MODE")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD", "DEBUG_CALLBACK")->byval_arg;
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Debug), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags, mode, callback, filename});
  }
};
// Writing MetadataGetter for method: FMOD::Debug::FMOD5_Debug_Initialize
// Il2CppName: FMOD5_Debug_Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::RESULT (*)(::FMOD::DEBUG_FLAGS, ::FMOD::DEBUG_MODE, ::FMOD::DEBUG_CALLBACK*, ::ArrayW<uint8_t>)>(&FMOD::Debug::FMOD5_Debug_Initialize)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("FMOD", "DEBUG_FLAGS")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("FMOD", "DEBUG_MODE")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("FMOD", "DEBUG_CALLBACK")->byval_arg;
    static auto* filename = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(FMOD::Debug), "FMOD5_Debug_Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags, mode, callback, filename});
  }
};
