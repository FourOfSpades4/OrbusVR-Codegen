// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnLogickFactory
namespace UnLogickFactory {
  // Forward declaring type: FbxCustomProperty
  class FbxCustomProperty;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
}
// Completed forward declares
// Type namespace: UnLogickFactory
namespace UnLogickFactory {
  // Forward declaring type: FbxCustomPropertyBehaviour
  class FbxCustomPropertyBehaviour;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnLogickFactory::FbxCustomPropertyBehaviour);
DEFINE_IL2CPP_ARG_TYPE(::UnLogickFactory::FbxCustomPropertyBehaviour*, "UnLogickFactory", "FbxCustomPropertyBehaviour");
// Type namespace: UnLogickFactory
namespace UnLogickFactory {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnLogickFactory.FbxCustomPropertyBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  class FbxCustomPropertyBehaviour : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnLogickFactory.FbxCustomProperty[] customProperties
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnLogickFactory::FbxCustomProperty*> customProperties;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnLogickFactory::FbxCustomProperty*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnLogickFactory.FbxCustomProperty[] customProperties
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnLogickFactory::FbxCustomProperty*>& dyn_customProperties();
    // public System.Void Apply(System.IntPtr target)
    // Offset: 0x118D724
    void Apply(::System::IntPtr target);
    // protected System.Void .ctor()
    // Offset: 0x118D7AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FbxCustomPropertyBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnLogickFactory::FbxCustomPropertyBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FbxCustomPropertyBehaviour*, creationType>()));
    }
  }; // UnLogickFactory.FbxCustomPropertyBehaviour
  #pragma pack(pop)
  static check_size<sizeof(FbxCustomPropertyBehaviour), 24 + sizeof(::ArrayW<::UnLogickFactory::FbxCustomProperty*>)> __UnLogickFactory_FbxCustomPropertyBehaviourSizeCheck;
  static_assert(sizeof(FbxCustomPropertyBehaviour) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnLogickFactory::FbxCustomPropertyBehaviour::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnLogickFactory::FbxCustomPropertyBehaviour::*)(::System::IntPtr)>(&UnLogickFactory::FbxCustomPropertyBehaviour::Apply)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::FbxCustomPropertyBehaviour*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::FbxCustomPropertyBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
