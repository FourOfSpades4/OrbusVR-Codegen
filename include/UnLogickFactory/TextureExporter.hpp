// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Terrain
  class Terrain;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: TerrainLayer
  class TerrainLayer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnLogickFactory
namespace UnLogickFactory {
  // Forward declaring type: FbxTextureExportScheme
  class FbxTextureExportScheme;
}
// Completed forward declares
// Type namespace: UnLogickFactory
namespace UnLogickFactory {
  // Forward declaring type: TextureExporter
  class TextureExporter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnLogickFactory::TextureExporter);
DEFINE_IL2CPP_ARG_TYPE(::UnLogickFactory::TextureExporter*, "UnLogickFactory", "TextureExporter");
// Type namespace: UnLogickFactory
namespace UnLogickFactory {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: UnLogickFactory.TextureExporter
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class TextureExporter : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Camera _exportCamera
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Camera* exportCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // public UnityEngine.Texture2D _diffuseTexture
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Texture2D* diffuseTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public UnityEngine.Texture2D _normalMapTexture
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Texture2D* normalMapTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public UnityEngine.Texture2D _specularMapTexture
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Texture2D* specularMapTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public UnityEngine.RenderTexture rt
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::RenderTexture* rt;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // public UnityEngine.Renderer _textureExporter
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Renderer* textureExporter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Material _normalMat
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Material* normalMat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _specularMat
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Material* specularMat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _diffuseMat
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Material* diffuseMat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.String _normalMapFilename
    // Size: 0x8
    // Offset: 0x60
    ::StringW normalMapFilename;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String _specularMapFilename
    // Size: 0x8
    // Offset: 0x68
    ::StringW specularMapFilename;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String _diffuseTextureFilename
    // Size: 0x8
    // Offset: 0x70
    ::StringW diffuseTextureFilename;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Material,UnityEngine.Material> AlreadyProcessedMaterials
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Material*, ::UnityEngine::Material*>* AlreadyProcessedMaterials;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Material*, ::UnityEngine::Material*>*) == 0x8);
    // private UnityEngine.Material lastMaterial
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Material* lastMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Int32 renderTextureSize
    // Size: 0x4
    // Offset: 0x88
    int renderTextureSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: renderTextureSize and: currentScheme
    char __padding14[0x4] = {};
    // private UnLogickFactory.FbxTextureExportScheme currentScheme
    // Size: 0x8
    // Offset: 0x90
    ::UnLogickFactory::FbxTextureExportScheme* currentScheme;
    // Field size check
    static_assert(sizeof(::UnLogickFactory::FbxTextureExportScheme*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Camera _exportCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn__exportCamera();
    // Get instance field reference: public UnityEngine.Texture2D _diffuseTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn__diffuseTexture();
    // Get instance field reference: public UnityEngine.Texture2D _normalMapTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn__normalMapTexture();
    // Get instance field reference: public UnityEngine.Texture2D _specularMapTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn__specularMapTexture();
    // Get instance field reference: public UnityEngine.RenderTexture rt
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_rt();
    // Get instance field reference: public UnityEngine.Renderer _textureExporter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__textureExporter();
    // Get instance field reference: private UnityEngine.Material _normalMat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__normalMat();
    // Get instance field reference: private UnityEngine.Material _specularMat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__specularMat();
    // Get instance field reference: private UnityEngine.Material _diffuseMat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__diffuseMat();
    // Get instance field reference: public System.String _normalMapFilename
    [[deprecated("Use field access instead!")]] ::StringW& dyn__normalMapFilename();
    // Get instance field reference: public System.String _specularMapFilename
    [[deprecated("Use field access instead!")]] ::StringW& dyn__specularMapFilename();
    // Get instance field reference: public System.String _diffuseTextureFilename
    [[deprecated("Use field access instead!")]] ::StringW& dyn__diffuseTextureFilename();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Material,UnityEngine.Material> AlreadyProcessedMaterials
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Material*, ::UnityEngine::Material*>*& dyn_AlreadyProcessedMaterials();
    // Get instance field reference: private UnityEngine.Material lastMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_lastMaterial();
    // Get instance field reference: private System.Int32 renderTextureSize
    [[deprecated("Use field access instead!")]] int& dyn_renderTextureSize();
    // Get instance field reference: private UnLogickFactory.FbxTextureExportScheme currentScheme
    [[deprecated("Use field access instead!")]] ::UnLogickFactory::FbxTextureExportScheme*& dyn_currentScheme();
    // static public UnLogickFactory.TextureExporter CreateTextureExporter()
    // Offset: 0x212D784
    static ::UnLogickFactory::TextureExporter* CreateTextureExporter();
    // private System.Void Awake()
    // Offset: 0x212D8EC
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x212DA68
    void OnDestroy();
    // public System.Void ProcessTerrain(UnityEngine.Terrain terrain, System.Int32 resolution, UnLogickFactory.FbxTextureExportScheme textureScheme, System.String path)
    // Offset: 0x212DC94
    void ProcessTerrain(::UnityEngine::Terrain* terrain, int resolution, ::UnLogickFactory::FbxTextureExportScheme* textureScheme, ::StringW path);
    // public UnityEngine.Material ProcessMaterial(UnityEngine.Material mat, UnityEngine.Renderer renderer, UnLogickFactory.FbxTextureExportScheme textureScheme, System.String path)
    // Offset: 0x212F1F8
    ::UnityEngine::Material* ProcessMaterial(::UnityEngine::Material* mat, ::UnityEngine::Renderer* renderer, ::UnLogickFactory::FbxTextureExportScheme* textureScheme, ::StringW path);
    // protected System.Void CleanupLastMaterial()
    // Offset: 0x212E620
    void CleanupLastMaterial();
    // protected UnityEngine.Texture MakeDummyTexture(UnityEngine.Texture texture)
    // Offset: 0x212FAD0
    ::UnityEngine::Texture* MakeDummyTexture(::UnityEngine::Texture* texture);
    // protected UnityEngine.Material SetupTerrainMaterial(UnityEngine.Terrain terrain, System.Int32 layer, UnityEngine.TerrainLayer[] layers, UnityEngine.Texture2D control)
    // Offset: 0x212E77C
    ::UnityEngine::Material* SetupTerrainMaterial(::UnityEngine::Terrain* terrain, int layer, ::ArrayW<::UnityEngine::TerrainLayer*> layers, ::UnityEngine::Texture2D* control);
    // protected System.Void PerformTextureExport(System.Int32 resolutionX, System.Int32 resolutionY)
    // Offset: 0x212EF80
    void PerformTextureExport(int resolutionX, int resolutionY);
    // public System.Void OnRenderImage(UnityEngine.RenderTexture src, UnityEngine.RenderTexture dest)
    // Offset: 0x212FBB4
    void OnRenderImage(::UnityEngine::RenderTexture* src, ::UnityEngine::RenderTexture* dest);
    // protected System.Void ExportSingleTexture(UnityEngine.RenderTexture src, UnityEngine.Texture2D dest, UnityEngine.Material mat, System.String filename, System.Int32 textureType)
    // Offset: 0x212FCF8
    void ExportSingleTexture(::UnityEngine::RenderTexture* src, ::UnityEngine::Texture2D* dest, ::UnityEngine::Material* mat, ::StringW filename, int textureType);
    // private System.Boolean VerifySpecular(UnityEngine.Texture2D dest)
    // Offset: 0x212FEB0
    bool VerifySpecular(::UnityEngine::Texture2D* dest);
    // private System.Boolean VerifyNormals(UnityEngine.Texture2D dest)
    // Offset: 0x212FEA8
    bool VerifyNormals(::UnityEngine::Texture2D* dest);
    // protected System.Void WriteAllBytes(System.String filename, System.Byte[] data)
    // Offset: 0x212FEB8
    void WriteAllBytes(::StringW filename, ::ArrayW<uint8_t> data);
    // protected System.Void EnsureFolderExists(System.String folder)
    // Offset: 0x2130050
    void EnsureFolderExists(::StringW folder);
    // public System.Void .ctor()
    // Offset: 0x213010C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextureExporter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnLogickFactory::TextureExporter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextureExporter*, creationType>()));
    }
  }; // UnLogickFactory.TextureExporter
  #pragma pack(pop)
  static check_size<sizeof(TextureExporter), 144 + sizeof(::UnLogickFactory::FbxTextureExportScheme*)> __UnLogickFactory_TextureExporterSizeCheck;
  static_assert(sizeof(TextureExporter) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::CreateTextureExporter
// Il2CppName: CreateTextureExporter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnLogickFactory::TextureExporter* (*)()>(&UnLogickFactory::TextureExporter::CreateTextureExporter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::TextureExporter*), "CreateTextureExporter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnLogickFactory::TextureExporter::*)()>(&UnLogickFactory::TextureExporter::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::TextureExporter*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnLogickFactory::TextureExporter::*)()>(&UnLogickFactory::TextureExporter::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::TextureExporter*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::ProcessTerrain
// Il2CppName: ProcessTerrain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnLogickFactory::TextureExporter::*)(::UnityEngine::Terrain*, int, ::UnLogickFactory::FbxTextureExportScheme*, ::StringW)>(&UnLogickFactory::TextureExporter::ProcessTerrain)> {
  static const MethodInfo* get() {
    static auto* terrain = &::il2cpp_utils::GetClassFromName("UnityEngine", "Terrain")->byval_arg;
    static auto* resolution = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* textureScheme = &::il2cpp_utils::GetClassFromName("UnLogickFactory", "FbxTextureExportScheme")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::TextureExporter*), "ProcessTerrain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{terrain, resolution, textureScheme, path});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::ProcessMaterial
// Il2CppName: ProcessMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnLogickFactory::TextureExporter::*)(::UnityEngine::Material*, ::UnityEngine::Renderer*, ::UnLogickFactory::FbxTextureExportScheme*, ::StringW)>(&UnLogickFactory::TextureExporter::ProcessMaterial)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* textureScheme = &::il2cpp_utils::GetClassFromName("UnLogickFactory", "FbxTextureExportScheme")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::TextureExporter*), "ProcessMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat, renderer, textureScheme, path});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::CleanupLastMaterial
// Il2CppName: CleanupLastMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnLogickFactory::TextureExporter::*)()>(&UnLogickFactory::TextureExporter::CleanupLastMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::TextureExporter*), "CleanupLastMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::MakeDummyTexture
// Il2CppName: MakeDummyTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture* (UnLogickFactory::TextureExporter::*)(::UnityEngine::Texture*)>(&UnLogickFactory::TextureExporter::MakeDummyTexture)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::TextureExporter*), "MakeDummyTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::SetupTerrainMaterial
// Il2CppName: SetupTerrainMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnLogickFactory::TextureExporter::*)(::UnityEngine::Terrain*, int, ::ArrayW<::UnityEngine::TerrainLayer*>, ::UnityEngine::Texture2D*)>(&UnLogickFactory::TextureExporter::SetupTerrainMaterial)> {
  static const MethodInfo* get() {
    static auto* terrain = &::il2cpp_utils::GetClassFromName("UnityEngine", "Terrain")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* layers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "TerrainLayer"), 1)->byval_arg;
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::TextureExporter*), "SetupTerrainMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{terrain, layer, layers, control});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::PerformTextureExport
// Il2CppName: PerformTextureExport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnLogickFactory::TextureExporter::*)(int, int)>(&UnLogickFactory::TextureExporter::PerformTextureExport)> {
  static const MethodInfo* get() {
    static auto* resolutionX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* resolutionY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::TextureExporter*), "PerformTextureExport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resolutionX, resolutionY});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::OnRenderImage
// Il2CppName: OnRenderImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnLogickFactory::TextureExporter::*)(::UnityEngine::RenderTexture*, ::UnityEngine::RenderTexture*)>(&UnLogickFactory::TextureExporter::OnRenderImage)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::TextureExporter*), "OnRenderImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, dest});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::ExportSingleTexture
// Il2CppName: ExportSingleTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnLogickFactory::TextureExporter::*)(::UnityEngine::RenderTexture*, ::UnityEngine::Texture2D*, ::UnityEngine::Material*, ::StringW, int)>(&UnLogickFactory::TextureExporter::ExportSingleTexture)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* textureType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::TextureExporter*), "ExportSingleTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, dest, mat, filename, textureType});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::VerifySpecular
// Il2CppName: VerifySpecular
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnLogickFactory::TextureExporter::*)(::UnityEngine::Texture2D*)>(&UnLogickFactory::TextureExporter::VerifySpecular)> {
  static const MethodInfo* get() {
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::TextureExporter*), "VerifySpecular", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::VerifyNormals
// Il2CppName: VerifyNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnLogickFactory::TextureExporter::*)(::UnityEngine::Texture2D*)>(&UnLogickFactory::TextureExporter::VerifyNormals)> {
  static const MethodInfo* get() {
    static auto* dest = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::TextureExporter*), "VerifyNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::WriteAllBytes
// Il2CppName: WriteAllBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnLogickFactory::TextureExporter::*)(::StringW, ::ArrayW<uint8_t>)>(&UnLogickFactory::TextureExporter::WriteAllBytes)> {
  static const MethodInfo* get() {
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::TextureExporter*), "WriteAllBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filename, data});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::EnsureFolderExists
// Il2CppName: EnsureFolderExists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnLogickFactory::TextureExporter::*)(::StringW)>(&UnLogickFactory::TextureExporter::EnsureFolderExists)> {
  static const MethodInfo* get() {
    static auto* folder = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::TextureExporter*), "EnsureFolderExists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{folder});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::TextureExporter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
