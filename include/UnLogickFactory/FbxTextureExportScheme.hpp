// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Renderer
  class Renderer;
}
// Forward declaring namespace: UnLogickFactory
namespace UnLogickFactory {
}
// Completed forward declares
// Type namespace: UnLogickFactory
namespace UnLogickFactory {
  // Forward declaring type: FbxTextureExportScheme
  class FbxTextureExportScheme;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnLogickFactory::FbxTextureExportScheme);
DEFINE_IL2CPP_ARG_TYPE(::UnLogickFactory::FbxTextureExportScheme*, "UnLogickFactory", "FbxTextureExportScheme");
// Type namespace: UnLogickFactory
namespace UnLogickFactory {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnLogickFactory.FbxTextureExportScheme
  // [TokenAttribute] Offset: FFFFFFFF
  class FbxTextureExportScheme : public ::Il2CppObject {
    public:
    // Nested type: ::UnLogickFactory::FbxTextureExportScheme::TextureExportFormat
    struct TextureExportFormat;
    // Nested type: ::UnLogickFactory::FbxTextureExportScheme::TextureColorSpace
    struct TextureColorSpace;
    // Nested type: ::UnLogickFactory::FbxTextureExportScheme::TextureElements
    struct TextureElements;
    // Nested type: ::UnLogickFactory::FbxTextureExportScheme::TextureElementsMask
    struct TextureElementsMask;
    // Nested type: ::UnLogickFactory::FbxTextureExportScheme::TextureSizes
    struct TextureSizes;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnLogickFactory.FbxTextureExportScheme/TextureExportFormat
    // [TokenAttribute] Offset: FFFFFFFF
    struct TextureExportFormat/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TextureExportFormat
      constexpr TextureExportFormat(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureExportFormat Png
      static constexpr const int Png = 0;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureExportFormat Png
      static ::UnLogickFactory::FbxTextureExportScheme::TextureExportFormat _get_Png();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureExportFormat Png
      static void _set_Png(::UnLogickFactory::FbxTextureExportScheme::TextureExportFormat value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureExportFormat Jpeg
      static constexpr const int Jpeg = 1;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureExportFormat Jpeg
      static ::UnLogickFactory::FbxTextureExportScheme::TextureExportFormat _get_Jpeg();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureExportFormat Jpeg
      static void _set_Jpeg(::UnLogickFactory::FbxTextureExportScheme::TextureExportFormat value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnLogickFactory.FbxTextureExportScheme/TextureExportFormat
    #pragma pack(pop)
    static check_size<sizeof(FbxTextureExportScheme::TextureExportFormat), 0 + sizeof(int)> __UnLogickFactory_FbxTextureExportScheme_TextureExportFormatSizeCheck;
    static_assert(sizeof(FbxTextureExportScheme::TextureExportFormat) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnLogickFactory.FbxTextureExportScheme/TextureColorSpace
    // [TokenAttribute] Offset: FFFFFFFF
    struct TextureColorSpace/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TextureColorSpace
      constexpr TextureColorSpace(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureColorSpace NoConversion
      static constexpr const int NoConversion = 0;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureColorSpace NoConversion
      static ::UnLogickFactory::FbxTextureExportScheme::TextureColorSpace _get_NoConversion();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureColorSpace NoConversion
      static void _set_NoConversion(::UnLogickFactory::FbxTextureExportScheme::TextureColorSpace value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureColorSpace GammaToHdr
      static constexpr const int GammaToHdr = 1;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureColorSpace GammaToHdr
      static ::UnLogickFactory::FbxTextureExportScheme::TextureColorSpace _get_GammaToHdr();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureColorSpace GammaToHdr
      static void _set_GammaToHdr(::UnLogickFactory::FbxTextureExportScheme::TextureColorSpace value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureColorSpace HdrToGamma
      static constexpr const int HdrToGamma = 2;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureColorSpace HdrToGamma
      static ::UnLogickFactory::FbxTextureExportScheme::TextureColorSpace _get_HdrToGamma();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureColorSpace HdrToGamma
      static void _set_HdrToGamma(::UnLogickFactory::FbxTextureExportScheme::TextureColorSpace value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureColorSpace Experimental
      static constexpr const int Experimental = 3;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureColorSpace Experimental
      static ::UnLogickFactory::FbxTextureExportScheme::TextureColorSpace _get_Experimental();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureColorSpace Experimental
      static void _set_Experimental(::UnLogickFactory::FbxTextureExportScheme::TextureColorSpace value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnLogickFactory.FbxTextureExportScheme/TextureColorSpace
    #pragma pack(pop)
    static check_size<sizeof(FbxTextureExportScheme::TextureColorSpace), 0 + sizeof(int)> __UnLogickFactory_FbxTextureExportScheme_TextureColorSpaceSizeCheck;
    static_assert(sizeof(FbxTextureExportScheme::TextureColorSpace) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnLogickFactory.FbxTextureExportScheme/TextureElements
    // [TokenAttribute] Offset: FFFFFFFF
    struct TextureElements/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TextureElements
      constexpr TextureElements(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureElements None
      static constexpr const int None = 0;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements None
      static ::UnLogickFactory::FbxTextureExportScheme::TextureElements _get_None();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements None
      static void _set_None(::UnLogickFactory::FbxTextureExportScheme::TextureElements value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureElements Meshes
      static constexpr const int Meshes = 1;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements Meshes
      static ::UnLogickFactory::FbxTextureExportScheme::TextureElements _get_Meshes();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements Meshes
      static void _set_Meshes(::UnLogickFactory::FbxTextureExportScheme::TextureElements value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureElements SkinnedMeshes
      static constexpr const int SkinnedMeshes = 2;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements SkinnedMeshes
      static ::UnLogickFactory::FbxTextureExportScheme::TextureElements _get_SkinnedMeshes();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements SkinnedMeshes
      static void _set_SkinnedMeshes(::UnLogickFactory::FbxTextureExportScheme::TextureElements value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureElements MeshesAndSkinnedMeshes
      static constexpr const int MeshesAndSkinnedMeshes = 3;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements MeshesAndSkinnedMeshes
      static ::UnLogickFactory::FbxTextureExportScheme::TextureElements _get_MeshesAndSkinnedMeshes();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements MeshesAndSkinnedMeshes
      static void _set_MeshesAndSkinnedMeshes(::UnLogickFactory::FbxTextureExportScheme::TextureElements value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureElements Terrains
      static constexpr const int Terrains = 4;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements Terrains
      static ::UnLogickFactory::FbxTextureExportScheme::TextureElements _get_Terrains();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements Terrains
      static void _set_Terrains(::UnLogickFactory::FbxTextureExportScheme::TextureElements value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureElements MeshesAndTerrains
      static constexpr const int MeshesAndTerrains = 5;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements MeshesAndTerrains
      static ::UnLogickFactory::FbxTextureExportScheme::TextureElements _get_MeshesAndTerrains();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements MeshesAndTerrains
      static void _set_MeshesAndTerrains(::UnLogickFactory::FbxTextureExportScheme::TextureElements value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureElements SkinnedMeshesAndTerrains
      static constexpr const int SkinnedMeshesAndTerrains = 6;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements SkinnedMeshesAndTerrains
      static ::UnLogickFactory::FbxTextureExportScheme::TextureElements _get_SkinnedMeshesAndTerrains();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements SkinnedMeshesAndTerrains
      static void _set_SkinnedMeshesAndTerrains(::UnLogickFactory::FbxTextureExportScheme::TextureElements value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureElements MeshesAndSkinnedMeshesAndTerrains
      static constexpr const int MeshesAndSkinnedMeshesAndTerrains = 7;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements MeshesAndSkinnedMeshesAndTerrains
      static ::UnLogickFactory::FbxTextureExportScheme::TextureElements _get_MeshesAndSkinnedMeshesAndTerrains();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements MeshesAndSkinnedMeshesAndTerrains
      static void _set_MeshesAndSkinnedMeshesAndTerrains(::UnLogickFactory::FbxTextureExportScheme::TextureElements value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureElements Everything
      static constexpr const int Everything = 7;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements Everything
      static ::UnLogickFactory::FbxTextureExportScheme::TextureElements _get_Everything();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureElements Everything
      static void _set_Everything(::UnLogickFactory::FbxTextureExportScheme::TextureElements value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnLogickFactory.FbxTextureExportScheme/TextureElements
    #pragma pack(pop)
    static check_size<sizeof(FbxTextureExportScheme::TextureElements), 0 + sizeof(int)> __UnLogickFactory_FbxTextureExportScheme_TextureElementsSizeCheck;
    static_assert(sizeof(FbxTextureExportScheme::TextureElements) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnLogickFactory.FbxTextureExportScheme/TextureSizes
    // [TokenAttribute] Offset: FFFFFFFF
    struct TextureSizes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TextureSizes
      constexpr TextureSizes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes ScaleFull
      static constexpr const int ScaleFull = 0;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes ScaleFull
      static ::UnLogickFactory::FbxTextureExportScheme::TextureSizes _get_ScaleFull();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes ScaleFull
      static void _set_ScaleFull(::UnLogickFactory::FbxTextureExportScheme::TextureSizes value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes ScaleHalf
      static constexpr const int ScaleHalf = 1;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes ScaleHalf
      static ::UnLogickFactory::FbxTextureExportScheme::TextureSizes _get_ScaleHalf();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes ScaleHalf
      static void _set_ScaleHalf(::UnLogickFactory::FbxTextureExportScheme::TextureSizes value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes ScaleQuarter
      static constexpr const int ScaleQuarter = 2;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes ScaleQuarter
      static ::UnLogickFactory::FbxTextureExportScheme::TextureSizes _get_ScaleQuarter();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes ScaleQuarter
      static void _set_ScaleQuarter(::UnLogickFactory::FbxTextureExportScheme::TextureSizes value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes ScaleEighth
      static constexpr const int ScaleEighth = 3;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes ScaleEighth
      static ::UnLogickFactory::FbxTextureExportScheme::TextureSizes _get_ScaleEighth();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes ScaleEighth
      static void _set_ScaleEighth(::UnLogickFactory::FbxTextureExportScheme::TextureSizes value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes ScaleSixteenth
      static constexpr const int ScaleSixteenth = 4;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes ScaleSixteenth
      static ::UnLogickFactory::FbxTextureExportScheme::TextureSizes _get_ScaleSixteenth();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes ScaleSixteenth
      static void _set_ScaleSixteenth(::UnLogickFactory::FbxTextureExportScheme::TextureSizes value);
      // static field const value: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes Scale32nd
      static constexpr const int Scale32nd = 5;
      // Get static field: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes Scale32nd
      static ::UnLogickFactory::FbxTextureExportScheme::TextureSizes _get_Scale32nd();
      // Set static field: static public UnLogickFactory.FbxTextureExportScheme/TextureSizes Scale32nd
      static void _set_Scale32nd(::UnLogickFactory::FbxTextureExportScheme::TextureSizes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnLogickFactory.FbxTextureExportScheme/TextureSizes
    #pragma pack(pop)
    static check_size<sizeof(FbxTextureExportScheme::TextureSizes), 0 + sizeof(int)> __UnLogickFactory_FbxTextureExportScheme_TextureSizesSizeCheck;
    static_assert(sizeof(FbxTextureExportScheme::TextureSizes) == 0x4);
    public:
    // public UnLogickFactory.FbxTextureExportScheme/TextureColorSpace textureColorSpace
    // Size: 0x4
    // Offset: 0x10
    ::UnLogickFactory::FbxTextureExportScheme::TextureColorSpace textureColorSpace;
    // Field size check
    static_assert(sizeof(::UnLogickFactory::FbxTextureExportScheme::TextureColorSpace) == 0x4);
    // public UnLogickFactory.FbxTextureExportScheme/TextureElements textureElements
    // Size: 0x4
    // Offset: 0x14
    ::UnLogickFactory::FbxTextureExportScheme::TextureElements textureElements;
    // Field size check
    static_assert(sizeof(::UnLogickFactory::FbxTextureExportScheme::TextureElements) == 0x4);
    // public UnLogickFactory.FbxTextureExportScheme/TextureSizes textureSize
    // Size: 0x4
    // Offset: 0x18
    ::UnLogickFactory::FbxTextureExportScheme::TextureSizes textureSize;
    // Field size check
    static_assert(sizeof(::UnLogickFactory::FbxTextureExportScheme::TextureSizes) == 0x4);
    // public UnLogickFactory.FbxTextureExportScheme/TextureExportFormat textureFormat
    // Size: 0x4
    // Offset: 0x1C
    ::UnLogickFactory::FbxTextureExportScheme::TextureExportFormat textureFormat;
    // Field size check
    static_assert(sizeof(::UnLogickFactory::FbxTextureExportScheme::TextureExportFormat) == 0x4);
    public:
    // Get static field: static private readonly System.String[] _textureExportFormatExtensions
    static ::ArrayW<::StringW> _get__textureExportFormatExtensions();
    // Set static field: static private readonly System.String[] _textureExportFormatExtensions
    static void _set__textureExportFormatExtensions(::ArrayW<::StringW> value);
    // Get instance field reference: public UnLogickFactory.FbxTextureExportScheme/TextureColorSpace textureColorSpace
    [[deprecated("Use field access instead!")]] ::UnLogickFactory::FbxTextureExportScheme::TextureColorSpace& dyn_textureColorSpace();
    // Get instance field reference: public UnLogickFactory.FbxTextureExportScheme/TextureElements textureElements
    [[deprecated("Use field access instead!")]] ::UnLogickFactory::FbxTextureExportScheme::TextureElements& dyn_textureElements();
    // Get instance field reference: public UnLogickFactory.FbxTextureExportScheme/TextureSizes textureSize
    [[deprecated("Use field access instead!")]] ::UnLogickFactory::FbxTextureExportScheme::TextureSizes& dyn_textureSize();
    // Get instance field reference: public UnLogickFactory.FbxTextureExportScheme/TextureExportFormat textureFormat
    [[deprecated("Use field access instead!")]] ::UnLogickFactory::FbxTextureExportScheme::TextureExportFormat& dyn_textureFormat();
    // public System.Boolean get_ExportMeshTextures()
    // Offset: 0x212CE40
    bool get_ExportMeshTextures();
    // public System.Boolean get_ExportSkinnedMeshTextures()
    // Offset: 0x212CE4C
    bool get_ExportSkinnedMeshTextures();
    // public System.Boolean get_ExportTerrainTextures()
    // Offset: 0x212CE58
    bool get_ExportTerrainTextures();
    // public System.String get_textureExtension()
    // Offset: 0x212CE64
    ::StringW get_textureExtension();
    // public System.Void AllocateTextures(UnityEngine.Material mat, UnityEngine.Renderer renderer, ref UnityEngine.Texture2D _diffuseTexture, ref UnityEngine.Texture2D _specularMapTexture, ref UnityEngine.Texture2D _normalMapTexture, out System.Int32 resolutionX, out System.Int32 resolutionY)
    // Offset: 0x212CF04
    void AllocateTextures(::UnityEngine::Material* mat, ::UnityEngine::Renderer* renderer, ByRef<::UnityEngine::Texture2D*> _diffuseTexture, ByRef<::UnityEngine::Texture2D*> _specularMapTexture, ByRef<::UnityEngine::Texture2D*> _normalMapTexture, ByRef<int> resolutionX, ByRef<int> resolutionY);
    // public System.Single CalcColorSpace()
    // Offset: 0x212D1E0
    float CalcColorSpace();
    // static public UnLogickFactory.FbxTextureExportScheme GetDefaultScheme()
    // Offset: 0x212D208
    static ::UnLogickFactory::FbxTextureExportScheme* GetDefaultScheme();
    // static public UnLogickFactory.FbxTextureExportScheme GetNoneScheme()
    // Offset: 0x212D284
    static ::UnLogickFactory::FbxTextureExportScheme* GetNoneScheme();
    // protected System.Void _AllocateTextures(UnityEngine.Material mat, UnityEngine.Renderer renderer, ref UnityEngine.Texture2D _diffuseTexture, ref UnityEngine.Texture2D _normalMapTexture, ref UnityEngine.Texture2D _specularMapTexture, out System.Int32 maxResolutionX, out System.Int32 maxResolutionY)
    // Offset: 0x212CF14
    void _AllocateTextures(::UnityEngine::Material* mat, ::UnityEngine::Renderer* renderer, ByRef<::UnityEngine::Texture2D*> _diffuseTexture, ByRef<::UnityEngine::Texture2D*> _normalMapTexture, ByRef<::UnityEngine::Texture2D*> _specularMapTexture, ByRef<int> maxResolutionX, ByRef<int> maxResolutionY);
    // protected System.Boolean AllocateTextureBasedOnMaterial(UnityEngine.Material mat, System.String shaderVariableName, ref UnityEngine.Texture2D _diffuseTexture, ref System.Int32 maxResolutionX, ref System.Int32 maxResolutionY)
    // Offset: 0x212D2FC
    bool AllocateTextureBasedOnMaterial(::UnityEngine::Material* mat, ::StringW shaderVariableName, ByRef<::UnityEngine::Texture2D*> _diffuseTexture, ByRef<int> maxResolutionX, ByRef<int> maxResolutionY);
    // public System.Void AllocateTexture(ref UnityEngine.Texture2D texture, System.Int32 resolutionX, System.Int32 resolutionY)
    // Offset: 0x212D4A0
    void AllocateTexture(ByRef<::UnityEngine::Texture2D*> texture, int resolutionX, int resolutionY);
    // protected System.Void AdjustResolution(ref System.Int32 resolutionX, ref System.Int32 resolutionY)
    // Offset: 0x212D614
    void AdjustResolution(ByRef<int> resolutionX, ByRef<int> resolutionY);
    // public System.Void .ctor()
    // Offset: 0x212D270
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FbxTextureExportScheme* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnLogickFactory::FbxTextureExportScheme::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FbxTextureExportScheme*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x212D670
    static void _cctor();
  }; // UnLogickFactory.FbxTextureExportScheme
  #pragma pack(pop)
  static check_size<sizeof(FbxTextureExportScheme), 28 + sizeof(::UnLogickFactory::FbxTextureExportScheme::TextureExportFormat)> __UnLogickFactory_FbxTextureExportSchemeSizeCheck;
  static_assert(sizeof(FbxTextureExportScheme) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnLogickFactory::FbxTextureExportScheme::TextureSizes, "UnLogickFactory", "FbxTextureExportScheme/TextureSizes");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnLogickFactory::FbxTextureExportScheme::TextureElements, "UnLogickFactory", "FbxTextureExportScheme/TextureElements");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnLogickFactory::FbxTextureExportScheme::TextureColorSpace, "UnLogickFactory", "FbxTextureExportScheme/TextureColorSpace");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnLogickFactory::FbxTextureExportScheme::TextureExportFormat, "UnLogickFactory", "FbxTextureExportScheme/TextureExportFormat");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnLogickFactory::FbxTextureExportScheme::get_ExportMeshTextures
// Il2CppName: get_ExportMeshTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnLogickFactory::FbxTextureExportScheme::*)()>(&UnLogickFactory::FbxTextureExportScheme::get_ExportMeshTextures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::FbxTextureExportScheme*), "get_ExportMeshTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::FbxTextureExportScheme::get_ExportSkinnedMeshTextures
// Il2CppName: get_ExportSkinnedMeshTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnLogickFactory::FbxTextureExportScheme::*)()>(&UnLogickFactory::FbxTextureExportScheme::get_ExportSkinnedMeshTextures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::FbxTextureExportScheme*), "get_ExportSkinnedMeshTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::FbxTextureExportScheme::get_ExportTerrainTextures
// Il2CppName: get_ExportTerrainTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnLogickFactory::FbxTextureExportScheme::*)()>(&UnLogickFactory::FbxTextureExportScheme::get_ExportTerrainTextures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::FbxTextureExportScheme*), "get_ExportTerrainTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::FbxTextureExportScheme::get_textureExtension
// Il2CppName: get_textureExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnLogickFactory::FbxTextureExportScheme::*)()>(&UnLogickFactory::FbxTextureExportScheme::get_textureExtension)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::FbxTextureExportScheme*), "get_textureExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::FbxTextureExportScheme::AllocateTextures
// Il2CppName: AllocateTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnLogickFactory::FbxTextureExportScheme::*)(::UnityEngine::Material*, ::UnityEngine::Renderer*, ByRef<::UnityEngine::Texture2D*>, ByRef<::UnityEngine::Texture2D*>, ByRef<::UnityEngine::Texture2D*>, ByRef<int>, ByRef<int>)>(&UnLogickFactory::FbxTextureExportScheme::AllocateTextures)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* _diffuseTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->this_arg;
    static auto* _specularMapTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->this_arg;
    static auto* _normalMapTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->this_arg;
    static auto* resolutionX = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* resolutionY = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::FbxTextureExportScheme*), "AllocateTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat, renderer, _diffuseTexture, _specularMapTexture, _normalMapTexture, resolutionX, resolutionY});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::FbxTextureExportScheme::CalcColorSpace
// Il2CppName: CalcColorSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnLogickFactory::FbxTextureExportScheme::*)()>(&UnLogickFactory::FbxTextureExportScheme::CalcColorSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::FbxTextureExportScheme*), "CalcColorSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::FbxTextureExportScheme::GetDefaultScheme
// Il2CppName: GetDefaultScheme
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnLogickFactory::FbxTextureExportScheme* (*)()>(&UnLogickFactory::FbxTextureExportScheme::GetDefaultScheme)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::FbxTextureExportScheme*), "GetDefaultScheme", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::FbxTextureExportScheme::GetNoneScheme
// Il2CppName: GetNoneScheme
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnLogickFactory::FbxTextureExportScheme* (*)()>(&UnLogickFactory::FbxTextureExportScheme::GetNoneScheme)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::FbxTextureExportScheme*), "GetNoneScheme", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::FbxTextureExportScheme::_AllocateTextures
// Il2CppName: _AllocateTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnLogickFactory::FbxTextureExportScheme::*)(::UnityEngine::Material*, ::UnityEngine::Renderer*, ByRef<::UnityEngine::Texture2D*>, ByRef<::UnityEngine::Texture2D*>, ByRef<::UnityEngine::Texture2D*>, ByRef<int>, ByRef<int>)>(&UnLogickFactory::FbxTextureExportScheme::_AllocateTextures)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* _diffuseTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->this_arg;
    static auto* _normalMapTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->this_arg;
    static auto* _specularMapTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->this_arg;
    static auto* maxResolutionX = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maxResolutionY = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::FbxTextureExportScheme*), "_AllocateTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat, renderer, _diffuseTexture, _normalMapTexture, _specularMapTexture, maxResolutionX, maxResolutionY});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::FbxTextureExportScheme::AllocateTextureBasedOnMaterial
// Il2CppName: AllocateTextureBasedOnMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnLogickFactory::FbxTextureExportScheme::*)(::UnityEngine::Material*, ::StringW, ByRef<::UnityEngine::Texture2D*>, ByRef<int>, ByRef<int>)>(&UnLogickFactory::FbxTextureExportScheme::AllocateTextureBasedOnMaterial)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* shaderVariableName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* _diffuseTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->this_arg;
    static auto* maxResolutionX = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maxResolutionY = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::FbxTextureExportScheme*), "AllocateTextureBasedOnMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat, shaderVariableName, _diffuseTexture, maxResolutionX, maxResolutionY});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::FbxTextureExportScheme::AllocateTexture
// Il2CppName: AllocateTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnLogickFactory::FbxTextureExportScheme::*)(ByRef<::UnityEngine::Texture2D*>, int, int)>(&UnLogickFactory::FbxTextureExportScheme::AllocateTexture)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->this_arg;
    static auto* resolutionX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* resolutionY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::FbxTextureExportScheme*), "AllocateTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, resolutionX, resolutionY});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::FbxTextureExportScheme::AdjustResolution
// Il2CppName: AdjustResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnLogickFactory::FbxTextureExportScheme::*)(ByRef<int>, ByRef<int>)>(&UnLogickFactory::FbxTextureExportScheme::AdjustResolution)> {
  static const MethodInfo* get() {
    static auto* resolutionX = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* resolutionY = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::FbxTextureExportScheme*), "AdjustResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resolutionX, resolutionY});
  }
};
// Writing MetadataGetter for method: UnLogickFactory::FbxTextureExportScheme::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnLogickFactory::FbxTextureExportScheme::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnLogickFactory::FbxTextureExportScheme::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnLogickFactory::FbxTextureExportScheme*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
