// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: TornadoBanditsStudio.LowPolyDungeonPack
namespace TornadoBanditsStudio::LowPolyDungeonPack {
  // Forward declaring type: TBS_RotateableObject
  class TBS_RotateableObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject);
DEFINE_IL2CPP_ARG_TYPE(::TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject*, "TornadoBanditsStudio.LowPolyDungeonPack", "TBS_RotateableObject");
// Type namespace: TornadoBanditsStudio.LowPolyDungeonPack
namespace TornadoBanditsStudio::LowPolyDungeonPack {
  // Size: 0x22
  #pragma pack(push, 1)
  // Autogenerated type: TornadoBanditsStudio.LowPolyDungeonPack.TBS_RotateableObject
  // [TokenAttribute] Offset: FFFFFFFF
  class TBS_RotateableObject : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::ROTATION_AXIS
    struct ROTATION_AXIS;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: TornadoBanditsStudio.LowPolyDungeonPack.TBS_RotateableObject/ROTATION_AXIS
    // [TokenAttribute] Offset: FFFFFFFF
    struct ROTATION_AXIS/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ROTATION_AXIS
      constexpr ROTATION_AXIS(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TornadoBanditsStudio.LowPolyDungeonPack.TBS_RotateableObject/ROTATION_AXIS X
      static constexpr const int X = 0;
      // Get static field: static public TornadoBanditsStudio.LowPolyDungeonPack.TBS_RotateableObject/ROTATION_AXIS X
      static ::TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::ROTATION_AXIS _get_X();
      // Set static field: static public TornadoBanditsStudio.LowPolyDungeonPack.TBS_RotateableObject/ROTATION_AXIS X
      static void _set_X(::TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::ROTATION_AXIS value);
      // static field const value: static public TornadoBanditsStudio.LowPolyDungeonPack.TBS_RotateableObject/ROTATION_AXIS Y
      static constexpr const int Y = 1;
      // Get static field: static public TornadoBanditsStudio.LowPolyDungeonPack.TBS_RotateableObject/ROTATION_AXIS Y
      static ::TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::ROTATION_AXIS _get_Y();
      // Set static field: static public TornadoBanditsStudio.LowPolyDungeonPack.TBS_RotateableObject/ROTATION_AXIS Y
      static void _set_Y(::TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::ROTATION_AXIS value);
      // static field const value: static public TornadoBanditsStudio.LowPolyDungeonPack.TBS_RotateableObject/ROTATION_AXIS Z
      static constexpr const int Z = 2;
      // Get static field: static public TornadoBanditsStudio.LowPolyDungeonPack.TBS_RotateableObject/ROTATION_AXIS Z
      static ::TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::ROTATION_AXIS _get_Z();
      // Set static field: static public TornadoBanditsStudio.LowPolyDungeonPack.TBS_RotateableObject/ROTATION_AXIS Z
      static void _set_Z(::TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::ROTATION_AXIS value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // TornadoBanditsStudio.LowPolyDungeonPack.TBS_RotateableObject/ROTATION_AXIS
    #pragma pack(pop)
    static check_size<sizeof(TBS_RotateableObject::ROTATION_AXIS), 0 + sizeof(int)> __TornadoBanditsStudio_LowPolyDungeonPack_TBS_RotateableObject_ROTATION_AXISSizeCheck;
    static_assert(sizeof(TBS_RotateableObject::ROTATION_AXIS) == 0x4);
    public:
    // private TornadoBanditsStudio.LowPolyDungeonPack.TBS_RotateableObject/ROTATION_AXIS rotationAxis
    // Size: 0x4
    // Offset: 0x18
    ::TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::ROTATION_AXIS rotationAxis;
    // Field size check
    static_assert(sizeof(::TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::ROTATION_AXIS) == 0x4);
    // private System.Single rotationSpeed
    // Size: 0x4
    // Offset: 0x1C
    float rotationSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean randomSpeed
    // Size: 0x1
    // Offset: 0x20
    bool randomSpeed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean randomDirection
    // Size: 0x1
    // Offset: 0x21
    bool randomDirection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private TornadoBanditsStudio.LowPolyDungeonPack.TBS_RotateableObject/ROTATION_AXIS rotationAxis
    [[deprecated("Use field access instead!")]] ::TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::ROTATION_AXIS& dyn_rotationAxis();
    // Get instance field reference: private System.Single rotationSpeed
    [[deprecated("Use field access instead!")]] float& dyn_rotationSpeed();
    // Get instance field reference: private System.Boolean randomSpeed
    [[deprecated("Use field access instead!")]] bool& dyn_randomSpeed();
    // Get instance field reference: private System.Boolean randomDirection
    [[deprecated("Use field access instead!")]] bool& dyn_randomDirection();
    // private System.Void Start()
    // Offset: 0x1052ACC
    void Start();
    // private System.Void Update()
    // Offset: 0x1052B3C
    void Update();
    // public System.Void .ctor()
    // Offset: 0x1052C3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TBS_RotateableObject* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TBS_RotateableObject*, creationType>()));
    }
  }; // TornadoBanditsStudio.LowPolyDungeonPack.TBS_RotateableObject
  #pragma pack(pop)
  static check_size<sizeof(TBS_RotateableObject), 33 + sizeof(bool)> __TornadoBanditsStudio_LowPolyDungeonPack_TBS_RotateableObjectSizeCheck;
  static_assert(sizeof(TBS_RotateableObject) == 0x22);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::ROTATION_AXIS, "TornadoBanditsStudio.LowPolyDungeonPack", "TBS_RotateableObject/ROTATION_AXIS");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::*)()>(&TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::*)()>(&TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TornadoBanditsStudio::LowPolyDungeonPack::TBS_RotateableObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
