// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: EckTechGames.FloatingCombatText.CombatTextType
#include "EckTechGames/FloatingCombatText/CombatTextType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: EckTechGames::FloatingCombatText
namespace EckTechGames::FloatingCombatText {
  // Forward declaring type: CombatTextAnchorController
  class CombatTextAnchorController;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Monster
  class Monster;
}
// Completed forward declares
// Type namespace: EckTechGames.FloatingCombatText
namespace EckTechGames::FloatingCombatText {
  // Forward declaring type: OverlayCanvasController
  class OverlayCanvasController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::EckTechGames::FloatingCombatText::OverlayCanvasController);
DEFINE_IL2CPP_ARG_TYPE(::EckTechGames::FloatingCombatText::OverlayCanvasController*, "EckTechGames.FloatingCombatText", "OverlayCanvasController");
// Type namespace: EckTechGames.FloatingCombatText
namespace EckTechGames::FloatingCombatText {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: EckTechGames.FloatingCombatText.OverlayCanvasController
  // [TokenAttribute] Offset: FFFFFFFF
  class OverlayCanvasController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::EckTechGames::FloatingCombatText::OverlayCanvasController::$$c__DisplayClass12_0
    class $$c__DisplayClass12_0;
    public:
    // public UnityEngine.Camera mainCamera
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Camera* mainCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // public System.Boolean poolDamage
    // Size: 0x1
    // Offset: 0x20
    bool poolDamage;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: poolDamage and: combatTextAnchorPrefab
    char __padding1[0x7] = {};
    // public EckTechGames.FloatingCombatText.CombatTextAnchorController combatTextAnchorPrefab
    // Size: 0x8
    // Offset: 0x28
    ::EckTechGames::FloatingCombatText::CombatTextAnchorController* combatTextAnchorPrefab;
    // Field size check
    static_assert(sizeof(::EckTechGames::FloatingCombatText::CombatTextAnchorController*) == 0x8);
    // public EckTechGames.FloatingCombatText.CombatTextAnchorController combatTextAnchorRunesightPrefab
    // Size: 0x8
    // Offset: 0x30
    ::EckTechGames::FloatingCombatText::CombatTextAnchorController* combatTextAnchorRunesightPrefab;
    // Field size check
    static_assert(sizeof(::EckTechGames::FloatingCombatText::CombatTextAnchorController*) == 0x8);
    // protected System.Collections.Generic.Dictionary`2<EckTechGames.FloatingCombatText.CombatTextType,System.Collections.Generic.List`1<EckTechGames.FloatingCombatText.CombatTextAnchorController>> combatTextAnchorDictionary
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::EckTechGames::FloatingCombatText::CombatTextType, ::System::Collections::Generic::List_1<::EckTechGames::FloatingCombatText::CombatTextAnchorController*>*>* combatTextAnchorDictionary;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::EckTechGames::FloatingCombatText::CombatTextType, ::System::Collections::Generic::List_1<::EckTechGames::FloatingCombatText::CombatTextAnchorController*>*>*) == 0x8);
    // private System.Array combatTextTypes
    // Size: 0x8
    // Offset: 0x40
    ::System::Array* combatTextTypes;
    // Field size check
    static_assert(sizeof(::System::Array*) == 0x8);
    // private System.Collections.Generic.List`1<EckTechGames.FloatingCombatText.CombatTextAnchorController> indexesToRemove
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::EckTechGames::FloatingCombatText::CombatTextAnchorController*>* indexesToRemove;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::EckTechGames::FloatingCombatText::CombatTextAnchorController*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public EckTechGames.FloatingCombatText.OverlayCanvasController instance
    static ::EckTechGames::FloatingCombatText::OverlayCanvasController* _get_instance();
    // Set static field: static public EckTechGames.FloatingCombatText.OverlayCanvasController instance
    static void _set_instance(::EckTechGames::FloatingCombatText::OverlayCanvasController* value);
    // Get instance field reference: public UnityEngine.Camera mainCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_mainCamera();
    // Get instance field reference: public System.Boolean poolDamage
    [[deprecated("Use field access instead!")]] bool& dyn_poolDamage();
    // Get instance field reference: public EckTechGames.FloatingCombatText.CombatTextAnchorController combatTextAnchorPrefab
    [[deprecated("Use field access instead!")]] ::EckTechGames::FloatingCombatText::CombatTextAnchorController*& dyn_combatTextAnchorPrefab();
    // Get instance field reference: public EckTechGames.FloatingCombatText.CombatTextAnchorController combatTextAnchorRunesightPrefab
    [[deprecated("Use field access instead!")]] ::EckTechGames::FloatingCombatText::CombatTextAnchorController*& dyn_combatTextAnchorRunesightPrefab();
    // Get instance field reference: protected System.Collections.Generic.Dictionary`2<EckTechGames.FloatingCombatText.CombatTextType,System.Collections.Generic.List`1<EckTechGames.FloatingCombatText.CombatTextAnchorController>> combatTextAnchorDictionary
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::EckTechGames::FloatingCombatText::CombatTextType, ::System::Collections::Generic::List_1<::EckTechGames::FloatingCombatText::CombatTextAnchorController*>*>*& dyn_combatTextAnchorDictionary();
    // Get instance field reference: private System.Array combatTextTypes
    [[deprecated("Use field access instead!")]] ::System::Array*& dyn_combatTextTypes();
    // Get instance field reference: private System.Collections.Generic.List`1<EckTechGames.FloatingCombatText.CombatTextAnchorController> indexesToRemove
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::EckTechGames::FloatingCombatText::CombatTextAnchorController*>*& dyn_indexesToRemove();
    // private System.Void Awake()
    // Offset: 0xF45390
    void Awake();
    // private System.Void Start()
    // Offset: 0xF4587C
    void Start();
    // public System.Void ShowCombatText(MagicalActual.Monster targetMonster, EckTechGames.FloatingCombatText.CombatTextType combatTextType, System.String combatText)
    // Offset: 0xF458EC
    void ShowCombatText(::MagicalActual::Monster* targetMonster, ::EckTechGames::FloatingCombatText::CombatTextType combatTextType, ::StringW combatText);
    // public System.Void ShowCombatText(MagicalActual.Monster targetMonster, EckTechGames.FloatingCombatText.CombatTextType combatTextType, System.Int32 combatNumber)
    // Offset: 0xF45E60
    void ShowCombatText(::MagicalActual::Monster* targetMonster, ::EckTechGames::FloatingCombatText::CombatTextType combatTextType, int combatNumber);
    // protected EckTechGames.FloatingCombatText.CombatTextAnchorController EnsureCombatTextAnchor(UnityEngine.GameObject targetGameObject, EckTechGames.FloatingCombatText.CombatTextType combatTextType)
    // Offset: 0xF45AF8
    ::EckTechGames::FloatingCombatText::CombatTextAnchorController* EnsureCombatTextAnchor(::UnityEngine::GameObject* targetGameObject, ::EckTechGames::FloatingCombatText::CombatTextType combatTextType);
    // private System.Void FixedUpdate()
    // Offset: 0xF46090
    void FixedUpdate();
    // protected System.Void InitializeDictionary()
    // Offset: 0xF45468
    void InitializeDictionary();
    // public System.Void .ctor()
    // Offset: 0xF465F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OverlayCanvasController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::EckTechGames::FloatingCombatText::OverlayCanvasController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OverlayCanvasController*, creationType>()));
    }
  }; // EckTechGames.FloatingCombatText.OverlayCanvasController
  #pragma pack(pop)
  static check_size<sizeof(OverlayCanvasController), 72 + sizeof(::System::Collections::Generic::List_1<::EckTechGames::FloatingCombatText::CombatTextAnchorController*>*)> __EckTechGames_FloatingCombatText_OverlayCanvasControllerSizeCheck;
  static_assert(sizeof(OverlayCanvasController) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: EckTechGames::FloatingCombatText::OverlayCanvasController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EckTechGames::FloatingCombatText::OverlayCanvasController::*)()>(&EckTechGames::FloatingCombatText::OverlayCanvasController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EckTechGames::FloatingCombatText::OverlayCanvasController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EckTechGames::FloatingCombatText::OverlayCanvasController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EckTechGames::FloatingCombatText::OverlayCanvasController::*)()>(&EckTechGames::FloatingCombatText::OverlayCanvasController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EckTechGames::FloatingCombatText::OverlayCanvasController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EckTechGames::FloatingCombatText::OverlayCanvasController::ShowCombatText
// Il2CppName: ShowCombatText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EckTechGames::FloatingCombatText::OverlayCanvasController::*)(::MagicalActual::Monster*, ::EckTechGames::FloatingCombatText::CombatTextType, ::StringW)>(&EckTechGames::FloatingCombatText::OverlayCanvasController::ShowCombatText)> {
  static const MethodInfo* get() {
    static auto* targetMonster = &::il2cpp_utils::GetClassFromName("MagicalActual", "Monster")->byval_arg;
    static auto* combatTextType = &::il2cpp_utils::GetClassFromName("EckTechGames.FloatingCombatText", "CombatTextType")->byval_arg;
    static auto* combatText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(EckTechGames::FloatingCombatText::OverlayCanvasController*), "ShowCombatText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetMonster, combatTextType, combatText});
  }
};
// Writing MetadataGetter for method: EckTechGames::FloatingCombatText::OverlayCanvasController::ShowCombatText
// Il2CppName: ShowCombatText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EckTechGames::FloatingCombatText::OverlayCanvasController::*)(::MagicalActual::Monster*, ::EckTechGames::FloatingCombatText::CombatTextType, int)>(&EckTechGames::FloatingCombatText::OverlayCanvasController::ShowCombatText)> {
  static const MethodInfo* get() {
    static auto* targetMonster = &::il2cpp_utils::GetClassFromName("MagicalActual", "Monster")->byval_arg;
    static auto* combatTextType = &::il2cpp_utils::GetClassFromName("EckTechGames.FloatingCombatText", "CombatTextType")->byval_arg;
    static auto* combatNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(EckTechGames::FloatingCombatText::OverlayCanvasController*), "ShowCombatText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetMonster, combatTextType, combatNumber});
  }
};
// Writing MetadataGetter for method: EckTechGames::FloatingCombatText::OverlayCanvasController::EnsureCombatTextAnchor
// Il2CppName: EnsureCombatTextAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::EckTechGames::FloatingCombatText::CombatTextAnchorController* (EckTechGames::FloatingCombatText::OverlayCanvasController::*)(::UnityEngine::GameObject*, ::EckTechGames::FloatingCombatText::CombatTextType)>(&EckTechGames::FloatingCombatText::OverlayCanvasController::EnsureCombatTextAnchor)> {
  static const MethodInfo* get() {
    static auto* targetGameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* combatTextType = &::il2cpp_utils::GetClassFromName("EckTechGames.FloatingCombatText", "CombatTextType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(EckTechGames::FloatingCombatText::OverlayCanvasController*), "EnsureCombatTextAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetGameObject, combatTextType});
  }
};
// Writing MetadataGetter for method: EckTechGames::FloatingCombatText::OverlayCanvasController::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EckTechGames::FloatingCombatText::OverlayCanvasController::*)()>(&EckTechGames::FloatingCombatText::OverlayCanvasController::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EckTechGames::FloatingCombatText::OverlayCanvasController*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EckTechGames::FloatingCombatText::OverlayCanvasController::InitializeDictionary
// Il2CppName: InitializeDictionary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EckTechGames::FloatingCombatText::OverlayCanvasController::*)()>(&EckTechGames::FloatingCombatText::OverlayCanvasController::InitializeDictionary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EckTechGames::FloatingCombatText::OverlayCanvasController*), "InitializeDictionary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EckTechGames::FloatingCombatText::OverlayCanvasController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
