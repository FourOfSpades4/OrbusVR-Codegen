// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: EckTechGames.FloatingCombatText.OverlayCanvasController
#include "EckTechGames/FloatingCombatText/OverlayCanvasController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: EckTechGames::FloatingCombatText
namespace EckTechGames::FloatingCombatText {
  // Forward declaring type: CombatTextAnchorController
  class CombatTextAnchorController;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::EckTechGames::FloatingCombatText::OverlayCanvasController::$$c__DisplayClass12_0);
DEFINE_IL2CPP_ARG_TYPE(::EckTechGames::FloatingCombatText::OverlayCanvasController::$$c__DisplayClass12_0*, "EckTechGames.FloatingCombatText", "OverlayCanvasController/<>c__DisplayClass12_0");
// Type namespace: EckTechGames.FloatingCombatText
namespace EckTechGames::FloatingCombatText {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: EckTechGames.FloatingCombatText.OverlayCanvasController/<>c__DisplayClass12_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: AD28E4
  class OverlayCanvasController::$$c__DisplayClass12_0 : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.GameObject targetGameObject
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::GameObject* targetGameObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Creating conversion operator: operator ::UnityEngine::GameObject*
    constexpr operator ::UnityEngine::GameObject*() const noexcept {
      return targetGameObject;
    }
    // Get instance field reference: public UnityEngine.GameObject targetGameObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_targetGameObject();
    // public System.Void .ctor()
    // Offset: 0xF46088
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OverlayCanvasController::$$c__DisplayClass12_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::EckTechGames::FloatingCombatText::OverlayCanvasController::$$c__DisplayClass12_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OverlayCanvasController::$$c__DisplayClass12_0*, creationType>()));
    }
    // System.Boolean <EnsureCombatTextAnchor>b__0(EckTechGames.FloatingCombatText.CombatTextAnchorController x)
    // Offset: 0xF466D0
    bool $EnsureCombatTextAnchor$b__0(::EckTechGames::FloatingCombatText::CombatTextAnchorController* x);
    // System.Boolean <EnsureCombatTextAnchor>b__1(EckTechGames.FloatingCombatText.CombatTextAnchorController x)
    // Offset: 0xF46794
    bool $EnsureCombatTextAnchor$b__1(::EckTechGames::FloatingCombatText::CombatTextAnchorController* x);
  }; // EckTechGames.FloatingCombatText.OverlayCanvasController/<>c__DisplayClass12_0
  #pragma pack(pop)
  static check_size<sizeof(OverlayCanvasController::$$c__DisplayClass12_0), 16 + sizeof(::UnityEngine::GameObject*)> __EckTechGames_FloatingCombatText_OverlayCanvasController_$$c__DisplayClass12_0SizeCheck;
  static_assert(sizeof(OverlayCanvasController::$$c__DisplayClass12_0) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: EckTechGames::FloatingCombatText::OverlayCanvasController::$$c__DisplayClass12_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: EckTechGames::FloatingCombatText::OverlayCanvasController::$$c__DisplayClass12_0::$EnsureCombatTextAnchor$b__0
// Il2CppName: <EnsureCombatTextAnchor>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EckTechGames::FloatingCombatText::OverlayCanvasController::$$c__DisplayClass12_0::*)(::EckTechGames::FloatingCombatText::CombatTextAnchorController*)>(&EckTechGames::FloatingCombatText::OverlayCanvasController::$$c__DisplayClass12_0::$EnsureCombatTextAnchor$b__0)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("EckTechGames.FloatingCombatText", "CombatTextAnchorController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(EckTechGames::FloatingCombatText::OverlayCanvasController::$$c__DisplayClass12_0*), "<EnsureCombatTextAnchor>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: EckTechGames::FloatingCombatText::OverlayCanvasController::$$c__DisplayClass12_0::$EnsureCombatTextAnchor$b__1
// Il2CppName: <EnsureCombatTextAnchor>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EckTechGames::FloatingCombatText::OverlayCanvasController::$$c__DisplayClass12_0::*)(::EckTechGames::FloatingCombatText::CombatTextAnchorController*)>(&EckTechGames::FloatingCombatText::OverlayCanvasController::$$c__DisplayClass12_0::$EnsureCombatTextAnchor$b__1)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("EckTechGames.FloatingCombatText", "CombatTextAnchorController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(EckTechGames::FloatingCombatText::OverlayCanvasController::$$c__DisplayClass12_0*), "<EnsureCombatTextAnchor>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
