// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: UnityStandardAssets.ImageEffects
namespace UnityStandardAssets::ImageEffects {
  // Forward declaring type: ImageEffectBase
  class ImageEffectBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityStandardAssets::ImageEffects::ImageEffectBase);
DEFINE_IL2CPP_ARG_TYPE(::UnityStandardAssets::ImageEffects::ImageEffectBase*, "UnityStandardAssets.ImageEffects", "ImageEffectBase");
// Type namespace: UnityStandardAssets.ImageEffects
namespace UnityStandardAssets::ImageEffects {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityStandardAssets.ImageEffects.ImageEffectBase
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AC1350
  // [AddComponentMenu] Offset: AC1350
  class ImageEffectBase : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Shader shader
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Shader* shader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Material m_Material
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* m_Material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Shader shader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_shader();
    // Get instance field reference: private UnityEngine.Material m_Material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_Material();
    // protected System.Void Start()
    // Offset: 0x2149C04
    void Start();
    // protected UnityEngine.Material get_material()
    // Offset: 0x2149B2C
    ::UnityEngine::Material* get_material();
    // protected System.Void OnDisable()
    // Offset: 0x2149CBC
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x2149BFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImageEffectBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityStandardAssets::ImageEffects::ImageEffectBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImageEffectBase*, creationType>()));
    }
  }; // UnityStandardAssets.ImageEffects.ImageEffectBase
  #pragma pack(pop)
  static check_size<sizeof(ImageEffectBase), 32 + sizeof(::UnityEngine::Material*)> __UnityStandardAssets_ImageEffects_ImageEffectBaseSizeCheck;
  static_assert(sizeof(ImageEffectBase) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityStandardAssets::ImageEffects::ImageEffectBase::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityStandardAssets::ImageEffects::ImageEffectBase::*)()>(&UnityStandardAssets::ImageEffects::ImageEffectBase::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityStandardAssets::ImageEffects::ImageEffectBase*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityStandardAssets::ImageEffects::ImageEffectBase::get_material
// Il2CppName: get_material
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityStandardAssets::ImageEffects::ImageEffectBase::*)()>(&UnityStandardAssets::ImageEffects::ImageEffectBase::get_material)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityStandardAssets::ImageEffects::ImageEffectBase*), "get_material", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityStandardAssets::ImageEffects::ImageEffectBase::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityStandardAssets::ImageEffects::ImageEffectBase::*)()>(&UnityStandardAssets::ImageEffects::ImageEffectBase::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityStandardAssets::ImageEffects::ImageEffectBase*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityStandardAssets::ImageEffects::ImageEffectBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
