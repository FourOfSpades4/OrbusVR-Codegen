// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: MysticArsenal
namespace MysticArsenal {
  // Forward declaring type: MysticRotation
  class MysticRotation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MysticArsenal::MysticRotation);
DEFINE_IL2CPP_ARG_TYPE(::MysticArsenal::MysticRotation*, "MysticArsenal", "MysticRotation");
// Type namespace: MysticArsenal
namespace MysticArsenal {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: MysticArsenal.MysticRotation
  // [TokenAttribute] Offset: FFFFFFFF
  class MysticRotation : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::MysticArsenal::MysticRotation::spaceEnum
    struct spaceEnum;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MysticArsenal.MysticRotation/spaceEnum
    // [TokenAttribute] Offset: FFFFFFFF
    struct spaceEnum/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: spaceEnum
      constexpr spaceEnum(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MysticArsenal.MysticRotation/spaceEnum Local
      static constexpr const int Local = 0;
      // Get static field: static public MysticArsenal.MysticRotation/spaceEnum Local
      static ::MysticArsenal::MysticRotation::spaceEnum _get_Local();
      // Set static field: static public MysticArsenal.MysticRotation/spaceEnum Local
      static void _set_Local(::MysticArsenal::MysticRotation::spaceEnum value);
      // static field const value: static public MysticArsenal.MysticRotation/spaceEnum World
      static constexpr const int World = 1;
      // Get static field: static public MysticArsenal.MysticRotation/spaceEnum World
      static ::MysticArsenal::MysticRotation::spaceEnum _get_World();
      // Set static field: static public MysticArsenal.MysticRotation/spaceEnum World
      static void _set_World(::MysticArsenal::MysticRotation::spaceEnum value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // MysticArsenal.MysticRotation/spaceEnum
    #pragma pack(pop)
    static check_size<sizeof(MysticRotation::spaceEnum), 0 + sizeof(int)> __MysticArsenal_MysticRotation_spaceEnumSizeCheck;
    static_assert(sizeof(MysticRotation::spaceEnum) == 0x4);
    public:
    // [HeaderAttribute] Offset: 0xAE0D74
    // public UnityEngine.Vector3 rotateVector
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 rotateVector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public MysticArsenal.MysticRotation/spaceEnum rotateSpace
    // Size: 0x4
    // Offset: 0x24
    ::MysticArsenal::MysticRotation::spaceEnum rotateSpace;
    // Field size check
    static_assert(sizeof(::MysticArsenal::MysticRotation::spaceEnum) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Vector3 rotateVector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rotateVector();
    // Get instance field reference: public MysticArsenal.MysticRotation/spaceEnum rotateSpace
    [[deprecated("Use field access instead!")]] ::MysticArsenal::MysticRotation::spaceEnum& dyn_rotateSpace();
    // private System.Void Start()
    // Offset: 0xF54730
    void Start();
    // private System.Void Update()
    // Offset: 0xF54734
    void Update();
    // public System.Void .ctor()
    // Offset: 0xF548C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MysticRotation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MysticArsenal::MysticRotation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MysticRotation*, creationType>()));
    }
  }; // MysticArsenal.MysticRotation
  #pragma pack(pop)
  static check_size<sizeof(MysticRotation), 36 + sizeof(::MysticArsenal::MysticRotation::spaceEnum)> __MysticArsenal_MysticRotationSizeCheck;
  static_assert(sizeof(MysticRotation) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::MysticArsenal::MysticRotation::spaceEnum, "MysticArsenal", "MysticRotation/spaceEnum");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MysticArsenal::MysticRotation::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MysticArsenal::MysticRotation::*)()>(&MysticArsenal::MysticRotation::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MysticArsenal::MysticRotation*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MysticArsenal::MysticRotation::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MysticArsenal::MysticRotation::*)()>(&MysticArsenal::MysticRotation::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MysticArsenal::MysticRotation*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MysticArsenal::MysticRotation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
