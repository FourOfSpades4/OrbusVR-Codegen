// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: PDollarGestureRecognizer
namespace PDollarGestureRecognizer {
  // Forward declaring type: Result
  struct Result;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::PDollarGestureRecognizer::Result, "PDollarGestureRecognizer", "Result");
// Type namespace: PDollarGestureRecognizer
namespace PDollarGestureRecognizer {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: PDollarGestureRecognizer.Result
  // [TokenAttribute] Offset: FFFFFFFF
  struct Result/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String GestureClass
    // Size: 0x8
    // Offset: 0x0
    ::StringW GestureClass;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single Score
    // Size: 0x4
    // Offset: 0x8
    float Score;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: Result
    constexpr Result(::StringW GestureClass_ = {}, float Score_ = {}) noexcept : GestureClass{GestureClass_}, Score{Score_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String GestureClass
    [[deprecated("Use field access instead!")]] ::StringW& dyn_GestureClass();
    // Get instance field reference: public System.Single Score
    [[deprecated("Use field access instead!")]] float& dyn_Score();
  }; // PDollarGestureRecognizer.Result
  #pragma pack(pop)
  static check_size<sizeof(Result), 8 + sizeof(float)> __PDollarGestureRecognizer_ResultSizeCheck;
  static_assert(sizeof(Result) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
