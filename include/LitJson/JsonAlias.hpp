// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: LitJson
namespace LitJson {
  // Forward declaring type: JsonAlias
  class JsonAlias;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LitJson::JsonAlias);
DEFINE_IL2CPP_ARG_TYPE(::LitJson::JsonAlias*, "LitJson", "JsonAlias");
// Type namespace: LitJson
namespace LitJson {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: LitJson.JsonAlias
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: ACEB44
  class JsonAlias : public ::System::Attribute {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xADCD58
    // private System.String <Alias>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Alias;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADCD68
    // private System.Boolean <AcceptOriginal>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool AcceptOriginal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.String <Alias>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Alias$k__BackingField();
    // Get instance field reference: private System.Boolean <AcceptOriginal>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$AcceptOriginal$k__BackingField();
    // public System.String get_Alias()
    // Offset: 0x106FB34
    ::StringW get_Alias();
    // private System.Void set_Alias(System.String value)
    // Offset: 0x106FB3C
    void set_Alias(::StringW value);
    // public System.Boolean get_AcceptOriginal()
    // Offset: 0x106FB44
    bool get_AcceptOriginal();
    // private System.Void set_AcceptOriginal(System.Boolean value)
    // Offset: 0x106FB4C
    void set_AcceptOriginal(bool value);
    // public System.Void .ctor(System.String aliasName, System.Boolean acceptOriginalName)
    // Offset: 0x106FB58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonAlias* New_ctor(::StringW aliasName, bool acceptOriginalName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonAlias::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonAlias*, creationType>(aliasName, acceptOriginalName)));
    }
  }; // LitJson.JsonAlias
  #pragma pack(pop)
  static check_size<sizeof(JsonAlias), 24 + sizeof(bool)> __LitJson_JsonAliasSizeCheck;
  static_assert(sizeof(JsonAlias) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LitJson::JsonAlias::get_Alias
// Il2CppName: get_Alias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (LitJson::JsonAlias::*)()>(&LitJson::JsonAlias::get_Alias)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonAlias*), "get_Alias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonAlias::set_Alias
// Il2CppName: set_Alias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonAlias::*)(::StringW)>(&LitJson::JsonAlias::set_Alias)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonAlias*), "set_Alias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonAlias::get_AcceptOriginal
// Il2CppName: get_AcceptOriginal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonAlias::*)()>(&LitJson::JsonAlias::get_AcceptOriginal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonAlias*), "get_AcceptOriginal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonAlias::set_AcceptOriginal
// Il2CppName: set_AcceptOriginal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonAlias::*)(bool)>(&LitJson::JsonAlias::set_AcceptOriginal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonAlias*), "set_AcceptOriginal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonAlias::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
