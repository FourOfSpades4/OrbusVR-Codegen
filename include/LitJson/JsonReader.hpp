// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LitJson.JsonToken
#include "LitJson/JsonToken.hpp"
// Including type: LitJson.ParserToken
#include "LitJson/ParserToken.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Forward declaring namespace: LitJson
namespace LitJson {
  // Forward declaring type: Lexer
  class Lexer;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: TextReader
  class TextReader;
}
// Completed forward declares
// Type namespace: LitJson
namespace LitJson {
  // Forward declaring type: JsonReader
  class JsonReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LitJson::JsonReader);
DEFINE_IL2CPP_ARG_TYPE(::LitJson::JsonReader*, "LitJson", "JsonReader");
// Type namespace: LitJson
namespace LitJson {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: LitJson.JsonReader
  // [TokenAttribute] Offset: FFFFFFFF
  class JsonReader : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.Stack`1<System.Int32> automationStack
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Stack_1<int>* automationStack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<int>*) == 0x8);
    // private LitJson.Lexer lexer
    // Size: 0x8
    // Offset: 0x18
    ::LitJson::Lexer* lexer;
    // Field size check
    static_assert(sizeof(::LitJson::Lexer*) == 0x8);
    // private System.IO.TextReader reader
    // Size: 0x8
    // Offset: 0x20
    ::System::IO::TextReader* reader;
    // Field size check
    static_assert(sizeof(::System::IO::TextReader*) == 0x8);
    // private System.Int32 currentInput
    // Size: 0x4
    // Offset: 0x28
    int currentInput;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 currentSymbol
    // Size: 0x4
    // Offset: 0x2C
    int currentSymbol;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean parserInString
    // Size: 0x1
    // Offset: 0x30
    bool parserInString;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean parserReturn
    // Size: 0x1
    // Offset: 0x31
    bool parserReturn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean readStarted
    // Size: 0x1
    // Offset: 0x32
    bool readStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean readerIsOwned
    // Size: 0x1
    // Offset: 0x33
    bool readerIsOwned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xADCE18
    // private System.Boolean <SkipNonMembers>k__BackingField
    // Size: 0x1
    // Offset: 0x34
    bool SkipNonMembers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xADCE28
    // private System.Boolean <TypeHinting>k__BackingField
    // Size: 0x1
    // Offset: 0x35
    bool TypeHinting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: TypeHinting and: HintTypeName
    char __padding10[0x2] = {};
    // [CompilerGeneratedAttribute] Offset: 0xADCE38
    // private System.String <HintTypeName>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::StringW HintTypeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADCE48
    // private System.String <HintValueName>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::StringW HintValueName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADCE58
    // private System.Boolean <EndOfInput>k__BackingField
    // Size: 0x1
    // Offset: 0x48
    bool EndOfInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xADCE68
    // private System.Boolean <EndOfJson>k__BackingField
    // Size: 0x1
    // Offset: 0x49
    bool EndOfJson;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: EndOfJson and: Token
    char __padding14[0x2] = {};
    // [CompilerGeneratedAttribute] Offset: 0xADCE78
    // private LitJson.JsonToken <Token>k__BackingField
    // Size: 0x4
    // Offset: 0x4C
    ::LitJson::JsonToken Token;
    // Field size check
    static_assert(sizeof(::LitJson::JsonToken) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xADCE88
    // private System.Object <Value>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppObject* Value;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Get static field: static private readonly System.Collections.Generic.IDictionary`2<System.Int32,System.Collections.Generic.IDictionary`2<System.Int32,System.Int32[]>> parseTable
    static ::System::Collections::Generic::IDictionary_2<int, ::System::Collections::Generic::IDictionary_2<int, ::ArrayW<int>>*>* _get_parseTable();
    // Set static field: static private readonly System.Collections.Generic.IDictionary`2<System.Int32,System.Collections.Generic.IDictionary`2<System.Int32,System.Int32[]>> parseTable
    static void _set_parseTable(::System::Collections::Generic::IDictionary_2<int, ::System::Collections::Generic::IDictionary_2<int, ::ArrayW<int>>*>* value);
    // Get instance field reference: private System.Collections.Generic.Stack`1<System.Int32> automationStack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<int>*& dyn_automationStack();
    // Get instance field reference: private LitJson.Lexer lexer
    [[deprecated("Use field access instead!")]] ::LitJson::Lexer*& dyn_lexer();
    // Get instance field reference: private System.IO.TextReader reader
    [[deprecated("Use field access instead!")]] ::System::IO::TextReader*& dyn_reader();
    // Get instance field reference: private System.Int32 currentInput
    [[deprecated("Use field access instead!")]] int& dyn_currentInput();
    // Get instance field reference: private System.Int32 currentSymbol
    [[deprecated("Use field access instead!")]] int& dyn_currentSymbol();
    // Get instance field reference: private System.Boolean parserInString
    [[deprecated("Use field access instead!")]] bool& dyn_parserInString();
    // Get instance field reference: private System.Boolean parserReturn
    [[deprecated("Use field access instead!")]] bool& dyn_parserReturn();
    // Get instance field reference: private System.Boolean readStarted
    [[deprecated("Use field access instead!")]] bool& dyn_readStarted();
    // Get instance field reference: private System.Boolean readerIsOwned
    [[deprecated("Use field access instead!")]] bool& dyn_readerIsOwned();
    // Get instance field reference: private System.Boolean <SkipNonMembers>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$SkipNonMembers$k__BackingField();
    // Get instance field reference: private System.Boolean <TypeHinting>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$TypeHinting$k__BackingField();
    // Get instance field reference: private System.String <HintTypeName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$HintTypeName$k__BackingField();
    // Get instance field reference: private System.String <HintValueName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$HintValueName$k__BackingField();
    // Get instance field reference: private System.Boolean <EndOfInput>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$EndOfInput$k__BackingField();
    // Get instance field reference: private System.Boolean <EndOfJson>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$EndOfJson$k__BackingField();
    // Get instance field reference: private LitJson.JsonToken <Token>k__BackingField
    [[deprecated("Use field access instead!")]] ::LitJson::JsonToken& dyn_$Token$k__BackingField();
    // Get instance field reference: private System.Object <Value>k__BackingField
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$Value$k__BackingField();
    // public System.Boolean get_AllowComments()
    // Offset: 0x1206D6C
    bool get_AllowComments();
    // public System.Void set_AllowComments(System.Boolean value)
    // Offset: 0x1206DA0
    void set_AllowComments(bool value);
    // public System.Boolean get_AllowSingleQuotedStrings()
    // Offset: 0x1206DE0
    bool get_AllowSingleQuotedStrings();
    // public System.Void set_AllowSingleQuotedStrings(System.Boolean value)
    // Offset: 0x1206E14
    void set_AllowSingleQuotedStrings(bool value);
    // public System.Boolean get_SkipNonMembers()
    // Offset: 0x120164C
    bool get_SkipNonMembers();
    // public System.Void set_SkipNonMembers(System.Boolean value)
    // Offset: 0x1206E54
    void set_SkipNonMembers(bool value);
    // public System.Boolean get_TypeHinting()
    // Offset: 0x1201514
    bool get_TypeHinting();
    // public System.Void set_TypeHinting(System.Boolean value)
    // Offset: 0x1206E60
    void set_TypeHinting(bool value);
    // public System.String get_HintTypeName()
    // Offset: 0x120151C
    ::StringW get_HintTypeName();
    // public System.Void set_HintTypeName(System.String value)
    // Offset: 0x1206E6C
    void set_HintTypeName(::StringW value);
    // public System.String get_HintValueName()
    // Offset: 0x1201524
    ::StringW get_HintValueName();
    // public System.Void set_HintValueName(System.String value)
    // Offset: 0x1206E74
    void set_HintValueName(::StringW value);
    // public System.Boolean get_EndOfInput()
    // Offset: 0x1206E7C
    bool get_EndOfInput();
    // private System.Void set_EndOfInput(System.Boolean value)
    // Offset: 0x1206E84
    void set_EndOfInput(bool value);
    // public System.Boolean get_EndOfJson()
    // Offset: 0x1206E90
    bool get_EndOfJson();
    // private System.Void set_EndOfJson(System.Boolean value)
    // Offset: 0x1206E98
    void set_EndOfJson(bool value);
    // public LitJson.JsonToken get_Token()
    // Offset: 0x1201504
    ::LitJson::JsonToken get_Token();
    // private System.Void set_Token(LitJson.JsonToken value)
    // Offset: 0x1206EA4
    void set_Token(::LitJson::JsonToken value);
    // public System.Object get_Value()
    // Offset: 0x120150C
    ::Il2CppObject* get_Value();
    // private System.Void set_Value(System.Object value)
    // Offset: 0x1206EAC
    void set_Value(::Il2CppObject* value);
    // public System.Void .ctor(System.String json)
    // Offset: 0x12053BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonReader* New_ctor(::StringW json) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonReader*, creationType>(json)));
    }
    // public System.Void .ctor(System.IO.TextReader reader)
    // Offset: 0x12051A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonReader* New_ctor(::System::IO::TextReader* reader) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonReader*, creationType>(reader)));
    }
    // private System.Void .ctor(System.IO.TextReader reader, System.Boolean owned)
    // Offset: 0x1206EB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonReader* New_ctor(::System::IO::TextReader* reader, bool owned) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonReader*, creationType>(reader, owned)));
    }
    // static private System.Void .cctor()
    // Offset: 0x12070F8
    static void _cctor();
    // static private System.Void TableAddCol(LitJson.ParserToken row, System.Int32 col, params System.Int32[] symbols)
    // Offset: 0x12079E8
    static void TableAddCol(::LitJson::ParserToken row, int col, ::ArrayW<int> symbols);
    // static private System.Void TableAddRow(LitJson.ParserToken rule)
    // Offset: 0x12078D4
    static void TableAddRow(::LitJson::ParserToken rule);
    // private System.Void ProcessNumber(System.String number)
    // Offset: 0x1207B58
    void ProcessNumber(::StringW number);
    // private System.Void ProcessSymbol()
    // Offset: 0x1207D9C
    void ProcessSymbol();
    // private System.Boolean ReadToken()
    // Offset: 0x1207F54
    bool ReadToken();
    // public System.Void Close()
    // Offset: 0x120824C
    void Close();
    // public System.Boolean Read()
    // Offset: 0x120105C
    bool Read();
  }; // LitJson.JsonReader
  #pragma pack(pop)
  static check_size<sizeof(JsonReader), 80 + sizeof(::Il2CppObject*)> __LitJson_JsonReaderSizeCheck;
  static_assert(sizeof(JsonReader) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LitJson::JsonReader::get_AllowComments
// Il2CppName: get_AllowComments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_AllowComments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_AllowComments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::set_AllowComments
// Il2CppName: set_AllowComments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)(bool)>(&LitJson::JsonReader::set_AllowComments)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "set_AllowComments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::get_AllowSingleQuotedStrings
// Il2CppName: get_AllowSingleQuotedStrings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_AllowSingleQuotedStrings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_AllowSingleQuotedStrings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::set_AllowSingleQuotedStrings
// Il2CppName: set_AllowSingleQuotedStrings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)(bool)>(&LitJson::JsonReader::set_AllowSingleQuotedStrings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "set_AllowSingleQuotedStrings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::get_SkipNonMembers
// Il2CppName: get_SkipNonMembers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_SkipNonMembers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_SkipNonMembers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::set_SkipNonMembers
// Il2CppName: set_SkipNonMembers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)(bool)>(&LitJson::JsonReader::set_SkipNonMembers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "set_SkipNonMembers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::get_TypeHinting
// Il2CppName: get_TypeHinting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_TypeHinting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_TypeHinting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::set_TypeHinting
// Il2CppName: set_TypeHinting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)(bool)>(&LitJson::JsonReader::set_TypeHinting)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "set_TypeHinting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::get_HintTypeName
// Il2CppName: get_HintTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_HintTypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_HintTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::set_HintTypeName
// Il2CppName: set_HintTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)(::StringW)>(&LitJson::JsonReader::set_HintTypeName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "set_HintTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::get_HintValueName
// Il2CppName: get_HintValueName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_HintValueName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_HintValueName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::set_HintValueName
// Il2CppName: set_HintValueName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)(::StringW)>(&LitJson::JsonReader::set_HintValueName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "set_HintValueName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::get_EndOfInput
// Il2CppName: get_EndOfInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_EndOfInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_EndOfInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::set_EndOfInput
// Il2CppName: set_EndOfInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)(bool)>(&LitJson::JsonReader::set_EndOfInput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "set_EndOfInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::get_EndOfJson
// Il2CppName: get_EndOfJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_EndOfJson)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_EndOfJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::set_EndOfJson
// Il2CppName: set_EndOfJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)(bool)>(&LitJson::JsonReader::set_EndOfJson)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "set_EndOfJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::get_Token
// Il2CppName: get_Token
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LitJson::JsonToken (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_Token)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_Token", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::set_Token
// Il2CppName: set_Token
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)(::LitJson::JsonToken)>(&LitJson::JsonReader::set_Token)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LitJson", "JsonToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "set_Token", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LitJson::JsonReader::*)()>(&LitJson::JsonReader::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::set_Value
// Il2CppName: set_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)(::Il2CppObject*)>(&LitJson::JsonReader::set_Value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "set_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LitJson::JsonReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LitJson::JsonReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LitJson::JsonReader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&LitJson::JsonReader::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::TableAddCol
// Il2CppName: TableAddCol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::LitJson::ParserToken, int, ::ArrayW<int>)>(&LitJson::JsonReader::TableAddCol)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("LitJson", "ParserToken")->byval_arg;
    static auto* col = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* symbols = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "TableAddCol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, col, symbols});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::TableAddRow
// Il2CppName: TableAddRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::LitJson::ParserToken)>(&LitJson::JsonReader::TableAddRow)> {
  static const MethodInfo* get() {
    static auto* rule = &::il2cpp_utils::GetClassFromName("LitJson", "ParserToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "TableAddRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rule});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::ProcessNumber
// Il2CppName: ProcessNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)(::StringW)>(&LitJson::JsonReader::ProcessNumber)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "ProcessNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::ProcessSymbol
// Il2CppName: ProcessSymbol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)()>(&LitJson::JsonReader::ProcessSymbol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "ProcessSymbol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::ReadToken
// Il2CppName: ReadToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonReader::*)()>(&LitJson::JsonReader::ReadToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "ReadToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonReader::*)()>(&LitJson::JsonReader::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonReader::*)()>(&LitJson::JsonReader::Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
