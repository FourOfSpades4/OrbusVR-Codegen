// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: LitJson
namespace LitJson {
  // Forward declaring type: ArrayMetadata
  struct ArrayMetadata;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::LitJson::ArrayMetadata, "LitJson", "ArrayMetadata");
// Type namespace: LitJson
namespace LitJson {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: LitJson.ArrayMetadata
  // [TokenAttribute] Offset: FFFFFFFF
  struct ArrayMetadata/*, public ::System::ValueType*/ {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xADCDD8
    // private System.Boolean <IsArray>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool IsArray;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xADCDE8
    // private System.Boolean <IsList>k__BackingField
    // Size: 0x1
    // Offset: 0x1
    bool IsList;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsList and: elemType
    char __padding1[0x6] = {};
    // private System.Type elemType
    // Size: 0x8
    // Offset: 0x8
    ::System::Type* elemType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Creating value type constructor for type: ArrayMetadata
    constexpr ArrayMetadata(bool IsArray_ = {}, bool IsList_ = {}, ::System::Type* elemType_ = {}) noexcept : IsArray{IsArray_}, IsList{IsList_}, elemType{elemType_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Boolean <IsArray>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsArray$k__BackingField();
    // Get instance field reference: private System.Boolean <IsList>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsList$k__BackingField();
    // Get instance field reference: private System.Type elemType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_elemType();
    // public System.Boolean get_IsArray()
    // Offset: 0xB965F4
    bool get_IsArray();
    // public System.Void set_IsArray(System.Boolean value)
    // Offset: 0xB965FC
    void set_IsArray(bool value);
    // public System.Boolean get_IsList()
    // Offset: 0xB96608
    bool get_IsList();
    // public System.Void set_IsList(System.Boolean value)
    // Offset: 0xB96610
    void set_IsList(bool value);
    // public System.Type get_ElementType()
    // Offset: 0xB9661C
    ::System::Type* get_ElementType();
    // public System.Void set_ElementType(System.Type value)
    // Offset: 0xB96624
    void set_ElementType(::System::Type* value);
  }; // LitJson.ArrayMetadata
  #pragma pack(pop)
  static check_size<sizeof(ArrayMetadata), 8 + sizeof(::System::Type*)> __LitJson_ArrayMetadataSizeCheck;
  static_assert(sizeof(ArrayMetadata) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LitJson::ArrayMetadata::get_IsArray
// Il2CppName: get_IsArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::ArrayMetadata::*)()>(&LitJson::ArrayMetadata::get_IsArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::ArrayMetadata), "get_IsArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::ArrayMetadata::set_IsArray
// Il2CppName: set_IsArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::ArrayMetadata::*)(bool)>(&LitJson::ArrayMetadata::set_IsArray)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::ArrayMetadata), "set_IsArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::ArrayMetadata::get_IsList
// Il2CppName: get_IsList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::ArrayMetadata::*)()>(&LitJson::ArrayMetadata::get_IsList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::ArrayMetadata), "get_IsList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::ArrayMetadata::set_IsList
// Il2CppName: set_IsList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::ArrayMetadata::*)(bool)>(&LitJson::ArrayMetadata::set_IsList)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::ArrayMetadata), "set_IsList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::ArrayMetadata::get_ElementType
// Il2CppName: get_ElementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (LitJson::ArrayMetadata::*)()>(&LitJson::ArrayMetadata::get_ElementType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::ArrayMetadata), "get_ElementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::ArrayMetadata::set_ElementType
// Il2CppName: set_ElementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::ArrayMetadata::*)(::System::Type*)>(&LitJson::ArrayMetadata::set_ElementType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::ArrayMetadata), "set_ElementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
