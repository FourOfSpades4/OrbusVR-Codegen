// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LitJson.IJsonWrapper
#include "LitJson/IJsonWrapper.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LitJson
namespace LitJson {
  // Forward declaring type: JsonType
  struct JsonType;
  // Forward declaring type: JsonWriter
  class JsonWriter;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
  // Skipping declaration: ICollection because it is already included!
  // Forward declaring type: IDictionaryEnumerator
  class IDictionaryEnumerator;
}
// Completed forward declares
// Type namespace: LitJson
namespace LitJson {
  // Forward declaring type: JsonMockWrapper
  class JsonMockWrapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LitJson::JsonMockWrapper);
DEFINE_IL2CPP_ARG_TYPE(::LitJson::JsonMockWrapper*, "LitJson", "JsonMockWrapper");
// Type namespace: LitJson
namespace LitJson {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: LitJson.JsonMockWrapper
  // [TokenAttribute] Offset: FFFFFFFF
  class JsonMockWrapper : public ::Il2CppObject/*, public ::LitJson::IJsonWrapper*/ {
    public:
    // Creating interface conversion operator: operator ::LitJson::IJsonWrapper
    operator ::LitJson::IJsonWrapper() noexcept {
      return *reinterpret_cast<::LitJson::IJsonWrapper*>(this);
    }
    // public System.Boolean get_IsArray()
    // Offset: 0x1206BA8
    bool get_IsArray();
    // public System.Boolean get_IsBoolean()
    // Offset: 0x1206BB0
    bool get_IsBoolean();
    // public System.Boolean get_IsReal()
    // Offset: 0x1206BB8
    bool get_IsReal();
    // public System.Boolean get_IsNatural()
    // Offset: 0x1206BC0
    bool get_IsNatural();
    // public System.Boolean get_IsObject()
    // Offset: 0x1206BC8
    bool get_IsObject();
    // public System.Boolean get_IsString()
    // Offset: 0x1206BD0
    bool get_IsString();
    // public System.Boolean GetBoolean()
    // Offset: 0x1206BD8
    bool GetBoolean();
    // public System.Double GetReal()
    // Offset: 0x1206BE0
    double GetReal();
    // public System.Int64 GetNatural()
    // Offset: 0x1206BE8
    int64_t GetNatural();
    // public LitJson.JsonType GetJsonType()
    // Offset: 0x1206BF0
    ::LitJson::JsonType GetJsonType();
    // public System.String GetString()
    // Offset: 0x1206BF8
    ::StringW GetString();
    // public System.Void SetBoolean(System.Boolean val)
    // Offset: 0x1206C40
    void SetBoolean(bool val);
    // public System.Void SetReal(System.Double val)
    // Offset: 0x1206C44
    void SetReal(double val);
    // public System.Void SetNatural(System.Int64 val)
    // Offset: 0x1206C48
    void SetNatural(int64_t val);
    // public System.Void SetJsonType(LitJson.JsonType type)
    // Offset: 0x1206C4C
    void SetJsonType(::LitJson::JsonType type);
    // public System.Void SetString(System.String val)
    // Offset: 0x1206C50
    void SetString(::StringW val);
    // public System.String ToJson()
    // Offset: 0x1206C54
    ::StringW ToJson();
    // public System.Void ToJson(LitJson.JsonWriter writer)
    // Offset: 0x1206C9C
    void ToJson(::LitJson::JsonWriter* writer);
    // private System.Boolean System.Collections.IList.get_IsFixedSize()
    // Offset: 0x1206CA0
    bool System_Collections_IList_get_IsFixedSize();
    // private System.Boolean System.Collections.IList.get_IsReadOnly()
    // Offset: 0x1206CA8
    bool System_Collections_IList_get_IsReadOnly();
    // private System.Object System.Collections.IList.get_Item(System.Int32 index)
    // Offset: 0x1206CB0
    ::Il2CppObject* System_Collections_IList_get_Item(int index);
    // private System.Void System.Collections.IList.set_Item(System.Int32 index, System.Object value)
    // Offset: 0x1206CB8
    void System_Collections_IList_set_Item(int index, ::Il2CppObject* value);
    // private System.Int32 System.Collections.IList.Add(System.Object value)
    // Offset: 0x1206CBC
    int System_Collections_IList_Add(::Il2CppObject* value);
    // private System.Void System.Collections.IList.Clear()
    // Offset: 0x1206CC4
    void System_Collections_IList_Clear();
    // private System.Boolean System.Collections.IList.Contains(System.Object value)
    // Offset: 0x1206CC8
    bool System_Collections_IList_Contains(::Il2CppObject* value);
    // private System.Int32 System.Collections.IList.IndexOf(System.Object value)
    // Offset: 0x1206CD0
    int System_Collections_IList_IndexOf(::Il2CppObject* value);
    // private System.Void System.Collections.IList.Insert(System.Int32 i, System.Object v)
    // Offset: 0x1206CD8
    void System_Collections_IList_Insert(int i, ::Il2CppObject* v);
    // private System.Void System.Collections.IList.Remove(System.Object value)
    // Offset: 0x1206CDC
    void System_Collections_IList_Remove(::Il2CppObject* value);
    // private System.Void System.Collections.IList.RemoveAt(System.Int32 index)
    // Offset: 0x1206CE0
    void System_Collections_IList_RemoveAt(int index);
    // private System.Int32 System.Collections.ICollection.get_Count()
    // Offset: 0x1206CE4
    int System_Collections_ICollection_get_Count();
    // private System.Boolean System.Collections.ICollection.get_IsSynchronized()
    // Offset: 0x1206CEC
    bool System_Collections_ICollection_get_IsSynchronized();
    // private System.Object System.Collections.ICollection.get_SyncRoot()
    // Offset: 0x1206CF4
    ::Il2CppObject* System_Collections_ICollection_get_SyncRoot();
    // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
    // Offset: 0x1206CFC
    void System_Collections_ICollection_CopyTo(::System::Array* array, int index);
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x1206D00
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // private System.Boolean System.Collections.IDictionary.get_IsFixedSize()
    // Offset: 0x1206D08
    bool System_Collections_IDictionary_get_IsFixedSize();
    // private System.Boolean System.Collections.IDictionary.get_IsReadOnly()
    // Offset: 0x1206D10
    bool System_Collections_IDictionary_get_IsReadOnly();
    // private System.Collections.ICollection System.Collections.IDictionary.get_Keys()
    // Offset: 0x1206D18
    ::System::Collections::ICollection* System_Collections_IDictionary_get_Keys();
    // private System.Collections.ICollection System.Collections.IDictionary.get_Values()
    // Offset: 0x1206D20
    ::System::Collections::ICollection* System_Collections_IDictionary_get_Values();
    // private System.Object System.Collections.IDictionary.get_Item(System.Object key)
    // Offset: 0x1206D28
    ::Il2CppObject* System_Collections_IDictionary_get_Item(::Il2CppObject* key);
    // private System.Void System.Collections.IDictionary.set_Item(System.Object key, System.Object value)
    // Offset: 0x1206D30
    void System_Collections_IDictionary_set_Item(::Il2CppObject* key, ::Il2CppObject* value);
    // private System.Void System.Collections.IDictionary.Add(System.Object k, System.Object v)
    // Offset: 0x1206D34
    void System_Collections_IDictionary_Add(::Il2CppObject* k, ::Il2CppObject* v);
    // private System.Void System.Collections.IDictionary.Clear()
    // Offset: 0x1206D38
    void System_Collections_IDictionary_Clear();
    // private System.Boolean System.Collections.IDictionary.Contains(System.Object key)
    // Offset: 0x1206D3C
    bool System_Collections_IDictionary_Contains(::Il2CppObject* key);
    // private System.Void System.Collections.IDictionary.Remove(System.Object key)
    // Offset: 0x1206D44
    void System_Collections_IDictionary_Remove(::Il2CppObject* key);
    // private System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
    // Offset: 0x1206D48
    ::System::Collections::IDictionaryEnumerator* System_Collections_IDictionary_GetEnumerator();
    // private System.Object System.Collections.Specialized.IOrderedDictionary.get_Item(System.Int32 idx)
    // Offset: 0x1206D50
    ::Il2CppObject* System_Collections_Specialized_IOrderedDictionary_get_Item(int idx);
    // private System.Void System.Collections.Specialized.IOrderedDictionary.set_Item(System.Int32 idx, System.Object value)
    // Offset: 0x1206D58
    void System_Collections_Specialized_IOrderedDictionary_set_Item(int idx, ::Il2CppObject* value);
    // private System.Collections.IDictionaryEnumerator System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
    // Offset: 0x1206D5C
    ::System::Collections::IDictionaryEnumerator* System_Collections_Specialized_IOrderedDictionary_GetEnumerator();
    // private System.Void System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32 i, System.Object k, System.Object v)
    // Offset: 0x1206D64
    void System_Collections_Specialized_IOrderedDictionary_Insert(int i, ::Il2CppObject* k, ::Il2CppObject* v);
    // private System.Void System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32 i)
    // Offset: 0x1206D68
    void System_Collections_Specialized_IOrderedDictionary_RemoveAt(int i);
    // public System.Void .ctor()
    // Offset: 0x1205798
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonMockWrapper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonMockWrapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonMockWrapper*, creationType>()));
    }
  }; // LitJson.JsonMockWrapper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::get_IsArray
// Il2CppName: get_IsArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::get_IsArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "get_IsArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::get_IsBoolean
// Il2CppName: get_IsBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::get_IsBoolean)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "get_IsBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::get_IsReal
// Il2CppName: get_IsReal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::get_IsReal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "get_IsReal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::get_IsNatural
// Il2CppName: get_IsNatural
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::get_IsNatural)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "get_IsNatural", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::get_IsObject
// Il2CppName: get_IsObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::get_IsObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "get_IsObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::get_IsString
// Il2CppName: get_IsString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::get_IsString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "get_IsString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::GetBoolean
// Il2CppName: GetBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::GetBoolean)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "GetBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::GetReal
// Il2CppName: GetReal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::GetReal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "GetReal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::GetNatural
// Il2CppName: GetNatural
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::GetNatural)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "GetNatural", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::GetJsonType
// Il2CppName: GetJsonType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LitJson::JsonType (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::GetJsonType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "GetJsonType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::GetString
// Il2CppName: GetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::GetString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::SetBoolean
// Il2CppName: SetBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(bool)>(&LitJson::JsonMockWrapper::SetBoolean)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "SetBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::SetReal
// Il2CppName: SetReal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(double)>(&LitJson::JsonMockWrapper::SetReal)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "SetReal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::SetNatural
// Il2CppName: SetNatural
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(int64_t)>(&LitJson::JsonMockWrapper::SetNatural)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "SetNatural", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::SetJsonType
// Il2CppName: SetJsonType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(::LitJson::JsonType)>(&LitJson::JsonMockWrapper::SetJsonType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("LitJson", "JsonType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "SetJsonType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::SetString
// Il2CppName: SetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(::StringW)>(&LitJson::JsonMockWrapper::SetString)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "SetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::ToJson
// Il2CppName: ToJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::ToJson)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "ToJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::ToJson
// Il2CppName: ToJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(::LitJson::JsonWriter*)>(&LitJson::JsonMockWrapper::ToJson)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LitJson", "JsonWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "ToJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IList_get_IsFixedSize
// Il2CppName: System.Collections.IList.get_IsFixedSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::System_Collections_IList_get_IsFixedSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IList.get_IsFixedSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IList_get_IsReadOnly
// Il2CppName: System.Collections.IList.get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::System_Collections_IList_get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IList.get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IList_get_Item
// Il2CppName: System.Collections.IList.get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LitJson::JsonMockWrapper::*)(int)>(&LitJson::JsonMockWrapper::System_Collections_IList_get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IList.get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IList_set_Item
// Il2CppName: System.Collections.IList.set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(int, ::Il2CppObject*)>(&LitJson::JsonMockWrapper::System_Collections_IList_set_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IList.set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IList_Add
// Il2CppName: System.Collections.IList.Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LitJson::JsonMockWrapper::*)(::Il2CppObject*)>(&LitJson::JsonMockWrapper::System_Collections_IList_Add)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IList.Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IList_Clear
// Il2CppName: System.Collections.IList.Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::System_Collections_IList_Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IList.Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IList_Contains
// Il2CppName: System.Collections.IList.Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonMockWrapper::*)(::Il2CppObject*)>(&LitJson::JsonMockWrapper::System_Collections_IList_Contains)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IList.Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IList_IndexOf
// Il2CppName: System.Collections.IList.IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LitJson::JsonMockWrapper::*)(::Il2CppObject*)>(&LitJson::JsonMockWrapper::System_Collections_IList_IndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IList.IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IList_Insert
// Il2CppName: System.Collections.IList.Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(int, ::Il2CppObject*)>(&LitJson::JsonMockWrapper::System_Collections_IList_Insert)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IList.Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, v});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IList_Remove
// Il2CppName: System.Collections.IList.Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(::Il2CppObject*)>(&LitJson::JsonMockWrapper::System_Collections_IList_Remove)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IList.Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IList_RemoveAt
// Il2CppName: System.Collections.IList.RemoveAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(int)>(&LitJson::JsonMockWrapper::System_Collections_IList_RemoveAt)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IList.RemoveAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_ICollection_get_Count
// Il2CppName: System.Collections.ICollection.get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::System_Collections_ICollection_get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.ICollection.get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_ICollection_get_IsSynchronized
// Il2CppName: System.Collections.ICollection.get_IsSynchronized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::System_Collections_ICollection_get_IsSynchronized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.ICollection.get_IsSynchronized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_ICollection_get_SyncRoot
// Il2CppName: System.Collections.ICollection.get_SyncRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::System_Collections_ICollection_get_SyncRoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.ICollection.get_SyncRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_ICollection_CopyTo
// Il2CppName: System.Collections.ICollection.CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(::System::Array*, int)>(&LitJson::JsonMockWrapper::System_Collections_ICollection_CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IDictionary_get_IsFixedSize
// Il2CppName: System.Collections.IDictionary.get_IsFixedSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::System_Collections_IDictionary_get_IsFixedSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IDictionary.get_IsFixedSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IDictionary_get_IsReadOnly
// Il2CppName: System.Collections.IDictionary.get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::System_Collections_IDictionary_get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IDictionary.get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IDictionary_get_Keys
// Il2CppName: System.Collections.IDictionary.get_Keys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ICollection* (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::System_Collections_IDictionary_get_Keys)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IDictionary.get_Keys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IDictionary_get_Values
// Il2CppName: System.Collections.IDictionary.get_Values
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ICollection* (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::System_Collections_IDictionary_get_Values)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IDictionary.get_Values", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IDictionary_get_Item
// Il2CppName: System.Collections.IDictionary.get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LitJson::JsonMockWrapper::*)(::Il2CppObject*)>(&LitJson::JsonMockWrapper::System_Collections_IDictionary_get_Item)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IDictionary.get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IDictionary_set_Item
// Il2CppName: System.Collections.IDictionary.set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(::Il2CppObject*, ::Il2CppObject*)>(&LitJson::JsonMockWrapper::System_Collections_IDictionary_set_Item)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IDictionary.set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IDictionary_Add
// Il2CppName: System.Collections.IDictionary.Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(::Il2CppObject*, ::Il2CppObject*)>(&LitJson::JsonMockWrapper::System_Collections_IDictionary_Add)> {
  static const MethodInfo* get() {
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IDictionary.Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{k, v});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IDictionary_Clear
// Il2CppName: System.Collections.IDictionary.Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::System_Collections_IDictionary_Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IDictionary.Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IDictionary_Contains
// Il2CppName: System.Collections.IDictionary.Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LitJson::JsonMockWrapper::*)(::Il2CppObject*)>(&LitJson::JsonMockWrapper::System_Collections_IDictionary_Contains)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IDictionary.Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IDictionary_Remove
// Il2CppName: System.Collections.IDictionary.Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(::Il2CppObject*)>(&LitJson::JsonMockWrapper::System_Collections_IDictionary_Remove)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IDictionary.Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_IDictionary_GetEnumerator
// Il2CppName: System.Collections.IDictionary.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IDictionaryEnumerator* (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::System_Collections_IDictionary_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.IDictionary.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_Specialized_IOrderedDictionary_get_Item
// Il2CppName: System.Collections.Specialized.IOrderedDictionary.get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LitJson::JsonMockWrapper::*)(int)>(&LitJson::JsonMockWrapper::System_Collections_Specialized_IOrderedDictionary_get_Item)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.Specialized.IOrderedDictionary.get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_Specialized_IOrderedDictionary_set_Item
// Il2CppName: System.Collections.Specialized.IOrderedDictionary.set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(int, ::Il2CppObject*)>(&LitJson::JsonMockWrapper::System_Collections_Specialized_IOrderedDictionary_set_Item)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.Specialized.IOrderedDictionary.set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_Specialized_IOrderedDictionary_GetEnumerator
// Il2CppName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IDictionaryEnumerator* (LitJson::JsonMockWrapper::*)()>(&LitJson::JsonMockWrapper::System_Collections_Specialized_IOrderedDictionary_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.Specialized.IOrderedDictionary.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_Specialized_IOrderedDictionary_Insert
// Il2CppName: System.Collections.Specialized.IOrderedDictionary.Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(int, ::Il2CppObject*, ::Il2CppObject*)>(&LitJson::JsonMockWrapper::System_Collections_Specialized_IOrderedDictionary_Insert)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.Specialized.IOrderedDictionary.Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, k, v});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::System_Collections_Specialized_IOrderedDictionary_RemoveAt
// Il2CppName: System.Collections.Specialized.IOrderedDictionary.RemoveAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonMockWrapper::*)(int)>(&LitJson::JsonMockWrapper::System_Collections_Specialized_IOrderedDictionary_RemoveAt)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonMockWrapper*), "System.Collections.Specialized.IOrderedDictionary.RemoveAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: LitJson::JsonMockWrapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
