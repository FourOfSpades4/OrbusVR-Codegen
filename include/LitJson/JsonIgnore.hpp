// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: LitJson.JsonIgnoreWhen
#include "LitJson/JsonIgnoreWhen.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: LitJson
namespace LitJson {
  // Forward declaring type: JsonIgnore
  class JsonIgnore;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LitJson::JsonIgnore);
DEFINE_IL2CPP_ARG_TYPE(::LitJson::JsonIgnore*, "LitJson", "JsonIgnore");
// Type namespace: LitJson
namespace LitJson {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: LitJson.JsonIgnore
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: ACEAE0
  class JsonIgnore : public ::System::Attribute {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xADCD38
    // private LitJson.JsonIgnoreWhen <Usage>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::LitJson::JsonIgnoreWhen Usage;
    // Field size check
    static_assert(sizeof(::LitJson::JsonIgnoreWhen) == 0x4);
    public:
    // Creating conversion operator: operator ::LitJson::JsonIgnoreWhen
    constexpr operator ::LitJson::JsonIgnoreWhen() const noexcept {
      return Usage;
    }
    // Get instance field reference: private LitJson.JsonIgnoreWhen <Usage>k__BackingField
    [[deprecated("Use field access instead!")]] ::LitJson::JsonIgnoreWhen& dyn_$Usage$k__BackingField();
    // public LitJson.JsonIgnoreWhen get_Usage()
    // Offset: 0x11FB048
    ::LitJson::JsonIgnoreWhen get_Usage();
    // private System.Void set_Usage(LitJson.JsonIgnoreWhen value)
    // Offset: 0x11FB050
    void set_Usage(::LitJson::JsonIgnoreWhen value);
    // public System.Void .ctor()
    // Offset: 0x11FB058
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonIgnore* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnore::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonIgnore*, creationType>()));
    }
    // public System.Void .ctor(LitJson.JsonIgnoreWhen usage)
    // Offset: 0x11FB084
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonIgnore* New_ctor(::LitJson::JsonIgnoreWhen usage) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnore::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonIgnore*, creationType>(usage)));
    }
  }; // LitJson.JsonIgnore
  #pragma pack(pop)
  static check_size<sizeof(JsonIgnore), 16 + sizeof(::LitJson::JsonIgnoreWhen)> __LitJson_JsonIgnoreSizeCheck;
  static_assert(sizeof(JsonIgnore) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LitJson::JsonIgnore::get_Usage
// Il2CppName: get_Usage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LitJson::JsonIgnoreWhen (LitJson::JsonIgnore::*)()>(&LitJson::JsonIgnore::get_Usage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonIgnore*), "get_Usage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonIgnore::set_Usage
// Il2CppName: set_Usage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonIgnore::*)(::LitJson::JsonIgnoreWhen)>(&LitJson::JsonIgnore::set_Usage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LitJson", "JsonIgnoreWhen")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonIgnore*), "set_Usage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonIgnore::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LitJson::JsonIgnore::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
