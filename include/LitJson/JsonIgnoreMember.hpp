// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: ICollection`1<T>
  template<typename T>
  class ICollection_1;
}
// Completed forward declares
// Type namespace: LitJson
namespace LitJson {
  // Forward declaring type: JsonIgnoreMember
  class JsonIgnoreMember;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LitJson::JsonIgnoreMember);
DEFINE_IL2CPP_ARG_TYPE(::LitJson::JsonIgnoreMember*, "LitJson", "JsonIgnoreMember");
// Type namespace: LitJson
namespace LitJson {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: LitJson.JsonIgnoreMember
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: ACEAF4
  class JsonIgnoreMember : public ::System::Attribute {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xADCD48
    // private System.Collections.Generic.HashSet`1<System.String> <Members>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::HashSet_1<::StringW>* Members;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::HashSet_1<::StringW>*
    constexpr operator ::System::Collections::Generic::HashSet_1<::StringW>*() const noexcept {
      return Members;
    }
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.String> <Members>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn_$Members$k__BackingField();
    // public System.Collections.Generic.HashSet`1<System.String> get_Members()
    // Offset: 0x11FB0B0
    ::System::Collections::Generic::HashSet_1<::StringW>* get_Members();
    // private System.Void set_Members(System.Collections.Generic.HashSet`1<System.String> value)
    // Offset: 0x11FB0B8
    void set_Members(::System::Collections::Generic::HashSet_1<::StringW>* value);
    // public System.Void .ctor(params System.String[] members)
    // Offset: 0x11FB0C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonIgnoreMember* New_ctor(::ArrayW<::StringW> members) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnoreMember::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonIgnoreMember*, creationType>(members)));
    }
    // public System.Void .ctor(System.Collections.Generic.ICollection`1<System.String> members)
    // Offset: 0x11FB0C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonIgnoreMember* New_ctor(::System::Collections::Generic::ICollection_1<::StringW>* members) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LitJson::JsonIgnoreMember::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonIgnoreMember*, creationType>(members)));
    }
  }; // LitJson.JsonIgnoreMember
  #pragma pack(pop)
  static check_size<sizeof(JsonIgnoreMember), 16 + sizeof(::System::Collections::Generic::HashSet_1<::StringW>*)> __LitJson_JsonIgnoreMemberSizeCheck;
  static_assert(sizeof(JsonIgnoreMember) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LitJson::JsonIgnoreMember::get_Members
// Il2CppName: get_Members
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::HashSet_1<::StringW>* (LitJson::JsonIgnoreMember::*)()>(&LitJson::JsonIgnoreMember::get_Members)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonIgnoreMember*), "get_Members", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LitJson::JsonIgnoreMember::set_Members
// Il2CppName: set_Members
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LitJson::JsonIgnoreMember::*)(::System::Collections::Generic::HashSet_1<::StringW>*)>(&LitJson::JsonIgnoreMember::set_Members)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "HashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LitJson::JsonIgnoreMember*), "set_Members", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LitJson::JsonIgnoreMember::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LitJson::JsonIgnoreMember::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
