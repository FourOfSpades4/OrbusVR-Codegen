// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: Jacovone
namespace Jacovone {
  // Forward declaring type: MathUtils
  class MathUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Jacovone::MathUtils);
DEFINE_IL2CPP_ARG_TYPE(::Jacovone::MathUtils*, "Jacovone", "MathUtils");
// Type namespace: Jacovone
namespace Jacovone {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Jacovone.MathUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class MathUtils : public ::Il2CppObject {
    public:
    // static public UnityEngine.Quaternion QuaternionBezier(UnityEngine.Quaternion p, UnityEngine.Quaternion prevP, UnityEngine.Quaternion nextP, UnityEngine.Quaternion nextNextP, System.Single stepPos)
    // Offset: 0x105A634
    static ::UnityEngine::Quaternion QuaternionBezier(::UnityEngine::Quaternion p, ::UnityEngine::Quaternion prevP, ::UnityEngine::Quaternion nextP, ::UnityEngine::Quaternion nextNextP, float stepPos);
    // static public UnityEngine.Quaternion QuaternionNormalize(UnityEngine.Quaternion q)
    // Offset: 0x105A924
    static ::UnityEngine::Quaternion QuaternionNormalize(::UnityEngine::Quaternion q);
    // static public UnityEngine.Vector3 Vector3Bezier(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3, System.Single t)
    // Offset: 0x105A9FC
    static ::UnityEngine::Vector3 Vector3Bezier(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3, float t);
    // static public System.Single FloatBezier(System.Single p0, System.Single p1, System.Single p2, System.Single p3, System.Single t)
    // Offset: 0x105ABC4
    static float FloatBezier(float p0, float p1, float p2, float p3, float t);
    // public System.Void .ctor()
    // Offset: 0x105AC10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MathUtils* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Jacovone::MathUtils::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MathUtils*, creationType>()));
    }
  }; // Jacovone.MathUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Jacovone::MathUtils::QuaternionBezier
// Il2CppName: QuaternionBezier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(::UnityEngine::Quaternion, ::UnityEngine::Quaternion, ::UnityEngine::Quaternion, ::UnityEngine::Quaternion, float)>(&Jacovone::MathUtils::QuaternionBezier)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* prevP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* nextP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* nextNextP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* stepPos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::MathUtils*), "QuaternionBezier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, prevP, nextP, nextNextP, stepPos});
  }
};
// Writing MetadataGetter for method: Jacovone::MathUtils::QuaternionNormalize
// Il2CppName: QuaternionNormalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(::UnityEngine::Quaternion)>(&Jacovone::MathUtils::QuaternionNormalize)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::MathUtils*), "QuaternionNormalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q});
  }
};
// Writing MetadataGetter for method: Jacovone::MathUtils::Vector3Bezier
// Il2CppName: Vector3Bezier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Jacovone::MathUtils::Vector3Bezier)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::MathUtils*), "Vector3Bezier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, p2, p3, t});
  }
};
// Writing MetadataGetter for method: Jacovone::MathUtils::FloatBezier
// Il2CppName: FloatBezier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float, float)>(&Jacovone::MathUtils::FloatBezier)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::MathUtils*), "FloatBezier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, p2, p3, t});
  }
};
// Writing MetadataGetter for method: Jacovone::MathUtils::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
