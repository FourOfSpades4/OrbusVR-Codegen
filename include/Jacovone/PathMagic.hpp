// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Jacovone
namespace Jacovone {
  // Skipping declaration: UpdateModeType because it is already included!
  // Forward declaring type: Waypoint
  class Waypoint;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: Jacovone
namespace Jacovone {
  // Forward declaring type: PathMagic
  class PathMagic;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Jacovone::PathMagic);
DEFINE_IL2CPP_ARG_TYPE(::Jacovone::PathMagic*, "Jacovone", "PathMagic");
// Type namespace: Jacovone
namespace Jacovone {
  // Size: 0xB4
  #pragma pack(push, 1)
  // Autogenerated type: Jacovone.PathMagic
  // [TokenAttribute] Offset: FFFFFFFF
  class PathMagic : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Jacovone::PathMagic::WaypointChangedEvent
    class WaypointChangedEvent;
    // Nested type: ::Jacovone::PathMagic::UpdateModeType
    struct UpdateModeType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Jacovone.PathMagic/UpdateModeType
    // [TokenAttribute] Offset: FFFFFFFF
    struct UpdateModeType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UpdateModeType
      constexpr UpdateModeType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Jacovone.PathMagic/UpdateModeType OnUpdate
      static constexpr const int OnUpdate = 0;
      // Get static field: static public Jacovone.PathMagic/UpdateModeType OnUpdate
      static ::Jacovone::PathMagic::UpdateModeType _get_OnUpdate();
      // Set static field: static public Jacovone.PathMagic/UpdateModeType OnUpdate
      static void _set_OnUpdate(::Jacovone::PathMagic::UpdateModeType value);
      // static field const value: static public Jacovone.PathMagic/UpdateModeType OnFixedUpdate
      static constexpr const int OnFixedUpdate = 1;
      // Get static field: static public Jacovone.PathMagic/UpdateModeType OnFixedUpdate
      static ::Jacovone::PathMagic::UpdateModeType _get_OnFixedUpdate();
      // Set static field: static public Jacovone.PathMagic/UpdateModeType OnFixedUpdate
      static void _set_OnFixedUpdate(::Jacovone::PathMagic::UpdateModeType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Jacovone.PathMagic/UpdateModeType
    #pragma pack(pop)
    static check_size<sizeof(PathMagic::UpdateModeType), 0 + sizeof(int)> __Jacovone_PathMagic_UpdateModeTypeSizeCheck;
    static_assert(sizeof(PathMagic::UpdateModeType) == 0x4);
    public:
    // public UnityEngine.Color pathColor
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Color pathColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public Jacovone.Waypoint[] waypoints
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::Jacovone::Waypoint*> waypoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::Jacovone::Waypoint*>) == 0x8);
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean disableOrientation
    // Size: 0x1
    // Offset: 0x38
    bool disableOrientation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disableOrientation and: globalLookAt
    char __padding3[0x7] = {};
    // public UnityEngine.Transform globalLookAt
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* globalLookAt;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean globalFollowPath
    // Size: 0x1
    // Offset: 0x48
    bool globalFollowPath;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: globalFollowPath and: globalFollowPathBias
    char __padding5[0x3] = {};
    // public System.Single globalFollowPathBias
    // Size: 0x4
    // Offset: 0x4C
    float globalFollowPathBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Jacovone.PathMagic/UpdateModeType updateMode
    // Size: 0x4
    // Offset: 0x50
    ::Jacovone::PathMagic::UpdateModeType updateMode;
    // Field size check
    static_assert(sizeof(::Jacovone::PathMagic::UpdateModeType) == 0x4);
    // public System.Boolean loop
    // Size: 0x1
    // Offset: 0x54
    bool loop;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean autoStart
    // Size: 0x1
    // Offset: 0x55
    bool autoStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoStart and: velocityBias
    char __padding9[0x2] = {};
    // public System.Single velocityBias
    // Size: 0x4
    // Offset: 0x58
    float velocityBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single currentPos
    // Size: 0x4
    // Offset: 0x5C
    float currentPos;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isPlaying
    // Size: 0x1
    // Offset: 0x60
    bool isPlaying;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isPlaying and: waypointChanged
    char __padding12[0x7] = {};
    // public Jacovone.PathMagic/WaypointChangedEvent waypointChanged
    // Size: 0x8
    // Offset: 0x68
    ::Jacovone::PathMagic::WaypointChangedEvent* waypointChanged;
    // Field size check
    static_assert(sizeof(::Jacovone::PathMagic::WaypointChangedEvent*) == 0x8);
    // public System.Boolean presampledPath
    // Size: 0x1
    // Offset: 0x70
    bool presampledPath;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: presampledPath and: samplesNum
    char __padding14[0x3] = {};
    // public System.Int32 samplesNum
    // Size: 0x4
    // Offset: 0x74
    int samplesNum;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _lastPassedWayponint
    // Size: 0x4
    // Offset: 0x78
    int lastPassedWayponint;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: lastPassedWayponint and: positionSamples
    char __padding16[0x4] = {};
    // public UnityEngine.Vector3[] positionSamples
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::UnityEngine::Vector3> positionSamples;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public UnityEngine.Quaternion[] rotationSamples
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::UnityEngine::Quaternion> rotationSamples;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Quaternion>) == 0x8);
    // public System.Single[] velocitySamples
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<float> velocitySamples;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Int32[] waypointSamples
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<int> waypointSamples;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Single[] samplesDistances
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<float> samplesDistances;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Single totalDistance
    // Size: 0x4
    // Offset: 0xA8
    float totalDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean updateTransform
    // Size: 0x1
    // Offset: 0xAC
    bool updateTransform;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: updateTransform and: lastVelocity
    char __padding23[0x3] = {};
    // private System.Single _lastVelocity
    // Size: 0x4
    // Offset: 0xB0
    float lastVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Color pathColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_pathColor();
    // Get instance field reference: public Jacovone.Waypoint[] waypoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::Jacovone::Waypoint*>& dyn_waypoints();
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // Get instance field reference: public System.Boolean disableOrientation
    [[deprecated("Use field access instead!")]] bool& dyn_disableOrientation();
    // Get instance field reference: public UnityEngine.Transform globalLookAt
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_globalLookAt();
    // Get instance field reference: public System.Boolean globalFollowPath
    [[deprecated("Use field access instead!")]] bool& dyn_globalFollowPath();
    // Get instance field reference: public System.Single globalFollowPathBias
    [[deprecated("Use field access instead!")]] float& dyn_globalFollowPathBias();
    // Get instance field reference: public Jacovone.PathMagic/UpdateModeType updateMode
    [[deprecated("Use field access instead!")]] ::Jacovone::PathMagic::UpdateModeType& dyn_updateMode();
    // Get instance field reference: public System.Boolean loop
    [[deprecated("Use field access instead!")]] bool& dyn_loop();
    // Get instance field reference: public System.Boolean autoStart
    [[deprecated("Use field access instead!")]] bool& dyn_autoStart();
    // Get instance field reference: public System.Single velocityBias
    [[deprecated("Use field access instead!")]] float& dyn_velocityBias();
    // Get instance field reference: public System.Single currentPos
    [[deprecated("Use field access instead!")]] float& dyn_currentPos();
    // Get instance field reference: public System.Boolean isPlaying
    [[deprecated("Use field access instead!")]] bool& dyn_isPlaying();
    // Get instance field reference: public Jacovone.PathMagic/WaypointChangedEvent waypointChanged
    [[deprecated("Use field access instead!")]] ::Jacovone::PathMagic::WaypointChangedEvent*& dyn_waypointChanged();
    // Get instance field reference: public System.Boolean presampledPath
    [[deprecated("Use field access instead!")]] bool& dyn_presampledPath();
    // Get instance field reference: public System.Int32 samplesNum
    [[deprecated("Use field access instead!")]] int& dyn_samplesNum();
    // Get instance field reference: private System.Int32 _lastPassedWayponint
    [[deprecated("Use field access instead!")]] int& dyn__lastPassedWayponint();
    // Get instance field reference: public UnityEngine.Vector3[] positionSamples
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_positionSamples();
    // Get instance field reference: public UnityEngine.Quaternion[] rotationSamples
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& dyn_rotationSamples();
    // Get instance field reference: public System.Single[] velocitySamples
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_velocitySamples();
    // Get instance field reference: public System.Int32[] waypointSamples
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_waypointSamples();
    // Get instance field reference: public System.Single[] samplesDistances
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_samplesDistances();
    // Get instance field reference: public System.Single totalDistance
    [[deprecated("Use field access instead!")]] float& dyn_totalDistance();
    // Get instance field reference: public System.Boolean updateTransform
    [[deprecated("Use field access instead!")]] bool& dyn_updateTransform();
    // Get instance field reference: private System.Single _lastVelocity
    [[deprecated("Use field access instead!")]] float& dyn__lastVelocity();
    // private System.Void OnEnable()
    // Offset: 0x105E6A8
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x105E6AC
    void OnDisable();
    // public Jacovone.Waypoint[] get_Waypoints()
    // Offset: 0x10598E8
    ::ArrayW<::Jacovone::Waypoint*> get_Waypoints();
    // public System.Void set_Waypoints(Jacovone.Waypoint[] value)
    // Offset: 0x105E6B0
    void set_Waypoints(::ArrayW<::Jacovone::Waypoint*> value);
    // public UnityEngine.Transform get_Target()
    // Offset: 0x105ED98
    ::UnityEngine::Transform* get_Target();
    // public System.Void set_Target(UnityEngine.Transform value)
    // Offset: 0x105EDA0
    void set_Target(::UnityEngine::Transform* value);
    // public System.Boolean get_DisableOrientation()
    // Offset: 0x105EDA8
    bool get_DisableOrientation();
    // public System.Void set_DisableOrientation(System.Boolean value)
    // Offset: 0x105EDB0
    void set_DisableOrientation(bool value);
    // public UnityEngine.Transform get_GlobalLookAt()
    // Offset: 0x105EDBC
    ::UnityEngine::Transform* get_GlobalLookAt();
    // public System.Void set_GlobalLookAt(UnityEngine.Transform value)
    // Offset: 0x105EDC4
    void set_GlobalLookAt(::UnityEngine::Transform* value);
    // public System.Boolean get_GlobalFollowPath()
    // Offset: 0x105EDCC
    bool get_GlobalFollowPath();
    // public System.Void set_GlobalFollowPath(System.Boolean value)
    // Offset: 0x105EDD4
    void set_GlobalFollowPath(bool value);
    // public System.Single get_GlobalFollowPathBias()
    // Offset: 0x105EDE0
    float get_GlobalFollowPathBias();
    // public System.Void set_GlobalFollowPathBias(System.Single value)
    // Offset: 0x105EDE8
    void set_GlobalFollowPathBias(float value);
    // public Jacovone.PathMagic/UpdateModeType get_UpdateMode()
    // Offset: 0x105EDF0
    ::Jacovone::PathMagic::UpdateModeType get_UpdateMode();
    // public System.Void set_UpdateMode(Jacovone.PathMagic/UpdateModeType value)
    // Offset: 0x105EDF8
    void set_UpdateMode(::Jacovone::PathMagic::UpdateModeType value);
    // public System.Boolean get_Loop()
    // Offset: 0x10598E0
    bool get_Loop();
    // public System.Void set_Loop(System.Boolean value)
    // Offset: 0x105EE00
    void set_Loop(bool value);
    // public System.Boolean get_AutoStart()
    // Offset: 0x105EE0C
    bool get_AutoStart();
    // public System.Void set_AutoStart(System.Boolean value)
    // Offset: 0x105EE14
    void set_AutoStart(bool value);
    // public System.Single get_VelocityBias()
    // Offset: 0x105EE20
    float get_VelocityBias();
    // public System.Void set_VelocityBias(System.Single value)
    // Offset: 0x105EE28
    void set_VelocityBias(float value);
    // public System.Single get_CurrentPos()
    // Offset: 0x1057B88
    float get_CurrentPos();
    // public System.Void set_CurrentPos(System.Single value)
    // Offset: 0x1057CD4
    void set_CurrentPos(float value);
    // public System.Boolean get_IsPlaying()
    // Offset: 0x105EE30
    bool get_IsPlaying();
    // public Jacovone.PathMagic/WaypointChangedEvent get_WaypointChanged()
    // Offset: 0x105EE38
    ::Jacovone::PathMagic::WaypointChangedEvent* get_WaypointChanged();
    // public System.Void set_WaypointChanged(Jacovone.PathMagic/WaypointChangedEvent value)
    // Offset: 0x105EE40
    void set_WaypointChanged(::Jacovone::PathMagic::WaypointChangedEvent* value);
    // public System.Boolean get_PresampledPath()
    // Offset: 0x105A26C
    bool get_PresampledPath();
    // public System.Int32 get_SamplesNum()
    // Offset: 0x105EE48
    int get_SamplesNum();
    // public System.Int32 get_LastPassedWayponint()
    // Offset: 0x105EE50
    int get_LastPassedWayponint();
    // public UnityEngine.Vector3[] get_PositionSamples()
    // Offset: 0x105EE58
    ::ArrayW<::UnityEngine::Vector3> get_PositionSamples();
    // public UnityEngine.Quaternion[] get_RotationSamples()
    // Offset: 0x105EE60
    ::ArrayW<::UnityEngine::Quaternion> get_RotationSamples();
    // public System.Single[] get_VelocitySamples()
    // Offset: 0x105EE68
    ::ArrayW<float> get_VelocitySamples();
    // public System.Int32[] get_WaypointSamples()
    // Offset: 0x10599E4
    ::ArrayW<int> get_WaypointSamples();
    // public System.Single[] get_SamplesDistances()
    // Offset: 0x10599DC
    ::ArrayW<float> get_SamplesDistances();
    // public System.Single get_TotalDistance()
    // Offset: 0x10599EC
    float get_TotalDistance();
    // public System.Boolean get_UpdateTransform()
    // Offset: 0x105EE70
    bool get_UpdateTransform();
    // public System.Void set_UpdateTransform(System.Boolean value)
    // Offset: 0x105EE78
    void set_UpdateTransform(bool value);
    // private System.Void Start()
    // Offset: 0x105EE84
    void Start();
    // private System.Void Update()
    // Offset: 0x105EECC
    void Update();
    // private System.Void FixedUpdate()
    // Offset: 0x105F024
    void FixedUpdate();
    // private System.Void DoUpdate()
    // Offset: 0x105EF0C
    void DoUpdate();
    // public System.Void Play()
    // Offset: 0x105F070
    void Play();
    // public System.Void Pause()
    // Offset: 0x105F038
    void Pause();
    // public System.Void Rewind()
    // Offset: 0x105F0AC
    void Rewind();
    // public System.Void Stop()
    // Offset: 0x105F0E4
    void Stop();
    // public System.Void sampledPositionAndRotationAndVelocityAndWaypointAtPos(System.Single pos, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation, out System.Single velocity, out System.Int32 waypoint)
    // Offset: 0x105863C
    void sampledPositionAndRotationAndVelocityAndWaypointAtPos(float pos, ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation, ByRef<float> velocity, ByRef<int> waypoint);
    // public UnityEngine.Quaternion computeRotationAtPos(System.Single pos)
    // Offset: 0x105A274
    ::UnityEngine::Quaternion computeRotationAtPos(float pos);
    // public UnityEngine.Quaternion GetWaypointRotation(System.Int32 index)
    // Offset: 0x105F6A0
    ::UnityEngine::Quaternion GetWaypointRotation(int index);
    // public UnityEngine.Vector3 computePositionAtPos(System.Single pos)
    // Offset: 0x1058C6C
    ::UnityEngine::Vector3 computePositionAtPos(float pos);
    // public System.Single computeVelocityAtPos(System.Single pos)
    // Offset: 0x105F9BC
    float computeVelocityAtPos(float pos);
    // public System.Void UpdateTarget(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    // Offset: 0x105F198
    void UpdateTarget(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation);
    // public System.Void UpdateTarget()
    // Offset: 0x1057CDC
    void UpdateTarget();
    // public System.Int32 GetCurrentWaypoint()
    // Offset: 0x105FD2C
    int GetCurrentWaypoint();
    // public System.Int32 GetWaypointFromPos(System.Single pos)
    // Offset: 0x10598F0
    int GetWaypointFromPos(float pos);
    // public UnityEngine.Quaternion GetFaceForwardForPos(System.Single pos)
    // Offset: 0x105F394
    ::UnityEngine::Quaternion GetFaceForwardForPos(float pos);
    // public System.Void UpdatePathSamples()
    // Offset: 0x105E6E4
    void UpdatePathSamples();
    // private System.Void OnDrawGizmos()
    // Offset: 0x105FD34
    void OnDrawGizmos();
    // public System.Void .ctor()
    // Offset: 0x105FD38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PathMagic* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Jacovone::PathMagic::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PathMagic*, creationType>()));
    }
  }; // Jacovone.PathMagic
  #pragma pack(pop)
  static check_size<sizeof(PathMagic), 176 + sizeof(float)> __Jacovone_PathMagicSizeCheck;
  static_assert(sizeof(PathMagic) == 0xB4);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Jacovone::PathMagic::UpdateModeType, "Jacovone", "PathMagic/UpdateModeType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Jacovone::PathMagic::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_Waypoints
// Il2CppName: get_Waypoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Jacovone::Waypoint*> (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_Waypoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_Waypoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::set_Waypoints
// Il2CppName: set_Waypoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)(::ArrayW<::Jacovone::Waypoint*>)>(&Jacovone::PathMagic::set_Waypoints)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Jacovone", "Waypoint"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "set_Waypoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_Target
// Il2CppName: get_Target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_Target)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_Target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::set_Target
// Il2CppName: set_Target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)(::UnityEngine::Transform*)>(&Jacovone::PathMagic::set_Target)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "set_Target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_DisableOrientation
// Il2CppName: get_DisableOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_DisableOrientation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_DisableOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::set_DisableOrientation
// Il2CppName: set_DisableOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)(bool)>(&Jacovone::PathMagic::set_DisableOrientation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "set_DisableOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_GlobalLookAt
// Il2CppName: get_GlobalLookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_GlobalLookAt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_GlobalLookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::set_GlobalLookAt
// Il2CppName: set_GlobalLookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)(::UnityEngine::Transform*)>(&Jacovone::PathMagic::set_GlobalLookAt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "set_GlobalLookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_GlobalFollowPath
// Il2CppName: get_GlobalFollowPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_GlobalFollowPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_GlobalFollowPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::set_GlobalFollowPath
// Il2CppName: set_GlobalFollowPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)(bool)>(&Jacovone::PathMagic::set_GlobalFollowPath)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "set_GlobalFollowPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_GlobalFollowPathBias
// Il2CppName: get_GlobalFollowPathBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_GlobalFollowPathBias)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_GlobalFollowPathBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::set_GlobalFollowPathBias
// Il2CppName: set_GlobalFollowPathBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)(float)>(&Jacovone::PathMagic::set_GlobalFollowPathBias)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "set_GlobalFollowPathBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_UpdateMode
// Il2CppName: get_UpdateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Jacovone::PathMagic::UpdateModeType (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_UpdateMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_UpdateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::set_UpdateMode
// Il2CppName: set_UpdateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)(::Jacovone::PathMagic::UpdateModeType)>(&Jacovone::PathMagic::set_UpdateMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Jacovone", "PathMagic/UpdateModeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "set_UpdateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_Loop
// Il2CppName: get_Loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_Loop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_Loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::set_Loop
// Il2CppName: set_Loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)(bool)>(&Jacovone::PathMagic::set_Loop)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "set_Loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_AutoStart
// Il2CppName: get_AutoStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_AutoStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_AutoStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::set_AutoStart
// Il2CppName: set_AutoStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)(bool)>(&Jacovone::PathMagic::set_AutoStart)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "set_AutoStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_VelocityBias
// Il2CppName: get_VelocityBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_VelocityBias)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_VelocityBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::set_VelocityBias
// Il2CppName: set_VelocityBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)(float)>(&Jacovone::PathMagic::set_VelocityBias)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "set_VelocityBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_CurrentPos
// Il2CppName: get_CurrentPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_CurrentPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_CurrentPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::set_CurrentPos
// Il2CppName: set_CurrentPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)(float)>(&Jacovone::PathMagic::set_CurrentPos)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "set_CurrentPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_IsPlaying
// Il2CppName: get_IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_IsPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_WaypointChanged
// Il2CppName: get_WaypointChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Jacovone::PathMagic::WaypointChangedEvent* (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_WaypointChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_WaypointChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::set_WaypointChanged
// Il2CppName: set_WaypointChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)(::Jacovone::PathMagic::WaypointChangedEvent*)>(&Jacovone::PathMagic::set_WaypointChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Jacovone", "PathMagic/WaypointChangedEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "set_WaypointChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_PresampledPath
// Il2CppName: get_PresampledPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_PresampledPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_PresampledPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_SamplesNum
// Il2CppName: get_SamplesNum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_SamplesNum)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_SamplesNum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_LastPassedWayponint
// Il2CppName: get_LastPassedWayponint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_LastPassedWayponint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_LastPassedWayponint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_PositionSamples
// Il2CppName: get_PositionSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_PositionSamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_PositionSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_RotationSamples
// Il2CppName: get_RotationSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Quaternion> (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_RotationSamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_RotationSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_VelocitySamples
// Il2CppName: get_VelocitySamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_VelocitySamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_VelocitySamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_WaypointSamples
// Il2CppName: get_WaypointSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_WaypointSamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_WaypointSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_SamplesDistances
// Il2CppName: get_SamplesDistances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_SamplesDistances)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_SamplesDistances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_TotalDistance
// Il2CppName: get_TotalDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_TotalDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_TotalDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::get_UpdateTransform
// Il2CppName: get_UpdateTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::get_UpdateTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "get_UpdateTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::set_UpdateTransform
// Il2CppName: set_UpdateTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)(bool)>(&Jacovone::PathMagic::set_UpdateTransform)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "set_UpdateTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::DoUpdate
// Il2CppName: DoUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::DoUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "DoUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::Play)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::Pause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::Rewind
// Il2CppName: Rewind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::Rewind)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "Rewind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::sampledPositionAndRotationAndVelocityAndWaypointAtPos
// Il2CppName: sampledPositionAndRotationAndVelocityAndWaypointAtPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)(float, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>, ByRef<float>, ByRef<int>)>(&Jacovone::PathMagic::sampledPositionAndRotationAndVelocityAndWaypointAtPos)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* waypoint = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "sampledPositionAndRotationAndVelocityAndWaypointAtPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, position, rotation, velocity, waypoint});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::computeRotationAtPos
// Il2CppName: computeRotationAtPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Jacovone::PathMagic::*)(float)>(&Jacovone::PathMagic::computeRotationAtPos)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "computeRotationAtPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::GetWaypointRotation
// Il2CppName: GetWaypointRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Jacovone::PathMagic::*)(int)>(&Jacovone::PathMagic::GetWaypointRotation)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "GetWaypointRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::computePositionAtPos
// Il2CppName: computePositionAtPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Jacovone::PathMagic::*)(float)>(&Jacovone::PathMagic::computePositionAtPos)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "computePositionAtPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::computeVelocityAtPos
// Il2CppName: computeVelocityAtPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Jacovone::PathMagic::*)(float)>(&Jacovone::PathMagic::computeVelocityAtPos)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "computeVelocityAtPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::UpdateTarget
// Il2CppName: UpdateTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Jacovone::PathMagic::UpdateTarget)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "UpdateTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::UpdateTarget
// Il2CppName: UpdateTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::UpdateTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "UpdateTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::GetCurrentWaypoint
// Il2CppName: GetCurrentWaypoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::GetCurrentWaypoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "GetCurrentWaypoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::GetWaypointFromPos
// Il2CppName: GetWaypointFromPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Jacovone::PathMagic::*)(float)>(&Jacovone::PathMagic::GetWaypointFromPos)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "GetWaypointFromPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::GetFaceForwardForPos
// Il2CppName: GetFaceForwardForPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Jacovone::PathMagic::*)(float)>(&Jacovone::PathMagic::GetFaceForwardForPos)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "GetFaceForwardForPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::UpdatePathSamples
// Il2CppName: UpdatePathSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::UpdatePathSamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "UpdatePathSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagic::*)()>(&Jacovone::PathMagic::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagic*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagic::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
