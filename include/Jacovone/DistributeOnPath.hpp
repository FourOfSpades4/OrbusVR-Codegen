// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: Jacovone
namespace Jacovone {
  // Forward declaring type: PathMagic
  class PathMagic;
}
// Completed forward declares
// Type namespace: Jacovone
namespace Jacovone {
  // Forward declaring type: DistributeOnPath
  class DistributeOnPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Jacovone::DistributeOnPath);
DEFINE_IL2CPP_ARG_TYPE(::Jacovone::DistributeOnPath*, "Jacovone", "DistributeOnPath");
// Type namespace: Jacovone
namespace Jacovone {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Jacovone.DistributeOnPath
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class DistributeOnPath : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject target
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Int32 count
    // Size: 0x4
    // Offset: 0x20
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single startingFrom
    // Size: 0x4
    // Offset: 0x24
    float startingFrom;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single endTo
    // Size: 0x4
    // Offset: 0x28
    float endTo;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: endTo and: path
    char __padding3[0x4] = {};
    // public Jacovone.PathMagic path
    // Size: 0x8
    // Offset: 0x30
    ::Jacovone::PathMagic* path;
    // Field size check
    static_assert(sizeof(::Jacovone::PathMagic*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject target
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_target();
    // Get instance field reference: public System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count();
    // Get instance field reference: public System.Single startingFrom
    [[deprecated("Use field access instead!")]] float& dyn_startingFrom();
    // Get instance field reference: public System.Single endTo
    [[deprecated("Use field access instead!")]] float& dyn_endTo();
    // Get instance field reference: public Jacovone.PathMagic path
    [[deprecated("Use field access instead!")]] ::Jacovone::PathMagic*& dyn_path();
    // private System.Void Awake()
    // Offset: 0x1059BD8
    void Awake();
    // public System.Void Generate()
    // Offset: 0x1059BDC
    void Generate();
    // public System.Void .ctor()
    // Offset: 0x105A62C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DistributeOnPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Jacovone::DistributeOnPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DistributeOnPath*, creationType>()));
    }
  }; // Jacovone.DistributeOnPath
  #pragma pack(pop)
  static check_size<sizeof(DistributeOnPath), 48 + sizeof(::Jacovone::PathMagic*)> __Jacovone_DistributeOnPathSizeCheck;
  static_assert(sizeof(DistributeOnPath) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Jacovone::DistributeOnPath::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::DistributeOnPath::*)()>(&Jacovone::DistributeOnPath::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::DistributeOnPath*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::DistributeOnPath::Generate
// Il2CppName: Generate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::DistributeOnPath::*)()>(&Jacovone::DistributeOnPath::Generate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::DistributeOnPath*), "Generate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::DistributeOnPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
