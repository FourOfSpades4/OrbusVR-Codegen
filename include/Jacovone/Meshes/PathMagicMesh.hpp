// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Mesh
  class Mesh;
}
// Forward declaring namespace: Jacovone
namespace Jacovone {
  // Forward declaring type: PathMagic
  class PathMagic;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Jacovone.Meshes
namespace Jacovone::Meshes {
  // Forward declaring type: PathMagicMesh
  class PathMagicMesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Jacovone::Meshes::PathMagicMesh);
DEFINE_IL2CPP_ARG_TYPE(::Jacovone::Meshes::PathMagicMesh*, "Jacovone.Meshes", "PathMagicMesh");
// Type namespace: Jacovone.Meshes
namespace Jacovone::Meshes {
  // Size: 0x79
  #pragma pack(push, 1)
  // Autogenerated type: Jacovone.Meshes.PathMagicMesh
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD15D4
  // [RequireComponent] Offset: AD15D4
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class PathMagicMesh : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.MeshFilter _mf
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::MeshFilter* mf;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // public UnityEngine.Mesh mesh
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Mesh* mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // public Jacovone.PathMagic path
    // Size: 0x8
    // Offset: 0x28
    ::Jacovone::PathMagic* path;
    // Field size check
    static_assert(sizeof(::Jacovone::PathMagic*) == 0x8);
    // public System.Single startingFrom
    // Size: 0x4
    // Offset: 0x30
    float startingFrom;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single endTo
    // Size: 0x4
    // Offset: 0x34
    float endTo;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 pieces
    // Size: 0x4
    // Offset: 0x38
    int pieces;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 sections
    // Size: 0x4
    // Offset: 0x3C
    int sections;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean flipped
    // Size: 0x1
    // Offset: 0x40
    bool flipped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: flipped and: vertices
    char __padding7[0x7] = {};
    // protected System.Collections.Generic.List`1<UnityEngine.Vector3> vertices
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* vertices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // protected System.Collections.Generic.List`1<System.Int32> triangles
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<int>* triangles;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // protected System.Collections.Generic.List`1<System.Int32> triangles2
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<int>* triangles2;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // protected System.Collections.Generic.List`1<System.Int32> triangles3
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<int>* triangles3;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // protected System.Collections.Generic.List`1<UnityEngine.Vector3> normals
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* normals;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // protected System.Collections.Generic.List`1<UnityEngine.Vector2> UVs
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* UVs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector2>*) == 0x8);
    // public System.Boolean autoUpdateMesh
    // Size: 0x1
    // Offset: 0x78
    bool autoUpdateMesh;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.MeshFilter _mf
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn__mf();
    // Get instance field reference: public UnityEngine.Mesh mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_mesh();
    // Get instance field reference: public Jacovone.PathMagic path
    [[deprecated("Use field access instead!")]] ::Jacovone::PathMagic*& dyn_path();
    // Get instance field reference: public System.Single startingFrom
    [[deprecated("Use field access instead!")]] float& dyn_startingFrom();
    // Get instance field reference: public System.Single endTo
    [[deprecated("Use field access instead!")]] float& dyn_endTo();
    // Get instance field reference: public System.Int32 pieces
    [[deprecated("Use field access instead!")]] int& dyn_pieces();
    // Get instance field reference: public System.Int32 sections
    [[deprecated("Use field access instead!")]] int& dyn_sections();
    // Get instance field reference: public System.Boolean flipped
    [[deprecated("Use field access instead!")]] bool& dyn_flipped();
    // Get instance field reference: protected System.Collections.Generic.List`1<UnityEngine.Vector3> vertices
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_vertices();
    // Get instance field reference: protected System.Collections.Generic.List`1<System.Int32> triangles
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_triangles();
    // Get instance field reference: protected System.Collections.Generic.List`1<System.Int32> triangles2
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_triangles2();
    // Get instance field reference: protected System.Collections.Generic.List`1<System.Int32> triangles3
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_triangles3();
    // Get instance field reference: protected System.Collections.Generic.List`1<UnityEngine.Vector3> normals
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_normals();
    // Get instance field reference: protected System.Collections.Generic.List`1<UnityEngine.Vector2> UVs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector2>*& dyn_UVs();
    // Get instance field reference: public System.Boolean autoUpdateMesh
    [[deprecated("Use field access instead!")]] bool& dyn_autoUpdateMesh();
    // public System.Void Generate()
    // Offset: 0x105AC18
    void Generate();
    // protected System.Void AddQuad1(System.Int32 a, System.Int32 b, System.Int32 c, System.Int32 d)
    // Offset: 0x105B4F0
    void AddQuad1(int a, int b, int c, int d);
    // protected System.Void AddQuad2(System.Int32 a, System.Int32 b, System.Int32 c, System.Int32 d)
    // Offset: 0x105B6CC
    void AddQuad2(int a, int b, int c, int d);
    // protected System.Void AddQuad3(System.Int32 a, System.Int32 b, System.Int32 c, System.Int32 d)
    // Offset: 0x105B8A8
    void AddQuad3(int a, int b, int c, int d);
    // protected System.Int32 GetNumberOfMaterials()
    // Offset: 0x105BA84
    int GetNumberOfMaterials();
    // protected System.Void InitializeMesh()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InitializeMesh();
    // protected System.Void FinalizeMesh()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void FinalizeMesh();
    // protected System.Void GenerateMeshPart(System.Int32 piece, UnityEngine.Vector3 position, UnityEngine.Vector3 direction, UnityEngine.Vector3 xd, UnityEngine.Vector3 yd)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void GenerateMeshPart(int piece, ::UnityEngine::Vector3 position, ::UnityEngine::Vector3 direction, ::UnityEngine::Vector3 xd, ::UnityEngine::Vector3 yd);
    // protected System.Void .ctor()
    // Offset: 0x105BA8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PathMagicMesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Jacovone::Meshes::PathMagicMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PathMagicMesh*, creationType>()));
    }
  }; // Jacovone.Meshes.PathMagicMesh
  #pragma pack(pop)
  static check_size<sizeof(PathMagicMesh), 120 + sizeof(bool)> __Jacovone_Meshes_PathMagicMeshSizeCheck;
  static_assert(sizeof(PathMagicMesh) == 0x79);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Jacovone::Meshes::PathMagicMesh::Generate
// Il2CppName: Generate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::Meshes::PathMagicMesh::*)()>(&Jacovone::Meshes::PathMagicMesh::Generate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::Meshes::PathMagicMesh*), "Generate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::Meshes::PathMagicMesh::AddQuad1
// Il2CppName: AddQuad1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::Meshes::PathMagicMesh::*)(int, int, int, int)>(&Jacovone::Meshes::PathMagicMesh::AddQuad1)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::Meshes::PathMagicMesh*), "AddQuad1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, d});
  }
};
// Writing MetadataGetter for method: Jacovone::Meshes::PathMagicMesh::AddQuad2
// Il2CppName: AddQuad2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::Meshes::PathMagicMesh::*)(int, int, int, int)>(&Jacovone::Meshes::PathMagicMesh::AddQuad2)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::Meshes::PathMagicMesh*), "AddQuad2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, d});
  }
};
// Writing MetadataGetter for method: Jacovone::Meshes::PathMagicMesh::AddQuad3
// Il2CppName: AddQuad3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::Meshes::PathMagicMesh::*)(int, int, int, int)>(&Jacovone::Meshes::PathMagicMesh::AddQuad3)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::Meshes::PathMagicMesh*), "AddQuad3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, d});
  }
};
// Writing MetadataGetter for method: Jacovone::Meshes::PathMagicMesh::GetNumberOfMaterials
// Il2CppName: GetNumberOfMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Jacovone::Meshes::PathMagicMesh::*)()>(&Jacovone::Meshes::PathMagicMesh::GetNumberOfMaterials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::Meshes::PathMagicMesh*), "GetNumberOfMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::Meshes::PathMagicMesh::InitializeMesh
// Il2CppName: InitializeMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::Meshes::PathMagicMesh::*)()>(&Jacovone::Meshes::PathMagicMesh::InitializeMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::Meshes::PathMagicMesh*), "InitializeMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::Meshes::PathMagicMesh::FinalizeMesh
// Il2CppName: FinalizeMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::Meshes::PathMagicMesh::*)()>(&Jacovone::Meshes::PathMagicMesh::FinalizeMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::Meshes::PathMagicMesh*), "FinalizeMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::Meshes::PathMagicMesh::GenerateMeshPart
// Il2CppName: GenerateMeshPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::Meshes::PathMagicMesh::*)(int, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Jacovone::Meshes::PathMagicMesh::GenerateMeshPart)> {
  static const MethodInfo* get() {
    static auto* piece = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* xd = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* yd = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::Meshes::PathMagicMesh*), "GenerateMeshPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piece, position, direction, xd, yd});
  }
};
// Writing MetadataGetter for method: Jacovone::Meshes::PathMagicMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
