// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Jacovone
namespace Jacovone {
  // Skipping declaration: UpdateModeType because it is already included!
  // Forward declaring type: PathMagic
  class PathMagic;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: Jacovone
namespace Jacovone {
  // Forward declaring type: PathMagicAnimator
  class PathMagicAnimator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Jacovone::PathMagicAnimator);
DEFINE_IL2CPP_ARG_TYPE(::Jacovone::PathMagicAnimator*, "Jacovone", "PathMagicAnimator");
// Type namespace: Jacovone
namespace Jacovone {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Jacovone.PathMagicAnimator
  // [TokenAttribute] Offset: FFFFFFFF
  class PathMagicAnimator : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Jacovone::PathMagicAnimator::WaypointChangedEvent
    class WaypointChangedEvent;
    // Nested type: ::Jacovone::PathMagicAnimator::UpdateModeType
    struct UpdateModeType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Jacovone.PathMagicAnimator/UpdateModeType
    // [TokenAttribute] Offset: FFFFFFFF
    struct UpdateModeType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UpdateModeType
      constexpr UpdateModeType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Jacovone.PathMagicAnimator/UpdateModeType OnUpdate
      static constexpr const int OnUpdate = 0;
      // Get static field: static public Jacovone.PathMagicAnimator/UpdateModeType OnUpdate
      static ::Jacovone::PathMagicAnimator::UpdateModeType _get_OnUpdate();
      // Set static field: static public Jacovone.PathMagicAnimator/UpdateModeType OnUpdate
      static void _set_OnUpdate(::Jacovone::PathMagicAnimator::UpdateModeType value);
      // static field const value: static public Jacovone.PathMagicAnimator/UpdateModeType OnFixedUpdate
      static constexpr const int OnFixedUpdate = 1;
      // Get static field: static public Jacovone.PathMagicAnimator/UpdateModeType OnFixedUpdate
      static ::Jacovone::PathMagicAnimator::UpdateModeType _get_OnFixedUpdate();
      // Set static field: static public Jacovone.PathMagicAnimator/UpdateModeType OnFixedUpdate
      static void _set_OnFixedUpdate(::Jacovone::PathMagicAnimator::UpdateModeType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Jacovone.PathMagicAnimator/UpdateModeType
    #pragma pack(pop)
    static check_size<sizeof(PathMagicAnimator::UpdateModeType), 0 + sizeof(int)> __Jacovone_PathMagicAnimator_UpdateModeTypeSizeCheck;
    static_assert(sizeof(PathMagicAnimator::UpdateModeType) == 0x4);
    public:
    // public Jacovone.PathMagic pathMagic
    // Size: 0x8
    // Offset: 0x18
    ::Jacovone::PathMagic* pathMagic;
    // Field size check
    static_assert(sizeof(::Jacovone::PathMagic*) == 0x8);
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public Jacovone.PathMagicAnimator/UpdateModeType updateMode
    // Size: 0x4
    // Offset: 0x28
    ::Jacovone::PathMagicAnimator::UpdateModeType updateMode;
    // Field size check
    static_assert(sizeof(::Jacovone::PathMagicAnimator::UpdateModeType) == 0x4);
    // public System.Boolean autoStart
    // Size: 0x1
    // Offset: 0x2C
    bool autoStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoStart and: velocityBias
    char __padding3[0x3] = {};
    // public System.Single velocityBias
    // Size: 0x4
    // Offset: 0x30
    float velocityBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single currentPos
    // Size: 0x4
    // Offset: 0x34
    float currentPos;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isPlaying
    // Size: 0x1
    // Offset: 0x38
    bool isPlaying;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isPlaying and: globalLookAt
    char __padding6[0x7] = {};
    // public UnityEngine.Transform globalLookAt
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* globalLookAt;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean disableOrientation
    // Size: 0x1
    // Offset: 0x48
    bool disableOrientation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean globalFollowPath
    // Size: 0x1
    // Offset: 0x49
    bool globalFollowPath;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: globalFollowPath and: waypointChanged
    char __padding9[0x6] = {};
    // public Jacovone.PathMagicAnimator/WaypointChangedEvent waypointChanged
    // Size: 0x8
    // Offset: 0x50
    ::Jacovone::PathMagicAnimator::WaypointChangedEvent* waypointChanged;
    // Field size check
    static_assert(sizeof(::Jacovone::PathMagicAnimator::WaypointChangedEvent*) == 0x8);
    // private System.Int32 _lastPassedWayponint
    // Size: 0x4
    // Offset: 0x58
    int lastPassedWayponint;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _lastVelocity
    // Size: 0x4
    // Offset: 0x5C
    float lastVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public Jacovone.PathMagic pathMagic
    [[deprecated("Use field access instead!")]] ::Jacovone::PathMagic*& dyn_pathMagic();
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // Get instance field reference: public Jacovone.PathMagicAnimator/UpdateModeType updateMode
    [[deprecated("Use field access instead!")]] ::Jacovone::PathMagicAnimator::UpdateModeType& dyn_updateMode();
    // Get instance field reference: public System.Boolean autoStart
    [[deprecated("Use field access instead!")]] bool& dyn_autoStart();
    // Get instance field reference: public System.Single velocityBias
    [[deprecated("Use field access instead!")]] float& dyn_velocityBias();
    // Get instance field reference: public System.Single currentPos
    [[deprecated("Use field access instead!")]] float& dyn_currentPos();
    // Get instance field reference: public System.Boolean isPlaying
    [[deprecated("Use field access instead!")]] bool& dyn_isPlaying();
    // Get instance field reference: public UnityEngine.Transform globalLookAt
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_globalLookAt();
    // Get instance field reference: public System.Boolean disableOrientation
    [[deprecated("Use field access instead!")]] bool& dyn_disableOrientation();
    // Get instance field reference: public System.Boolean globalFollowPath
    [[deprecated("Use field access instead!")]] bool& dyn_globalFollowPath();
    // Get instance field reference: public Jacovone.PathMagicAnimator/WaypointChangedEvent waypointChanged
    [[deprecated("Use field access instead!")]] ::Jacovone::PathMagicAnimator::WaypointChangedEvent*& dyn_waypointChanged();
    // Get instance field reference: private System.Int32 _lastPassedWayponint
    [[deprecated("Use field access instead!")]] int& dyn__lastPassedWayponint();
    // Get instance field reference: private System.Single _lastVelocity
    [[deprecated("Use field access instead!")]] float& dyn__lastVelocity();
    // private System.Void OnEnable()
    // Offset: 0x105FE28
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x105FE84
    void OnDisable();
    // public Jacovone.PathMagic get_PathMagic()
    // Offset: 0x105FE88
    ::Jacovone::PathMagic* get_PathMagic();
    // public System.Void set_PathMagic(Jacovone.PathMagic value)
    // Offset: 0x105FE90
    void set_PathMagic(::Jacovone::PathMagic* value);
    // public UnityEngine.Transform get_Target()
    // Offset: 0x105FE98
    ::UnityEngine::Transform* get_Target();
    // public Jacovone.PathMagicAnimator/UpdateModeType get_UpdateMode()
    // Offset: 0x105FEA0
    ::Jacovone::PathMagicAnimator::UpdateModeType get_UpdateMode();
    // public System.Void set_UpdateMode(Jacovone.PathMagicAnimator/UpdateModeType value)
    // Offset: 0x105FEA8
    void set_UpdateMode(::Jacovone::PathMagicAnimator::UpdateModeType value);
    // public System.Boolean get_AutoStart()
    // Offset: 0x105FEB0
    bool get_AutoStart();
    // public System.Void set_AutoStart(System.Boolean value)
    // Offset: 0x105FEB8
    void set_AutoStart(bool value);
    // public System.Single get_VelocityBias()
    // Offset: 0x105FEC4
    float get_VelocityBias();
    // public System.Void set_VelocityBias(System.Single value)
    // Offset: 0x105FECC
    void set_VelocityBias(float value);
    // public System.Single get_CurrentPos()
    // Offset: 0x1057B90
    float get_CurrentPos();
    // public System.Void set_CurrentPos(System.Single value)
    // Offset: 0x1057F64
    void set_CurrentPos(float value);
    // public System.Boolean get_IsPlaying()
    // Offset: 0x105FED4
    bool get_IsPlaying();
    // public UnityEngine.Transform get_GlobalLookAt()
    // Offset: 0x105FEDC
    ::UnityEngine::Transform* get_GlobalLookAt();
    // public System.Void set_GlobalLookAt(UnityEngine.Transform value)
    // Offset: 0x105FEE4
    void set_GlobalLookAt(::UnityEngine::Transform* value);
    // public System.Boolean get_DisableOrientation()
    // Offset: 0x105FEEC
    bool get_DisableOrientation();
    // public System.Void set_DisableOrientation(System.Boolean value)
    // Offset: 0x105FEF4
    void set_DisableOrientation(bool value);
    // public Jacovone.PathMagicAnimator/WaypointChangedEvent get_WaypointChanged()
    // Offset: 0x105FF00
    ::Jacovone::PathMagicAnimator::WaypointChangedEvent* get_WaypointChanged();
    // public System.Void set_WaypointChanged(Jacovone.PathMagicAnimator/WaypointChangedEvent value)
    // Offset: 0x105FF08
    void set_WaypointChanged(::Jacovone::PathMagicAnimator::WaypointChangedEvent* value);
    // public System.Int32 get_LastPassedWayponint()
    // Offset: 0x105FF10
    int get_LastPassedWayponint();
    // private System.Void Start()
    // Offset: 0x105FF18
    void Start();
    // private System.Void Update()
    // Offset: 0x105FF50
    void Update();
    // private System.Void FixedUpdate()
    // Offset: 0x1060118
    void FixedUpdate();
    // public System.Void DoUpdate()
    // Offset: 0x105FF90
    void DoUpdate();
    // public System.Void Play()
    // Offset: 0x1060174
    void Play();
    // public System.Void Pause()
    // Offset: 0x106012C
    void Pause();
    // public System.Void Rewind()
    // Offset: 0x1060210
    void Rewind();
    // public System.Void Stop()
    // Offset: 0x1060258
    void Stop();
    // public System.Void UpdateTarget(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    // Offset: 0x1060340
    void UpdateTarget(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation);
    // public System.Void UpdateTarget()
    // Offset: 0x1057F6C
    void UpdateTarget();
    // public System.Void .ctor()
    // Offset: 0x1060554
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PathMagicAnimator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Jacovone::PathMagicAnimator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PathMagicAnimator*, creationType>()));
    }
  }; // Jacovone.PathMagicAnimator
  #pragma pack(pop)
  static check_size<sizeof(PathMagicAnimator), 92 + sizeof(float)> __Jacovone_PathMagicAnimatorSizeCheck;
  static_assert(sizeof(PathMagicAnimator) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Jacovone::PathMagicAnimator::UpdateModeType, "Jacovone", "PathMagicAnimator/UpdateModeType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::get_PathMagic
// Il2CppName: get_PathMagic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Jacovone::PathMagic* (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::get_PathMagic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "get_PathMagic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::set_PathMagic
// Il2CppName: set_PathMagic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)(::Jacovone::PathMagic*)>(&Jacovone::PathMagicAnimator::set_PathMagic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Jacovone", "PathMagic")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "set_PathMagic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::get_Target
// Il2CppName: get_Target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::get_Target)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "get_Target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::get_UpdateMode
// Il2CppName: get_UpdateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Jacovone::PathMagicAnimator::UpdateModeType (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::get_UpdateMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "get_UpdateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::set_UpdateMode
// Il2CppName: set_UpdateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)(::Jacovone::PathMagicAnimator::UpdateModeType)>(&Jacovone::PathMagicAnimator::set_UpdateMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Jacovone", "PathMagicAnimator/UpdateModeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "set_UpdateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::get_AutoStart
// Il2CppName: get_AutoStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::get_AutoStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "get_AutoStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::set_AutoStart
// Il2CppName: set_AutoStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)(bool)>(&Jacovone::PathMagicAnimator::set_AutoStart)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "set_AutoStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::get_VelocityBias
// Il2CppName: get_VelocityBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::get_VelocityBias)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "get_VelocityBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::set_VelocityBias
// Il2CppName: set_VelocityBias
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)(float)>(&Jacovone::PathMagicAnimator::set_VelocityBias)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "set_VelocityBias", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::get_CurrentPos
// Il2CppName: get_CurrentPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::get_CurrentPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "get_CurrentPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::set_CurrentPos
// Il2CppName: set_CurrentPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)(float)>(&Jacovone::PathMagicAnimator::set_CurrentPos)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "set_CurrentPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::get_IsPlaying
// Il2CppName: get_IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::get_IsPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "get_IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::get_GlobalLookAt
// Il2CppName: get_GlobalLookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::get_GlobalLookAt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "get_GlobalLookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::set_GlobalLookAt
// Il2CppName: set_GlobalLookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)(::UnityEngine::Transform*)>(&Jacovone::PathMagicAnimator::set_GlobalLookAt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "set_GlobalLookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::get_DisableOrientation
// Il2CppName: get_DisableOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::get_DisableOrientation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "get_DisableOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::set_DisableOrientation
// Il2CppName: set_DisableOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)(bool)>(&Jacovone::PathMagicAnimator::set_DisableOrientation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "set_DisableOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::get_WaypointChanged
// Il2CppName: get_WaypointChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Jacovone::PathMagicAnimator::WaypointChangedEvent* (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::get_WaypointChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "get_WaypointChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::set_WaypointChanged
// Il2CppName: set_WaypointChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)(::Jacovone::PathMagicAnimator::WaypointChangedEvent*)>(&Jacovone::PathMagicAnimator::set_WaypointChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Jacovone", "PathMagicAnimator/WaypointChangedEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "set_WaypointChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::get_LastPassedWayponint
// Il2CppName: get_LastPassedWayponint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::get_LastPassedWayponint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "get_LastPassedWayponint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::DoUpdate
// Il2CppName: DoUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::DoUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "DoUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::Play)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::Pause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::Rewind
// Il2CppName: Rewind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::Rewind)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "Rewind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::UpdateTarget
// Il2CppName: UpdateTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Jacovone::PathMagicAnimator::UpdateTarget)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "UpdateTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::UpdateTarget
// Il2CppName: UpdateTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Jacovone::PathMagicAnimator::*)()>(&Jacovone::PathMagicAnimator::UpdateTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Jacovone::PathMagicAnimator*), "UpdateTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Jacovone::PathMagicAnimator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
