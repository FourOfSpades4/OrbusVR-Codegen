// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: vx_tts_status
  struct vx_tts_status;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::vx_tts_status, "", "vx_tts_status");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: vx_tts_status
  // [TokenAttribute] Offset: FFFFFFFF
  struct vx_tts_status/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: vx_tts_status
    constexpr vx_tts_status(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public vx_tts_status tts_status_success
    static constexpr const int tts_status_success = 0;
    // Get static field: static public vx_tts_status tts_status_success
    static ::GlobalNamespace::vx_tts_status _get_tts_status_success();
    // Set static field: static public vx_tts_status tts_status_success
    static void _set_tts_status_success(::GlobalNamespace::vx_tts_status value);
    // static field const value: static public vx_tts_status tts_error_invalid_engine_type
    static constexpr const int tts_error_invalid_engine_type = -1001;
    // Get static field: static public vx_tts_status tts_error_invalid_engine_type
    static ::GlobalNamespace::vx_tts_status _get_tts_error_invalid_engine_type();
    // Set static field: static public vx_tts_status tts_error_invalid_engine_type
    static void _set_tts_error_invalid_engine_type(::GlobalNamespace::vx_tts_status value);
    // static field const value: static public vx_tts_status tts_error_engine_allocation_failed
    static constexpr const int tts_error_engine_allocation_failed = -1002;
    // Get static field: static public vx_tts_status tts_error_engine_allocation_failed
    static ::GlobalNamespace::vx_tts_status _get_tts_error_engine_allocation_failed();
    // Set static field: static public vx_tts_status tts_error_engine_allocation_failed
    static void _set_tts_error_engine_allocation_failed(::GlobalNamespace::vx_tts_status value);
    // static field const value: static public vx_tts_status tts_error_not_supported
    static constexpr const int tts_error_not_supported = -1003;
    // Get static field: static public vx_tts_status tts_error_not_supported
    static ::GlobalNamespace::vx_tts_status _get_tts_error_not_supported();
    // Set static field: static public vx_tts_status tts_error_not_supported
    static void _set_tts_error_not_supported(::GlobalNamespace::vx_tts_status value);
    // static field const value: static public vx_tts_status tts_error_max_characters_exceeded
    static constexpr const int tts_error_max_characters_exceeded = -1004;
    // Get static field: static public vx_tts_status tts_error_max_characters_exceeded
    static ::GlobalNamespace::vx_tts_status _get_tts_error_max_characters_exceeded();
    // Set static field: static public vx_tts_status tts_error_max_characters_exceeded
    static void _set_tts_error_max_characters_exceeded(::GlobalNamespace::vx_tts_status value);
    // static field const value: static public vx_tts_status tts_error_utterance_below_min_duration
    static constexpr const int tts_error_utterance_below_min_duration = -1005;
    // Get static field: static public vx_tts_status tts_error_utterance_below_min_duration
    static ::GlobalNamespace::vx_tts_status _get_tts_error_utterance_below_min_duration();
    // Set static field: static public vx_tts_status tts_error_utterance_below_min_duration
    static void _set_tts_error_utterance_below_min_duration(::GlobalNamespace::vx_tts_status value);
    // static field const value: static public vx_tts_status tts_status_input_text_was_enqueued
    static constexpr const int tts_status_input_text_was_enqueued = -1006;
    // Get static field: static public vx_tts_status tts_status_input_text_was_enqueued
    static ::GlobalNamespace::vx_tts_status _get_tts_status_input_text_was_enqueued();
    // Set static field: static public vx_tts_status tts_status_input_text_was_enqueued
    static void _set_tts_status_input_text_was_enqueued(::GlobalNamespace::vx_tts_status value);
    // static field const value: static public vx_tts_status tts_error_sdk_not_initialized
    static constexpr const int tts_error_sdk_not_initialized = -1007;
    // Get static field: static public vx_tts_status tts_error_sdk_not_initialized
    static ::GlobalNamespace::vx_tts_status _get_tts_error_sdk_not_initialized();
    // Set static field: static public vx_tts_status tts_error_sdk_not_initialized
    static void _set_tts_error_sdk_not_initialized(::GlobalNamespace::vx_tts_status value);
    // static field const value: static public vx_tts_status tts_error_destination_queue_is_full
    static constexpr const int tts_error_destination_queue_is_full = -1008;
    // Get static field: static public vx_tts_status tts_error_destination_queue_is_full
    static ::GlobalNamespace::vx_tts_status _get_tts_error_destination_queue_is_full();
    // Set static field: static public vx_tts_status tts_error_destination_queue_is_full
    static void _set_tts_error_destination_queue_is_full(::GlobalNamespace::vx_tts_status value);
    // static field const value: static public vx_tts_status tts_status_enqueue_not_necessary
    static constexpr const int tts_status_enqueue_not_necessary = -1009;
    // Get static field: static public vx_tts_status tts_status_enqueue_not_necessary
    static ::GlobalNamespace::vx_tts_status _get_tts_status_enqueue_not_necessary();
    // Set static field: static public vx_tts_status tts_status_enqueue_not_necessary
    static void _set_tts_status_enqueue_not_necessary(::GlobalNamespace::vx_tts_status value);
    // static field const value: static public vx_tts_status tts_error_utterance_not_found
    static constexpr const int tts_error_utterance_not_found = -1010;
    // Get static field: static public vx_tts_status tts_error_utterance_not_found
    static ::GlobalNamespace::vx_tts_status _get_tts_error_utterance_not_found();
    // Set static field: static public vx_tts_status tts_error_utterance_not_found
    static void _set_tts_error_utterance_not_found(::GlobalNamespace::vx_tts_status value);
    // static field const value: static public vx_tts_status tts_error_manager_not_found
    static constexpr const int tts_error_manager_not_found = -1011;
    // Get static field: static public vx_tts_status tts_error_manager_not_found
    static ::GlobalNamespace::vx_tts_status _get_tts_error_manager_not_found();
    // Set static field: static public vx_tts_status tts_error_manager_not_found
    static void _set_tts_error_manager_not_found(::GlobalNamespace::vx_tts_status value);
    // static field const value: static public vx_tts_status tts_error_invalid_argument
    static constexpr const int tts_error_invalid_argument = -1012;
    // Get static field: static public vx_tts_status tts_error_invalid_argument
    static ::GlobalNamespace::vx_tts_status _get_tts_error_invalid_argument();
    // Set static field: static public vx_tts_status tts_error_invalid_argument
    static void _set_tts_error_invalid_argument(::GlobalNamespace::vx_tts_status value);
    // static field const value: static public vx_tts_status tts_error_internal
    static constexpr const int tts_error_internal = -1013;
    // Get static field: static public vx_tts_status tts_error_internal
    static ::GlobalNamespace::vx_tts_status _get_tts_error_internal();
    // Set static field: static public vx_tts_status tts_error_internal
    static void _set_tts_error_internal(::GlobalNamespace::vx_tts_status value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // vx_tts_status
  #pragma pack(pop)
  static check_size<sizeof(vx_tts_status), 0 + sizeof(int)> __GlobalNamespace_vx_tts_statusSizeCheck;
  static_assert(sizeof(vx_tts_status) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
