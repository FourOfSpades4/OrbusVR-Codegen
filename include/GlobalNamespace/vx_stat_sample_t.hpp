// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Runtime.InteropServices.HandleRef
#include "System/Runtime/InteropServices/HandleRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: vx_stat_sample_t
  class vx_stat_sample_t;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::vx_stat_sample_t);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::vx_stat_sample_t*, "", "vx_stat_sample_t");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: vx_stat_sample_t
  // [TokenAttribute] Offset: FFFFFFFF
  class vx_stat_sample_t : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Runtime.InteropServices.HandleRef swigCPtr
    // Size: 0x10
    // Offset: 0x10
    ::System::Runtime::InteropServices::HandleRef swigCPtr;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::HandleRef) == 0x10);
    // protected System.Boolean swigCMemOwn
    // Size: 0x1
    // Offset: 0x20
    bool swigCMemOwn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Runtime.InteropServices.HandleRef swigCPtr
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& dyn_swigCPtr();
    // Get instance field reference: protected System.Boolean swigCMemOwn
    [[deprecated("Use field access instead!")]] bool& dyn_swigCMemOwn();
    // System.Void .ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    // Offset: 0x281B68C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static vx_stat_sample_t* New_ctor(::System::IntPtr cPtr, bool cMemoryOwn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_stat_sample_t::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<vx_stat_sample_t*, creationType>(cPtr, cMemoryOwn)));
    }
    // static System.Runtime.InteropServices.HandleRef getCPtr(vx_stat_sample_t obj)
    // Offset: 0x281B6F0
    static ::System::Runtime::InteropServices::HandleRef getCPtr(::GlobalNamespace::vx_stat_sample_t* obj);
    // public System.Void Dispose()
    // Offset: 0x281B7E0
    void Dispose();
    // public System.Void set_sample_count(System.Double value)
    // Offset: 0x281B950
    void set_sample_count(double value);
    // public System.Double get_sample_count()
    // Offset: 0x281B9D0
    double get_sample_count();
    // public System.Void set_sum(System.Double value)
    // Offset: 0x281BA40
    void set_sum(double value);
    // public System.Double get_sum()
    // Offset: 0x281BAC0
    double get_sum();
    // public System.Void set_sum_of_squares(System.Double value)
    // Offset: 0x281BB30
    void set_sum_of_squares(double value);
    // public System.Double get_sum_of_squares()
    // Offset: 0x281BBB0
    double get_sum_of_squares();
    // public System.Void set_mean(System.Double value)
    // Offset: 0x281BC20
    void set_mean(double value);
    // public System.Double get_mean()
    // Offset: 0x281BCA0
    double get_mean();
    // public System.Void set_stddev(System.Double value)
    // Offset: 0x281BD10
    void set_stddev(double value);
    // public System.Double get_stddev()
    // Offset: 0x281BD90
    double get_stddev();
    // public System.Void set_min(System.Double value)
    // Offset: 0x281BE00
    void set_min(double value);
    // public System.Double get_min()
    // Offset: 0x281BE80
    double get_min();
    // public System.Void set_max(System.Double value)
    // Offset: 0x281BEF0
    void set_max(double value);
    // public System.Double get_max()
    // Offset: 0x281BF70
    double get_max();
    // public System.Void set_last(System.Double value)
    // Offset: 0x281BFE0
    void set_last(double value);
    // public System.Double get_last()
    // Offset: 0x281C060
    double get_last();
    // public System.Void .ctor()
    // Offset: 0x281C0D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static vx_stat_sample_t* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_stat_sample_t::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<vx_stat_sample_t*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x281B764
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // vx_stat_sample_t
  #pragma pack(pop)
  static check_size<sizeof(vx_stat_sample_t), 32 + sizeof(bool)> __GlobalNamespace_vx_stat_sample_tSizeCheck;
  static_assert(sizeof(vx_stat_sample_t) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::getCPtr
// Il2CppName: getCPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::InteropServices::HandleRef (*)(::GlobalNamespace::vx_stat_sample_t*)>(&GlobalNamespace::vx_stat_sample_t::getCPtr)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("", "vx_stat_sample_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "getCPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_stat_sample_t::*)()>(&GlobalNamespace::vx_stat_sample_t::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::set_sample_count
// Il2CppName: set_sample_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_stat_sample_t::*)(double)>(&GlobalNamespace::vx_stat_sample_t::set_sample_count)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "set_sample_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::get_sample_count
// Il2CppName: get_sample_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (GlobalNamespace::vx_stat_sample_t::*)()>(&GlobalNamespace::vx_stat_sample_t::get_sample_count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "get_sample_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::set_sum
// Il2CppName: set_sum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_stat_sample_t::*)(double)>(&GlobalNamespace::vx_stat_sample_t::set_sum)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "set_sum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::get_sum
// Il2CppName: get_sum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (GlobalNamespace::vx_stat_sample_t::*)()>(&GlobalNamespace::vx_stat_sample_t::get_sum)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "get_sum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::set_sum_of_squares
// Il2CppName: set_sum_of_squares
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_stat_sample_t::*)(double)>(&GlobalNamespace::vx_stat_sample_t::set_sum_of_squares)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "set_sum_of_squares", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::get_sum_of_squares
// Il2CppName: get_sum_of_squares
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (GlobalNamespace::vx_stat_sample_t::*)()>(&GlobalNamespace::vx_stat_sample_t::get_sum_of_squares)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "get_sum_of_squares", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::set_mean
// Il2CppName: set_mean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_stat_sample_t::*)(double)>(&GlobalNamespace::vx_stat_sample_t::set_mean)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "set_mean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::get_mean
// Il2CppName: get_mean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (GlobalNamespace::vx_stat_sample_t::*)()>(&GlobalNamespace::vx_stat_sample_t::get_mean)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "get_mean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::set_stddev
// Il2CppName: set_stddev
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_stat_sample_t::*)(double)>(&GlobalNamespace::vx_stat_sample_t::set_stddev)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "set_stddev", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::get_stddev
// Il2CppName: get_stddev
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (GlobalNamespace::vx_stat_sample_t::*)()>(&GlobalNamespace::vx_stat_sample_t::get_stddev)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "get_stddev", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::set_min
// Il2CppName: set_min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_stat_sample_t::*)(double)>(&GlobalNamespace::vx_stat_sample_t::set_min)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "set_min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::get_min
// Il2CppName: get_min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (GlobalNamespace::vx_stat_sample_t::*)()>(&GlobalNamespace::vx_stat_sample_t::get_min)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "get_min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::set_max
// Il2CppName: set_max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_stat_sample_t::*)(double)>(&GlobalNamespace::vx_stat_sample_t::set_max)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "set_max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::get_max
// Il2CppName: get_max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (GlobalNamespace::vx_stat_sample_t::*)()>(&GlobalNamespace::vx_stat_sample_t::get_max)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "get_max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::set_last
// Il2CppName: set_last
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_stat_sample_t::*)(double)>(&GlobalNamespace::vx_stat_sample_t::set_last)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "set_last", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::get_last
// Il2CppName: get_last
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (GlobalNamespace::vx_stat_sample_t::*)()>(&GlobalNamespace::vx_stat_sample_t::get_last)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "get_last", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::vx_stat_sample_t::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_stat_sample_t::*)()>(&GlobalNamespace::vx_stat_sample_t::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_stat_sample_t*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
