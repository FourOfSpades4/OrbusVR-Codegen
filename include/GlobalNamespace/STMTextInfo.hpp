// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.CharacterInfo
#include "UnityEngine/CharacterInfo.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: SuperTextMesh/Alignment
#include "GlobalNamespace/SuperTextMesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: STMDrawAnimData
  class STMDrawAnimData;
  // Forward declaring type: STMColorData
  class STMColorData;
  // Forward declaring type: STMGradientData
  class STMGradientData;
  // Forward declaring type: STMTextureData
  class STMTextureData;
  // Forward declaring type: STMDelayData
  class STMDelayData;
  // Forward declaring type: STMWaveData
  class STMWaveData;
  // Forward declaring type: STMJitterData
  class STMJitterData;
  // Forward declaring type: STMAudioClipData
  class STMAudioClipData;
  // Forward declaring type: STMFontData
  class STMFontData;
  // Forward declaring type: STMQuadData
  class STMQuadData;
  // Forward declaring type: STMMaterialData
  class STMMaterialData;
  // Forward declaring type: STMSoundClipData
  class STMSoundClipData;
  // Skipping declaration: SuperTextMesh because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: STMTextInfo
  class STMTextInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::STMTextInfo);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::STMTextInfo*, "", "STMTextInfo");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x194
  #pragma pack(push, 1)
  // Autogenerated type: STMTextInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class STMTextInfo : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.CharacterInfo ch
    // Size: 0x31
    // Offset: 0x10
    ::UnityEngine::CharacterInfo ch;
    // Field size check
    static_assert(sizeof(::UnityEngine::CharacterInfo) == 0x31);
    // Padding between fields: ch and: pos
    char __padding0[0x3] = {};
    // public UnityEngine.Vector3 pos
    // Size: 0xC
    // Offset: 0x44
    ::UnityEngine::Vector3 pos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single readTime
    // Size: 0x4
    // Offset: 0x50
    float readTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single unreadTime
    // Size: 0x4
    // Offset: 0x54
    float unreadTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 line
    // Size: 0x4
    // Offset: 0x58
    int line;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 rawIndex
    // Size: 0x4
    // Offset: 0x5C
    int rawIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single indent
    // Size: 0x4
    // Offset: 0x60
    float indent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: indent and: drawAnimData
    char __padding6[0x4] = {};
    // public STMDrawAnimData drawAnimData
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::STMDrawAnimData* drawAnimData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMDrawAnimData*) == 0x8);
    // public System.Single size
    // Size: 0x4
    // Offset: 0x70
    float size;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public SuperTextMesh/Alignment alignment
    // Size: 0x4
    // Offset: 0x74
    ::GlobalNamespace::SuperTextMesh::Alignment alignment;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::Alignment) == 0x4);
    // public SuperTextMesh/DrawOrder drawOrder
    // Size: 0x4
    // Offset: 0x78
    ::GlobalNamespace::SuperTextMesh::DrawOrder drawOrder;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::DrawOrder) == 0x4);
    // Padding between fields: drawOrder and: ev
    char __padding10[0x4] = {};
    // public System.Collections.Generic.List`1<System.String> ev
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::StringW>* ev;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Collections.Generic.List`1<System.String> ev2
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::List_1<::StringW>* ev2;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public STMColorData colorData
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::STMColorData* colorData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMColorData*) == 0x8);
    // public STMGradientData gradientData
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::STMGradientData* gradientData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMGradientData*) == 0x8);
    // public STMTextureData textureData
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::STMTextureData* textureData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMTextureData*) == 0x8);
    // public STMDelayData delayData
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::STMDelayData* delayData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMDelayData*) == 0x8);
    // public STMWaveData waveData
    // Size: 0x8
    // Offset: 0xB0
    ::GlobalNamespace::STMWaveData* waveData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMWaveData*) == 0x8);
    // public STMJitterData jitterData
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::STMJitterData* jitterData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMJitterData*) == 0x8);
    // public System.Single readDelay
    // Size: 0x4
    // Offset: 0xC0
    float readDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: readDelay and: audioClipData
    char __padding19[0x4] = {};
    // public STMAudioClipData audioClipData
    // Size: 0x8
    // Offset: 0xC8
    ::GlobalNamespace::STMAudioClipData* audioClipData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMAudioClipData*) == 0x8);
    // public System.Boolean stopPreviousSound
    // Size: 0x1
    // Offset: 0xD0
    bool stopPreviousSound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: stopPreviousSound and: pitchMode
    char __padding21[0x3] = {};
    // public SuperTextMesh/PitchMode pitchMode
    // Size: 0x4
    // Offset: 0xD4
    ::GlobalNamespace::SuperTextMesh::PitchMode pitchMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::PitchMode) == 0x4);
    // public System.Single overridePitch
    // Size: 0x4
    // Offset: 0xD8
    float overridePitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minPitch
    // Size: 0x4
    // Offset: 0xDC
    float minPitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxPitch
    // Size: 0x4
    // Offset: 0xE0
    float maxPitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single speedReadPitch
    // Size: 0x4
    // Offset: 0xE4
    float speedReadPitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public STMFontData fontData
    // Size: 0x8
    // Offset: 0xE8
    ::GlobalNamespace::STMFontData* fontData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMFontData*) == 0x8);
    // public STMQuadData quadData
    // Size: 0x8
    // Offset: 0xF0
    ::GlobalNamespace::STMQuadData* quadData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMQuadData*) == 0x8);
    // public System.Boolean isQuad
    // Size: 0x1
    // Offset: 0xF8
    bool isQuad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isQuad and: quadIndex
    char __padding29[0x3] = {};
    // public System.Int32 quadIndex
    // Size: 0x4
    // Offset: 0xFC
    int quadIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public STMMaterialData materialData
    // Size: 0x8
    // Offset: 0x100
    ::GlobalNamespace::STMMaterialData* materialData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMMaterialData*) == 0x8);
    // public STMSoundClipData soundClipData
    // Size: 0x8
    // Offset: 0x108
    ::GlobalNamespace::STMSoundClipData* soundClipData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMSoundClipData*) == 0x8);
    // public System.Int32 IdxIdentifier
    // Size: 0x4
    // Offset: 0x110
    int IdxIdentifier;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean InfoInUse
    // Size: 0x1
    // Offset: 0x114
    bool InfoInUse;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: InfoInUse and: chGlyphIndex
    char __padding34[0x3] = {};
    // private System.Int32 chGlyphIndex
    // Size: 0x4
    // Offset: 0x118
    int chGlyphIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 chMinX
    // Size: 0x4
    // Offset: 0x11C
    int chMinX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 chMaxX
    // Size: 0x4
    // Offset: 0x120
    int chMaxX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 chMinY
    // Size: 0x4
    // Offset: 0x124
    int chMinY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 chMaxY
    // Size: 0x4
    // Offset: 0x128
    int chMaxY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 chSize
    // Size: 0x4
    // Offset: 0x12C
    int chSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 _topLeftVert
    // Size: 0xC
    // Offset: 0x130
    ::UnityEngine::Vector3 topLeftVert;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _topRightVert
    // Size: 0xC
    // Offset: 0x13C
    ::UnityEngine::Vector3 topRightVert;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _bottomRightVert
    // Size: 0xC
    // Offset: 0x148
    ::UnityEngine::Vector3 bottomRightVert;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _bottomLeftVert
    // Size: 0xC
    // Offset: 0x154
    ::UnityEngine::Vector3 bottomLeftVert;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _middle
    // Size: 0xC
    // Offset: 0x160
    ::UnityEngine::Vector3 middle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 RelativePos_ReturnVal
    // Size: 0xC
    // Offset: 0x16C
    ::UnityEngine::Vector3 RelativePos_ReturnVal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single RelativePos_Multiplier
    // Size: 0x4
    // Offset: 0x178
    float RelativePos_Multiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 RelativePos2_ReturnVal
    // Size: 0xC
    // Offset: 0x17C
    ::UnityEngine::Vector3 RelativePos2_ReturnVal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 Advance_ReturnVal
    // Size: 0xC
    // Offset: 0x188
    ::UnityEngine::Vector3 Advance_ReturnVal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public UnityEngine.CharacterInfo ch
    [[deprecated("Use field access instead!")]] ::UnityEngine::CharacterInfo& dyn_ch();
    // Get instance field reference: public UnityEngine.Vector3 pos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_pos();
    // Get instance field reference: public System.Single readTime
    [[deprecated("Use field access instead!")]] float& dyn_readTime();
    // Get instance field reference: public System.Single unreadTime
    [[deprecated("Use field access instead!")]] float& dyn_unreadTime();
    // Get instance field reference: public System.Int32 line
    [[deprecated("Use field access instead!")]] int& dyn_line();
    // Get instance field reference: public System.Int32 rawIndex
    [[deprecated("Use field access instead!")]] int& dyn_rawIndex();
    // Get instance field reference: public System.Single indent
    [[deprecated("Use field access instead!")]] float& dyn_indent();
    // Get instance field reference: public STMDrawAnimData drawAnimData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMDrawAnimData*& dyn_drawAnimData();
    // Get instance field reference: public System.Single size
    [[deprecated("Use field access instead!")]] float& dyn_size();
    // Get instance field reference: public SuperTextMesh/Alignment alignment
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::Alignment& dyn_alignment();
    // Get instance field reference: public SuperTextMesh/DrawOrder drawOrder
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::DrawOrder& dyn_drawOrder();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> ev
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_ev();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> ev2
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_ev2();
    // Get instance field reference: public STMColorData colorData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMColorData*& dyn_colorData();
    // Get instance field reference: public STMGradientData gradientData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMGradientData*& dyn_gradientData();
    // Get instance field reference: public STMTextureData textureData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMTextureData*& dyn_textureData();
    // Get instance field reference: public STMDelayData delayData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMDelayData*& dyn_delayData();
    // Get instance field reference: public STMWaveData waveData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMWaveData*& dyn_waveData();
    // Get instance field reference: public STMJitterData jitterData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMJitterData*& dyn_jitterData();
    // Get instance field reference: public System.Single readDelay
    [[deprecated("Use field access instead!")]] float& dyn_readDelay();
    // Get instance field reference: public STMAudioClipData audioClipData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMAudioClipData*& dyn_audioClipData();
    // Get instance field reference: public System.Boolean stopPreviousSound
    [[deprecated("Use field access instead!")]] bool& dyn_stopPreviousSound();
    // Get instance field reference: public SuperTextMesh/PitchMode pitchMode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::PitchMode& dyn_pitchMode();
    // Get instance field reference: public System.Single overridePitch
    [[deprecated("Use field access instead!")]] float& dyn_overridePitch();
    // Get instance field reference: public System.Single minPitch
    [[deprecated("Use field access instead!")]] float& dyn_minPitch();
    // Get instance field reference: public System.Single maxPitch
    [[deprecated("Use field access instead!")]] float& dyn_maxPitch();
    // Get instance field reference: public System.Single speedReadPitch
    [[deprecated("Use field access instead!")]] float& dyn_speedReadPitch();
    // Get instance field reference: public STMFontData fontData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMFontData*& dyn_fontData();
    // Get instance field reference: public STMQuadData quadData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMQuadData*& dyn_quadData();
    // Get instance field reference: public System.Boolean isQuad
    [[deprecated("Use field access instead!")]] bool& dyn_isQuad();
    // Get instance field reference: public System.Int32 quadIndex
    [[deprecated("Use field access instead!")]] int& dyn_quadIndex();
    // Get instance field reference: public STMMaterialData materialData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMMaterialData*& dyn_materialData();
    // Get instance field reference: public STMSoundClipData soundClipData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMSoundClipData*& dyn_soundClipData();
    // Get instance field reference: public System.Int32 IdxIdentifier
    [[deprecated("Use field access instead!")]] int& dyn_IdxIdentifier();
    // Get instance field reference: public System.Boolean InfoInUse
    [[deprecated("Use field access instead!")]] bool& dyn_InfoInUse();
    // Get instance field reference: private System.Int32 chGlyphIndex
    [[deprecated("Use field access instead!")]] int& dyn_chGlyphIndex();
    // Get instance field reference: private System.Int32 chMinX
    [[deprecated("Use field access instead!")]] int& dyn_chMinX();
    // Get instance field reference: private System.Int32 chMaxX
    [[deprecated("Use field access instead!")]] int& dyn_chMaxX();
    // Get instance field reference: private System.Int32 chMinY
    [[deprecated("Use field access instead!")]] int& dyn_chMinY();
    // Get instance field reference: private System.Int32 chMaxY
    [[deprecated("Use field access instead!")]] int& dyn_chMaxY();
    // Get instance field reference: private System.Int32 chSize
    [[deprecated("Use field access instead!")]] int& dyn_chSize();
    // Get instance field reference: private UnityEngine.Vector3 _topLeftVert
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__topLeftVert();
    // Get instance field reference: private UnityEngine.Vector3 _topRightVert
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__topRightVert();
    // Get instance field reference: private UnityEngine.Vector3 _bottomRightVert
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__bottomRightVert();
    // Get instance field reference: private UnityEngine.Vector3 _bottomLeftVert
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__bottomLeftVert();
    // Get instance field reference: private UnityEngine.Vector3 _middle
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__middle();
    // Get instance field reference: private UnityEngine.Vector3 RelativePos_ReturnVal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_RelativePos_ReturnVal();
    // Get instance field reference: private System.Single RelativePos_Multiplier
    [[deprecated("Use field access instead!")]] float& dyn_RelativePos_Multiplier();
    // Get instance field reference: private UnityEngine.Vector3 RelativePos2_ReturnVal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_RelativePos2_ReturnVal();
    // Get instance field reference: private UnityEngine.Vector3 Advance_ReturnVal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Advance_ReturnVal();
    // public System.Void UpdateCachedValuesIfChanged()
    // Offset: 0xE302F4
    void UpdateCachedValuesIfChanged();
    // public System.Char get_character()
    // Offset: 0xE30378
    ::Il2CppChar get_character();
    // public UnityEngine.Vector2 get_ratio()
    // Offset: 0xE303E4
    ::UnityEngine::Vector2 get_ratio();
    // public UnityEngine.Vector3 get_TopLeftVert()
    // Offset: 0xE30514
    ::UnityEngine::Vector3 get_TopLeftVert();
    // public UnityEngine.Vector3 get_TopRightVert()
    // Offset: 0xE2D920
    ::UnityEngine::Vector3 get_TopRightVert();
    // public UnityEngine.Vector3 get_BottomRightVert()
    // Offset: 0xE3065C
    ::UnityEngine::Vector3 get_BottomRightVert();
    // public UnityEngine.Vector3 get_BottomLeftVert()
    // Offset: 0xE2D850
    ::UnityEngine::Vector3 get_BottomLeftVert();
    // public UnityEngine.Vector3 get_Middle()
    // Offset: 0xE2D764
    ::UnityEngine::Vector3 get_Middle();
    // public UnityEngine.Vector3 RelativePos(UnityEngine.Vector3 yeah)
    // Offset: 0xE30618
    ::UnityEngine::Vector3 RelativePos(::UnityEngine::Vector3 yeah);
    // public UnityEngine.Vector3 RelativePos2(UnityEngine.Vector3 yeah)
    // Offset: 0xE305E4
    ::UnityEngine::Vector3 RelativePos2(::UnityEngine::Vector3 yeah);
    // public System.Single get_RelativeWidth()
    // Offset: 0xE3072C
    float get_RelativeWidth();
    // public UnityEngine.Vector3 RelativeAdvance(System.Single extraSpacing, System.Single quality)
    // Offset: 0xE3078C
    ::UnityEngine::Vector3 RelativeAdvance(float extraSpacing, float quality);
    // public UnityEngine.Vector3 RelativeAdvance(System.Single extraSpacing)
    // Offset: 0xE3084C
    ::UnityEngine::Vector3 RelativeAdvance(float extraSpacing);
    // public UnityEngine.Vector3 Advance(System.Single extraSpacing, System.Single myQuality)
    // Offset: 0xE2E2F0
    ::UnityEngine::Vector3 Advance(float extraSpacing, float myQuality);
    // public UnityEngine.Vector3 Advance(System.Single extraSpacing)
    // Offset: 0xE30858
    ::UnityEngine::Vector3 Advance(float extraSpacing);
    // public System.Void .ctor()
    // Offset: 0xE30864
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMTextInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMTextInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMTextInfo*, creationType>()));
    }
    // public System.Void .ctor(SuperTextMesh stm)
    // Offset: 0xE309FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMTextInfo* New_ctor(::GlobalNamespace::SuperTextMesh* stm) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMTextInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMTextInfo*, creationType>(stm)));
    }
    // public System.Void .ctor(STMTextInfo clone, UnityEngine.CharacterInfo ch)
    // Offset: 0xE30D0C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMTextInfo* New_ctor(::GlobalNamespace::STMTextInfo* clone, ::UnityEngine::CharacterInfo ch) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMTextInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMTextInfo*, creationType>(clone, ch)));
    }
    // public System.Void .ctor(STMTextInfo clone)
    // Offset: 0xE30D50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMTextInfo* New_ctor(::GlobalNamespace::STMTextInfo* clone) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMTextInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMTextInfo*, creationType>(clone)));
    }
  }; // STMTextInfo
  #pragma pack(pop)
  static check_size<sizeof(STMTextInfo), 392 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_STMTextInfoSizeCheck;
  static_assert(sizeof(STMTextInfo) == 0x194);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::UpdateCachedValuesIfChanged
// Il2CppName: UpdateCachedValuesIfChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMTextInfo::*)()>(&GlobalNamespace::STMTextInfo::UpdateCachedValuesIfChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMTextInfo*), "UpdateCachedValuesIfChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::get_character
// Il2CppName: get_character
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (GlobalNamespace::STMTextInfo::*)()>(&GlobalNamespace::STMTextInfo::get_character)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMTextInfo*), "get_character", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::get_ratio
// Il2CppName: get_ratio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (GlobalNamespace::STMTextInfo::*)()>(&GlobalNamespace::STMTextInfo::get_ratio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMTextInfo*), "get_ratio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::get_TopLeftVert
// Il2CppName: get_TopLeftVert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMTextInfo::*)()>(&GlobalNamespace::STMTextInfo::get_TopLeftVert)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMTextInfo*), "get_TopLeftVert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::get_TopRightVert
// Il2CppName: get_TopRightVert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMTextInfo::*)()>(&GlobalNamespace::STMTextInfo::get_TopRightVert)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMTextInfo*), "get_TopRightVert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::get_BottomRightVert
// Il2CppName: get_BottomRightVert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMTextInfo::*)()>(&GlobalNamespace::STMTextInfo::get_BottomRightVert)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMTextInfo*), "get_BottomRightVert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::get_BottomLeftVert
// Il2CppName: get_BottomLeftVert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMTextInfo::*)()>(&GlobalNamespace::STMTextInfo::get_BottomLeftVert)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMTextInfo*), "get_BottomLeftVert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::get_Middle
// Il2CppName: get_Middle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMTextInfo::*)()>(&GlobalNamespace::STMTextInfo::get_Middle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMTextInfo*), "get_Middle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::RelativePos
// Il2CppName: RelativePos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMTextInfo::*)(::UnityEngine::Vector3)>(&GlobalNamespace::STMTextInfo::RelativePos)> {
  static const MethodInfo* get() {
    static auto* yeah = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMTextInfo*), "RelativePos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{yeah});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::RelativePos2
// Il2CppName: RelativePos2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMTextInfo::*)(::UnityEngine::Vector3)>(&GlobalNamespace::STMTextInfo::RelativePos2)> {
  static const MethodInfo* get() {
    static auto* yeah = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMTextInfo*), "RelativePos2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{yeah});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::get_RelativeWidth
// Il2CppName: get_RelativeWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::STMTextInfo::*)()>(&GlobalNamespace::STMTextInfo::get_RelativeWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMTextInfo*), "get_RelativeWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::RelativeAdvance
// Il2CppName: RelativeAdvance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMTextInfo::*)(float, float)>(&GlobalNamespace::STMTextInfo::RelativeAdvance)> {
  static const MethodInfo* get() {
    static auto* extraSpacing = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* quality = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMTextInfo*), "RelativeAdvance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{extraSpacing, quality});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::RelativeAdvance
// Il2CppName: RelativeAdvance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMTextInfo::*)(float)>(&GlobalNamespace::STMTextInfo::RelativeAdvance)> {
  static const MethodInfo* get() {
    static auto* extraSpacing = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMTextInfo*), "RelativeAdvance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{extraSpacing});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::Advance
// Il2CppName: Advance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMTextInfo::*)(float, float)>(&GlobalNamespace::STMTextInfo::Advance)> {
  static const MethodInfo* get() {
    static auto* extraSpacing = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* myQuality = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMTextInfo*), "Advance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{extraSpacing, myQuality});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::Advance
// Il2CppName: Advance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMTextInfo::*)(float)>(&GlobalNamespace::STMTextInfo::Advance)> {
  static const MethodInfo* get() {
    static auto* extraSpacing = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMTextInfo*), "Advance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{extraSpacing});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::STMTextInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
