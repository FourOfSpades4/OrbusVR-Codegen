// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Runtime.InteropServices.HandleRef
#include "System/Runtime/InteropServices/HandleRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SWIGTYPE_p_f_p_vxa_apcd__p_char
  class SWIGTYPE_p_f_p_vxa_apcd__p_char;
  // Forward declaring type: SWIGTYPE_p_f_p_vxa_apcd_int_int__int
  class SWIGTYPE_p_f_p_vxa_apcd_int_int__int;
  // Forward declaring type: SWIGTYPE_p_f_p_vxa_apcd__int
  class SWIGTYPE_p_f_p_vxa_apcd__int;
  // Forward declaring type: SWIGTYPE_p_f_p_vxa_apcd_p_void_int__int
  class SWIGTYPE_p_f_p_vxa_apcd_p_void_int__int;
  // Forward declaring type: SWIGTYPE_p_f_p_vxa_apcd_p_vxa_capture_device_stats_t__int
  class SWIGTYPE_p_f_p_vxa_apcd_p_vxa_capture_device_stats_t__int;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: vxa_apcd_t
  class vxa_apcd_t;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::vxa_apcd_t);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::vxa_apcd_t*, "", "vxa_apcd_t");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: vxa_apcd_t
  // [TokenAttribute] Offset: FFFFFFFF
  class vxa_apcd_t : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Runtime.InteropServices.HandleRef swigCPtr
    // Size: 0x10
    // Offset: 0x10
    ::System::Runtime::InteropServices::HandleRef swigCPtr;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::HandleRef) == 0x10);
    // protected System.Boolean swigCMemOwn
    // Size: 0x1
    // Offset: 0x20
    bool swigCMemOwn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Runtime.InteropServices.HandleRef swigCPtr
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& dyn_swigCPtr();
    // Get instance field reference: protected System.Boolean swigCMemOwn
    [[deprecated("Use field access instead!")]] bool& dyn_swigCMemOwn();
    // System.Void .ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    // Offset: 0x28274A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static vxa_apcd_t* New_ctor(::System::IntPtr cPtr, bool cMemoryOwn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<vxa_apcd_t*, creationType>(cPtr, cMemoryOwn)));
    }
    // static System.Runtime.InteropServices.HandleRef getCPtr(vxa_apcd_t obj)
    // Offset: 0x2827508
    static ::System::Runtime::InteropServices::HandleRef getCPtr(::GlobalNamespace::vxa_apcd_t* obj);
    // public System.Void Dispose()
    // Offset: 0x28275F8
    void Dispose();
    // public System.Void set_pf_get_display_name(SWIGTYPE_p_f_p_vxa_apcd__p_char value)
    // Offset: 0x2827768
    void set_pf_get_display_name(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__p_char* value);
    // public SWIGTYPE_p_f_p_vxa_apcd__p_char get_pf_get_display_name()
    // Offset: 0x2827800
    ::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__p_char* get_pf_get_display_name();
    // public System.Void set_pf_get_internal_name(SWIGTYPE_p_f_p_vxa_apcd__p_char value)
    // Offset: 0x28278B4
    void set_pf_get_internal_name(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__p_char* value);
    // public SWIGTYPE_p_f_p_vxa_apcd__p_char get_pf_get_internal_name()
    // Offset: 0x282794C
    ::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__p_char* get_pf_get_internal_name();
    // public System.Void set_pf_open(SWIGTYPE_p_f_p_vxa_apcd_int_int__int value)
    // Offset: 0x2827A00
    void set_pf_open(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_int_int__int* value);
    // public SWIGTYPE_p_f_p_vxa_apcd_int_int__int get_pf_open()
    // Offset: 0x2827A98
    ::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_int_int__int* get_pf_open();
    // public System.Void set_pf_is_open(SWIGTYPE_p_f_p_vxa_apcd__int value)
    // Offset: 0x2827B4C
    void set_pf_is_open(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__int* value);
    // public SWIGTYPE_p_f_p_vxa_apcd__int get_pf_is_open()
    // Offset: 0x2827BE4
    ::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__int* get_pf_is_open();
    // public System.Void set_pf_read(SWIGTYPE_p_f_p_vxa_apcd_p_void_int__int value)
    // Offset: 0x2827C98
    void set_pf_read(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_p_void_int__int* value);
    // public SWIGTYPE_p_f_p_vxa_apcd_p_void_int__int get_pf_read()
    // Offset: 0x2827D30
    ::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_p_void_int__int* get_pf_read();
    // public System.Void set_pf_get_stats(SWIGTYPE_p_f_p_vxa_apcd_p_vxa_capture_device_stats_t__int value)
    // Offset: 0x2827DE4
    void set_pf_get_stats(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_p_vxa_capture_device_stats_t__int* value);
    // public SWIGTYPE_p_f_p_vxa_apcd_p_vxa_capture_device_stats_t__int get_pf_get_stats()
    // Offset: 0x2827E7C
    ::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_p_vxa_capture_device_stats_t__int* get_pf_get_stats();
    // public System.Void set_pf_close(SWIGTYPE_p_f_p_vxa_apcd__int value)
    // Offset: 0x2827F30
    void set_pf_close(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__int* value);
    // public SWIGTYPE_p_f_p_vxa_apcd__int get_pf_close()
    // Offset: 0x2827FC8
    ::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__int* get_pf_close();
    // public System.Void .ctor()
    // Offset: 0x282807C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static vxa_apcd_t* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vxa_apcd_t::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<vxa_apcd_t*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x282757C
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // vxa_apcd_t
  #pragma pack(pop)
  static check_size<sizeof(vxa_apcd_t), 32 + sizeof(bool)> __GlobalNamespace_vxa_apcd_tSizeCheck;
  static_assert(sizeof(vxa_apcd_t) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::getCPtr
// Il2CppName: getCPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::InteropServices::HandleRef (*)(::GlobalNamespace::vxa_apcd_t*)>(&GlobalNamespace::vxa_apcd_t::getCPtr)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("", "vxa_apcd_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "getCPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vxa_apcd_t::*)()>(&GlobalNamespace::vxa_apcd_t::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::set_pf_get_display_name
// Il2CppName: set_pf_get_display_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vxa_apcd_t::*)(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__p_char*)>(&GlobalNamespace::vxa_apcd_t::set_pf_get_display_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SWIGTYPE_p_f_p_vxa_apcd__p_char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "set_pf_get_display_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::get_pf_get_display_name
// Il2CppName: get_pf_get_display_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__p_char* (GlobalNamespace::vxa_apcd_t::*)()>(&GlobalNamespace::vxa_apcd_t::get_pf_get_display_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "get_pf_get_display_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::set_pf_get_internal_name
// Il2CppName: set_pf_get_internal_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vxa_apcd_t::*)(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__p_char*)>(&GlobalNamespace::vxa_apcd_t::set_pf_get_internal_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SWIGTYPE_p_f_p_vxa_apcd__p_char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "set_pf_get_internal_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::get_pf_get_internal_name
// Il2CppName: get_pf_get_internal_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__p_char* (GlobalNamespace::vxa_apcd_t::*)()>(&GlobalNamespace::vxa_apcd_t::get_pf_get_internal_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "get_pf_get_internal_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::set_pf_open
// Il2CppName: set_pf_open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vxa_apcd_t::*)(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_int_int__int*)>(&GlobalNamespace::vxa_apcd_t::set_pf_open)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SWIGTYPE_p_f_p_vxa_apcd_int_int__int")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "set_pf_open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::get_pf_open
// Il2CppName: get_pf_open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_int_int__int* (GlobalNamespace::vxa_apcd_t::*)()>(&GlobalNamespace::vxa_apcd_t::get_pf_open)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "get_pf_open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::set_pf_is_open
// Il2CppName: set_pf_is_open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vxa_apcd_t::*)(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__int*)>(&GlobalNamespace::vxa_apcd_t::set_pf_is_open)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SWIGTYPE_p_f_p_vxa_apcd__int")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "set_pf_is_open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::get_pf_is_open
// Il2CppName: get_pf_is_open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__int* (GlobalNamespace::vxa_apcd_t::*)()>(&GlobalNamespace::vxa_apcd_t::get_pf_is_open)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "get_pf_is_open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::set_pf_read
// Il2CppName: set_pf_read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vxa_apcd_t::*)(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_p_void_int__int*)>(&GlobalNamespace::vxa_apcd_t::set_pf_read)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SWIGTYPE_p_f_p_vxa_apcd_p_void_int__int")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "set_pf_read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::get_pf_read
// Il2CppName: get_pf_read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_p_void_int__int* (GlobalNamespace::vxa_apcd_t::*)()>(&GlobalNamespace::vxa_apcd_t::get_pf_read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "get_pf_read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::set_pf_get_stats
// Il2CppName: set_pf_get_stats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vxa_apcd_t::*)(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_p_vxa_capture_device_stats_t__int*)>(&GlobalNamespace::vxa_apcd_t::set_pf_get_stats)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SWIGTYPE_p_f_p_vxa_apcd_p_vxa_capture_device_stats_t__int")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "set_pf_get_stats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::get_pf_get_stats
// Il2CppName: get_pf_get_stats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd_p_vxa_capture_device_stats_t__int* (GlobalNamespace::vxa_apcd_t::*)()>(&GlobalNamespace::vxa_apcd_t::get_pf_get_stats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "get_pf_get_stats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::set_pf_close
// Il2CppName: set_pf_close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vxa_apcd_t::*)(::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__int*)>(&GlobalNamespace::vxa_apcd_t::set_pf_close)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SWIGTYPE_p_f_p_vxa_apcd__int")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "set_pf_close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::get_pf_close
// Il2CppName: get_pf_close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SWIGTYPE_p_f_p_vxa_apcd__int* (GlobalNamespace::vxa_apcd_t::*)()>(&GlobalNamespace::vxa_apcd_t::get_pf_close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "get_pf_close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::vxa_apcd_t::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vxa_apcd_t::*)()>(&GlobalNamespace::vxa_apcd_t::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vxa_apcd_t*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
