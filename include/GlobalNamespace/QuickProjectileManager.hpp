// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: QuickProjectileManager
  class QuickProjectileManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::QuickProjectileManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::QuickProjectileManager*, "", "QuickProjectileManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: QuickProjectileManager
  // [TokenAttribute] Offset: FFFFFFFF
  class QuickProjectileManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.GameObject[] projectileVFXs
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::GameObject*> projectileVFXs;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.GameObject[] projectileVFXs
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_projectileVFXs();
    // private System.Void Start()
    // Offset: 0xE269B4
    void Start();
    // private System.Void Update()
    // Offset: 0xE269B8
    void Update();
    // public System.Void FireProjectile(UnityEngine.Transform target, System.Int32 vfxIndex)
    // Offset: 0xE269BC
    void FireProjectile(::UnityEngine::Transform* target, int vfxIndex);
    // public System.Void .ctor()
    // Offset: 0xE26B84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static QuickProjectileManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::QuickProjectileManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<QuickProjectileManager*, creationType>()));
    }
  }; // QuickProjectileManager
  #pragma pack(pop)
  static check_size<sizeof(QuickProjectileManager), 24 + sizeof(::ArrayW<::UnityEngine::GameObject*>)> __GlobalNamespace_QuickProjectileManagerSizeCheck;
  static_assert(sizeof(QuickProjectileManager) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::QuickProjectileManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::QuickProjectileManager::*)()>(&GlobalNamespace::QuickProjectileManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::QuickProjectileManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::QuickProjectileManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::QuickProjectileManager::*)()>(&GlobalNamespace::QuickProjectileManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::QuickProjectileManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::QuickProjectileManager::FireProjectile
// Il2CppName: FireProjectile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::QuickProjectileManager::*)(::UnityEngine::Transform*, int)>(&GlobalNamespace::QuickProjectileManager::FireProjectile)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* vfxIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::QuickProjectileManager*), "FireProjectile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, vfxIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::QuickProjectileManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
