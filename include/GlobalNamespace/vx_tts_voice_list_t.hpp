// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Runtime.InteropServices.HandleRef
#include "System/Runtime/InteropServices/HandleRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: vx_tts_voice_t
  class vx_tts_voice_t;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: vx_tts_voice_list_t
  class vx_tts_voice_list_t;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::vx_tts_voice_list_t);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::vx_tts_voice_list_t*, "", "vx_tts_voice_list_t");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: vx_tts_voice_list_t
  // [TokenAttribute] Offset: FFFFFFFF
  class vx_tts_voice_list_t : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Runtime.InteropServices.HandleRef swigCPtr
    // Size: 0x10
    // Offset: 0x10
    ::System::Runtime::InteropServices::HandleRef swigCPtr;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::HandleRef) == 0x10);
    // protected System.Boolean swigCMemOwn
    // Size: 0x1
    // Offset: 0x20
    bool swigCMemOwn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Runtime.InteropServices.HandleRef swigCPtr
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& dyn_swigCPtr();
    // Get instance field reference: protected System.Boolean swigCMemOwn
    [[deprecated("Use field access instead!")]] bool& dyn_swigCMemOwn();
    // System.Void .ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    // Offset: 0x2824FC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static vx_tts_voice_list_t* New_ctor(::System::IntPtr cPtr, bool cMemoryOwn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_list_t::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<vx_tts_voice_list_t*, creationType>(cPtr, cMemoryOwn)));
    }
    // static System.Runtime.InteropServices.HandleRef getCPtr(vx_tts_voice_list_t obj)
    // Offset: 0x2825024
    static ::System::Runtime::InteropServices::HandleRef getCPtr(::GlobalNamespace::vx_tts_voice_list_t* obj);
    // public System.Void Dispose()
    // Offset: 0x2825114
    void Dispose();
    // public vx_tts_voice_t Get(System.Int32 i)
    // Offset: 0x282537C
    ::GlobalNamespace::vx_tts_voice_t* Get(int i);
    // public System.Void set_Voices(vx_tts_voice_t value)
    // Offset: 0x2825510
    void set_Voices(::GlobalNamespace::vx_tts_voice_t* value);
    // public vx_tts_voice_t get_Voices()
    // Offset: 0x2825618
    ::GlobalNamespace::vx_tts_voice_t* get_Voices();
    // public System.Void set_Length(System.Int32 value)
    // Offset: 0x28256C8
    void set_Length(int value);
    // public System.Int32 get_Length()
    // Offset: 0x282543C
    int get_Length();
    // public System.Void .ctor()
    // Offset: 0x2825748
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static vx_tts_voice_list_t* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_voice_list_t::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<vx_tts_voice_list_t*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x2825098
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // vx_tts_voice_list_t
  #pragma pack(pop)
  static check_size<sizeof(vx_tts_voice_list_t), 32 + sizeof(bool)> __GlobalNamespace_vx_tts_voice_list_tSizeCheck;
  static_assert(sizeof(vx_tts_voice_list_t) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_voice_list_t::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_voice_list_t::getCPtr
// Il2CppName: getCPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::InteropServices::HandleRef (*)(::GlobalNamespace::vx_tts_voice_list_t*)>(&GlobalNamespace::vx_tts_voice_list_t::getCPtr)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("", "vx_tts_voice_list_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_voice_list_t*), "getCPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_voice_list_t::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_tts_voice_list_t::*)()>(&GlobalNamespace::vx_tts_voice_list_t::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_voice_list_t*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_voice_list_t::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::vx_tts_voice_t* (GlobalNamespace::vx_tts_voice_list_t::*)(int)>(&GlobalNamespace::vx_tts_voice_list_t::Get)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_voice_list_t*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_voice_list_t::set_Voices
// Il2CppName: set_Voices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_tts_voice_list_t::*)(::GlobalNamespace::vx_tts_voice_t*)>(&GlobalNamespace::vx_tts_voice_list_t::set_Voices)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "vx_tts_voice_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_voice_list_t*), "set_Voices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_voice_list_t::get_Voices
// Il2CppName: get_Voices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::vx_tts_voice_t* (GlobalNamespace::vx_tts_voice_list_t::*)()>(&GlobalNamespace::vx_tts_voice_list_t::get_Voices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_voice_list_t*), "get_Voices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_voice_list_t::set_Length
// Il2CppName: set_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_tts_voice_list_t::*)(int)>(&GlobalNamespace::vx_tts_voice_list_t::set_Length)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_voice_list_t*), "set_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_voice_list_t::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_tts_voice_list_t::*)()>(&GlobalNamespace::vx_tts_voice_list_t::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_voice_list_t*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_voice_list_t::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_voice_list_t::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_tts_voice_list_t::*)()>(&GlobalNamespace::vx_tts_voice_list_t::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_voice_list_t*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
