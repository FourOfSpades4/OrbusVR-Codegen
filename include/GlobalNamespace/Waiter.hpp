// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: WaitHandle
  class WaitHandle;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Waiter
  class Waiter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Waiter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Waiter*, "", "Waiter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Waiter
  // [TokenAttribute] Offset: FFFFFFFF
  class Waiter : public ::Il2CppObject {
    public:
    public:
    // private System.Threading.WaitHandle _waitHandle
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::WaitHandle* waitHandle;
    // Field size check
    static_assert(sizeof(::System::Threading::WaitHandle*) == 0x8);
    // private System.DateTime _until
    // Size: 0x8
    // Offset: 0x18
    ::System::DateTime until;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    public:
    // Get instance field reference: private System.Threading.WaitHandle _waitHandle
    [[deprecated("Use field access instead!")]] ::System::Threading::WaitHandle*& dyn__waitHandle();
    // Get instance field reference: private System.DateTime _until
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn__until();
    // public System.Void .ctor(System.Threading.WaitHandle handle, System.TimeSpan until)
    // Offset: 0x12DD738
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Waiter* New_ctor(::System::Threading::WaitHandle* handle, ::System::TimeSpan until) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Waiter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Waiter*, creationType>(handle, until)));
    }
    // public System.Boolean IsDone()
    // Offset: 0x12DD7D0
    bool IsDone();
  }; // Waiter
  #pragma pack(pop)
  static check_size<sizeof(Waiter), 24 + sizeof(::System::DateTime)> __GlobalNamespace_WaiterSizeCheck;
  static_assert(sizeof(Waiter) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Waiter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Waiter::IsDone
// Il2CppName: IsDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::Waiter::*)()>(&GlobalNamespace::Waiter::IsDone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Waiter*), "IsDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
