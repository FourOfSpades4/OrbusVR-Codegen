// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LeanAudioStream
  class LeanAudioStream;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LeanAudioOptions
  class LeanAudioOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LeanAudioOptions);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LeanAudioOptions*, "", "LeanAudioOptions");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: LeanAudioOptions
  // [TokenAttribute] Offset: FFFFFFFF
  class LeanAudioOptions : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Vector3[] vibrato
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Vector3> vibrato;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public System.Int32 frequencyRate
    // Size: 0x4
    // Offset: 0x18
    int frequencyRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean useSetData
    // Size: 0x1
    // Offset: 0x1C
    bool useSetData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useSetData and: stream
    char __padding2[0x3] = {};
    // public LeanAudioStream stream
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::LeanAudioStream* stream;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LeanAudioStream*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Vector3[] vibrato
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_vibrato();
    // Get instance field reference: public System.Int32 frequencyRate
    [[deprecated("Use field access instead!")]] int& dyn_frequencyRate();
    // Get instance field reference: public System.Boolean useSetData
    [[deprecated("Use field access instead!")]] bool& dyn_useSetData();
    // Get instance field reference: public LeanAudioStream stream
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LeanAudioStream*& dyn_stream();
    // public System.Void .ctor()
    // Offset: 0x1AC05A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LeanAudioOptions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LeanAudioOptions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LeanAudioOptions*, creationType>()));
    }
    // public LeanAudioOptions setFrequency(System.Int32 frequencyRate)
    // Offset: 0x1AC1C24
    ::GlobalNamespace::LeanAudioOptions* setFrequency(int frequencyRate);
    // public LeanAudioOptions setVibrato(UnityEngine.Vector3[] vibrato)
    // Offset: 0x1AC1C2C
    ::GlobalNamespace::LeanAudioOptions* setVibrato(::ArrayW<::UnityEngine::Vector3> vibrato);
  }; // LeanAudioOptions
  #pragma pack(pop)
  static check_size<sizeof(LeanAudioOptions), 32 + sizeof(::GlobalNamespace::LeanAudioStream*)> __GlobalNamespace_LeanAudioOptionsSizeCheck;
  static_assert(sizeof(LeanAudioOptions) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LeanAudioOptions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LeanAudioOptions::setFrequency
// Il2CppName: setFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LeanAudioOptions* (GlobalNamespace::LeanAudioOptions::*)(int)>(&GlobalNamespace::LeanAudioOptions::setFrequency)> {
  static const MethodInfo* get() {
    static auto* frequencyRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudioOptions*), "setFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequencyRate});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanAudioOptions::setVibrato
// Il2CppName: setVibrato
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LeanAudioOptions* (GlobalNamespace::LeanAudioOptions::*)(::ArrayW<::UnityEngine::Vector3>)>(&GlobalNamespace::LeanAudioOptions::setVibrato)> {
  static const MethodInfo* get() {
    static auto* vibrato = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudioOptions*), "setVibrato", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vibrato});
  }
};
