// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Seeker
  class Seeker;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: CharacterController
  class CharacterController;
  // Forward declaring type: Rigidbody
  class Rigidbody;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AIPath
  class AIPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AIPath);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AIPath*, "", "AIPath");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB4
  #pragma pack(push, 1)
  // Autogenerated type: AIPath
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: ACCEEC
  // [AddComponentMenu] Offset: ACCEEC
  // [HelpURLAttribute] Offset: ACCEEC
  class AIPath : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::AIPath::$RepeatTrySearchPath$d__30
    class $RepeatTrySearchPath$d__30;
    public:
    // public System.Single repathRate
    // Size: 0x4
    // Offset: 0x18
    float repathRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: repathRate and: target
    char __padding0[0x4] = {};
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean canSearch
    // Size: 0x1
    // Offset: 0x28
    bool canSearch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean canMove
    // Size: 0x1
    // Offset: 0x29
    bool canMove;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canMove and: speed
    char __padding3[0x2] = {};
    // public System.Single speed
    // Size: 0x4
    // Offset: 0x2C
    float speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single turningSpeed
    // Size: 0x4
    // Offset: 0x30
    float turningSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single slowdownDistance
    // Size: 0x4
    // Offset: 0x34
    float slowdownDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single pickNextWaypointDist
    // Size: 0x4
    // Offset: 0x38
    float pickNextWaypointDist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single forwardLook
    // Size: 0x4
    // Offset: 0x3C
    float forwardLook;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single endReachedDistance
    // Size: 0x4
    // Offset: 0x40
    float endReachedDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean closestOnPathCheck
    // Size: 0x1
    // Offset: 0x44
    bool closestOnPathCheck;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: closestOnPathCheck and: minMoveScale
    char __padding10[0x3] = {};
    // protected System.Single minMoveScale
    // Size: 0x4
    // Offset: 0x48
    float minMoveScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: minMoveScale and: seeker
    char __padding11[0x4] = {};
    // protected Seeker seeker
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::Seeker* seeker;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Seeker*) == 0x8);
    // protected UnityEngine.Transform tr
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* tr;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // protected System.Single lastRepath
    // Size: 0x4
    // Offset: 0x60
    float lastRepath;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastRepath and: path
    char __padding14[0x4] = {};
    // protected Pathfinding.Path path
    // Size: 0x8
    // Offset: 0x68
    ::Pathfinding::Path* path;
    // Field size check
    static_assert(sizeof(::Pathfinding::Path*) == 0x8);
    // protected UnityEngine.CharacterController controller
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::CharacterController* controller;
    // Field size check
    static_assert(sizeof(::UnityEngine::CharacterController*) == 0x8);
    // protected UnityEngine.Rigidbody rigid
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Rigidbody* rigid;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // protected System.Int32 currentWaypointIndex
    // Size: 0x4
    // Offset: 0x80
    int currentWaypointIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean targetReached
    // Size: 0x1
    // Offset: 0x84
    bool targetReached;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean canSearchAgain
    // Size: 0x1
    // Offset: 0x85
    bool canSearchAgain;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canSearchAgain and: lastFoundWaypointPosition
    char __padding20[0x2] = {};
    // protected UnityEngine.Vector3 lastFoundWaypointPosition
    // Size: 0xC
    // Offset: 0x88
    ::UnityEngine::Vector3 lastFoundWaypointPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // protected System.Single lastFoundWaypointTime
    // Size: 0x4
    // Offset: 0x94
    float lastFoundWaypointTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean startHasRun
    // Size: 0x1
    // Offset: 0x98
    bool startHasRun;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: startHasRun and: targetPoint
    char __padding23[0x3] = {};
    // protected UnityEngine.Vector3 targetPoint
    // Size: 0xC
    // Offset: 0x9C
    ::UnityEngine::Vector3 targetPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // protected UnityEngine.Vector3 targetDirection
    // Size: 0xC
    // Offset: 0xA8
    ::UnityEngine::Vector3 targetDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single repathRate
    [[deprecated("Use field access instead!")]] float& dyn_repathRate();
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // Get instance field reference: public System.Boolean canSearch
    [[deprecated("Use field access instead!")]] bool& dyn_canSearch();
    // Get instance field reference: public System.Boolean canMove
    [[deprecated("Use field access instead!")]] bool& dyn_canMove();
    // Get instance field reference: public System.Single speed
    [[deprecated("Use field access instead!")]] float& dyn_speed();
    // Get instance field reference: public System.Single turningSpeed
    [[deprecated("Use field access instead!")]] float& dyn_turningSpeed();
    // Get instance field reference: public System.Single slowdownDistance
    [[deprecated("Use field access instead!")]] float& dyn_slowdownDistance();
    // Get instance field reference: public System.Single pickNextWaypointDist
    [[deprecated("Use field access instead!")]] float& dyn_pickNextWaypointDist();
    // Get instance field reference: public System.Single forwardLook
    [[deprecated("Use field access instead!")]] float& dyn_forwardLook();
    // Get instance field reference: public System.Single endReachedDistance
    [[deprecated("Use field access instead!")]] float& dyn_endReachedDistance();
    // Get instance field reference: public System.Boolean closestOnPathCheck
    [[deprecated("Use field access instead!")]] bool& dyn_closestOnPathCheck();
    // Get instance field reference: protected System.Single minMoveScale
    [[deprecated("Use field access instead!")]] float& dyn_minMoveScale();
    // Get instance field reference: protected Seeker seeker
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Seeker*& dyn_seeker();
    // Get instance field reference: protected UnityEngine.Transform tr
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_tr();
    // Get instance field reference: protected System.Single lastRepath
    [[deprecated("Use field access instead!")]] float& dyn_lastRepath();
    // Get instance field reference: protected Pathfinding.Path path
    [[deprecated("Use field access instead!")]] ::Pathfinding::Path*& dyn_path();
    // Get instance field reference: protected UnityEngine.CharacterController controller
    [[deprecated("Use field access instead!")]] ::UnityEngine::CharacterController*& dyn_controller();
    // Get instance field reference: protected UnityEngine.Rigidbody rigid
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_rigid();
    // Get instance field reference: protected System.Int32 currentWaypointIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentWaypointIndex();
    // Get instance field reference: protected System.Boolean targetReached
    [[deprecated("Use field access instead!")]] bool& dyn_targetReached();
    // Get instance field reference: protected System.Boolean canSearchAgain
    [[deprecated("Use field access instead!")]] bool& dyn_canSearchAgain();
    // Get instance field reference: protected UnityEngine.Vector3 lastFoundWaypointPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastFoundWaypointPosition();
    // Get instance field reference: protected System.Single lastFoundWaypointTime
    [[deprecated("Use field access instead!")]] float& dyn_lastFoundWaypointTime();
    // Get instance field reference: private System.Boolean startHasRun
    [[deprecated("Use field access instead!")]] bool& dyn_startHasRun();
    // Get instance field reference: protected UnityEngine.Vector3 targetPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_targetPoint();
    // Get instance field reference: protected UnityEngine.Vector3 targetDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_targetDirection();
    // public System.Boolean get_TargetReached()
    // Offset: 0xEF1E90
    bool get_TargetReached();
    // protected System.Void Awake()
    // Offset: 0xEF1E98
    void Awake();
    // protected System.Void Start()
    // Offset: 0xEF1F30
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0xEF1F44
    void OnEnable();
    // public System.Void OnDisable()
    // Offset: 0xEF2118
    void OnDisable();
    // protected System.Collections.IEnumerator RepeatTrySearchPath()
    // Offset: 0xEF20A4
    ::System::Collections::IEnumerator* RepeatTrySearchPath();
    // public System.Single TrySearchPath()
    // Offset: 0xEF22E8
    float TrySearchPath();
    // public System.Void SearchPath()
    // Offset: 0xEF23CC
    void SearchPath();
    // public System.Void OnTargetReached()
    // Offset: 0xEF2524
    void OnTargetReached();
    // public System.Void OnPathComplete(Pathfinding.Path _p)
    // Offset: 0xEF2528
    void OnPathComplete(::Pathfinding::Path* _p);
    // public UnityEngine.Vector3 GetFeetPosition()
    // Offset: 0xEF2D4C
    ::UnityEngine::Vector3 GetFeetPosition();
    // public System.Void Update()
    // Offset: 0xEF2EC8
    void Update();
    // protected System.Single XZSqrMagnitude(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
    // Offset: 0xEF30D8
    float XZSqrMagnitude(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b);
    // protected UnityEngine.Vector3 CalculateVelocity(UnityEngine.Vector3 currentPosition)
    // Offset: 0xEF27E4
    ::UnityEngine::Vector3 CalculateVelocity(::UnityEngine::Vector3 currentPosition);
    // protected System.Void RotateTowards(UnityEngine.Vector3 dir)
    // Offset: 0xEF3340
    void RotateTowards(::UnityEngine::Vector3 dir);
    // protected UnityEngine.Vector3 CalculateTargetPoint(UnityEngine.Vector3 p, UnityEngine.Vector3 a, UnityEngine.Vector3 b)
    // Offset: 0xEF30F0
    ::UnityEngine::Vector3 CalculateTargetPoint(::UnityEngine::Vector3 p, ::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b);
    // public System.Void .ctor()
    // Offset: 0xEF3520
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AIPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AIPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AIPath*, creationType>()));
    }
  }; // AIPath
  #pragma pack(pop)
  static check_size<sizeof(AIPath), 168 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_AIPathSizeCheck;
  static_assert(sizeof(AIPath) == 0xB4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AIPath::get_TargetReached
// Il2CppName: get_TargetReached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AIPath::*)()>(&GlobalNamespace::AIPath::get_TargetReached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "get_TargetReached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AIPath::*)()>(&GlobalNamespace::AIPath::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AIPath::*)()>(&GlobalNamespace::AIPath::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AIPath::*)()>(&GlobalNamespace::AIPath::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AIPath::*)()>(&GlobalNamespace::AIPath::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::RepeatTrySearchPath
// Il2CppName: RepeatTrySearchPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::AIPath::*)()>(&GlobalNamespace::AIPath::RepeatTrySearchPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "RepeatTrySearchPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::TrySearchPath
// Il2CppName: TrySearchPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::AIPath::*)()>(&GlobalNamespace::AIPath::TrySearchPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "TrySearchPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::SearchPath
// Il2CppName: SearchPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AIPath::*)()>(&GlobalNamespace::AIPath::SearchPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "SearchPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::OnTargetReached
// Il2CppName: OnTargetReached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AIPath::*)()>(&GlobalNamespace::AIPath::OnTargetReached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "OnTargetReached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::OnPathComplete
// Il2CppName: OnPathComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AIPath::*)(::Pathfinding::Path*)>(&GlobalNamespace::AIPath::OnPathComplete)> {
  static const MethodInfo* get() {
    static auto* _p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "OnPathComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_p});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::GetFeetPosition
// Il2CppName: GetFeetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::AIPath::*)()>(&GlobalNamespace::AIPath::GetFeetPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "GetFeetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AIPath::*)()>(&GlobalNamespace::AIPath::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::XZSqrMagnitude
// Il2CppName: XZSqrMagnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::AIPath::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::AIPath::XZSqrMagnitude)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "XZSqrMagnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::CalculateVelocity
// Il2CppName: CalculateVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::AIPath::*)(::UnityEngine::Vector3)>(&GlobalNamespace::AIPath::CalculateVelocity)> {
  static const MethodInfo* get() {
    static auto* currentPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "CalculateVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentPosition});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::RotateTowards
// Il2CppName: RotateTowards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AIPath::*)(::UnityEngine::Vector3)>(&GlobalNamespace::AIPath::RotateTowards)> {
  static const MethodInfo* get() {
    static auto* dir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "RotateTowards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dir});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::CalculateTargetPoint
// Il2CppName: CalculateTargetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::AIPath::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::AIPath::CalculateTargetPoint)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AIPath*), "CalculateTargetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, a, b});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AIPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
