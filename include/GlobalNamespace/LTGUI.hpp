// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LTRect
  class LTRect;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LTGUI
  class LTGUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LTGUI);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LTGUI*, "", "LTGUI");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: LTGUI
  // [TokenAttribute] Offset: FFFFFFFF
  class LTGUI : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::LTGUI::Element_Type
    struct Element_Type;
    // Get static field: static public System.Int32 RECT_LEVELS
    static int _get_RECT_LEVELS();
    // Set static field: static public System.Int32 RECT_LEVELS
    static void _set_RECT_LEVELS(int value);
    // Get static field: static public System.Int32 RECTS_PER_LEVEL
    static int _get_RECTS_PER_LEVEL();
    // Set static field: static public System.Int32 RECTS_PER_LEVEL
    static void _set_RECTS_PER_LEVEL(int value);
    // Get static field: static public System.Int32 BUTTONS_MAX
    static int _get_BUTTONS_MAX();
    // Set static field: static public System.Int32 BUTTONS_MAX
    static void _set_BUTTONS_MAX(int value);
    // Get static field: static private LTRect[] levels
    static ::ArrayW<::GlobalNamespace::LTRect*> _get_levels();
    // Set static field: static private LTRect[] levels
    static void _set_levels(::ArrayW<::GlobalNamespace::LTRect*> value);
    // Get static field: static private System.Int32[] levelDepths
    static ::ArrayW<int> _get_levelDepths();
    // Set static field: static private System.Int32[] levelDepths
    static void _set_levelDepths(::ArrayW<int> value);
    // Get static field: static private UnityEngine.Rect[] buttons
    static ::ArrayW<::UnityEngine::Rect> _get_buttons();
    // Set static field: static private UnityEngine.Rect[] buttons
    static void _set_buttons(::ArrayW<::UnityEngine::Rect> value);
    // Get static field: static private System.Int32[] buttonLevels
    static ::ArrayW<int> _get_buttonLevels();
    // Set static field: static private System.Int32[] buttonLevels
    static void _set_buttonLevels(::ArrayW<int> value);
    // Get static field: static private System.Int32[] buttonLastFrame
    static ::ArrayW<int> _get_buttonLastFrame();
    // Set static field: static private System.Int32[] buttonLastFrame
    static void _set_buttonLastFrame(::ArrayW<int> value);
    // Get static field: static private LTRect r
    static ::GlobalNamespace::LTRect* _get_r();
    // Set static field: static private LTRect r
    static void _set_r(::GlobalNamespace::LTRect* value);
    // Get static field: static private UnityEngine.Color color
    static ::UnityEngine::Color _get_color();
    // Set static field: static private UnityEngine.Color color
    static void _set_color(::UnityEngine::Color value);
    // Get static field: static private System.Boolean isGUIEnabled
    static bool _get_isGUIEnabled();
    // Set static field: static private System.Boolean isGUIEnabled
    static void _set_isGUIEnabled(bool value);
    // Get static field: static private System.Int32 global_counter
    static int _get_global_counter();
    // Set static field: static private System.Int32 global_counter
    static void _set_global_counter(int value);
    // static public System.Void init()
    // Offset: 0x1ABC650
    static void init();
    // static public System.Void initRectCheck()
    // Offset: 0x1ABC720
    static void initRectCheck();
    // static public System.Void reset()
    // Offset: 0x1ABC8C0
    static void reset();
    // static public System.Void update(System.Int32 updateLevel)
    // Offset: 0x1ABCA94
    static void update(int updateLevel);
    // static public System.Boolean checkOnScreen(UnityEngine.Rect rect)
    // Offset: 0x1ABD944
    static bool checkOnScreen(::UnityEngine::Rect rect);
    // static public System.Void destroy(System.Int32 id)
    // Offset: 0x1ABDA24
    static void destroy(int id);
    // static public System.Void destroyAll(System.Int32 depth)
    // Offset: 0x1ABDC14
    static void destroyAll(int depth);
    // static public LTRect label(UnityEngine.Rect rect, System.String label, System.Int32 depth)
    // Offset: 0x1ABDD24
    static ::GlobalNamespace::LTRect* label(::UnityEngine::Rect rect, ::StringW label, int depth);
    // static public LTRect label(LTRect rect, System.String label, System.Int32 depth)
    // Offset: 0x1ABDDE4
    static ::GlobalNamespace::LTRect* label(::GlobalNamespace::LTRect* rect, ::StringW label, int depth);
    // static public LTRect texture(UnityEngine.Rect rect, UnityEngine.Texture texture, System.Int32 depth)
    // Offset: 0x1ABE2EC
    static ::GlobalNamespace::LTRect* texture(::UnityEngine::Rect rect, ::UnityEngine::Texture* texture, int depth);
    // static public LTRect texture(LTRect rect, UnityEngine.Texture texture, System.Int32 depth)
    // Offset: 0x1ABE3AC
    static ::GlobalNamespace::LTRect* texture(::GlobalNamespace::LTRect* rect, ::UnityEngine::Texture* texture, int depth);
    // static public LTRect element(LTRect rect, System.Int32 depth)
    // Offset: 0x1ABDE8C
    static ::GlobalNamespace::LTRect* element(::GlobalNamespace::LTRect* rect, int depth);
    // static public System.Boolean hasNoOverlap(UnityEngine.Rect rect, System.Int32 depth)
    // Offset: 0x1ABE460
    static bool hasNoOverlap(::UnityEngine::Rect rect, int depth);
    // static public System.Boolean pressedWithinRect(UnityEngine.Rect rect)
    // Offset: 0x1ABE874
    static bool pressedWithinRect(::UnityEngine::Rect rect);
    // static public System.Boolean checkWithinRect(UnityEngine.Vector2 vec2, UnityEngine.Rect rect)
    // Offset: 0x1ABEAB8
    static bool checkWithinRect(::UnityEngine::Vector2 vec2, ::UnityEngine::Rect rect);
    // static public UnityEngine.Vector2 firstTouch()
    // Offset: 0x1ABE998
    static ::UnityEngine::Vector2 firstTouch();
    // public System.Void .ctor()
    // Offset: 0x1ABEB8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LTGUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LTGUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LTGUI*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1ABEB94
    static void _cctor();
  }; // LTGUI
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::init
// Il2CppName: init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LTGUI::init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::initRectCheck
// Il2CppName: initRectCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LTGUI::initRectCheck)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "initRectCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::reset
// Il2CppName: reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LTGUI::reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::update
// Il2CppName: update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::LTGUI::update)> {
  static const MethodInfo* get() {
    static auto* updateLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateLevel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::checkOnScreen
// Il2CppName: checkOnScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rect)>(&GlobalNamespace::LTGUI::checkOnScreen)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "checkOnScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::destroy
// Il2CppName: destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::LTGUI::destroy)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::destroyAll
// Il2CppName: destroyAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::LTGUI::destroyAll)> {
  static const MethodInfo* get() {
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "destroyAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{depth});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::label
// Il2CppName: label
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTRect* (*)(::UnityEngine::Rect, ::StringW, int)>(&GlobalNamespace::LTGUI::label)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* label = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "label", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, label, depth});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::label
// Il2CppName: label
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTRect* (*)(::GlobalNamespace::LTRect*, ::StringW, int)>(&GlobalNamespace::LTGUI::label)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("", "LTRect")->byval_arg;
    static auto* label = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "label", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, label, depth});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::texture
// Il2CppName: texture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTRect* (*)(::UnityEngine::Rect, ::UnityEngine::Texture*, int)>(&GlobalNamespace::LTGUI::texture)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "texture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, texture, depth});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::texture
// Il2CppName: texture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTRect* (*)(::GlobalNamespace::LTRect*, ::UnityEngine::Texture*, int)>(&GlobalNamespace::LTGUI::texture)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("", "LTRect")->byval_arg;
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "texture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, texture, depth});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::element
// Il2CppName: element
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTRect* (*)(::GlobalNamespace::LTRect*, int)>(&GlobalNamespace::LTGUI::element)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("", "LTRect")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "element", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, depth});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::hasNoOverlap
// Il2CppName: hasNoOverlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rect, int)>(&GlobalNamespace::LTGUI::hasNoOverlap)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "hasNoOverlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, depth});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::pressedWithinRect
// Il2CppName: pressedWithinRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Rect)>(&GlobalNamespace::LTGUI::pressedWithinRect)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "pressedWithinRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::checkWithinRect
// Il2CppName: checkWithinRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector2, ::UnityEngine::Rect)>(&GlobalNamespace::LTGUI::checkWithinRect)> {
  static const MethodInfo* get() {
    static auto* vec2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "checkWithinRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vec2, rect});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::firstTouch
// Il2CppName: firstTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)()>(&GlobalNamespace::LTGUI::firstTouch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), "firstTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LTGUI::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LTGUI::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTGUI*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
