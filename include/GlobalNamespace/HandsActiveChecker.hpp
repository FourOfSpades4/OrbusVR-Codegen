// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRCameraRig
  class OVRCameraRig;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HandsActiveChecker
  class HandsActiveChecker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HandsActiveChecker);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HandsActiveChecker*, "", "HandsActiveChecker");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: HandsActiveChecker
  // [TokenAttribute] Offset: FFFFFFFF
  class HandsActiveChecker : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::HandsActiveChecker::$GetCenterEye$d__6
    class $GetCenterEye$d__6;
    public:
    // private UnityEngine.GameObject _notificationPrefab
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* notificationPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _notification
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* notification;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private OVRCameraRig _cameraRig
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::OVRCameraRig* cameraRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRCameraRig*) == 0x8);
    // private UnityEngine.Transform _centerEye
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* centerEye;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.GameObject _notificationPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__notificationPrefab();
    // Get instance field reference: private UnityEngine.GameObject _notification
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__notification();
    // Get instance field reference: private OVRCameraRig _cameraRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRCameraRig*& dyn__cameraRig();
    // Get instance field reference: private UnityEngine.Transform _centerEye
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__centerEye();
    // private System.Void Awake()
    // Offset: 0x14941BC
    void Awake();
    // private System.Void Update()
    // Offset: 0x14942C0
    void Update();
    // private System.Collections.IEnumerator GetCenterEye()
    // Offset: 0x149424C
    ::System::Collections::IEnumerator* GetCenterEye();
    // public System.Void .ctor()
    // Offset: 0x1494580
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandsActiveChecker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HandsActiveChecker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandsActiveChecker*, creationType>()));
    }
  }; // HandsActiveChecker
  #pragma pack(pop)
  static check_size<sizeof(HandsActiveChecker), 48 + sizeof(::UnityEngine::Transform*)> __GlobalNamespace_HandsActiveCheckerSizeCheck;
  static_assert(sizeof(HandsActiveChecker) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HandsActiveChecker::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandsActiveChecker::*)()>(&GlobalNamespace::HandsActiveChecker::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandsActiveChecker*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandsActiveChecker::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandsActiveChecker::*)()>(&GlobalNamespace::HandsActiveChecker::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandsActiveChecker*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandsActiveChecker::GetCenterEye
// Il2CppName: GetCenterEye
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::HandsActiveChecker::*)()>(&GlobalNamespace::HandsActiveChecker::GetCenterEye)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandsActiveChecker*), "GetCenterEye", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandsActiveChecker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
