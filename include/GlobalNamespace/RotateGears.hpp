// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RotateGears
  class RotateGears;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RotateGears);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RotateGears*, "", "RotateGears");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: RotateGears
  // [TokenAttribute] Offset: FFFFFFFF
  class RotateGears : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform[] clockwiseGears
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Transform*> clockwiseGears;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // public UnityEngine.Transform[] counterClockwiseGears
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Transform*> counterClockwiseGears;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Transform[] clockwiseGears
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_clockwiseGears();
    // Get instance field reference: public UnityEngine.Transform[] counterClockwiseGears
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_counterClockwiseGears();
    // private System.Void Start()
    // Offset: 0xE2AC30
    void Start();
    // public System.Void SetGearRotation(System.Single percent)
    // Offset: 0xE2AC34
    void SetGearRotation(float percent);
    // public System.Void .ctor()
    // Offset: 0xE2AE28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RotateGears* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RotateGears::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RotateGears*, creationType>()));
    }
  }; // RotateGears
  #pragma pack(pop)
  static check_size<sizeof(RotateGears), 32 + sizeof(::ArrayW<::UnityEngine::Transform*>)> __GlobalNamespace_RotateGearsSizeCheck;
  static_assert(sizeof(RotateGears) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RotateGears::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RotateGears::*)()>(&GlobalNamespace::RotateGears::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RotateGears*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RotateGears::SetGearRotation
// Il2CppName: SetGearRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RotateGears::*)(float)>(&GlobalNamespace::RotateGears::SetGearRotation)> {
  static const MethodInfo* get() {
    static auto* percent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RotateGears*), "SetGearRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RotateGears::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
