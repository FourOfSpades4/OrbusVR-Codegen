// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: AmplifyColor.Tonemapping
#include "AmplifyColor/Tonemapping.hpp"
// Including type: AmplifyColor.Quality
#include "AmplifyColor/Quality.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.ColorSpace
#include "UnityEngine/ColorSpace.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Material
  class Material;
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AmplifyColorVolumeBase
  class AmplifyColorVolumeBase;
  // Forward declaring type: AmplifyColorTriggerProxyBase
  class AmplifyColorTriggerProxyBase;
}
// Forward declaring namespace: AmplifyColor
namespace AmplifyColor {
  // Forward declaring type: VolumeEffect
  class VolumeEffect;
  // Forward declaring type: VolumeEffectFlags
  class VolumeEffectFlags;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AmplifyColorBase
  class AmplifyColorBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AmplifyColorBase);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AmplifyColorBase*, "", "AmplifyColorBase");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C9
  #pragma pack(push, 1)
  // Autogenerated type: AmplifyColorBase
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: ACCAAC
  class AmplifyColorBase : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public AmplifyColor.Tonemapping Tonemapper
    // Size: 0x4
    // Offset: 0x18
    ::AmplifyColor::Tonemapping Tonemapper;
    // Field size check
    static_assert(sizeof(::AmplifyColor::Tonemapping) == 0x4);
    // public System.Single Exposure
    // Size: 0x4
    // Offset: 0x1C
    float Exposure;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single LinearWhitePoint
    // Size: 0x4
    // Offset: 0x20
    float LinearWhitePoint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xAD893C
    // public System.Boolean ApplyDithering
    // Size: 0x1
    // Offset: 0x24
    bool ApplyDithering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ApplyDithering and: QualityLevel
    char __padding3[0x3] = {};
    // public AmplifyColor.Quality QualityLevel
    // Size: 0x4
    // Offset: 0x28
    ::AmplifyColor::Quality QualityLevel;
    // Field size check
    static_assert(sizeof(::AmplifyColor::Quality) == 0x4);
    // public System.Single BlendAmount
    // Size: 0x4
    // Offset: 0x2C
    float BlendAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Texture LutTexture
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Texture* LutTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public UnityEngine.Texture LutBlendTexture
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Texture* LutBlendTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public UnityEngine.Texture MaskTexture
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Texture* MaskTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public System.Boolean UseDepthMask
    // Size: 0x1
    // Offset: 0x48
    bool UseDepthMask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UseDepthMask and: DepthMaskCurve
    char __padding9[0x7] = {};
    // public UnityEngine.AnimationCurve DepthMaskCurve
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AnimationCurve* DepthMaskCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public System.Boolean UseVolumes
    // Size: 0x1
    // Offset: 0x58
    bool UseVolumes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UseVolumes and: ExitVolumeBlendTime
    char __padding11[0x3] = {};
    // public System.Single ExitVolumeBlendTime
    // Size: 0x4
    // Offset: 0x5C
    float ExitVolumeBlendTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Transform TriggerVolumeProxy
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* TriggerVolumeProxy;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.LayerMask VolumeCollisionMask
    // Size: 0x4
    // Offset: 0x68
    ::UnityEngine::LayerMask VolumeCollisionMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: VolumeCollisionMask and: ownerCamera
    char __padding14[0x4] = {};
    // private UnityEngine.Camera ownerCamera
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Camera* ownerCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private UnityEngine.Shader shaderBase
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Shader* shaderBase;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader shaderBlend
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Shader* shaderBlend;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader shaderBlendCache
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Shader* shaderBlendCache;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader shaderMask
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Shader* shaderMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader shaderMaskBlend
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Shader* shaderMaskBlend;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader shaderDepthMask
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Shader* shaderDepthMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader shaderDepthMaskBlend
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Shader* shaderDepthMaskBlend;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader shaderProcessOnly
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Shader* shaderProcessOnly;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.RenderTexture blendCacheLut
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::RenderTexture* blendCacheLut;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.Texture2D defaultLut
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Texture2D* defaultLut;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private UnityEngine.Texture2D depthCurveLut
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::Texture2D* depthCurveLut;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private UnityEngine.Color32[] depthCurveColors
    // Size: 0x8
    // Offset: 0xD0
    ::ArrayW<::UnityEngine::Color32> depthCurveColors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color32>) == 0x8);
    // private UnityEngine.ColorSpace colorSpace
    // Size: 0x4
    // Offset: 0xD8
    ::UnityEngine::ColorSpace colorSpace;
    // Field size check
    static_assert(sizeof(::UnityEngine::ColorSpace) == 0x4);
    // private AmplifyColor.Quality qualityLevel
    // Size: 0x4
    // Offset: 0xDC
    ::AmplifyColor::Quality qualityLevel;
    // Field size check
    static_assert(sizeof(::AmplifyColor::Quality) == 0x4);
    // private UnityEngine.Material materialBase
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::Material* materialBase;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material materialBlend
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Material* materialBlend;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material materialBlendCache
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::Material* materialBlendCache;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material materialMask
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Material* materialMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material materialMaskBlend
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::Material* materialMaskBlend;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material materialDepthMask
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::Material* materialDepthMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material materialDepthMaskBlend
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::Material* materialDepthMaskBlend;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material materialProcessOnly
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Material* materialProcessOnly;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Boolean blending
    // Size: 0x1
    // Offset: 0x120
    bool blending;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: blending and: blendingTime
    char __padding38[0x3] = {};
    // private System.Single blendingTime
    // Size: 0x4
    // Offset: 0x124
    float blendingTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single blendingTimeCountdown
    // Size: 0x4
    // Offset: 0x128
    float blendingTimeCountdown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: blendingTimeCountdown and: onFinishBlend
    char __padding40[0x4] = {};
    // private System.Action onFinishBlend
    // Size: 0x8
    // Offset: 0x130
    ::System::Action* onFinishBlend;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private UnityEngine.AnimationCurve prevDepthMaskCurve
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::AnimationCurve* prevDepthMaskCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Boolean volumesBlending
    // Size: 0x1
    // Offset: 0x140
    bool volumesBlending;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: volumesBlending and: volumesBlendingTime
    char __padding43[0x3] = {};
    // private System.Single volumesBlendingTime
    // Size: 0x4
    // Offset: 0x144
    float volumesBlendingTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single volumesBlendingTimeCountdown
    // Size: 0x4
    // Offset: 0x148
    float volumesBlendingTimeCountdown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: volumesBlendingTimeCountdown and: volumesLutBlendTexture
    char __padding45[0x4] = {};
    // private UnityEngine.Texture volumesLutBlendTexture
    // Size: 0x8
    // Offset: 0x150
    ::UnityEngine::Texture* volumesLutBlendTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // private System.Single volumesBlendAmount
    // Size: 0x4
    // Offset: 0x158
    float volumesBlendAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: volumesBlendAmount and: worldLUT
    char __padding47[0x4] = {};
    // private UnityEngine.Texture worldLUT
    // Size: 0x8
    // Offset: 0x160
    ::UnityEngine::Texture* worldLUT;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // private AmplifyColorVolumeBase currentVolumeLut
    // Size: 0x8
    // Offset: 0x168
    ::GlobalNamespace::AmplifyColorVolumeBase* currentVolumeLut;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AmplifyColorVolumeBase*) == 0x8);
    // private UnityEngine.RenderTexture midBlendLUT
    // Size: 0x8
    // Offset: 0x170
    ::UnityEngine::RenderTexture* midBlendLUT;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private System.Boolean blendingFromMidBlend
    // Size: 0x1
    // Offset: 0x178
    bool blendingFromMidBlend;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: blendingFromMidBlend and: worldVolumeEffects
    char __padding51[0x7] = {};
    // private AmplifyColor.VolumeEffect worldVolumeEffects
    // Size: 0x8
    // Offset: 0x180
    ::AmplifyColor::VolumeEffect* worldVolumeEffects;
    // Field size check
    static_assert(sizeof(::AmplifyColor::VolumeEffect*) == 0x8);
    // private AmplifyColor.VolumeEffect currentVolumeEffects
    // Size: 0x8
    // Offset: 0x188
    ::AmplifyColor::VolumeEffect* currentVolumeEffects;
    // Field size check
    static_assert(sizeof(::AmplifyColor::VolumeEffect*) == 0x8);
    // private AmplifyColor.VolumeEffect blendVolumeEffects
    // Size: 0x8
    // Offset: 0x190
    ::AmplifyColor::VolumeEffect* blendVolumeEffects;
    // Field size check
    static_assert(sizeof(::AmplifyColor::VolumeEffect*) == 0x8);
    // private System.Single worldExposure
    // Size: 0x4
    // Offset: 0x198
    float worldExposure;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single currentExposure
    // Size: 0x4
    // Offset: 0x19C
    float currentExposure;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single blendExposure
    // Size: 0x4
    // Offset: 0x1A0
    float blendExposure;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single effectVolumesBlendAdjust
    // Size: 0x4
    // Offset: 0x1A4
    float effectVolumesBlendAdjust;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Collections.Generic.List`1<AmplifyColorVolumeBase> enteredVolumes
    // Size: 0x8
    // Offset: 0x1A8
    ::System::Collections::Generic::List_1<::GlobalNamespace::AmplifyColorVolumeBase*>* enteredVolumes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::AmplifyColorVolumeBase*>*) == 0x8);
    // private AmplifyColorTriggerProxyBase actualTriggerProxy
    // Size: 0x8
    // Offset: 0x1B0
    ::GlobalNamespace::AmplifyColorTriggerProxyBase* actualTriggerProxy;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AmplifyColorTriggerProxyBase*) == 0x8);
    // public AmplifyColor.VolumeEffectFlags EffectFlags
    // Size: 0x8
    // Offset: 0x1B8
    ::AmplifyColor::VolumeEffectFlags* EffectFlags;
    // Field size check
    static_assert(sizeof(::AmplifyColor::VolumeEffectFlags*) == 0x8);
    // private System.String sharedInstanceID
    // Size: 0x8
    // Offset: 0x1C0
    ::StringW sharedInstanceID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean silentError
    // Size: 0x1
    // Offset: 0x1C8
    bool silentError;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Int32 LutSize
    static constexpr const int LutSize = 32;
    // Get static field: static public System.Int32 LutSize
    static int _get_LutSize();
    // Set static field: static public System.Int32 LutSize
    static void _set_LutSize(int value);
    // static field const value: static public System.Int32 LutWidth
    static constexpr const int LutWidth = 1024;
    // Get static field: static public System.Int32 LutWidth
    static int _get_LutWidth();
    // Set static field: static public System.Int32 LutWidth
    static void _set_LutWidth(int value);
    // static field const value: static public System.Int32 LutHeight
    static constexpr const int LutHeight = 32;
    // Get static field: static public System.Int32 LutHeight
    static int _get_LutHeight();
    // Set static field: static public System.Int32 LutHeight
    static void _set_LutHeight(int value);
    // static field const value: static private System.Int32 DepthCurveLutRange
    static constexpr const int DepthCurveLutRange = 1024;
    // Get static field: static private System.Int32 DepthCurveLutRange
    static int _get_DepthCurveLutRange();
    // Set static field: static private System.Int32 DepthCurveLutRange
    static void _set_DepthCurveLutRange(int value);
    // Get instance field reference: public AmplifyColor.Tonemapping Tonemapper
    [[deprecated("Use field access instead!")]] ::AmplifyColor::Tonemapping& dyn_Tonemapper();
    // Get instance field reference: public System.Single Exposure
    [[deprecated("Use field access instead!")]] float& dyn_Exposure();
    // Get instance field reference: public System.Single LinearWhitePoint
    [[deprecated("Use field access instead!")]] float& dyn_LinearWhitePoint();
    // Get instance field reference: public System.Boolean ApplyDithering
    [[deprecated("Use field access instead!")]] bool& dyn_ApplyDithering();
    // Get instance field reference: public AmplifyColor.Quality QualityLevel
    [[deprecated("Use field access instead!")]] ::AmplifyColor::Quality& dyn_QualityLevel();
    // Get instance field reference: public System.Single BlendAmount
    [[deprecated("Use field access instead!")]] float& dyn_BlendAmount();
    // Get instance field reference: public UnityEngine.Texture LutTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_LutTexture();
    // Get instance field reference: public UnityEngine.Texture LutBlendTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_LutBlendTexture();
    // Get instance field reference: public UnityEngine.Texture MaskTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_MaskTexture();
    // Get instance field reference: public System.Boolean UseDepthMask
    [[deprecated("Use field access instead!")]] bool& dyn_UseDepthMask();
    // Get instance field reference: public UnityEngine.AnimationCurve DepthMaskCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_DepthMaskCurve();
    // Get instance field reference: public System.Boolean UseVolumes
    [[deprecated("Use field access instead!")]] bool& dyn_UseVolumes();
    // Get instance field reference: public System.Single ExitVolumeBlendTime
    [[deprecated("Use field access instead!")]] float& dyn_ExitVolumeBlendTime();
    // Get instance field reference: public UnityEngine.Transform TriggerVolumeProxy
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_TriggerVolumeProxy();
    // Get instance field reference: public UnityEngine.LayerMask VolumeCollisionMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_VolumeCollisionMask();
    // Get instance field reference: private UnityEngine.Camera ownerCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_ownerCamera();
    // Get instance field reference: private UnityEngine.Shader shaderBase
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_shaderBase();
    // Get instance field reference: private UnityEngine.Shader shaderBlend
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_shaderBlend();
    // Get instance field reference: private UnityEngine.Shader shaderBlendCache
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_shaderBlendCache();
    // Get instance field reference: private UnityEngine.Shader shaderMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_shaderMask();
    // Get instance field reference: private UnityEngine.Shader shaderMaskBlend
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_shaderMaskBlend();
    // Get instance field reference: private UnityEngine.Shader shaderDepthMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_shaderDepthMask();
    // Get instance field reference: private UnityEngine.Shader shaderDepthMaskBlend
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_shaderDepthMaskBlend();
    // Get instance field reference: private UnityEngine.Shader shaderProcessOnly
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn_shaderProcessOnly();
    // Get instance field reference: private UnityEngine.RenderTexture blendCacheLut
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_blendCacheLut();
    // Get instance field reference: private UnityEngine.Texture2D defaultLut
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_defaultLut();
    // Get instance field reference: private UnityEngine.Texture2D depthCurveLut
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_depthCurveLut();
    // Get instance field reference: private UnityEngine.Color32[] depthCurveColors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color32>& dyn_depthCurveColors();
    // Get instance field reference: private UnityEngine.ColorSpace colorSpace
    [[deprecated("Use field access instead!")]] ::UnityEngine::ColorSpace& dyn_colorSpace();
    // Get instance field reference: private AmplifyColor.Quality qualityLevel
    [[deprecated("Use field access instead!")]] ::AmplifyColor::Quality& dyn_qualityLevel();
    // Get instance field reference: private UnityEngine.Material materialBase
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_materialBase();
    // Get instance field reference: private UnityEngine.Material materialBlend
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_materialBlend();
    // Get instance field reference: private UnityEngine.Material materialBlendCache
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_materialBlendCache();
    // Get instance field reference: private UnityEngine.Material materialMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_materialMask();
    // Get instance field reference: private UnityEngine.Material materialMaskBlend
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_materialMaskBlend();
    // Get instance field reference: private UnityEngine.Material materialDepthMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_materialDepthMask();
    // Get instance field reference: private UnityEngine.Material materialDepthMaskBlend
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_materialDepthMaskBlend();
    // Get instance field reference: private UnityEngine.Material materialProcessOnly
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_materialProcessOnly();
    // Get instance field reference: private System.Boolean blending
    [[deprecated("Use field access instead!")]] bool& dyn_blending();
    // Get instance field reference: private System.Single blendingTime
    [[deprecated("Use field access instead!")]] float& dyn_blendingTime();
    // Get instance field reference: private System.Single blendingTimeCountdown
    [[deprecated("Use field access instead!")]] float& dyn_blendingTimeCountdown();
    // Get instance field reference: private System.Action onFinishBlend
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_onFinishBlend();
    // Get instance field reference: private UnityEngine.AnimationCurve prevDepthMaskCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_prevDepthMaskCurve();
    // Get instance field reference: private System.Boolean volumesBlending
    [[deprecated("Use field access instead!")]] bool& dyn_volumesBlending();
    // Get instance field reference: private System.Single volumesBlendingTime
    [[deprecated("Use field access instead!")]] float& dyn_volumesBlendingTime();
    // Get instance field reference: private System.Single volumesBlendingTimeCountdown
    [[deprecated("Use field access instead!")]] float& dyn_volumesBlendingTimeCountdown();
    // Get instance field reference: private UnityEngine.Texture volumesLutBlendTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_volumesLutBlendTexture();
    // Get instance field reference: private System.Single volumesBlendAmount
    [[deprecated("Use field access instead!")]] float& dyn_volumesBlendAmount();
    // Get instance field reference: private UnityEngine.Texture worldLUT
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_worldLUT();
    // Get instance field reference: private AmplifyColorVolumeBase currentVolumeLut
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AmplifyColorVolumeBase*& dyn_currentVolumeLut();
    // Get instance field reference: private UnityEngine.RenderTexture midBlendLUT
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_midBlendLUT();
    // Get instance field reference: private System.Boolean blendingFromMidBlend
    [[deprecated("Use field access instead!")]] bool& dyn_blendingFromMidBlend();
    // Get instance field reference: private AmplifyColor.VolumeEffect worldVolumeEffects
    [[deprecated("Use field access instead!")]] ::AmplifyColor::VolumeEffect*& dyn_worldVolumeEffects();
    // Get instance field reference: private AmplifyColor.VolumeEffect currentVolumeEffects
    [[deprecated("Use field access instead!")]] ::AmplifyColor::VolumeEffect*& dyn_currentVolumeEffects();
    // Get instance field reference: private AmplifyColor.VolumeEffect blendVolumeEffects
    [[deprecated("Use field access instead!")]] ::AmplifyColor::VolumeEffect*& dyn_blendVolumeEffects();
    // Get instance field reference: private System.Single worldExposure
    [[deprecated("Use field access instead!")]] float& dyn_worldExposure();
    // Get instance field reference: private System.Single currentExposure
    [[deprecated("Use field access instead!")]] float& dyn_currentExposure();
    // Get instance field reference: private System.Single blendExposure
    [[deprecated("Use field access instead!")]] float& dyn_blendExposure();
    // Get instance field reference: private System.Single effectVolumesBlendAdjust
    [[deprecated("Use field access instead!")]] float& dyn_effectVolumesBlendAdjust();
    // Get instance field reference: private System.Collections.Generic.List`1<AmplifyColorVolumeBase> enteredVolumes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::AmplifyColorVolumeBase*>*& dyn_enteredVolumes();
    // Get instance field reference: private AmplifyColorTriggerProxyBase actualTriggerProxy
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AmplifyColorTriggerProxyBase*& dyn_actualTriggerProxy();
    // Get instance field reference: public AmplifyColor.VolumeEffectFlags EffectFlags
    [[deprecated("Use field access instead!")]] ::AmplifyColor::VolumeEffectFlags*& dyn_EffectFlags();
    // Get instance field reference: private System.String sharedInstanceID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_sharedInstanceID();
    // Get instance field reference: private System.Boolean silentError
    [[deprecated("Use field access instead!")]] bool& dyn_silentError();
    // public UnityEngine.Texture2D get_DefaultLut()
    // Offset: 0xF052D0
    ::UnityEngine::Texture2D* get_DefaultLut();
    // public System.Boolean get_IsBlending()
    // Offset: 0xF05610
    bool get_IsBlending();
    // private System.Single get_effectVolumesBlendAdjusted()
    // Offset: 0xF05618
    float get_effectVolumesBlendAdjusted();
    // public System.String get_SharedInstanceID()
    // Offset: 0xF04384
    ::StringW get_SharedInstanceID();
    // public System.Boolean get_WillItBlend()
    // Offset: 0xF056B8
    bool get_WillItBlend();
    // public System.Void NewSharedInstanceID()
    // Offset: 0xF0577C
    void NewSharedInstanceID();
    // private System.Void ReportMissingShaders()
    // Offset: 0xF05804
    void ReportMissingShaders();
    // private System.Void ReportNotSupported()
    // Offset: 0xF05884
    void ReportNotSupported();
    // private System.Boolean CheckShader(UnityEngine.Shader s)
    // Offset: 0xF05904
    bool CheckShader(::UnityEngine::Shader* s);
    // private System.Boolean CheckShaders()
    // Offset: 0xF059C0
    bool CheckShaders();
    // private System.Boolean CheckSupport()
    // Offset: 0xF05A40
    bool CheckSupport();
    // private System.Void OnEnable()
    // Offset: 0xF05A7C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xF05EDC
    void OnDisable();
    // private System.Void VolumesBlendTo(UnityEngine.Texture blendTargetLUT, System.Single blendTimeInSec)
    // Offset: 0xF06110
    void VolumesBlendTo(::UnityEngine::Texture* blendTargetLUT, float blendTimeInSec);
    // public System.Void BlendTo(UnityEngine.Texture blendTargetLUT, System.Single blendTimeInSec, System.Action onFinishBlend)
    // Offset: 0xF0612C
    void BlendTo(::UnityEngine::Texture* blendTargetLUT, float blendTimeInSec, ::System::Action* onFinishBlend);
    // private System.Void CheckCamera()
    // Offset: 0xF0614C
    void CheckCamera();
    // private System.Void Start()
    // Offset: 0xF06258
    void Start();
    // private System.Void Update()
    // Offset: 0xF062C0
    void Update();
    // public System.Void EnterVolume(AmplifyColorVolumeBase volume)
    // Offset: 0xF06E34
    void EnterVolume(::GlobalNamespace::AmplifyColorVolumeBase* volume);
    // public System.Void ExitVolume(AmplifyColorVolumeBase volume)
    // Offset: 0xF06EE4
    void ExitVolume(::GlobalNamespace::AmplifyColorVolumeBase* volume);
    // private System.Void UpdateVolumes()
    // Offset: 0xF066DC
    void UpdateVolumes();
    // private System.Void SetupShader()
    // Offset: 0xF06F90
    void SetupShader();
    // private System.Void ReleaseMaterials()
    // Offset: 0xF05FB4
    void ReleaseMaterials();
    // private UnityEngine.Texture2D CreateDefaultLut()
    // Offset: 0xF0535C
    ::UnityEngine::Texture2D* CreateDefaultLut();
    // private UnityEngine.Texture2D CreateDepthCurveLut()
    // Offset: 0xF070A0
    ::UnityEngine::Texture2D* CreateDepthCurveLut();
    // private System.Void UpdateDepthCurveLut()
    // Offset: 0xF0722C
    void UpdateDepthCurveLut();
    // private System.Void CheckUpdateDepthCurveLut()
    // Offset: 0xF073C4
    void CheckUpdateDepthCurveLut();
    // private System.Void CreateHelperTextures()
    // Offset: 0xF075C4
    void CreateHelperTextures();
    // private System.Boolean CheckMaterialAndShader(UnityEngine.Material material, System.String name)
    // Offset: 0xF07864
    bool CheckMaterialAndShader(::UnityEngine::Material* material, ::StringW name);
    // private System.Boolean CreateMaterials()
    // Offset: 0xF05C7C
    bool CreateMaterials();
    // private System.Void SetMaterialKeyword(System.String keyword, System.Boolean state)
    // Offset: 0xF07A0C
    void SetMaterialKeyword(::StringW keyword, bool state);
    // private System.Void SafeRelease(ref T obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SafeRelease(ByRef<T> obj) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AmplifyColorBase::SafeRelease");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SafeRelease", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, byref(obj));
    }
    // private System.Void ReleaseTextures()
    // Offset: 0xF06078
    void ReleaseTextures();
    // static public System.Boolean ValidateLutDimensions(UnityEngine.Texture lut)
    // Offset: 0xF07A20
    static bool ValidateLutDimensions(::UnityEngine::Texture* lut);
    // private System.Void UpdatePostEffectParams()
    // Offset: 0xF07BB4
    void UpdatePostEffectParams();
    // private System.Int32 ComputeShaderPass()
    // Offset: 0xF07C44
    int ComputeShaderPass();
    // private System.Void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination)
    // Offset: 0xF07CC8
    void OnRenderImage(::UnityEngine::RenderTexture* source, ::UnityEngine::RenderTexture* destination);
    // public System.Void .ctor()
    // Offset: 0xF087F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AmplifyColorBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AmplifyColorBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AmplifyColorBase*, creationType>()));
    }
  }; // AmplifyColorBase
  #pragma pack(pop)
  static check_size<sizeof(AmplifyColorBase), 456 + sizeof(bool)> __GlobalNamespace_AmplifyColorBaseSizeCheck;
  static_assert(sizeof(AmplifyColorBase) == 0x1C9);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::get_DefaultLut
// Il2CppName: get_DefaultLut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::get_DefaultLut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "get_DefaultLut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::get_IsBlending
// Il2CppName: get_IsBlending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::get_IsBlending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "get_IsBlending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::get_effectVolumesBlendAdjusted
// Il2CppName: get_effectVolumesBlendAdjusted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::get_effectVolumesBlendAdjusted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "get_effectVolumesBlendAdjusted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::get_SharedInstanceID
// Il2CppName: get_SharedInstanceID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::get_SharedInstanceID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "get_SharedInstanceID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::get_WillItBlend
// Il2CppName: get_WillItBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::get_WillItBlend)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "get_WillItBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::NewSharedInstanceID
// Il2CppName: NewSharedInstanceID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::NewSharedInstanceID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "NewSharedInstanceID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::ReportMissingShaders
// Il2CppName: ReportMissingShaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::ReportMissingShaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "ReportMissingShaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::ReportNotSupported
// Il2CppName: ReportNotSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::ReportNotSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "ReportNotSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::CheckShader
// Il2CppName: CheckShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AmplifyColorBase::*)(::UnityEngine::Shader*)>(&GlobalNamespace::AmplifyColorBase::CheckShader)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("UnityEngine", "Shader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "CheckShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::CheckShaders
// Il2CppName: CheckShaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::CheckShaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "CheckShaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::CheckSupport
// Il2CppName: CheckSupport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::CheckSupport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "CheckSupport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::VolumesBlendTo
// Il2CppName: VolumesBlendTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)(::UnityEngine::Texture*, float)>(&GlobalNamespace::AmplifyColorBase::VolumesBlendTo)> {
  static const MethodInfo* get() {
    static auto* blendTargetLUT = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* blendTimeInSec = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "VolumesBlendTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blendTargetLUT, blendTimeInSec});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::BlendTo
// Il2CppName: BlendTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)(::UnityEngine::Texture*, float, ::System::Action*)>(&GlobalNamespace::AmplifyColorBase::BlendTo)> {
  static const MethodInfo* get() {
    static auto* blendTargetLUT = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    static auto* blendTimeInSec = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* onFinishBlend = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "BlendTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blendTargetLUT, blendTimeInSec, onFinishBlend});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::CheckCamera
// Il2CppName: CheckCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::CheckCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "CheckCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::EnterVolume
// Il2CppName: EnterVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)(::GlobalNamespace::AmplifyColorVolumeBase*)>(&GlobalNamespace::AmplifyColorBase::EnterVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("", "AmplifyColorVolumeBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "EnterVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::ExitVolume
// Il2CppName: ExitVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)(::GlobalNamespace::AmplifyColorVolumeBase*)>(&GlobalNamespace::AmplifyColorBase::ExitVolume)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("", "AmplifyColorVolumeBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "ExitVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::UpdateVolumes
// Il2CppName: UpdateVolumes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::UpdateVolumes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "UpdateVolumes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::SetupShader
// Il2CppName: SetupShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::SetupShader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "SetupShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::ReleaseMaterials
// Il2CppName: ReleaseMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::ReleaseMaterials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "ReleaseMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::CreateDefaultLut
// Il2CppName: CreateDefaultLut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::CreateDefaultLut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "CreateDefaultLut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::CreateDepthCurveLut
// Il2CppName: CreateDepthCurveLut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::CreateDepthCurveLut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "CreateDepthCurveLut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::UpdateDepthCurveLut
// Il2CppName: UpdateDepthCurveLut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::UpdateDepthCurveLut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "UpdateDepthCurveLut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::CheckUpdateDepthCurveLut
// Il2CppName: CheckUpdateDepthCurveLut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::CheckUpdateDepthCurveLut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "CheckUpdateDepthCurveLut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::CreateHelperTextures
// Il2CppName: CreateHelperTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::CreateHelperTextures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "CreateHelperTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::CheckMaterialAndShader
// Il2CppName: CheckMaterialAndShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AmplifyColorBase::*)(::UnityEngine::Material*, ::StringW)>(&GlobalNamespace::AmplifyColorBase::CheckMaterialAndShader)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "CheckMaterialAndShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material, name});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::CreateMaterials
// Il2CppName: CreateMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::CreateMaterials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "CreateMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::SetMaterialKeyword
// Il2CppName: SetMaterialKeyword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)(::StringW, bool)>(&GlobalNamespace::AmplifyColorBase::SetMaterialKeyword)> {
  static const MethodInfo* get() {
    static auto* keyword = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "SetMaterialKeyword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyword, state});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::SafeRelease
// Il2CppName: SafeRelease
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::ReleaseTextures
// Il2CppName: ReleaseTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::ReleaseTextures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "ReleaseTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::ValidateLutDimensions
// Il2CppName: ValidateLutDimensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Texture*)>(&GlobalNamespace::AmplifyColorBase::ValidateLutDimensions)> {
  static const MethodInfo* get() {
    static auto* lut = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "ValidateLutDimensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lut});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::UpdatePostEffectParams
// Il2CppName: UpdatePostEffectParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::UpdatePostEffectParams)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "UpdatePostEffectParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::ComputeShaderPass
// Il2CppName: ComputeShaderPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::AmplifyColorBase::*)()>(&GlobalNamespace::AmplifyColorBase::ComputeShaderPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "ComputeShaderPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::OnRenderImage
// Il2CppName: OnRenderImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AmplifyColorBase::*)(::UnityEngine::RenderTexture*, ::UnityEngine::RenderTexture*)>(&GlobalNamespace::AmplifyColorBase::OnRenderImage)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* destination = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AmplifyColorBase*), "OnRenderImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, destination});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AmplifyColorBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
