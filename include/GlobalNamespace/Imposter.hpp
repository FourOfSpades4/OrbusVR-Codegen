// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ImposterProxy
  class ImposterProxy;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Imposter
  class Imposter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Imposter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Imposter*, "", "Imposter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x8C
  #pragma pack(push, 1)
  // Autogenerated type: Imposter
  // [TokenAttribute] Offset: FFFFFFFF
  class Imposter : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::Imposter::ImposterLodMethod
    struct ImposterLodMethod;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Imposter/ImposterLodMethod
    // [TokenAttribute] Offset: FFFFFFFF
    struct ImposterLodMethod/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ImposterLodMethod
      constexpr ImposterLodMethod(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Imposter/ImposterLodMethod Distance
      static constexpr const int Distance = 0;
      // Get static field: static public Imposter/ImposterLodMethod Distance
      static ::GlobalNamespace::Imposter::ImposterLodMethod _get_Distance();
      // Set static field: static public Imposter/ImposterLodMethod Distance
      static void _set_Distance(::GlobalNamespace::Imposter::ImposterLodMethod value);
      // static field const value: static public Imposter/ImposterLodMethod ScreenSize
      static constexpr const int ScreenSize = 1;
      // Get static field: static public Imposter/ImposterLodMethod ScreenSize
      static ::GlobalNamespace::Imposter::ImposterLodMethod _get_ScreenSize();
      // Set static field: static public Imposter/ImposterLodMethod ScreenSize
      static void _set_ScreenSize(::GlobalNamespace::Imposter::ImposterLodMethod value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Imposter/ImposterLodMethod
    #pragma pack(pop)
    static check_size<sizeof(Imposter::ImposterLodMethod), 0 + sizeof(int)> __GlobalNamespace_Imposter_ImposterLodMethodSizeCheck;
    static_assert(sizeof(Imposter::ImposterLodMethod) == 0x4);
    public:
    // public System.Int32 maxTextureSize
    // Size: 0x4
    // Offset: 0x18
    int maxTextureSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Imposter/ImposterLodMethod lodMethod
    // Size: 0x4
    // Offset: 0x1C
    ::GlobalNamespace::Imposter::ImposterLodMethod lodMethod;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Imposter::ImposterLodMethod) == 0x4);
    // public System.Single maxDistance
    // Size: 0x4
    // Offset: 0x20
    float maxDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single angleTolerance
    // Size: 0x4
    // Offset: 0x24
    float angleTolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single distanceTolerance
    // Size: 0x4
    // Offset: 0x28
    float distanceTolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single zOffset
    // Size: 0x4
    // Offset: 0x2C
    float zOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean castShadow
    // Size: 0x1
    // Offset: 0x30
    bool castShadow;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: castShadow and: shadowZOffset
    char __padding6[0x3] = {};
    // public System.Single shadowZOffset
    // Size: 0x4
    // Offset: 0x34
    float shadowZOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxShadowDistance
    // Size: 0x4
    // Offset: 0x38
    float maxShadowDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 shadowDownSampling
    // Size: 0x4
    // Offset: 0x3C
    int shadowDownSampling;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean dynamic
    // Size: 0x1
    // Offset: 0x40
    bool dynamic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: dynamic and: updateInterval
    char __padding10[0x3] = {};
    // public System.Single updateInterval
    // Size: 0x4
    // Offset: 0x44
    float updateInterval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single pixelSize
    // Size: 0x4
    // Offset: 0x48
    float pixelSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 lastTextureSize
    // Size: 0x4
    // Offset: 0x4C
    int lastTextureSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private ImposterProxy proxy
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::ImposterProxy* proxy;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ImposterProxy*) == 0x8);
    // private UnityEngine.Vector3 lastCameraVector
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 lastCameraVector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: lastCameraVector and: renderers
    char __padding15[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.Renderer> renderers
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>* renderers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<UnityEngine.Renderer,System.Int32> originalRenderLayers
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::Renderer*, int>* originalRenderLayers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::Renderer*, int>*) == 0x8);
    // private System.Boolean forceUpdate
    // Size: 0x1
    // Offset: 0x78
    bool forceUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forceUpdate and: lastUpdateTime
    char __padding18[0x3] = {};
    // private System.Single lastUpdateTime
    // Size: 0x4
    // Offset: 0x7C
    float lastUpdateTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeOffset
    // Size: 0x4
    // Offset: 0x80
    float timeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean forceDisableFromSphereCuller
    // Size: 0x1
    // Offset: 0x84
    bool forceDisableFromSphereCuller;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forceDisableFromSphereCuller and: distanceChangeTolerance
    char __padding21[0x3] = {};
    // private System.Single distanceChangeTolerance
    // Size: 0x4
    // Offset: 0x88
    float distanceChangeTolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 maxTextureSize
    [[deprecated("Use field access instead!")]] int& dyn_maxTextureSize();
    // Get instance field reference: public Imposter/ImposterLodMethod lodMethod
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Imposter::ImposterLodMethod& dyn_lodMethod();
    // Get instance field reference: public System.Single maxDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxDistance();
    // Get instance field reference: public System.Single angleTolerance
    [[deprecated("Use field access instead!")]] float& dyn_angleTolerance();
    // Get instance field reference: public System.Single distanceTolerance
    [[deprecated("Use field access instead!")]] float& dyn_distanceTolerance();
    // Get instance field reference: public System.Single zOffset
    [[deprecated("Use field access instead!")]] float& dyn_zOffset();
    // Get instance field reference: public System.Boolean castShadow
    [[deprecated("Use field access instead!")]] bool& dyn_castShadow();
    // Get instance field reference: public System.Single shadowZOffset
    [[deprecated("Use field access instead!")]] float& dyn_shadowZOffset();
    // Get instance field reference: public System.Single maxShadowDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxShadowDistance();
    // Get instance field reference: public System.Int32 shadowDownSampling
    [[deprecated("Use field access instead!")]] int& dyn_shadowDownSampling();
    // Get instance field reference: public System.Boolean dynamic
    [[deprecated("Use field access instead!")]] bool& dyn_dynamic();
    // Get instance field reference: public System.Single updateInterval
    [[deprecated("Use field access instead!")]] float& dyn_updateInterval();
    // Get instance field reference: private System.Single pixelSize
    [[deprecated("Use field access instead!")]] float& dyn_pixelSize();
    // Get instance field reference: private System.Int32 lastTextureSize
    [[deprecated("Use field access instead!")]] int& dyn_lastTextureSize();
    // Get instance field reference: private ImposterProxy proxy
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ImposterProxy*& dyn_proxy();
    // Get instance field reference: private UnityEngine.Vector3 lastCameraVector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastCameraVector();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Renderer> renderers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*& dyn_renderers();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<UnityEngine.Renderer,System.Int32> originalRenderLayers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::Renderer*, int>*& dyn_originalRenderLayers();
    // Get instance field reference: private System.Boolean forceUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_forceUpdate();
    // Get instance field reference: private System.Single lastUpdateTime
    [[deprecated("Use field access instead!")]] float& dyn_lastUpdateTime();
    // Get instance field reference: private System.Single timeOffset
    [[deprecated("Use field access instead!")]] float& dyn_timeOffset();
    // Get instance field reference: public System.Boolean forceDisableFromSphereCuller
    [[deprecated("Use field access instead!")]] bool& dyn_forceDisableFromSphereCuller();
    // Get instance field reference: private System.Single distanceChangeTolerance
    [[deprecated("Use field access instead!")]] float& dyn_distanceChangeTolerance();
    // private System.Void Start()
    // Offset: 0x149E1CC
    void Start();
    // public System.Void ForceUpdate()
    // Offset: 0x149E444
    void ForceUpdate();
    // public System.Void Init()
    // Offset: 0x149E294
    void Init();
    // private System.Void extractRenderer()
    // Offset: 0x149E450
    void extractRenderer();
    // private System.Void createProxy()
    // Offset: 0x149E75C
    void createProxy();
    // private System.Void activate()
    // Offset: 0x149EEC0
    void activate();
    // private System.Void deactivate()
    // Offset: 0x149EAF4
    void deactivate();
    // public System.Void UpdateImposter()
    // Offset: 0x149F134
    void UpdateImposter();
    // private System.Boolean NeedsUpdate(UnityEngine.Vector3 currentVector)
    // Offset: 0x149F958
    bool NeedsUpdate(::UnityEngine::Vector3 currentVector);
    // private System.Boolean IsInRange()
    // Offset: 0x149F6DC
    bool IsInRange();
    // private System.Void fitTexture()
    // Offset: 0x149FAB8
    void fitTexture();
    // private System.Int32 nlpo2(System.Int32 x)
    // Offset: 0x149FE54
    int nlpo2(int x);
    // public System.Void .ctor()
    // Offset: 0x14A0094
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Imposter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Imposter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Imposter*, creationType>()));
    }
  }; // Imposter
  #pragma pack(pop)
  static check_size<sizeof(Imposter), 136 + sizeof(float)> __GlobalNamespace_ImposterSizeCheck;
  static_assert(sizeof(Imposter) == 0x8C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Imposter::ImposterLodMethod, "", "Imposter/ImposterLodMethod");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Imposter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Imposter::*)()>(&GlobalNamespace::Imposter::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Imposter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Imposter::ForceUpdate
// Il2CppName: ForceUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Imposter::*)()>(&GlobalNamespace::Imposter::ForceUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Imposter*), "ForceUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Imposter::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Imposter::*)()>(&GlobalNamespace::Imposter::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Imposter*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Imposter::extractRenderer
// Il2CppName: extractRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Imposter::*)()>(&GlobalNamespace::Imposter::extractRenderer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Imposter*), "extractRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Imposter::createProxy
// Il2CppName: createProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Imposter::*)()>(&GlobalNamespace::Imposter::createProxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Imposter*), "createProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Imposter::activate
// Il2CppName: activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Imposter::*)()>(&GlobalNamespace::Imposter::activate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Imposter*), "activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Imposter::deactivate
// Il2CppName: deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Imposter::*)()>(&GlobalNamespace::Imposter::deactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Imposter*), "deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Imposter::UpdateImposter
// Il2CppName: UpdateImposter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Imposter::*)()>(&GlobalNamespace::Imposter::UpdateImposter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Imposter*), "UpdateImposter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Imposter::NeedsUpdate
// Il2CppName: NeedsUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::Imposter::*)(::UnityEngine::Vector3)>(&GlobalNamespace::Imposter::NeedsUpdate)> {
  static const MethodInfo* get() {
    static auto* currentVector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Imposter*), "NeedsUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentVector});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Imposter::IsInRange
// Il2CppName: IsInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::Imposter::*)()>(&GlobalNamespace::Imposter::IsInRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Imposter*), "IsInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Imposter::fitTexture
// Il2CppName: fitTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Imposter::*)()>(&GlobalNamespace::Imposter::fitTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Imposter*), "fitTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Imposter::nlpo2
// Il2CppName: nlpo2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::Imposter::*)(int)>(&GlobalNamespace::Imposter::nlpo2)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Imposter*), "nlpo2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Imposter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
