// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SuperTextMesh
  class SuperTextMesh;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: STMMatchRect
  class STMMatchRect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::STMMatchRect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::STMMatchRect*, "", "STMMatchRect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: STMMatchRect
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: ACD47C
  class STMMatchRect : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.RectTransform tr
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::RectTransform* tr;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // public SuperTextMesh stm
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::SuperTextMesh* stm;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh*) == 0x8);
    // public UnityEngine.Vector2 size
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Vector2 size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 offset
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Vector2 offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.RectTransform tr
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_tr();
    // Get instance field reference: public SuperTextMesh stm
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh*& dyn_stm();
    // Get instance field reference: public UnityEngine.Vector2 size
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_size();
    // Get instance field reference: public UnityEngine.Vector2 offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_offset();
    // public System.Void OnEnable()
    // Offset: 0xE2E93C
    void OnEnable();
    // public System.Void OnDisable()
    // Offset: 0xE2E9E8
    void OnDisable();
    // public System.Void Match()
    // Offset: 0xE2EA78
    void Match();
    // public System.Void .ctor()
    // Offset: 0xE2EC6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMMatchRect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMMatchRect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMMatchRect*, creationType>()));
    }
  }; // STMMatchRect
  #pragma pack(pop)
  static check_size<sizeof(STMMatchRect), 48 + sizeof(::UnityEngine::Vector2)> __GlobalNamespace_STMMatchRectSizeCheck;
  static_assert(sizeof(STMMatchRect) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::STMMatchRect::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMMatchRect::*)()>(&GlobalNamespace::STMMatchRect::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMMatchRect*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMMatchRect::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMMatchRect::*)()>(&GlobalNamespace::STMMatchRect::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMMatchRect*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMMatchRect::Match
// Il2CppName: Match
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMMatchRect::*)()>(&GlobalNamespace::STMMatchRect::Match)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMMatchRect*), "Match", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMMatchRect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
