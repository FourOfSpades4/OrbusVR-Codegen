// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TaskExample
#include "GlobalNamespace/TaskExample.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TaskExample::$$c__DisplayClass13_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TaskExample::$$c__DisplayClass13_0*, "", "TaskExample/<>c__DisplayClass13_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: TaskExample/<>c__DisplayClass13_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: ACEA88
  class TaskExample::$$c__DisplayClass13_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 iCopy
    // Size: 0x4
    // Offset: 0x10
    int iCopy;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return iCopy;
    }
    // Get instance field reference: public System.Int32 iCopy
    [[deprecated("Use field access instead!")]] int& dyn_iCopy();
    // public System.Void .ctor()
    // Offset: 0x103D8C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TaskExample::$$c__DisplayClass13_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c__DisplayClass13_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TaskExample::$$c__DisplayClass13_0*, creationType>()));
    }
    // System.Int32 <RunMultipleTasks>b__0()
    // Offset: 0x103E3CC
    int $RunMultipleTasks$b__0();
  }; // TaskExample/<>c__DisplayClass13_0
  #pragma pack(pop)
  static check_size<sizeof(TaskExample::$$c__DisplayClass13_0), 16 + sizeof(int)> __GlobalNamespace_TaskExample_$$c__DisplayClass13_0SizeCheck;
  static_assert(sizeof(TaskExample::$$c__DisplayClass13_0) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::$$c__DisplayClass13_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::$$c__DisplayClass13_0::$RunMultipleTasks$b__0
// Il2CppName: <RunMultipleTasks>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::TaskExample::$$c__DisplayClass13_0::*)()>(&GlobalNamespace::TaskExample::$$c__DisplayClass13_0::$RunMultipleTasks$b__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample::$$c__DisplayClass13_0*), "<RunMultipleTasks>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
