// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CFX_SpawnSystem
  class CFX_SpawnSystem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CFX_SpawnSystem);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CFX_SpawnSystem*, "", "CFX_SpawnSystem");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: CFX_SpawnSystem
  // [TokenAttribute] Offset: FFFFFFFF
  class CFX_SpawnSystem : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject[] objectsToPreload
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::GameObject*> objectsToPreload;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public System.Int32[] objectsToPreloadTimes
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<int> objectsToPreloadTimes;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Boolean hideObjectsInHierarchy
    // Size: 0x1
    // Offset: 0x28
    bool hideObjectsInHierarchy;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean spawnAsChildren
    // Size: 0x1
    // Offset: 0x29
    bool spawnAsChildren;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean onlyGetInactiveObjects
    // Size: 0x1
    // Offset: 0x2A
    bool onlyGetInactiveObjects;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean instantiateIfNeeded
    // Size: 0x1
    // Offset: 0x2B
    bool instantiateIfNeeded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean allObjectsLoaded
    // Size: 0x1
    // Offset: 0x2C
    bool allObjectsLoaded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allObjectsLoaded and: instantiatedObjects
    char __padding6[0x3] = {};
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<UnityEngine.GameObject>> instantiatedObjects
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*>* instantiatedObjects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> poolCursors
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<int, int>* poolCursors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private CFX_SpawnSystem instance
    static ::GlobalNamespace::CFX_SpawnSystem* _get_instance();
    // Set static field: static private CFX_SpawnSystem instance
    static void _set_instance(::GlobalNamespace::CFX_SpawnSystem* value);
    // Get instance field reference: public UnityEngine.GameObject[] objectsToPreload
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_objectsToPreload();
    // Get instance field reference: public System.Int32[] objectsToPreloadTimes
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_objectsToPreloadTimes();
    // Get instance field reference: public System.Boolean hideObjectsInHierarchy
    [[deprecated("Use field access instead!")]] bool& dyn_hideObjectsInHierarchy();
    // Get instance field reference: public System.Boolean spawnAsChildren
    [[deprecated("Use field access instead!")]] bool& dyn_spawnAsChildren();
    // Get instance field reference: public System.Boolean onlyGetInactiveObjects
    [[deprecated("Use field access instead!")]] bool& dyn_onlyGetInactiveObjects();
    // Get instance field reference: public System.Boolean instantiateIfNeeded
    [[deprecated("Use field access instead!")]] bool& dyn_instantiateIfNeeded();
    // Get instance field reference: private System.Boolean allObjectsLoaded
    [[deprecated("Use field access instead!")]] bool& dyn_allObjectsLoaded();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<UnityEngine.GameObject>> instantiatedObjects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*>*& dyn_instantiatedObjects();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> poolCursors
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn_poolCursors();
    // static public UnityEngine.GameObject GetNextObject(UnityEngine.GameObject sourceObj, System.Boolean activateObject)
    // Offset: 0xDDD7B0
    static ::UnityEngine::GameObject* GetNextObject(::UnityEngine::GameObject* sourceObj, bool activateObject);
    // static public System.Void PreloadObject(UnityEngine.GameObject sourceObj, System.Int32 poolSize)
    // Offset: 0xDDE0C4
    static void PreloadObject(::UnityEngine::GameObject* sourceObj, int poolSize);
    // static public System.Void UnloadObjects(UnityEngine.GameObject sourceObj)
    // Offset: 0xDDE4A4
    static void UnloadObjects(::UnityEngine::GameObject* sourceObj);
    // static public System.Boolean get_AllObjectsLoaded()
    // Offset: 0xDDE954
    static bool get_AllObjectsLoaded();
    // private System.Void addObjectToPool(UnityEngine.GameObject sourceObject, System.Int32 number)
    // Offset: 0xDDE13C
    void addObjectToPool(::UnityEngine::GameObject* sourceObject, int number);
    // private System.Void removeObjectsFromPool(UnityEngine.GameObject sourceObject)
    // Offset: 0xDDE50C
    void removeObjectsFromPool(::UnityEngine::GameObject* sourceObject);
    // private System.Void increasePoolCursor(System.Int32 uniqueId)
    // Offset: 0xDDDEEC
    void increasePoolCursor(int uniqueId);
    // private System.Void Awake()
    // Offset: 0xDDE9B4
    void Awake();
    // private System.Void Start()
    // Offset: 0xDDEA9C
    void Start();
    // public System.Void .ctor()
    // Offset: 0xDDEB70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CFX_SpawnSystem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CFX_SpawnSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CFX_SpawnSystem*, creationType>()));
    }
  }; // CFX_SpawnSystem
  #pragma pack(pop)
  static check_size<sizeof(CFX_SpawnSystem), 56 + sizeof(::System::Collections::Generic::Dictionary_2<int, int>*)> __GlobalNamespace_CFX_SpawnSystemSizeCheck;
  static_assert(sizeof(CFX_SpawnSystem) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CFX_SpawnSystem::GetNextObject
// Il2CppName: GetNextObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (*)(::UnityEngine::GameObject*, bool)>(&GlobalNamespace::CFX_SpawnSystem::GetNextObject)> {
  static const MethodInfo* get() {
    static auto* sourceObj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* activateObject = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CFX_SpawnSystem*), "GetNextObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceObj, activateObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CFX_SpawnSystem::PreloadObject
// Il2CppName: PreloadObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, int)>(&GlobalNamespace::CFX_SpawnSystem::PreloadObject)> {
  static const MethodInfo* get() {
    static auto* sourceObj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* poolSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CFX_SpawnSystem*), "PreloadObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceObj, poolSize});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CFX_SpawnSystem::UnloadObjects
// Il2CppName: UnloadObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*)>(&GlobalNamespace::CFX_SpawnSystem::UnloadObjects)> {
  static const MethodInfo* get() {
    static auto* sourceObj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CFX_SpawnSystem*), "UnloadObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceObj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CFX_SpawnSystem::get_AllObjectsLoaded
// Il2CppName: get_AllObjectsLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::CFX_SpawnSystem::get_AllObjectsLoaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CFX_SpawnSystem*), "get_AllObjectsLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CFX_SpawnSystem::addObjectToPool
// Il2CppName: addObjectToPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CFX_SpawnSystem::*)(::UnityEngine::GameObject*, int)>(&GlobalNamespace::CFX_SpawnSystem::addObjectToPool)> {
  static const MethodInfo* get() {
    static auto* sourceObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CFX_SpawnSystem*), "addObjectToPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceObject, number});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CFX_SpawnSystem::removeObjectsFromPool
// Il2CppName: removeObjectsFromPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CFX_SpawnSystem::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::CFX_SpawnSystem::removeObjectsFromPool)> {
  static const MethodInfo* get() {
    static auto* sourceObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CFX_SpawnSystem*), "removeObjectsFromPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CFX_SpawnSystem::increasePoolCursor
// Il2CppName: increasePoolCursor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CFX_SpawnSystem::*)(int)>(&GlobalNamespace::CFX_SpawnSystem::increasePoolCursor)> {
  static const MethodInfo* get() {
    static auto* uniqueId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CFX_SpawnSystem*), "increasePoolCursor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uniqueId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CFX_SpawnSystem::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CFX_SpawnSystem::*)()>(&GlobalNamespace::CFX_SpawnSystem::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CFX_SpawnSystem*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CFX_SpawnSystem::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CFX_SpawnSystem::*)()>(&GlobalNamespace::CFX_SpawnSystem::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CFX_SpawnSystem*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CFX_SpawnSystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
