// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MessagePump
#include "GlobalNamespace/MessagePump.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: WaitHandle
  class WaitHandle;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MessagePump::$$c__DisplayClass10_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MessagePump::$$c__DisplayClass10_0*, "", "MessagePump/<>c__DisplayClass10_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: MessagePump/<>c__DisplayClass10_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: ABD768
  class MessagePump::$$c__DisplayClass10_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Threading.WaitHandle handle
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::WaitHandle* handle;
    // Field size check
    static_assert(sizeof(::System::Threading::WaitHandle*) == 0x8);
    // public System.DateTime then
    // Size: 0x8
    // Offset: 0x18
    ::System::DateTime then;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    public:
    // Get instance field reference: public System.Threading.WaitHandle handle
    [[deprecated("Use field access instead!")]] ::System::Threading::WaitHandle*& dyn_handle();
    // Get instance field reference: public System.DateTime then
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_then();
    // public System.Void .ctor()
    // Offset: 0x1601D00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MessagePump::$$c__DisplayClass10_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MessagePump::$$c__DisplayClass10_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MessagePump::$$c__DisplayClass10_0*, creationType>()));
    }
    // System.Boolean <Run>b__0()
    // Offset: 0x1601D08
    bool $Run$b__0();
  }; // MessagePump/<>c__DisplayClass10_0
  #pragma pack(pop)
  static check_size<sizeof(MessagePump::$$c__DisplayClass10_0), 24 + sizeof(::System::DateTime)> __GlobalNamespace_MessagePump_$$c__DisplayClass10_0SizeCheck;
  static_assert(sizeof(MessagePump::$$c__DisplayClass10_0) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MessagePump::$$c__DisplayClass10_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MessagePump::$$c__DisplayClass10_0::$Run$b__0
// Il2CppName: <Run>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MessagePump::$$c__DisplayClass10_0::*)()>(&GlobalNamespace::MessagePump::$$c__DisplayClass10_0::$Run$b__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MessagePump::$$c__DisplayClass10_0*), "<Run>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
