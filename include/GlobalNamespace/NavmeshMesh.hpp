// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NavmeshMesh
  class NavmeshMesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NavmeshMesh);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NavmeshMesh*, "", "NavmeshMesh");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: NavmeshMesh
  // [TokenAttribute] Offset: FFFFFFFF
  class NavmeshMesh : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Mesh myMesh
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Mesh* myMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.MeshFilter myMeshFilter
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::MeshFilter* myMeshFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // private UnityEngine.MeshRenderer myMeshRenderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MeshRenderer* myMeshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.Material meshMaterial
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* meshMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Mesh myMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_myMesh();
    // Get instance field reference: private UnityEngine.MeshFilter myMeshFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn_myMeshFilter();
    // Get instance field reference: private UnityEngine.MeshRenderer myMeshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_myMeshRenderer();
    // Get instance field reference: public UnityEngine.Material meshMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_meshMaterial();
    // private System.Void Start()
    // Offset: 0xF5534C
    void Start();
    // public System.Void .ctor()
    // Offset: 0xF554E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavmeshMesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NavmeshMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavmeshMesh*, creationType>()));
    }
  }; // NavmeshMesh
  #pragma pack(pop)
  static check_size<sizeof(NavmeshMesh), 48 + sizeof(::UnityEngine::Material*)> __GlobalNamespace_NavmeshMeshSizeCheck;
  static_assert(sizeof(NavmeshMesh) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NavmeshMesh::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NavmeshMesh::*)()>(&GlobalNamespace::NavmeshMesh::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NavmeshMesh*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NavmeshMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
