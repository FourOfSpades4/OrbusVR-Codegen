// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Plane
#include "UnityEngine/Plane.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Imposter
  class Imposter;
  // Forward declaring type: ImposterTexture
  class ImposterTexture;
  // Forward declaring type: ImposterProxy
  class ImposterProxy;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Light
  class Light;
  // Forward declaring type: Bounds
  struct Bounds;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ImposterManager
  class ImposterManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ImposterManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ImposterManager*, "", "ImposterManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC0
  #pragma pack(push, 1)
  // Autogenerated type: ImposterManager
  // [TokenAttribute] Offset: FFFFFFFF
  class ImposterManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ImposterManager::CachingBehaviour
    struct CachingBehaviour;
    // Nested type: ::GlobalNamespace::ImposterManager::$forceUpdate$d__31
    class $forceUpdate$d__31;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: ImposterManager/CachingBehaviour
    // [TokenAttribute] Offset: FFFFFFFF
    struct CachingBehaviour/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: CachingBehaviour
      constexpr CachingBehaviour(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public ImposterManager/CachingBehaviour discardInvisibleImpostors
      static constexpr const int discardInvisibleImpostors = 0;
      // Get static field: static public ImposterManager/CachingBehaviour discardInvisibleImpostors
      static ::GlobalNamespace::ImposterManager::CachingBehaviour _get_discardInvisibleImpostors();
      // Set static field: static public ImposterManager/CachingBehaviour discardInvisibleImpostors
      static void _set_discardInvisibleImpostors(::GlobalNamespace::ImposterManager::CachingBehaviour value);
      // static field const value: static public ImposterManager/CachingBehaviour cacheInvisibleIposters
      static constexpr const int cacheInvisibleIposters = 1;
      // Get static field: static public ImposterManager/CachingBehaviour cacheInvisibleIposters
      static ::GlobalNamespace::ImposterManager::CachingBehaviour _get_cacheInvisibleIposters();
      // Set static field: static public ImposterManager/CachingBehaviour cacheInvisibleIposters
      static void _set_cacheInvisibleIposters(::GlobalNamespace::ImposterManager::CachingBehaviour value);
      // static field const value: static public ImposterManager/CachingBehaviour preloadAndCacheInvisibleImposters
      static constexpr const int preloadAndCacheInvisibleImposters = 2;
      // Get static field: static public ImposterManager/CachingBehaviour preloadAndCacheInvisibleImposters
      static ::GlobalNamespace::ImposterManager::CachingBehaviour _get_preloadAndCacheInvisibleImposters();
      // Set static field: static public ImposterManager/CachingBehaviour preloadAndCacheInvisibleImposters
      static void _set_preloadAndCacheInvisibleImposters(::GlobalNamespace::ImposterManager::CachingBehaviour value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // ImposterManager/CachingBehaviour
    #pragma pack(pop)
    static check_size<sizeof(ImposterManager::CachingBehaviour), 0 + sizeof(int)> __GlobalNamespace_ImposterManager_CachingBehaviourSizeCheck;
    static_assert(sizeof(ImposterManager::CachingBehaviour) == 0x4);
    public:
    // public System.Boolean active
    // Size: 0x1
    // Offset: 0x18
    bool active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: active and: imposterLayer
    char __padding0[0x3] = {};
    // public System.Int32 imposterLayer
    // Size: 0x4
    // Offset: 0x1C
    int imposterLayer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean useMainCamera
    // Size: 0x1
    // Offset: 0x20
    bool useMainCamera;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useMainCamera and: mainCamera
    char __padding2[0x7] = {};
    // public UnityEngine.Camera mainCamera
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Camera* mainCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // public System.Int32 antialiasing
    // Size: 0x4
    // Offset: 0x30
    int antialiasing;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean castShadow
    // Size: 0x1
    // Offset: 0x34
    bool castShadow;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: castShadow and: mainLight
    char __padding5[0x3] = {};
    // public UnityEngine.Light mainLight
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Light* mainLight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Light*) == 0x8);
    // public ImposterManager/CachingBehaviour cachingBehaviour
    // Size: 0x4
    // Offset: 0x40
    ::GlobalNamespace::ImposterManager::CachingBehaviour cachingBehaviour;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ImposterManager::CachingBehaviour) == 0x4);
    // public System.Single preLoadFovFactor
    // Size: 0x4
    // Offset: 0x44
    float preLoadFovFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 preloadRate
    // Size: 0x4
    // Offset: 0x48
    int preloadRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: preloadRate and: imposters
    char __padding9[0x4] = {};
    // public System.Collections.Generic.List`1<Imposter> imposters
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::GlobalNamespace::Imposter*>* imposters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::Imposter*>*) == 0x8);
    // public System.Collections.Generic.List`1<ImposterTexture> imposterTextures
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::GlobalNamespace::ImposterTexture*>* imposterTextures;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::ImposterTexture*>*) == 0x8);
    // public System.Collections.Generic.List`1<ImposterTexture> freeImposterTextures
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::GlobalNamespace::ImposterTexture*>* freeImposterTextures;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::ImposterTexture*>*) == 0x8);
    // public System.Single textureMemory
    // Size: 0x4
    // Offset: 0x68
    float textureMemory;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: textureMemory and: proxyPrefab
    char __padding13[0x4] = {};
    // public ImposterProxy proxyPrefab
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::ImposterProxy* proxyPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ImposterProxy*) == 0x8);
    // public UnityEngine.Camera imposterRenderingCamera
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Camera* imposterRenderingCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private UnityEngine.Plane[] cameraPlanes
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::UnityEngine::Plane> cameraPlanes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Plane>) == 0x8);
    // private UnityEngine.Plane[] cachingCameraPlanes
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::UnityEngine::Plane> cachingCameraPlanes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Plane>) == 0x8);
    // private System.Boolean lastCastShadow
    // Size: 0x1
    // Offset: 0x90
    bool lastCastShadow;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lastCastShadow and: invalidImposters
    char __padding18[0x7] = {};
    // private System.Collections.Generic.List`1<Imposter> invalidImposters
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::List_1<::GlobalNamespace::Imposter*>* invalidImposters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::Imposter*>*) == 0x8);
    // private UnityEngine.Camera cachingCamera
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Camera* cachingCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private System.Int32 preloadCounter
    // Size: 0x4
    // Offset: 0xA8
    int preloadCounter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: preloadCounter and: lastMainCamera
    char __padding21[0x4] = {};
    // private UnityEngine.Camera lastMainCamera
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Camera* lastMainCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private System.Single timeSinceUpdate
    // Size: 0x4
    // Offset: 0xB8
    float timeSinceUpdate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single updateEvery
    // Size: 0x4
    // Offset: 0xBC
    float updateEvery;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public ImposterManager instance
    static ::GlobalNamespace::ImposterManager* _get_instance();
    // Set static field: static public ImposterManager instance
    static void _set_instance(::GlobalNamespace::ImposterManager* value);
    // Get instance field reference: public System.Boolean active
    [[deprecated("Use field access instead!")]] bool& dyn_active();
    // Get instance field reference: public System.Int32 imposterLayer
    [[deprecated("Use field access instead!")]] int& dyn_imposterLayer();
    // Get instance field reference: public System.Boolean useMainCamera
    [[deprecated("Use field access instead!")]] bool& dyn_useMainCamera();
    // Get instance field reference: public UnityEngine.Camera mainCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_mainCamera();
    // Get instance field reference: public System.Int32 antialiasing
    [[deprecated("Use field access instead!")]] int& dyn_antialiasing();
    // Get instance field reference: public System.Boolean castShadow
    [[deprecated("Use field access instead!")]] bool& dyn_castShadow();
    // Get instance field reference: public UnityEngine.Light mainLight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Light*& dyn_mainLight();
    // Get instance field reference: public ImposterManager/CachingBehaviour cachingBehaviour
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ImposterManager::CachingBehaviour& dyn_cachingBehaviour();
    // Get instance field reference: public System.Single preLoadFovFactor
    [[deprecated("Use field access instead!")]] float& dyn_preLoadFovFactor();
    // Get instance field reference: public System.Int32 preloadRate
    [[deprecated("Use field access instead!")]] int& dyn_preloadRate();
    // Get instance field reference: public System.Collections.Generic.List`1<Imposter> imposters
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::Imposter*>*& dyn_imposters();
    // Get instance field reference: public System.Collections.Generic.List`1<ImposterTexture> imposterTextures
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::ImposterTexture*>*& dyn_imposterTextures();
    // Get instance field reference: public System.Collections.Generic.List`1<ImposterTexture> freeImposterTextures
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::ImposterTexture*>*& dyn_freeImposterTextures();
    // Get instance field reference: public System.Single textureMemory
    [[deprecated("Use field access instead!")]] float& dyn_textureMemory();
    // Get instance field reference: public ImposterProxy proxyPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ImposterProxy*& dyn_proxyPrefab();
    // Get instance field reference: public UnityEngine.Camera imposterRenderingCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_imposterRenderingCamera();
    // Get instance field reference: private UnityEngine.Plane[] cameraPlanes
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Plane>& dyn_cameraPlanes();
    // Get instance field reference: private UnityEngine.Plane[] cachingCameraPlanes
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Plane>& dyn_cachingCameraPlanes();
    // Get instance field reference: private System.Boolean lastCastShadow
    [[deprecated("Use field access instead!")]] bool& dyn_lastCastShadow();
    // Get instance field reference: private System.Collections.Generic.List`1<Imposter> invalidImposters
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::Imposter*>*& dyn_invalidImposters();
    // Get instance field reference: private UnityEngine.Camera cachingCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_cachingCamera();
    // Get instance field reference: private System.Int32 preloadCounter
    [[deprecated("Use field access instead!")]] int& dyn_preloadCounter();
    // Get instance field reference: private UnityEngine.Camera lastMainCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_lastMainCamera();
    // Get instance field reference: private System.Single timeSinceUpdate
    [[deprecated("Use field access instead!")]] float& dyn_timeSinceUpdate();
    // Get instance field reference: private System.Single updateEvery
    [[deprecated("Use field access instead!")]] float& dyn_updateEvery();
    // private System.Void Awake()
    // Offset: 0x14A0198
    void Awake();
    // private System.Void Start()
    // Offset: 0x14A0214
    void Start();
    // public System.Void ForceImposterUpdate()
    // Offset: 0x14A07A4
    void ForceImposterUpdate();
    // public System.Void ForceImposterUpdate(System.Int32 maxUpdatesPerFrame)
    // Offset: 0x14A07D4
    void ForceImposterUpdate(int maxUpdatesPerFrame);
    // private System.Collections.IEnumerator forceUpdate(System.Int32 maxUpdates)
    // Offset: 0x14A0800
    ::System::Collections::IEnumerator* forceUpdate(int maxUpdates);
    // private System.Void SetupCachingCamera()
    // Offset: 0x14A0248
    void SetupCachingCamera();
    // private System.Void LateUpdate()
    // Offset: 0x14A08C4
    void LateUpdate();
    // public System.Boolean isVisible(UnityEngine.Bounds bound)
    // Offset: 0x14A0D10
    bool isVisible(::UnityEngine::Bounds bound);
    // public System.Boolean isVisibleInCache(UnityEngine.Bounds bound)
    // Offset: 0x14A0D4C
    bool isVisibleInCache(::UnityEngine::Bounds bound);
    // public ImposterTexture getRenderTexture(ImposterProxy newOwner, System.Int32 size)
    // Offset: 0x14A0D88
    ::GlobalNamespace::ImposterTexture* getRenderTexture(::GlobalNamespace::ImposterProxy* newOwner, int size);
    // public System.Void giveBackRenderTexture(ImposterTexture imposterTexture)
    // Offset: 0x14A0FE8
    void giveBackRenderTexture(::GlobalNamespace::ImposterTexture* imposterTexture);
    // public System.Void garbageCollect()
    // Offset: 0x14A10DC
    void garbageCollect();
    // public System.Boolean getPreloadLock(Imposter imposter)
    // Offset: 0x149FA10
    bool getPreloadLock(::GlobalNamespace::Imposter* imposter);
    // private System.Void Clear()
    // Offset: 0x14A12F8
    void Clear();
    // public System.Void .ctor()
    // Offset: 0x14A165C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImposterManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImposterManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImposterManager*, creationType>()));
    }
  }; // ImposterManager
  #pragma pack(pop)
  static check_size<sizeof(ImposterManager), 188 + sizeof(float)> __GlobalNamespace_ImposterManagerSizeCheck;
  static_assert(sizeof(ImposterManager) == 0xC0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ImposterManager::CachingBehaviour, "", "ImposterManager/CachingBehaviour");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ImposterManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterManager::*)()>(&GlobalNamespace::ImposterManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterManager::*)()>(&GlobalNamespace::ImposterManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterManager::ForceImposterUpdate
// Il2CppName: ForceImposterUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterManager::*)()>(&GlobalNamespace::ImposterManager::ForceImposterUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterManager*), "ForceImposterUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterManager::ForceImposterUpdate
// Il2CppName: ForceImposterUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterManager::*)(int)>(&GlobalNamespace::ImposterManager::ForceImposterUpdate)> {
  static const MethodInfo* get() {
    static auto* maxUpdatesPerFrame = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterManager*), "ForceImposterUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxUpdatesPerFrame});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterManager::forceUpdate
// Il2CppName: forceUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::ImposterManager::*)(int)>(&GlobalNamespace::ImposterManager::forceUpdate)> {
  static const MethodInfo* get() {
    static auto* maxUpdates = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterManager*), "forceUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxUpdates});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterManager::SetupCachingCamera
// Il2CppName: SetupCachingCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterManager::*)()>(&GlobalNamespace::ImposterManager::SetupCachingCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterManager*), "SetupCachingCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterManager::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterManager::*)()>(&GlobalNamespace::ImposterManager::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterManager*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterManager::isVisible
// Il2CppName: isVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ImposterManager::*)(::UnityEngine::Bounds)>(&GlobalNamespace::ImposterManager::isVisible)> {
  static const MethodInfo* get() {
    static auto* bound = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterManager*), "isVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bound});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterManager::isVisibleInCache
// Il2CppName: isVisibleInCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ImposterManager::*)(::UnityEngine::Bounds)>(&GlobalNamespace::ImposterManager::isVisibleInCache)> {
  static const MethodInfo* get() {
    static auto* bound = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterManager*), "isVisibleInCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bound});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterManager::getRenderTexture
// Il2CppName: getRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ImposterTexture* (GlobalNamespace::ImposterManager::*)(::GlobalNamespace::ImposterProxy*, int)>(&GlobalNamespace::ImposterManager::getRenderTexture)> {
  static const MethodInfo* get() {
    static auto* newOwner = &::il2cpp_utils::GetClassFromName("", "ImposterProxy")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterManager*), "getRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newOwner, size});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterManager::giveBackRenderTexture
// Il2CppName: giveBackRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterManager::*)(::GlobalNamespace::ImposterTexture*)>(&GlobalNamespace::ImposterManager::giveBackRenderTexture)> {
  static const MethodInfo* get() {
    static auto* imposterTexture = &::il2cpp_utils::GetClassFromName("", "ImposterTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterManager*), "giveBackRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{imposterTexture});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterManager::garbageCollect
// Il2CppName: garbageCollect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterManager::*)()>(&GlobalNamespace::ImposterManager::garbageCollect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterManager*), "garbageCollect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterManager::getPreloadLock
// Il2CppName: getPreloadLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ImposterManager::*)(::GlobalNamespace::Imposter*)>(&GlobalNamespace::ImposterManager::getPreloadLock)> {
  static const MethodInfo* get() {
    static auto* imposter = &::il2cpp_utils::GetClassFromName("", "Imposter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterManager*), "getPreloadLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{imposter});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterManager::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterManager::*)()>(&GlobalNamespace::ImposterManager::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterManager*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
