// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PageCurl
  class PageCurl;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DemoController
  class DemoController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DemoController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DemoController*, "", "DemoController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: DemoController
  // [TokenAttribute] Offset: FFFFFFFF
  class DemoController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean automatic
    // Size: 0x1
    // Offset: 0x18
    bool automatic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean canFlip
    // Size: 0x1
    // Offset: 0x19
    bool canFlip;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canFlip and: curler
    char __padding1[0x6] = {};
    // private PageCurl curler
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::PageCurl* curler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PageCurl*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean automatic
    [[deprecated("Use field access instead!")]] bool& dyn_automatic();
    // Get instance field reference: private System.Boolean canFlip
    [[deprecated("Use field access instead!")]] bool& dyn_canFlip();
    // Get instance field reference: private PageCurl curler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PageCurl*& dyn_curler();
    // private System.Void Awake()
    // Offset: 0xDF2940
    void Awake();
    // private System.Void Update()
    // Offset: 0xDF29C8
    void Update();
    // public System.Void OnPageFlip()
    // Offset: 0xDF2B4C
    void OnPageFlip();
    // public System.Void .ctor()
    // Offset: 0xDF2B94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DemoController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DemoController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DemoController*, creationType>()));
    }
  }; // DemoController
  #pragma pack(pop)
  static check_size<sizeof(DemoController), 32 + sizeof(::GlobalNamespace::PageCurl*)> __GlobalNamespace_DemoControllerSizeCheck;
  static_assert(sizeof(DemoController) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DemoController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DemoController::*)()>(&GlobalNamespace::DemoController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DemoController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DemoController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DemoController::*)()>(&GlobalNamespace::DemoController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DemoController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DemoController::OnPageFlip
// Il2CppName: OnPageFlip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DemoController::*)()>(&GlobalNamespace::DemoController::OnPageFlip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DemoController*), "OnPageFlip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DemoController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
