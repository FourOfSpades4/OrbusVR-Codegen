// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ClickedEventHandler
  class ClickedEventHandler;
  // Forward declaring type: ClickedEventArgs
  struct ClickedEventArgs;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OrbusTrackedController
  class OrbusTrackedController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OrbusTrackedController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OrbusTrackedController*, "", "OrbusTrackedController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x188
  #pragma pack(push, 1)
  // Autogenerated type: OrbusTrackedController
  // [TokenAttribute] Offset: FFFFFFFF
  class OrbusTrackedController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.UInt32 controllerIndex
    // Size: 0x4
    // Offset: 0x18
    uint controllerIndex;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: controllerIndex and: controllerState
    char __padding0[0x4] = {};
    // public Valve.VR.VRControllerState_t controllerState
    // Size: 0x40
    // Offset: 0x20
    ::Valve::VR::VRControllerState_t controllerState;
    // Field size check
    static_assert(sizeof(::Valve::VR::VRControllerState_t) == 0x40);
    // public System.Boolean triggerPressed
    // Size: 0x1
    // Offset: 0x60
    bool triggerPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean steamPressed
    // Size: 0x1
    // Offset: 0x61
    bool steamPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean menuPressed
    // Size: 0x1
    // Offset: 0x62
    bool menuPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean oculusButtonPressed
    // Size: 0x1
    // Offset: 0x63
    bool oculusButtonPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean padPressed
    // Size: 0x1
    // Offset: 0x64
    bool padPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean padTouched
    // Size: 0x1
    // Offset: 0x65
    bool padTouched;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean gripped
    // Size: 0x1
    // Offset: 0x66
    bool gripped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isGesturePointing
    // Size: 0x1
    // Offset: 0x67
    bool isGesturePointing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isGestureThumbUp
    // Size: 0x1
    // Offset: 0x68
    bool isGestureThumbUp;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isGestureThumbUp and: realTimeLastPadClick
    char __padding10[0x3] = {};
    // private System.Single realTimeLastPadClick
    // Size: 0x4
    // Offset: 0x6C
    float realTimeLastPadClick;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single padClickTimeAllowed
    // Size: 0x4
    // Offset: 0x70
    float padClickTimeAllowed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeSinceTriggerClicked
    // Size: 0x4
    // Offset: 0x74
    float timeSinceTriggerClicked;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean disableGrip
    // Size: 0x1
    // Offset: 0x78
    bool disableGrip;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean disableTrigger
    // Size: 0x1
    // Offset: 0x79
    bool disableTrigger;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean disablePadButton
    // Size: 0x1
    // Offset: 0x7A
    bool disablePadButton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disablePadButton and: MenuButtonClicked
    char __padding16[0x5] = {};
    // [CompilerGeneratedAttribute] Offset: 0xADA218
    // private ClickedEventHandler MenuButtonClicked
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::ClickedEventHandler* MenuButtonClicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA228
    // private ClickedEventHandler MenuButtonUnclicked
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::ClickedEventHandler* MenuButtonUnclicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA238
    // private ClickedEventHandler TriggerClicked
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::ClickedEventHandler* TriggerClicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA248
    // private ClickedEventHandler TriggerUnclicked
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::ClickedEventHandler* TriggerUnclicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA258
    // private ClickedEventHandler SteamClicked
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::ClickedEventHandler* SteamClicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA268
    // private ClickedEventHandler PadClicked
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::ClickedEventHandler* PadClicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA278
    // private ClickedEventHandler PadUnclicked
    // Size: 0x8
    // Offset: 0xB0
    ::GlobalNamespace::ClickedEventHandler* PadUnclicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA288
    // private ClickedEventHandler PadTouched
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::ClickedEventHandler* PadTouched;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA298
    // private ClickedEventHandler PadUntouched
    // Size: 0x8
    // Offset: 0xC0
    ::GlobalNamespace::ClickedEventHandler* PadUntouched;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA2A8
    // private ClickedEventHandler Gripped
    // Size: 0x8
    // Offset: 0xC8
    ::GlobalNamespace::ClickedEventHandler* Gripped;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA2B8
    // private ClickedEventHandler Ungripped
    // Size: 0x8
    // Offset: 0xD0
    ::GlobalNamespace::ClickedEventHandler* Ungripped;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA2C8
    // private ClickedEventHandler PadTouchMoved
    // Size: 0x8
    // Offset: 0xD8
    ::GlobalNamespace::ClickedEventHandler* PadTouchMoved;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA2D8
    // private ClickedEventHandler PadDoubleClicked
    // Size: 0x8
    // Offset: 0xE0
    ::GlobalNamespace::ClickedEventHandler* PadDoubleClicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA2E8
    // private ClickedEventHandler OculusButtonClicked
    // Size: 0x8
    // Offset: 0xE8
    ::GlobalNamespace::ClickedEventHandler* OculusButtonClicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA2F8
    // private ClickedEventHandler OculusButtonUnclicked
    // Size: 0x8
    // Offset: 0xF0
    ::GlobalNamespace::ClickedEventHandler* OculusButtonUnclicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA308
    // private ClickedEventHandler ModuleOverridePadTouchMoved
    // Size: 0x8
    // Offset: 0xF8
    ::GlobalNamespace::ClickedEventHandler* ModuleOverridePadTouchMoved;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA318
    // private ClickedEventHandler ModuleOverridePadUntouched
    // Size: 0x8
    // Offset: 0x100
    ::GlobalNamespace::ClickedEventHandler* ModuleOverridePadUntouched;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // private System.Single hapticTimer
    // Size: 0x4
    // Offset: 0x108
    float hapticTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private OVRInput/Controller myOVRController
    // Size: 0x4
    // Offset: 0x10C
    ::GlobalNamespace::OVRInput::Controller myOVRController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    // private System.Boolean firstFrame
    // Size: 0x1
    // Offset: 0x110
    bool firstFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: firstFrame and: ovrControllerIndex
    char __padding36[0x3] = {};
    // public System.Int32 ovrControllerIndex
    // Size: 0x4
    // Offset: 0x114
    int ovrControllerIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xADA328
    // private UnityEngine.Vector3 <velocity>k__BackingField
    // Size: 0xC
    // Offset: 0x118
    ::UnityEngine::Vector3 velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [CompilerGeneratedAttribute] Offset: 0xADA338
    // private UnityEngine.Vector3 <angularVelocity>k__BackingField
    // Size: 0xC
    // Offset: 0x124
    ::UnityEngine::Vector3 angularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 oculusPositionAdjustment
    // Size: 0xC
    // Offset: 0x130
    ::UnityEngine::Vector3 oculusPositionAdjustment;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean isIndexController
    // Size: 0x1
    // Offset: 0x13C
    bool isIndexController;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isIndexController and: prevQuaternion
    char __padding41[0x3] = {};
    // private UnityEngine.Quaternion prevQuaternion
    // Size: 0x10
    // Offset: 0x140
    ::UnityEngine::Quaternion prevQuaternion;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion currentQuaternion
    // Size: 0x10
    // Offset: 0x150
    ::UnityEngine::Quaternion currentQuaternion;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 prevPosition
    // Size: 0xC
    // Offset: 0x160
    ::UnityEngine::Vector3 prevPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 currentPosition
    // Size: 0xC
    // Offset: 0x16C
    ::UnityEngine::Vector3 currentPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single timeSinceFixedUpdate
    // Size: 0x4
    // Offset: 0x178
    float timeSinceFixedUpdate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: timeSinceFixedUpdate and: posSamples
    char __padding46[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> posSamples
    // Size: 0x8
    // Offset: 0x180
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* posSamples;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.UInt32 controllerIndex
    [[deprecated("Use field access instead!")]] uint& dyn_controllerIndex();
    // Get instance field reference: public Valve.VR.VRControllerState_t controllerState
    [[deprecated("Use field access instead!")]] ::Valve::VR::VRControllerState_t& dyn_controllerState();
    // Get instance field reference: public System.Boolean triggerPressed
    [[deprecated("Use field access instead!")]] bool& dyn_triggerPressed();
    // Get instance field reference: public System.Boolean steamPressed
    [[deprecated("Use field access instead!")]] bool& dyn_steamPressed();
    // Get instance field reference: public System.Boolean menuPressed
    [[deprecated("Use field access instead!")]] bool& dyn_menuPressed();
    // Get instance field reference: public System.Boolean oculusButtonPressed
    [[deprecated("Use field access instead!")]] bool& dyn_oculusButtonPressed();
    // Get instance field reference: public System.Boolean padPressed
    [[deprecated("Use field access instead!")]] bool& dyn_padPressed();
    // Get instance field reference: public System.Boolean padTouched
    [[deprecated("Use field access instead!")]] bool& dyn_padTouched();
    // Get instance field reference: public System.Boolean gripped
    [[deprecated("Use field access instead!")]] bool& dyn_gripped();
    // Get instance field reference: public System.Boolean isGesturePointing
    [[deprecated("Use field access instead!")]] bool& dyn_isGesturePointing();
    // Get instance field reference: public System.Boolean isGestureThumbUp
    [[deprecated("Use field access instead!")]] bool& dyn_isGestureThumbUp();
    // Get instance field reference: private System.Single realTimeLastPadClick
    [[deprecated("Use field access instead!")]] float& dyn_realTimeLastPadClick();
    // Get instance field reference: private System.Single padClickTimeAllowed
    [[deprecated("Use field access instead!")]] float& dyn_padClickTimeAllowed();
    // Get instance field reference: private System.Single timeSinceTriggerClicked
    [[deprecated("Use field access instead!")]] float& dyn_timeSinceTriggerClicked();
    // Get instance field reference: public System.Boolean disableGrip
    [[deprecated("Use field access instead!")]] bool& dyn_disableGrip();
    // Get instance field reference: public System.Boolean disableTrigger
    [[deprecated("Use field access instead!")]] bool& dyn_disableTrigger();
    // Get instance field reference: public System.Boolean disablePadButton
    [[deprecated("Use field access instead!")]] bool& dyn_disablePadButton();
    // Get instance field reference: private ClickedEventHandler MenuButtonClicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_MenuButtonClicked();
    // Get instance field reference: private ClickedEventHandler MenuButtonUnclicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_MenuButtonUnclicked();
    // Get instance field reference: private ClickedEventHandler TriggerClicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_TriggerClicked();
    // Get instance field reference: private ClickedEventHandler TriggerUnclicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_TriggerUnclicked();
    // Get instance field reference: private ClickedEventHandler SteamClicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_SteamClicked();
    // Get instance field reference: private ClickedEventHandler PadClicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_PadClicked();
    // Get instance field reference: private ClickedEventHandler PadUnclicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_PadUnclicked();
    // Get instance field reference: private ClickedEventHandler PadTouched
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_PadTouched();
    // Get instance field reference: private ClickedEventHandler PadUntouched
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_PadUntouched();
    // Get instance field reference: private ClickedEventHandler Gripped
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_Gripped();
    // Get instance field reference: private ClickedEventHandler Ungripped
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_Ungripped();
    // Get instance field reference: private ClickedEventHandler PadTouchMoved
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_PadTouchMoved();
    // Get instance field reference: private ClickedEventHandler PadDoubleClicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_PadDoubleClicked();
    // Get instance field reference: private ClickedEventHandler OculusButtonClicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_OculusButtonClicked();
    // Get instance field reference: private ClickedEventHandler OculusButtonUnclicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_OculusButtonUnclicked();
    // Get instance field reference: private ClickedEventHandler ModuleOverridePadTouchMoved
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_ModuleOverridePadTouchMoved();
    // Get instance field reference: private ClickedEventHandler ModuleOverridePadUntouched
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_ModuleOverridePadUntouched();
    // Get instance field reference: private System.Single hapticTimer
    [[deprecated("Use field access instead!")]] float& dyn_hapticTimer();
    // Get instance field reference: private OVRInput/Controller myOVRController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn_myOVRController();
    // Get instance field reference: private System.Boolean firstFrame
    [[deprecated("Use field access instead!")]] bool& dyn_firstFrame();
    // Get instance field reference: public System.Int32 ovrControllerIndex
    [[deprecated("Use field access instead!")]] int& dyn_ovrControllerIndex();
    // Get instance field reference: private UnityEngine.Vector3 <velocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$velocity$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <angularVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$angularVelocity$k__BackingField();
    // Get instance field reference: public UnityEngine.Vector3 oculusPositionAdjustment
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_oculusPositionAdjustment();
    // Get instance field reference: public System.Boolean isIndexController
    [[deprecated("Use field access instead!")]] bool& dyn_isIndexController();
    // Get instance field reference: private UnityEngine.Quaternion prevQuaternion
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_prevQuaternion();
    // Get instance field reference: private UnityEngine.Quaternion currentQuaternion
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_currentQuaternion();
    // Get instance field reference: private UnityEngine.Vector3 prevPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_prevPosition();
    // Get instance field reference: private UnityEngine.Vector3 currentPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_currentPosition();
    // Get instance field reference: private System.Single timeSinceFixedUpdate
    [[deprecated("Use field access instead!")]] float& dyn_timeSinceFixedUpdate();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector3> posSamples
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_posSamples();
    // public System.Void add_MenuButtonClicked(ClickedEventHandler value)
    // Offset: 0xD865FC
    void add_MenuButtonClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_MenuButtonClicked(ClickedEventHandler value)
    // Offset: 0xD866E8
    void remove_MenuButtonClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_MenuButtonUnclicked(ClickedEventHandler value)
    // Offset: 0xD867D4
    void add_MenuButtonUnclicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_MenuButtonUnclicked(ClickedEventHandler value)
    // Offset: 0xD868C0
    void remove_MenuButtonUnclicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_TriggerClicked(ClickedEventHandler value)
    // Offset: 0xD869AC
    void add_TriggerClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_TriggerClicked(ClickedEventHandler value)
    // Offset: 0xD86A98
    void remove_TriggerClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_TriggerUnclicked(ClickedEventHandler value)
    // Offset: 0xD86B84
    void add_TriggerUnclicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_TriggerUnclicked(ClickedEventHandler value)
    // Offset: 0xD86C70
    void remove_TriggerUnclicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_SteamClicked(ClickedEventHandler value)
    // Offset: 0xD86D5C
    void add_SteamClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_SteamClicked(ClickedEventHandler value)
    // Offset: 0xD86E48
    void remove_SteamClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_PadClicked(ClickedEventHandler value)
    // Offset: 0xD86F34
    void add_PadClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_PadClicked(ClickedEventHandler value)
    // Offset: 0xD87020
    void remove_PadClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_PadUnclicked(ClickedEventHandler value)
    // Offset: 0xD8710C
    void add_PadUnclicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_PadUnclicked(ClickedEventHandler value)
    // Offset: 0xD871F8
    void remove_PadUnclicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_PadTouched(ClickedEventHandler value)
    // Offset: 0xD872E4
    void add_PadTouched(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_PadTouched(ClickedEventHandler value)
    // Offset: 0xD873D0
    void remove_PadTouched(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_PadUntouched(ClickedEventHandler value)
    // Offset: 0xD874BC
    void add_PadUntouched(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_PadUntouched(ClickedEventHandler value)
    // Offset: 0xD875A8
    void remove_PadUntouched(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_Gripped(ClickedEventHandler value)
    // Offset: 0xD87694
    void add_Gripped(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_Gripped(ClickedEventHandler value)
    // Offset: 0xD87780
    void remove_Gripped(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_Ungripped(ClickedEventHandler value)
    // Offset: 0xD8786C
    void add_Ungripped(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_Ungripped(ClickedEventHandler value)
    // Offset: 0xD87958
    void remove_Ungripped(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_PadTouchMoved(ClickedEventHandler value)
    // Offset: 0xD87A44
    void add_PadTouchMoved(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_PadTouchMoved(ClickedEventHandler value)
    // Offset: 0xD87B30
    void remove_PadTouchMoved(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_PadDoubleClicked(ClickedEventHandler value)
    // Offset: 0xD87C1C
    void add_PadDoubleClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_PadDoubleClicked(ClickedEventHandler value)
    // Offset: 0xD87D08
    void remove_PadDoubleClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_OculusButtonClicked(ClickedEventHandler value)
    // Offset: 0xD87DF4
    void add_OculusButtonClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_OculusButtonClicked(ClickedEventHandler value)
    // Offset: 0xD87EE0
    void remove_OculusButtonClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_OculusButtonUnclicked(ClickedEventHandler value)
    // Offset: 0xD87FCC
    void add_OculusButtonUnclicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_OculusButtonUnclicked(ClickedEventHandler value)
    // Offset: 0xD880B8
    void remove_OculusButtonUnclicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_ModuleOverridePadTouchMoved(ClickedEventHandler value)
    // Offset: 0xD881A4
    void add_ModuleOverridePadTouchMoved(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_ModuleOverridePadTouchMoved(ClickedEventHandler value)
    // Offset: 0xD88290
    void remove_ModuleOverridePadTouchMoved(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_ModuleOverridePadUntouched(ClickedEventHandler value)
    // Offset: 0xD8837C
    void add_ModuleOverridePadUntouched(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_ModuleOverridePadUntouched(ClickedEventHandler value)
    // Offset: 0xD8846C
    void remove_ModuleOverridePadUntouched(::GlobalNamespace::ClickedEventHandler* value);
    // public UnityEngine.Vector3 get_velocity()
    // Offset: 0xD8855C
    ::UnityEngine::Vector3 get_velocity();
    // private System.Void set_velocity(UnityEngine.Vector3 value)
    // Offset: 0xD8856C
    void set_velocity(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_angularVelocity()
    // Offset: 0xD8857C
    ::UnityEngine::Vector3 get_angularVelocity();
    // private System.Void set_angularVelocity(UnityEngine.Vector3 value)
    // Offset: 0xD8858C
    void set_angularVelocity(::UnityEngine::Vector3 value);
    // private System.Void Awake()
    // Offset: 0xD8859C
    void Awake();
    // private System.Void Start()
    // Offset: 0xD885A8
    void Start();
    // public System.Void SetDeviceIndex(System.Int32 index)
    // Offset: 0xD88824
    void SetDeviceIndex(int index);
    // public System.Void OnTriggerClicked(ClickedEventArgs e)
    // Offset: 0xD8882C
    void OnTriggerClicked(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnTriggerUnclicked(ClickedEventArgs e)
    // Offset: 0xD88860
    void OnTriggerUnclicked(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnMenuClicked(ClickedEventArgs e)
    // Offset: 0xD88894
    void OnMenuClicked(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnMenuUnclicked(ClickedEventArgs e)
    // Offset: 0xD888C0
    void OnMenuUnclicked(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnSteamClicked(ClickedEventArgs e)
    // Offset: 0xD888EC
    void OnSteamClicked(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnPadClicked(ClickedEventArgs e)
    // Offset: 0xD88918
    void OnPadClicked(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnPadUnclicked(ClickedEventArgs e)
    // Offset: 0xD8894C
    void OnPadUnclicked(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnPadDoubleClicked(ClickedEventArgs e)
    // Offset: 0xD88980
    void OnPadDoubleClicked(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnPadTouched(ClickedEventArgs e)
    // Offset: 0xD889B4
    void OnPadTouched(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnPadTouchMoved(ClickedEventArgs e)
    // Offset: 0xD889E8
    void OnPadTouchMoved(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnPadUntouched(ClickedEventArgs e)
    // Offset: 0xD88A24
    void OnPadUntouched(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnGripped(ClickedEventArgs e)
    // Offset: 0xD88A60
    void OnGripped(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnUngripped(ClickedEventArgs e)
    // Offset: 0xD88A94
    void OnUngripped(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnOculusButton(ClickedEventArgs e)
    // Offset: 0xD88AC8
    void OnOculusButton(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnOculusButtonUp(ClickedEventArgs e)
    // Offset: 0xD88AF4
    void OnOculusButtonUp(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void HapticPulse(System.Int32 strength, System.Single seconds)
    // Offset: 0xD88B20
    void HapticPulse(int strength, float seconds);
    // private System.Void LateUpdate()
    // Offset: 0xD88C94
    void LateUpdate();
    // private System.Void Update()
    // Offset: 0xD88EBC
    void Update();
    // public System.Void .ctor()
    // Offset: 0xD89E68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrbusTrackedController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrbusTrackedController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrbusTrackedController*, creationType>()));
    }
  }; // OrbusTrackedController
  #pragma pack(pop)
  static check_size<sizeof(OrbusTrackedController), 384 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)> __GlobalNamespace_OrbusTrackedControllerSizeCheck;
  static_assert(sizeof(OrbusTrackedController) == 0x188);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_MenuButtonClicked
// Il2CppName: add_MenuButtonClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_MenuButtonClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_MenuButtonClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_MenuButtonClicked
// Il2CppName: remove_MenuButtonClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_MenuButtonClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_MenuButtonClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_MenuButtonUnclicked
// Il2CppName: add_MenuButtonUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_MenuButtonUnclicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_MenuButtonUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_MenuButtonUnclicked
// Il2CppName: remove_MenuButtonUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_MenuButtonUnclicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_MenuButtonUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_TriggerClicked
// Il2CppName: add_TriggerClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_TriggerClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_TriggerClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_TriggerClicked
// Il2CppName: remove_TriggerClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_TriggerClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_TriggerClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_TriggerUnclicked
// Il2CppName: add_TriggerUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_TriggerUnclicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_TriggerUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_TriggerUnclicked
// Il2CppName: remove_TriggerUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_TriggerUnclicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_TriggerUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_SteamClicked
// Il2CppName: add_SteamClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_SteamClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_SteamClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_SteamClicked
// Il2CppName: remove_SteamClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_SteamClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_SteamClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_PadClicked
// Il2CppName: add_PadClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_PadClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_PadClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_PadClicked
// Il2CppName: remove_PadClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_PadClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_PadClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_PadUnclicked
// Il2CppName: add_PadUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_PadUnclicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_PadUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_PadUnclicked
// Il2CppName: remove_PadUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_PadUnclicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_PadUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_PadTouched
// Il2CppName: add_PadTouched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_PadTouched)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_PadTouched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_PadTouched
// Il2CppName: remove_PadTouched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_PadTouched)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_PadTouched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_PadUntouched
// Il2CppName: add_PadUntouched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_PadUntouched)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_PadUntouched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_PadUntouched
// Il2CppName: remove_PadUntouched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_PadUntouched)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_PadUntouched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_Gripped
// Il2CppName: add_Gripped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_Gripped)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_Gripped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_Gripped
// Il2CppName: remove_Gripped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_Gripped)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_Gripped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_Ungripped
// Il2CppName: add_Ungripped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_Ungripped)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_Ungripped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_Ungripped
// Il2CppName: remove_Ungripped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_Ungripped)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_Ungripped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_PadTouchMoved
// Il2CppName: add_PadTouchMoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_PadTouchMoved)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_PadTouchMoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_PadTouchMoved
// Il2CppName: remove_PadTouchMoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_PadTouchMoved)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_PadTouchMoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_PadDoubleClicked
// Il2CppName: add_PadDoubleClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_PadDoubleClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_PadDoubleClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_PadDoubleClicked
// Il2CppName: remove_PadDoubleClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_PadDoubleClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_PadDoubleClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_OculusButtonClicked
// Il2CppName: add_OculusButtonClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_OculusButtonClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_OculusButtonClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_OculusButtonClicked
// Il2CppName: remove_OculusButtonClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_OculusButtonClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_OculusButtonClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_OculusButtonUnclicked
// Il2CppName: add_OculusButtonUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_OculusButtonUnclicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_OculusButtonUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_OculusButtonUnclicked
// Il2CppName: remove_OculusButtonUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_OculusButtonUnclicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_OculusButtonUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_ModuleOverridePadTouchMoved
// Il2CppName: add_ModuleOverridePadTouchMoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_ModuleOverridePadTouchMoved)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_ModuleOverridePadTouchMoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_ModuleOverridePadTouchMoved
// Il2CppName: remove_ModuleOverridePadTouchMoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_ModuleOverridePadTouchMoved)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_ModuleOverridePadTouchMoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::add_ModuleOverridePadUntouched
// Il2CppName: add_ModuleOverridePadUntouched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::add_ModuleOverridePadUntouched)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "add_ModuleOverridePadUntouched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::remove_ModuleOverridePadUntouched
// Il2CppName: remove_ModuleOverridePadUntouched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::OrbusTrackedController::remove_ModuleOverridePadUntouched)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "remove_ModuleOverridePadUntouched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::get_velocity
// Il2CppName: get_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::OrbusTrackedController::*)()>(&GlobalNamespace::OrbusTrackedController::get_velocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "get_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::set_velocity
// Il2CppName: set_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::UnityEngine::Vector3)>(&GlobalNamespace::OrbusTrackedController::set_velocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "set_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::get_angularVelocity
// Il2CppName: get_angularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::OrbusTrackedController::*)()>(&GlobalNamespace::OrbusTrackedController::get_angularVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "get_angularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::set_angularVelocity
// Il2CppName: set_angularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::UnityEngine::Vector3)>(&GlobalNamespace::OrbusTrackedController::set_angularVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "set_angularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)()>(&GlobalNamespace::OrbusTrackedController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)()>(&GlobalNamespace::OrbusTrackedController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::SetDeviceIndex
// Il2CppName: SetDeviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(int)>(&GlobalNamespace::OrbusTrackedController::SetDeviceIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "SetDeviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::OnTriggerClicked
// Il2CppName: OnTriggerClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::OrbusTrackedController::OnTriggerClicked)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "OnTriggerClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::OnTriggerUnclicked
// Il2CppName: OnTriggerUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::OrbusTrackedController::OnTriggerUnclicked)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "OnTriggerUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::OnMenuClicked
// Il2CppName: OnMenuClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::OrbusTrackedController::OnMenuClicked)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "OnMenuClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::OnMenuUnclicked
// Il2CppName: OnMenuUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::OrbusTrackedController::OnMenuUnclicked)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "OnMenuUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::OnSteamClicked
// Il2CppName: OnSteamClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::OrbusTrackedController::OnSteamClicked)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "OnSteamClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::OnPadClicked
// Il2CppName: OnPadClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::OrbusTrackedController::OnPadClicked)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "OnPadClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::OnPadUnclicked
// Il2CppName: OnPadUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::OrbusTrackedController::OnPadUnclicked)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "OnPadUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::OnPadDoubleClicked
// Il2CppName: OnPadDoubleClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::OrbusTrackedController::OnPadDoubleClicked)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "OnPadDoubleClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::OnPadTouched
// Il2CppName: OnPadTouched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::OrbusTrackedController::OnPadTouched)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "OnPadTouched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::OnPadTouchMoved
// Il2CppName: OnPadTouchMoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::OrbusTrackedController::OnPadTouchMoved)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "OnPadTouchMoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::OnPadUntouched
// Il2CppName: OnPadUntouched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::OrbusTrackedController::OnPadUntouched)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "OnPadUntouched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::OnGripped
// Il2CppName: OnGripped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::OrbusTrackedController::OnGripped)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "OnGripped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::OnUngripped
// Il2CppName: OnUngripped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::OrbusTrackedController::OnUngripped)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "OnUngripped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::OnOculusButton
// Il2CppName: OnOculusButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::OrbusTrackedController::OnOculusButton)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "OnOculusButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::OnOculusButtonUp
// Il2CppName: OnOculusButtonUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::OrbusTrackedController::OnOculusButtonUp)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "OnOculusButtonUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::HapticPulse
// Il2CppName: HapticPulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)(int, float)>(&GlobalNamespace::OrbusTrackedController::HapticPulse)> {
  static const MethodInfo* get() {
    static auto* strength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "HapticPulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strength, seconds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)()>(&GlobalNamespace::OrbusTrackedController::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusTrackedController::*)()>(&GlobalNamespace::OrbusTrackedController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusTrackedController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusTrackedController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
