// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Camera
  class Camera;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CloudStack
  class CloudStack;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CloudStack);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CloudStack*, "", "CloudStack");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: CloudStack
  // [TokenAttribute] Offset: FFFFFFFF
  class CloudStack : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Int32 stackSize
    // Size: 0x4
    // Offset: 0x18
    int stackSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single height
    // Size: 0x4
    // Offset: 0x1C
    float height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Mesh quadMesh
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Mesh* quadMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // public UnityEngine.Material cloudMat
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* cloudMat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Single offset
    // Size: 0x4
    // Offset: 0x30
    float offset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 layer
    // Size: 0x4
    // Offset: 0x34
    int layer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Camera cam
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Camera* cam;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private UnityEngine.Matrix4x4 matrix
    // Size: 0x40
    // Offset: 0x40
    ::UnityEngine::Matrix4x4 matrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 stackSize
    [[deprecated("Use field access instead!")]] int& dyn_stackSize();
    // Get instance field reference: public System.Single height
    [[deprecated("Use field access instead!")]] float& dyn_height();
    // Get instance field reference: public UnityEngine.Mesh quadMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_quadMesh();
    // Get instance field reference: public UnityEngine.Material cloudMat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_cloudMat();
    // Get instance field reference: private System.Single offset
    [[deprecated("Use field access instead!")]] float& dyn_offset();
    // Get instance field reference: public System.Int32 layer
    [[deprecated("Use field access instead!")]] int& dyn_layer();
    // Get instance field reference: public UnityEngine.Camera cam
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_cam();
    // Get instance field reference: private UnityEngine.Matrix4x4 matrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_matrix();
    // private System.Void Start()
    // Offset: 0xDED4D4
    void Start();
    // private System.Void Update()
    // Offset: 0xDED4D8
    void Update();
    // public System.Void .ctor()
    // Offset: 0xDED864
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CloudStack* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CloudStack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CloudStack*, creationType>()));
    }
  }; // CloudStack
  #pragma pack(pop)
  static check_size<sizeof(CloudStack), 64 + sizeof(::UnityEngine::Matrix4x4)> __GlobalNamespace_CloudStackSizeCheck;
  static_assert(sizeof(CloudStack) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CloudStack::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CloudStack::*)()>(&GlobalNamespace::CloudStack::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CloudStack*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CloudStack::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CloudStack::*)()>(&GlobalNamespace::CloudStack::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CloudStack*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CloudStack::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
