// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LeanAudioOptions
  class LeanAudioOptions;
  // Forward declaring type: LeanAudioStream
  class LeanAudioStream;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LeanAudio
  class LeanAudio;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LeanAudio);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LeanAudio*, "", "LeanAudio");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: LeanAudio
  // [TokenAttribute] Offset: FFFFFFFF
  class LeanAudio : public ::Il2CppObject {
    public:
    // Get static field: static public System.Single MIN_FREQEUNCY_PERIOD
    static float _get_MIN_FREQEUNCY_PERIOD();
    // Set static field: static public System.Single MIN_FREQEUNCY_PERIOD
    static void _set_MIN_FREQEUNCY_PERIOD(float value);
    // Get static field: static public System.Int32 PROCESSING_ITERATIONS_MAX
    static int _get_PROCESSING_ITERATIONS_MAX();
    // Set static field: static public System.Int32 PROCESSING_ITERATIONS_MAX
    static void _set_PROCESSING_ITERATIONS_MAX(int value);
    // Get static field: static public System.Single[] generatedWaveDistances
    static ::ArrayW<float> _get_generatedWaveDistances();
    // Set static field: static public System.Single[] generatedWaveDistances
    static void _set_generatedWaveDistances(::ArrayW<float> value);
    // Get static field: static public System.Int32 generatedWaveDistancesCount
    static int _get_generatedWaveDistancesCount();
    // Set static field: static public System.Int32 generatedWaveDistancesCount
    static void _set_generatedWaveDistancesCount(int value);
    // Get static field: static private System.Single[] longList
    static ::ArrayW<float> _get_longList();
    // Set static field: static private System.Single[] longList
    static void _set_longList(::ArrayW<float> value);
    // static public LeanAudioOptions options()
    // Offset: 0x1AC04B0
    static ::GlobalNamespace::LeanAudioOptions* options();
    // static public LeanAudioStream createAudioStream(UnityEngine.AnimationCurve volume, UnityEngine.AnimationCurve frequency, LeanAudioOptions options)
    // Offset: 0x1AC05BC
    static ::GlobalNamespace::LeanAudioStream* createAudioStream(::UnityEngine::AnimationCurve* volume, ::UnityEngine::AnimationCurve* frequency, ::GlobalNamespace::LeanAudioOptions* options);
    // static public UnityEngine.AudioClip createAudio(UnityEngine.AnimationCurve volume, UnityEngine.AnimationCurve frequency, LeanAudioOptions options)
    // Offset: 0x1AC13A4
    static ::UnityEngine::AudioClip* createAudio(::UnityEngine::AnimationCurve* volume, ::UnityEngine::AnimationCurve* frequency, ::GlobalNamespace::LeanAudioOptions* options);
    // static private System.Int32 createAudioWave(UnityEngine.AnimationCurve volume, UnityEngine.AnimationCurve frequency, LeanAudioOptions options)
    // Offset: 0x1AC0688
    static int createAudioWave(::UnityEngine::AnimationCurve* volume, ::UnityEngine::AnimationCurve* frequency, ::GlobalNamespace::LeanAudioOptions* options);
    // static private UnityEngine.AudioClip createAudioFromWave(System.Int32 waveLength, LeanAudioOptions options)
    // Offset: 0x1AC0BFC
    static ::UnityEngine::AudioClip* createAudioFromWave(int waveLength, ::GlobalNamespace::LeanAudioOptions* options);
    // static private System.Void OnAudioSetPosition(System.Int32 newPosition)
    // Offset: 0x1AC1484
    static void OnAudioSetPosition(int newPosition);
    // static public UnityEngine.AudioClip generateAudioFromCurve(UnityEngine.AnimationCurve curve, System.Int32 frequencyRate)
    // Offset: 0x1AC1488
    static ::UnityEngine::AudioClip* generateAudioFromCurve(::UnityEngine::AnimationCurve* curve, int frequencyRate);
    // static public System.Void play(UnityEngine.AudioClip audio)
    // Offset: 0x1AC1638
    static void play(::UnityEngine::AudioClip* audio);
    // static public System.Void play(UnityEngine.AudioClip audio, UnityEngine.Vector3 pos)
    // Offset: 0x1AC185C
    static void play(::UnityEngine::AudioClip* audio, ::UnityEngine::Vector3 pos);
    // static public System.Void play(UnityEngine.AudioClip audio, UnityEngine.Vector3 pos, System.Single volume)
    // Offset: 0x1AC18E8
    static void play(::UnityEngine::AudioClip* audio, ::UnityEngine::Vector3 pos, float volume);
    // static public UnityEngine.AudioSource playClipAt(UnityEngine.AudioClip clip, UnityEngine.Vector3 pos)
    // Offset: 0x1AC16EC
    static ::UnityEngine::AudioSource* playClipAt(::UnityEngine::AudioClip* clip, ::UnityEngine::Vector3 pos);
    // static public System.Void printOutAudioClip(UnityEngine.AudioClip audioClip, ref UnityEngine.AnimationCurve curve, System.Single scaleX)
    // Offset: 0x1AC19C0
    static void printOutAudioClip(::UnityEngine::AudioClip* audioClip, ByRef<::UnityEngine::AnimationCurve*> curve, float scaleX);
    // public System.Void .ctor()
    // Offset: 0x1AC1BA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LeanAudio* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LeanAudio::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LeanAudio*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1AC1BB0
    static void _cctor();
  }; // LeanAudio
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LeanAudio::options
// Il2CppName: options
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LeanAudioOptions* (*)()>(&GlobalNamespace::LeanAudio::options)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudio*), "options", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanAudio::createAudioStream
// Il2CppName: createAudioStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LeanAudioStream* (*)(::UnityEngine::AnimationCurve*, ::UnityEngine::AnimationCurve*, ::GlobalNamespace::LeanAudioOptions*)>(&GlobalNamespace::LeanAudio::createAudioStream)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("", "LeanAudioOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudio*), "createAudioStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume, frequency, options});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanAudio::createAudio
// Il2CppName: createAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (*)(::UnityEngine::AnimationCurve*, ::UnityEngine::AnimationCurve*, ::GlobalNamespace::LeanAudioOptions*)>(&GlobalNamespace::LeanAudio::createAudio)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("", "LeanAudioOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudio*), "createAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume, frequency, options});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanAudio::createAudioWave
// Il2CppName: createAudioWave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::AnimationCurve*, ::UnityEngine::AnimationCurve*, ::GlobalNamespace::LeanAudioOptions*)>(&GlobalNamespace::LeanAudio::createAudioWave)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("", "LeanAudioOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudio*), "createAudioWave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume, frequency, options});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanAudio::createAudioFromWave
// Il2CppName: createAudioFromWave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (*)(int, ::GlobalNamespace::LeanAudioOptions*)>(&GlobalNamespace::LeanAudio::createAudioFromWave)> {
  static const MethodInfo* get() {
    static auto* waveLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("", "LeanAudioOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudio*), "createAudioFromWave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{waveLength, options});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanAudio::OnAudioSetPosition
// Il2CppName: OnAudioSetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::LeanAudio::OnAudioSetPosition)> {
  static const MethodInfo* get() {
    static auto* newPosition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudio*), "OnAudioSetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPosition});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanAudio::generateAudioFromCurve
// Il2CppName: generateAudioFromCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (*)(::UnityEngine::AnimationCurve*, int)>(&GlobalNamespace::LeanAudio::generateAudioFromCurve)> {
  static const MethodInfo* get() {
    static auto* curve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    static auto* frequencyRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudio*), "generateAudioFromCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curve, frequencyRate});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanAudio::play
// Il2CppName: play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AudioClip*)>(&GlobalNamespace::LeanAudio::play)> {
  static const MethodInfo* get() {
    static auto* audio = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudio*), "play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanAudio::play
// Il2CppName: play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AudioClip*, ::UnityEngine::Vector3)>(&GlobalNamespace::LeanAudio::play)> {
  static const MethodInfo* get() {
    static auto* audio = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudio*), "play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audio, pos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanAudio::play
// Il2CppName: play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AudioClip*, ::UnityEngine::Vector3, float)>(&GlobalNamespace::LeanAudio::play)> {
  static const MethodInfo* get() {
    static auto* audio = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudio*), "play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audio, pos, volume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanAudio::playClipAt
// Il2CppName: playClipAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioSource* (*)(::UnityEngine::AudioClip*, ::UnityEngine::Vector3)>(&GlobalNamespace::LeanAudio::playClipAt)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudio*), "playClipAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip, pos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanAudio::printOutAudioClip
// Il2CppName: printOutAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AudioClip*, ByRef<::UnityEngine::AnimationCurve*>, float)>(&GlobalNamespace::LeanAudio::printOutAudioClip)> {
  static const MethodInfo* get() {
    static auto* audioClip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* curve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->this_arg;
    static auto* scaleX = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudio*), "printOutAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioClip, curve, scaleX});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanAudio::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LeanAudio::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LeanAudio::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudio*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
