// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: AstarPath
#include "GlobalNamespace/AstarPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: GraphNodeDelegateCancelable
  class GraphNodeDelegateCancelable;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AstarPath::$$c__DisplayClass143_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AstarPath::$$c__DisplayClass143_0*, "", "AstarPath/<>c__DisplayClass143_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: AstarPath/<>c__DisplayClass143_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: ACD0A8
  class AstarPath::$$c__DisplayClass143_0 : public ::Il2CppObject {
    public:
    public:
    // public System.UInt32 area
    // Size: 0x4
    // Offset: 0x10
    uint area;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: area and: smallAreaList
    char __padding0[0x4] = {};
    // public System.Collections.Generic.List`1<Pathfinding.GraphNode> smallAreaList
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* smallAreaList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*) == 0x8);
    // public System.Collections.Generic.Stack`1<Pathfinding.GraphNode> stack
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Stack_1<::Pathfinding::GraphNode*>* stack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<::Pathfinding::GraphNode*>*) == 0x8);
    // public System.Int32 smallAreasDetected
    // Size: 0x4
    // Offset: 0x28
    int smallAreasDetected;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean warnAboutAreas
    // Size: 0x1
    // Offset: 0x2C
    bool warnAboutAreas;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: warnAboutAreas and: $$4__this
    char __padding4[0x3] = {};
    // public AstarPath <>4__this
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::AstarPath* $$4__this;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AstarPath*) == 0x8);
    // public Pathfinding.GraphNodeDelegateCancelable <>9__1
    // Size: 0x8
    // Offset: 0x38
    ::Pathfinding::GraphNodeDelegateCancelable* $$9__1;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNodeDelegateCancelable*) == 0x8);
    public:
    // Get instance field reference: public System.UInt32 area
    [[deprecated("Use field access instead!")]] uint& dyn_area();
    // Get instance field reference: public System.Collections.Generic.List`1<Pathfinding.GraphNode> smallAreaList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*& dyn_smallAreaList();
    // Get instance field reference: public System.Collections.Generic.Stack`1<Pathfinding.GraphNode> stack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::Pathfinding::GraphNode*>*& dyn_stack();
    // Get instance field reference: public System.Int32 smallAreasDetected
    [[deprecated("Use field access instead!")]] int& dyn_smallAreasDetected();
    // Get instance field reference: public System.Boolean warnAboutAreas
    [[deprecated("Use field access instead!")]] bool& dyn_warnAboutAreas();
    // Get instance field reference: public AstarPath <>4__this
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AstarPath*& dyn_$$4__this();
    // Get instance field reference: public Pathfinding.GraphNodeDelegateCancelable <>9__1
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNodeDelegateCancelable*& dyn_$$9__1();
    // public System.Void .ctor()
    // Offset: 0x12A1EDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AstarPath::$$c__DisplayClass143_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AstarPath::$$c__DisplayClass143_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AstarPath::$$c__DisplayClass143_0*, creationType>()));
    }
    // System.Boolean <FloodFill>b__1(Pathfinding.GraphNode node)
    // Offset: 0x12A644C
    bool $FloodFill$b__1(::Pathfinding::GraphNode* node);
  }; // AstarPath/<>c__DisplayClass143_0
  #pragma pack(pop)
  static check_size<sizeof(AstarPath::$$c__DisplayClass143_0), 56 + sizeof(::Pathfinding::GraphNodeDelegateCancelable*)> __GlobalNamespace_AstarPath_$$c__DisplayClass143_0SizeCheck;
  static_assert(sizeof(AstarPath::$$c__DisplayClass143_0) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$$c__DisplayClass143_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$$c__DisplayClass143_0::$FloodFill$b__1
// Il2CppName: <FloodFill>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::$$c__DisplayClass143_0::*)(::Pathfinding::GraphNode*)>(&GlobalNamespace::AstarPath::$$c__DisplayClass143_0::$FloodFill$b__1)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath::$$c__DisplayClass143_0*), "<FloodFill>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
