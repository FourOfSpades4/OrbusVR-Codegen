// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GUIText
  class GUIText;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SteamVR_Stats
  class SteamVR_Stats;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SteamVR_Stats);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SteamVR_Stats*, "", "SteamVR_Stats");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: SteamVR_Stats
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamVR_Stats : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GUIText text
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GUIText* text;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUIText*) == 0x8);
    // public UnityEngine.Color fadeColor
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Color fadeColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Single fadeDuration
    // Size: 0x4
    // Offset: 0x30
    float fadeDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: fadeDuration and: lastUpdate
    char __padding2[0x4] = {};
    // private System.Double lastUpdate
    // Size: 0x8
    // Offset: 0x38
    double lastUpdate;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GUIText text
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUIText*& dyn_text();
    // Get instance field reference: public UnityEngine.Color fadeColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_fadeColor();
    // Get instance field reference: public System.Single fadeDuration
    [[deprecated("Use field access instead!")]] float& dyn_fadeDuration();
    // Get instance field reference: private System.Double lastUpdate
    [[deprecated("Use field access instead!")]] double& dyn_lastUpdate();
    // private System.Void Awake()
    // Offset: 0xF0E86C
    void Awake();
    // private System.Void Update()
    // Offset: 0xF0E9A4
    void Update();
    // public System.Void .ctor()
    // Offset: 0xF0EC30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamVR_Stats* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Stats::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamVR_Stats*, creationType>()));
    }
  }; // SteamVR_Stats
  #pragma pack(pop)
  static check_size<sizeof(SteamVR_Stats), 56 + sizeof(double)> __GlobalNamespace_SteamVR_StatsSizeCheck;
  static_assert(sizeof(SteamVR_Stats) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_Stats::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_Stats::*)()>(&GlobalNamespace::SteamVR_Stats::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_Stats*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_Stats::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_Stats::*)()>(&GlobalNamespace::SteamVR_Stats::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_Stats*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_Stats::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
