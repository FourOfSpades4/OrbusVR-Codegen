// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SuperTextMesh
  class SuperTextMesh;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: STMPagination
  class STMPagination;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::STMPagination);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::STMPagination*, "", "STMPagination");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: STMPagination
  // [TokenAttribute] Offset: FFFFFFFF
  class STMPagination : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public SuperTextMesh originalText
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::SuperTextMesh* originalText;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh*) == 0x8);
    // public SuperTextMesh overflowText
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::SuperTextMesh* overflowText;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public SuperTextMesh originalText
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh*& dyn_originalText();
    // Get instance field reference: public SuperTextMesh overflowText
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh*& dyn_overflowText();
    // public System.Void Awake()
    // Offset: 0xE2EC7C
    void Awake();
    // public System.Void OverflowLeftovers()
    // Offset: 0xE2ECE0
    void OverflowLeftovers();
    // public System.Void OverflowLeftovers(SuperTextMesh stm)
    // Offset: 0xE2ED88
    void OverflowLeftovers(::GlobalNamespace::SuperTextMesh* stm);
    // public System.Void .ctor()
    // Offset: 0xE2EE34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMPagination* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMPagination::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMPagination*, creationType>()));
    }
  }; // STMPagination
  #pragma pack(pop)
  static check_size<sizeof(STMPagination), 32 + sizeof(::GlobalNamespace::SuperTextMesh*)> __GlobalNamespace_STMPaginationSizeCheck;
  static_assert(sizeof(STMPagination) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::STMPagination::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMPagination::*)()>(&GlobalNamespace::STMPagination::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMPagination*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMPagination::OverflowLeftovers
// Il2CppName: OverflowLeftovers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMPagination::*)()>(&GlobalNamespace::STMPagination::OverflowLeftovers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMPagination*), "OverflowLeftovers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMPagination::OverflowLeftovers
// Il2CppName: OverflowLeftovers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMPagination::*)(::GlobalNamespace::SuperTextMesh*)>(&GlobalNamespace::STMPagination::OverflowLeftovers)> {
  static const MethodInfo* get() {
    static auto* stm = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMPagination*), "OverflowLeftovers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stm});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMPagination::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
