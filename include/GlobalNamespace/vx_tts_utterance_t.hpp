// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Runtime.InteropServices.HandleRef
#include "System/Runtime/InteropServices/HandleRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SWIGTYPE_p_vx_tts_utterance_impl
  class SWIGTYPE_p_vx_tts_utterance_impl;
  // Forward declaring type: SWIGTYPE_p_short
  class SWIGTYPE_p_short;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: vx_tts_utterance_t
  class vx_tts_utterance_t;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::vx_tts_utterance_t);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::vx_tts_utterance_t*, "", "vx_tts_utterance_t");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: vx_tts_utterance_t
  // [TokenAttribute] Offset: FFFFFFFF
  class vx_tts_utterance_t : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Runtime.InteropServices.HandleRef swigCPtr
    // Size: 0x10
    // Offset: 0x10
    ::System::Runtime::InteropServices::HandleRef swigCPtr;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::HandleRef) == 0x10);
    // protected System.Boolean swigCMemOwn
    // Size: 0x1
    // Offset: 0x20
    bool swigCMemOwn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Runtime.InteropServices.HandleRef swigCPtr
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& dyn_swigCPtr();
    // Get instance field reference: protected System.Boolean swigCMemOwn
    [[deprecated("Use field access instead!")]] bool& dyn_swigCMemOwn();
    // System.Void .ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    // Offset: 0x28247B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static vx_tts_utterance_t* New_ctor(::System::IntPtr cPtr, bool cMemoryOwn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_utterance_t::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<vx_tts_utterance_t*, creationType>(cPtr, cMemoryOwn)));
    }
    // static System.Runtime.InteropServices.HandleRef getCPtr(vx_tts_utterance_t obj)
    // Offset: 0x282481C
    static ::System::Runtime::InteropServices::HandleRef getCPtr(::GlobalNamespace::vx_tts_utterance_t* obj);
    // public System.Void Dispose()
    // Offset: 0x282490C
    void Dispose();
    // public SWIGTYPE_p_vx_tts_utterance_impl get_utterance_obj()
    // Offset: 0x2824A7C
    ::GlobalNamespace::SWIGTYPE_p_vx_tts_utterance_impl* get_utterance_obj();
    // public System.Void set_speech_buffer(SWIGTYPE_p_short value)
    // Offset: 0x2824B30
    void set_speech_buffer(::GlobalNamespace::SWIGTYPE_p_short* value);
    // public SWIGTYPE_p_short get_speech_buffer()
    // Offset: 0x2824BC8
    ::GlobalNamespace::SWIGTYPE_p_short* get_speech_buffer();
    // public System.Void set_sample_rate(System.Int32 value)
    // Offset: 0x2824C7C
    void set_sample_rate(int value);
    // public System.Int32 get_sample_rate()
    // Offset: 0x2824CFC
    int get_sample_rate();
    // public System.Void set_num_frames(System.Int32 value)
    // Offset: 0x2824D6C
    void set_num_frames(int value);
    // public System.Int32 get_num_frames()
    // Offset: 0x2824DEC
    int get_num_frames();
    // public System.Void set_num_channels(System.Int32 value)
    // Offset: 0x2824E5C
    void set_num_channels(int value);
    // public System.Int32 get_num_channels()
    // Offset: 0x2824EDC
    int get_num_channels();
    // public System.Void .ctor()
    // Offset: 0x2824F4C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static vx_tts_utterance_t* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_tts_utterance_t::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<vx_tts_utterance_t*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x2824890
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // vx_tts_utterance_t
  #pragma pack(pop)
  static check_size<sizeof(vx_tts_utterance_t), 32 + sizeof(bool)> __GlobalNamespace_vx_tts_utterance_tSizeCheck;
  static_assert(sizeof(vx_tts_utterance_t) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_utterance_t::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_utterance_t::getCPtr
// Il2CppName: getCPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::InteropServices::HandleRef (*)(::GlobalNamespace::vx_tts_utterance_t*)>(&GlobalNamespace::vx_tts_utterance_t::getCPtr)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("", "vx_tts_utterance_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_utterance_t*), "getCPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_utterance_t::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_tts_utterance_t::*)()>(&GlobalNamespace::vx_tts_utterance_t::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_utterance_t*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_utterance_t::get_utterance_obj
// Il2CppName: get_utterance_obj
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SWIGTYPE_p_vx_tts_utterance_impl* (GlobalNamespace::vx_tts_utterance_t::*)()>(&GlobalNamespace::vx_tts_utterance_t::get_utterance_obj)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_utterance_t*), "get_utterance_obj", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_utterance_t::set_speech_buffer
// Il2CppName: set_speech_buffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_tts_utterance_t::*)(::GlobalNamespace::SWIGTYPE_p_short*)>(&GlobalNamespace::vx_tts_utterance_t::set_speech_buffer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SWIGTYPE_p_short")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_utterance_t*), "set_speech_buffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_utterance_t::get_speech_buffer
// Il2CppName: get_speech_buffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SWIGTYPE_p_short* (GlobalNamespace::vx_tts_utterance_t::*)()>(&GlobalNamespace::vx_tts_utterance_t::get_speech_buffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_utterance_t*), "get_speech_buffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_utterance_t::set_sample_rate
// Il2CppName: set_sample_rate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_tts_utterance_t::*)(int)>(&GlobalNamespace::vx_tts_utterance_t::set_sample_rate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_utterance_t*), "set_sample_rate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_utterance_t::get_sample_rate
// Il2CppName: get_sample_rate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_tts_utterance_t::*)()>(&GlobalNamespace::vx_tts_utterance_t::get_sample_rate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_utterance_t*), "get_sample_rate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_utterance_t::set_num_frames
// Il2CppName: set_num_frames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_tts_utterance_t::*)(int)>(&GlobalNamespace::vx_tts_utterance_t::set_num_frames)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_utterance_t*), "set_num_frames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_utterance_t::get_num_frames
// Il2CppName: get_num_frames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_tts_utterance_t::*)()>(&GlobalNamespace::vx_tts_utterance_t::get_num_frames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_utterance_t*), "get_num_frames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_utterance_t::set_num_channels
// Il2CppName: set_num_channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_tts_utterance_t::*)(int)>(&GlobalNamespace::vx_tts_utterance_t::set_num_channels)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_utterance_t*), "set_num_channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_utterance_t::get_num_channels
// Il2CppName: get_num_channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_tts_utterance_t::*)()>(&GlobalNamespace::vx_tts_utterance_t::get_num_channels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_utterance_t*), "get_num_channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_utterance_t::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::vx_tts_utterance_t::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_tts_utterance_t::*)()>(&GlobalNamespace::vx_tts_utterance_t::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_tts_utterance_t*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
