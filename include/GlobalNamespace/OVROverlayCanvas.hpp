// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Plane
#include "UnityEngine/Plane.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Canvas
  class Canvas;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVROverlay
  class OVROverlay;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVROverlayCanvas
  class OVROverlayCanvas;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVROverlayCanvas);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVROverlayCanvas*, "", "OVROverlayCanvas");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x89
  #pragma pack(push, 1)
  // Autogenerated type: OVROverlayCanvas
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: ACE59C
  class OVROverlayCanvas : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::OVROverlayCanvas::DrawMode
    struct DrawMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVROverlayCanvas/DrawMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct DrawMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DrawMode
      constexpr DrawMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVROverlayCanvas/DrawMode Opaque
      static constexpr const int Opaque = 0;
      // Get static field: static public OVROverlayCanvas/DrawMode Opaque
      static ::GlobalNamespace::OVROverlayCanvas::DrawMode _get_Opaque();
      // Set static field: static public OVROverlayCanvas/DrawMode Opaque
      static void _set_Opaque(::GlobalNamespace::OVROverlayCanvas::DrawMode value);
      // static field const value: static public OVROverlayCanvas/DrawMode OpaqueWithClip
      static constexpr const int OpaqueWithClip = 1;
      // Get static field: static public OVROverlayCanvas/DrawMode OpaqueWithClip
      static ::GlobalNamespace::OVROverlayCanvas::DrawMode _get_OpaqueWithClip();
      // Set static field: static public OVROverlayCanvas/DrawMode OpaqueWithClip
      static void _set_OpaqueWithClip(::GlobalNamespace::OVROverlayCanvas::DrawMode value);
      // static field const value: static public OVROverlayCanvas/DrawMode TransparentDefaultAlpha
      static constexpr const int TransparentDefaultAlpha = 2;
      // Get static field: static public OVROverlayCanvas/DrawMode TransparentDefaultAlpha
      static ::GlobalNamespace::OVROverlayCanvas::DrawMode _get_TransparentDefaultAlpha();
      // Set static field: static public OVROverlayCanvas/DrawMode TransparentDefaultAlpha
      static void _set_TransparentDefaultAlpha(::GlobalNamespace::OVROverlayCanvas::DrawMode value);
      // static field const value: static public OVROverlayCanvas/DrawMode TransparentCorrectAlpha
      static constexpr const int TransparentCorrectAlpha = 3;
      // Get static field: static public OVROverlayCanvas/DrawMode TransparentCorrectAlpha
      static ::GlobalNamespace::OVROverlayCanvas::DrawMode _get_TransparentCorrectAlpha();
      // Set static field: static public OVROverlayCanvas/DrawMode TransparentCorrectAlpha
      static void _set_TransparentCorrectAlpha(::GlobalNamespace::OVROverlayCanvas::DrawMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVROverlayCanvas/DrawMode
    #pragma pack(pop)
    static check_size<sizeof(OVROverlayCanvas::DrawMode), 0 + sizeof(int)> __GlobalNamespace_OVROverlayCanvas_DrawModeSizeCheck;
    static_assert(sizeof(OVROverlayCanvas::DrawMode) == 0x4);
    public:
    // private UnityEngine.Shader _transparentShader
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Shader* transparentShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.Shader _opaqueShader
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Shader* opaqueShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private UnityEngine.RectTransform _rectTransform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::RectTransform* rectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.Canvas _canvas
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Canvas* canvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::Canvas*) == 0x8);
    // private UnityEngine.Camera _camera
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Camera* camera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private OVROverlay _overlay
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::OVROverlay* overlay;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVROverlay*) == 0x8);
    // private UnityEngine.RenderTexture _renderTexture
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::RenderTexture* renderTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.MeshRenderer _meshRenderer
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::MeshRenderer* meshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.Mesh _quad
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Mesh* quad;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Material _defaultMat
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Material* defaultMat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.Int32 MaxTextureSize
    // Size: 0x4
    // Offset: 0x68
    int MaxTextureSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MinTextureSize
    // Size: 0x4
    // Offset: 0x6C
    int MinTextureSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single PixelsPerUnit
    // Size: 0x4
    // Offset: 0x70
    float PixelsPerUnit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 DrawRate
    // Size: 0x4
    // Offset: 0x74
    int DrawRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 DrawFrameOffset
    // Size: 0x4
    // Offset: 0x78
    int DrawFrameOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean Expensive
    // Size: 0x1
    // Offset: 0x7C
    bool Expensive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Expensive and: Layer
    char __padding15[0x3] = {};
    // public System.Int32 Layer
    // Size: 0x4
    // Offset: 0x80
    int Layer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public OVROverlayCanvas/DrawMode Opacity
    // Size: 0x4
    // Offset: 0x84
    ::GlobalNamespace::OVROverlayCanvas::DrawMode Opacity;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVROverlayCanvas::DrawMode) == 0x4);
    // private System.Boolean ScaleViewport
    // Size: 0x1
    // Offset: 0x88
    bool ScaleViewport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private readonly UnityEngine.Plane[] _FrustumPlanes
    static ::ArrayW<::UnityEngine::Plane> _get__FrustumPlanes();
    // Set static field: static private readonly UnityEngine.Plane[] _FrustumPlanes
    static void _set__FrustumPlanes(::ArrayW<::UnityEngine::Plane> value);
    // Get instance field reference: private UnityEngine.Shader _transparentShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn__transparentShader();
    // Get instance field reference: private UnityEngine.Shader _opaqueShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn__opaqueShader();
    // Get instance field reference: private UnityEngine.RectTransform _rectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__rectTransform();
    // Get instance field reference: private UnityEngine.Canvas _canvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::Canvas*& dyn__canvas();
    // Get instance field reference: private UnityEngine.Camera _camera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn__camera();
    // Get instance field reference: private OVROverlay _overlay
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVROverlay*& dyn__overlay();
    // Get instance field reference: private UnityEngine.RenderTexture _renderTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn__renderTexture();
    // Get instance field reference: private UnityEngine.MeshRenderer _meshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn__meshRenderer();
    // Get instance field reference: private UnityEngine.Mesh _quad
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__quad();
    // Get instance field reference: private UnityEngine.Material _defaultMat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__defaultMat();
    // Get instance field reference: public System.Int32 MaxTextureSize
    [[deprecated("Use field access instead!")]] int& dyn_MaxTextureSize();
    // Get instance field reference: public System.Int32 MinTextureSize
    [[deprecated("Use field access instead!")]] int& dyn_MinTextureSize();
    // Get instance field reference: public System.Single PixelsPerUnit
    [[deprecated("Use field access instead!")]] float& dyn_PixelsPerUnit();
    // Get instance field reference: public System.Int32 DrawRate
    [[deprecated("Use field access instead!")]] int& dyn_DrawRate();
    // Get instance field reference: public System.Int32 DrawFrameOffset
    [[deprecated("Use field access instead!")]] int& dyn_DrawFrameOffset();
    // Get instance field reference: public System.Boolean Expensive
    [[deprecated("Use field access instead!")]] bool& dyn_Expensive();
    // Get instance field reference: public System.Int32 Layer
    [[deprecated("Use field access instead!")]] int& dyn_Layer();
    // Get instance field reference: public OVROverlayCanvas/DrawMode Opacity
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVROverlayCanvas::DrawMode& dyn_Opacity();
    // Get instance field reference: private System.Boolean ScaleViewport
    [[deprecated("Use field access instead!")]] bool& dyn_ScaleViewport();
    // private System.Void Start()
    // Offset: 0x13934A4
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x139452C
    void OnDestroy();
    // private System.Void OnEnable()
    // Offset: 0x13945B0
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x13946C4
    void OnDisable();
    // protected System.Boolean ShouldRender()
    // Offset: 0x13947D8
    bool ShouldRender();
    // private System.Void Update()
    // Offset: 0x1394A08
    void Update();
    // public System.Boolean get_overlayEnabled()
    // Offset: 0x13950B8
    bool get_overlayEnabled();
    // public System.Void set_overlayEnabled(System.Boolean value)
    // Offset: 0x1395154
    void set_overlayEnabled(bool value);
    // public System.Void .ctor()
    // Offset: 0x139526C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVROverlayCanvas* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OVROverlayCanvas::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVROverlayCanvas*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x13952BC
    static void _cctor();
  }; // OVROverlayCanvas
  #pragma pack(pop)
  static check_size<sizeof(OVROverlayCanvas), 136 + sizeof(bool)> __GlobalNamespace_OVROverlayCanvasSizeCheck;
  static_assert(sizeof(OVROverlayCanvas) == 0x89);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVROverlayCanvas::DrawMode, "", "OVROverlayCanvas/DrawMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVROverlayCanvas::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVROverlayCanvas::*)()>(&GlobalNamespace::OVROverlayCanvas::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVROverlayCanvas*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVROverlayCanvas::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVROverlayCanvas::*)()>(&GlobalNamespace::OVROverlayCanvas::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVROverlayCanvas*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVROverlayCanvas::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVROverlayCanvas::*)()>(&GlobalNamespace::OVROverlayCanvas::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVROverlayCanvas*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVROverlayCanvas::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVROverlayCanvas::*)()>(&GlobalNamespace::OVROverlayCanvas::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVROverlayCanvas*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVROverlayCanvas::ShouldRender
// Il2CppName: ShouldRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVROverlayCanvas::*)()>(&GlobalNamespace::OVROverlayCanvas::ShouldRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVROverlayCanvas*), "ShouldRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVROverlayCanvas::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVROverlayCanvas::*)()>(&GlobalNamespace::OVROverlayCanvas::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVROverlayCanvas*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVROverlayCanvas::get_overlayEnabled
// Il2CppName: get_overlayEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OVROverlayCanvas::*)()>(&GlobalNamespace::OVROverlayCanvas::get_overlayEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVROverlayCanvas*), "get_overlayEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVROverlayCanvas::set_overlayEnabled
// Il2CppName: set_overlayEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OVROverlayCanvas::*)(bool)>(&GlobalNamespace::OVROverlayCanvas::set_overlayEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVROverlayCanvas*), "set_overlayEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVROverlayCanvas::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OVROverlayCanvas::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVROverlayCanvas::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVROverlayCanvas*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
