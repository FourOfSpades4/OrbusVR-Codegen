// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LTBezier
  class LTBezier;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LTBezierPath
  class LTBezierPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LTBezierPath);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LTBezierPath*, "", "LTBezierPath");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: LTBezierPath
  // [TokenAttribute] Offset: FFFFFFFF
  class LTBezierPath : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Vector3[] pts
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Vector3> pts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public System.Single length
    // Size: 0x4
    // Offset: 0x18
    float length;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean orientToPath
    // Size: 0x1
    // Offset: 0x1C
    bool orientToPath;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean orientToPath2d
    // Size: 0x1
    // Offset: 0x1D
    bool orientToPath2d;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: orientToPath2d and: beziers
    char __padding3[0x2] = {};
    // private LTBezier[] beziers
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::LTBezier*> beziers;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::LTBezier*>) == 0x8);
    // private System.Single[] lengthRatio
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<float> lengthRatio;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Int32 currentBezier
    // Size: 0x4
    // Offset: 0x30
    int currentBezier;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 previousBezier
    // Size: 0x4
    // Offset: 0x34
    int previousBezier;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Vector3[] pts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_pts();
    // Get instance field reference: public System.Single length
    [[deprecated("Use field access instead!")]] float& dyn_length();
    // Get instance field reference: public System.Boolean orientToPath
    [[deprecated("Use field access instead!")]] bool& dyn_orientToPath();
    // Get instance field reference: public System.Boolean orientToPath2d
    [[deprecated("Use field access instead!")]] bool& dyn_orientToPath2d();
    // Get instance field reference: private LTBezier[] beziers
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LTBezier*>& dyn_beziers();
    // Get instance field reference: private System.Single[] lengthRatio
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_lengthRatio();
    // Get instance field reference: private System.Int32 currentBezier
    [[deprecated("Use field access instead!")]] int& dyn_currentBezier();
    // Get instance field reference: private System.Int32 previousBezier
    [[deprecated("Use field access instead!")]] int& dyn_previousBezier();
    // public System.Void .ctor()
    // Offset: 0x1AB76E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LTBezierPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LTBezierPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LTBezierPath*, creationType>()));
    }
    // public System.Void .ctor(UnityEngine.Vector3[] pts_)
    // Offset: 0x1AB76E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LTBezierPath* New_ctor(::ArrayW<::UnityEngine::Vector3> pts_) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LTBezierPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LTBezierPath*, creationType>(pts_)));
    }
    // public System.Void setPoints(UnityEngine.Vector3[] pts_)
    // Offset: 0x1AB7718
    void setPoints(::ArrayW<::UnityEngine::Vector3> pts_);
    // public UnityEngine.Vector3 point(System.Single ratio)
    // Offset: 0x1AB7C28
    ::UnityEngine::Vector3 point(float ratio);
    // public System.Void place2d(UnityEngine.Transform transform, System.Single ratio)
    // Offset: 0x1AB7E00
    void place2d(::UnityEngine::Transform* transform, float ratio);
    // public System.Void placeLocal2d(UnityEngine.Transform transform, System.Single ratio)
    // Offset: 0x1AB7FB8
    void placeLocal2d(::UnityEngine::Transform* transform, float ratio);
    // public System.Void place(UnityEngine.Transform transform, System.Single ratio)
    // Offset: 0x1AB81C0
    void place(::UnityEngine::Transform* transform, float ratio);
    // public System.Void place(UnityEngine.Transform transform, System.Single ratio, UnityEngine.Vector3 worldUp)
    // Offset: 0x1AB8264
    void place(::UnityEngine::Transform* transform, float ratio, ::UnityEngine::Vector3 worldUp);
    // public System.Void placeLocal(UnityEngine.Transform transform, System.Single ratio)
    // Offset: 0x1AB835C
    void placeLocal(::UnityEngine::Transform* transform, float ratio);
    // public System.Void placeLocal(UnityEngine.Transform transform, System.Single ratio, UnityEngine.Vector3 worldUp)
    // Offset: 0x1AB8400
    void placeLocal(::UnityEngine::Transform* transform, float ratio, ::UnityEngine::Vector3 worldUp);
    // public System.Single getRationInOneRange(System.Single ratio)
    // Offset: 0x1AB8564
    float getRationInOneRange(float ratio);
    // public System.Void gizmoDraw(System.Single t)
    // Offset: 0x1AB8610
    void gizmoDraw(float t);
  }; // LTBezierPath
  #pragma pack(pop)
  static check_size<sizeof(LTBezierPath), 52 + sizeof(int)> __GlobalNamespace_LTBezierPathSizeCheck;
  static_assert(sizeof(LTBezierPath) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LTBezierPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LTBezierPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LTBezierPath::setPoints
// Il2CppName: setPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTBezierPath::*)(::ArrayW<::UnityEngine::Vector3>)>(&GlobalNamespace::LTBezierPath::setPoints)> {
  static const MethodInfo* get() {
    static auto* pts_ = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTBezierPath*), "setPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pts_});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTBezierPath::point
// Il2CppName: point
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::LTBezierPath::*)(float)>(&GlobalNamespace::LTBezierPath::point)> {
  static const MethodInfo* get() {
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTBezierPath*), "point", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ratio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTBezierPath::place2d
// Il2CppName: place2d
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTBezierPath::*)(::UnityEngine::Transform*, float)>(&GlobalNamespace::LTBezierPath::place2d)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTBezierPath*), "place2d", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, ratio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTBezierPath::placeLocal2d
// Il2CppName: placeLocal2d
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTBezierPath::*)(::UnityEngine::Transform*, float)>(&GlobalNamespace::LTBezierPath::placeLocal2d)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTBezierPath*), "placeLocal2d", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, ratio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTBezierPath::place
// Il2CppName: place
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTBezierPath::*)(::UnityEngine::Transform*, float)>(&GlobalNamespace::LTBezierPath::place)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTBezierPath*), "place", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, ratio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTBezierPath::place
// Il2CppName: place
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTBezierPath::*)(::UnityEngine::Transform*, float, ::UnityEngine::Vector3)>(&GlobalNamespace::LTBezierPath::place)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTBezierPath*), "place", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, ratio, worldUp});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTBezierPath::placeLocal
// Il2CppName: placeLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTBezierPath::*)(::UnityEngine::Transform*, float)>(&GlobalNamespace::LTBezierPath::placeLocal)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTBezierPath*), "placeLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, ratio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTBezierPath::placeLocal
// Il2CppName: placeLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTBezierPath::*)(::UnityEngine::Transform*, float, ::UnityEngine::Vector3)>(&GlobalNamespace::LTBezierPath::placeLocal)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTBezierPath*), "placeLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, ratio, worldUp});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTBezierPath::getRationInOneRange
// Il2CppName: getRationInOneRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LTBezierPath::*)(float)>(&GlobalNamespace::LTBezierPath::getRationInOneRange)> {
  static const MethodInfo* get() {
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTBezierPath*), "getRationInOneRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ratio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTBezierPath::gizmoDraw
// Il2CppName: gizmoDraw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTBezierPath::*)(float)>(&GlobalNamespace::LTBezierPath::gizmoDraw)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTBezierPath*), "gizmoDraw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
