// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SKManager
  class SKManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SKManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SKManager*, "", "SKManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: SKManager
  // [TokenAttribute] Offset: FFFFFFFF
  class SKManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [HeaderAttribute] Offset: 0xADA788
    // [RangeAttribute] Offset: 0xADA788
    // public System.Single breasts
    // Size: 0x4
    // Offset: 0x18
    float breasts;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xADA7E0
    // public System.Single chest
    // Size: 0x4
    // Offset: 0x1C
    float chest;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xADA800
    // public System.Single hips
    // Size: 0x4
    // Offset: 0x20
    float hips;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xADA820
    // public System.Single neck
    // Size: 0x4
    // Offset: 0x24
    float neck;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xADA840
    // public System.Single shoulders
    // Size: 0x4
    // Offset: 0x28
    float shoulders;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xADA860
    // public System.Single waist
    // Size: 0x4
    // Offset: 0x2C
    float waist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xADA880
    // [RangeAttribute] Offset: 0xADA880
    // public System.Single forehead
    // Size: 0x4
    // Offset: 0x30
    float forehead;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xADA8D8
    // public System.Single cheekBones
    // Size: 0x4
    // Offset: 0x34
    float cheekBones;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xADA8F8
    // public System.Single cheeks
    // Size: 0x4
    // Offset: 0x38
    float cheeks;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xADA918
    // public System.Single chin
    // Size: 0x4
    // Offset: 0x3C
    float chin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xADA938
    // public System.Single faceDepth
    // Size: 0x4
    // Offset: 0x40
    float faceDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: faceDepth and: noseParent
    char __padding10[0x4] = {};
    // [HeaderAttribute] Offset: 0xADA958
    // public UnityEngine.GameObject noseParent
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* noseParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Single minNoseOffsetZ
    // Size: 0x4
    // Offset: 0x50
    float minNoseOffsetZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxNoseOffsetZ
    // Size: 0x4
    // Offset: 0x54
    float maxNoseOffsetZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single curNoseOffset
    // Size: 0x4
    // Offset: 0x58
    float curNoseOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: curNoseOffset and: bodyObjects
    char __padding14[0x4] = {};
    // [HeaderAttribute] Offset: 0xADA990
    // public UnityEngine.SkinnedMeshRenderer[] bodyObjects
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::SkinnedMeshRenderer*> bodyObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::SkinnedMeshRenderer*>) == 0x8);
    // public UnityEngine.SkinnedMeshRenderer[] headObjects
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::SkinnedMeshRenderer*> headObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::SkinnedMeshRenderer*>) == 0x8);
    // public UnityEngine.SkinnedMeshRenderer[] hairObjects
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::UnityEngine::SkinnedMeshRenderer*> hairObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::SkinnedMeshRenderer*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single breasts
    [[deprecated("Use field access instead!")]] float& dyn_breasts();
    // Get instance field reference: public System.Single chest
    [[deprecated("Use field access instead!")]] float& dyn_chest();
    // Get instance field reference: public System.Single hips
    [[deprecated("Use field access instead!")]] float& dyn_hips();
    // Get instance field reference: public System.Single neck
    [[deprecated("Use field access instead!")]] float& dyn_neck();
    // Get instance field reference: public System.Single shoulders
    [[deprecated("Use field access instead!")]] float& dyn_shoulders();
    // Get instance field reference: public System.Single waist
    [[deprecated("Use field access instead!")]] float& dyn_waist();
    // Get instance field reference: public System.Single forehead
    [[deprecated("Use field access instead!")]] float& dyn_forehead();
    // Get instance field reference: public System.Single cheekBones
    [[deprecated("Use field access instead!")]] float& dyn_cheekBones();
    // Get instance field reference: public System.Single cheeks
    [[deprecated("Use field access instead!")]] float& dyn_cheeks();
    // Get instance field reference: public System.Single chin
    [[deprecated("Use field access instead!")]] float& dyn_chin();
    // Get instance field reference: public System.Single faceDepth
    [[deprecated("Use field access instead!")]] float& dyn_faceDepth();
    // Get instance field reference: public UnityEngine.GameObject noseParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_noseParent();
    // Get instance field reference: public System.Single minNoseOffsetZ
    [[deprecated("Use field access instead!")]] float& dyn_minNoseOffsetZ();
    // Get instance field reference: public System.Single maxNoseOffsetZ
    [[deprecated("Use field access instead!")]] float& dyn_maxNoseOffsetZ();
    // Get instance field reference: private System.Single curNoseOffset
    [[deprecated("Use field access instead!")]] float& dyn_curNoseOffset();
    // Get instance field reference: public UnityEngine.SkinnedMeshRenderer[] bodyObjects
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::SkinnedMeshRenderer*>& dyn_bodyObjects();
    // Get instance field reference: public UnityEngine.SkinnedMeshRenderer[] headObjects
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::SkinnedMeshRenderer*>& dyn_headObjects();
    // Get instance field reference: public UnityEngine.SkinnedMeshRenderer[] hairObjects
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::SkinnedMeshRenderer*>& dyn_hairObjects();
    // private System.Void Start()
    // Offset: 0xE2AE30
    void Start();
    // private System.Void OnValidate()
    // Offset: 0xE2AE78
    void OnValidate();
    // public System.Void SetShapeKeys()
    // Offset: 0xE2AE54
    void SetShapeKeys();
    // private System.Void UpdateBodyShapeKeys()
    // Offset: 0xE2AE9C
    void UpdateBodyShapeKeys();
    // private System.Void UpdateHeadShapeKeys()
    // Offset: 0xE2B2F4
    void UpdateHeadShapeKeys();
    // public System.Void .ctor()
    // Offset: 0xE2BAB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SKManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SKManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SKManager*, creationType>()));
    }
  }; // SKManager
  #pragma pack(pop)
  static check_size<sizeof(SKManager), 112 + sizeof(::ArrayW<::UnityEngine::SkinnedMeshRenderer*>)> __GlobalNamespace_SKManagerSizeCheck;
  static_assert(sizeof(SKManager) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SKManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SKManager::*)()>(&GlobalNamespace::SKManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SKManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SKManager::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SKManager::*)()>(&GlobalNamespace::SKManager::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SKManager*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SKManager::SetShapeKeys
// Il2CppName: SetShapeKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SKManager::*)()>(&GlobalNamespace::SKManager::SetShapeKeys)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SKManager*), "SetShapeKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SKManager::UpdateBodyShapeKeys
// Il2CppName: UpdateBodyShapeKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SKManager::*)()>(&GlobalNamespace::SKManager::UpdateBodyShapeKeys)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SKManager*), "UpdateBodyShapeKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SKManager::UpdateHeadShapeKeys
// Il2CppName: UpdateHeadShapeKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SKManager::*)()>(&GlobalNamespace::SKManager::UpdateHeadShapeKeys)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SKManager*), "UpdateHeadShapeKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SKManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
