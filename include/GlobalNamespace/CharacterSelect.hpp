// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SKManager
  class SKManager;
  // Forward declaring type: SuperTextMesh
  class SuperTextMesh;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: TextAsset
  class TextAsset;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: PowerUI
namespace PowerUI {
  // Forward declaring type: WorldUI
  class WorldUI;
  // Forward declaring type: Element
  class Element;
  // Forward declaring type: Document
  class Document;
  // Forward declaring type: UIEvent
  class UIEvent;
}
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: PlayerAvatar
  class PlayerAvatar;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: AccountCharacterList
  class AccountCharacterList;
  // Forward declaring type: BlogPostList
  class BlogPostList;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CharacterSelect
  class CharacterSelect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CharacterSelect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CharacterSelect*, "", "CharacterSelect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1A0
  #pragma pack(push, 1)
  // Autogenerated type: CharacterSelect
  // [TokenAttribute] Offset: FFFFFFFF
  class CharacterSelect : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::CharacterSelect::$FreeMemory$d__79
    class $FreeMemory$d__79;
    // Nested type: ::GlobalNamespace::CharacterSelect::$UseUpMemory$d__80
    class $UseUpMemory$d__80;
    // Nested type: ::GlobalNamespace::CharacterSelect::$$c__DisplayClass82_0
    class $$c__DisplayClass82_0;
    // Nested type: ::GlobalNamespace::CharacterSelect::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::CharacterSelect::$$c__DisplayClass101_0
    class $$c__DisplayClass101_0;
    // Nested type: ::GlobalNamespace::CharacterSelect::$$c__DisplayClass102_0
    class $$c__DisplayClass102_0;
    // Nested type: ::GlobalNamespace::CharacterSelect::$$c__DisplayClass106_0
    class $$c__DisplayClass106_0;
    public:
    // private UnityEngine.GameObject interactionMenu
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* interactionMenu;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private PowerUI.WorldUI interactionMenuUi
    // Size: 0x8
    // Offset: 0x20
    ::PowerUI::WorldUI* interactionMenuUi;
    // Field size check
    static_assert(sizeof(::PowerUI::WorldUI*) == 0x8);
    // public UnityEngine.TextAsset characterSelectMenu
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::TextAsset* characterSelectMenu;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextAsset*) == 0x8);
    // public MagicalActual.PlayerAvatar dummyAvatar
    // Size: 0x8
    // Offset: 0x30
    ::MagicalActual::PlayerAvatar* dummyAvatar;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerAvatar*) == 0x8);
    // public UnityEngine.GameObject playerMirror
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* playerMirror;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject appearanceOptions
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* appearanceOptions;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject locomotionOptions
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* locomotionOptions;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject codeOfConduct
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* codeOfConduct;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject safetyInfo
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* safetyInfo;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public SKManager myManager
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::SKManager* myManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SKManager*) == 0x8);
    // public UnityEngine.GameObject[] appearanceObjectPages
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::GameObject*> appearanceObjectPages;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject changePoofPrefab
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* changePoofPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject menuInteractTut
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::GameObject* menuInteractTut;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single timeSinceEmote
    // Size: 0x4
    // Offset: 0x80
    float timeSinceEmote;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: timeSinceEmote and: possibleEmotions
    char __padding13[0x4] = {};
    // private System.String[] possibleEmotions
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::StringW> possibleEmotions;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.Single emoteEvery
    // Size: 0x4
    // Offset: 0x90
    float emoteEvery;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeSinceInternetCheck
    // Size: 0x4
    // Offset: 0x94
    float timeSinceInternetCheck;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single checkInternetEvery
    // Size: 0x4
    // Offset: 0x98
    float checkInternetEvery;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single newcharTone
    // Size: 0x4
    // Offset: 0x9C
    float newcharTone;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Byte newcharEyeSet
    // Size: 0x1
    // Offset: 0xA0
    uint8_t newcharEyeSet;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte newcharMouthSet
    // Size: 0x1
    // Offset: 0xA1
    uint8_t newcharMouthSet;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: newcharMouthSet and: newcharName
    char __padding20[0x6] = {};
    // public System.String newcharName
    // Size: 0x8
    // Offset: 0xA8
    ::StringW newcharName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Byte newcharHairStyle
    // Size: 0x1
    // Offset: 0xB0
    uint8_t newcharHairStyle;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte newcharHairColor
    // Size: 0x1
    // Offset: 0xB1
    uint8_t newcharHairColor;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte newcharNoseStyle
    // Size: 0x1
    // Offset: 0xB2
    uint8_t newcharNoseStyle;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte newcharEarStyle
    // Size: 0x1
    // Offset: 0xB3
    uint8_t newcharEarStyle;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte newcharEyeColor
    // Size: 0x1
    // Offset: 0xB4
    uint8_t newcharEyeColor;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte newcharDiscipline
    // Size: 0x1
    // Offset: 0xB5
    uint8_t newcharDiscipline;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: newcharDiscipline and: modifyingCharacterId
    char __padding27[0x2] = {};
    // public System.String modifyingCharacterId
    // Size: 0x8
    // Offset: 0xB8
    ::StringW modifyingCharacterId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Byte newPrimaryWeaponIdx
    // Size: 0x1
    // Offset: 0xC0
    uint8_t newPrimaryWeaponIdx;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: newPrimaryWeaponIdx and: movemenetSelect
    char __padding29[0x3] = {};
    // private System.Int32 movemenetSelect
    // Size: 0x4
    // Offset: 0xC4
    int movemenetSelect;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single timeUntilControllerHint
    // Size: 0x4
    // Offset: 0xC8
    float timeUntilControllerHint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeSinceStarted
    // Size: 0x4
    // Offset: 0xCC
    float timeSinceStarted;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean hintSuccessful
    // Size: 0x1
    // Offset: 0xD0
    bool hintSuccessful;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean showEntitlementFailed
    // Size: 0x1
    // Offset: 0xD1
    bool showEntitlementFailed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showEntitlementFailed and: currentErrorMsg
    char __padding34[0x6] = {};
    // private System.String currentErrorMsg
    // Size: 0x8
    // Offset: 0xD8
    ::StringW currentErrorMsg;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean didFailEntitlement
    // Size: 0x1
    // Offset: 0xE0
    bool didFailEntitlement;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean triggeredLogin
    // Size: 0x1
    // Offset: 0xE1
    bool triggeredLogin;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: triggeredLogin and: dummyAvatarStartPosition
    char __padding37[0x2] = {};
    // private UnityEngine.Vector3 dummyAvatarStartPosition
    // Size: 0xC
    // Offset: 0xE4
    ::UnityEngine::Vector3 dummyAvatarStartPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.GameObject dummyRig
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::GameObject* dummyRig;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Texture2D[] fakeTextures
    // Size: 0x8
    // Offset: 0xF8
    ::ArrayW<::UnityEngine::Texture2D*> fakeTextures;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Texture2D*>) == 0x8);
    // private System.Int32 numFakes
    // Size: 0x4
    // Offset: 0x100
    int numFakes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 fakesCreated
    // Size: 0x4
    // Offset: 0x104
    int fakesCreated;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single timeSinceFake
    // Size: 0x4
    // Offset: 0x108
    float timeSinceFake;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeSinceDeletePressed
    // Size: 0x4
    // Offset: 0x10C
    float timeSinceDeletePressed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single deleteConfirmTime
    // Size: 0x4
    // Offset: 0x110
    float deleteConfirmTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean holdingDeleteConfirm
    // Size: 0x1
    // Offset: 0x114
    bool holdingDeleteConfirm;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: holdingDeleteConfirm and: deleteConfirmDial
    char __padding46[0x3] = {};
    // public UnityEngine.UI.Image deleteConfirmDial
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::UI::Image* deleteConfirmDial;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // private System.Boolean waitingOnCharacterList
    // Size: 0x1
    // Offset: 0x120
    bool waitingOnCharacterList;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: waitingOnCharacterList and: timeWaitingOnCharacterList
    char __padding48[0x3] = {};
    // private System.Single timeWaitingOnCharacterList
    // Size: 0x4
    // Offset: 0x124
    float timeWaitingOnCharacterList;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeoutCharacterListAfter
    // Size: 0x4
    // Offset: 0x128
    float timeoutCharacterListAfter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean didInteract
    // Size: 0x1
    // Offset: 0x12C
    bool didInteract;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean characterSelectBegun
    // Size: 0x1
    // Offset: 0x12D
    bool characterSelectBegun;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean interactionMenuReady
    // Size: 0x1
    // Offset: 0x12E
    bool interactionMenuReady;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean wantsToShowLoginScreen
    // Size: 0x1
    // Offset: 0x12F
    bool wantsToShowLoginScreen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean waitingForLogin
    // Size: 0x1
    // Offset: 0x130
    bool waitingForLogin;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: waitingForLogin and: timeSinceLoginBegan
    char __padding55[0x3] = {};
    // private System.Single timeSinceLoginBegan
    // Size: 0x4
    // Offset: 0x134
    float timeSinceLoginBegan;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single loginTimeoutAfter
    // Size: 0x4
    // Offset: 0x138
    float loginTimeoutAfter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: loginTimeoutAfter and: keyboardTarget
    char __padding57[0x4] = {};
    // private PowerUI.Element keyboardTarget
    // Size: 0x8
    // Offset: 0x140
    ::PowerUI::Element* keyboardTarget;
    // Field size check
    static_assert(sizeof(::PowerUI::Element*) == 0x8);
    // private System.String accountRealPass
    // Size: 0x8
    // Offset: 0x148
    ::StringW accountRealPass;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private PowerUI.Document menuDocument
    // Size: 0x8
    // Offset: 0x150
    ::PowerUI::Document* menuDocument;
    // Field size check
    static_assert(sizeof(::PowerUI::Document*) == 0x8);
    // private UnityEngine.GameObject creationGrabPoints
    // Size: 0x8
    // Offset: 0x158
    ::UnityEngine::GameObject* creationGrabPoints;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public SuperTextMesh disciplineName
    // Size: 0x8
    // Offset: 0x160
    ::GlobalNamespace::SuperTextMesh* disciplineName;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh*) == 0x8);
    // public SuperTextMesh disciplineDescription
    // Size: 0x8
    // Offset: 0x168
    ::GlobalNamespace::SuperTextMesh* disciplineDescription;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh*) == 0x8);
    // public System.String[] disciplineNames
    // Size: 0x8
    // Offset: 0x170
    ::ArrayW<::StringW> disciplineNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public UnityEngine.GameObject[] disciplineHighlights
    // Size: 0x8
    // Offset: 0x178
    ::ArrayW<::UnityEngine::GameObject*> disciplineHighlights;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // [TextAreaAttribute] Offset: 0xADA208
    // public System.String[] disciplineDescriptions
    // Size: 0x8
    // Offset: 0x180
    ::ArrayW<::StringW> disciplineDescriptions;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public UnityEngine.GameObject[] disciplineWeapons
    // Size: 0x8
    // Offset: 0x188
    ::ArrayW<::UnityEngine::GameObject*> disciplineWeapons;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject fakeWeapons
    // Size: 0x8
    // Offset: 0x190
    ::UnityEngine::GameObject* fakeWeapons;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject menuBacker
    // Size: 0x8
    // Offset: 0x198
    ::UnityEngine::GameObject* menuBacker;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.Boolean internetErrorShowing
    static bool _get_internetErrorShowing();
    // Set static field: static private System.Boolean internetErrorShowing
    static void _set_internetErrorShowing(bool value);
    // Get static field: static private CharacterSelect _Instance
    static ::GlobalNamespace::CharacterSelect* _get__Instance();
    // Set static field: static private CharacterSelect _Instance
    static void _set__Instance(::GlobalNamespace::CharacterSelect* value);
    // Get static field: static private System.Int32 currentGuid
    static int _get_currentGuid();
    // Set static field: static private System.Int32 currentGuid
    static void _set_currentGuid(int value);
    // Get static field: static private System.Int32 currentCharacterId
    static int _get_currentCharacterId();
    // Set static field: static private System.Int32 currentCharacterId
    static void _set_currentCharacterId(int value);
    // Get instance field reference: private UnityEngine.GameObject interactionMenu
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_interactionMenu();
    // Get instance field reference: private PowerUI.WorldUI interactionMenuUi
    [[deprecated("Use field access instead!")]] ::PowerUI::WorldUI*& dyn_interactionMenuUi();
    // Get instance field reference: public UnityEngine.TextAsset characterSelectMenu
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextAsset*& dyn_characterSelectMenu();
    // Get instance field reference: public MagicalActual.PlayerAvatar dummyAvatar
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerAvatar*& dyn_dummyAvatar();
    // Get instance field reference: public UnityEngine.GameObject playerMirror
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_playerMirror();
    // Get instance field reference: public UnityEngine.GameObject appearanceOptions
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_appearanceOptions();
    // Get instance field reference: public UnityEngine.GameObject locomotionOptions
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_locomotionOptions();
    // Get instance field reference: public UnityEngine.GameObject codeOfConduct
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_codeOfConduct();
    // Get instance field reference: public UnityEngine.GameObject safetyInfo
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_safetyInfo();
    // Get instance field reference: public SKManager myManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SKManager*& dyn_myManager();
    // Get instance field reference: public UnityEngine.GameObject[] appearanceObjectPages
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_appearanceObjectPages();
    // Get instance field reference: public UnityEngine.GameObject changePoofPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_changePoofPrefab();
    // Get instance field reference: public UnityEngine.GameObject menuInteractTut
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_menuInteractTut();
    // Get instance field reference: private System.Single timeSinceEmote
    [[deprecated("Use field access instead!")]] float& dyn_timeSinceEmote();
    // Get instance field reference: private System.String[] possibleEmotions
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_possibleEmotions();
    // Get instance field reference: private System.Single emoteEvery
    [[deprecated("Use field access instead!")]] float& dyn_emoteEvery();
    // Get instance field reference: private System.Single timeSinceInternetCheck
    [[deprecated("Use field access instead!")]] float& dyn_timeSinceInternetCheck();
    // Get instance field reference: private System.Single checkInternetEvery
    [[deprecated("Use field access instead!")]] float& dyn_checkInternetEvery();
    // Get instance field reference: public System.Single newcharTone
    [[deprecated("Use field access instead!")]] float& dyn_newcharTone();
    // Get instance field reference: public System.Byte newcharEyeSet
    [[deprecated("Use field access instead!")]] uint8_t& dyn_newcharEyeSet();
    // Get instance field reference: public System.Byte newcharMouthSet
    [[deprecated("Use field access instead!")]] uint8_t& dyn_newcharMouthSet();
    // Get instance field reference: public System.String newcharName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_newcharName();
    // Get instance field reference: public System.Byte newcharHairStyle
    [[deprecated("Use field access instead!")]] uint8_t& dyn_newcharHairStyle();
    // Get instance field reference: public System.Byte newcharHairColor
    [[deprecated("Use field access instead!")]] uint8_t& dyn_newcharHairColor();
    // Get instance field reference: public System.Byte newcharNoseStyle
    [[deprecated("Use field access instead!")]] uint8_t& dyn_newcharNoseStyle();
    // Get instance field reference: public System.Byte newcharEarStyle
    [[deprecated("Use field access instead!")]] uint8_t& dyn_newcharEarStyle();
    // Get instance field reference: public System.Byte newcharEyeColor
    [[deprecated("Use field access instead!")]] uint8_t& dyn_newcharEyeColor();
    // Get instance field reference: public System.Byte newcharDiscipline
    [[deprecated("Use field access instead!")]] uint8_t& dyn_newcharDiscipline();
    // Get instance field reference: public System.String modifyingCharacterId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_modifyingCharacterId();
    // Get instance field reference: public System.Byte newPrimaryWeaponIdx
    [[deprecated("Use field access instead!")]] uint8_t& dyn_newPrimaryWeaponIdx();
    // Get instance field reference: private System.Int32 movemenetSelect
    [[deprecated("Use field access instead!")]] int& dyn_movemenetSelect();
    // Get instance field reference: private System.Single timeUntilControllerHint
    [[deprecated("Use field access instead!")]] float& dyn_timeUntilControllerHint();
    // Get instance field reference: private System.Single timeSinceStarted
    [[deprecated("Use field access instead!")]] float& dyn_timeSinceStarted();
    // Get instance field reference: private System.Boolean hintSuccessful
    [[deprecated("Use field access instead!")]] bool& dyn_hintSuccessful();
    // Get instance field reference: private System.Boolean showEntitlementFailed
    [[deprecated("Use field access instead!")]] bool& dyn_showEntitlementFailed();
    // Get instance field reference: private System.String currentErrorMsg
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currentErrorMsg();
    // Get instance field reference: private System.Boolean didFailEntitlement
    [[deprecated("Use field access instead!")]] bool& dyn_didFailEntitlement();
    // Get instance field reference: private System.Boolean triggeredLogin
    [[deprecated("Use field access instead!")]] bool& dyn_triggeredLogin();
    // Get instance field reference: private UnityEngine.Vector3 dummyAvatarStartPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_dummyAvatarStartPosition();
    // Get instance field reference: private UnityEngine.GameObject dummyRig
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_dummyRig();
    // Get instance field reference: private UnityEngine.Texture2D[] fakeTextures
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Texture2D*>& dyn_fakeTextures();
    // Get instance field reference: private System.Int32 numFakes
    [[deprecated("Use field access instead!")]] int& dyn_numFakes();
    // Get instance field reference: private System.Int32 fakesCreated
    [[deprecated("Use field access instead!")]] int& dyn_fakesCreated();
    // Get instance field reference: private System.Single timeSinceFake
    [[deprecated("Use field access instead!")]] float& dyn_timeSinceFake();
    // Get instance field reference: private System.Single timeSinceDeletePressed
    [[deprecated("Use field access instead!")]] float& dyn_timeSinceDeletePressed();
    // Get instance field reference: private System.Single deleteConfirmTime
    [[deprecated("Use field access instead!")]] float& dyn_deleteConfirmTime();
    // Get instance field reference: private System.Boolean holdingDeleteConfirm
    [[deprecated("Use field access instead!")]] bool& dyn_holdingDeleteConfirm();
    // Get instance field reference: public UnityEngine.UI.Image deleteConfirmDial
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_deleteConfirmDial();
    // Get instance field reference: private System.Boolean waitingOnCharacterList
    [[deprecated("Use field access instead!")]] bool& dyn_waitingOnCharacterList();
    // Get instance field reference: private System.Single timeWaitingOnCharacterList
    [[deprecated("Use field access instead!")]] float& dyn_timeWaitingOnCharacterList();
    // Get instance field reference: private System.Single timeoutCharacterListAfter
    [[deprecated("Use field access instead!")]] float& dyn_timeoutCharacterListAfter();
    // Get instance field reference: private System.Boolean didInteract
    [[deprecated("Use field access instead!")]] bool& dyn_didInteract();
    // Get instance field reference: private System.Boolean characterSelectBegun
    [[deprecated("Use field access instead!")]] bool& dyn_characterSelectBegun();
    // Get instance field reference: private System.Boolean interactionMenuReady
    [[deprecated("Use field access instead!")]] bool& dyn_interactionMenuReady();
    // Get instance field reference: private System.Boolean wantsToShowLoginScreen
    [[deprecated("Use field access instead!")]] bool& dyn_wantsToShowLoginScreen();
    // Get instance field reference: private System.Boolean waitingForLogin
    [[deprecated("Use field access instead!")]] bool& dyn_waitingForLogin();
    // Get instance field reference: private System.Single timeSinceLoginBegan
    [[deprecated("Use field access instead!")]] float& dyn_timeSinceLoginBegan();
    // Get instance field reference: private System.Single loginTimeoutAfter
    [[deprecated("Use field access instead!")]] float& dyn_loginTimeoutAfter();
    // Get instance field reference: private PowerUI.Element keyboardTarget
    [[deprecated("Use field access instead!")]] ::PowerUI::Element*& dyn_keyboardTarget();
    // Get instance field reference: private System.String accountRealPass
    [[deprecated("Use field access instead!")]] ::StringW& dyn_accountRealPass();
    // Get instance field reference: private PowerUI.Document menuDocument
    [[deprecated("Use field access instead!")]] ::PowerUI::Document*& dyn_menuDocument();
    // Get instance field reference: private UnityEngine.GameObject creationGrabPoints
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_creationGrabPoints();
    // Get instance field reference: public SuperTextMesh disciplineName
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh*& dyn_disciplineName();
    // Get instance field reference: public SuperTextMesh disciplineDescription
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh*& dyn_disciplineDescription();
    // Get instance field reference: public System.String[] disciplineNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_disciplineNames();
    // Get instance field reference: public UnityEngine.GameObject[] disciplineHighlights
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_disciplineHighlights();
    // Get instance field reference: public System.String[] disciplineDescriptions
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_disciplineDescriptions();
    // Get instance field reference: public UnityEngine.GameObject[] disciplineWeapons
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_disciplineWeapons();
    // Get instance field reference: public UnityEngine.GameObject fakeWeapons
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_fakeWeapons();
    // Get instance field reference: public UnityEngine.GameObject menuBacker
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_menuBacker();
    // static public CharacterSelect get_Instance()
    // Offset: 0xDE1C5C
    static ::GlobalNamespace::CharacterSelect* get_Instance();
    // private System.Void Awake()
    // Offset: 0xDE1CC4
    void Awake();
    // private System.Void Start()
    // Offset: 0xDE1DA4
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0xDE26DC
    void OnDestroy();
    // private System.Collections.IEnumerator FreeMemory()
    // Offset: 0xDE2234
    ::System::Collections::IEnumerator* FreeMemory();
    // public System.Collections.IEnumerator UseUpMemory()
    // Offset: 0xDE27B4
    ::System::Collections::IEnumerator* UseUpMemory();
    // public System.Void EntitlementFailed()
    // Offset: 0xDE2854
    void EntitlementFailed();
    // public System.Void ShowError(System.String newmsg)
    // Offset: 0xDE28B0
    void ShowError(::StringW newmsg);
    // private System.Void errorWindowClicked(System.Int32 windowID)
    // Offset: 0xDE29A0
    void errorWindowClicked(int windowID);
    // public System.Void didInteractWithMenu()
    // Offset: 0xDE2A50
    void didInteractWithMenu();
    // private System.Void InitInteractionMenu()
    // Offset: 0xDE2B88
    void InitInteractionMenu();
    // public System.Void BeginCharacterSelect()
    // Offset: 0xDE2FE4
    void BeginCharacterSelect();
    // public System.Void ShowChangePoof(UnityEngine.Vector3 location)
    // Offset: 0xDE343C
    void ShowChangePoof(::UnityEngine::Vector3 location);
    // public System.Void ShowLoginScreen()
    // Offset: 0xDE35B0
    void ShowLoginScreen();
    // public System.Void ShowAccountLinkError()
    // Offset: 0xDE3734
    void ShowAccountLinkError();
    // public System.Void ShowAccountLinkExistsError()
    // Offset: 0xDE37C0
    void ShowAccountLinkExistsError();
    // public System.Void ShowInteractionMenu()
    // Offset: 0xDE384C
    void ShowInteractionMenu();
    // private System.Void Update()
    // Offset: 0xDE3BDC
    void Update();
    // private System.Void FixedUpdate()
    // Offset: 0xDE4058
    void FixedUpdate();
    // public System.Void showDummyAvatar(System.Int32 charidx)
    // Offset: 0xDE4C18
    void showDummyAvatar(int charidx);
    // public System.Void changeSkinTonePercent(System.Single percent)
    // Offset: 0xDE5648
    void changeSkinTonePercent(float percent);
    // public System.Void changeMouthSet(System.String mouthSetNum)
    // Offset: 0xDE56C0
    void changeMouthSet(::StringW mouthSetNum);
    // public System.Void changeEyeSet(System.String eyeSetNum)
    // Offset: 0xDE5714
    void changeEyeSet(::StringW eyeSetNum);
    // public System.Void changeHairColor(System.String hairColorNum)
    // Offset: 0xDE5768
    void changeHairColor(::StringW hairColorNum);
    // public System.Void changeHairStyle(System.String hairStyleNum)
    // Offset: 0xDE57BC
    void changeHairStyle(::StringW hairStyleNum);
    // public System.Void updateCharacterName(System.String newName)
    // Offset: 0xDE5810
    void updateCharacterName(::StringW newName);
    // public System.Void doCreateCharacter(System.Action`1<System.String> callback)
    // Offset: 0xDE585C
    void doCreateCharacter(::System::Action_1<::StringW>* callback);
    // public System.Void deleteCharacter(System.Int32 charidx, System.Action`1<System.String> callback)
    // Offset: 0xDE3F24
    void deleteCharacter(int charidx, ::System::Action_1<::StringW>* callback);
    // public System.Void UpdateDummyAppearanceOption(System.String appearanceOption, System.Int32 appearanceIdx)
    // Offset: 0xDE5934
    void UpdateDummyAppearanceOption(::StringW appearanceOption, int appearanceIdx);
    // private System.Void HideAllDisciplineWeapons()
    // Offset: 0xDE22A8
    void HideAllDisciplineWeapons();
    // public System.Void changeAppearancePage(System.String newidx)
    // Offset: 0xDE23C4
    void changeAppearancePage(::StringW newidx);
    // public System.Void Login(System.Int32 charidx)
    // Offset: 0xDE5DFC
    void Login(int charidx);
    // public System.String capitalizeFirstLetter(System.String thisstring)
    // Offset: 0xDE609C
    ::StringW capitalizeFirstLetter(::StringW thisstring);
    // public System.Void showLogin()
    // Offset: 0xDE3628
    void showLogin();
    // static public System.Void showSubmenu(PowerUI.UIEvent e)
    // Offset: 0xDE6104
    static void showSubmenu(::PowerUI::UIEvent* e);
    // static public System.Void doLogout(PowerUI.UIEvent e)
    // Offset: 0xDE6954
    static void doLogout(::PowerUI::UIEvent* e);
    // static public System.Void closeAllMenus(PowerUI.UIEvent e)
    // Offset: 0xDE6A08
    static void closeAllMenus(::PowerUI::UIEvent* e);
    // static public System.Void chooseSkinToneFromSlider(PowerUI.UIEvent e)
    // Offset: 0xDE6A7C
    static void chooseSkinToneFromSlider(::PowerUI::UIEvent* e);
    // private System.Void forceSkinToneSlider(System.Single percent)
    // Offset: 0xDE6BF0
    void forceSkinToneSlider(float percent);
    // public System.Void closeMenus(System.Int32 maxOffset)
    // Offset: 0xDE6778
    void closeMenus(int maxOffset);
    // public System.Void initMenu()
    // Offset: 0xDE314C
    void initMenu();
    // public System.Void resetSelection(PowerUI.Element parentEl)
    // Offset: 0xDE6D0C
    void resetSelection(::PowerUI::Element* parentEl);
    // static public System.Void closeRootMenu(PowerUI.UIEvent e)
    // Offset: 0xDE7038
    static void closeRootMenu(::PowerUI::UIEvent* e);
    // public System.Void updateCharacterListing()
    // Offset: 0xDE6E8C
    void updateCharacterListing();
    // public System.Int32 parseInt(System.String stringInt)
    // Offset: 0xDE70AC
    int parseInt(::StringW stringInt);
    // static public System.Void showChangeMenu(PowerUI.UIEvent e)
    // Offset: 0xDE70B8
    static void showChangeMenu(::PowerUI::UIEvent* e);
    // public System.Void updateNewCharMenuToMatch(System.Int32 charidx)
    // Offset: 0xDE75F8
    void updateNewCharMenuToMatch(int charidx);
    // static public System.Void showCharacterOptions(PowerUI.UIEvent e)
    // Offset: 0xDE7D04
    static void showCharacterOptions(::PowerUI::UIEvent* e);
    // public System.Void forceCloseNewCharacter()
    // Offset: 0xDE835C
    void forceCloseNewCharacter();
    // public System.Void forceNewCharacter()
    // Offset: 0xDE79D0
    void forceNewCharacter();
    // static public System.Void showNewCharacter(PowerUI.UIEvent e)
    // Offset: 0xDE8480
    static void showNewCharacter(::PowerUI::UIEvent* e);
    // public System.Collections.Generic.Dictionary`2<System.String,System.String> getDataFromClasses(PowerUI.Element el)
    // Offset: 0xDE80F8
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* getDataFromClasses(::PowerUI::Element* el);
    // public System.Void showActiveCharacter(System.Int32 characterId)
    // Offset: 0xDE790C
    void showActiveCharacter(int characterId);
    // public System.Void addClass(PowerUI.Element el, System.String cname)
    // Offset: 0xDE8A7C
    void addClass(::PowerUI::Element* el, ::StringW cname);
    // public System.Void removeClass(PowerUI.Element el, System.String cname)
    // Offset: 0xDE8B84
    void removeClass(::PowerUI::Element* el, ::StringW cname);
    // public System.Boolean hasClass(PowerUI.Element el, System.String cname)
    // Offset: 0xDE8B34
    bool hasClass(::PowerUI::Element* el, ::StringW cname);
    // static public System.Void doNothing(PowerUI.UIEvent e)
    // Offset: 0xDE8C50
    static void doNothing(::PowerUI::UIEvent* e);
    // static public System.Void showKeyboard(PowerUI.UIEvent e)
    // Offset: 0xDE8C54
    static void showKeyboard(::PowerUI::UIEvent* e);
    // static public System.Void showKeyboardLogin(PowerUI.UIEvent e)
    // Offset: 0xDE8DD0
    static void showKeyboardLogin(::PowerUI::UIEvent* e);
    // static public System.Void showKeyboardPassword(PowerUI.UIEvent e)
    // Offset: 0xDE8F84
    static void showKeyboardPassword(::PowerUI::UIEvent* e);
    // static public System.Void selectEyeSet(PowerUI.UIEvent e)
    // Offset: 0xDE9124
    static void selectEyeSet(::PowerUI::UIEvent* e);
    // static public System.Void selectMouthSet(PowerUI.UIEvent e)
    // Offset: 0xDE93BC
    static void selectMouthSet(::PowerUI::UIEvent* e);
    // static public System.Void switchPage(PowerUI.UIEvent e)
    // Offset: 0xDE9654
    static void switchPage(::PowerUI::UIEvent* e);
    // static public System.Void selectHairStyle(PowerUI.UIEvent e)
    // Offset: 0xDE9730
    static void selectHairStyle(::PowerUI::UIEvent* e);
    // static public System.Void selectHairColor(PowerUI.UIEvent e)
    // Offset: 0xDE99C8
    static void selectHairColor(::PowerUI::UIEvent* e);
    // static public System.Void createCharacter(PowerUI.UIEvent e)
    // Offset: 0xDE9C60
    static void createCharacter(::PowerUI::UIEvent* e);
    // static public System.Void doLogin(PowerUI.UIEvent e)
    // Offset: 0xDE9DA4
    static void doLogin(::PowerUI::UIEvent* e);
    // static public System.Void confirmDeleteChar(PowerUI.UIEvent e)
    // Offset: 0xDE9E58
    static void confirmDeleteChar(::PowerUI::UIEvent* e);
    // static public System.Void confirmDeleteCharCancel(PowerUI.UIEvent e)
    // Offset: 0xDE9ECC
    static void confirmDeleteCharCancel(::PowerUI::UIEvent* e);
    // static public System.Void doAccountLink(PowerUI.UIEvent e)
    // Offset: 0xDE9F3C
    static void doAccountLink(::PowerUI::UIEvent* e);
    // public System.Void showLoginError()
    // Offset: 0xDE3738
    void showLoginError();
    // public System.Void showLinkAccountExists()
    // Offset: 0xDE37C4
    void showLinkAccountExists();
    // static public System.Void doCreateAccountLink(PowerUI.UIEvent e)
    // Offset: 0xDEA088
    static void doCreateAccountLink(::PowerUI::UIEvent* e);
    // static public System.Void toggleConnection(PowerUI.UIEvent e)
    // Offset: 0xDEA0F4
    static void toggleConnection(::PowerUI::UIEvent* e);
    // public System.Void updateNews()
    // Offset: 0xDE6F68
    void updateNews();
    // static public System.Void goToBlog(PowerUI.UIEvent e)
    // Offset: 0xDEA2EC
    static void goToBlog(::PowerUI::UIEvent* e);
    // public System.Void hideNews()
    // Offset: 0xDE55A8
    void hideNews();
    // public System.Void showNews()
    // Offset: 0xDE89DC
    void showNews();
    // public System.Void showInternetError()
    // Offset: 0xDE24E8
    void showInternetError();
    // public System.Void hideInternetError()
    // Offset: 0xDE25E4
    void hideInternetError();
    // static public System.Void ShowNewCharacterOptions()
    // Offset: 0xDE86A4
    static void ShowNewCharacterOptions();
    // static public System.Void ShowChangeCharacterOptions()
    // Offset: 0xDE7278
    static void ShowChangeCharacterOptions();
    // public System.Void FinalizeNewCharacter()
    // Offset: 0xDEA34C
    void FinalizeNewCharacter();
    // static public System.Void ShowLocomotions(PowerUI.UIEvent e)
    // Offset: 0xDEA644
    static void ShowLocomotions(::PowerUI::UIEvent* e);
    // static public System.Void ShowSafteyInfo(PowerUI.UIEvent e)
    // Offset: 0xDEA7D0
    static void ShowSafteyInfo(::PowerUI::UIEvent* e);
    // public System.Void UpdatePtt(System.Boolean enabled)
    // Offset: 0xDEAB80
    void UpdatePtt(bool enabled);
    // public System.Void UpdateLocomotionPref(System.Int32 pref)
    // Offset: 0xDEA75C
    void UpdateLocomotionPref(int pref);
    // public System.Void UpdateTurningPref(System.Int32 pref)
    // Offset: 0xDEABE8
    void UpdateTurningPref(int pref);
    // public System.Void setPrimaryWeaponHandLeft()
    // Offset: 0xDEAD1C
    void setPrimaryWeaponHandLeft();
    // public System.Void setPrimaryWeaponHandRight()
    // Offset: 0xDEADA4
    void setPrimaryWeaponHandRight();
    // public System.Void .ctor()
    // Offset: 0xDEAE28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CharacterSelect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CharacterSelect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CharacterSelect*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xDEAF50
    static void _cctor();
    // private System.Void <updateCharacterListing>b__118_0(ExtUI.AccountCharacterList characterList)
    // Offset: 0xDEAFB8
    void $updateCharacterListing$b__118_0(::ExtUI::AccountCharacterList* characterList);
    // private System.Void <updateNews>b__149_0(ExtUI.BlogPostList blogPostList)
    // Offset: 0xDEB4C4
    void $updateNews$b__149_0(::ExtUI::BlogPostList* blogPostList);
  }; // CharacterSelect
  #pragma pack(pop)
  static check_size<sizeof(CharacterSelect), 408 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_CharacterSelectSizeCheck;
  static_assert(sizeof(CharacterSelect) == 0x1A0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::CharacterSelect* (*)()>(&GlobalNamespace::CharacterSelect::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::FreeMemory
// Il2CppName: FreeMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::FreeMemory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "FreeMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::UseUpMemory
// Il2CppName: UseUpMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::UseUpMemory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "UseUpMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::EntitlementFailed
// Il2CppName: EntitlementFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::EntitlementFailed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "EntitlementFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::ShowError
// Il2CppName: ShowError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(::StringW)>(&GlobalNamespace::CharacterSelect::ShowError)> {
  static const MethodInfo* get() {
    static auto* newmsg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "ShowError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newmsg});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::errorWindowClicked
// Il2CppName: errorWindowClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(int)>(&GlobalNamespace::CharacterSelect::errorWindowClicked)> {
  static const MethodInfo* get() {
    static auto* windowID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "errorWindowClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{windowID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::didInteractWithMenu
// Il2CppName: didInteractWithMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::didInteractWithMenu)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "didInteractWithMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::InitInteractionMenu
// Il2CppName: InitInteractionMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::InitInteractionMenu)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "InitInteractionMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::BeginCharacterSelect
// Il2CppName: BeginCharacterSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::BeginCharacterSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "BeginCharacterSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::ShowChangePoof
// Il2CppName: ShowChangePoof
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(::UnityEngine::Vector3)>(&GlobalNamespace::CharacterSelect::ShowChangePoof)> {
  static const MethodInfo* get() {
    static auto* location = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "ShowChangePoof", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{location});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::ShowLoginScreen
// Il2CppName: ShowLoginScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::ShowLoginScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "ShowLoginScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::ShowAccountLinkError
// Il2CppName: ShowAccountLinkError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::ShowAccountLinkError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "ShowAccountLinkError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::ShowAccountLinkExistsError
// Il2CppName: ShowAccountLinkExistsError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::ShowAccountLinkExistsError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "ShowAccountLinkExistsError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::ShowInteractionMenu
// Il2CppName: ShowInteractionMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::ShowInteractionMenu)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "ShowInteractionMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::showDummyAvatar
// Il2CppName: showDummyAvatar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(int)>(&GlobalNamespace::CharacterSelect::showDummyAvatar)> {
  static const MethodInfo* get() {
    static auto* charidx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "showDummyAvatar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{charidx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::changeSkinTonePercent
// Il2CppName: changeSkinTonePercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(float)>(&GlobalNamespace::CharacterSelect::changeSkinTonePercent)> {
  static const MethodInfo* get() {
    static auto* percent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "changeSkinTonePercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::changeMouthSet
// Il2CppName: changeMouthSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(::StringW)>(&GlobalNamespace::CharacterSelect::changeMouthSet)> {
  static const MethodInfo* get() {
    static auto* mouthSetNum = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "changeMouthSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mouthSetNum});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::changeEyeSet
// Il2CppName: changeEyeSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(::StringW)>(&GlobalNamespace::CharacterSelect::changeEyeSet)> {
  static const MethodInfo* get() {
    static auto* eyeSetNum = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "changeEyeSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eyeSetNum});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::changeHairColor
// Il2CppName: changeHairColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(::StringW)>(&GlobalNamespace::CharacterSelect::changeHairColor)> {
  static const MethodInfo* get() {
    static auto* hairColorNum = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "changeHairColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hairColorNum});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::changeHairStyle
// Il2CppName: changeHairStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(::StringW)>(&GlobalNamespace::CharacterSelect::changeHairStyle)> {
  static const MethodInfo* get() {
    static auto* hairStyleNum = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "changeHairStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hairStyleNum});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::updateCharacterName
// Il2CppName: updateCharacterName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(::StringW)>(&GlobalNamespace::CharacterSelect::updateCharacterName)> {
  static const MethodInfo* get() {
    static auto* newName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "updateCharacterName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::doCreateCharacter
// Il2CppName: doCreateCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(::System::Action_1<::StringW>*)>(&GlobalNamespace::CharacterSelect::doCreateCharacter)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "doCreateCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::deleteCharacter
// Il2CppName: deleteCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(int, ::System::Action_1<::StringW>*)>(&GlobalNamespace::CharacterSelect::deleteCharacter)> {
  static const MethodInfo* get() {
    static auto* charidx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "deleteCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{charidx, callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::UpdateDummyAppearanceOption
// Il2CppName: UpdateDummyAppearanceOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(::StringW, int)>(&GlobalNamespace::CharacterSelect::UpdateDummyAppearanceOption)> {
  static const MethodInfo* get() {
    static auto* appearanceOption = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appearanceIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "UpdateDummyAppearanceOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appearanceOption, appearanceIdx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::HideAllDisciplineWeapons
// Il2CppName: HideAllDisciplineWeapons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::HideAllDisciplineWeapons)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "HideAllDisciplineWeapons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::changeAppearancePage
// Il2CppName: changeAppearancePage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(::StringW)>(&GlobalNamespace::CharacterSelect::changeAppearancePage)> {
  static const MethodInfo* get() {
    static auto* newidx = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "changeAppearancePage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newidx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::Login
// Il2CppName: Login
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(int)>(&GlobalNamespace::CharacterSelect::Login)> {
  static const MethodInfo* get() {
    static auto* charidx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "Login", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{charidx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::capitalizeFirstLetter
// Il2CppName: capitalizeFirstLetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::CharacterSelect::*)(::StringW)>(&GlobalNamespace::CharacterSelect::capitalizeFirstLetter)> {
  static const MethodInfo* get() {
    static auto* thisstring = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "capitalizeFirstLetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thisstring});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::showLogin
// Il2CppName: showLogin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::showLogin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "showLogin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::showSubmenu
// Il2CppName: showSubmenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::showSubmenu)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "showSubmenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::doLogout
// Il2CppName: doLogout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::doLogout)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "doLogout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::closeAllMenus
// Il2CppName: closeAllMenus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::closeAllMenus)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "closeAllMenus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::chooseSkinToneFromSlider
// Il2CppName: chooseSkinToneFromSlider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::chooseSkinToneFromSlider)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "chooseSkinToneFromSlider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::forceSkinToneSlider
// Il2CppName: forceSkinToneSlider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(float)>(&GlobalNamespace::CharacterSelect::forceSkinToneSlider)> {
  static const MethodInfo* get() {
    static auto* percent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "forceSkinToneSlider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::closeMenus
// Il2CppName: closeMenus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(int)>(&GlobalNamespace::CharacterSelect::closeMenus)> {
  static const MethodInfo* get() {
    static auto* maxOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "closeMenus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxOffset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::initMenu
// Il2CppName: initMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::initMenu)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "initMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::resetSelection
// Il2CppName: resetSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(::PowerUI::Element*)>(&GlobalNamespace::CharacterSelect::resetSelection)> {
  static const MethodInfo* get() {
    static auto* parentEl = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "resetSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentEl});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::closeRootMenu
// Il2CppName: closeRootMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::closeRootMenu)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "closeRootMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::updateCharacterListing
// Il2CppName: updateCharacterListing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::updateCharacterListing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "updateCharacterListing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::parseInt
// Il2CppName: parseInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::CharacterSelect::*)(::StringW)>(&GlobalNamespace::CharacterSelect::parseInt)> {
  static const MethodInfo* get() {
    static auto* stringInt = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "parseInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stringInt});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::showChangeMenu
// Il2CppName: showChangeMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::showChangeMenu)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "showChangeMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::updateNewCharMenuToMatch
// Il2CppName: updateNewCharMenuToMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(int)>(&GlobalNamespace::CharacterSelect::updateNewCharMenuToMatch)> {
  static const MethodInfo* get() {
    static auto* charidx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "updateNewCharMenuToMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{charidx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::showCharacterOptions
// Il2CppName: showCharacterOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::showCharacterOptions)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "showCharacterOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::forceCloseNewCharacter
// Il2CppName: forceCloseNewCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::forceCloseNewCharacter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "forceCloseNewCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::forceNewCharacter
// Il2CppName: forceNewCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::forceNewCharacter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "forceNewCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::showNewCharacter
// Il2CppName: showNewCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::showNewCharacter)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "showNewCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::getDataFromClasses
// Il2CppName: getDataFromClasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* (GlobalNamespace::CharacterSelect::*)(::PowerUI::Element*)>(&GlobalNamespace::CharacterSelect::getDataFromClasses)> {
  static const MethodInfo* get() {
    static auto* el = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "getDataFromClasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{el});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::showActiveCharacter
// Il2CppName: showActiveCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(int)>(&GlobalNamespace::CharacterSelect::showActiveCharacter)> {
  static const MethodInfo* get() {
    static auto* characterId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "showActiveCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{characterId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::addClass
// Il2CppName: addClass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(::PowerUI::Element*, ::StringW)>(&GlobalNamespace::CharacterSelect::addClass)> {
  static const MethodInfo* get() {
    static auto* el = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    static auto* cname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "addClass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{el, cname});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::removeClass
// Il2CppName: removeClass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(::PowerUI::Element*, ::StringW)>(&GlobalNamespace::CharacterSelect::removeClass)> {
  static const MethodInfo* get() {
    static auto* el = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    static auto* cname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "removeClass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{el, cname});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::hasClass
// Il2CppName: hasClass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::CharacterSelect::*)(::PowerUI::Element*, ::StringW)>(&GlobalNamespace::CharacterSelect::hasClass)> {
  static const MethodInfo* get() {
    static auto* el = &::il2cpp_utils::GetClassFromName("PowerUI", "Element")->byval_arg;
    static auto* cname = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "hasClass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{el, cname});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::doNothing
// Il2CppName: doNothing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::doNothing)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "doNothing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::showKeyboard
// Il2CppName: showKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::showKeyboard)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "showKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::showKeyboardLogin
// Il2CppName: showKeyboardLogin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::showKeyboardLogin)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "showKeyboardLogin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::showKeyboardPassword
// Il2CppName: showKeyboardPassword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::showKeyboardPassword)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "showKeyboardPassword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::selectEyeSet
// Il2CppName: selectEyeSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::selectEyeSet)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "selectEyeSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::selectMouthSet
// Il2CppName: selectMouthSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::selectMouthSet)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "selectMouthSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::switchPage
// Il2CppName: switchPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::switchPage)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "switchPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::selectHairStyle
// Il2CppName: selectHairStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::selectHairStyle)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "selectHairStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::selectHairColor
// Il2CppName: selectHairColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::selectHairColor)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "selectHairColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::createCharacter
// Il2CppName: createCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::createCharacter)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "createCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::doLogin
// Il2CppName: doLogin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::doLogin)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "doLogin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::confirmDeleteChar
// Il2CppName: confirmDeleteChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::confirmDeleteChar)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "confirmDeleteChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::confirmDeleteCharCancel
// Il2CppName: confirmDeleteCharCancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::confirmDeleteCharCancel)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "confirmDeleteCharCancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::doAccountLink
// Il2CppName: doAccountLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::doAccountLink)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "doAccountLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::showLoginError
// Il2CppName: showLoginError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::showLoginError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "showLoginError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::showLinkAccountExists
// Il2CppName: showLinkAccountExists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::showLinkAccountExists)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "showLinkAccountExists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::doCreateAccountLink
// Il2CppName: doCreateAccountLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::doCreateAccountLink)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "doCreateAccountLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::toggleConnection
// Il2CppName: toggleConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::toggleConnection)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "toggleConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::updateNews
// Il2CppName: updateNews
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::updateNews)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "updateNews", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::goToBlog
// Il2CppName: goToBlog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::goToBlog)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "goToBlog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::hideNews
// Il2CppName: hideNews
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::hideNews)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "hideNews", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::showNews
// Il2CppName: showNews
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::showNews)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "showNews", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::showInternetError
// Il2CppName: showInternetError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::showInternetError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "showInternetError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::hideInternetError
// Il2CppName: hideInternetError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::hideInternetError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "hideInternetError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::ShowNewCharacterOptions
// Il2CppName: ShowNewCharacterOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::CharacterSelect::ShowNewCharacterOptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "ShowNewCharacterOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::ShowChangeCharacterOptions
// Il2CppName: ShowChangeCharacterOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::CharacterSelect::ShowChangeCharacterOptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "ShowChangeCharacterOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::FinalizeNewCharacter
// Il2CppName: FinalizeNewCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::FinalizeNewCharacter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "FinalizeNewCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::ShowLocomotions
// Il2CppName: ShowLocomotions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::ShowLocomotions)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "ShowLocomotions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::ShowSafteyInfo
// Il2CppName: ShowSafteyInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::PowerUI::UIEvent*)>(&GlobalNamespace::CharacterSelect::ShowSafteyInfo)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("PowerUI", "UIEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "ShowSafteyInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::UpdatePtt
// Il2CppName: UpdatePtt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(bool)>(&GlobalNamespace::CharacterSelect::UpdatePtt)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "UpdatePtt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::UpdateLocomotionPref
// Il2CppName: UpdateLocomotionPref
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(int)>(&GlobalNamespace::CharacterSelect::UpdateLocomotionPref)> {
  static const MethodInfo* get() {
    static auto* pref = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "UpdateLocomotionPref", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pref});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::UpdateTurningPref
// Il2CppName: UpdateTurningPref
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(int)>(&GlobalNamespace::CharacterSelect::UpdateTurningPref)> {
  static const MethodInfo* get() {
    static auto* pref = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "UpdateTurningPref", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pref});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::setPrimaryWeaponHandLeft
// Il2CppName: setPrimaryWeaponHandLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::setPrimaryWeaponHandLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "setPrimaryWeaponHandLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::setPrimaryWeaponHandRight
// Il2CppName: setPrimaryWeaponHandRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)()>(&GlobalNamespace::CharacterSelect::setPrimaryWeaponHandRight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "setPrimaryWeaponHandRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::CharacterSelect::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::$updateCharacterListing$b__118_0
// Il2CppName: <updateCharacterListing>b__118_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(::ExtUI::AccountCharacterList*)>(&GlobalNamespace::CharacterSelect::$updateCharacterListing$b__118_0)> {
  static const MethodInfo* get() {
    static auto* characterList = &::il2cpp_utils::GetClassFromName("ExtUI", "AccountCharacterList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "<updateCharacterListing>b__118_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{characterList});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterSelect::$updateNews$b__149_0
// Il2CppName: <updateNews>b__149_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterSelect::*)(::ExtUI::BlogPostList*)>(&GlobalNamespace::CharacterSelect::$updateNews$b__149_0)> {
  static const MethodInfo* get() {
    static auto* blogPostList = &::il2cpp_utils::GetClassFromName("ExtUI", "BlogPostList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterSelect*), "<updateNews>b__149_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blogPostList});
  }
};
