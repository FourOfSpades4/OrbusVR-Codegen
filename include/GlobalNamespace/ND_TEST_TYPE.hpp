// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ND_TEST_TYPE
  struct ND_TEST_TYPE;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ND_TEST_TYPE, "", "ND_TEST_TYPE");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: ND_TEST_TYPE
  // [TokenAttribute] Offset: FFFFFFFF
  struct ND_TEST_TYPE/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ND_TEST_TYPE
    constexpr ND_TEST_TYPE(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public ND_TEST_TYPE ND_TEST_LOCATE_INTERFACE
    static constexpr const int ND_TEST_LOCATE_INTERFACE = 0;
    // Get static field: static public ND_TEST_TYPE ND_TEST_LOCATE_INTERFACE
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_LOCATE_INTERFACE();
    // Set static field: static public ND_TEST_TYPE ND_TEST_LOCATE_INTERFACE
    static void _set_ND_TEST_LOCATE_INTERFACE(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_PING_GATEWAY
    static constexpr const int ND_TEST_PING_GATEWAY = 1;
    // Get static field: static public ND_TEST_TYPE ND_TEST_PING_GATEWAY
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_PING_GATEWAY();
    // Set static field: static public ND_TEST_TYPE ND_TEST_PING_GATEWAY
    static void _set_ND_TEST_PING_GATEWAY(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_DNS
    static constexpr const int ND_TEST_DNS = 2;
    // Get static field: static public ND_TEST_TYPE ND_TEST_DNS
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_DNS();
    // Set static field: static public ND_TEST_TYPE ND_TEST_DNS
    static void _set_ND_TEST_DNS(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_STUN
    static constexpr const int ND_TEST_STUN = 3;
    // Get static field: static public ND_TEST_TYPE ND_TEST_STUN
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_STUN();
    // Set static field: static public ND_TEST_TYPE ND_TEST_STUN
    static void _set_ND_TEST_STUN(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_ECHO
    static constexpr const int ND_TEST_ECHO = 4;
    // Get static field: static public ND_TEST_TYPE ND_TEST_ECHO
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_ECHO();
    // Set static field: static public ND_TEST_TYPE ND_TEST_ECHO
    static void _set_ND_TEST_ECHO(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_FIRST_PORT
    static constexpr const int ND_TEST_ECHO_SIP_FIRST_PORT = 5;
    // Get static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_FIRST_PORT
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_ECHO_SIP_FIRST_PORT();
    // Set static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_FIRST_PORT
    static void _set_ND_TEST_ECHO_SIP_FIRST_PORT(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_FIRST_PORT_INVITE_REQUEST
    static constexpr const int ND_TEST_ECHO_SIP_FIRST_PORT_INVITE_REQUEST = 6;
    // Get static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_FIRST_PORT_INVITE_REQUEST
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_ECHO_SIP_FIRST_PORT_INVITE_REQUEST();
    // Set static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_FIRST_PORT_INVITE_REQUEST
    static void _set_ND_TEST_ECHO_SIP_FIRST_PORT_INVITE_REQUEST(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_FIRST_PORT_INVITE_RESPONSE
    static constexpr const int ND_TEST_ECHO_SIP_FIRST_PORT_INVITE_RESPONSE = 7;
    // Get static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_FIRST_PORT_INVITE_RESPONSE
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_ECHO_SIP_FIRST_PORT_INVITE_RESPONSE();
    // Set static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_FIRST_PORT_INVITE_RESPONSE
    static void _set_ND_TEST_ECHO_SIP_FIRST_PORT_INVITE_RESPONSE(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_FIRST_PORT_REGISTER_REQUEST
    static constexpr const int ND_TEST_ECHO_SIP_FIRST_PORT_REGISTER_REQUEST = 8;
    // Get static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_FIRST_PORT_REGISTER_REQUEST
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_ECHO_SIP_FIRST_PORT_REGISTER_REQUEST();
    // Set static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_FIRST_PORT_REGISTER_REQUEST
    static void _set_ND_TEST_ECHO_SIP_FIRST_PORT_REGISTER_REQUEST(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_FIRST_PORT_REGISTER_RESPONSE
    static constexpr const int ND_TEST_ECHO_SIP_FIRST_PORT_REGISTER_RESPONSE = 9;
    // Get static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_FIRST_PORT_REGISTER_RESPONSE
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_ECHO_SIP_FIRST_PORT_REGISTER_RESPONSE();
    // Set static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_FIRST_PORT_REGISTER_RESPONSE
    static void _set_ND_TEST_ECHO_SIP_FIRST_PORT_REGISTER_RESPONSE(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_SECOND_PORT
    static constexpr const int ND_TEST_ECHO_SIP_SECOND_PORT = 10;
    // Get static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_SECOND_PORT
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_ECHO_SIP_SECOND_PORT();
    // Set static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_SECOND_PORT
    static void _set_ND_TEST_ECHO_SIP_SECOND_PORT(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_SECOND_PORT_INVITE_REQUEST
    static constexpr const int ND_TEST_ECHO_SIP_SECOND_PORT_INVITE_REQUEST = 11;
    // Get static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_SECOND_PORT_INVITE_REQUEST
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_ECHO_SIP_SECOND_PORT_INVITE_REQUEST();
    // Set static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_SECOND_PORT_INVITE_REQUEST
    static void _set_ND_TEST_ECHO_SIP_SECOND_PORT_INVITE_REQUEST(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_SECOND_PORT_INVITE_RESPONSE
    static constexpr const int ND_TEST_ECHO_SIP_SECOND_PORT_INVITE_RESPONSE = 12;
    // Get static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_SECOND_PORT_INVITE_RESPONSE
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_ECHO_SIP_SECOND_PORT_INVITE_RESPONSE();
    // Set static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_SECOND_PORT_INVITE_RESPONSE
    static void _set_ND_TEST_ECHO_SIP_SECOND_PORT_INVITE_RESPONSE(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_SECOND_PORT_REGISTER_REQUEST
    static constexpr const int ND_TEST_ECHO_SIP_SECOND_PORT_REGISTER_REQUEST = 13;
    // Get static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_SECOND_PORT_REGISTER_REQUEST
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_ECHO_SIP_SECOND_PORT_REGISTER_REQUEST();
    // Set static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_SECOND_PORT_REGISTER_REQUEST
    static void _set_ND_TEST_ECHO_SIP_SECOND_PORT_REGISTER_REQUEST(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_SECOND_PORT_REGISTER_RESPONSE
    static constexpr const int ND_TEST_ECHO_SIP_SECOND_PORT_REGISTER_RESPONSE = 14;
    // Get static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_SECOND_PORT_REGISTER_RESPONSE
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_ECHO_SIP_SECOND_PORT_REGISTER_RESPONSE();
    // Set static field: static public ND_TEST_TYPE ND_TEST_ECHO_SIP_SECOND_PORT_REGISTER_RESPONSE
    static void _set_ND_TEST_ECHO_SIP_SECOND_PORT_REGISTER_RESPONSE(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_ECHO_MEDIA
    static constexpr const int ND_TEST_ECHO_MEDIA = 15;
    // Get static field: static public ND_TEST_TYPE ND_TEST_ECHO_MEDIA
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_ECHO_MEDIA();
    // Set static field: static public ND_TEST_TYPE ND_TEST_ECHO_MEDIA
    static void _set_ND_TEST_ECHO_MEDIA(::GlobalNamespace::ND_TEST_TYPE value);
    // static field const value: static public ND_TEST_TYPE ND_TEST_ECHO_MEDIA_LARGE_PACKET
    static constexpr const int ND_TEST_ECHO_MEDIA_LARGE_PACKET = 16;
    // Get static field: static public ND_TEST_TYPE ND_TEST_ECHO_MEDIA_LARGE_PACKET
    static ::GlobalNamespace::ND_TEST_TYPE _get_ND_TEST_ECHO_MEDIA_LARGE_PACKET();
    // Set static field: static public ND_TEST_TYPE ND_TEST_ECHO_MEDIA_LARGE_PACKET
    static void _set_ND_TEST_ECHO_MEDIA_LARGE_PACKET(::GlobalNamespace::ND_TEST_TYPE value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // ND_TEST_TYPE
  #pragma pack(pop)
  static check_size<sizeof(ND_TEST_TYPE), 0 + sizeof(int)> __GlobalNamespace_ND_TEST_TYPESizeCheck;
  static_assert(sizeof(ND_TEST_TYPE) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
