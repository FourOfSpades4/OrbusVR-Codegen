// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.AI.NavMeshHit
#include "UnityEngine/AI/NavMeshHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: BoxCollider
  class BoxCollider;
  // Forward declaring type: MeshFilter
  class MeshFilter;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TerrainGrid
  class TerrainGrid;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TerrainCell
  class TerrainCell;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TerrainCell);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TerrainCell*, "", "TerrainCell");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: TerrainCell
  // [TokenAttribute] Offset: FFFFFFFF
  class TerrainCell : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean _isValid
    // Size: 0x1
    // Offset: 0x10
    bool isValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _hasBeenChecked
    // Size: 0x1
    // Offset: 0x11
    bool hasBeenChecked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasBeenChecked and: cellObject
    char __padding1[0x6] = {};
    // public UnityEngine.GameObject cellObject
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* cellObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.BoxCollider collider
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::BoxCollider* collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::BoxCollider*) == 0x8);
    // public UnityEngine.MeshFilter meshFilter
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MeshFilter* meshFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // public System.Int32 x
    // Size: 0x4
    // Offset: 0x30
    int x;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 z
    // Size: 0x4
    // Offset: 0x34
    int z;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public TerrainGrid myGrid
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::TerrainGrid* myGrid;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TerrainGrid*) == 0x8);
    // private UnityEngine.AI.NavMeshHit hit
    // Size: 0x24
    // Offset: 0x40
    ::UnityEngine::AI::NavMeshHit hit;
    // Field size check
    static_assert(sizeof(::UnityEngine::AI::NavMeshHit) == 0x24);
    // private UnityEngine.AI.NavMeshHit hit2
    // Size: 0x24
    // Offset: 0x64
    ::UnityEngine::AI::NavMeshHit hit2;
    // Field size check
    static_assert(sizeof(::UnityEngine::AI::NavMeshHit) == 0x24);
    public:
    // Get instance field reference: private System.Boolean _isValid
    [[deprecated("Use field access instead!")]] bool& dyn__isValid();
    // Get instance field reference: private System.Boolean _hasBeenChecked
    [[deprecated("Use field access instead!")]] bool& dyn__hasBeenChecked();
    // Get instance field reference: public UnityEngine.GameObject cellObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_cellObject();
    // Get instance field reference: public UnityEngine.BoxCollider collider
    [[deprecated("Use field access instead!")]] ::UnityEngine::BoxCollider*& dyn_collider();
    // Get instance field reference: public UnityEngine.MeshFilter meshFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn_meshFilter();
    // Get instance field reference: public System.Int32 x
    [[deprecated("Use field access instead!")]] int& dyn_x();
    // Get instance field reference: public System.Int32 z
    [[deprecated("Use field access instead!")]] int& dyn_z();
    // Get instance field reference: public TerrainGrid myGrid
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TerrainGrid*& dyn_myGrid();
    // Get instance field reference: private UnityEngine.AI.NavMeshHit hit
    [[deprecated("Use field access instead!")]] ::UnityEngine::AI::NavMeshHit& dyn_hit();
    // Get instance field reference: private UnityEngine.AI.NavMeshHit hit2
    [[deprecated("Use field access instead!")]] ::UnityEngine::AI::NavMeshHit& dyn_hit2();
    // public System.Boolean get_isValid()
    // Offset: 0x104FA10
    bool get_isValid();
    // public System.Void set_isValid(System.Boolean value)
    // Offset: 0x10504E4
    void set_isValid(bool value);
    // private System.Boolean doCheck()
    // Offset: 0x104FAB8
    bool doCheck();
    // public System.Void setNeedsCheck()
    // Offset: 0x105051C
    void setNeedsCheck();
    // public System.Void .ctor()
    // Offset: 0x1050524
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TerrainCell* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TerrainCell::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TerrainCell*, creationType>()));
    }
  }; // TerrainCell
  #pragma pack(pop)
  static check_size<sizeof(TerrainCell), 100 + sizeof(::UnityEngine::AI::NavMeshHit)> __GlobalNamespace_TerrainCellSizeCheck;
  static_assert(sizeof(TerrainCell) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TerrainCell::get_isValid
// Il2CppName: get_isValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TerrainCell::*)()>(&GlobalNamespace::TerrainCell::get_isValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainCell*), "get_isValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainCell::set_isValid
// Il2CppName: set_isValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainCell::*)(bool)>(&GlobalNamespace::TerrainCell::set_isValid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainCell*), "set_isValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainCell::doCheck
// Il2CppName: doCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TerrainCell::*)()>(&GlobalNamespace::TerrainCell::doCheck)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainCell*), "doCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainCell::setNeedsCheck
// Il2CppName: setNeedsCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainCell::*)()>(&GlobalNamespace::TerrainCell::setNeedsCheck)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainCell*), "setNeedsCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainCell::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
