// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: TweenAction
#include "GlobalNamespace/TweenAction.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LTDescrImpl
  class LTDescrImpl;
  // Forward declaring type: LTDescr
  class LTDescr;
  // Forward declaring type: LTEvent
  class LTEvent;
  // Forward declaring type: LTRect
  class LTRect;
  // Forward declaring type: LTBezierPath
  class LTBezierPath;
  // Forward declaring type: LTSpline
  class LTSpline;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Sprite
  class Sprite;
  // Forward declaring type: CanvasGroup
  class CanvasGroup;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LeanTween
  class LeanTween;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LeanTween);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LeanTween*, "", "LeanTween");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: LeanTween
  // [TokenAttribute] Offset: FFFFFFFF
  class LeanTween : public ::UnityEngine::MonoBehaviour {
    public:
    // Get static field: static public System.Boolean throwErrors
    static bool _get_throwErrors();
    // Set static field: static public System.Boolean throwErrors
    static void _set_throwErrors(bool value);
    // Get static field: static public System.Single tau
    static float _get_tau();
    // Set static field: static public System.Single tau
    static void _set_tau(float value);
    // Get static field: static private LTDescrImpl[] tweens
    static ::ArrayW<::GlobalNamespace::LTDescrImpl*> _get_tweens();
    // Set static field: static private LTDescrImpl[] tweens
    static void _set_tweens(::ArrayW<::GlobalNamespace::LTDescrImpl*> value);
    // Get static field: static private System.Int32[] tweensFinished
    static ::ArrayW<int> _get_tweensFinished();
    // Set static field: static private System.Int32[] tweensFinished
    static void _set_tweensFinished(::ArrayW<int> value);
    // Get static field: static private LTDescrImpl tween
    static ::GlobalNamespace::LTDescrImpl* _get_tween();
    // Set static field: static private LTDescrImpl tween
    static void _set_tween(::GlobalNamespace::LTDescrImpl* value);
    // Get static field: static private System.Int32 tweenMaxSearch
    static int _get_tweenMaxSearch();
    // Set static field: static private System.Int32 tweenMaxSearch
    static void _set_tweenMaxSearch(int value);
    // Get static field: static private System.Int32 maxTweens
    static int _get_maxTweens();
    // Set static field: static private System.Int32 maxTweens
    static void _set_maxTweens(int value);
    // Get static field: static private System.Int32 frameRendered
    static int _get_frameRendered();
    // Set static field: static private System.Int32 frameRendered
    static void _set_frameRendered(int value);
    // Get static field: static private UnityEngine.GameObject _tweenEmpty
    static ::UnityEngine::GameObject* _get__tweenEmpty();
    // Set static field: static private UnityEngine.GameObject _tweenEmpty
    static void _set__tweenEmpty(::UnityEngine::GameObject* value);
    // Get static field: static private System.Single dtEstimated
    static float _get_dtEstimated();
    // Set static field: static private System.Single dtEstimated
    static void _set_dtEstimated(float value);
    // Get static field: static public System.Single dtManual
    static float _get_dtManual();
    // Set static field: static public System.Single dtManual
    static void _set_dtManual(float value);
    // Get static field: static private System.Single dt
    static float _get_dt();
    // Set static field: static private System.Single dt
    static void _set_dt(float value);
    // Get static field: static private System.Single dtActual
    static float _get_dtActual();
    // Set static field: static private System.Single dtActual
    static void _set_dtActual(float value);
    // Get static field: static private System.Int32 i
    static int _get_i();
    // Set static field: static private System.Int32 i
    static void _set_i(int value);
    // Get static field: static private System.Int32 j
    static int _get_j();
    // Set static field: static private System.Int32 j
    static void _set_j(int value);
    // Get static field: static private System.Int32 finishedCnt
    static int _get_finishedCnt();
    // Set static field: static private System.Int32 finishedCnt
    static void _set_finishedCnt(int value);
    // Get static field: static private UnityEngine.AnimationCurve punch
    static ::UnityEngine::AnimationCurve* _get_punch();
    // Set static field: static private UnityEngine.AnimationCurve punch
    static void _set_punch(::UnityEngine::AnimationCurve* value);
    // Get static field: static private UnityEngine.AnimationCurve shake
    static ::UnityEngine::AnimationCurve* _get_shake();
    // Set static field: static private UnityEngine.AnimationCurve shake
    static void _set_shake(::UnityEngine::AnimationCurve* value);
    // Get static field: static private UnityEngine.Transform trans
    static ::UnityEngine::Transform* _get_trans();
    // Set static field: static private UnityEngine.Transform trans
    static void _set_trans(::UnityEngine::Transform* value);
    // Get static field: static private System.Single timeTotal
    static float _get_timeTotal();
    // Set static field: static private System.Single timeTotal
    static void _set_timeTotal(float value);
    // Get static field: static private TweenAction tweenAction
    static ::GlobalNamespace::TweenAction _get_tweenAction();
    // Set static field: static private TweenAction tweenAction
    static void _set_tweenAction(::GlobalNamespace::TweenAction value);
    // Get static field: static private System.Single ratioPassed
    static float _get_ratioPassed();
    // Set static field: static private System.Single ratioPassed
    static void _set_ratioPassed(float value);
    // Get static field: static private System.Single from
    static float _get_from();
    // Set static field: static private System.Single from
    static void _set_from(float value);
    // Get static field: static private System.Single val
    static float _get_val();
    // Set static field: static private System.Single val
    static void _set_val(float value);
    // Get static field: static private System.Boolean isTweenFinished
    static bool _get_isTweenFinished();
    // Set static field: static private System.Boolean isTweenFinished
    static void _set_isTweenFinished(bool value);
    // Get static field: static private System.Int32 maxTweenReached
    static int _get_maxTweenReached();
    // Set static field: static private System.Int32 maxTweenReached
    static void _set_maxTweenReached(int value);
    // Get static field: static private UnityEngine.Vector3 newVect
    static ::UnityEngine::Vector3 _get_newVect();
    // Set static field: static private UnityEngine.Vector3 newVect
    static void _set_newVect(::UnityEngine::Vector3 value);
    // Get static field: static private UnityEngine.GameObject target
    static ::UnityEngine::GameObject* _get_target();
    // Set static field: static private UnityEngine.GameObject target
    static void _set_target(::UnityEngine::GameObject* value);
    // Get static field: static private UnityEngine.GameObject customTarget
    static ::UnityEngine::GameObject* _get_customTarget();
    // Set static field: static private UnityEngine.GameObject customTarget
    static void _set_customTarget(::UnityEngine::GameObject* value);
    // Get static field: static public System.Int32 startSearch
    static int _get_startSearch();
    // Set static field: static public System.Int32 startSearch
    static void _set_startSearch(int value);
    // Get static field: static public LTDescr d
    static ::GlobalNamespace::LTDescr* _get_d();
    // Set static field: static public LTDescr d
    static void _set_d(::GlobalNamespace::LTDescr* value);
    // Get static field: static private System.Action`1<LTEvent>[] eventListeners
    static ::ArrayW<::System::Action_1<::GlobalNamespace::LTEvent*>*> _get_eventListeners();
    // Set static field: static private System.Action`1<LTEvent>[] eventListeners
    static void _set_eventListeners(::ArrayW<::System::Action_1<::GlobalNamespace::LTEvent*>*> value);
    // Get static field: static private UnityEngine.GameObject[] goListeners
    static ::ArrayW<::UnityEngine::GameObject*> _get_goListeners();
    // Set static field: static private UnityEngine.GameObject[] goListeners
    static void _set_goListeners(::ArrayW<::UnityEngine::GameObject*> value);
    // Get static field: static private System.Int32 eventsMaxSearch
    static int _get_eventsMaxSearch();
    // Set static field: static private System.Int32 eventsMaxSearch
    static void _set_eventsMaxSearch(int value);
    // Get static field: static public System.Int32 EVENTS_MAX
    static int _get_EVENTS_MAX();
    // Set static field: static public System.Int32 EVENTS_MAX
    static void _set_EVENTS_MAX(int value);
    // Get static field: static public System.Int32 LISTENERS_MAX
    static int _get_LISTENERS_MAX();
    // Set static field: static public System.Int32 LISTENERS_MAX
    static void _set_LISTENERS_MAX(int value);
    // Get static field: static private System.Int32 INIT_LISTENERS_MAX
    static int _get_INIT_LISTENERS_MAX();
    // Set static field: static private System.Int32 INIT_LISTENERS_MAX
    static void _set_INIT_LISTENERS_MAX(int value);
    // static public System.Void init()
    // Offset: 0x1AC2FB0
    static void init();
    // static public System.Int32 get_maxSearch()
    // Offset: 0x1AC3318
    static int get_maxSearch();
    // static public System.Int32 get_tweensRunning()
    // Offset: 0x1AC3380
    static int get_tweensRunning();
    // static public System.Void init(System.Int32 maxSimultaneousTweens)
    // Offset: 0x1AC3018
    static void init(int maxSimultaneousTweens);
    // static public System.Void reset()
    // Offset: 0x1AC347C
    static void reset();
    // public System.Void Update()
    // Offset: 0x1AC35B4
    void Update();
    // public System.Void OnLevelWasLoaded(System.Int32 lvl)
    // Offset: 0x1ACCE50
    void OnLevelWasLoaded(int lvl);
    // static public System.Void update()
    // Offset: 0x1AC3610
    static void update();
    // static private System.Void textAlphaRecursive(UnityEngine.Transform trans, System.Single val)
    // Offset: 0x1ACE69C
    static void textAlphaRecursive(::UnityEngine::Transform* trans, float val);
    // static private UnityEngine.Color tweenColor(LTDescrImpl tween, System.Single val)
    // Offset: 0x1ACE574
    static ::UnityEngine::Color tweenColor(::GlobalNamespace::LTDescrImpl* tween, float val);
    // static public System.Void removeTween(System.Int32 i, System.Int32 uniqueId)
    // Offset: 0x1AB9540
    static void removeTween(int i, int uniqueId);
    // static public System.Void removeTween(System.Int32 i)
    // Offset: 0x1ACCEAC
    static void removeTween(int i);
    // static public UnityEngine.Vector3[] add(UnityEngine.Vector3[] a, UnityEngine.Vector3 b)
    // Offset: 0x1ACEB98
    static ::ArrayW<::UnityEngine::Vector3> add(::ArrayW<::UnityEngine::Vector3> a, ::UnityEngine::Vector3 b);
    // static public System.Single closestRot(System.Single from, System.Single to)
    // Offset: 0x1ABB0A4
    static float closestRot(float from, float to);
    // static public System.Void cancelAll()
    // Offset: 0x1ACED84
    static void cancelAll();
    // static public System.Void cancelAll(System.Boolean callComplete)
    // Offset: 0x1ACEDE4
    static void cancelAll(bool callComplete);
    // static public System.Void cancel(UnityEngine.GameObject gameObject)
    // Offset: 0x1ACF030
    static void cancel(::UnityEngine::GameObject* gameObject);
    // static public System.Void cancel(UnityEngine.GameObject gameObject, System.Boolean callOnComplete)
    // Offset: 0x1ACF098
    static void cancel(::UnityEngine::GameObject* gameObject, bool callOnComplete);
    // static public System.Void cancel(UnityEngine.GameObject gameObject, System.Int32 uniqueId)
    // Offset: 0x1ACF374
    static void cancel(::UnityEngine::GameObject* gameObject, int uniqueId);
    // static public System.Void cancel(LTRect ltRect, System.Int32 uniqueId)
    // Offset: 0x1ACF5C4
    static void cancel(::GlobalNamespace::LTRect* ltRect, int uniqueId);
    // static public System.Void cancel(System.Int32 uniqueId)
    // Offset: 0x1ACF738
    static void cancel(int uniqueId);
    // static public System.Void cancel(System.Int32 uniqueId, System.Boolean callOnComplete)
    // Offset: 0x1ACF7A0
    static void cancel(int uniqueId, bool callOnComplete);
    // static public LTDescr descr(System.Int32 uniqueId)
    // Offset: 0x1ACF990
    static ::GlobalNamespace::LTDescr* descr(int uniqueId);
    // static public LTDescr description(System.Int32 uniqueId)
    // Offset: 0x1ACFCF4
    static ::GlobalNamespace::LTDescr* description(int uniqueId);
    // static public LTDescr[] descriptions(UnityEngine.GameObject gameObject)
    // Offset: 0x1ACFD58
    static ::ArrayW<::GlobalNamespace::LTDescr*> descriptions(::UnityEngine::GameObject* gameObject);
    // static public System.Void pause(UnityEngine.GameObject gameObject, System.Int32 uniqueId)
    // Offset: 0x1ACFFFC
    static void pause(::UnityEngine::GameObject* gameObject, int uniqueId);
    // static public System.Void pause(System.Int32 uniqueId)
    // Offset: 0x1AD0060
    static void pause(int uniqueId);
    // static public System.Void pause(UnityEngine.GameObject gameObject)
    // Offset: 0x1AD0198
    static void pause(::UnityEngine::GameObject* gameObject);
    // static public System.Void pauseAll()
    // Offset: 0x1AD0350
    static void pauseAll();
    // static public System.Void resumeAll()
    // Offset: 0x1AD0464
    static void resumeAll();
    // static public System.Void resume(UnityEngine.GameObject gameObject, System.Int32 uniqueId)
    // Offset: 0x1AD056C
    static void resume(::UnityEngine::GameObject* gameObject, int uniqueId);
    // static public System.Void resume(System.Int32 uniqueId)
    // Offset: 0x1AD05D0
    static void resume(int uniqueId);
    // static public System.Void resume(UnityEngine.GameObject gameObject)
    // Offset: 0x1AD06FC
    static void resume(::UnityEngine::GameObject* gameObject);
    // static public System.Boolean isTweening(UnityEngine.GameObject gameObject)
    // Offset: 0x1AD08A8
    static bool isTweening(::UnityEngine::GameObject* gameObject);
    // static public System.Boolean isTweening(System.Int32 uniqueId)
    // Offset: 0x1AD0B34
    static bool isTweening(int uniqueId);
    // static public System.Boolean isTweening(LTRect ltRect)
    // Offset: 0x1AD0C94
    static bool isTweening(::GlobalNamespace::LTRect* ltRect);
    // static public System.Void drawBezierPath(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c, UnityEngine.Vector3 d, System.Single arrowSize, UnityEngine.Transform arrowTransform)
    // Offset: 0x1AD0E04
    static void drawBezierPath(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c, ::UnityEngine::Vector3 d, float arrowSize, ::UnityEngine::Transform* arrowTransform);
    // static public System.Object logError(System.String error)
    // Offset: 0x1AB7B68
    static ::Il2CppObject* logError(::StringW error);
    // static public LTDescr options(LTDescr seed)
    // Offset: 0x1AD157C
    static ::GlobalNamespace::LTDescr* options(::GlobalNamespace::LTDescr* seed);
    // static public LTDescr options()
    // Offset: 0x1AD15F0
    static ::GlobalNamespace::LTDescr* options();
    // static public UnityEngine.GameObject get_tweenEmpty()
    // Offset: 0x1AD19E8
    static ::UnityEngine::GameObject* get_tweenEmpty();
    // static private LTDescr pushNewTween(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time, TweenAction tweenAction, LTDescr tween)
    // Offset: 0x1AD1A60
    static ::GlobalNamespace::LTDescr* pushNewTween(::UnityEngine::GameObject* gameObject, ::UnityEngine::Vector3 to, float time, ::GlobalNamespace::TweenAction tweenAction, ::GlobalNamespace::LTDescr* tween);
    // static public LTDescr play(UnityEngine.RectTransform rectTransform, UnityEngine.Sprite[] sprites)
    // Offset: 0x1AD1D10
    static ::GlobalNamespace::LTDescr* play(::UnityEngine::RectTransform* rectTransform, ::ArrayW<::UnityEngine::Sprite*> sprites);
    // static public LTDescr alpha(UnityEngine.GameObject gameObject, System.Single to, System.Single time)
    // Offset: 0x1AD1F00
    static ::GlobalNamespace::LTDescr* alpha(::UnityEngine::GameObject* gameObject, float to, float time);
    // static public LTDescr alpha(LTRect ltRect, System.Single to, System.Single time)
    // Offset: 0x1AD1FB8
    static ::GlobalNamespace::LTDescr* alpha(::GlobalNamespace::LTRect* ltRect, float to, float time);
    // static public LTDescr textAlpha(UnityEngine.RectTransform rectTransform, System.Single to, System.Single time)
    // Offset: 0x1AD2110
    static ::GlobalNamespace::LTDescr* textAlpha(::UnityEngine::RectTransform* rectTransform, float to, float time);
    // static public LTDescr alphaText(UnityEngine.RectTransform rectTransform, System.Single to, System.Single time)
    // Offset: 0x1AD21E4
    static ::GlobalNamespace::LTDescr* alphaText(::UnityEngine::RectTransform* rectTransform, float to, float time);
    // static public LTDescr alphaCanvas(UnityEngine.CanvasGroup canvasGroup, System.Single to, System.Single time)
    // Offset: 0x1AD22B8
    static ::GlobalNamespace::LTDescr* alphaCanvas(::UnityEngine::CanvasGroup* canvasGroup, float to, float time);
    // static public LTDescr alphaVertex(UnityEngine.GameObject gameObject, System.Single to, System.Single time)
    // Offset: 0x1AD238C
    static ::GlobalNamespace::LTDescr* alphaVertex(::UnityEngine::GameObject* gameObject, float to, float time);
    // static public LTDescr color(UnityEngine.GameObject gameObject, UnityEngine.Color to, System.Single time)
    // Offset: 0x1AD2444
    static ::GlobalNamespace::LTDescr* color(::UnityEngine::GameObject* gameObject, ::UnityEngine::Color to, float time);
    // static public LTDescr textColor(UnityEngine.RectTransform rectTransform, UnityEngine.Color to, System.Single time)
    // Offset: 0x1AD25C8
    static ::GlobalNamespace::LTDescr* textColor(::UnityEngine::RectTransform* rectTransform, ::UnityEngine::Color to, float time);
    // static public LTDescr colorText(UnityEngine.RectTransform rectTransform, UnityEngine.Color to, System.Single time)
    // Offset: 0x1AD2768
    static ::GlobalNamespace::LTDescr* colorText(::UnityEngine::RectTransform* rectTransform, ::UnityEngine::Color to, float time);
    // static public LTDescr delayedCall(System.Single delayTime, System.Action callback)
    // Offset: 0x1AD2908
    static ::GlobalNamespace::LTDescr* delayedCall(float delayTime, ::System::Action* callback);
    // static public LTDescr delayedCall(System.Single delayTime, System.Action`1<System.Object> callback)
    // Offset: 0x1AD2A60
    static ::GlobalNamespace::LTDescr* delayedCall(float delayTime, ::System::Action_1<::Il2CppObject*>* callback);
    // static public LTDescr delayedCall(UnityEngine.GameObject gameObject, System.Single delayTime, System.Action callback)
    // Offset: 0x1AD2BB8
    static ::GlobalNamespace::LTDescr* delayedCall(::UnityEngine::GameObject* gameObject, float delayTime, ::System::Action* callback);
    // static public LTDescr delayedCall(UnityEngine.GameObject gameObject, System.Single delayTime, System.Action`1<System.Object> callback)
    // Offset: 0x1AD2D08
    static ::GlobalNamespace::LTDescr* delayedCall(::UnityEngine::GameObject* gameObject, float delayTime, ::System::Action_1<::Il2CppObject*>* callback);
    // static public LTDescr destroyAfter(LTRect rect, System.Single delayTime)
    // Offset: 0x1AD2E58
    static ::GlobalNamespace::LTDescr* destroyAfter(::GlobalNamespace::LTRect* rect, float delayTime);
    // static public LTDescr move(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time)
    // Offset: 0x1AD3024
    static ::GlobalNamespace::LTDescr* move(::UnityEngine::GameObject* gameObject, ::UnityEngine::Vector3 to, float time);
    // static public LTDescr move(UnityEngine.GameObject gameObject, UnityEngine.Vector2 to, System.Single time)
    // Offset: 0x1AD30C4
    static ::GlobalNamespace::LTDescr* move(::UnityEngine::GameObject* gameObject, ::UnityEngine::Vector2 to, float time);
    // static public LTDescr move(UnityEngine.GameObject gameObject, UnityEngine.Vector3[] to, System.Single time)
    // Offset: 0x1AD31B4
    static ::GlobalNamespace::LTDescr* move(::UnityEngine::GameObject* gameObject, ::ArrayW<::UnityEngine::Vector3> to, float time);
    // static public LTDescr move(UnityEngine.GameObject gameObject, LTBezierPath to, System.Single time)
    // Offset: 0x1AD349C
    static ::GlobalNamespace::LTDescr* move(::UnityEngine::GameObject* gameObject, ::GlobalNamespace::LTBezierPath* to, float time);
    // static public LTDescr move(UnityEngine.GameObject gameObject, LTSpline to, System.Single time)
    // Offset: 0x1AD35F4
    static ::GlobalNamespace::LTDescr* move(::UnityEngine::GameObject* gameObject, ::GlobalNamespace::LTSpline* to, float time);
    // static public LTDescr moveSpline(UnityEngine.GameObject gameObject, UnityEngine.Vector3[] to, System.Single time)
    // Offset: 0x1AD374C
    static ::GlobalNamespace::LTDescr* moveSpline(::UnityEngine::GameObject* gameObject, ::ArrayW<::UnityEngine::Vector3> to, float time);
    // static public LTDescr moveSplineLocal(UnityEngine.GameObject gameObject, UnityEngine.Vector3[] to, System.Single time)
    // Offset: 0x1AD38C8
    static ::GlobalNamespace::LTDescr* moveSplineLocal(::UnityEngine::GameObject* gameObject, ::ArrayW<::UnityEngine::Vector3> to, float time);
    // static public LTDescr move(LTRect ltRect, UnityEngine.Vector2 to, System.Single time)
    // Offset: 0x1AD3A44
    static ::GlobalNamespace::LTDescr* move(::GlobalNamespace::LTRect* ltRect, ::UnityEngine::Vector2 to, float time);
    // static public LTDescr moveMargin(LTRect ltRect, UnityEngine.Vector2 to, System.Single time)
    // Offset: 0x1AD3BAC
    static ::GlobalNamespace::LTDescr* moveMargin(::GlobalNamespace::LTRect* ltRect, ::UnityEngine::Vector2 to, float time);
    // static public LTDescr moveX(UnityEngine.GameObject gameObject, System.Single to, System.Single time)
    // Offset: 0x1AD3D14
    static ::GlobalNamespace::LTDescr* moveX(::UnityEngine::GameObject* gameObject, float to, float time);
    // static public LTDescr moveY(UnityEngine.GameObject gameObject, System.Single to, System.Single time)
    // Offset: 0x1AD3DCC
    static ::GlobalNamespace::LTDescr* moveY(::UnityEngine::GameObject* gameObject, float to, float time);
    // static public LTDescr moveZ(UnityEngine.GameObject gameObject, System.Single to, System.Single time)
    // Offset: 0x1AD3E84
    static ::GlobalNamespace::LTDescr* moveZ(::UnityEngine::GameObject* gameObject, float to, float time);
    // static public LTDescr moveLocal(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time)
    // Offset: 0x1AD3F3C
    static ::GlobalNamespace::LTDescr* moveLocal(::UnityEngine::GameObject* gameObject, ::UnityEngine::Vector3 to, float time);
    // static public LTDescr moveLocal(UnityEngine.GameObject gameObject, UnityEngine.Vector3[] to, System.Single time)
    // Offset: 0x1AD3FDC
    static ::GlobalNamespace::LTDescr* moveLocal(::UnityEngine::GameObject* gameObject, ::ArrayW<::UnityEngine::Vector3> to, float time);
    // static public LTDescr moveLocalX(UnityEngine.GameObject gameObject, System.Single to, System.Single time)
    // Offset: 0x1AD42C4
    static ::GlobalNamespace::LTDescr* moveLocalX(::UnityEngine::GameObject* gameObject, float to, float time);
    // static public LTDescr moveLocalY(UnityEngine.GameObject gameObject, System.Single to, System.Single time)
    // Offset: 0x1AD437C
    static ::GlobalNamespace::LTDescr* moveLocalY(::UnityEngine::GameObject* gameObject, float to, float time);
    // static public LTDescr moveLocalZ(UnityEngine.GameObject gameObject, System.Single to, System.Single time)
    // Offset: 0x1AD4434
    static ::GlobalNamespace::LTDescr* moveLocalZ(::UnityEngine::GameObject* gameObject, float to, float time);
    // static public LTDescr moveLocal(UnityEngine.GameObject gameObject, LTBezierPath to, System.Single time)
    // Offset: 0x1AD44EC
    static ::GlobalNamespace::LTDescr* moveLocal(::UnityEngine::GameObject* gameObject, ::GlobalNamespace::LTBezierPath* to, float time);
    // static public LTDescr moveLocal(UnityEngine.GameObject gameObject, LTSpline to, System.Single time)
    // Offset: 0x1AD4644
    static ::GlobalNamespace::LTDescr* moveLocal(::UnityEngine::GameObject* gameObject, ::GlobalNamespace::LTSpline* to, float time);
    // static public LTDescr move(UnityEngine.GameObject gameObject, UnityEngine.Transform to, System.Single time)
    // Offset: 0x1AD479C
    static ::GlobalNamespace::LTDescr* move(::UnityEngine::GameObject* gameObject, ::UnityEngine::Transform* to, float time);
    // static public LTDescr rotate(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time)
    // Offset: 0x1AD48EC
    static ::GlobalNamespace::LTDescr* rotate(::UnityEngine::GameObject* gameObject, ::UnityEngine::Vector3 to, float time);
    // static public LTDescr rotate(LTRect ltRect, System.Single to, System.Single time)
    // Offset: 0x1AD498C
    static ::GlobalNamespace::LTDescr* rotate(::GlobalNamespace::LTRect* ltRect, float to, float time);
    // static public LTDescr rotateLocal(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time)
    // Offset: 0x1AD4AD0
    static ::GlobalNamespace::LTDescr* rotateLocal(::UnityEngine::GameObject* gameObject, ::UnityEngine::Vector3 to, float time);
    // static public LTDescr rotateX(UnityEngine.GameObject gameObject, System.Single to, System.Single time)
    // Offset: 0x1AD4B70
    static ::GlobalNamespace::LTDescr* rotateX(::UnityEngine::GameObject* gameObject, float to, float time);
    // static public LTDescr rotateY(UnityEngine.GameObject gameObject, System.Single to, System.Single time)
    // Offset: 0x1AD4C28
    static ::GlobalNamespace::LTDescr* rotateY(::UnityEngine::GameObject* gameObject, float to, float time);
    // static public LTDescr rotateZ(UnityEngine.GameObject gameObject, System.Single to, System.Single time)
    // Offset: 0x1AD4CE0
    static ::GlobalNamespace::LTDescr* rotateZ(::UnityEngine::GameObject* gameObject, float to, float time);
    // static public LTDescr rotateAround(UnityEngine.GameObject gameObject, UnityEngine.Vector3 axis, System.Single add, System.Single time)
    // Offset: 0x1AD4D98
    static ::GlobalNamespace::LTDescr* rotateAround(::UnityEngine::GameObject* gameObject, ::UnityEngine::Vector3 axis, float add, float time);
    // static public LTDescr rotateAroundLocal(UnityEngine.GameObject gameObject, UnityEngine.Vector3 axis, System.Single add, System.Single time)
    // Offset: 0x1AD4EF0
    static ::GlobalNamespace::LTDescr* rotateAroundLocal(::UnityEngine::GameObject* gameObject, ::UnityEngine::Vector3 axis, float add, float time);
    // static public LTDescr scale(UnityEngine.GameObject gameObject, UnityEngine.Vector3 to, System.Single time)
    // Offset: 0x1AD5048
    static ::GlobalNamespace::LTDescr* scale(::UnityEngine::GameObject* gameObject, ::UnityEngine::Vector3 to, float time);
    // static public LTDescr scale(LTRect ltRect, UnityEngine.Vector2 to, System.Single time)
    // Offset: 0x1AD50E8
    static ::GlobalNamespace::LTDescr* scale(::GlobalNamespace::LTRect* ltRect, ::UnityEngine::Vector2 to, float time);
    // static public LTDescr scaleX(UnityEngine.GameObject gameObject, System.Single to, System.Single time)
    // Offset: 0x1AD5250
    static ::GlobalNamespace::LTDescr* scaleX(::UnityEngine::GameObject* gameObject, float to, float time);
    // static public LTDescr scaleY(UnityEngine.GameObject gameObject, System.Single to, System.Single time)
    // Offset: 0x1AD5308
    static ::GlobalNamespace::LTDescr* scaleY(::UnityEngine::GameObject* gameObject, float to, float time);
    // static public LTDescr scaleZ(UnityEngine.GameObject gameObject, System.Single to, System.Single time)
    // Offset: 0x1AD53C0
    static ::GlobalNamespace::LTDescr* scaleZ(::UnityEngine::GameObject* gameObject, float to, float time);
    // static public LTDescr value(UnityEngine.GameObject gameObject, System.Single from, System.Single to, System.Single time)
    // Offset: 0x1AD5478
    static ::GlobalNamespace::LTDescr* value(::UnityEngine::GameObject* gameObject, float from, float to, float time);
    // static public LTDescr value(UnityEngine.GameObject gameObject, UnityEngine.Vector2 from, UnityEngine.Vector2 to, System.Single time)
    // Offset: 0x1AD55EC
    static ::GlobalNamespace::LTDescr* value(::UnityEngine::GameObject* gameObject, ::UnityEngine::Vector2 from, ::UnityEngine::Vector2 to, float time);
    // static public LTDescr value(UnityEngine.GameObject gameObject, UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Single time)
    // Offset: 0x1AD5820
    static ::GlobalNamespace::LTDescr* value(::UnityEngine::GameObject* gameObject, ::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, float time);
    // static public LTDescr value(UnityEngine.GameObject gameObject, UnityEngine.Color from, UnityEngine.Color to, System.Single time)
    // Offset: 0x1AD5960
    static ::GlobalNamespace::LTDescr* value(::UnityEngine::GameObject* gameObject, ::UnityEngine::Color from, ::UnityEngine::Color to, float time);
    // static public LTDescr value(UnityEngine.GameObject gameObject, System.Action`1<System.Single> callOnUpdate, System.Single from, System.Single to, System.Single time)
    // Offset: 0x1AD5BF8
    static ::GlobalNamespace::LTDescr* value(::UnityEngine::GameObject* gameObject, ::System::Action_1<float>* callOnUpdate, float from, float to, float time);
    // static public LTDescr value(UnityEngine.GameObject gameObject, System.Action`2<System.Single,System.Single> callOnUpdateRatio, System.Single from, System.Single to, System.Single time)
    // Offset: 0x1AD5E9C
    static ::GlobalNamespace::LTDescr* value(::UnityEngine::GameObject* gameObject, ::System::Action_2<float, float>* callOnUpdateRatio, float from, float to, float time);
    // static public LTDescr value(UnityEngine.GameObject gameObject, System.Action`1<UnityEngine.Color> callOnUpdate, UnityEngine.Color from, UnityEngine.Color to, System.Single time)
    // Offset: 0x1AD6140
    static ::GlobalNamespace::LTDescr* value(::UnityEngine::GameObject* gameObject, ::System::Action_1<::UnityEngine::Color>* callOnUpdate, ::UnityEngine::Color from, ::UnityEngine::Color to, float time);
    // static public LTDescr value(UnityEngine.GameObject gameObject, System.Action`1<UnityEngine.Vector2> callOnUpdate, UnityEngine.Vector2 from, UnityEngine.Vector2 to, System.Single time)
    // Offset: 0x1AD6520
    static ::GlobalNamespace::LTDescr* value(::UnityEngine::GameObject* gameObject, ::System::Action_1<::UnityEngine::Vector2>* callOnUpdate, ::UnityEngine::Vector2 from, ::UnityEngine::Vector2 to, float time);
    // static public LTDescr value(UnityEngine.GameObject gameObject, System.Action`1<UnityEngine.Vector3> callOnUpdate, UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Single time)
    // Offset: 0x1AD67CC
    static ::GlobalNamespace::LTDescr* value(::UnityEngine::GameObject* gameObject, ::System::Action_1<::UnityEngine::Vector3>* callOnUpdate, ::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, float time);
    // static public LTDescr value(UnityEngine.GameObject gameObject, System.Action`2<System.Single,System.Object> callOnUpdate, System.Single from, System.Single to, System.Single time)
    // Offset: 0x1AD6A08
    static ::GlobalNamespace::LTDescr* value(::UnityEngine::GameObject* gameObject, ::System::Action_2<float, ::Il2CppObject*>* callOnUpdate, float from, float to, float time);
    // static public LTDescr delayedSound(UnityEngine.AudioClip audio, UnityEngine.Vector3 pos, System.Single volume)
    // Offset: 0x1AD6CB0
    static ::GlobalNamespace::LTDescr* delayedSound(::UnityEngine::AudioClip* audio, ::UnityEngine::Vector3 pos, float volume);
    // static public LTDescr delayedSound(UnityEngine.GameObject gameObject, UnityEngine.AudioClip audio, UnityEngine.Vector3 pos, System.Single volume)
    // Offset: 0x1AD6F14
    static ::GlobalNamespace::LTDescr* delayedSound(::UnityEngine::GameObject* gameObject, ::UnityEngine::AudioClip* audio, ::UnityEngine::Vector3 pos, float volume);
    // static public LTDescr move(UnityEngine.RectTransform rectTrans, UnityEngine.Vector3 to, System.Single time)
    // Offset: 0x1AD7174
    static ::GlobalNamespace::LTDescr* move(::UnityEngine::RectTransform* rectTrans, ::UnityEngine::Vector3 to, float time);
    // static public LTDescr moveX(UnityEngine.RectTransform rectTrans, System.Single to, System.Single time)
    // Offset: 0x1AD72B8
    static ::GlobalNamespace::LTDescr* moveX(::UnityEngine::RectTransform* rectTrans, float to, float time);
    // static public LTDescr moveY(UnityEngine.RectTransform rectTrans, System.Single to, System.Single time)
    // Offset: 0x1AD7410
    static ::GlobalNamespace::LTDescr* moveY(::UnityEngine::RectTransform* rectTrans, float to, float time);
    // static public LTDescr moveZ(UnityEngine.RectTransform rectTrans, System.Single to, System.Single time)
    // Offset: 0x1AD7568
    static ::GlobalNamespace::LTDescr* moveZ(::UnityEngine::RectTransform* rectTrans, float to, float time);
    // static public LTDescr rotate(UnityEngine.RectTransform rectTrans, System.Single to, System.Single time)
    // Offset: 0x1AD76C0
    static ::GlobalNamespace::LTDescr* rotate(::UnityEngine::RectTransform* rectTrans, float to, float time);
    // static public LTDescr rotateAround(UnityEngine.RectTransform rectTrans, UnityEngine.Vector3 axis, System.Single to, System.Single time)
    // Offset: 0x1AD78D8
    static ::GlobalNamespace::LTDescr* rotateAround(::UnityEngine::RectTransform* rectTrans, ::UnityEngine::Vector3 axis, float to, float time);
    // static public LTDescr rotateAroundLocal(UnityEngine.RectTransform rectTrans, UnityEngine.Vector3 axis, System.Single to, System.Single time)
    // Offset: 0x1AD7AC8
    static ::GlobalNamespace::LTDescr* rotateAroundLocal(::UnityEngine::RectTransform* rectTrans, ::UnityEngine::Vector3 axis, float to, float time);
    // static public LTDescr scale(UnityEngine.RectTransform rectTrans, UnityEngine.Vector3 to, System.Single time)
    // Offset: 0x1AD7CB8
    static ::GlobalNamespace::LTDescr* scale(::UnityEngine::RectTransform* rectTrans, ::UnityEngine::Vector3 to, float time);
    // static public LTDescr alpha(UnityEngine.RectTransform rectTrans, System.Single to, System.Single time)
    // Offset: 0x1AD7DFC
    static ::GlobalNamespace::LTDescr* alpha(::UnityEngine::RectTransform* rectTrans, float to, float time);
    // static public LTDescr color(UnityEngine.RectTransform rectTrans, UnityEngine.Color to, System.Single time)
    // Offset: 0x1AD7F54
    static ::GlobalNamespace::LTDescr* color(::UnityEngine::RectTransform* rectTrans, ::UnityEngine::Color to, float time);
    // static private System.Single tweenOnCurve(LTDescrImpl tweenDescr, System.Single ratioPassed)
    // Offset: 0x1ACD3E0
    static float tweenOnCurve(::GlobalNamespace::LTDescrImpl* tweenDescr, float ratioPassed);
    // static private UnityEngine.Vector3 tweenOnCurveVector(LTDescrImpl tweenDescr, System.Single ratioPassed)
    // Offset: 0x1ACEA6C
    static ::UnityEngine::Vector3 tweenOnCurveVector(::GlobalNamespace::LTDescrImpl* tweenDescr, float ratioPassed);
    // static private System.Single easeOutQuadOpt(System.Single start, System.Single diff, System.Single ratioPassed)
    // Offset: 0x1ACD464
    static float easeOutQuadOpt(float start, float diff, float ratioPassed);
    // static private System.Single easeInQuadOpt(System.Single start, System.Single diff, System.Single ratioPassed)
    // Offset: 0x1ACD47C
    static float easeInQuadOpt(float start, float diff, float ratioPassed);
    // static private System.Single easeInOutQuadOpt(System.Single start, System.Single diff, System.Single ratioPassed)
    // Offset: 0x1ACD48C
    static float easeInOutQuadOpt(float start, float diff, float ratioPassed);
    // static private System.Single linear(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1AD8170
    static float linear(float start, float end, float val);
    // static private System.Single clerp(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1AD81F8
    static float clerp(float start, float end, float val);
    // static private System.Single spring(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACE470
    static float spring(float start, float end, float val);
    // static private System.Single easeInQuad(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1AD82C4
    static float easeInQuad(float start, float end, float val);
    // static private System.Single easeOutQuad(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1AD82D8
    static float easeOutQuad(float start, float end, float val);
    // static private System.Single easeInOutQuad(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1AD82F4
    static float easeInOutQuad(float start, float end, float val);
    // static private System.Single easeInCubic(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACD4DC
    static float easeInCubic(float start, float end, float val);
    // static private System.Single easeOutCubic(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACD4F4
    static float easeOutCubic(float start, float end, float val);
    // static private System.Single easeInOutCubic(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACD51C
    static float easeInOutCubic(float start, float end, float val);
    // static private System.Single easeInQuart(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACD574
    static float easeInQuart(float start, float end, float val);
    // static private System.Single easeOutQuart(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACD590
    static float easeOutQuart(float start, float end, float val);
    // static private System.Single easeInOutQuart(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACD5B8
    static float easeInOutQuart(float start, float end, float val);
    // static private System.Single easeInQuint(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACD614
    static float easeInQuint(float start, float end, float val);
    // static private System.Single easeOutQuint(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACD634
    static float easeOutQuint(float start, float end, float val);
    // static private System.Single easeInOutQuint(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACD664
    static float easeInOutQuint(float start, float end, float val);
    // static private System.Single easeInSine(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACD6CC
    static float easeInSine(float start, float end, float val);
    // static private System.Single easeOutSine(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACD764
    static float easeOutSine(float start, float end, float val);
    // static private System.Single easeInOutSine(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACD7F8
    static float easeInOutSine(float start, float end, float val);
    // static private System.Single easeInExpo(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACD89C
    static float easeInExpo(float start, float end, float val);
    // static private System.Single easeOutExpo(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACD934
    static float easeOutExpo(float start, float end, float val);
    // static private System.Single easeInOutExpo(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACD9CC
    static float easeInOutExpo(float start, float end, float val);
    // static private System.Single easeInCirc(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACDABC
    static float easeInCirc(float start, float end, float val);
    // static private System.Single easeOutCirc(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACDB68
    static float easeOutCirc(float start, float end, float val);
    // static private System.Single easeInOutCirc(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACDC14
    static float easeInOutCirc(float start, float end, float val);
    // static private System.Single easeInBounce(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACDD0C
    static float easeInBounce(float start, float end, float val);
    // static private System.Single easeOutBounce(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACDDA4
    static float easeOutBounce(float start, float end, float val);
    // static private System.Single easeInOutBounce(System.Single start, System.Single end, System.Single val)
    // Offset: 0x1ACDE74
    static float easeInOutBounce(float start, float end, float val);
    // static private System.Single easeInBack(System.Single start, System.Single end, System.Single val, System.Single overshoot)
    // Offset: 0x1ACDF4C
    static float easeInBack(float start, float end, float val, float overshoot);
    // static private System.Single easeOutBack(System.Single start, System.Single end, System.Single val, System.Single overshoot)
    // Offset: 0x1ACDF80
    static float easeOutBack(float start, float end, float val, float overshoot);
    // static private System.Single easeInOutBack(System.Single start, System.Single end, System.Single val, System.Single overshoot)
    // Offset: 0x1ACDFC0
    static float easeInOutBack(float start, float end, float val, float overshoot);
    // static private System.Single easeInElastic(System.Single start, System.Single end, System.Single val, System.Single overshoot, System.Single period)
    // Offset: 0x1ACE058
    static float easeInElastic(float start, float end, float val, float overshoot, float period);
    // static private System.Single easeOutElastic(System.Single start, System.Single end, System.Single val, System.Single overshoot, System.Single period)
    // Offset: 0x1ACE18C
    static float easeOutElastic(float start, float end, float val, float overshoot, float period);
    // static private System.Single easeInOutElastic(System.Single start, System.Single end, System.Single val, System.Single overshoot, System.Single period)
    // Offset: 0x1ACE2B0
    static float easeInOutElastic(float start, float end, float val, float overshoot, float period);
    // static public System.Void addListener(System.Int32 eventId, System.Action`1<LTEvent> callback)
    // Offset: 0x1AD8348
    static void addListener(int eventId, ::System::Action_1<::GlobalNamespace::LTEvent*>* callback);
    // static public System.Void addListener(UnityEngine.GameObject caller, System.Int32 eventId, System.Action`1<LTEvent> callback)
    // Offset: 0x1AD83C0
    static void addListener(::UnityEngine::GameObject* caller, int eventId, ::System::Action_1<::GlobalNamespace::LTEvent*>* callback);
    // static public System.Boolean removeListener(System.Int32 eventId, System.Action`1<LTEvent> callback)
    // Offset: 0x1AD88E0
    static bool removeListener(int eventId, ::System::Action_1<::GlobalNamespace::LTEvent*>* callback);
    // static public System.Boolean removeListener(UnityEngine.GameObject caller, System.Int32 eventId, System.Action`1<LTEvent> callback)
    // Offset: 0x1AD8958
    static bool removeListener(::UnityEngine::GameObject* caller, int eventId, ::System::Action_1<::GlobalNamespace::LTEvent*>* callback);
    // static public System.Void dispatchEvent(System.Int32 eventId)
    // Offset: 0x1AD8BD4
    static void dispatchEvent(int eventId);
    // static public System.Void dispatchEvent(System.Int32 eventId, System.Object data)
    // Offset: 0x1AD8C3C
    static void dispatchEvent(int eventId, ::Il2CppObject* data);
    // public System.Void .ctor()
    // Offset: 0x1AD8EB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LeanTween* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LeanTween::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LeanTween*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1AD8EC0
    static void _cctor();
  }; // LeanTween
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::init
// Il2CppName: init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LeanTween::init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::get_maxSearch
// Il2CppName: get_maxSearch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::LeanTween::get_maxSearch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "get_maxSearch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::get_tweensRunning
// Il2CppName: get_tweensRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::LeanTween::get_tweensRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "get_tweensRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::init
// Il2CppName: init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::LeanTween::init)> {
  static const MethodInfo* get() {
    static auto* maxSimultaneousTweens = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxSimultaneousTweens});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::reset
// Il2CppName: reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LeanTween::reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LeanTween::*)()>(&GlobalNamespace::LeanTween::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::OnLevelWasLoaded
// Il2CppName: OnLevelWasLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LeanTween::*)(int)>(&GlobalNamespace::LeanTween::OnLevelWasLoaded)> {
  static const MethodInfo* get() {
    static auto* lvl = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "OnLevelWasLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lvl});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::update
// Il2CppName: update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LeanTween::update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::textAlphaRecursive
// Il2CppName: textAlphaRecursive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, float)>(&GlobalNamespace::LeanTween::textAlphaRecursive)> {
  static const MethodInfo* get() {
    static auto* trans = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "textAlphaRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trans, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::tweenColor
// Il2CppName: tweenColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (*)(::GlobalNamespace::LTDescrImpl*, float)>(&GlobalNamespace::LeanTween::tweenColor)> {
  static const MethodInfo* get() {
    static auto* tween = &::il2cpp_utils::GetClassFromName("", "LTDescrImpl")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "tweenColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tween, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::removeTween
// Il2CppName: removeTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int)>(&GlobalNamespace::LeanTween::removeTween)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uniqueId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "removeTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, uniqueId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::removeTween
// Il2CppName: removeTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::LeanTween::removeTween)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "removeTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::add
// Il2CppName: add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (*)(::ArrayW<::UnityEngine::Vector3>, ::UnityEngine::Vector3)>(&GlobalNamespace::LeanTween::add)> {
  static const MethodInfo* get() {
    static auto* a = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::closestRot
// Il2CppName: closestRot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&GlobalNamespace::LeanTween::closestRot)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "closestRot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::cancelAll
// Il2CppName: cancelAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LeanTween::cancelAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "cancelAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::cancelAll
// Il2CppName: cancelAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::LeanTween::cancelAll)> {
  static const MethodInfo* get() {
    static auto* callComplete = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "cancelAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::cancel
// Il2CppName: cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*)>(&GlobalNamespace::LeanTween::cancel)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::cancel
// Il2CppName: cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, bool)>(&GlobalNamespace::LeanTween::cancel)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* callOnComplete = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, callOnComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::cancel
// Il2CppName: cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, int)>(&GlobalNamespace::LeanTween::cancel)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* uniqueId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, uniqueId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::cancel
// Il2CppName: cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::LTRect*, int)>(&GlobalNamespace::LeanTween::cancel)> {
  static const MethodInfo* get() {
    static auto* ltRect = &::il2cpp_utils::GetClassFromName("", "LTRect")->byval_arg;
    static auto* uniqueId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ltRect, uniqueId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::cancel
// Il2CppName: cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::LeanTween::cancel)> {
  static const MethodInfo* get() {
    static auto* uniqueId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uniqueId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::cancel
// Il2CppName: cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, bool)>(&GlobalNamespace::LeanTween::cancel)> {
  static const MethodInfo* get() {
    static auto* uniqueId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callOnComplete = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uniqueId, callOnComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::descr
// Il2CppName: descr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(int)>(&GlobalNamespace::LeanTween::descr)> {
  static const MethodInfo* get() {
    static auto* uniqueId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "descr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uniqueId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::description
// Il2CppName: description
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(int)>(&GlobalNamespace::LeanTween::description)> {
  static const MethodInfo* get() {
    static auto* uniqueId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "description", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uniqueId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::descriptions
// Il2CppName: descriptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::LTDescr*> (*)(::UnityEngine::GameObject*)>(&GlobalNamespace::LeanTween::descriptions)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "descriptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::pause
// Il2CppName: pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, int)>(&GlobalNamespace::LeanTween::pause)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* uniqueId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, uniqueId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::pause
// Il2CppName: pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::LeanTween::pause)> {
  static const MethodInfo* get() {
    static auto* uniqueId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uniqueId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::pause
// Il2CppName: pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*)>(&GlobalNamespace::LeanTween::pause)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::pauseAll
// Il2CppName: pauseAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LeanTween::pauseAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "pauseAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::resumeAll
// Il2CppName: resumeAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LeanTween::resumeAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "resumeAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::resume
// Il2CppName: resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, int)>(&GlobalNamespace::LeanTween::resume)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* uniqueId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, uniqueId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::resume
// Il2CppName: resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::LeanTween::resume)> {
  static const MethodInfo* get() {
    static auto* uniqueId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uniqueId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::resume
// Il2CppName: resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*)>(&GlobalNamespace::LeanTween::resume)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::isTweening
// Il2CppName: isTweening
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::GameObject*)>(&GlobalNamespace::LeanTween::isTweening)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "isTweening", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::isTweening
// Il2CppName: isTweening
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&GlobalNamespace::LeanTween::isTweening)> {
  static const MethodInfo* get() {
    static auto* uniqueId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "isTweening", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uniqueId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::isTweening
// Il2CppName: isTweening
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::LTRect*)>(&GlobalNamespace::LeanTween::isTweening)> {
  static const MethodInfo* get() {
    static auto* ltRect = &::il2cpp_utils::GetClassFromName("", "LTRect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "isTweening", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ltRect});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::drawBezierPath
// Il2CppName: drawBezierPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float, ::UnityEngine::Transform*)>(&GlobalNamespace::LeanTween::drawBezierPath)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* d = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* arrowSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* arrowTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "drawBezierPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, d, arrowSize, arrowTransform});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::logError
// Il2CppName: logError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::StringW)>(&GlobalNamespace::LeanTween::logError)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "logError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::options
// Il2CppName: options
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::GlobalNamespace::LTDescr*)>(&GlobalNamespace::LeanTween::options)> {
  static const MethodInfo* get() {
    static auto* seed = &::il2cpp_utils::GetClassFromName("", "LTDescr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "options", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::options
// Il2CppName: options
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)()>(&GlobalNamespace::LeanTween::options)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "options", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::get_tweenEmpty
// Il2CppName: get_tweenEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (*)()>(&GlobalNamespace::LeanTween::get_tweenEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "get_tweenEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::pushNewTween
// Il2CppName: pushNewTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, float, ::GlobalNamespace::TweenAction, ::GlobalNamespace::LTDescr*)>(&GlobalNamespace::LeanTween::pushNewTween)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tweenAction = &::il2cpp_utils::GetClassFromName("", "TweenAction")->byval_arg;
    static auto* tween = &::il2cpp_utils::GetClassFromName("", "LTDescr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "pushNewTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time, tweenAction, tween});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::play
// Il2CppName: play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::RectTransform*, ::ArrayW<::UnityEngine::Sprite*>)>(&GlobalNamespace::LeanTween::play)> {
  static const MethodInfo* get() {
    static auto* rectTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* sprites = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTransform, sprites});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::alpha
// Il2CppName: alpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, float)>(&GlobalNamespace::LeanTween::alpha)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "alpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::alpha
// Il2CppName: alpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::GlobalNamespace::LTRect*, float, float)>(&GlobalNamespace::LeanTween::alpha)> {
  static const MethodInfo* get() {
    static auto* ltRect = &::il2cpp_utils::GetClassFromName("", "LTRect")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "alpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ltRect, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::textAlpha
// Il2CppName: textAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::RectTransform*, float, float)>(&GlobalNamespace::LeanTween::textAlpha)> {
  static const MethodInfo* get() {
    static auto* rectTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "textAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTransform, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::alphaText
// Il2CppName: alphaText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::RectTransform*, float, float)>(&GlobalNamespace::LeanTween::alphaText)> {
  static const MethodInfo* get() {
    static auto* rectTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "alphaText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTransform, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::alphaCanvas
// Il2CppName: alphaCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::CanvasGroup*, float, float)>(&GlobalNamespace::LeanTween::alphaCanvas)> {
  static const MethodInfo* get() {
    static auto* canvasGroup = &::il2cpp_utils::GetClassFromName("UnityEngine", "CanvasGroup")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "alphaCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{canvasGroup, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::alphaVertex
// Il2CppName: alphaVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, float)>(&GlobalNamespace::LeanTween::alphaVertex)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "alphaVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::color
// Il2CppName: color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::UnityEngine::Color, float)>(&GlobalNamespace::LeanTween::color)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::textColor
// Il2CppName: textColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::RectTransform*, ::UnityEngine::Color, float)>(&GlobalNamespace::LeanTween::textColor)> {
  static const MethodInfo* get() {
    static auto* rectTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "textColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTransform, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::colorText
// Il2CppName: colorText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::RectTransform*, ::UnityEngine::Color, float)>(&GlobalNamespace::LeanTween::colorText)> {
  static const MethodInfo* get() {
    static auto* rectTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "colorText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTransform, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::delayedCall
// Il2CppName: delayedCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(float, ::System::Action*)>(&GlobalNamespace::LeanTween::delayedCall)> {
  static const MethodInfo* get() {
    static auto* delayTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "delayedCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delayTime, callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::delayedCall
// Il2CppName: delayedCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(float, ::System::Action_1<::Il2CppObject*>*)>(&GlobalNamespace::LeanTween::delayedCall)> {
  static const MethodInfo* get() {
    static auto* delayTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "delayedCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delayTime, callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::delayedCall
// Il2CppName: delayedCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, ::System::Action*)>(&GlobalNamespace::LeanTween::delayedCall)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* delayTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "delayedCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, delayTime, callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::delayedCall
// Il2CppName: delayedCall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, ::System::Action_1<::Il2CppObject*>*)>(&GlobalNamespace::LeanTween::delayedCall)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* delayTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "delayedCall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, delayTime, callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::destroyAfter
// Il2CppName: destroyAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::GlobalNamespace::LTRect*, float)>(&GlobalNamespace::LeanTween::destroyAfter)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("", "LTRect")->byval_arg;
    static auto* delayTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "destroyAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, delayTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::move
// Il2CppName: move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, float)>(&GlobalNamespace::LeanTween::move)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::move
// Il2CppName: move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::UnityEngine::Vector2, float)>(&GlobalNamespace::LeanTween::move)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::move
// Il2CppName: move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::ArrayW<::UnityEngine::Vector3>, float)>(&GlobalNamespace::LeanTween::move)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::move
// Il2CppName: move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::GlobalNamespace::LTBezierPath*, float)>(&GlobalNamespace::LeanTween::move)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("", "LTBezierPath")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::move
// Il2CppName: move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::GlobalNamespace::LTSpline*, float)>(&GlobalNamespace::LeanTween::move)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("", "LTSpline")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveSpline
// Il2CppName: moveSpline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::ArrayW<::UnityEngine::Vector3>, float)>(&GlobalNamespace::LeanTween::moveSpline)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveSpline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveSplineLocal
// Il2CppName: moveSplineLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::ArrayW<::UnityEngine::Vector3>, float)>(&GlobalNamespace::LeanTween::moveSplineLocal)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveSplineLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::move
// Il2CppName: move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::GlobalNamespace::LTRect*, ::UnityEngine::Vector2, float)>(&GlobalNamespace::LeanTween::move)> {
  static const MethodInfo* get() {
    static auto* ltRect = &::il2cpp_utils::GetClassFromName("", "LTRect")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ltRect, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveMargin
// Il2CppName: moveMargin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::GlobalNamespace::LTRect*, ::UnityEngine::Vector2, float)>(&GlobalNamespace::LeanTween::moveMargin)> {
  static const MethodInfo* get() {
    static auto* ltRect = &::il2cpp_utils::GetClassFromName("", "LTRect")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveMargin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ltRect, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveX
// Il2CppName: moveX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, float)>(&GlobalNamespace::LeanTween::moveX)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveY
// Il2CppName: moveY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, float)>(&GlobalNamespace::LeanTween::moveY)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveZ
// Il2CppName: moveZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, float)>(&GlobalNamespace::LeanTween::moveZ)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveLocal
// Il2CppName: moveLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, float)>(&GlobalNamespace::LeanTween::moveLocal)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveLocal
// Il2CppName: moveLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::ArrayW<::UnityEngine::Vector3>, float)>(&GlobalNamespace::LeanTween::moveLocal)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveLocalX
// Il2CppName: moveLocalX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, float)>(&GlobalNamespace::LeanTween::moveLocalX)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveLocalX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveLocalY
// Il2CppName: moveLocalY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, float)>(&GlobalNamespace::LeanTween::moveLocalY)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveLocalY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveLocalZ
// Il2CppName: moveLocalZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, float)>(&GlobalNamespace::LeanTween::moveLocalZ)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveLocalZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveLocal
// Il2CppName: moveLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::GlobalNamespace::LTBezierPath*, float)>(&GlobalNamespace::LeanTween::moveLocal)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("", "LTBezierPath")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveLocal
// Il2CppName: moveLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::GlobalNamespace::LTSpline*, float)>(&GlobalNamespace::LeanTween::moveLocal)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("", "LTSpline")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::move
// Il2CppName: move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::UnityEngine::Transform*, float)>(&GlobalNamespace::LeanTween::move)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::rotate
// Il2CppName: rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, float)>(&GlobalNamespace::LeanTween::rotate)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::rotate
// Il2CppName: rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::GlobalNamespace::LTRect*, float, float)>(&GlobalNamespace::LeanTween::rotate)> {
  static const MethodInfo* get() {
    static auto* ltRect = &::il2cpp_utils::GetClassFromName("", "LTRect")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ltRect, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::rotateLocal
// Il2CppName: rotateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, float)>(&GlobalNamespace::LeanTween::rotateLocal)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "rotateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::rotateX
// Il2CppName: rotateX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, float)>(&GlobalNamespace::LeanTween::rotateX)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "rotateX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::rotateY
// Il2CppName: rotateY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, float)>(&GlobalNamespace::LeanTween::rotateY)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "rotateY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::rotateZ
// Il2CppName: rotateZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, float)>(&GlobalNamespace::LeanTween::rotateZ)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "rotateZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::rotateAround
// Il2CppName: rotateAround
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, float, float)>(&GlobalNamespace::LeanTween::rotateAround)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* add = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "rotateAround", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, axis, add, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::rotateAroundLocal
// Il2CppName: rotateAroundLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, float, float)>(&GlobalNamespace::LeanTween::rotateAroundLocal)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* add = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "rotateAroundLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, axis, add, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::scale
// Il2CppName: scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, float)>(&GlobalNamespace::LeanTween::scale)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::scale
// Il2CppName: scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::GlobalNamespace::LTRect*, ::UnityEngine::Vector2, float)>(&GlobalNamespace::LeanTween::scale)> {
  static const MethodInfo* get() {
    static auto* ltRect = &::il2cpp_utils::GetClassFromName("", "LTRect")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ltRect, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::scaleX
// Il2CppName: scaleX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, float)>(&GlobalNamespace::LeanTween::scaleX)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "scaleX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::scaleY
// Il2CppName: scaleY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, float)>(&GlobalNamespace::LeanTween::scaleY)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "scaleY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::scaleZ
// Il2CppName: scaleZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, float)>(&GlobalNamespace::LeanTween::scaleZ)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "scaleZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::value
// Il2CppName: value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, float, float, float)>(&GlobalNamespace::LeanTween::value)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, from, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::value
// Il2CppName: value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::UnityEngine::Vector2, ::UnityEngine::Vector2, float)>(&GlobalNamespace::LeanTween::value)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, from, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::value
// Il2CppName: value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&GlobalNamespace::LeanTween::value)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, from, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::value
// Il2CppName: value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::UnityEngine::Color, ::UnityEngine::Color, float)>(&GlobalNamespace::LeanTween::value)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, from, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::value
// Il2CppName: value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::System::Action_1<float>*, float, float, float)>(&GlobalNamespace::LeanTween::value)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* callOnUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, callOnUpdate, from, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::value
// Il2CppName: value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::System::Action_2<float, float>*, float, float, float)>(&GlobalNamespace::LeanTween::value)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* callOnUpdateRatio = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, callOnUpdateRatio, from, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::value
// Il2CppName: value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::System::Action_1<::UnityEngine::Color>*, ::UnityEngine::Color, ::UnityEngine::Color, float)>(&GlobalNamespace::LeanTween::value)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* callOnUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, callOnUpdate, from, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::value
// Il2CppName: value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::System::Action_1<::UnityEngine::Vector2>*, ::UnityEngine::Vector2, ::UnityEngine::Vector2, float)>(&GlobalNamespace::LeanTween::value)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* callOnUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, callOnUpdate, from, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::value
// Il2CppName: value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::System::Action_1<::UnityEngine::Vector3>*, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&GlobalNamespace::LeanTween::value)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* callOnUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, callOnUpdate, from, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::value
// Il2CppName: value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::System::Action_2<float, ::Il2CppObject*>*, float, float, float)>(&GlobalNamespace::LeanTween::value)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* callOnUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, callOnUpdate, from, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::delayedSound
// Il2CppName: delayedSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::AudioClip*, ::UnityEngine::Vector3, float)>(&GlobalNamespace::LeanTween::delayedSound)> {
  static const MethodInfo* get() {
    static auto* audio = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "delayedSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audio, pos, volume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::delayedSound
// Il2CppName: delayedSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::GameObject*, ::UnityEngine::AudioClip*, ::UnityEngine::Vector3, float)>(&GlobalNamespace::LeanTween::delayedSound)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* audio = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "delayedSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, audio, pos, volume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::move
// Il2CppName: move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::RectTransform*, ::UnityEngine::Vector3, float)>(&GlobalNamespace::LeanTween::move)> {
  static const MethodInfo* get() {
    static auto* rectTrans = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTrans, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveX
// Il2CppName: moveX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::RectTransform*, float, float)>(&GlobalNamespace::LeanTween::moveX)> {
  static const MethodInfo* get() {
    static auto* rectTrans = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTrans, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveY
// Il2CppName: moveY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::RectTransform*, float, float)>(&GlobalNamespace::LeanTween::moveY)> {
  static const MethodInfo* get() {
    static auto* rectTrans = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTrans, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::moveZ
// Il2CppName: moveZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::RectTransform*, float, float)>(&GlobalNamespace::LeanTween::moveZ)> {
  static const MethodInfo* get() {
    static auto* rectTrans = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "moveZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTrans, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::rotate
// Il2CppName: rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::RectTransform*, float, float)>(&GlobalNamespace::LeanTween::rotate)> {
  static const MethodInfo* get() {
    static auto* rectTrans = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTrans, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::rotateAround
// Il2CppName: rotateAround
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::RectTransform*, ::UnityEngine::Vector3, float, float)>(&GlobalNamespace::LeanTween::rotateAround)> {
  static const MethodInfo* get() {
    static auto* rectTrans = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "rotateAround", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTrans, axis, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::rotateAroundLocal
// Il2CppName: rotateAroundLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::RectTransform*, ::UnityEngine::Vector3, float, float)>(&GlobalNamespace::LeanTween::rotateAroundLocal)> {
  static const MethodInfo* get() {
    static auto* rectTrans = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "rotateAroundLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTrans, axis, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::scale
// Il2CppName: scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::RectTransform*, ::UnityEngine::Vector3, float)>(&GlobalNamespace::LeanTween::scale)> {
  static const MethodInfo* get() {
    static auto* rectTrans = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTrans, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::alpha
// Il2CppName: alpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::RectTransform*, float, float)>(&GlobalNamespace::LeanTween::alpha)> {
  static const MethodInfo* get() {
    static auto* rectTrans = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "alpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTrans, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::color
// Il2CppName: color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (*)(::UnityEngine::RectTransform*, ::UnityEngine::Color, float)>(&GlobalNamespace::LeanTween::color)> {
  static const MethodInfo* get() {
    static auto* rectTrans = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTrans, to, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::tweenOnCurve
// Il2CppName: tweenOnCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::GlobalNamespace::LTDescrImpl*, float)>(&GlobalNamespace::LeanTween::tweenOnCurve)> {
  static const MethodInfo* get() {
    static auto* tweenDescr = &::il2cpp_utils::GetClassFromName("", "LTDescrImpl")->byval_arg;
    static auto* ratioPassed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "tweenOnCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tweenDescr, ratioPassed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::tweenOnCurveVector
// Il2CppName: tweenOnCurveVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::GlobalNamespace::LTDescrImpl*, float)>(&GlobalNamespace::LeanTween::tweenOnCurveVector)> {
  static const MethodInfo* get() {
    static auto* tweenDescr = &::il2cpp_utils::GetClassFromName("", "LTDescrImpl")->byval_arg;
    static auto* ratioPassed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "tweenOnCurveVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tweenDescr, ratioPassed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeOutQuadOpt
// Il2CppName: easeOutQuadOpt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeOutQuadOpt)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* diff = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ratioPassed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeOutQuadOpt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, diff, ratioPassed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInQuadOpt
// Il2CppName: easeInQuadOpt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInQuadOpt)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* diff = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ratioPassed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInQuadOpt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, diff, ratioPassed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInOutQuadOpt
// Il2CppName: easeInOutQuadOpt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInOutQuadOpt)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* diff = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ratioPassed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInOutQuadOpt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, diff, ratioPassed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::linear
// Il2CppName: linear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::linear)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "linear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::clerp
// Il2CppName: clerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::clerp)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "clerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::spring
// Il2CppName: spring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::spring)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "spring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInQuad
// Il2CppName: easeInQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInQuad)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeOutQuad
// Il2CppName: easeOutQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeOutQuad)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeOutQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInOutQuad
// Il2CppName: easeInOutQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInOutQuad)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInOutQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInCubic
// Il2CppName: easeInCubic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInCubic)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInCubic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeOutCubic
// Il2CppName: easeOutCubic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeOutCubic)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeOutCubic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInOutCubic
// Il2CppName: easeInOutCubic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInOutCubic)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInOutCubic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInQuart
// Il2CppName: easeInQuart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInQuart)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInQuart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeOutQuart
// Il2CppName: easeOutQuart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeOutQuart)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeOutQuart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInOutQuart
// Il2CppName: easeInOutQuart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInOutQuart)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInOutQuart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInQuint
// Il2CppName: easeInQuint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInQuint)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInQuint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeOutQuint
// Il2CppName: easeOutQuint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeOutQuint)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeOutQuint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInOutQuint
// Il2CppName: easeInOutQuint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInOutQuint)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInOutQuint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInSine
// Il2CppName: easeInSine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInSine)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInSine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeOutSine
// Il2CppName: easeOutSine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeOutSine)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeOutSine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInOutSine
// Il2CppName: easeInOutSine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInOutSine)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInOutSine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInExpo
// Il2CppName: easeInExpo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInExpo)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInExpo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeOutExpo
// Il2CppName: easeOutExpo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeOutExpo)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeOutExpo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInOutExpo
// Il2CppName: easeInOutExpo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInOutExpo)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInOutExpo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInCirc
// Il2CppName: easeInCirc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInCirc)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInCirc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeOutCirc
// Il2CppName: easeOutCirc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeOutCirc)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeOutCirc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInOutCirc
// Il2CppName: easeInOutCirc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInOutCirc)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInOutCirc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInBounce
// Il2CppName: easeInBounce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInBounce)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInBounce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeOutBounce
// Il2CppName: easeOutBounce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeOutBounce)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeOutBounce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInOutBounce
// Il2CppName: easeInOutBounce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&GlobalNamespace::LeanTween::easeInOutBounce)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInOutBounce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInBack
// Il2CppName: easeInBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float)>(&GlobalNamespace::LeanTween::easeInBack)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshoot = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val, overshoot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeOutBack
// Il2CppName: easeOutBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float)>(&GlobalNamespace::LeanTween::easeOutBack)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshoot = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeOutBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val, overshoot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInOutBack
// Il2CppName: easeInOutBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float)>(&GlobalNamespace::LeanTween::easeInOutBack)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshoot = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInOutBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val, overshoot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInElastic
// Il2CppName: easeInElastic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float, float)>(&GlobalNamespace::LeanTween::easeInElastic)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshoot = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInElastic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val, overshoot, period});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeOutElastic
// Il2CppName: easeOutElastic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float, float)>(&GlobalNamespace::LeanTween::easeOutElastic)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshoot = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeOutElastic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val, overshoot, period});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::easeInOutElastic
// Il2CppName: easeInOutElastic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float, float)>(&GlobalNamespace::LeanTween::easeInOutElastic)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* overshoot = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "easeInOutElastic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, val, overshoot, period});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::addListener
// Il2CppName: addListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::System::Action_1<::GlobalNamespace::LTEvent*>*)>(&GlobalNamespace::LeanTween::addListener)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "LTEvent")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "addListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::addListener
// Il2CppName: addListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, int, ::System::Action_1<::GlobalNamespace::LTEvent*>*)>(&GlobalNamespace::LeanTween::addListener)> {
  static const MethodInfo* get() {
    static auto* caller = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "LTEvent")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "addListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{caller, eventId, callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::removeListener
// Il2CppName: removeListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::System::Action_1<::GlobalNamespace::LTEvent*>*)>(&GlobalNamespace::LeanTween::removeListener)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "LTEvent")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "removeListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::removeListener
// Il2CppName: removeListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::GameObject*, int, ::System::Action_1<::GlobalNamespace::LTEvent*>*)>(&GlobalNamespace::LeanTween::removeListener)> {
  static const MethodInfo* get() {
    static auto* caller = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "LTEvent")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "removeListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{caller, eventId, callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::dispatchEvent
// Il2CppName: dispatchEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::LeanTween::dispatchEvent)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "dispatchEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::dispatchEvent
// Il2CppName: dispatchEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::Il2CppObject*)>(&GlobalNamespace::LeanTween::dispatchEvent)> {
  static const MethodInfo* get() {
    static auto* eventId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), "dispatchEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventId, data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LeanTween::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LeanTween::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanTween*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
