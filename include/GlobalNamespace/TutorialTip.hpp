// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TutorialTip
  struct TutorialTip;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TutorialTip, "", "TutorialTip");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x29
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: TutorialTip
  // [TokenAttribute] Offset: FFFFFFFF
  struct TutorialTip/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::GlobalNamespace::TutorialTip::tip
    struct tip;
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String description
    // Size: 0x8
    // Offset: 0x8
    ::StringW description;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32[] dimensions
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<int> dimensions;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Int32[] secondaryDimensions
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> secondaryDimensions;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Int32[] descriptionDimensions
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<int> descriptionDimensions;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Boolean showSkipButton
    // Size: 0x1
    // Offset: 0x28
    bool showSkipButton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: TutorialTip
    constexpr TutorialTip(::StringW name_ = {}, ::StringW description_ = {}, ::ArrayW<int> dimensions_ = ::ArrayW<int>(static_cast<void*>(nullptr)), ::ArrayW<int> secondaryDimensions_ = ::ArrayW<int>(static_cast<void*>(nullptr)), ::ArrayW<int> descriptionDimensions_ = ::ArrayW<int>(static_cast<void*>(nullptr)), bool showSkipButton_ = {}) noexcept : name{name_}, description{description_}, dimensions{dimensions_}, secondaryDimensions{secondaryDimensions_}, descriptionDimensions{descriptionDimensions_}, showSkipButton{showSkipButton_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.String description
    [[deprecated("Use field access instead!")]] ::StringW& dyn_description();
    // Get instance field reference: public System.Int32[] dimensions
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_dimensions();
    // Get instance field reference: public System.Int32[] secondaryDimensions
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_secondaryDimensions();
    // Get instance field reference: public System.Int32[] descriptionDimensions
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_descriptionDimensions();
    // Get instance field reference: public System.Boolean showSkipButton
    [[deprecated("Use field access instead!")]] bool& dyn_showSkipButton();
  }; // TutorialTip
  #pragma pack(pop)
  static check_size<sizeof(TutorialTip), 40 + sizeof(bool)> __GlobalNamespace_TutorialTipSizeCheck;
  static_assert(sizeof(TutorialTip) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
