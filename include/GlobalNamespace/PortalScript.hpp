// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PortalScript
  class PortalScript;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PortalScript);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PortalScript*, "", "PortalScript");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: PortalScript
  // [TokenAttribute] Offset: FFFFFFFF
  class PortalScript : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::PortalScript::$PortalLoop$d__5
    class $PortalLoop$d__5;
    public:
    // public UnityEngine.GameObject portalOpen
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* portalOpen;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject portalIdle
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* portalIdle;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject portalClose
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* portalClose;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject portalOpen
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_portalOpen();
    // Get instance field reference: public UnityEngine.GameObject portalIdle
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_portalIdle();
    // Get instance field reference: public UnityEngine.GameObject portalClose
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_portalClose();
    // private System.Void Start()
    // Offset: 0xEB5BE4
    void Start();
    // public System.Void OpenPortal()
    // Offset: 0xEB5C10
    void OpenPortal();
    // private System.Collections.IEnumerator PortalLoop()
    // Offset: 0xEB5C3C
    ::System::Collections::IEnumerator* PortalLoop();
    // public System.Void .ctor()
    // Offset: 0xEB5CDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PortalScript* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PortalScript::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PortalScript*, creationType>()));
    }
  }; // PortalScript
  #pragma pack(pop)
  static check_size<sizeof(PortalScript), 40 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_PortalScriptSizeCheck;
  static_assert(sizeof(PortalScript) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PortalScript::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PortalScript::*)()>(&GlobalNamespace::PortalScript::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PortalScript*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PortalScript::OpenPortal
// Il2CppName: OpenPortal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PortalScript::*)()>(&GlobalNamespace::PortalScript::OpenPortal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PortalScript*), "OpenPortal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PortalScript::PortalLoop
// Il2CppName: PortalLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::PortalScript::*)()>(&GlobalNamespace::PortalScript::PortalLoop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PortalScript*), "PortalLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PortalScript::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
