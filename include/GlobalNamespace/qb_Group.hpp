// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: qb_Group
  class qb_Group;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::qb_Group);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::qb_Group*, "", "qb_Group");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x22
  #pragma pack(push, 1)
  // Autogenerated type: qb_Group
  // [TokenAttribute] Offset: FFFFFFFF
  class qb_Group : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.String groupName
    // Size: 0x8
    // Offset: 0x18
    ::StringW groupName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean visible
    // Size: 0x1
    // Offset: 0x20
    bool visible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean frozen
    // Size: 0x1
    // Offset: 0x21
    bool frozen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String groupName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_groupName();
    // Get instance field reference: private System.Boolean visible
    [[deprecated("Use field access instead!")]] bool& dyn_visible();
    // Get instance field reference: private System.Boolean frozen
    [[deprecated("Use field access instead!")]] bool& dyn_frozen();
    // public System.Void AddObject(UnityEngine.GameObject newObject)
    // Offset: 0x283637C
    void AddObject(::UnityEngine::GameObject* newObject);
    // public System.Void Hide()
    // Offset: 0x28363E0
    void Hide();
    // public System.Void Show()
    // Offset: 0x28363E8
    void Show();
    // public System.Void Freeze()
    // Offset: 0x28363F4
    void Freeze();
    // public System.Void UnFreeze()
    // Offset: 0x2836400
    void UnFreeze();
    // public System.Void CleanUp()
    // Offset: 0x2836408
    void CleanUp();
    // public System.Void .ctor()
    // Offset: 0x2836484
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static qb_Group* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::qb_Group::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<qb_Group*, creationType>()));
    }
  }; // qb_Group
  #pragma pack(pop)
  static check_size<sizeof(qb_Group), 33 + sizeof(bool)> __GlobalNamespace_qb_GroupSizeCheck;
  static_assert(sizeof(qb_Group) == 0x22);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::qb_Group::AddObject
// Il2CppName: AddObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::qb_Group::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::qb_Group::AddObject)> {
  static const MethodInfo* get() {
    static auto* newObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::qb_Group*), "AddObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::qb_Group::Hide
// Il2CppName: Hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::qb_Group::*)()>(&GlobalNamespace::qb_Group::Hide)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::qb_Group*), "Hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::qb_Group::Show
// Il2CppName: Show
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::qb_Group::*)()>(&GlobalNamespace::qb_Group::Show)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::qb_Group*), "Show", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::qb_Group::Freeze
// Il2CppName: Freeze
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::qb_Group::*)()>(&GlobalNamespace::qb_Group::Freeze)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::qb_Group*), "Freeze", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::qb_Group::UnFreeze
// Il2CppName: UnFreeze
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::qb_Group::*)()>(&GlobalNamespace::qb_Group::UnFreeze)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::qb_Group*), "UnFreeze", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::qb_Group::CleanUp
// Il2CppName: CleanUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::qb_Group::*)()>(&GlobalNamespace::qb_Group::CleanUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::qb_Group*), "CleanUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::qb_Group::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
