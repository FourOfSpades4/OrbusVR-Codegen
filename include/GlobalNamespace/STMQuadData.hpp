// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.FilterMode
#include "UnityEngine/FilterMode.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: STMQuadData
  class STMQuadData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::STMQuadData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::STMQuadData*, "", "STMQuadData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: STMQuadData
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: ACD934
  class STMQuadData : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public UnityEngine.Texture texture
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Texture* texture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // [TooltipAttribute] Offset: 0xAD8DBC
    // public System.Boolean silhouette
    // Size: 0x1
    // Offset: 0x20
    bool silhouette;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean overrideFilterMode
    // Size: 0x1
    // Offset: 0x21
    bool overrideFilterMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideFilterMode and: filterMode
    char __padding2[0x2] = {};
    // public UnityEngine.FilterMode filterMode
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::FilterMode filterMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::FilterMode) == 0x4);
    // public System.Int32 columns
    // Size: 0x4
    // Offset: 0x28
    int columns;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 rows
    // Size: 0x4
    // Offset: 0x2C
    int rows;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 iconIndex
    // Size: 0x4
    // Offset: 0x30
    int iconIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single animDelay
    // Size: 0x4
    // Offset: 0x34
    float animDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32[] frames
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<int> frames;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public UnityEngine.Vector2 size
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Vector2 size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector3 offset
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single advance
    // Size: 0x4
    // Offset: 0x54
    float advance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Texture texture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_texture();
    // Get instance field reference: public System.Boolean silhouette
    [[deprecated("Use field access instead!")]] bool& dyn_silhouette();
    // Get instance field reference: public System.Boolean overrideFilterMode
    [[deprecated("Use field access instead!")]] bool& dyn_overrideFilterMode();
    // Get instance field reference: public UnityEngine.FilterMode filterMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::FilterMode& dyn_filterMode();
    // Get instance field reference: public System.Int32 columns
    [[deprecated("Use field access instead!")]] int& dyn_columns();
    // Get instance field reference: public System.Int32 rows
    [[deprecated("Use field access instead!")]] int& dyn_rows();
    // Get instance field reference: public System.Int32 iconIndex
    [[deprecated("Use field access instead!")]] int& dyn_iconIndex();
    // Get instance field reference: public System.Single animDelay
    [[deprecated("Use field access instead!")]] float& dyn_animDelay();
    // Get instance field reference: public System.Int32[] frames
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_frames();
    // Get instance field reference: public UnityEngine.Vector2 size
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_size();
    // Get instance field reference: public UnityEngine.Vector3 offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_offset();
    // Get instance field reference: public System.Single advance
    [[deprecated("Use field access instead!")]] float& dyn_advance();
    // public UnityEngine.Vector3 get_TopLeftVert()
    // Offset: 0xE2F40C
    ::UnityEngine::Vector3 get_TopLeftVert();
    // public UnityEngine.Vector3 get_TopRightVert()
    // Offset: 0xE2F4C8
    ::UnityEngine::Vector3 get_TopRightVert();
    // public UnityEngine.Vector3 get_BottomRightVert()
    // Offset: 0xE2F580
    ::UnityEngine::Vector3 get_BottomRightVert();
    // public UnityEngine.Vector3 get_BottomLeftVert()
    // Offset: 0xE2F63C
    ::UnityEngine::Vector3 get_BottomLeftVert();
    // public UnityEngine.Vector3 get_Middle()
    // Offset: 0xE2F6F8
    ::UnityEngine::Vector3 get_Middle();
    // public UnityEngine.Vector2 UvTopLeft(System.Single myTime, System.Int32 myIconIndex)
    // Offset: 0xE2F7BC
    ::UnityEngine::Vector2 UvTopLeft(float myTime, int myIconIndex);
    // public UnityEngine.Vector2 UvTopRight(System.Single myTime, System.Int32 myIconIndex)
    // Offset: 0xE2FAD0
    ::UnityEngine::Vector2 UvTopRight(float myTime, int myIconIndex);
    // public UnityEngine.Vector2 UvBottomRight(System.Single myTime, System.Int32 myIconIndex)
    // Offset: 0xE2FBAC
    ::UnityEngine::Vector2 UvBottomRight(float myTime, int myIconIndex);
    // public UnityEngine.Vector2 UvBottomLeft(System.Single myTime, System.Int32 myIconIndex)
    // Offset: 0xE2FC90
    ::UnityEngine::Vector2 UvBottomLeft(float myTime, int myIconIndex);
    // public UnityEngine.Vector2 UvMiddle(System.Single myTime, System.Int32 myIconIndex)
    // Offset: 0xE2FC94
    ::UnityEngine::Vector2 UvMiddle(float myTime, int myIconIndex);
    // private UnityEngine.Vector2 get_uvSize()
    // Offset: 0xE2F8A0
    ::UnityEngine::Vector2 get_uvSize();
    // private UnityEngine.Vector2 UvOffset(System.Single myTime, System.Int32 myIconIndex)
    // Offset: 0xE2F8E4
    ::UnityEngine::Vector2 UvOffset(float myTime, int myIconIndex);
    // private System.Void OnValidate()
    // Offset: 0xE2FDBC
    void OnValidate();
    // private System.Void FixColumnCount()
    // Offset: 0xE2FD8C
    void FixColumnCount();
    // public System.Void .ctor()
    // Offset: 0xE2FDEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMQuadData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMQuadData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMQuadData*, creationType>()));
    }
  }; // STMQuadData
  #pragma pack(pop)
  static check_size<sizeof(STMQuadData), 84 + sizeof(float)> __GlobalNamespace_STMQuadDataSizeCheck;
  static_assert(sizeof(STMQuadData) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::STMQuadData::get_TopLeftVert
// Il2CppName: get_TopLeftVert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMQuadData::*)()>(&GlobalNamespace::STMQuadData::get_TopLeftVert)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMQuadData*), "get_TopLeftVert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMQuadData::get_TopRightVert
// Il2CppName: get_TopRightVert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMQuadData::*)()>(&GlobalNamespace::STMQuadData::get_TopRightVert)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMQuadData*), "get_TopRightVert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMQuadData::get_BottomRightVert
// Il2CppName: get_BottomRightVert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMQuadData::*)()>(&GlobalNamespace::STMQuadData::get_BottomRightVert)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMQuadData*), "get_BottomRightVert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMQuadData::get_BottomLeftVert
// Il2CppName: get_BottomLeftVert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMQuadData::*)()>(&GlobalNamespace::STMQuadData::get_BottomLeftVert)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMQuadData*), "get_BottomLeftVert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMQuadData::get_Middle
// Il2CppName: get_Middle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMQuadData::*)()>(&GlobalNamespace::STMQuadData::get_Middle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMQuadData*), "get_Middle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMQuadData::UvTopLeft
// Il2CppName: UvTopLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (GlobalNamespace::STMQuadData::*)(float, int)>(&GlobalNamespace::STMQuadData::UvTopLeft)> {
  static const MethodInfo* get() {
    static auto* myTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* myIconIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMQuadData*), "UvTopLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myTime, myIconIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMQuadData::UvTopRight
// Il2CppName: UvTopRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (GlobalNamespace::STMQuadData::*)(float, int)>(&GlobalNamespace::STMQuadData::UvTopRight)> {
  static const MethodInfo* get() {
    static auto* myTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* myIconIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMQuadData*), "UvTopRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myTime, myIconIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMQuadData::UvBottomRight
// Il2CppName: UvBottomRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (GlobalNamespace::STMQuadData::*)(float, int)>(&GlobalNamespace::STMQuadData::UvBottomRight)> {
  static const MethodInfo* get() {
    static auto* myTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* myIconIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMQuadData*), "UvBottomRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myTime, myIconIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMQuadData::UvBottomLeft
// Il2CppName: UvBottomLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (GlobalNamespace::STMQuadData::*)(float, int)>(&GlobalNamespace::STMQuadData::UvBottomLeft)> {
  static const MethodInfo* get() {
    static auto* myTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* myIconIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMQuadData*), "UvBottomLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myTime, myIconIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMQuadData::UvMiddle
// Il2CppName: UvMiddle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (GlobalNamespace::STMQuadData::*)(float, int)>(&GlobalNamespace::STMQuadData::UvMiddle)> {
  static const MethodInfo* get() {
    static auto* myTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* myIconIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMQuadData*), "UvMiddle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myTime, myIconIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMQuadData::get_uvSize
// Il2CppName: get_uvSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (GlobalNamespace::STMQuadData::*)()>(&GlobalNamespace::STMQuadData::get_uvSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMQuadData*), "get_uvSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMQuadData::UvOffset
// Il2CppName: UvOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (GlobalNamespace::STMQuadData::*)(float, int)>(&GlobalNamespace::STMQuadData::UvOffset)> {
  static const MethodInfo* get() {
    static auto* myTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* myIconIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMQuadData*), "UvOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myTime, myIconIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMQuadData::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMQuadData::*)()>(&GlobalNamespace::STMQuadData::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMQuadData*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMQuadData::FixColumnCount
// Il2CppName: FixColumnCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMQuadData::*)()>(&GlobalNamespace::STMQuadData::FixColumnCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMQuadData*), "FixColumnCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMQuadData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
