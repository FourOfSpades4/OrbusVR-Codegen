// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GridGraph
  class GridGraph;
  // Forward declaring type: GridNode
  class GridNode;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ProceduralGridMover
  class ProceduralGridMover;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ProceduralGridMover);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ProceduralGridMover*, "", "ProceduralGridMover");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: ProceduralGridMover
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: ACD198
  class ProceduralGridMover : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ProceduralGridMover::$$c__DisplayClass12_0
    class $$c__DisplayClass12_0;
    // Nested type: ::GlobalNamespace::ProceduralGridMover::$UpdateGraphCoroutine$d__13
    class $UpdateGraphCoroutine$d__13;
    public:
    // public System.Single updateDistance
    // Size: 0x4
    // Offset: 0x18
    float updateDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: updateDistance and: target
    char __padding0[0x4] = {};
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean floodFill
    // Size: 0x1
    // Offset: 0x28
    bool floodFill;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: floodFill and: graph
    char __padding2[0x7] = {};
    // private Pathfinding.GridGraph graph
    // Size: 0x8
    // Offset: 0x30
    ::Pathfinding::GridGraph* graph;
    // Field size check
    static_assert(sizeof(::Pathfinding::GridGraph*) == 0x8);
    // private Pathfinding.GridNode[] tmp
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::Pathfinding::GridNode*> tmp;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::GridNode*>) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAD8A98
    // private System.Boolean <updatingGraph>k__BackingField
    // Size: 0x1
    // Offset: 0x40
    bool updatingGraph;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single updateDistance
    [[deprecated("Use field access instead!")]] float& dyn_updateDistance();
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // Get instance field reference: public System.Boolean floodFill
    [[deprecated("Use field access instead!")]] bool& dyn_floodFill();
    // Get instance field reference: private Pathfinding.GridGraph graph
    [[deprecated("Use field access instead!")]] ::Pathfinding::GridGraph*& dyn_graph();
    // Get instance field reference: private Pathfinding.GridNode[] tmp
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::GridNode*>& dyn_tmp();
    // Get instance field reference: private System.Boolean <updatingGraph>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$updatingGraph$k__BackingField();
    // public System.Boolean get_updatingGraph()
    // Offset: 0xE1D704
    bool get_updatingGraph();
    // private System.Void set_updatingGraph(System.Boolean value)
    // Offset: 0xE1D70C
    void set_updatingGraph(bool value);
    // public System.Void Start()
    // Offset: 0xE1D718
    void Start();
    // private System.Void Update()
    // Offset: 0xE1D9A4
    void Update();
    // private UnityEngine.Vector3 PointToGraphSpace(UnityEngine.Vector3 p)
    // Offset: 0xE1DA68
    ::UnityEngine::Vector3 PointToGraphSpace(::UnityEngine::Vector3 p);
    // public System.Void UpdateGraph()
    // Offset: 0xE1D87C
    void UpdateGraph();
    // private System.Collections.IEnumerator UpdateGraphCoroutine()
    // Offset: 0xE1DAC8
    ::System::Collections::IEnumerator* UpdateGraphCoroutine();
    // public System.Void .ctor()
    // Offset: 0xE1DB68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProceduralGridMover* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProceduralGridMover::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProceduralGridMover*, creationType>()));
    }
  }; // ProceduralGridMover
  #pragma pack(pop)
  static check_size<sizeof(ProceduralGridMover), 64 + sizeof(bool)> __GlobalNamespace_ProceduralGridMoverSizeCheck;
  static_assert(sizeof(ProceduralGridMover) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ProceduralGridMover::get_updatingGraph
// Il2CppName: get_updatingGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ProceduralGridMover::*)()>(&GlobalNamespace::ProceduralGridMover::get_updatingGraph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProceduralGridMover*), "get_updatingGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProceduralGridMover::set_updatingGraph
// Il2CppName: set_updatingGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ProceduralGridMover::*)(bool)>(&GlobalNamespace::ProceduralGridMover::set_updatingGraph)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProceduralGridMover*), "set_updatingGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProceduralGridMover::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ProceduralGridMover::*)()>(&GlobalNamespace::ProceduralGridMover::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProceduralGridMover*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProceduralGridMover::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ProceduralGridMover::*)()>(&GlobalNamespace::ProceduralGridMover::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProceduralGridMover*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProceduralGridMover::PointToGraphSpace
// Il2CppName: PointToGraphSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::ProceduralGridMover::*)(::UnityEngine::Vector3)>(&GlobalNamespace::ProceduralGridMover::PointToGraphSpace)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProceduralGridMover*), "PointToGraphSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProceduralGridMover::UpdateGraph
// Il2CppName: UpdateGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ProceduralGridMover::*)()>(&GlobalNamespace::ProceduralGridMover::UpdateGraph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProceduralGridMover*), "UpdateGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProceduralGridMover::UpdateGraphCoroutine
// Il2CppName: UpdateGraphCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::ProceduralGridMover::*)()>(&GlobalNamespace::ProceduralGridMover::UpdateGraphCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProceduralGridMover*), "UpdateGraphCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProceduralGridMover::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
