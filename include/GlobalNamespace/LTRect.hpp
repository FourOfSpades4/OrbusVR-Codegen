// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: LTGUI/Element_Type
#include "GlobalNamespace/LTGUI_Element_Type.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GUIStyle
  class GUIStyle;
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LTRect
  class LTRect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LTRect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LTRect*, "", "LTRect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: LTRect
  // [TokenAttribute] Offset: FFFFFFFF
  class LTRect : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Rect _rect
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Rect rect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // public System.Single alpha
    // Size: 0x4
    // Offset: 0x20
    float alpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rotation
    // Size: 0x4
    // Offset: 0x24
    float rotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector2 pivot
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Vector2 pivot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 margin
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Vector2 margin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Rect relativeRect
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Rect relativeRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // public System.Boolean rotateEnabled
    // Size: 0x1
    // Offset: 0x48
    bool rotateEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean rotateFinished
    // Size: 0x1
    // Offset: 0x49
    bool rotateFinished;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean alphaEnabled
    // Size: 0x1
    // Offset: 0x4A
    bool alphaEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: alphaEnabled and: labelStr
    char __padding8[0x5] = {};
    // public System.String labelStr
    // Size: 0x8
    // Offset: 0x50
    ::StringW labelStr;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public LTGUI/Element_Type type
    // Size: 0x4
    // Offset: 0x58
    ::GlobalNamespace::LTGUI::Element_Type type;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LTGUI::Element_Type) == 0x4);
    // Padding between fields: type and: style
    char __padding10[0x4] = {};
    // public UnityEngine.GUIStyle style
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GUIStyle* style;
    // Field size check
    static_assert(sizeof(::UnityEngine::GUIStyle*) == 0x8);
    // public System.Boolean useColor
    // Size: 0x1
    // Offset: 0x68
    bool useColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useColor and: color
    char __padding12[0x3] = {};
    // public UnityEngine.Color color
    // Size: 0x10
    // Offset: 0x6C
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean fontScaleToFit
    // Size: 0x1
    // Offset: 0x7C
    bool fontScaleToFit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean useSimpleScale
    // Size: 0x1
    // Offset: 0x7D
    bool useSimpleScale;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean sizeByHeight
    // Size: 0x1
    // Offset: 0x7E
    bool sizeByHeight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sizeByHeight and: texture
    char __padding16[0x1] = {};
    // public UnityEngine.Texture texture
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Texture* texture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // private System.Int32 _id
    // Size: 0x4
    // Offset: 0x88
    int id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 counter
    // Size: 0x4
    // Offset: 0x8C
    int counter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static public System.Boolean colorTouched
    static bool _get_colorTouched();
    // Set static field: static public System.Boolean colorTouched
    static void _set_colorTouched(bool value);
    // Get instance field reference: public UnityEngine.Rect _rect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn__rect();
    // Get instance field reference: public System.Single alpha
    [[deprecated("Use field access instead!")]] float& dyn_alpha();
    // Get instance field reference: public System.Single rotation
    [[deprecated("Use field access instead!")]] float& dyn_rotation();
    // Get instance field reference: public UnityEngine.Vector2 pivot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_pivot();
    // Get instance field reference: public UnityEngine.Vector2 margin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_margin();
    // Get instance field reference: public UnityEngine.Rect relativeRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_relativeRect();
    // Get instance field reference: public System.Boolean rotateEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_rotateEnabled();
    // Get instance field reference: public System.Boolean rotateFinished
    [[deprecated("Use field access instead!")]] bool& dyn_rotateFinished();
    // Get instance field reference: public System.Boolean alphaEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_alphaEnabled();
    // Get instance field reference: public System.String labelStr
    [[deprecated("Use field access instead!")]] ::StringW& dyn_labelStr();
    // Get instance field reference: public LTGUI/Element_Type type
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LTGUI::Element_Type& dyn_type();
    // Get instance field reference: public UnityEngine.GUIStyle style
    [[deprecated("Use field access instead!")]] ::UnityEngine::GUIStyle*& dyn_style();
    // Get instance field reference: public System.Boolean useColor
    [[deprecated("Use field access instead!")]] bool& dyn_useColor();
    // Get instance field reference: public UnityEngine.Color color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_color();
    // Get instance field reference: public System.Boolean fontScaleToFit
    [[deprecated("Use field access instead!")]] bool& dyn_fontScaleToFit();
    // Get instance field reference: public System.Boolean useSimpleScale
    [[deprecated("Use field access instead!")]] bool& dyn_useSimpleScale();
    // Get instance field reference: public System.Boolean sizeByHeight
    [[deprecated("Use field access instead!")]] bool& dyn_sizeByHeight();
    // Get instance field reference: public UnityEngine.Texture texture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_texture();
    // Get instance field reference: private System.Int32 _id
    [[deprecated("Use field access instead!")]] int& dyn__id();
    // Get instance field reference: public System.Int32 counter
    [[deprecated("Use field access instead!")]] int& dyn_counter();
    // public System.Void .ctor()
    // Offset: 0x1ABEC30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LTRect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LTRect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LTRect*, creationType>()));
    }
    // public System.Void .ctor(UnityEngine.Rect rect)
    // Offset: 0x1ABBE24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LTRect* New_ctor(::UnityEngine::Rect rect) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LTRect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LTRect*, creationType>(rect)));
    }
    // public System.Void .ctor(System.Single x, System.Single y, System.Single width, System.Single height)
    // Offset: 0x1ABED8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LTRect* New_ctor(float x, float y, float width, float height) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LTRect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LTRect*, creationType>(x, y, width, height)));
    }
    // public System.Void .ctor(System.Single x, System.Single y, System.Single width, System.Single height, System.Single alpha)
    // Offset: 0x1ABEE7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LTRect* New_ctor(float x, float y, float width, float height, float alpha) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LTRect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LTRect*, creationType>(x, y, width, height, alpha)));
    }
    // public System.Void .ctor(System.Single x, System.Single y, System.Single width, System.Single height, System.Single alpha, System.Single rotation)
    // Offset: 0x1ABEF7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LTRect* New_ctor(float x, float y, float width, float height, float alpha, float rotation) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LTRect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LTRect*, creationType>(x, y, width, height, alpha, rotation)));
    }
    // public System.Boolean get_hasInitiliazed()
    // Offset: 0x1ABDC04
    bool get_hasInitiliazed();
    // public System.Int32 get_id()
    // Offset: 0x1ABE44C
    int get_id();
    // public System.Void setId(System.Int32 id, System.Int32 counter)
    // Offset: 0x1ABE458
    void setId(int id, int counter);
    // public System.Void reset()
    // Offset: 0x1ABED08
    void reset();
    // public System.Void resetForRotation()
    // Offset: 0x1ABB390
    void resetForRotation();
    // public System.Single get_x()
    // Offset: 0x1ABF094
    float get_x();
    // public System.Void set_x(System.Single value)
    // Offset: 0x1ABF0A0
    void set_x(float value);
    // public System.Single get_y()
    // Offset: 0x1ABF0AC
    float get_y();
    // public System.Void set_y(System.Single value)
    // Offset: 0x1ABF0B8
    void set_y(float value);
    // public System.Single get_width()
    // Offset: 0x1ABF0C4
    float get_width();
    // public System.Void set_width(System.Single value)
    // Offset: 0x1ABF0D0
    void set_width(float value);
    // public System.Single get_height()
    // Offset: 0x1ABF0DC
    float get_height();
    // public System.Void set_height(System.Single value)
    // Offset: 0x1ABF0E8
    void set_height(float value);
    // public UnityEngine.Rect get_rect()
    // Offset: 0x1ABB168
    ::UnityEngine::Rect get_rect();
    // public System.Void set_rect(UnityEngine.Rect value)
    // Offset: 0x1ABF0F4
    void set_rect(::UnityEngine::Rect value);
    // public LTRect setStyle(UnityEngine.GUIStyle style)
    // Offset: 0x1ABF100
    ::GlobalNamespace::LTRect* setStyle(::UnityEngine::GUIStyle* style);
    // public LTRect setFontScaleToFit(System.Boolean fontScaleToFit)
    // Offset: 0x1ABF108
    ::GlobalNamespace::LTRect* setFontScaleToFit(bool fontScaleToFit);
    // public LTRect setColor(UnityEngine.Color color)
    // Offset: 0x1ABF114
    ::GlobalNamespace::LTRect* setColor(::UnityEngine::Color color);
    // public LTRect setAlpha(System.Single alpha)
    // Offset: 0x1ABF128
    ::GlobalNamespace::LTRect* setAlpha(float alpha);
    // public LTRect setLabel(System.String str)
    // Offset: 0x1ABF130
    ::GlobalNamespace::LTRect* setLabel(::StringW str);
    // public LTRect setUseSimpleScale(System.Boolean useSimpleScale, UnityEngine.Rect relativeRect)
    // Offset: 0x1ABF138
    ::GlobalNamespace::LTRect* setUseSimpleScale(bool useSimpleScale, ::UnityEngine::Rect relativeRect);
    // public LTRect setUseSimpleScale(System.Boolean useSimpleScale)
    // Offset: 0x1ABF14C
    ::GlobalNamespace::LTRect* setUseSimpleScale(bool useSimpleScale);
    // public LTRect setSizeByHeight(System.Boolean sizeByHeight)
    // Offset: 0x1ABF1C8
    ::GlobalNamespace::LTRect* setSizeByHeight(bool sizeByHeight);
    // public override System.String ToString()
    // Offset: 0x1ABF1D4
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // LTRect
  #pragma pack(pop)
  static check_size<sizeof(LTRect), 140 + sizeof(int)> __GlobalNamespace_LTRectSizeCheck;
  static_assert(sizeof(LTRect) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LTRect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LTRect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LTRect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LTRect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LTRect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LTRect::get_hasInitiliazed
// Il2CppName: get_hasInitiliazed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LTRect::*)()>(&GlobalNamespace::LTRect::get_hasInitiliazed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "get_hasInitiliazed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LTRect::*)()>(&GlobalNamespace::LTRect::get_id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::setId
// Il2CppName: setId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTRect::*)(int, int)>(&GlobalNamespace::LTRect::setId)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* counter = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "setId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, counter});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::reset
// Il2CppName: reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTRect::*)()>(&GlobalNamespace::LTRect::reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::resetForRotation
// Il2CppName: resetForRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTRect::*)()>(&GlobalNamespace::LTRect::resetForRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "resetForRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::get_x
// Il2CppName: get_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LTRect::*)()>(&GlobalNamespace::LTRect::get_x)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "get_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::set_x
// Il2CppName: set_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTRect::*)(float)>(&GlobalNamespace::LTRect::set_x)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "set_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::get_y
// Il2CppName: get_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LTRect::*)()>(&GlobalNamespace::LTRect::get_y)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "get_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::set_y
// Il2CppName: set_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTRect::*)(float)>(&GlobalNamespace::LTRect::set_y)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "set_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::get_width
// Il2CppName: get_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LTRect::*)()>(&GlobalNamespace::LTRect::get_width)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "get_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::set_width
// Il2CppName: set_width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTRect::*)(float)>(&GlobalNamespace::LTRect::set_width)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "set_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::get_height
// Il2CppName: get_height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LTRect::*)()>(&GlobalNamespace::LTRect::get_height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "get_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::set_height
// Il2CppName: set_height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTRect::*)(float)>(&GlobalNamespace::LTRect::set_height)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "set_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::get_rect
// Il2CppName: get_rect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (GlobalNamespace::LTRect::*)()>(&GlobalNamespace::LTRect::get_rect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "get_rect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::set_rect
// Il2CppName: set_rect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTRect::*)(::UnityEngine::Rect)>(&GlobalNamespace::LTRect::set_rect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "set_rect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::setStyle
// Il2CppName: setStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTRect* (GlobalNamespace::LTRect::*)(::UnityEngine::GUIStyle*)>(&GlobalNamespace::LTRect::setStyle)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("UnityEngine", "GUIStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "setStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::setFontScaleToFit
// Il2CppName: setFontScaleToFit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTRect* (GlobalNamespace::LTRect::*)(bool)>(&GlobalNamespace::LTRect::setFontScaleToFit)> {
  static const MethodInfo* get() {
    static auto* fontScaleToFit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "setFontScaleToFit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontScaleToFit});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::setColor
// Il2CppName: setColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTRect* (GlobalNamespace::LTRect::*)(::UnityEngine::Color)>(&GlobalNamespace::LTRect::setColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "setColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::setAlpha
// Il2CppName: setAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTRect* (GlobalNamespace::LTRect::*)(float)>(&GlobalNamespace::LTRect::setAlpha)> {
  static const MethodInfo* get() {
    static auto* alpha = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "setAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alpha});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::setLabel
// Il2CppName: setLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTRect* (GlobalNamespace::LTRect::*)(::StringW)>(&GlobalNamespace::LTRect::setLabel)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "setLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::setUseSimpleScale
// Il2CppName: setUseSimpleScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTRect* (GlobalNamespace::LTRect::*)(bool, ::UnityEngine::Rect)>(&GlobalNamespace::LTRect::setUseSimpleScale)> {
  static const MethodInfo* get() {
    static auto* useSimpleScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* relativeRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "setUseSimpleScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useSimpleScale, relativeRect});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::setUseSimpleScale
// Il2CppName: setUseSimpleScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTRect* (GlobalNamespace::LTRect::*)(bool)>(&GlobalNamespace::LTRect::setUseSimpleScale)> {
  static const MethodInfo* get() {
    static auto* useSimpleScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "setUseSimpleScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useSimpleScale});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::setSizeByHeight
// Il2CppName: setSizeByHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTRect* (GlobalNamespace::LTRect::*)(bool)>(&GlobalNamespace::LTRect::setSizeByHeight)> {
  static const MethodInfo* get() {
    static auto* sizeByHeight = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "setSizeByHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sizeByHeight});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTRect::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::LTRect::*)()>(&GlobalNamespace::LTRect::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTRect*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
