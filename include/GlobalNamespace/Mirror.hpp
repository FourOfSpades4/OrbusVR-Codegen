// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Camera
  class Camera;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Mirror
  class Mirror;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Mirror);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Mirror*, "", "Mirror");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Mirror
  // [TokenAttribute] Offset: FFFFFFFF
  class Mirror : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Int32 captureWidth
    // Size: 0x4
    // Offset: 0x18
    int captureWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 captureHeight
    // Size: 0x4
    // Offset: 0x1C
    int captureHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Rect rect
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Rect rect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private UnityEngine.RenderTexture renderTexture
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::RenderTexture* renderTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.MeshRenderer mirror
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::MeshRenderer* mirror;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.Camera myCamera
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Camera* myCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 captureWidth
    [[deprecated("Use field access instead!")]] int& dyn_captureWidth();
    // Get instance field reference: public System.Int32 captureHeight
    [[deprecated("Use field access instead!")]] int& dyn_captureHeight();
    // Get instance field reference: private UnityEngine.Rect rect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_rect();
    // Get instance field reference: private UnityEngine.RenderTexture renderTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_renderTexture();
    // Get instance field reference: private UnityEngine.MeshRenderer mirror
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_mirror();
    // Get instance field reference: private UnityEngine.Camera myCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_myCamera();
    // private System.Void Start()
    // Offset: 0xF50B9C
    void Start();
    // private System.Void Update()
    // Offset: 0xF50CE0
    void Update();
    // public System.Void .ctor()
    // Offset: 0xF50D38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Mirror* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Mirror::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Mirror*, creationType>()));
    }
  }; // Mirror
  #pragma pack(pop)
  static check_size<sizeof(Mirror), 64 + sizeof(::UnityEngine::Camera*)> __GlobalNamespace_MirrorSizeCheck;
  static_assert(sizeof(Mirror) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Mirror::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Mirror::*)()>(&GlobalNamespace::Mirror::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Mirror*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Mirror::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Mirror::*)()>(&GlobalNamespace::Mirror::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Mirror*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Mirror::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
