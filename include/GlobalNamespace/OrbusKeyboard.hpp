// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: PlayerAvatar
  class PlayerAvatar;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OrbusKeyboard
  class OrbusKeyboard;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OrbusKeyboard);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OrbusKeyboard*, "", "OrbusKeyboard");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: OrbusKeyboard
  // [TokenAttribute] Offset: FFFFFFFF
  class OrbusKeyboard : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.String currentText
    // Size: 0x8
    // Offset: 0x18
    ::StringW currentText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean minimalMode
    // Size: 0x1
    // Offset: 0x20
    bool minimalMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: minimalMode and: text
    char __padding1[0x7] = {};
    // private System.String text
    // Size: 0x8
    // Offset: 0x28
    ::StringW text;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private MagicalActual.PlayerAvatar myAvatar
    // Size: 0x8
    // Offset: 0x30
    ::MagicalActual::PlayerAvatar* myAvatar;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerAvatar*) == 0x8);
    // private System.Action`1<System.String> currentCallback
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_1<::StringW>* currentCallback;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.Boolean keyboardShowing
    static bool _get_keyboardShowing();
    // Set static field: static private System.Boolean keyboardShowing
    static void _set_keyboardShowing(bool value);
    // Get static field: static private OrbusKeyboard activeKeyboard
    static ::GlobalNamespace::OrbusKeyboard* _get_activeKeyboard();
    // Set static field: static private OrbusKeyboard activeKeyboard
    static void _set_activeKeyboard(::GlobalNamespace::OrbusKeyboard* value);
    // Get instance field reference: public System.String currentText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currentText();
    // Get instance field reference: public System.Boolean minimalMode
    [[deprecated("Use field access instead!")]] bool& dyn_minimalMode();
    // Get instance field reference: private System.String text
    [[deprecated("Use field access instead!")]] ::StringW& dyn_text();
    // Get instance field reference: private MagicalActual.PlayerAvatar myAvatar
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerAvatar*& dyn_myAvatar();
    // Get instance field reference: private System.Action`1<System.String> currentCallback
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_currentCallback();
    // private System.Void Start()
    // Offset: 0xD859F4
    void Start();
    // private System.Void OnEnable()
    // Offset: 0xD85A4C
    void OnEnable();
    // private System.Void OnKeyboard(System.Object[] args)
    // Offset: 0xD85A50
    void OnKeyboard(::ArrayW<::Il2CppObject*> args);
    // private System.Void OnKeyboardClosed(System.Object[] args)
    // Offset: 0xD85FA4
    void OnKeyboardClosed(::ArrayW<::Il2CppObject*> args);
    // private System.Void closeKeyboard()
    // Offset: 0xD85EE4
    void closeKeyboard();
    // public System.Void ShowKeyboard(System.Action`1<System.String> finalCallback)
    // Offset: 0xD8612C
    void ShowKeyboard(::System::Action_1<::StringW>* finalCallback);
    // public System.Void HideKeyboard()
    // Offset: 0xD862E0
    void HideKeyboard();
    // private System.Void Update()
    // Offset: 0xD862E4
    void Update();
    // public System.Void .ctor()
    // Offset: 0xD862E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrbusKeyboard* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrbusKeyboard::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrbusKeyboard*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xD86344
    static void _cctor();
    // private System.Void <OnKeyboardClosed>b__10_0()
    // Offset: 0xD86348
    void $OnKeyboardClosed$b__10_0();
  }; // OrbusKeyboard
  #pragma pack(pop)
  static check_size<sizeof(OrbusKeyboard), 56 + sizeof(::System::Action_1<::StringW>*)> __GlobalNamespace_OrbusKeyboardSizeCheck;
  static_assert(sizeof(OrbusKeyboard) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OrbusKeyboard::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusKeyboard::*)()>(&GlobalNamespace::OrbusKeyboard::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusKeyboard*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusKeyboard::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusKeyboard::*)()>(&GlobalNamespace::OrbusKeyboard::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusKeyboard*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusKeyboard::OnKeyboard
// Il2CppName: OnKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusKeyboard::*)(::ArrayW<::Il2CppObject*>)>(&GlobalNamespace::OrbusKeyboard::OnKeyboard)> {
  static const MethodInfo* get() {
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusKeyboard*), "OnKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusKeyboard::OnKeyboardClosed
// Il2CppName: OnKeyboardClosed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusKeyboard::*)(::ArrayW<::Il2CppObject*>)>(&GlobalNamespace::OrbusKeyboard::OnKeyboardClosed)> {
  static const MethodInfo* get() {
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusKeyboard*), "OnKeyboardClosed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusKeyboard::closeKeyboard
// Il2CppName: closeKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusKeyboard::*)()>(&GlobalNamespace::OrbusKeyboard::closeKeyboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusKeyboard*), "closeKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusKeyboard::ShowKeyboard
// Il2CppName: ShowKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusKeyboard::*)(::System::Action_1<::StringW>*)>(&GlobalNamespace::OrbusKeyboard::ShowKeyboard)> {
  static const MethodInfo* get() {
    static auto* finalCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusKeyboard*), "ShowKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finalCallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusKeyboard::HideKeyboard
// Il2CppName: HideKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusKeyboard::*)()>(&GlobalNamespace::OrbusKeyboard::HideKeyboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusKeyboard*), "HideKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusKeyboard::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusKeyboard::*)()>(&GlobalNamespace::OrbusKeyboard::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusKeyboard*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusKeyboard::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OrbusKeyboard::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OrbusKeyboard::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusKeyboard*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusKeyboard::$OnKeyboardClosed$b__10_0
// Il2CppName: <OnKeyboardClosed>b__10_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusKeyboard::*)()>(&GlobalNamespace::OrbusKeyboard::$OnKeyboardClosed$b__10_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusKeyboard*), "<OnKeyboardClosed>b__10_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
