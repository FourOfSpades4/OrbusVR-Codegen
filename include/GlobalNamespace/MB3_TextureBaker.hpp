// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MB3_MeshBakerRoot
#include "GlobalNamespace/MB3_MeshBakerRoot.hpp"
// Including type: DigitalOpus.MB.Core.MB2_LogLevel
#include "DigitalOpus/MB/Core/MB2_LogLevel.hpp"
// Including type: DigitalOpus.MB.Core.MB2_PackingAlgorithmEnum
#include "DigitalOpus/MB/Core/MB2_PackingAlgorithmEnum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MB2_TextureBakeResults
  class MB2_TextureBakeResults;
  // Forward declaring type: MB_MultiMaterial
  class MB_MultiMaterial;
  // Forward declaring type: MB_AtlasesAndRects
  class MB_AtlasesAndRects;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: ShaderTextureProperty
  class ShaderTextureProperty;
  // Forward declaring type: ProgressUpdateDelegate
  class ProgressUpdateDelegate;
  // Forward declaring type: MB2_EditorMethodsInterface
  class MB2_EditorMethodsInterface;
  // Forward declaring type: MB3_TextureCombiner
  class MB3_TextureCombiner;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MB3_TextureBaker
  class MB3_TextureBaker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MB3_TextureBaker);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MB3_TextureBaker*, "", "MB3_TextureBaker");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: MB3_TextureBaker
  // [TokenAttribute] Offset: FFFFFFFF
  class MB3_TextureBaker : public ::GlobalNamespace::MB3_MeshBakerRoot {
    public:
    // Nested type: ::GlobalNamespace::MB3_TextureBaker::OnCombinedTexturesCoroutineSuccess
    class OnCombinedTexturesCoroutineSuccess;
    // Nested type: ::GlobalNamespace::MB3_TextureBaker::OnCombinedTexturesCoroutineFail
    class OnCombinedTexturesCoroutineFail;
    // Nested type: ::GlobalNamespace::MB3_TextureBaker::CreateAtlasesCoroutineResult
    class CreateAtlasesCoroutineResult;
    // Nested type: ::GlobalNamespace::MB3_TextureBaker::$CreateAtlasesCoroutine$d__94
    class $CreateAtlasesCoroutine$d__94;
    public:
    // public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    // Size: 0x4
    // Offset: 0x24
    ::DigitalOpus::MB::Core::MB2_LogLevel LOG_LEVEL;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_LogLevel) == 0x4);
    // protected MB2_TextureBakeResults _textureBakeResults
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::MB2_TextureBakeResults* textureBakeResults;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MB2_TextureBakeResults*) == 0x8);
    // protected System.Int32 _atlasPadding
    // Size: 0x4
    // Offset: 0x30
    int atlasPadding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 _maxAtlasSize
    // Size: 0x4
    // Offset: 0x34
    int maxAtlasSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean _useMaxAtlasWidthOverride
    // Size: 0x1
    // Offset: 0x38
    bool useMaxAtlasWidthOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useMaxAtlasWidthOverride and: maxAtlasWidthOverride
    char __padding4[0x3] = {};
    // protected System.Int32 _maxAtlasWidthOverride
    // Size: 0x4
    // Offset: 0x3C
    int maxAtlasWidthOverride;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean _useMaxAtlasHeightOverride
    // Size: 0x1
    // Offset: 0x40
    bool useMaxAtlasHeightOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useMaxAtlasHeightOverride and: maxAtlasHeightOverride
    char __padding6[0x3] = {};
    // protected System.Int32 _maxAtlasHeightOverride
    // Size: 0x4
    // Offset: 0x44
    int maxAtlasHeightOverride;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean _resizePowerOfTwoTextures
    // Size: 0x1
    // Offset: 0x48
    bool resizePowerOfTwoTextures;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _fixOutOfBoundsUVs
    // Size: 0x1
    // Offset: 0x49
    bool fixOutOfBoundsUVs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fixOutOfBoundsUVs and: maxTilingBakeSize
    char __padding9[0x2] = {};
    // protected System.Int32 _maxTilingBakeSize
    // Size: 0x4
    // Offset: 0x4C
    int maxTilingBakeSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected DigitalOpus.MB.Core.MB2_PackingAlgorithmEnum _packingAlgorithm
    // Size: 0x4
    // Offset: 0x50
    ::DigitalOpus::MB::Core::MB2_PackingAlgorithmEnum packingAlgorithm;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_PackingAlgorithmEnum) == 0x4);
    // protected System.Boolean _meshBakerTexturePackerForcePowerOfTwo
    // Size: 0x1
    // Offset: 0x54
    bool meshBakerTexturePackerForcePowerOfTwo;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: meshBakerTexturePackerForcePowerOfTwo and: customShaderProperties
    char __padding12[0x3] = {};
    // protected System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> _customShaderProperties
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* customShaderProperties;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*) == 0x8);
    // protected System.Collections.Generic.List`1<System.String> _customShaderPropNames_Depricated
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::StringW>* customShaderPropNames_Depricated;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // protected System.Boolean _doMultiMaterial
    // Size: 0x1
    // Offset: 0x68
    bool doMultiMaterial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _doMultiMaterialSplitAtlasesIfTooBig
    // Size: 0x1
    // Offset: 0x69
    bool doMultiMaterialSplitAtlasesIfTooBig;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _doMultiMaterialSplitAtlasesIfOBUVs
    // Size: 0x1
    // Offset: 0x6A
    bool doMultiMaterialSplitAtlasesIfOBUVs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: doMultiMaterialSplitAtlasesIfOBUVs and: resultMaterial
    char __padding17[0x5] = {};
    // protected UnityEngine.Material _resultMaterial
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Material* resultMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // protected System.Boolean _considerNonTextureProperties
    // Size: 0x1
    // Offset: 0x78
    bool considerNonTextureProperties;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _doSuggestTreatment
    // Size: 0x1
    // Offset: 0x79
    bool doSuggestTreatment;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: doSuggestTreatment and: coroutineResult
    char __padding20[0x6] = {};
    // private MB3_TextureBaker/CreateAtlasesCoroutineResult _coroutineResult
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::MB3_TextureBaker::CreateAtlasesCoroutineResult* coroutineResult;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MB3_TextureBaker::CreateAtlasesCoroutineResult*) == 0x8);
    // public MB_MultiMaterial[] resultMaterials
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::GlobalNamespace::MB_MultiMaterial*> resultMaterials;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MB_MultiMaterial*>) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> objsToMesh
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* objsToMesh;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // public MB3_TextureBaker/OnCombinedTexturesCoroutineSuccess onBuiltAtlasesSuccess
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::MB3_TextureBaker::OnCombinedTexturesCoroutineSuccess* onBuiltAtlasesSuccess;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MB3_TextureBaker::OnCombinedTexturesCoroutineSuccess*) == 0x8);
    // public MB3_TextureBaker/OnCombinedTexturesCoroutineFail onBuiltAtlasesFail
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::MB3_TextureBaker::OnCombinedTexturesCoroutineFail* onBuiltAtlasesFail;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MB3_TextureBaker::OnCombinedTexturesCoroutineFail*) == 0x8);
    // public MB_AtlasesAndRects[] OnCombinedTexturesCoroutineAtlasesAndRects
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*> OnCombinedTexturesCoroutineAtlasesAndRects;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*>) == 0x8);
    public:
    // Get instance field reference: public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_LogLevel& dyn_LOG_LEVEL();
    // Get instance field reference: protected MB2_TextureBakeResults _textureBakeResults
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MB2_TextureBakeResults*& dyn__textureBakeResults();
    // Get instance field reference: protected System.Int32 _atlasPadding
    [[deprecated("Use field access instead!")]] int& dyn__atlasPadding();
    // Get instance field reference: protected System.Int32 _maxAtlasSize
    [[deprecated("Use field access instead!")]] int& dyn__maxAtlasSize();
    // Get instance field reference: protected System.Boolean _useMaxAtlasWidthOverride
    [[deprecated("Use field access instead!")]] bool& dyn__useMaxAtlasWidthOverride();
    // Get instance field reference: protected System.Int32 _maxAtlasWidthOverride
    [[deprecated("Use field access instead!")]] int& dyn__maxAtlasWidthOverride();
    // Get instance field reference: protected System.Boolean _useMaxAtlasHeightOverride
    [[deprecated("Use field access instead!")]] bool& dyn__useMaxAtlasHeightOverride();
    // Get instance field reference: protected System.Int32 _maxAtlasHeightOverride
    [[deprecated("Use field access instead!")]] int& dyn__maxAtlasHeightOverride();
    // Get instance field reference: protected System.Boolean _resizePowerOfTwoTextures
    [[deprecated("Use field access instead!")]] bool& dyn__resizePowerOfTwoTextures();
    // Get instance field reference: protected System.Boolean _fixOutOfBoundsUVs
    [[deprecated("Use field access instead!")]] bool& dyn__fixOutOfBoundsUVs();
    // Get instance field reference: protected System.Int32 _maxTilingBakeSize
    [[deprecated("Use field access instead!")]] int& dyn__maxTilingBakeSize();
    // Get instance field reference: protected DigitalOpus.MB.Core.MB2_PackingAlgorithmEnum _packingAlgorithm
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_PackingAlgorithmEnum& dyn__packingAlgorithm();
    // Get instance field reference: protected System.Boolean _meshBakerTexturePackerForcePowerOfTwo
    [[deprecated("Use field access instead!")]] bool& dyn__meshBakerTexturePackerForcePowerOfTwo();
    // Get instance field reference: protected System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> _customShaderProperties
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*& dyn__customShaderProperties();
    // Get instance field reference: protected System.Collections.Generic.List`1<System.String> _customShaderPropNames_Depricated
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn__customShaderPropNames_Depricated();
    // Get instance field reference: protected System.Boolean _doMultiMaterial
    [[deprecated("Use field access instead!")]] bool& dyn__doMultiMaterial();
    // Get instance field reference: protected System.Boolean _doMultiMaterialSplitAtlasesIfTooBig
    [[deprecated("Use field access instead!")]] bool& dyn__doMultiMaterialSplitAtlasesIfTooBig();
    // Get instance field reference: protected System.Boolean _doMultiMaterialSplitAtlasesIfOBUVs
    [[deprecated("Use field access instead!")]] bool& dyn__doMultiMaterialSplitAtlasesIfOBUVs();
    // Get instance field reference: protected UnityEngine.Material _resultMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__resultMaterial();
    // Get instance field reference: protected System.Boolean _considerNonTextureProperties
    [[deprecated("Use field access instead!")]] bool& dyn__considerNonTextureProperties();
    // Get instance field reference: protected System.Boolean _doSuggestTreatment
    [[deprecated("Use field access instead!")]] bool& dyn__doSuggestTreatment();
    // Get instance field reference: private MB3_TextureBaker/CreateAtlasesCoroutineResult _coroutineResult
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MB3_TextureBaker::CreateAtlasesCoroutineResult*& dyn__coroutineResult();
    // Get instance field reference: public MB_MultiMaterial[] resultMaterials
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MB_MultiMaterial*>& dyn_resultMaterials();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> objsToMesh
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_objsToMesh();
    // Get instance field reference: public MB3_TextureBaker/OnCombinedTexturesCoroutineSuccess onBuiltAtlasesSuccess
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MB3_TextureBaker::OnCombinedTexturesCoroutineSuccess*& dyn_onBuiltAtlasesSuccess();
    // Get instance field reference: public MB3_TextureBaker/OnCombinedTexturesCoroutineFail onBuiltAtlasesFail
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MB3_TextureBaker::OnCombinedTexturesCoroutineFail*& dyn_onBuiltAtlasesFail();
    // Get instance field reference: public MB_AtlasesAndRects[] OnCombinedTexturesCoroutineAtlasesAndRects
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*>& dyn_OnCombinedTexturesCoroutineAtlasesAndRects();
    // public System.Int32 get_atlasPadding()
    // Offset: 0x19F309C
    int get_atlasPadding();
    // public System.Void set_atlasPadding(System.Int32 value)
    // Offset: 0x19F30A4
    void set_atlasPadding(int value);
    // public System.Int32 get_maxAtlasSize()
    // Offset: 0x19F30AC
    int get_maxAtlasSize();
    // public System.Void set_maxAtlasSize(System.Int32 value)
    // Offset: 0x19F30B4
    void set_maxAtlasSize(int value);
    // public System.Boolean get_useMaxAtlasWidthOverride()
    // Offset: 0x19F30BC
    bool get_useMaxAtlasWidthOverride();
    // public System.Void set_useMaxAtlasWidthOverride(System.Boolean value)
    // Offset: 0x19F30C4
    void set_useMaxAtlasWidthOverride(bool value);
    // public System.Int32 get_maxAtlasWidthOverride()
    // Offset: 0x19F30D0
    int get_maxAtlasWidthOverride();
    // public System.Void set_maxAtlasWidthOverride(System.Int32 value)
    // Offset: 0x19F30D8
    void set_maxAtlasWidthOverride(int value);
    // public System.Boolean get_useMaxAtlasHeightOverride()
    // Offset: 0x19F30E0
    bool get_useMaxAtlasHeightOverride();
    // public System.Void set_useMaxAtlasHeightOverride(System.Boolean value)
    // Offset: 0x19F30E8
    void set_useMaxAtlasHeightOverride(bool value);
    // public System.Int32 get_maxAtlasHeightOverride()
    // Offset: 0x19F30F4
    int get_maxAtlasHeightOverride();
    // public System.Void set_maxAtlasHeightOverride(System.Int32 value)
    // Offset: 0x19F30FC
    void set_maxAtlasHeightOverride(int value);
    // public System.Boolean get_resizePowerOfTwoTextures()
    // Offset: 0x19F3104
    bool get_resizePowerOfTwoTextures();
    // public System.Void set_resizePowerOfTwoTextures(System.Boolean value)
    // Offset: 0x19F310C
    void set_resizePowerOfTwoTextures(bool value);
    // public System.Boolean get_fixOutOfBoundsUVs()
    // Offset: 0x19F3118
    bool get_fixOutOfBoundsUVs();
    // public System.Void set_fixOutOfBoundsUVs(System.Boolean value)
    // Offset: 0x19F3120
    void set_fixOutOfBoundsUVs(bool value);
    // public System.Int32 get_maxTilingBakeSize()
    // Offset: 0x19F312C
    int get_maxTilingBakeSize();
    // public System.Void set_maxTilingBakeSize(System.Int32 value)
    // Offset: 0x19F3134
    void set_maxTilingBakeSize(int value);
    // public DigitalOpus.MB.Core.MB2_PackingAlgorithmEnum get_packingAlgorithm()
    // Offset: 0x19F313C
    ::DigitalOpus::MB::Core::MB2_PackingAlgorithmEnum get_packingAlgorithm();
    // public System.Void set_packingAlgorithm(DigitalOpus.MB.Core.MB2_PackingAlgorithmEnum value)
    // Offset: 0x19F3144
    void set_packingAlgorithm(::DigitalOpus::MB::Core::MB2_PackingAlgorithmEnum value);
    // public System.Boolean get_meshBakerTexturePackerForcePowerOfTwo()
    // Offset: 0x19F314C
    bool get_meshBakerTexturePackerForcePowerOfTwo();
    // public System.Void set_meshBakerTexturePackerForcePowerOfTwo(System.Boolean value)
    // Offset: 0x19F3154
    void set_meshBakerTexturePackerForcePowerOfTwo(bool value);
    // public System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> get_customShaderProperties()
    // Offset: 0x19F3160
    ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* get_customShaderProperties();
    // public System.Void set_customShaderProperties(System.Collections.Generic.List`1<DigitalOpus.MB.Core.ShaderTextureProperty> value)
    // Offset: 0x19F3168
    void set_customShaderProperties(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* value);
    // public System.Collections.Generic.List`1<System.String> get_customShaderPropNames()
    // Offset: 0x19F3170
    ::System::Collections::Generic::List_1<::StringW>* get_customShaderPropNames();
    // public System.Void set_customShaderPropNames(System.Collections.Generic.List`1<System.String> value)
    // Offset: 0x19F3178
    void set_customShaderPropNames(::System::Collections::Generic::List_1<::StringW>* value);
    // public System.Boolean get_doMultiMaterial()
    // Offset: 0x19F3180
    bool get_doMultiMaterial();
    // public System.Void set_doMultiMaterial(System.Boolean value)
    // Offset: 0x19F3188
    void set_doMultiMaterial(bool value);
    // public System.Boolean get_doMultiMaterialSplitAtlasesIfTooBig()
    // Offset: 0x19F3194
    bool get_doMultiMaterialSplitAtlasesIfTooBig();
    // public System.Void set_doMultiMaterialSplitAtlasesIfTooBig(System.Boolean value)
    // Offset: 0x19F319C
    void set_doMultiMaterialSplitAtlasesIfTooBig(bool value);
    // public System.Boolean get_doMultiMaterialSplitAtlasesIfOBUVs()
    // Offset: 0x19F31A8
    bool get_doMultiMaterialSplitAtlasesIfOBUVs();
    // public System.Void set_doMultiMaterialSplitAtlasesIfOBUVs(System.Boolean value)
    // Offset: 0x19F31B0
    void set_doMultiMaterialSplitAtlasesIfOBUVs(bool value);
    // public UnityEngine.Material get_resultMaterial()
    // Offset: 0x19F31BC
    ::UnityEngine::Material* get_resultMaterial();
    // public System.Void set_resultMaterial(UnityEngine.Material value)
    // Offset: 0x19F31C4
    void set_resultMaterial(::UnityEngine::Material* value);
    // public System.Boolean get_considerNonTextureProperties()
    // Offset: 0x19F31CC
    bool get_considerNonTextureProperties();
    // public System.Void set_considerNonTextureProperties(System.Boolean value)
    // Offset: 0x19F31D4
    void set_considerNonTextureProperties(bool value);
    // public System.Boolean get_doSuggestTreatment()
    // Offset: 0x19F31E0
    bool get_doSuggestTreatment();
    // public System.Void set_doSuggestTreatment(System.Boolean value)
    // Offset: 0x19F31E8
    void set_doSuggestTreatment(bool value);
    // public MB3_TextureBaker/CreateAtlasesCoroutineResult get_CoroutineResult()
    // Offset: 0x19F31F4
    ::GlobalNamespace::MB3_TextureBaker::CreateAtlasesCoroutineResult* get_CoroutineResult();
    // public MB_AtlasesAndRects[] CreateAtlases()
    // Offset: 0x19F3270
    ::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*> CreateAtlases();
    // public System.Collections.IEnumerator CreateAtlasesCoroutine(DigitalOpus.MB.Core.ProgressUpdateDelegate progressInfo, MB3_TextureBaker/CreateAtlasesCoroutineResult coroutineResult, System.Boolean saveAtlasesAsAssets, DigitalOpus.MB.Core.MB2_EditorMethodsInterface editorMethods, System.Single maxTimePerFrame)
    // Offset: 0x19F368C
    ::System::Collections::IEnumerator* CreateAtlasesCoroutine(::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, ::GlobalNamespace::MB3_TextureBaker::CreateAtlasesCoroutineResult* coroutineResult, bool saveAtlasesAsAssets, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* editorMethods, float maxTimePerFrame);
    // public MB_AtlasesAndRects[] CreateAtlases(DigitalOpus.MB.Core.ProgressUpdateDelegate progressInfo, System.Boolean saveAtlasesAsAssets, DigitalOpus.MB.Core.MB2_EditorMethodsInterface editorMethods)
    // Offset: 0x19F3280
    ::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*> CreateAtlases(::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, bool saveAtlasesAsAssets, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* editorMethods);
    // private System.Void unpackMat2RectMap(MB2_TextureBakeResults tbr)
    // Offset: 0x19F37CC
    void unpackMat2RectMap(::GlobalNamespace::MB2_TextureBakeResults* tbr);
    // public DigitalOpus.MB.Core.MB3_TextureCombiner CreateAndConfigureTextureCombiner()
    // Offset: 0x19F3A88
    ::DigitalOpus::MB::Core::MB3_TextureCombiner* CreateAndConfigureTextureCombiner();
    // static public System.Void ConfigureNewMaterialToMatchOld(UnityEngine.Material newMat, UnityEngine.Material original)
    // Offset: 0x19F3D14
    static void ConfigureNewMaterialToMatchOld(::UnityEngine::Material* newMat, ::UnityEngine::Material* original);
    // private System.String PrintSet(System.Collections.Generic.HashSet`1<UnityEngine.Material> s)
    // Offset: 0x19F4168
    ::StringW PrintSet(::System::Collections::Generic::HashSet_1<::UnityEngine::Material*>* s);
    // private System.Boolean _ValidateResultMaterials()
    // Offset: 0x19F42EC
    bool _ValidateResultMaterials();
    // public override MB2_TextureBakeResults get_textureBakeResults()
    // Offset: 0x19F308C
    // Implemented from: MB3_MeshBakerRoot
    // Base method: MB2_TextureBakeResults MB3_MeshBakerRoot::get_textureBakeResults()
    ::GlobalNamespace::MB2_TextureBakeResults* get_textureBakeResults();
    // public override System.Void set_textureBakeResults(MB2_TextureBakeResults value)
    // Offset: 0x19F3094
    // Implemented from: MB3_MeshBakerRoot
    // Base method: System.Void MB3_MeshBakerRoot::set_textureBakeResults(MB2_TextureBakeResults value)
    void set_textureBakeResults(::GlobalNamespace::MB2_TextureBakeResults* value);
    // public override System.Collections.Generic.List`1<UnityEngine.GameObject> GetObjectsToCombine()
    // Offset: 0x19F31FC
    // Implemented from: MB3_MeshBakerRoot
    // Base method: System.Collections.Generic.List`1<UnityEngine.GameObject> MB3_MeshBakerRoot::GetObjectsToCombine()
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* GetObjectsToCombine();
    // public System.Void .ctor()
    // Offset: 0x19F4BC0
    // Implemented from: MB3_MeshBakerRoot
    // Base method: System.Void MB3_MeshBakerRoot::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_TextureBaker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MB3_TextureBaker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_TextureBaker*, creationType>()));
    }
  }; // MB3_TextureBaker
  #pragma pack(pop)
  static check_size<sizeof(MB3_TextureBaker), 168 + sizeof(::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*>)> __GlobalNamespace_MB3_TextureBakerSizeCheck;
  static_assert(sizeof(MB3_TextureBaker) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_atlasPadding
// Il2CppName: get_atlasPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_atlasPadding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_atlasPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_atlasPadding
// Il2CppName: set_atlasPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(int)>(&GlobalNamespace::MB3_TextureBaker::set_atlasPadding)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_atlasPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_maxAtlasSize
// Il2CppName: get_maxAtlasSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_maxAtlasSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_maxAtlasSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_maxAtlasSize
// Il2CppName: set_maxAtlasSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(int)>(&GlobalNamespace::MB3_TextureBaker::set_maxAtlasSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_maxAtlasSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_useMaxAtlasWidthOverride
// Il2CppName: get_useMaxAtlasWidthOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_useMaxAtlasWidthOverride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_useMaxAtlasWidthOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_useMaxAtlasWidthOverride
// Il2CppName: set_useMaxAtlasWidthOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(bool)>(&GlobalNamespace::MB3_TextureBaker::set_useMaxAtlasWidthOverride)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_useMaxAtlasWidthOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_maxAtlasWidthOverride
// Il2CppName: get_maxAtlasWidthOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_maxAtlasWidthOverride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_maxAtlasWidthOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_maxAtlasWidthOverride
// Il2CppName: set_maxAtlasWidthOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(int)>(&GlobalNamespace::MB3_TextureBaker::set_maxAtlasWidthOverride)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_maxAtlasWidthOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_useMaxAtlasHeightOverride
// Il2CppName: get_useMaxAtlasHeightOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_useMaxAtlasHeightOverride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_useMaxAtlasHeightOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_useMaxAtlasHeightOverride
// Il2CppName: set_useMaxAtlasHeightOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(bool)>(&GlobalNamespace::MB3_TextureBaker::set_useMaxAtlasHeightOverride)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_useMaxAtlasHeightOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_maxAtlasHeightOverride
// Il2CppName: get_maxAtlasHeightOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_maxAtlasHeightOverride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_maxAtlasHeightOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_maxAtlasHeightOverride
// Il2CppName: set_maxAtlasHeightOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(int)>(&GlobalNamespace::MB3_TextureBaker::set_maxAtlasHeightOverride)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_maxAtlasHeightOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_resizePowerOfTwoTextures
// Il2CppName: get_resizePowerOfTwoTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_resizePowerOfTwoTextures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_resizePowerOfTwoTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_resizePowerOfTwoTextures
// Il2CppName: set_resizePowerOfTwoTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(bool)>(&GlobalNamespace::MB3_TextureBaker::set_resizePowerOfTwoTextures)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_resizePowerOfTwoTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_fixOutOfBoundsUVs
// Il2CppName: get_fixOutOfBoundsUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_fixOutOfBoundsUVs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_fixOutOfBoundsUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_fixOutOfBoundsUVs
// Il2CppName: set_fixOutOfBoundsUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(bool)>(&GlobalNamespace::MB3_TextureBaker::set_fixOutOfBoundsUVs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_fixOutOfBoundsUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_maxTilingBakeSize
// Il2CppName: get_maxTilingBakeSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_maxTilingBakeSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_maxTilingBakeSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_maxTilingBakeSize
// Il2CppName: set_maxTilingBakeSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(int)>(&GlobalNamespace::MB3_TextureBaker::set_maxTilingBakeSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_maxTilingBakeSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_packingAlgorithm
// Il2CppName: get_packingAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::MB2_PackingAlgorithmEnum (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_packingAlgorithm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_packingAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_packingAlgorithm
// Il2CppName: set_packingAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(::DigitalOpus::MB::Core::MB2_PackingAlgorithmEnum)>(&GlobalNamespace::MB3_TextureBaker::set_packingAlgorithm)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_PackingAlgorithmEnum")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_packingAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_meshBakerTexturePackerForcePowerOfTwo
// Il2CppName: get_meshBakerTexturePackerForcePowerOfTwo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_meshBakerTexturePackerForcePowerOfTwo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_meshBakerTexturePackerForcePowerOfTwo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_meshBakerTexturePackerForcePowerOfTwo
// Il2CppName: set_meshBakerTexturePackerForcePowerOfTwo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(bool)>(&GlobalNamespace::MB3_TextureBaker::set_meshBakerTexturePackerForcePowerOfTwo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_meshBakerTexturePackerForcePowerOfTwo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_customShaderProperties
// Il2CppName: get_customShaderProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>* (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_customShaderProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_customShaderProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_customShaderProperties
// Il2CppName: set_customShaderProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::ShaderTextureProperty*>*)>(&GlobalNamespace::MB3_TextureBaker::set_customShaderProperties)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_customShaderProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_customShaderPropNames
// Il2CppName: get_customShaderPropNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_customShaderPropNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_customShaderPropNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_customShaderPropNames
// Il2CppName: set_customShaderPropNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(::System::Collections::Generic::List_1<::StringW>*)>(&GlobalNamespace::MB3_TextureBaker::set_customShaderPropNames)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_customShaderPropNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_doMultiMaterial
// Il2CppName: get_doMultiMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_doMultiMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_doMultiMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_doMultiMaterial
// Il2CppName: set_doMultiMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(bool)>(&GlobalNamespace::MB3_TextureBaker::set_doMultiMaterial)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_doMultiMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_doMultiMaterialSplitAtlasesIfTooBig
// Il2CppName: get_doMultiMaterialSplitAtlasesIfTooBig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_doMultiMaterialSplitAtlasesIfTooBig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_doMultiMaterialSplitAtlasesIfTooBig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_doMultiMaterialSplitAtlasesIfTooBig
// Il2CppName: set_doMultiMaterialSplitAtlasesIfTooBig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(bool)>(&GlobalNamespace::MB3_TextureBaker::set_doMultiMaterialSplitAtlasesIfTooBig)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_doMultiMaterialSplitAtlasesIfTooBig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_doMultiMaterialSplitAtlasesIfOBUVs
// Il2CppName: get_doMultiMaterialSplitAtlasesIfOBUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_doMultiMaterialSplitAtlasesIfOBUVs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_doMultiMaterialSplitAtlasesIfOBUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_doMultiMaterialSplitAtlasesIfOBUVs
// Il2CppName: set_doMultiMaterialSplitAtlasesIfOBUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(bool)>(&GlobalNamespace::MB3_TextureBaker::set_doMultiMaterialSplitAtlasesIfOBUVs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_doMultiMaterialSplitAtlasesIfOBUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_resultMaterial
// Il2CppName: get_resultMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_resultMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_resultMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_resultMaterial
// Il2CppName: set_resultMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(::UnityEngine::Material*)>(&GlobalNamespace::MB3_TextureBaker::set_resultMaterial)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_resultMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_considerNonTextureProperties
// Il2CppName: get_considerNonTextureProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_considerNonTextureProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_considerNonTextureProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_considerNonTextureProperties
// Il2CppName: set_considerNonTextureProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(bool)>(&GlobalNamespace::MB3_TextureBaker::set_considerNonTextureProperties)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_considerNonTextureProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_doSuggestTreatment
// Il2CppName: get_doSuggestTreatment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_doSuggestTreatment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_doSuggestTreatment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_doSuggestTreatment
// Il2CppName: set_doSuggestTreatment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(bool)>(&GlobalNamespace::MB3_TextureBaker::set_doSuggestTreatment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_doSuggestTreatment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_CoroutineResult
// Il2CppName: get_CoroutineResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MB3_TextureBaker::CreateAtlasesCoroutineResult* (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_CoroutineResult)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_CoroutineResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::CreateAtlases
// Il2CppName: CreateAtlases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*> (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::CreateAtlases)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "CreateAtlases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::CreateAtlasesCoroutine
// Il2CppName: CreateAtlasesCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::MB3_TextureBaker::*)(::DigitalOpus::MB::Core::ProgressUpdateDelegate*, ::GlobalNamespace::MB3_TextureBaker::CreateAtlasesCoroutineResult*, bool, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*, float)>(&GlobalNamespace::MB3_TextureBaker::CreateAtlasesCoroutine)> {
  static const MethodInfo* get() {
    static auto* progressInfo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ProgressUpdateDelegate")->byval_arg;
    static auto* coroutineResult = &::il2cpp_utils::GetClassFromName("", "MB3_TextureBaker/CreateAtlasesCoroutineResult")->byval_arg;
    static auto* saveAtlasesAsAssets = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* editorMethods = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_EditorMethodsInterface")->byval_arg;
    static auto* maxTimePerFrame = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "CreateAtlasesCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progressInfo, coroutineResult, saveAtlasesAsAssets, editorMethods, maxTimePerFrame});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::CreateAtlases
// Il2CppName: CreateAtlases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::MB_AtlasesAndRects*> (GlobalNamespace::MB3_TextureBaker::*)(::DigitalOpus::MB::Core::ProgressUpdateDelegate*, bool, ::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*)>(&GlobalNamespace::MB3_TextureBaker::CreateAtlases)> {
  static const MethodInfo* get() {
    static auto* progressInfo = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ProgressUpdateDelegate")->byval_arg;
    static auto* saveAtlasesAsAssets = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* editorMethods = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_EditorMethodsInterface")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "CreateAtlases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progressInfo, saveAtlasesAsAssets, editorMethods});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::unpackMat2RectMap
// Il2CppName: unpackMat2RectMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(::GlobalNamespace::MB2_TextureBakeResults*)>(&GlobalNamespace::MB3_TextureBaker::unpackMat2RectMap)> {
  static const MethodInfo* get() {
    static auto* tbr = &::il2cpp_utils::GetClassFromName("", "MB2_TextureBakeResults")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "unpackMat2RectMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tbr});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::CreateAndConfigureTextureCombiner
// Il2CppName: CreateAndConfigureTextureCombiner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::MB3_TextureCombiner* (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::CreateAndConfigureTextureCombiner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "CreateAndConfigureTextureCombiner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::ConfigureNewMaterialToMatchOld
// Il2CppName: ConfigureNewMaterialToMatchOld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Material*, ::UnityEngine::Material*)>(&GlobalNamespace::MB3_TextureBaker::ConfigureNewMaterialToMatchOld)> {
  static const MethodInfo* get() {
    static auto* newMat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "ConfigureNewMaterialToMatchOld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newMat, original});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::PrintSet
// Il2CppName: PrintSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::MB3_TextureBaker::*)(::System::Collections::Generic::HashSet_1<::UnityEngine::Material*>*)>(&GlobalNamespace::MB3_TextureBaker::PrintSet)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "HashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Material")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "PrintSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::_ValidateResultMaterials
// Il2CppName: _ValidateResultMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::_ValidateResultMaterials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "_ValidateResultMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::get_textureBakeResults
// Il2CppName: get_textureBakeResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MB2_TextureBakeResults* (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::get_textureBakeResults)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "get_textureBakeResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::set_textureBakeResults
// Il2CppName: set_textureBakeResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_TextureBaker::*)(::GlobalNamespace::MB2_TextureBakeResults*)>(&GlobalNamespace::MB3_TextureBaker::set_textureBakeResults)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "MB2_TextureBakeResults")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "set_textureBakeResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::GetObjectsToCombine
// Il2CppName: GetObjectsToCombine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* (GlobalNamespace::MB3_TextureBaker::*)()>(&GlobalNamespace::MB3_TextureBaker::GetObjectsToCombine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_TextureBaker*), "GetObjectsToCombine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_TextureBaker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
