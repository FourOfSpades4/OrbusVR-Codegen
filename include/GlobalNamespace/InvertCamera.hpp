// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: InvertCamera
  class InvertCamera;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::InvertCamera);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::InvertCamera*, "", "InvertCamera");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2D
  #pragma pack(push, 1)
  // Autogenerated type: InvertCamera
  // [TokenAttribute] Offset: FFFFFFFF
  class InvertCamera : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Camera myCamera
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Camera* myCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private UnityEngine.Vector3 flippedVector
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 flippedVector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean oldCulling
    // Size: 0x1
    // Offset: 0x2C
    bool oldCulling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Camera myCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_myCamera();
    // Get instance field reference: private UnityEngine.Vector3 flippedVector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_flippedVector();
    // Get instance field reference: private System.Boolean oldCulling
    [[deprecated("Use field access instead!")]] bool& dyn_oldCulling();
    // private System.Void Start()
    // Offset: 0x1057714
    void Start();
    // private System.Void OnPreCull()
    // Offset: 0x10577A4
    void OnPreCull();
    // private System.Void OnPreRender()
    // Offset: 0x10578FC
    void OnPreRender();
    // private System.Void OnPostRender()
    // Offset: 0x1057930
    void OnPostRender();
    // public System.Void .ctor()
    // Offset: 0x105793C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InvertCamera* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::InvertCamera::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InvertCamera*, creationType>()));
    }
  }; // InvertCamera
  #pragma pack(pop)
  static check_size<sizeof(InvertCamera), 44 + sizeof(bool)> __GlobalNamespace_InvertCameraSizeCheck;
  static_assert(sizeof(InvertCamera) == 0x2D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::InvertCamera::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InvertCamera::*)()>(&GlobalNamespace::InvertCamera::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InvertCamera*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InvertCamera::OnPreCull
// Il2CppName: OnPreCull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InvertCamera::*)()>(&GlobalNamespace::InvertCamera::OnPreCull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InvertCamera*), "OnPreCull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InvertCamera::OnPreRender
// Il2CppName: OnPreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InvertCamera::*)()>(&GlobalNamespace::InvertCamera::OnPreRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InvertCamera*), "OnPreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InvertCamera::OnPostRender
// Il2CppName: OnPostRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InvertCamera::*)()>(&GlobalNamespace::InvertCamera::OnPostRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InvertCamera*), "OnPostRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::InvertCamera::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
