// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Pathfinding.Int2
#include "Pathfinding/Int2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ProceduralWorld
  class ProceduralWorld;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ProceduralWorld);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ProceduralWorld*, "", "ProceduralWorld");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: ProceduralWorld
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: ACD1F0
  class ProceduralWorld : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ProceduralWorld::ProceduralPrefab
    class ProceduralPrefab;
    // Nested type: ::GlobalNamespace::ProceduralWorld::ProceduralTile
    class ProceduralTile;
    // Nested type: ::GlobalNamespace::ProceduralWorld::$GenerateTiles$d__11
    class $GenerateTiles$d__11;
    public:
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public ProceduralWorld/ProceduralPrefab[] prefabs
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::ProceduralWorld::ProceduralPrefab*> prefabs;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::ProceduralWorld::ProceduralPrefab*>) == 0x8);
    // public System.Int32 range
    // Size: 0x4
    // Offset: 0x28
    int range;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single tileSize
    // Size: 0x4
    // Offset: 0x2C
    float tileSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 subTiles
    // Size: 0x4
    // Offset: 0x30
    int subTiles;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean staticBatching
    // Size: 0x1
    // Offset: 0x34
    bool staticBatching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: staticBatching and: tileGenerationQueue
    char __padding5[0x3] = {};
    // private System.Collections.Generic.Queue`1<System.Collections.IEnumerator> tileGenerationQueue
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Queue_1<::System::Collections::IEnumerator*>* tileGenerationQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::System::Collections::IEnumerator*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<Pathfinding.Int2,ProceduralWorld/ProceduralTile> tiles
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Dictionary_2<::Pathfinding::Int2, ::GlobalNamespace::ProceduralWorld::ProceduralTile*>* tiles;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Pathfinding::Int2, ::GlobalNamespace::ProceduralWorld::ProceduralTile*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // Get instance field reference: public ProceduralWorld/ProceduralPrefab[] prefabs
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::ProceduralWorld::ProceduralPrefab*>& dyn_prefabs();
    // Get instance field reference: public System.Int32 range
    [[deprecated("Use field access instead!")]] int& dyn_range();
    // Get instance field reference: public System.Single tileSize
    [[deprecated("Use field access instead!")]] float& dyn_tileSize();
    // Get instance field reference: public System.Int32 subTiles
    [[deprecated("Use field access instead!")]] int& dyn_subTiles();
    // Get instance field reference: public System.Boolean staticBatching
    [[deprecated("Use field access instead!")]] bool& dyn_staticBatching();
    // Get instance field reference: private System.Collections.Generic.Queue`1<System.Collections.IEnumerator> tileGenerationQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::System::Collections::IEnumerator*>*& dyn_tileGenerationQueue();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Pathfinding.Int2,ProceduralWorld/ProceduralTile> tiles
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Pathfinding::Int2, ::GlobalNamespace::ProceduralWorld::ProceduralTile*>*& dyn_tiles();
    // private System.Void Start()
    // Offset: 0xE1EB8C
    void Start();
    // private System.Void Update()
    // Offset: 0xE1EC2C
    void Update();
    // private System.Collections.IEnumerator GenerateTiles()
    // Offset: 0xE1F1D8
    ::System::Collections::IEnumerator* GenerateTiles();
    // public System.Void .ctor()
    // Offset: 0xE1F73C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProceduralWorld* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProceduralWorld::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProceduralWorld*, creationType>()));
    }
  }; // ProceduralWorld
  #pragma pack(pop)
  static check_size<sizeof(ProceduralWorld), 64 + sizeof(::System::Collections::Generic::Dictionary_2<::Pathfinding::Int2, ::GlobalNamespace::ProceduralWorld::ProceduralTile*>*)> __GlobalNamespace_ProceduralWorldSizeCheck;
  static_assert(sizeof(ProceduralWorld) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ProceduralWorld::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ProceduralWorld::*)()>(&GlobalNamespace::ProceduralWorld::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProceduralWorld*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProceduralWorld::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ProceduralWorld::*)()>(&GlobalNamespace::ProceduralWorld::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProceduralWorld*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProceduralWorld::GenerateTiles
// Il2CppName: GenerateTiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::ProceduralWorld::*)()>(&GlobalNamespace::ProceduralWorld::GenerateTiles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProceduralWorld*), "GenerateTiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProceduralWorld::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
