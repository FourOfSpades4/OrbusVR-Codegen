// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Runtime.InteropServices.HandleRef
#include "System/Runtime/InteropServices/HandleRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SWIGTYPE_p_p_vx_state_participant
  class SWIGTYPE_p_p_vx_state_participant;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: vx_state_session_t
  class vx_state_session_t;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::vx_state_session_t);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::vx_state_session_t*, "", "vx_state_session_t");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: vx_state_session_t
  // [TokenAttribute] Offset: FFFFFFFF
  class vx_state_session_t : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Runtime.InteropServices.HandleRef swigCPtr
    // Size: 0x10
    // Offset: 0x10
    ::System::Runtime::InteropServices::HandleRef swigCPtr;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::HandleRef) == 0x10);
    // protected System.Boolean swigCMemOwn
    // Size: 0x1
    // Offset: 0x20
    bool swigCMemOwn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Runtime.InteropServices.HandleRef swigCPtr
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& dyn_swigCPtr();
    // Get instance field reference: protected System.Boolean swigCMemOwn
    [[deprecated("Use field access instead!")]] bool& dyn_swigCMemOwn();
    // System.Void .ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    // Offset: 0x2820F08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static vx_state_session_t* New_ctor(::System::IntPtr cPtr, bool cMemoryOwn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_state_session_t::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<vx_state_session_t*, creationType>(cPtr, cMemoryOwn)));
    }
    // static System.Runtime.InteropServices.HandleRef getCPtr(vx_state_session_t obj)
    // Offset: 0x2820F6C
    static ::System::Runtime::InteropServices::HandleRef getCPtr(::GlobalNamespace::vx_state_session_t* obj);
    // public System.Void Dispose()
    // Offset: 0x282105C
    void Dispose();
    // public System.Void set_session_handle(System.String value)
    // Offset: 0x28211CC
    void set_session_handle(::StringW value);
    // public System.String get_session_handle()
    // Offset: 0x282124C
    ::StringW get_session_handle();
    // public System.Void set_uri(System.String value)
    // Offset: 0x28212BC
    void set_uri(::StringW value);
    // public System.String get_uri()
    // Offset: 0x282133C
    ::StringW get_uri();
    // public System.Void set_name(System.String value)
    // Offset: 0x28213AC
    void set_name(::StringW value);
    // public System.String get_name()
    // Offset: 0x282142C
    ::StringW get_name();
    // public System.Void set_is_audio_muted_for_me(System.Int32 value)
    // Offset: 0x282149C
    void set_is_audio_muted_for_me(int value);
    // public System.Int32 get_is_audio_muted_for_me()
    // Offset: 0x282151C
    int get_is_audio_muted_for_me();
    // public System.Void set_is_text_muted_for_me(System.Int32 value)
    // Offset: 0x282158C
    void set_is_text_muted_for_me(int value);
    // public System.Int32 get_is_text_muted_for_me()
    // Offset: 0x282160C
    int get_is_text_muted_for_me();
    // public System.Void set_is_transmitting(System.Int32 value)
    // Offset: 0x282167C
    void set_is_transmitting(int value);
    // public System.Int32 get_is_transmitting()
    // Offset: 0x28216FC
    int get_is_transmitting();
    // public System.Void set_is_focused(System.Int32 value)
    // Offset: 0x282176C
    void set_is_focused(int value);
    // public System.Int32 get_is_focused()
    // Offset: 0x28217EC
    int get_is_focused();
    // public System.Void set_volume(System.Int32 value)
    // Offset: 0x282185C
    void set_volume(int value);
    // public System.Int32 get_volume()
    // Offset: 0x28218DC
    int get_volume();
    // public System.Void set_session_font_id(System.Int32 value)
    // Offset: 0x282194C
    void set_session_font_id(int value);
    // public System.Int32 get_session_font_id()
    // Offset: 0x28219CC
    int get_session_font_id();
    // public System.Void set_has_audio(System.Int32 value)
    // Offset: 0x2821A3C
    void set_has_audio(int value);
    // public System.Int32 get_has_audio()
    // Offset: 0x2821ABC
    int get_has_audio();
    // public System.Void set_has_text(System.Int32 value)
    // Offset: 0x2821B2C
    void set_has_text(int value);
    // public System.Int32 get_has_text()
    // Offset: 0x2821BAC
    int get_has_text();
    // public System.Void set_is_incoming(System.Int32 value)
    // Offset: 0x2821C1C
    void set_is_incoming(int value);
    // public System.Int32 get_is_incoming()
    // Offset: 0x2821C9C
    int get_is_incoming();
    // public System.Void set_is_positional(System.Int32 value)
    // Offset: 0x2821D0C
    void set_is_positional(int value);
    // public System.Int32 get_is_positional()
    // Offset: 0x2821D8C
    int get_is_positional();
    // public System.Void set_is_connected(System.Int32 value)
    // Offset: 0x2821DFC
    void set_is_connected(int value);
    // public System.Int32 get_is_connected()
    // Offset: 0x2821E7C
    int get_is_connected();
    // public System.Void set_state_participant_count(System.Int32 value)
    // Offset: 0x2821EEC
    void set_state_participant_count(int value);
    // public System.Int32 get_state_participant_count()
    // Offset: 0x2821F6C
    int get_state_participant_count();
    // public System.Void set_state_participants(SWIGTYPE_p_p_vx_state_participant value)
    // Offset: 0x2821FDC
    void set_state_participants(::GlobalNamespace::SWIGTYPE_p_p_vx_state_participant* value);
    // public SWIGTYPE_p_p_vx_state_participant get_state_participants()
    // Offset: 0x2822074
    ::GlobalNamespace::SWIGTYPE_p_p_vx_state_participant* get_state_participants();
    // public System.Void set_durable_media_id(System.String value)
    // Offset: 0x2822128
    void set_durable_media_id(::StringW value);
    // public System.String get_durable_media_id()
    // Offset: 0x28221A8
    ::StringW get_durable_media_id();
    // public System.Void .ctor()
    // Offset: 0x2822218
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static vx_state_session_t* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_state_session_t::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<vx_state_session_t*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x2820FE0
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // vx_state_session_t
  #pragma pack(pop)
  static check_size<sizeof(vx_state_session_t), 32 + sizeof(bool)> __GlobalNamespace_vx_state_session_tSizeCheck;
  static_assert(sizeof(vx_state_session_t) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::getCPtr
// Il2CppName: getCPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::InteropServices::HandleRef (*)(::GlobalNamespace::vx_state_session_t*)>(&GlobalNamespace::vx_state_session_t::getCPtr)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("", "vx_state_session_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "getCPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_session_handle
// Il2CppName: set_session_handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(::StringW)>(&GlobalNamespace::vx_state_session_t::set_session_handle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_session_handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_session_handle
// Il2CppName: get_session_handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_session_handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_session_handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_uri
// Il2CppName: set_uri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(::StringW)>(&GlobalNamespace::vx_state_session_t::set_uri)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_uri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_uri
// Il2CppName: get_uri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_uri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_uri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_name
// Il2CppName: set_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(::StringW)>(&GlobalNamespace::vx_state_session_t::set_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_is_audio_muted_for_me
// Il2CppName: set_is_audio_muted_for_me
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(int)>(&GlobalNamespace::vx_state_session_t::set_is_audio_muted_for_me)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_is_audio_muted_for_me", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_is_audio_muted_for_me
// Il2CppName: get_is_audio_muted_for_me
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_is_audio_muted_for_me)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_is_audio_muted_for_me", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_is_text_muted_for_me
// Il2CppName: set_is_text_muted_for_me
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(int)>(&GlobalNamespace::vx_state_session_t::set_is_text_muted_for_me)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_is_text_muted_for_me", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_is_text_muted_for_me
// Il2CppName: get_is_text_muted_for_me
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_is_text_muted_for_me)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_is_text_muted_for_me", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_is_transmitting
// Il2CppName: set_is_transmitting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(int)>(&GlobalNamespace::vx_state_session_t::set_is_transmitting)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_is_transmitting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_is_transmitting
// Il2CppName: get_is_transmitting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_is_transmitting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_is_transmitting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_is_focused
// Il2CppName: set_is_focused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(int)>(&GlobalNamespace::vx_state_session_t::set_is_focused)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_is_focused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_is_focused
// Il2CppName: get_is_focused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_is_focused)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_is_focused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_volume
// Il2CppName: set_volume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(int)>(&GlobalNamespace::vx_state_session_t::set_volume)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_volume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_volume
// Il2CppName: get_volume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_volume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_volume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_session_font_id
// Il2CppName: set_session_font_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(int)>(&GlobalNamespace::vx_state_session_t::set_session_font_id)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_session_font_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_session_font_id
// Il2CppName: get_session_font_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_session_font_id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_session_font_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_has_audio
// Il2CppName: set_has_audio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(int)>(&GlobalNamespace::vx_state_session_t::set_has_audio)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_has_audio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_has_audio
// Il2CppName: get_has_audio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_has_audio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_has_audio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_has_text
// Il2CppName: set_has_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(int)>(&GlobalNamespace::vx_state_session_t::set_has_text)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_has_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_has_text
// Il2CppName: get_has_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_has_text)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_has_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_is_incoming
// Il2CppName: set_is_incoming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(int)>(&GlobalNamespace::vx_state_session_t::set_is_incoming)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_is_incoming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_is_incoming
// Il2CppName: get_is_incoming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_is_incoming)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_is_incoming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_is_positional
// Il2CppName: set_is_positional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(int)>(&GlobalNamespace::vx_state_session_t::set_is_positional)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_is_positional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_is_positional
// Il2CppName: get_is_positional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_is_positional)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_is_positional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_is_connected
// Il2CppName: set_is_connected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(int)>(&GlobalNamespace::vx_state_session_t::set_is_connected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_is_connected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_is_connected
// Il2CppName: get_is_connected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_is_connected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_is_connected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_state_participant_count
// Il2CppName: set_state_participant_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(int)>(&GlobalNamespace::vx_state_session_t::set_state_participant_count)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_state_participant_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_state_participant_count
// Il2CppName: get_state_participant_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_state_participant_count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_state_participant_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_state_participants
// Il2CppName: set_state_participants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(::GlobalNamespace::SWIGTYPE_p_p_vx_state_participant*)>(&GlobalNamespace::vx_state_session_t::set_state_participants)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SWIGTYPE_p_p_vx_state_participant")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_state_participants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_state_participants
// Il2CppName: get_state_participants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SWIGTYPE_p_p_vx_state_participant* (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_state_participants)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_state_participants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::set_durable_media_id
// Il2CppName: set_durable_media_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)(::StringW)>(&GlobalNamespace::vx_state_session_t::set_durable_media_id)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "set_durable_media_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::get_durable_media_id
// Il2CppName: get_durable_media_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::get_durable_media_id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "get_durable_media_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::vx_state_session_t::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_state_session_t::*)()>(&GlobalNamespace::vx_state_session_t::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_state_session_t*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
