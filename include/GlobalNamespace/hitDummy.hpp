// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: hitDummy
  class hitDummy;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::hitDummy);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::hitDummy*, "", "hitDummy");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: hitDummy
  // [TokenAttribute] Offset: FFFFFFFF
  class hitDummy : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Animator DummyAnimator
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Animator* DummyAnimator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // public UnityEngine.GameObject hay
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* hay;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Animator DummyAnimator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_DummyAnimator();
    // Get instance field reference: public UnityEngine.GameObject hay
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_hay();
    // private System.Void Start()
    // Offset: 0x28346F8
    void Start();
    // private System.Void OnMouseDown()
    // Offset: 0x2834750
    void OnMouseDown();
    // public System.Void .ctor()
    // Offset: 0x28348E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static hitDummy* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::hitDummy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<hitDummy*, creationType>()));
    }
  }; // hitDummy
  #pragma pack(pop)
  static check_size<sizeof(hitDummy), 32 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_hitDummySizeCheck;
  static_assert(sizeof(hitDummy) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::hitDummy::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::hitDummy::*)()>(&GlobalNamespace::hitDummy::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::hitDummy*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::hitDummy::OnMouseDown
// Il2CppName: OnMouseDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::hitDummy::*)()>(&GlobalNamespace::hitDummy::OnMouseDown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::hitDummy*), "OnMouseDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::hitDummy::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
