// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Runtime.InteropServices.HandleRef
#include "System/Runtime/InteropServices/HandleRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: vx_req_base_t
  class vx_req_base_t;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: vx_req_aux_connectivity_info_t
  class vx_req_aux_connectivity_info_t;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::vx_req_aux_connectivity_info_t);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::vx_req_aux_connectivity_info_t*, "", "vx_req_aux_connectivity_info_t");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: vx_req_aux_connectivity_info_t
  // [TokenAttribute] Offset: FFFFFFFF
  class vx_req_aux_connectivity_info_t : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Runtime.InteropServices.HandleRef swigCPtr
    // Size: 0x10
    // Offset: 0x10
    ::System::Runtime::InteropServices::HandleRef swigCPtr;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::HandleRef) == 0x10);
    // protected System.Boolean swigCMemOwn
    // Size: 0x1
    // Offset: 0x20
    bool swigCMemOwn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Runtime.InteropServices.HandleRef swigCPtr
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& dyn_swigCPtr();
    // Get instance field reference: protected System.Boolean swigCMemOwn
    [[deprecated("Use field access instead!")]] bool& dyn_swigCMemOwn();
    // System.Void .ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    // Offset: 0x221CB4C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static vx_req_aux_connectivity_info_t* New_ctor(::System::IntPtr cPtr, bool cMemoryOwn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_req_aux_connectivity_info_t::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<vx_req_aux_connectivity_info_t*, creationType>(cPtr, cMemoryOwn)));
    }
    // static System.Runtime.InteropServices.HandleRef getCPtr(vx_req_aux_connectivity_info_t obj)
    // Offset: 0x221CBB0
    static ::System::Runtime::InteropServices::HandleRef getCPtr(::GlobalNamespace::vx_req_aux_connectivity_info_t* obj);
    // public System.Void Dispose()
    // Offset: 0x221CCA0
    void Dispose();
    // public System.Void set_base_(vx_req_base_t value)
    // Offset: 0x221CEEC
    void set_base_(::GlobalNamespace::vx_req_base_t* value);
    // public vx_req_base_t get_base_()
    // Offset: 0x221CE38
    ::GlobalNamespace::vx_req_base_t* get_base_();
    // public System.Void set_well_known_ip(System.String value)
    // Offset: 0x221CF84
    void set_well_known_ip(::StringW value);
    // public System.String get_well_known_ip()
    // Offset: 0x221D004
    ::StringW get_well_known_ip();
    // public System.Void set_stun_server(System.String value)
    // Offset: 0x221D074
    void set_stun_server(::StringW value);
    // public System.String get_stun_server()
    // Offset: 0x221D0F4
    ::StringW get_stun_server();
    // public System.Void set_echo_server(System.String value)
    // Offset: 0x221D164
    void set_echo_server(::StringW value);
    // public System.String get_echo_server()
    // Offset: 0x221D1E4
    ::StringW get_echo_server();
    // public System.Void set_echo_port(System.Int32 value)
    // Offset: 0x221D254
    void set_echo_port(int value);
    // public System.Int32 get_echo_port()
    // Offset: 0x221D2D4
    int get_echo_port();
    // public System.Void set_timeout(System.Int32 value)
    // Offset: 0x221D344
    void set_timeout(int value);
    // public System.Int32 get_timeout()
    // Offset: 0x221D3C4
    int get_timeout();
    // public System.Void set_acct_mgmt_server(System.String value)
    // Offset: 0x221D434
    void set_acct_mgmt_server(::StringW value);
    // public System.String get_acct_mgmt_server()
    // Offset: 0x221D4B4
    ::StringW get_acct_mgmt_server();
    // public System.Void .ctor()
    // Offset: 0x221D524
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static vx_req_aux_connectivity_info_t* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_req_aux_connectivity_info_t::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<vx_req_aux_connectivity_info_t*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x221CC24
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // vx_req_aux_connectivity_info_t
  #pragma pack(pop)
  static check_size<sizeof(vx_req_aux_connectivity_info_t), 32 + sizeof(bool)> __GlobalNamespace_vx_req_aux_connectivity_info_tSizeCheck;
  static_assert(sizeof(vx_req_aux_connectivity_info_t) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::getCPtr
// Il2CppName: getCPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::InteropServices::HandleRef (*)(::GlobalNamespace::vx_req_aux_connectivity_info_t*)>(&GlobalNamespace::vx_req_aux_connectivity_info_t::getCPtr)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("", "vx_req_aux_connectivity_info_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "getCPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_req_aux_connectivity_info_t::*)()>(&GlobalNamespace::vx_req_aux_connectivity_info_t::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::set_base_
// Il2CppName: set_base_
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_req_aux_connectivity_info_t::*)(::GlobalNamespace::vx_req_base_t*)>(&GlobalNamespace::vx_req_aux_connectivity_info_t::set_base_)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "vx_req_base_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "set_base_", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::get_base_
// Il2CppName: get_base_
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::vx_req_base_t* (GlobalNamespace::vx_req_aux_connectivity_info_t::*)()>(&GlobalNamespace::vx_req_aux_connectivity_info_t::get_base_)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "get_base_", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::set_well_known_ip
// Il2CppName: set_well_known_ip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_req_aux_connectivity_info_t::*)(::StringW)>(&GlobalNamespace::vx_req_aux_connectivity_info_t::set_well_known_ip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "set_well_known_ip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::get_well_known_ip
// Il2CppName: get_well_known_ip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::vx_req_aux_connectivity_info_t::*)()>(&GlobalNamespace::vx_req_aux_connectivity_info_t::get_well_known_ip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "get_well_known_ip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::set_stun_server
// Il2CppName: set_stun_server
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_req_aux_connectivity_info_t::*)(::StringW)>(&GlobalNamespace::vx_req_aux_connectivity_info_t::set_stun_server)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "set_stun_server", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::get_stun_server
// Il2CppName: get_stun_server
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::vx_req_aux_connectivity_info_t::*)()>(&GlobalNamespace::vx_req_aux_connectivity_info_t::get_stun_server)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "get_stun_server", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::set_echo_server
// Il2CppName: set_echo_server
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_req_aux_connectivity_info_t::*)(::StringW)>(&GlobalNamespace::vx_req_aux_connectivity_info_t::set_echo_server)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "set_echo_server", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::get_echo_server
// Il2CppName: get_echo_server
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::vx_req_aux_connectivity_info_t::*)()>(&GlobalNamespace::vx_req_aux_connectivity_info_t::get_echo_server)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "get_echo_server", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::set_echo_port
// Il2CppName: set_echo_port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_req_aux_connectivity_info_t::*)(int)>(&GlobalNamespace::vx_req_aux_connectivity_info_t::set_echo_port)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "set_echo_port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::get_echo_port
// Il2CppName: get_echo_port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_req_aux_connectivity_info_t::*)()>(&GlobalNamespace::vx_req_aux_connectivity_info_t::get_echo_port)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "get_echo_port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::set_timeout
// Il2CppName: set_timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_req_aux_connectivity_info_t::*)(int)>(&GlobalNamespace::vx_req_aux_connectivity_info_t::set_timeout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "set_timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::get_timeout
// Il2CppName: get_timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_req_aux_connectivity_info_t::*)()>(&GlobalNamespace::vx_req_aux_connectivity_info_t::get_timeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "get_timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::set_acct_mgmt_server
// Il2CppName: set_acct_mgmt_server
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_req_aux_connectivity_info_t::*)(::StringW)>(&GlobalNamespace::vx_req_aux_connectivity_info_t::set_acct_mgmt_server)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "set_acct_mgmt_server", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::get_acct_mgmt_server
// Il2CppName: get_acct_mgmt_server
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::vx_req_aux_connectivity_info_t::*)()>(&GlobalNamespace::vx_req_aux_connectivity_info_t::get_acct_mgmt_server)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "get_acct_mgmt_server", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::vx_req_aux_connectivity_info_t::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_req_aux_connectivity_info_t::*)()>(&GlobalNamespace::vx_req_aux_connectivity_info_t::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_req_aux_connectivity_info_t*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
