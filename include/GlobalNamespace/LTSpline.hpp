// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LTSpline
  class LTSpline;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LTSpline);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LTSpline*, "", "LTSpline");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: LTSpline
  // [TokenAttribute] Offset: FFFFFFFF
  class LTSpline : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Vector3[] pts
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Vector3> pts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public UnityEngine.Vector3[] ptsAdj
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Vector3> ptsAdj;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public System.Int32 ptsAdjLength
    // Size: 0x4
    // Offset: 0x20
    int ptsAdjLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean orientToPath
    // Size: 0x1
    // Offset: 0x24
    bool orientToPath;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean orientToPath2d
    // Size: 0x1
    // Offset: 0x25
    bool orientToPath2d;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: orientToPath2d and: numSections
    char __padding4[0x2] = {};
    // private System.Int32 numSections
    // Size: 0x4
    // Offset: 0x28
    int numSections;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 currPt
    // Size: 0x4
    // Offset: 0x2C
    int currPt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single totalLength
    // Size: 0x4
    // Offset: 0x30
    float totalLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static public System.Int32 DISTANCE_COUNT
    static int _get_DISTANCE_COUNT();
    // Set static field: static public System.Int32 DISTANCE_COUNT
    static void _set_DISTANCE_COUNT(int value);
    // Get static field: static public System.Int32 SUBLINE_COUNT
    static int _get_SUBLINE_COUNT();
    // Set static field: static public System.Int32 SUBLINE_COUNT
    static void _set_SUBLINE_COUNT(int value);
    // Get instance field reference: public UnityEngine.Vector3[] pts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_pts();
    // Get instance field reference: public UnityEngine.Vector3[] ptsAdj
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_ptsAdj();
    // Get instance field reference: public System.Int32 ptsAdjLength
    [[deprecated("Use field access instead!")]] int& dyn_ptsAdjLength();
    // Get instance field reference: public System.Boolean orientToPath
    [[deprecated("Use field access instead!")]] bool& dyn_orientToPath();
    // Get instance field reference: public System.Boolean orientToPath2d
    [[deprecated("Use field access instead!")]] bool& dyn_orientToPath2d();
    // Get instance field reference: private System.Int32 numSections
    [[deprecated("Use field access instead!")]] int& dyn_numSections();
    // Get instance field reference: private System.Int32 currPt
    [[deprecated("Use field access instead!")]] int& dyn_currPt();
    // Get instance field reference: private System.Single totalLength
    [[deprecated("Use field access instead!")]] float& dyn_totalLength();
    // public System.Void .ctor(params UnityEngine.Vector3[] pts)
    // Offset: 0x1ABC26C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LTSpline* New_ctor(::ArrayW<::UnityEngine::Vector3> pts) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LTSpline::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LTSpline*, creationType>(pts)));
    }
    // public UnityEngine.Vector3 map(System.Single u)
    // Offset: 0x1ABFA14
    ::UnityEngine::Vector3 map(float u);
    // public UnityEngine.Vector3 interp(System.Single t)
    // Offset: 0x1ABF548
    ::UnityEngine::Vector3 interp(float t);
    // public UnityEngine.Vector3 point(System.Single ratio)
    // Offset: 0x1ABFC28
    ::UnityEngine::Vector3 point(float ratio);
    // public System.Void place2d(UnityEngine.Transform transform, System.Single ratio)
    // Offset: 0x1ABFC34
    void place2d(::UnityEngine::Transform* transform, float ratio);
    // public System.Void placeLocal2d(UnityEngine.Transform transform, System.Single ratio)
    // Offset: 0x1ABFDF0
    void placeLocal2d(::UnityEngine::Transform* transform, float ratio);
    // public System.Void place(UnityEngine.Transform transform, System.Single ratio)
    // Offset: 0x1ABFFF8
    void place(::UnityEngine::Transform* transform, float ratio);
    // public System.Void place(UnityEngine.Transform transform, System.Single ratio, UnityEngine.Vector3 worldUp)
    // Offset: 0x1AC009C
    void place(::UnityEngine::Transform* transform, float ratio, ::UnityEngine::Vector3 worldUp);
    // public System.Void placeLocal(UnityEngine.Transform transform, System.Single ratio)
    // Offset: 0x1AC019C
    void placeLocal(::UnityEngine::Transform* transform, float ratio);
    // public System.Void placeLocal(UnityEngine.Transform transform, System.Single ratio, UnityEngine.Vector3 worldUp)
    // Offset: 0x1AC0240
    void placeLocal(::UnityEngine::Transform* transform, float ratio, ::UnityEngine::Vector3 worldUp);
    // public System.Void gizmoDraw(System.Single t)
    // Offset: 0x1AC0398
    void gizmoDraw(float t);
    // static private System.Void .cctor()
    // Offset: 0x1AC0444
    static void _cctor();
  }; // LTSpline
  #pragma pack(pop)
  static check_size<sizeof(LTSpline), 48 + sizeof(float)> __GlobalNamespace_LTSplineSizeCheck;
  static_assert(sizeof(LTSpline) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LTSpline::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LTSpline::map
// Il2CppName: map
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::LTSpline::*)(float)>(&GlobalNamespace::LTSpline::map)> {
  static const MethodInfo* get() {
    static auto* u = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTSpline*), "map", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{u});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTSpline::interp
// Il2CppName: interp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::LTSpline::*)(float)>(&GlobalNamespace::LTSpline::interp)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTSpline*), "interp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTSpline::point
// Il2CppName: point
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::LTSpline::*)(float)>(&GlobalNamespace::LTSpline::point)> {
  static const MethodInfo* get() {
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTSpline*), "point", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ratio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTSpline::place2d
// Il2CppName: place2d
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTSpline::*)(::UnityEngine::Transform*, float)>(&GlobalNamespace::LTSpline::place2d)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTSpline*), "place2d", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, ratio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTSpline::placeLocal2d
// Il2CppName: placeLocal2d
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTSpline::*)(::UnityEngine::Transform*, float)>(&GlobalNamespace::LTSpline::placeLocal2d)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTSpline*), "placeLocal2d", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, ratio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTSpline::place
// Il2CppName: place
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTSpline::*)(::UnityEngine::Transform*, float)>(&GlobalNamespace::LTSpline::place)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTSpline*), "place", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, ratio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTSpline::place
// Il2CppName: place
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTSpline::*)(::UnityEngine::Transform*, float, ::UnityEngine::Vector3)>(&GlobalNamespace::LTSpline::place)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTSpline*), "place", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, ratio, worldUp});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTSpline::placeLocal
// Il2CppName: placeLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTSpline::*)(::UnityEngine::Transform*, float)>(&GlobalNamespace::LTSpline::placeLocal)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTSpline*), "placeLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, ratio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTSpline::placeLocal
// Il2CppName: placeLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTSpline::*)(::UnityEngine::Transform*, float, ::UnityEngine::Vector3)>(&GlobalNamespace::LTSpline::placeLocal)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* worldUp = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTSpline*), "placeLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, ratio, worldUp});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTSpline::gizmoDraw
// Il2CppName: gizmoDraw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTSpline::*)(float)>(&GlobalNamespace::LTSpline::gizmoDraw)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTSpline*), "gizmoDraw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTSpline::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LTSpline::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTSpline*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
