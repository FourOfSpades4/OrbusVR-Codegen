// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
  // Forward declaring type: Toggle
  class Toggle;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DebugUISample
  class DebugUISample;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DebugUISample);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DebugUISample*, "", "DebugUISample");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: DebugUISample
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugUISample : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Boolean inMenu
    // Size: 0x1
    // Offset: 0x18
    bool inMenu;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: inMenu and: sliderText
    char __padding0[0x7] = {};
    // private UnityEngine.UI.Text sliderText
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Text* sliderText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean inMenu
    [[deprecated("Use field access instead!")]] bool& dyn_inMenu();
    // Get instance field reference: private UnityEngine.UI.Text sliderText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_sliderText();
    // private System.Void Start()
    // Offset: 0xDF0FF4
    void Start();
    // public System.Void TogglePressed(UnityEngine.UI.Toggle t)
    // Offset: 0xDF1490
    void TogglePressed(::UnityEngine::UI::Toggle* t);
    // public System.Void RadioPressed(System.String radioLabel, System.String group, UnityEngine.UI.Toggle t)
    // Offset: 0xDF1558
    void RadioPressed(::StringW radioLabel, ::StringW group, ::UnityEngine::UI::Toggle* t);
    // public System.Void SliderPressed(System.Single f)
    // Offset: 0xDF1814
    void SliderPressed(float f);
    // private System.Void Update()
    // Offset: 0xDF1904
    void Update();
    // private System.Void LogButtonPressed()
    // Offset: 0xDF19F8
    void LogButtonPressed();
    // public System.Void .ctor()
    // Offset: 0xDF1A64
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugUISample* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugUISample::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugUISample*, creationType>()));
    }
    // private System.Void <Start>b__2_0(UnityEngine.UI.Toggle t)
    // Offset: 0xDF1A6C
    void $Start$b__2_0(::UnityEngine::UI::Toggle* t);
    // private System.Void <Start>b__2_1(UnityEngine.UI.Toggle t)
    // Offset: 0xDF1AC8
    void $Start$b__2_1(::UnityEngine::UI::Toggle* t);
    // private System.Void <Start>b__2_2(UnityEngine.UI.Toggle t)
    // Offset: 0xDF1B24
    void $Start$b__2_2(::UnityEngine::UI::Toggle* t);
    // private System.Void <Start>b__2_3(UnityEngine.UI.Toggle t)
    // Offset: 0xDF1B80
    void $Start$b__2_3(::UnityEngine::UI::Toggle* t);
  }; // DebugUISample
  #pragma pack(pop)
  static check_size<sizeof(DebugUISample), 32 + sizeof(::UnityEngine::UI::Text*)> __GlobalNamespace_DebugUISampleSizeCheck;
  static_assert(sizeof(DebugUISample) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DebugUISample::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUISample::*)()>(&GlobalNamespace::DebugUISample::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUISample*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUISample::TogglePressed
// Il2CppName: TogglePressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUISample::*)(::UnityEngine::UI::Toggle*)>(&GlobalNamespace::DebugUISample::TogglePressed)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Toggle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUISample*), "TogglePressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUISample::RadioPressed
// Il2CppName: RadioPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUISample::*)(::StringW, ::StringW, ::UnityEngine::UI::Toggle*)>(&GlobalNamespace::DebugUISample::RadioPressed)> {
  static const MethodInfo* get() {
    static auto* radioLabel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* group = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Toggle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUISample*), "RadioPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{radioLabel, group, t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUISample::SliderPressed
// Il2CppName: SliderPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUISample::*)(float)>(&GlobalNamespace::DebugUISample::SliderPressed)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUISample*), "SliderPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUISample::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUISample::*)()>(&GlobalNamespace::DebugUISample::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUISample*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUISample::LogButtonPressed
// Il2CppName: LogButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUISample::*)()>(&GlobalNamespace::DebugUISample::LogButtonPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUISample*), "LogButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUISample::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::DebugUISample::$Start$b__2_0
// Il2CppName: <Start>b__2_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUISample::*)(::UnityEngine::UI::Toggle*)>(&GlobalNamespace::DebugUISample::$Start$b__2_0)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Toggle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUISample*), "<Start>b__2_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUISample::$Start$b__2_1
// Il2CppName: <Start>b__2_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUISample::*)(::UnityEngine::UI::Toggle*)>(&GlobalNamespace::DebugUISample::$Start$b__2_1)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Toggle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUISample*), "<Start>b__2_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUISample::$Start$b__2_2
// Il2CppName: <Start>b__2_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUISample::*)(::UnityEngine::UI::Toggle*)>(&GlobalNamespace::DebugUISample::$Start$b__2_2)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Toggle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUISample*), "<Start>b__2_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUISample::$Start$b__2_3
// Il2CppName: <Start>b__2_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUISample::*)(::UnityEngine::UI::Toggle*)>(&GlobalNamespace::DebugUISample::$Start$b__2_3)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Toggle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUISample*), "<Start>b__2_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
