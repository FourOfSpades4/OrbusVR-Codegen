// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Space
#include "UnityEngine/Space.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CFX_AutoRotate
  class CFX_AutoRotate;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CFX_AutoRotate);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CFX_AutoRotate*, "", "CFX_AutoRotate");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: CFX_AutoRotate
  // [TokenAttribute] Offset: FFFFFFFF
  class CFX_AutoRotate : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Vector3 rotation
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Space space
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::Space space;
    // Field size check
    static_assert(sizeof(::UnityEngine::Space) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Vector3 rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rotation();
    // Get instance field reference: public UnityEngine.Space space
    [[deprecated("Use field access instead!")]] ::UnityEngine::Space& dyn_space();
    // private System.Void Update()
    // Offset: 0xDDCEC8
    void Update();
    // public System.Void .ctor()
    // Offset: 0xDDCFA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CFX_AutoRotate* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CFX_AutoRotate::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CFX_AutoRotate*, creationType>()));
    }
  }; // CFX_AutoRotate
  #pragma pack(pop)
  static check_size<sizeof(CFX_AutoRotate), 36 + sizeof(::UnityEngine::Space)> __GlobalNamespace_CFX_AutoRotateSizeCheck;
  static_assert(sizeof(CFX_AutoRotate) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CFX_AutoRotate::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CFX_AutoRotate::*)()>(&GlobalNamespace::CFX_AutoRotate::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CFX_AutoRotate*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CFX_AutoRotate::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
