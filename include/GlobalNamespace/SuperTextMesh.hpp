// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.UI.ILayoutElement
#include "UnityEngine/UI/ILayoutElement.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.FilterMode
#include "UnityEngine/FilterMode.hpp"
// Including type: UnityEngine.FontStyle
#include "UnityEngine/FontStyle.hpp"
// Including type: UnityEngine.TextAnchor
#include "UnityEngine/TextAnchor.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: CanvasRenderer
  class CanvasRenderer;
  // Forward declaring type: Font
  class Font;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SuperTextMeshData
  class SuperTextMeshData;
  // Forward declaring type: STMTextInfo
  class STMTextInfo;
  // Forward declaring type: SubMeshData
  class SubMeshData;
  // Forward declaring type: STMDrawAnimData
  class STMDrawAnimData;
  // Forward declaring type: STMColorData
  class STMColorData;
  // Forward declaring type: STMWaveControl
  class STMWaveControl;
  // Forward declaring type: STMWaveRotationControl
  class STMWaveRotationControl;
  // Forward declaring type: STMWaveScaleControl
  class STMWaveScaleControl;
  // Forward declaring type: STMJitterData
  class STMJitterData;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: UnityEngine::SceneManagement
namespace UnityEngine::SceneManagement {
  // Forward declaring type: Scene
  struct Scene;
  // Forward declaring type: LoadSceneMode
  struct LoadSceneMode;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SuperTextMesh
  class SuperTextMesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SuperTextMesh);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SuperTextMesh*, "", "SuperTextMesh");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x500
  #pragma pack(push, 1)
  // Autogenerated type: SuperTextMesh
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: ACDB64
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: ACDB64
  class SuperTextMesh : public ::UnityEngine::MonoBehaviour/*, public ::UnityEngine::UI::ILayoutElement*/ {
    public:
    // Nested type: ::GlobalNamespace::SuperTextMesh::PitchMode
    struct PitchMode;
    // Nested type: ::GlobalNamespace::SuperTextMesh::Alignment
    struct Alignment;
    // Nested type: ::GlobalNamespace::SuperTextMesh::VerticalLimitMode
    struct VerticalLimitMode;
    // Nested type: ::GlobalNamespace::SuperTextMesh::OnCompleteAction
    class OnCompleteAction;
    // Nested type: ::GlobalNamespace::SuperTextMesh::OnUndrawnAction
    class OnUndrawnAction;
    // Nested type: ::GlobalNamespace::SuperTextMesh::OnRebuildAction
    class OnRebuildAction;
    // Nested type: ::GlobalNamespace::SuperTextMesh::OnPrintAction
    class OnPrintAction;
    // Nested type: ::GlobalNamespace::SuperTextMesh::CustomEvent
    class CustomEvent;
    // Nested type: ::GlobalNamespace::SuperTextMesh::OnCustomAction
    class OnCustomAction;
    // Nested type: ::GlobalNamespace::SuperTextMesh::VertexMod
    class VertexMod;
    // Nested type: ::GlobalNamespace::SuperTextMesh::OnVertexModAction
    class OnVertexModAction;
    // Nested type: ::GlobalNamespace::SuperTextMesh::PreParse
    class PreParse;
    // Nested type: ::GlobalNamespace::SuperTextMesh::OnPreParseAction
    class OnPreParseAction;
    // Nested type: ::GlobalNamespace::SuperTextMesh::DrawOrder
    struct DrawOrder;
    // Nested type: ::GlobalNamespace::SuperTextMesh::BestFitMode
    struct BestFitMode;
    // Nested type: ::GlobalNamespace::SuperTextMesh::$WaitFrameThenRebuild$d__196
    class $WaitFrameThenRebuild$d__196;
    // Nested type: ::GlobalNamespace::SuperTextMesh::$ReadOutText$d__230
    class $ReadOutText$d__230;
    // Nested type: ::GlobalNamespace::SuperTextMesh::$UnReadOutText$d__232
    class $UnReadOutText$d__232;
    // Nested type: ::GlobalNamespace::SuperTextMesh::$$c__DisplayClass235_0
    class $$c__DisplayClass235_0;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SuperTextMesh/PitchMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct PitchMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: PitchMode
      constexpr PitchMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SuperTextMesh/PitchMode Normal
      static constexpr const int Normal = 0;
      // Get static field: static public SuperTextMesh/PitchMode Normal
      static ::GlobalNamespace::SuperTextMesh::PitchMode _get_Normal();
      // Set static field: static public SuperTextMesh/PitchMode Normal
      static void _set_Normal(::GlobalNamespace::SuperTextMesh::PitchMode value);
      // static field const value: static public SuperTextMesh/PitchMode Single
      static constexpr const int Single = 1;
      // Get static field: static public SuperTextMesh/PitchMode Single
      static ::GlobalNamespace::SuperTextMesh::PitchMode _get_Single();
      // Set static field: static public SuperTextMesh/PitchMode Single
      static void _set_Single(::GlobalNamespace::SuperTextMesh::PitchMode value);
      // static field const value: static public SuperTextMesh/PitchMode Random
      static constexpr const int Random = 2;
      // Get static field: static public SuperTextMesh/PitchMode Random
      static ::GlobalNamespace::SuperTextMesh::PitchMode _get_Random();
      // Set static field: static public SuperTextMesh/PitchMode Random
      static void _set_Random(::GlobalNamespace::SuperTextMesh::PitchMode value);
      // static field const value: static public SuperTextMesh/PitchMode Perlin
      static constexpr const int Perlin = 3;
      // Get static field: static public SuperTextMesh/PitchMode Perlin
      static ::GlobalNamespace::SuperTextMesh::PitchMode _get_Perlin();
      // Set static field: static public SuperTextMesh/PitchMode Perlin
      static void _set_Perlin(::GlobalNamespace::SuperTextMesh::PitchMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SuperTextMesh/PitchMode
    #pragma pack(pop)
    static check_size<sizeof(SuperTextMesh::PitchMode), 0 + sizeof(int)> __GlobalNamespace_SuperTextMesh_PitchModeSizeCheck;
    static_assert(sizeof(SuperTextMesh::PitchMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SuperTextMesh/Alignment
    // [TokenAttribute] Offset: FFFFFFFF
    struct Alignment/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Alignment
      constexpr Alignment(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SuperTextMesh/Alignment Left
      static constexpr const int Left = 0;
      // Get static field: static public SuperTextMesh/Alignment Left
      static ::GlobalNamespace::SuperTextMesh::Alignment _get_Left();
      // Set static field: static public SuperTextMesh/Alignment Left
      static void _set_Left(::GlobalNamespace::SuperTextMesh::Alignment value);
      // static field const value: static public SuperTextMesh/Alignment Center
      static constexpr const int Center = 1;
      // Get static field: static public SuperTextMesh/Alignment Center
      static ::GlobalNamespace::SuperTextMesh::Alignment _get_Center();
      // Set static field: static public SuperTextMesh/Alignment Center
      static void _set_Center(::GlobalNamespace::SuperTextMesh::Alignment value);
      // static field const value: static public SuperTextMesh/Alignment Right
      static constexpr const int Right = 2;
      // Get static field: static public SuperTextMesh/Alignment Right
      static ::GlobalNamespace::SuperTextMesh::Alignment _get_Right();
      // Set static field: static public SuperTextMesh/Alignment Right
      static void _set_Right(::GlobalNamespace::SuperTextMesh::Alignment value);
      // static field const value: static public SuperTextMesh/Alignment Justified
      static constexpr const int Justified = 3;
      // Get static field: static public SuperTextMesh/Alignment Justified
      static ::GlobalNamespace::SuperTextMesh::Alignment _get_Justified();
      // Set static field: static public SuperTextMesh/Alignment Justified
      static void _set_Justified(::GlobalNamespace::SuperTextMesh::Alignment value);
      // static field const value: static public SuperTextMesh/Alignment ForceJustified
      static constexpr const int ForceJustified = 4;
      // Get static field: static public SuperTextMesh/Alignment ForceJustified
      static ::GlobalNamespace::SuperTextMesh::Alignment _get_ForceJustified();
      // Set static field: static public SuperTextMesh/Alignment ForceJustified
      static void _set_ForceJustified(::GlobalNamespace::SuperTextMesh::Alignment value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SuperTextMesh/Alignment
    #pragma pack(pop)
    static check_size<sizeof(SuperTextMesh::Alignment), 0 + sizeof(int)> __GlobalNamespace_SuperTextMesh_AlignmentSizeCheck;
    static_assert(sizeof(SuperTextMesh::Alignment) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SuperTextMesh/VerticalLimitMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct VerticalLimitMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: VerticalLimitMode
      constexpr VerticalLimitMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SuperTextMesh/VerticalLimitMode ShowLast
      static constexpr const int ShowLast = 0;
      // Get static field: static public SuperTextMesh/VerticalLimitMode ShowLast
      static ::GlobalNamespace::SuperTextMesh::VerticalLimitMode _get_ShowLast();
      // Set static field: static public SuperTextMesh/VerticalLimitMode ShowLast
      static void _set_ShowLast(::GlobalNamespace::SuperTextMesh::VerticalLimitMode value);
      // static field const value: static public SuperTextMesh/VerticalLimitMode CutOff
      static constexpr const int CutOff = 1;
      // Get static field: static public SuperTextMesh/VerticalLimitMode CutOff
      static ::GlobalNamespace::SuperTextMesh::VerticalLimitMode _get_CutOff();
      // Set static field: static public SuperTextMesh/VerticalLimitMode CutOff
      static void _set_CutOff(::GlobalNamespace::SuperTextMesh::VerticalLimitMode value);
      // static field const value: static public SuperTextMesh/VerticalLimitMode Ignore
      static constexpr const int Ignore = 2;
      // Get static field: static public SuperTextMesh/VerticalLimitMode Ignore
      static ::GlobalNamespace::SuperTextMesh::VerticalLimitMode _get_Ignore();
      // Set static field: static public SuperTextMesh/VerticalLimitMode Ignore
      static void _set_Ignore(::GlobalNamespace::SuperTextMesh::VerticalLimitMode value);
      // static field const value: static public SuperTextMesh/VerticalLimitMode AutoPause
      static constexpr const int AutoPause = 3;
      // Get static field: static public SuperTextMesh/VerticalLimitMode AutoPause
      static ::GlobalNamespace::SuperTextMesh::VerticalLimitMode _get_AutoPause();
      // Set static field: static public SuperTextMesh/VerticalLimitMode AutoPause
      static void _set_AutoPause(::GlobalNamespace::SuperTextMesh::VerticalLimitMode value);
      // static field const value: static public SuperTextMesh/VerticalLimitMode AutoPauseFull
      static constexpr const int AutoPauseFull = 4;
      // Get static field: static public SuperTextMesh/VerticalLimitMode AutoPauseFull
      static ::GlobalNamespace::SuperTextMesh::VerticalLimitMode _get_AutoPauseFull();
      // Set static field: static public SuperTextMesh/VerticalLimitMode AutoPauseFull
      static void _set_AutoPauseFull(::GlobalNamespace::SuperTextMesh::VerticalLimitMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SuperTextMesh/VerticalLimitMode
    #pragma pack(pop)
    static check_size<sizeof(SuperTextMesh::VerticalLimitMode), 0 + sizeof(int)> __GlobalNamespace_SuperTextMesh_VerticalLimitModeSizeCheck;
    static_assert(sizeof(SuperTextMesh::VerticalLimitMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SuperTextMesh/DrawOrder
    // [TokenAttribute] Offset: FFFFFFFF
    struct DrawOrder/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DrawOrder
      constexpr DrawOrder(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SuperTextMesh/DrawOrder LeftToRight
      static constexpr const int LeftToRight = 0;
      // Get static field: static public SuperTextMesh/DrawOrder LeftToRight
      static ::GlobalNamespace::SuperTextMesh::DrawOrder _get_LeftToRight();
      // Set static field: static public SuperTextMesh/DrawOrder LeftToRight
      static void _set_LeftToRight(::GlobalNamespace::SuperTextMesh::DrawOrder value);
      // static field const value: static public SuperTextMesh/DrawOrder AllAtOnce
      static constexpr const int AllAtOnce = 1;
      // Get static field: static public SuperTextMesh/DrawOrder AllAtOnce
      static ::GlobalNamespace::SuperTextMesh::DrawOrder _get_AllAtOnce();
      // Set static field: static public SuperTextMesh/DrawOrder AllAtOnce
      static void _set_AllAtOnce(::GlobalNamespace::SuperTextMesh::DrawOrder value);
      // static field const value: static public SuperTextMesh/DrawOrder OneWordAtATime
      static constexpr const int OneWordAtATime = 2;
      // Get static field: static public SuperTextMesh/DrawOrder OneWordAtATime
      static ::GlobalNamespace::SuperTextMesh::DrawOrder _get_OneWordAtATime();
      // Set static field: static public SuperTextMesh/DrawOrder OneWordAtATime
      static void _set_OneWordAtATime(::GlobalNamespace::SuperTextMesh::DrawOrder value);
      // static field const value: static public SuperTextMesh/DrawOrder Random
      static constexpr const int Random = 3;
      // Get static field: static public SuperTextMesh/DrawOrder Random
      static ::GlobalNamespace::SuperTextMesh::DrawOrder _get_Random();
      // Set static field: static public SuperTextMesh/DrawOrder Random
      static void _set_Random(::GlobalNamespace::SuperTextMesh::DrawOrder value);
      // static field const value: static public SuperTextMesh/DrawOrder RightToLeft
      static constexpr const int RightToLeft = 4;
      // Get static field: static public SuperTextMesh/DrawOrder RightToLeft
      static ::GlobalNamespace::SuperTextMesh::DrawOrder _get_RightToLeft();
      // Set static field: static public SuperTextMesh/DrawOrder RightToLeft
      static void _set_RightToLeft(::GlobalNamespace::SuperTextMesh::DrawOrder value);
      // static field const value: static public SuperTextMesh/DrawOrder ReverseLTR
      static constexpr const int ReverseLTR = 5;
      // Get static field: static public SuperTextMesh/DrawOrder ReverseLTR
      static ::GlobalNamespace::SuperTextMesh::DrawOrder _get_ReverseLTR();
      // Set static field: static public SuperTextMesh/DrawOrder ReverseLTR
      static void _set_ReverseLTR(::GlobalNamespace::SuperTextMesh::DrawOrder value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SuperTextMesh/DrawOrder
    #pragma pack(pop)
    static check_size<sizeof(SuperTextMesh::DrawOrder), 0 + sizeof(int)> __GlobalNamespace_SuperTextMesh_DrawOrderSizeCheck;
    static_assert(sizeof(SuperTextMesh::DrawOrder) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SuperTextMesh/BestFitMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct BestFitMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BestFitMode
      constexpr BestFitMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SuperTextMesh/BestFitMode Off
      static constexpr const int Off = 0;
      // Get static field: static public SuperTextMesh/BestFitMode Off
      static ::GlobalNamespace::SuperTextMesh::BestFitMode _get_Off();
      // Set static field: static public SuperTextMesh/BestFitMode Off
      static void _set_Off(::GlobalNamespace::SuperTextMesh::BestFitMode value);
      // static field const value: static public SuperTextMesh/BestFitMode Always
      static constexpr const int Always = 1;
      // Get static field: static public SuperTextMesh/BestFitMode Always
      static ::GlobalNamespace::SuperTextMesh::BestFitMode _get_Always();
      // Set static field: static public SuperTextMesh/BestFitMode Always
      static void _set_Always(::GlobalNamespace::SuperTextMesh::BestFitMode value);
      // static field const value: static public SuperTextMesh/BestFitMode OverLimit
      static constexpr const int OverLimit = 2;
      // Get static field: static public SuperTextMesh/BestFitMode OverLimit
      static ::GlobalNamespace::SuperTextMesh::BestFitMode _get_OverLimit();
      // Set static field: static public SuperTextMesh/BestFitMode OverLimit
      static void _set_OverLimit(::GlobalNamespace::SuperTextMesh::BestFitMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SuperTextMesh/BestFitMode
    #pragma pack(pop)
    static check_size<sizeof(SuperTextMesh::BestFitMode), 0 + sizeof(int)> __GlobalNamespace_SuperTextMesh_BestFitModeSizeCheck;
    static_assert(sizeof(SuperTextMesh::BestFitMode) == 0x4);
    public:
    // public System.Boolean showAppearanceFoldout
    // Size: 0x1
    // Offset: 0x18
    bool showAppearanceFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showMaterialFoldout
    // Size: 0x1
    // Offset: 0x19
    bool showMaterialFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showPositionFoldout
    // Size: 0x1
    // Offset: 0x1A
    bool showPositionFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showTimingFoldout
    // Size: 0x1
    // Offset: 0x1B
    bool showTimingFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showFunctionalityFoldout
    // Size: 0x1
    // Offset: 0x1C
    bool showFunctionalityFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showAudioFoldout
    // Size: 0x1
    // Offset: 0x1D
    bool showAudioFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showEventFoldout
    // Size: 0x1
    // Offset: 0x1E
    bool showEventFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showEventFoldout and: t
    char __padding6[0x1] = {};
    // private UnityEngine.Transform _t
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* t;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.MeshFilter _f
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MeshFilter* f;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // private UnityEngine.MeshRenderer _r
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::MeshRenderer* r;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.CanvasRenderer _c
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::CanvasRenderer* c;
    // Field size check
    static_assert(sizeof(::UnityEngine::CanvasRenderer*) == 0x8);
    // public System.Collections.Generic.List`1<STMTextInfo> info
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::GlobalNamespace::STMTextInfo*>* info;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::STMTextInfo*>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> lineBreaks
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<int>* lineBreaks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Single> lineHeights
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<float>* lineHeights;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<float>*) == 0x8);
    // [TextAreaAttribute] Offset: 0xAD9204
    // [FormerlySerializedAsAttribute] Offset: 0xAD9204
    // public System.String _text
    // Size: 0x8
    // Offset: 0x58
    ::StringW text;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String drawText
    // Size: 0x8
    // Offset: 0x60
    ::StringW drawText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String hyphenedText
    // Size: 0x8
    // Offset: 0x68
    ::StringW hyphenedText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [TooltipAttribute] Offset: 0xAD9278
    // public UnityEngine.Font font
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Font* font;
    // Field size check
    static_assert(sizeof(::UnityEngine::Font*) == 0x8);
    // [TooltipAttribute] Offset: 0xAD92B0
    // public UnityEngine.Color32 color
    // Size: 0x4
    // Offset: 0x78
    ::UnityEngine::Color32 color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // [TooltipAttribute] Offset: 0xAD92E8
    // public System.Boolean richText
    // Size: 0x1
    // Offset: 0x7C
    bool richText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: richText and: readDelay
    char __padding19[0x3] = {};
    // [TooltipAttribute] Offset: 0xAD9320
    // public System.Single readDelay
    // Size: 0x4
    // Offset: 0x80
    float readDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAD9358
    // public System.Single speedReadScale
    // Size: 0x4
    // Offset: 0x84
    float speedReadScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAD9390
    // public System.Boolean ignoreTimeScale
    // Size: 0x1
    // Offset: 0x88
    bool ignoreTimeScale;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean disableAnimatedText
    // Size: 0x1
    // Offset: 0x89
    bool disableAnimatedText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disableAnimatedText and: drawAnimName
    char __padding23[0x6] = {};
    // [TooltipAttribute] Offset: 0xAD93C8
    // public System.String drawAnimName
    // Size: 0x8
    // Offset: 0x90
    ::StringW drawAnimName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [TooltipAttribute] Offset: 0xAD9400
    // public System.Single unreadDelay
    // Size: 0x4
    // Offset: 0x98
    float unreadDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAD9438
    // public SuperTextMesh/DrawOrder undrawOrder
    // Size: 0x4
    // Offset: 0x9C
    ::GlobalNamespace::SuperTextMesh::DrawOrder undrawOrder;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::DrawOrder) == 0x4);
    // [TooltipAttribute] Offset: 0xAD9470
    // public System.String undrawAnimName
    // Size: 0x8
    // Offset: 0xA0
    ::StringW undrawAnimName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [TooltipAttribute] Offset: 0xAD94A8
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // [TooltipAttribute] Offset: 0xAD94E0
    // public UnityEngine.AudioClip[] audioClips
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<::UnityEngine::AudioClip*> audioClips;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // [TooltipAttribute] Offset: 0xAD9518
    // public System.Boolean stopPreviousSound
    // Size: 0x1
    // Offset: 0xB8
    bool stopPreviousSound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: stopPreviousSound and: pitchMode
    char __padding30[0x3] = {};
    // [TooltipAttribute] Offset: 0xAD9550
    // public SuperTextMesh/PitchMode pitchMode
    // Size: 0x4
    // Offset: 0xBC
    ::GlobalNamespace::SuperTextMesh::PitchMode pitchMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::PitchMode) == 0x4);
    // [RangeAttribute] Offset: 0xAD9588
    // [TooltipAttribute] Offset: 0xAD9588
    // public System.Single overridePitch
    // Size: 0x4
    // Offset: 0xC0
    float overridePitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xAD95DC
    // [TooltipAttribute] Offset: 0xAD95DC
    // public System.Single minPitch
    // Size: 0x4
    // Offset: 0xC4
    float minPitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAD9630
    // [RangeAttribute] Offset: 0xAD9630
    // public System.Single maxPitch
    // Size: 0x4
    // Offset: 0xC8
    float maxPitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xAD9684
    // [TooltipAttribute] Offset: 0xAD9684
    // public System.Single speedReadPitch
    // Size: 0x4
    // Offset: 0xCC
    float speedReadPitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAD96D8
    // public System.Single perlinPitchMulti
    // Size: 0x4
    // Offset: 0xD0
    float perlinPitchMulti;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean speedReading
    // Size: 0x1
    // Offset: 0xD4
    bool speedReading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean skippingToEnd
    // Size: 0x1
    // Offset: 0xD5
    bool skippingToEnd;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean reading
    // Size: 0x1
    // Offset: 0xD6
    bool reading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: reading and: readRoutine
    char __padding39[0x1] = {};
    // private UnityEngine.Coroutine readRoutine
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::Coroutine* readRoutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // public System.Boolean unreading
    // Size: 0x1
    // Offset: 0xE0
    bool unreading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: unreading and: size
    char __padding41[0x3] = {};
    // [TooltipAttribute] Offset: 0xAD9730
    // public System.Single size
    // Size: 0x4
    // Offset: 0xE4
    float size;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single bestFitMulti
    // Size: 0x4
    // Offset: 0xE8
    float bestFitMulti;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAD9778
    // [RangeAttribute] Offset: 0xAD9778
    // public System.Int32 quality
    // Size: 0x4
    // Offset: 0xEC
    int quality;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0xAD97D0
    // public UnityEngine.FilterMode filterMode
    // Size: 0x4
    // Offset: 0xF0
    ::UnityEngine::FilterMode filterMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::FilterMode) == 0x4);
    // [TooltipAttribute] Offset: 0xAD9808
    // public UnityEngine.FontStyle style
    // Size: 0x4
    // Offset: 0xF4
    ::UnityEngine::FontStyle style;
    // Field size check
    static_assert(sizeof(::UnityEngine::FontStyle) == 0x4);
    // [TooltipAttribute] Offset: 0xAD9840
    // public UnityEngine.Vector3 baseOffset
    // Size: 0xC
    // Offset: 0xF8
    ::UnityEngine::Vector3 baseOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xAD9878
    // public System.Single lineSpacing
    // Size: 0x4
    // Offset: 0x104
    float lineSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAD98B0
    // public System.Single characterSpacing
    // Size: 0x4
    // Offset: 0x108
    float characterSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAD98E8
    // public System.Single tabSize
    // Size: 0x4
    // Offset: 0x10C
    float tabSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAD9920
    // public System.Single autoWrap
    // Size: 0x4
    // Offset: 0x110
    float autoWrap;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAD9958
    // public System.Boolean uiWrap
    // Size: 0x1
    // Offset: 0x114
    bool uiWrap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xAD9990
    // public System.Boolean uiLimit
    // Size: 0x1
    // Offset: 0x115
    bool uiLimit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xAD99C8
    // public System.Boolean breakText
    // Size: 0x1
    // Offset: 0x116
    bool breakText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xAD9A00
    // public System.Boolean insertHyphens
    // Size: 0x1
    // Offset: 0x117
    bool insertHyphens;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xAD9A38
    // public UnityEngine.TextAnchor anchor
    // Size: 0x4
    // Offset: 0x118
    ::UnityEngine::TextAnchor anchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextAnchor) == 0x4);
    // [TooltipAttribute] Offset: 0xAD9A70
    // public SuperTextMesh/Alignment alignment
    // Size: 0x4
    // Offset: 0x11C
    ::GlobalNamespace::SuperTextMesh::Alignment alignment;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::Alignment) == 0x4);
    // [TooltipAttribute] Offset: 0xAD9AA8
    // public System.Single verticalLimit
    // Size: 0x4
    // Offset: 0x120
    float verticalLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAD9AE0
    // public SuperTextMesh/VerticalLimitMode verticalLimitMode
    // Size: 0x4
    // Offset: 0x124
    ::GlobalNamespace::SuperTextMesh::VerticalLimitMode verticalLimitMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::VerticalLimitMode) == 0x4);
    // public System.String leftoverText
    // Size: 0x8
    // Offset: 0x128
    ::StringW leftoverText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [TooltipAttribute] Offset: 0xAD9B18
    // [FormerlySerializedAsAttribute] Offset: 0xAD9B18
    // public UnityEngine.Material textMaterial
    // Size: 0x8
    // Offset: 0x130
    ::UnityEngine::Material* textMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Mesh textMesh
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::Mesh* textMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private System.Boolean areWeAnimating
    // Size: 0x1
    // Offset: 0x140
    bool areWeAnimating;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: areWeAnimating and: rawTopLeftBounds
    char __padding63[0x3] = {};
    // public UnityEngine.Vector3 rawTopLeftBounds
    // Size: 0xC
    // Offset: 0x144
    ::UnityEngine::Vector3 rawTopLeftBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 rawBottomRightBounds
    // Size: 0xC
    // Offset: 0x150
    ::UnityEngine::Vector3 rawBottomRightBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 rawBottomRightTextBounds
    // Size: 0xC
    // Offset: 0x15C
    ::UnityEngine::Vector3 rawBottomRightTextBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 topLeftBounds
    // Size: 0xC
    // Offset: 0x168
    ::UnityEngine::Vector3 topLeftBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 topRightBounds
    // Size: 0xC
    // Offset: 0x174
    ::UnityEngine::Vector3 topRightBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 bottomLeftBounds
    // Size: 0xC
    // Offset: 0x180
    ::UnityEngine::Vector3 bottomLeftBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 bottomRightBounds
    // Size: 0xC
    // Offset: 0x18C
    ::UnityEngine::Vector3 bottomRightBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 centerBounds
    // Size: 0xC
    // Offset: 0x198
    ::UnityEngine::Vector3 centerBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 topLeftTextBounds
    // Size: 0xC
    // Offset: 0x1A4
    ::UnityEngine::Vector3 topLeftTextBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 topRightTextBounds
    // Size: 0xC
    // Offset: 0x1B0
    ::UnityEngine::Vector3 topRightTextBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 bottomLeftTextBounds
    // Size: 0xC
    // Offset: 0x1BC
    ::UnityEngine::Vector3 bottomLeftTextBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 bottomRightTextBounds
    // Size: 0xC
    // Offset: 0x1C8
    ::UnityEngine::Vector3 bottomRightTextBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 centerTextBounds
    // Size: 0xC
    // Offset: 0x1D4
    ::UnityEngine::Vector3 centerTextBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 finalTopLeftTextBounds
    // Size: 0xC
    // Offset: 0x1E0
    ::UnityEngine::Vector3 finalTopLeftTextBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 finalTopRightTextBounds
    // Size: 0xC
    // Offset: 0x1EC
    ::UnityEngine::Vector3 finalTopRightTextBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 finalBottomLeftTextBounds
    // Size: 0xC
    // Offset: 0x1F8
    ::UnityEngine::Vector3 finalBottomLeftTextBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 finalBottomRightTextBounds
    // Size: 0xC
    // Offset: 0x204
    ::UnityEngine::Vector3 finalBottomRightTextBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 finalCenterTextBounds
    // Size: 0xC
    // Offset: 0x210
    ::UnityEngine::Vector3 finalCenterTextBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single lowestPosition
    // Size: 0x4
    // Offset: 0x21C
    float lowestPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lowestDrawnPosition
    // Size: 0x4
    // Offset: 0x220
    float lowestDrawnPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lowestDrawnPositionRaw
    // Size: 0x4
    // Offset: 0x224
    float lowestDrawnPositionRaw;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single furthestDrawnPosition
    // Size: 0x4
    // Offset: 0x228
    float furthestDrawnPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single totalWidth
    // Size: 0x4
    // Offset: 0x22C
    float totalWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 unwrappedBottomRightTextBounds
    // Size: 0xC
    // Offset: 0x230
    ::UnityEngine::Vector3 unwrappedBottomRightTextBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: unwrappedBottomRightTextBounds and: onCompleteEvent
    char __padding87[0x4] = {};
    // public UnityEngine.Events.UnityEvent onCompleteEvent
    // Size: 0x8
    // Offset: 0x240
    ::UnityEngine::Events::UnityEvent* onCompleteEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAD9C98
    // private SuperTextMesh/OnCompleteAction OnCompleteEvent
    // Size: 0x8
    // Offset: 0x248
    ::GlobalNamespace::SuperTextMesh::OnCompleteAction* OnCompleteEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::OnCompleteAction*) == 0x8);
    // public UnityEngine.Events.UnityEvent onUndrawnEvent
    // Size: 0x8
    // Offset: 0x250
    ::UnityEngine::Events::UnityEvent* onUndrawnEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAD9CA8
    // private SuperTextMesh/OnUndrawnAction OnUndrawnEvent
    // Size: 0x8
    // Offset: 0x258
    ::GlobalNamespace::SuperTextMesh::OnUndrawnAction* OnUndrawnEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::OnUndrawnAction*) == 0x8);
    // public UnityEngine.Events.UnityEvent onRebuildEvent
    // Size: 0x8
    // Offset: 0x260
    ::UnityEngine::Events::UnityEvent* onRebuildEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAD9CB8
    // private SuperTextMesh/OnRebuildAction OnRebuildEvent
    // Size: 0x8
    // Offset: 0x268
    ::GlobalNamespace::SuperTextMesh::OnRebuildAction* OnRebuildEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::OnRebuildAction*) == 0x8);
    // public UnityEngine.Events.UnityEvent onPrintEvent
    // Size: 0x8
    // Offset: 0x270
    ::UnityEngine::Events::UnityEvent* onPrintEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAD9CC8
    // private SuperTextMesh/OnPrintAction OnPrintEvent
    // Size: 0x8
    // Offset: 0x278
    ::GlobalNamespace::SuperTextMesh::OnPrintAction* OnPrintEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::OnPrintAction*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xAD9CD8
    // public SuperTextMesh/CustomEvent onCustomEvent
    // Size: 0x8
    // Offset: 0x280
    ::GlobalNamespace::SuperTextMesh::CustomEvent* onCustomEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::CustomEvent*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAD9D10
    // private SuperTextMesh/OnCustomAction OnCustomEvent
    // Size: 0x8
    // Offset: 0x288
    ::GlobalNamespace::SuperTextMesh::OnCustomAction* OnCustomEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::OnCustomAction*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xAD9D20
    // public SuperTextMesh/VertexMod onVertexMod
    // Size: 0x8
    // Offset: 0x290
    ::GlobalNamespace::SuperTextMesh::VertexMod* onVertexMod;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::VertexMod*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAD9D58
    // private SuperTextMesh/OnVertexModAction OnVertexMod
    // Size: 0x8
    // Offset: 0x298
    ::GlobalNamespace::SuperTextMesh::OnVertexModAction* OnVertexMod;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::OnVertexModAction*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xAD9D68
    // public SuperTextMesh/PreParse onPreParse
    // Size: 0x8
    // Offset: 0x2A0
    ::GlobalNamespace::SuperTextMesh::PreParse* onPreParse;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::PreParse*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAD9DA0
    // private SuperTextMesh/OnPreParseAction OnPreParse
    // Size: 0x8
    // Offset: 0x2A8
    ::GlobalNamespace::SuperTextMesh::OnPreParseAction* OnPreParse;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::OnPreParseAction*) == 0x8);
    // public System.Boolean debugMode
    // Size: 0x1
    // Offset: 0x2B0
    bool debugMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugMode and: totalReadTime
    char __padding102[0x3] = {};
    // public System.Single totalReadTime
    // Size: 0x4
    // Offset: 0x2B4
    float totalReadTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single totalUnreadTime
    // Size: 0x4
    // Offset: 0x2B8
    float totalUnreadTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single currentReadTime
    // Size: 0x4
    // Offset: 0x2BC
    float currentReadTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3[] endVerts
    // Size: 0x8
    // Offset: 0x2C0
    ::ArrayW<::UnityEngine::Vector3> endVerts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Color32[] endCol32
    // Size: 0x8
    // Offset: 0x2C8
    ::ArrayW<::UnityEngine::Color32> endCol32;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color32>) == 0x8);
    // private UnityEngine.Vector2[] endUv
    // Size: 0x8
    // Offset: 0x2D0
    ::ArrayW<::UnityEngine::Vector2> endUv;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private UnityEngine.Vector2[] endUv2
    // Size: 0x8
    // Offset: 0x2D8
    ::ArrayW<::UnityEngine::Vector2> endUv2;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector4> ratiosAndUvMids
    // Size: 0x8
    // Offset: 0x2E0
    ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* ratiosAndUvMids;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector4>*) == 0x8);
    // private UnityEngine.Vector3[] startVerts
    // Size: 0x8
    // Offset: 0x2E8
    ::ArrayW<::UnityEngine::Vector3> startVerts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Color32[] startCol32
    // Size: 0x8
    // Offset: 0x2F0
    ::ArrayW<::UnityEngine::Color32> startCol32;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color32>) == 0x8);
    // private UnityEngine.Vector3[] midVerts
    // Size: 0x8
    // Offset: 0x2F8
    ::ArrayW<::UnityEngine::Vector3> midVerts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Color32[] midCol32
    // Size: 0x8
    // Offset: 0x300
    ::ArrayW<::UnityEngine::Color32> midCol32;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color32>) == 0x8);
    // private System.Collections.Generic.List`1<SubMeshData> subMeshes
    // Size: 0x8
    // Offset: 0x308
    ::System::Collections::Generic::List_1<::GlobalNamespace::SubMeshData*>* subMeshes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::SubMeshData*>*) == 0x8);
    // private System.Single timeDrawn
    // Size: 0x4
    // Offset: 0x310
    float timeDrawn;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAD9DE0
    // public System.Boolean autoRead
    // Size: 0x1
    // Offset: 0x314
    bool autoRead;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xAD9E18
    // public System.Boolean rememberReadPosition
    // Size: 0x1
    // Offset: 0x315
    bool rememberReadPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xAD9E50
    // public System.Boolean autoQuality
    // Size: 0x1
    // Offset: 0x316
    bool autoQuality;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoQuality and: drawOrder
    char __padding119[0x1] = {};
    // [TooltipAttribute] Offset: 0xAD9E88
    // public SuperTextMesh/DrawOrder drawOrder
    // Size: 0x4
    // Offset: 0x318
    ::GlobalNamespace::SuperTextMesh::DrawOrder drawOrder;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::DrawOrder) == 0x4);
    // private System.Boolean callReadFunction
    // Size: 0x1
    // Offset: 0x31C
    bool callReadFunction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: callReadFunction and: pauseCount
    char __padding121[0x3] = {};
    // private System.Int32 pauseCount
    // Size: 0x4
    // Offset: 0x320
    int pauseCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 currentPauseCount
    // Size: 0x4
    // Offset: 0x324
    int currentPauseCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single autoPauseStopPoint
    // Size: 0x4
    // Offset: 0x328
    float autoPauseStopPoint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: autoPauseStopPoint and: allTags
    char __padding124[0x4] = {};
    // private System.Collections.Generic.List`1<System.Collections.Generic.KeyValuePair`2<System.Int32,System.String>> allTags
    // Size: 0x8
    // Offset: 0x330
    ::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<int, ::StringW>>* allTags;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<int, ::StringW>>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Font> allFonts
    // Size: 0x8
    // Offset: 0x338
    ::System::Collections::Generic::List_1<::UnityEngine::Font*>* allFonts;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Font*>*) == 0x8);
    // public SuperTextMesh/BestFitMode bestFit
    // Size: 0x4
    // Offset: 0x340
    ::GlobalNamespace::SuperTextMesh::BestFitMode bestFit;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh::BestFitMode) == 0x4);
    // private System.Boolean applicationFocused
    // Size: 0x1
    // Offset: 0x344
    bool applicationFocused;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: applicationFocused and: latestNumber
    char __padding128[0x3] = {};
    // public System.Int32 latestNumber
    // Size: 0x4
    // Offset: 0x348
    int latestNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single currentUnReadTime
    // Size: 0x4
    // Offset: 0x34C
    float currentUnReadTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.String preParsedText
    // Size: 0x8
    // Offset: 0x350
    ::StringW preParsedText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Vector3 offset
    // Size: 0xC
    // Offset: 0x358
    ::UnityEngine::Vector3 offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 uiOffset
    // Size: 0xC
    // Offset: 0x364
    ::UnityEngine::Vector3 uiOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 anchorOffset
    // Size: 0xC
    // Offset: 0x370
    ::UnityEngine::Vector3 anchorOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 TextBounds_leftOffset
    // Size: 0xC
    // Offset: 0x37C
    ::UnityEngine::Vector3 TextBounds_leftOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 TextBounds_rightOffset
    // Size: 0xC
    // Offset: 0x388
    ::UnityEngine::Vector3 TextBounds_rightOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single TextBounds_diff
    // Size: 0x4
    // Offset: 0x394
    float TextBounds_diff;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32[] drawOrderRTL
    // Size: 0x8
    // Offset: 0x398
    ::ArrayW<int> drawOrderRTL;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private UnityEngine.Vector3 WavePosition_Vect
    // Size: 0xC
    // Offset: 0x3A0
    ::UnityEngine::Vector3 WavePosition_Vect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 WaveRotation_Pivot
    // Size: 0xC
    // Offset: 0x3AC
    ::UnityEngine::Vector3 WaveRotation_Pivot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 WaveRotation_Offset
    // Size: 0xC
    // Offset: 0x3B8
    ::UnityEngine::Vector3 WaveRotation_Offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 WaveRotation_ReturnVal
    // Size: 0xC
    // Offset: 0x3C4
    ::UnityEngine::Vector3 WaveRotation_ReturnVal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 WaveRotation_myRotation
    // Size: 0xC
    // Offset: 0x3D0
    ::UnityEngine::Vector3 WaveRotation_myRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion WaveRotation_myQuaternion
    // Size: 0x10
    // Offset: 0x3DC
    ::UnityEngine::Quaternion WaveRotation_myQuaternion;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 JitterValue_MyJit
    // Size: 0xC
    // Offset: 0x3EC
    ::UnityEngine::Vector3 JitterValue_MyJit;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 UpdateMesh_waveValue
    // Size: 0xC
    // Offset: 0x3F8
    ::UnityEngine::Vector3 UpdateMesh_waveValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 UpdateMesh_waveValueTopLeft
    // Size: 0xC
    // Offset: 0x404
    ::UnityEngine::Vector3 UpdateMesh_waveValueTopLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 UpdateMesh_waveValueTopRight
    // Size: 0xC
    // Offset: 0x410
    ::UnityEngine::Vector3 UpdateMesh_waveValueTopRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 UpdateMesh_waveValueBottomRight
    // Size: 0xC
    // Offset: 0x41C
    ::UnityEngine::Vector3 UpdateMesh_waveValueBottomRight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 UpdateMesh_waveValueBottomLeft
    // Size: 0xC
    // Offset: 0x428
    ::UnityEngine::Vector3 UpdateMesh_waveValueBottomLeft;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 UpdateMesh_lowestLineOffset
    // Size: 0xC
    // Offset: 0x434
    ::UnityEngine::Vector3 UpdateMesh_lowestLineOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 UpdateMesh_wavePosition
    // Size: 0xC
    // Offset: 0x440
    ::UnityEngine::Vector3 UpdateMesh_wavePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector2 UpdateMesh_uvOffset
    // Size: 0x8
    // Offset: 0x44C
    ::UnityEngine::Vector2 UpdateMesh_uvOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // Padding between fields: UpdateMesh_uvOffset and: CurrentTextInfo
    char __padding153[0x4] = {};
    // private STMTextInfo CurrentTextInfo
    // Size: 0x8
    // Offset: 0x458
    ::GlobalNamespace::STMTextInfo* CurrentTextInfo;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMTextInfo*) == 0x8);
    // private UnityEngine.Vector3[] UpdateMesh_Middles
    // Size: 0x8
    // Offset: 0x460
    ::ArrayW<::UnityEngine::Vector3> UpdateMesh_Middles;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3[] UpdateMesh_Positions
    // Size: 0x8
    // Offset: 0x468
    ::ArrayW<::UnityEngine::Vector3> UpdateMesh_Positions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3 cacheVectThree
    // Size: 0xC
    // Offset: 0x470
    ::UnityEngine::Vector3 cacheVectThree;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 jitterValue
    // Size: 0xC
    // Offset: 0x47C
    ::UnityEngine::Vector3 jitterValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector2 vectA
    // Size: 0x8
    // Offset: 0x488
    ::UnityEngine::Vector2 vectA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 vectAA
    // Size: 0x8
    // Offset: 0x490
    ::UnityEngine::Vector2 vectAA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 vectB
    // Size: 0x8
    // Offset: 0x498
    ::UnityEngine::Vector2 vectB;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 vectBB
    // Size: 0x8
    // Offset: 0x4A0
    ::UnityEngine::Vector2 vectBB;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 vectC
    // Size: 0x8
    // Offset: 0x4A8
    ::UnityEngine::Vector2 vectC;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 vectCC
    // Size: 0x8
    // Offset: 0x4B0
    ::UnityEngine::Vector2 vectCC;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 vectD
    // Size: 0x8
    // Offset: 0x4B8
    ::UnityEngine::Vector2 vectD;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 vectDD
    // Size: 0x8
    // Offset: 0x4C0
    ::UnityEngine::Vector2 vectDD;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 infoVect
    // Size: 0x8
    // Offset: 0x4C8
    ::UnityEngine::Vector2 infoVect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 ratioHold
    // Size: 0x8
    // Offset: 0x4D0
    ::UnityEngine::Vector2 ratioHold;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 uvMidHold
    // Size: 0x8
    // Offset: 0x4D8
    ::UnityEngine::Vector2 uvMidHold;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector4 ratioAndUvHold
    // Size: 0x10
    // Offset: 0x4E0
    ::UnityEngine::Vector4 ratioAndUvHold;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private System.Boolean doPrintEventAfter
    // Size: 0x1
    // Offset: 0x4F0
    bool doPrintEventAfter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean doEventAfter
    // Size: 0x1
    // Offset: 0x4F1
    bool doEventAfter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: doEventAfter and: newMats
    char __padding172[0x6] = {};
    // private UnityEngine.Material[] newMats
    // Size: 0x8
    // Offset: 0x4F8
    ::ArrayW<::UnityEngine::Material*> newMats;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UI::ILayoutElement
    operator ::UnityEngine::UI::ILayoutElement() noexcept {
      return *reinterpret_cast<::UnityEngine::UI::ILayoutElement*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private SuperTextMeshData _data
    static ::GlobalNamespace::SuperTextMeshData* _get__data();
    // Set static field: static private SuperTextMeshData _data
    static void _set__data(::GlobalNamespace::SuperTextMeshData* value);
    // Get instance field reference: public System.Boolean showAppearanceFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showAppearanceFoldout();
    // Get instance field reference: public System.Boolean showMaterialFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showMaterialFoldout();
    // Get instance field reference: public System.Boolean showPositionFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showPositionFoldout();
    // Get instance field reference: public System.Boolean showTimingFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showTimingFoldout();
    // Get instance field reference: public System.Boolean showFunctionalityFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showFunctionalityFoldout();
    // Get instance field reference: public System.Boolean showAudioFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showAudioFoldout();
    // Get instance field reference: public System.Boolean showEventFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showEventFoldout();
    // Get instance field reference: private UnityEngine.Transform _t
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__t();
    // Get instance field reference: private UnityEngine.MeshFilter _f
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn__f();
    // Get instance field reference: private UnityEngine.MeshRenderer _r
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn__r();
    // Get instance field reference: private UnityEngine.CanvasRenderer _c
    [[deprecated("Use field access instead!")]] ::UnityEngine::CanvasRenderer*& dyn__c();
    // Get instance field reference: public System.Collections.Generic.List`1<STMTextInfo> info
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::STMTextInfo*>*& dyn_info();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> lineBreaks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_lineBreaks();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Single> lineHeights
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& dyn_lineHeights();
    // Get instance field reference: public System.String _text
    [[deprecated("Use field access instead!")]] ::StringW& dyn__text();
    // Get instance field reference: public System.String drawText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_drawText();
    // Get instance field reference: public System.String hyphenedText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_hyphenedText();
    // Get instance field reference: public UnityEngine.Font font
    [[deprecated("Use field access instead!")]] ::UnityEngine::Font*& dyn_font();
    // Get instance field reference: public UnityEngine.Color32 color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_color();
    // Get instance field reference: public System.Boolean richText
    [[deprecated("Use field access instead!")]] bool& dyn_richText();
    // Get instance field reference: public System.Single readDelay
    [[deprecated("Use field access instead!")]] float& dyn_readDelay();
    // Get instance field reference: public System.Single speedReadScale
    [[deprecated("Use field access instead!")]] float& dyn_speedReadScale();
    // Get instance field reference: public System.Boolean ignoreTimeScale
    [[deprecated("Use field access instead!")]] bool& dyn_ignoreTimeScale();
    // Get instance field reference: public System.Boolean disableAnimatedText
    [[deprecated("Use field access instead!")]] bool& dyn_disableAnimatedText();
    // Get instance field reference: public System.String drawAnimName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_drawAnimName();
    // Get instance field reference: public System.Single unreadDelay
    [[deprecated("Use field access instead!")]] float& dyn_unreadDelay();
    // Get instance field reference: public SuperTextMesh/DrawOrder undrawOrder
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::DrawOrder& dyn_undrawOrder();
    // Get instance field reference: public System.String undrawAnimName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_undrawAnimName();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public UnityEngine.AudioClip[] audioClips
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_audioClips();
    // Get instance field reference: public System.Boolean stopPreviousSound
    [[deprecated("Use field access instead!")]] bool& dyn_stopPreviousSound();
    // Get instance field reference: public SuperTextMesh/PitchMode pitchMode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::PitchMode& dyn_pitchMode();
    // Get instance field reference: public System.Single overridePitch
    [[deprecated("Use field access instead!")]] float& dyn_overridePitch();
    // Get instance field reference: public System.Single minPitch
    [[deprecated("Use field access instead!")]] float& dyn_minPitch();
    // Get instance field reference: public System.Single maxPitch
    [[deprecated("Use field access instead!")]] float& dyn_maxPitch();
    // Get instance field reference: public System.Single speedReadPitch
    [[deprecated("Use field access instead!")]] float& dyn_speedReadPitch();
    // Get instance field reference: public System.Single perlinPitchMulti
    [[deprecated("Use field access instead!")]] float& dyn_perlinPitchMulti();
    // Get instance field reference: private System.Boolean speedReading
    [[deprecated("Use field access instead!")]] bool& dyn_speedReading();
    // Get instance field reference: private System.Boolean skippingToEnd
    [[deprecated("Use field access instead!")]] bool& dyn_skippingToEnd();
    // Get instance field reference: public System.Boolean reading
    [[deprecated("Use field access instead!")]] bool& dyn_reading();
    // Get instance field reference: private UnityEngine.Coroutine readRoutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_readRoutine();
    // Get instance field reference: public System.Boolean unreading
    [[deprecated("Use field access instead!")]] bool& dyn_unreading();
    // Get instance field reference: public System.Single size
    [[deprecated("Use field access instead!")]] float& dyn_size();
    // Get instance field reference: public System.Single bestFitMulti
    [[deprecated("Use field access instead!")]] float& dyn_bestFitMulti();
    // Get instance field reference: public System.Int32 quality
    [[deprecated("Use field access instead!")]] int& dyn_quality();
    // Get instance field reference: public UnityEngine.FilterMode filterMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::FilterMode& dyn_filterMode();
    // Get instance field reference: public UnityEngine.FontStyle style
    [[deprecated("Use field access instead!")]] ::UnityEngine::FontStyle& dyn_style();
    // Get instance field reference: public UnityEngine.Vector3 baseOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_baseOffset();
    // Get instance field reference: public System.Single lineSpacing
    [[deprecated("Use field access instead!")]] float& dyn_lineSpacing();
    // Get instance field reference: public System.Single characterSpacing
    [[deprecated("Use field access instead!")]] float& dyn_characterSpacing();
    // Get instance field reference: public System.Single tabSize
    [[deprecated("Use field access instead!")]] float& dyn_tabSize();
    // Get instance field reference: public System.Single autoWrap
    [[deprecated("Use field access instead!")]] float& dyn_autoWrap();
    // Get instance field reference: public System.Boolean uiWrap
    [[deprecated("Use field access instead!")]] bool& dyn_uiWrap();
    // Get instance field reference: public System.Boolean uiLimit
    [[deprecated("Use field access instead!")]] bool& dyn_uiLimit();
    // Get instance field reference: public System.Boolean breakText
    [[deprecated("Use field access instead!")]] bool& dyn_breakText();
    // Get instance field reference: public System.Boolean insertHyphens
    [[deprecated("Use field access instead!")]] bool& dyn_insertHyphens();
    // Get instance field reference: public UnityEngine.TextAnchor anchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextAnchor& dyn_anchor();
    // Get instance field reference: public SuperTextMesh/Alignment alignment
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::Alignment& dyn_alignment();
    // Get instance field reference: public System.Single verticalLimit
    [[deprecated("Use field access instead!")]] float& dyn_verticalLimit();
    // Get instance field reference: public SuperTextMesh/VerticalLimitMode verticalLimitMode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::VerticalLimitMode& dyn_verticalLimitMode();
    // Get instance field reference: public System.String leftoverText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_leftoverText();
    // Get instance field reference: public UnityEngine.Material textMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_textMaterial();
    // Get instance field reference: public UnityEngine.Mesh textMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_textMesh();
    // Get instance field reference: private System.Boolean areWeAnimating
    [[deprecated("Use field access instead!")]] bool& dyn_areWeAnimating();
    // Get instance field reference: public UnityEngine.Vector3 rawTopLeftBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rawTopLeftBounds();
    // Get instance field reference: public UnityEngine.Vector3 rawBottomRightBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rawBottomRightBounds();
    // Get instance field reference: public UnityEngine.Vector3 rawBottomRightTextBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rawBottomRightTextBounds();
    // Get instance field reference: public UnityEngine.Vector3 topLeftBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_topLeftBounds();
    // Get instance field reference: public UnityEngine.Vector3 topRightBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_topRightBounds();
    // Get instance field reference: public UnityEngine.Vector3 bottomLeftBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bottomLeftBounds();
    // Get instance field reference: public UnityEngine.Vector3 bottomRightBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bottomRightBounds();
    // Get instance field reference: public UnityEngine.Vector3 centerBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_centerBounds();
    // Get instance field reference: public UnityEngine.Vector3 topLeftTextBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_topLeftTextBounds();
    // Get instance field reference: public UnityEngine.Vector3 topRightTextBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_topRightTextBounds();
    // Get instance field reference: public UnityEngine.Vector3 bottomLeftTextBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bottomLeftTextBounds();
    // Get instance field reference: public UnityEngine.Vector3 bottomRightTextBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bottomRightTextBounds();
    // Get instance field reference: public UnityEngine.Vector3 centerTextBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_centerTextBounds();
    // Get instance field reference: public UnityEngine.Vector3 finalTopLeftTextBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_finalTopLeftTextBounds();
    // Get instance field reference: public UnityEngine.Vector3 finalTopRightTextBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_finalTopRightTextBounds();
    // Get instance field reference: public UnityEngine.Vector3 finalBottomLeftTextBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_finalBottomLeftTextBounds();
    // Get instance field reference: public UnityEngine.Vector3 finalBottomRightTextBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_finalBottomRightTextBounds();
    // Get instance field reference: public UnityEngine.Vector3 finalCenterTextBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_finalCenterTextBounds();
    // Get instance field reference: private System.Single lowestPosition
    [[deprecated("Use field access instead!")]] float& dyn_lowestPosition();
    // Get instance field reference: private System.Single lowestDrawnPosition
    [[deprecated("Use field access instead!")]] float& dyn_lowestDrawnPosition();
    // Get instance field reference: private System.Single lowestDrawnPositionRaw
    [[deprecated("Use field access instead!")]] float& dyn_lowestDrawnPositionRaw();
    // Get instance field reference: private System.Single furthestDrawnPosition
    [[deprecated("Use field access instead!")]] float& dyn_furthestDrawnPosition();
    // Get instance field reference: private System.Single totalWidth
    [[deprecated("Use field access instead!")]] float& dyn_totalWidth();
    // Get instance field reference: public UnityEngine.Vector3 unwrappedBottomRightTextBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_unwrappedBottomRightTextBounds();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onCompleteEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onCompleteEvent();
    // Get instance field reference: private SuperTextMesh/OnCompleteAction OnCompleteEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::OnCompleteAction*& dyn_OnCompleteEvent();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onUndrawnEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onUndrawnEvent();
    // Get instance field reference: private SuperTextMesh/OnUndrawnAction OnUndrawnEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::OnUndrawnAction*& dyn_OnUndrawnEvent();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onRebuildEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onRebuildEvent();
    // Get instance field reference: private SuperTextMesh/OnRebuildAction OnRebuildEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::OnRebuildAction*& dyn_OnRebuildEvent();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onPrintEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onPrintEvent();
    // Get instance field reference: private SuperTextMesh/OnPrintAction OnPrintEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::OnPrintAction*& dyn_OnPrintEvent();
    // Get instance field reference: public SuperTextMesh/CustomEvent onCustomEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::CustomEvent*& dyn_onCustomEvent();
    // Get instance field reference: private SuperTextMesh/OnCustomAction OnCustomEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::OnCustomAction*& dyn_OnCustomEvent();
    // Get instance field reference: public SuperTextMesh/VertexMod onVertexMod
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::VertexMod*& dyn_onVertexMod();
    // Get instance field reference: private SuperTextMesh/OnVertexModAction OnVertexMod
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::OnVertexModAction*& dyn_OnVertexMod();
    // Get instance field reference: public SuperTextMesh/PreParse onPreParse
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::PreParse*& dyn_onPreParse();
    // Get instance field reference: private SuperTextMesh/OnPreParseAction OnPreParse
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::OnPreParseAction*& dyn_OnPreParse();
    // Get instance field reference: public System.Boolean debugMode
    [[deprecated("Use field access instead!")]] bool& dyn_debugMode();
    // Get instance field reference: public System.Single totalReadTime
    [[deprecated("Use field access instead!")]] float& dyn_totalReadTime();
    // Get instance field reference: public System.Single totalUnreadTime
    [[deprecated("Use field access instead!")]] float& dyn_totalUnreadTime();
    // Get instance field reference: public System.Single currentReadTime
    [[deprecated("Use field access instead!")]] float& dyn_currentReadTime();
    // Get instance field reference: private UnityEngine.Vector3[] endVerts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_endVerts();
    // Get instance field reference: private UnityEngine.Color32[] endCol32
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color32>& dyn_endCol32();
    // Get instance field reference: private UnityEngine.Vector2[] endUv
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_endUv();
    // Get instance field reference: private UnityEngine.Vector2[] endUv2
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_endUv2();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector4> ratiosAndUvMids
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*& dyn_ratiosAndUvMids();
    // Get instance field reference: private UnityEngine.Vector3[] startVerts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_startVerts();
    // Get instance field reference: private UnityEngine.Color32[] startCol32
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color32>& dyn_startCol32();
    // Get instance field reference: private UnityEngine.Vector3[] midVerts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_midVerts();
    // Get instance field reference: private UnityEngine.Color32[] midCol32
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color32>& dyn_midCol32();
    // Get instance field reference: private System.Collections.Generic.List`1<SubMeshData> subMeshes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::SubMeshData*>*& dyn_subMeshes();
    // Get instance field reference: private System.Single timeDrawn
    [[deprecated("Use field access instead!")]] float& dyn_timeDrawn();
    // Get instance field reference: public System.Boolean autoRead
    [[deprecated("Use field access instead!")]] bool& dyn_autoRead();
    // Get instance field reference: public System.Boolean rememberReadPosition
    [[deprecated("Use field access instead!")]] bool& dyn_rememberReadPosition();
    // Get instance field reference: public System.Boolean autoQuality
    [[deprecated("Use field access instead!")]] bool& dyn_autoQuality();
    // Get instance field reference: public SuperTextMesh/DrawOrder drawOrder
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::DrawOrder& dyn_drawOrder();
    // Get instance field reference: private System.Boolean callReadFunction
    [[deprecated("Use field access instead!")]] bool& dyn_callReadFunction();
    // Get instance field reference: private System.Int32 pauseCount
    [[deprecated("Use field access instead!")]] int& dyn_pauseCount();
    // Get instance field reference: private System.Int32 currentPauseCount
    [[deprecated("Use field access instead!")]] int& dyn_currentPauseCount();
    // Get instance field reference: private System.Single autoPauseStopPoint
    [[deprecated("Use field access instead!")]] float& dyn_autoPauseStopPoint();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Collections.Generic.KeyValuePair`2<System.Int32,System.String>> allTags
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::KeyValuePair_2<int, ::StringW>>*& dyn_allTags();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Font> allFonts
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Font*>*& dyn_allFonts();
    // Get instance field reference: public SuperTextMesh/BestFitMode bestFit
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh::BestFitMode& dyn_bestFit();
    // Get instance field reference: private System.Boolean applicationFocused
    [[deprecated("Use field access instead!")]] bool& dyn_applicationFocused();
    // Get instance field reference: public System.Int32 latestNumber
    [[deprecated("Use field access instead!")]] int& dyn_latestNumber();
    // Get instance field reference: public System.Single currentUnReadTime
    [[deprecated("Use field access instead!")]] float& dyn_currentUnReadTime();
    // Get instance field reference: public System.String preParsedText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_preParsedText();
    // Get instance field reference: private UnityEngine.Vector3 offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_offset();
    // Get instance field reference: private UnityEngine.Vector3 uiOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_uiOffset();
    // Get instance field reference: private UnityEngine.Vector3 anchorOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_anchorOffset();
    // Get instance field reference: private UnityEngine.Vector3 TextBounds_leftOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_TextBounds_leftOffset();
    // Get instance field reference: private UnityEngine.Vector3 TextBounds_rightOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_TextBounds_rightOffset();
    // Get instance field reference: private System.Single TextBounds_diff
    [[deprecated("Use field access instead!")]] float& dyn_TextBounds_diff();
    // Get instance field reference: private System.Int32[] drawOrderRTL
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_drawOrderRTL();
    // Get instance field reference: private UnityEngine.Vector3 WavePosition_Vect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_WavePosition_Vect();
    // Get instance field reference: private UnityEngine.Vector3 WaveRotation_Pivot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_WaveRotation_Pivot();
    // Get instance field reference: private UnityEngine.Vector3 WaveRotation_Offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_WaveRotation_Offset();
    // Get instance field reference: private UnityEngine.Vector3 WaveRotation_ReturnVal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_WaveRotation_ReturnVal();
    // Get instance field reference: private UnityEngine.Vector3 WaveRotation_myRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_WaveRotation_myRotation();
    // Get instance field reference: private UnityEngine.Quaternion WaveRotation_myQuaternion
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_WaveRotation_myQuaternion();
    // Get instance field reference: private UnityEngine.Vector3 JitterValue_MyJit
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_JitterValue_MyJit();
    // Get instance field reference: private UnityEngine.Vector3 UpdateMesh_waveValue
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_UpdateMesh_waveValue();
    // Get instance field reference: private UnityEngine.Vector3 UpdateMesh_waveValueTopLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_UpdateMesh_waveValueTopLeft();
    // Get instance field reference: private UnityEngine.Vector3 UpdateMesh_waveValueTopRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_UpdateMesh_waveValueTopRight();
    // Get instance field reference: private UnityEngine.Vector3 UpdateMesh_waveValueBottomRight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_UpdateMesh_waveValueBottomRight();
    // Get instance field reference: private UnityEngine.Vector3 UpdateMesh_waveValueBottomLeft
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_UpdateMesh_waveValueBottomLeft();
    // Get instance field reference: private UnityEngine.Vector3 UpdateMesh_lowestLineOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_UpdateMesh_lowestLineOffset();
    // Get instance field reference: private UnityEngine.Vector3 UpdateMesh_wavePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_UpdateMesh_wavePosition();
    // Get instance field reference: private UnityEngine.Vector2 UpdateMesh_uvOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_UpdateMesh_uvOffset();
    // Get instance field reference: private STMTextInfo CurrentTextInfo
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMTextInfo*& dyn_CurrentTextInfo();
    // Get instance field reference: private UnityEngine.Vector3[] UpdateMesh_Middles
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_UpdateMesh_Middles();
    // Get instance field reference: private UnityEngine.Vector3[] UpdateMesh_Positions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_UpdateMesh_Positions();
    // Get instance field reference: private UnityEngine.Vector3 cacheVectThree
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_cacheVectThree();
    // Get instance field reference: private UnityEngine.Vector3 jitterValue
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_jitterValue();
    // Get instance field reference: private UnityEngine.Vector2 vectA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_vectA();
    // Get instance field reference: private UnityEngine.Vector2 vectAA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_vectAA();
    // Get instance field reference: private UnityEngine.Vector2 vectB
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_vectB();
    // Get instance field reference: private UnityEngine.Vector2 vectBB
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_vectBB();
    // Get instance field reference: private UnityEngine.Vector2 vectC
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_vectC();
    // Get instance field reference: private UnityEngine.Vector2 vectCC
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_vectCC();
    // Get instance field reference: private UnityEngine.Vector2 vectD
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_vectD();
    // Get instance field reference: private UnityEngine.Vector2 vectDD
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_vectDD();
    // Get instance field reference: private UnityEngine.Vector2 infoVect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_infoVect();
    // Get instance field reference: private UnityEngine.Vector2 ratioHold
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_ratioHold();
    // Get instance field reference: private UnityEngine.Vector2 uvMidHold
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_uvMidHold();
    // Get instance field reference: private UnityEngine.Vector4 ratioAndUvHold
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_ratioAndUvHold();
    // Get instance field reference: private System.Boolean doPrintEventAfter
    [[deprecated("Use field access instead!")]] bool& dyn_doPrintEventAfter();
    // Get instance field reference: private System.Boolean doEventAfter
    [[deprecated("Use field access instead!")]] bool& dyn_doEventAfter();
    // Get instance field reference: private UnityEngine.Material[] newMats
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_newMats();
    // public SuperTextMeshData get_data()
    // Offset: 0xF187C4
    ::GlobalNamespace::SuperTextMeshData* get_data();
    // public System.Void set_data(SuperTextMeshData value)
    // Offset: 0xF188D8
    void set_data(::GlobalNamespace::SuperTextMeshData* value);
    // public UnityEngine.Transform get_t()
    // Offset: 0xF1892C
    ::UnityEngine::Transform* get_t();
    // public UnityEngine.MeshFilter get_f()
    // Offset: 0xF189BC
    ::UnityEngine::MeshFilter* get_f();
    // public UnityEngine.MeshRenderer get_r()
    // Offset: 0xF18AEC
    ::UnityEngine::MeshRenderer* get_r();
    // public UnityEngine.CanvasRenderer get_c()
    // Offset: 0xF18C1C
    ::UnityEngine::CanvasRenderer* get_c();
    // public System.Boolean get_uiMode()
    // Offset: 0xF18D4C
    bool get_uiMode();
    // public System.String get_text()
    // Offset: 0xF18DB0
    ::StringW get_text();
    // public System.Void set_text(System.String value)
    // Offset: 0xF18DB8
    void set_text(::StringW value);
    // public System.String get_Text()
    // Offset: 0xF18E40
    ::StringW get_Text();
    // public System.Void set_Text(System.String value)
    // Offset: 0xF18E48
    void set_Text(::StringW value);
    // public System.Single get_GetDeltaTime()
    // Offset: 0xF18EDC
    float get_GetDeltaTime();
    // public System.Single get_GetTime()
    // Offset: 0xF18F4C
    float get_GetTime();
    // public System.Single get_GetDeltaTime2()
    // Offset: 0xF18FBC
    float get_GetDeltaTime2();
    // public System.Single get_AutoWrap()
    // Offset: 0xF18FE4
    float get_AutoWrap();
    // private UnityEngine.RectTransform get_tr()
    // Offset: 0xF19074
    ::UnityEngine::RectTransform* get_tr();
    // private System.Single get_VerticalLimit()
    // Offset: 0xF190D8
    float get_VerticalLimit();
    // public System.Void add_OnCompleteEvent(SuperTextMesh/OnCompleteAction value)
    // Offset: 0xF19168
    void add_OnCompleteEvent(::GlobalNamespace::SuperTextMesh::OnCompleteAction* value);
    // public System.Void remove_OnCompleteEvent(SuperTextMesh/OnCompleteAction value)
    // Offset: 0xF19258
    void remove_OnCompleteEvent(::GlobalNamespace::SuperTextMesh::OnCompleteAction* value);
    // public System.Void add_OnUndrawnEvent(SuperTextMesh/OnUndrawnAction value)
    // Offset: 0xF19348
    void add_OnUndrawnEvent(::GlobalNamespace::SuperTextMesh::OnUndrawnAction* value);
    // public System.Void remove_OnUndrawnEvent(SuperTextMesh/OnUndrawnAction value)
    // Offset: 0xF19438
    void remove_OnUndrawnEvent(::GlobalNamespace::SuperTextMesh::OnUndrawnAction* value);
    // public System.Void add_OnRebuildEvent(SuperTextMesh/OnRebuildAction value)
    // Offset: 0xF19528
    void add_OnRebuildEvent(::GlobalNamespace::SuperTextMesh::OnRebuildAction* value);
    // public System.Void remove_OnRebuildEvent(SuperTextMesh/OnRebuildAction value)
    // Offset: 0xF19618
    void remove_OnRebuildEvent(::GlobalNamespace::SuperTextMesh::OnRebuildAction* value);
    // public System.Void add_OnPrintEvent(SuperTextMesh/OnPrintAction value)
    // Offset: 0xF19708
    void add_OnPrintEvent(::GlobalNamespace::SuperTextMesh::OnPrintAction* value);
    // public System.Void remove_OnPrintEvent(SuperTextMesh/OnPrintAction value)
    // Offset: 0xF197F8
    void remove_OnPrintEvent(::GlobalNamespace::SuperTextMesh::OnPrintAction* value);
    // public System.Void add_OnCustomEvent(SuperTextMesh/OnCustomAction value)
    // Offset: 0xF198E8
    void add_OnCustomEvent(::GlobalNamespace::SuperTextMesh::OnCustomAction* value);
    // public System.Void remove_OnCustomEvent(SuperTextMesh/OnCustomAction value)
    // Offset: 0xF199D8
    void remove_OnCustomEvent(::GlobalNamespace::SuperTextMesh::OnCustomAction* value);
    // public System.Void add_OnVertexMod(SuperTextMesh/OnVertexModAction value)
    // Offset: 0xF19AC8
    void add_OnVertexMod(::GlobalNamespace::SuperTextMesh::OnVertexModAction* value);
    // public System.Void remove_OnVertexMod(SuperTextMesh/OnVertexModAction value)
    // Offset: 0xF19BB8
    void remove_OnVertexMod(::GlobalNamespace::SuperTextMesh::OnVertexModAction* value);
    // public System.Void add_OnPreParse(SuperTextMesh/OnPreParseAction value)
    // Offset: 0xF19CA8
    void add_OnPreParse(::GlobalNamespace::SuperTextMesh::OnPreParseAction* value);
    // public System.Void remove_OnPreParse(SuperTextMesh/OnPreParseAction value)
    // Offset: 0xF19D98
    void remove_OnPreParse(::GlobalNamespace::SuperTextMesh::OnPreParseAction* value);
    // private STMDrawAnimData get_UndrawAnim()
    // Offset: 0xF19E88
    ::GlobalNamespace::STMDrawAnimData* get_UndrawAnim();
    // private System.Void OnApplicationFocus(System.Boolean focused)
    // Offset: 0xF19FEC
    void OnApplicationFocus(bool focused);
    // private System.Void OnDrawGizmosSelected()
    // Offset: 0xF1A020
    void OnDrawGizmosSelected();
    // private System.Void OnFontTextureRebuilt(UnityEngine.Font changedFont)
    // Offset: 0xF1A498
    void OnFontTextureRebuilt(::UnityEngine::Font* changedFont);
    // private System.Void OnSceneLoaded(UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.LoadSceneMode loadSceneMode)
    // Offset: 0xF1A80C
    void OnSceneLoaded(::UnityEngine::SceneManagement::Scene scene, ::UnityEngine::SceneManagement::LoadSceneMode loadSceneMode);
    // private System.Collections.IEnumerator WaitFrameThenRebuild()
    // Offset: 0xF1A8DC
    ::System::Collections::IEnumerator* WaitFrameThenRebuild();
    // private System.Void OnEnable()
    // Offset: 0xF1A950
    void OnEnable();
    // private System.Void Start()
    // Offset: 0xF1A9E8
    void Start();
    // private System.Void OnDisable()
    // Offset: 0xF1AAF4
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0xF1AAF8
    void OnDestroy();
    // private System.Void Init()
    // Offset: 0xF1AA18
    void Init();
    // private System.Void UnInit()
    // Offset: 0xF1ABF4
    void UnInit();
    // private System.Void StopReadRoutine()
    // Offset: 0xF1ACEC
    void StopReadRoutine();
    // private System.Void OnValidate()
    // Offset: 0xF1AD20
    void OnValidate();
    // public System.Void InitializeFont()
    // Offset: 0xF1AEF4
    void InitializeFont();
    // static public System.Void RebuildAll()
    // Offset: 0xF1B1D4
    static void RebuildAll();
    // public System.Void Rebuild()
    // Offset: 0xF18E34
    void Rebuild();
    // public System.Void Rebuild(System.Boolean readAutomatically)
    // Offset: 0xF1A9D4
    void Rebuild(bool readAutomatically);
    // public System.Void Rebuild(System.Single startTime)
    // Offset: 0xF1B2C4
    void Rebuild(float startTime);
    // public System.Void Rebuild(System.Single startTime, System.Boolean readAutomatically)
    // Offset: 0xF1A5A8
    void Rebuild(float startTime, bool readAutomatically);
    // private System.Void Update()
    // Offset: 0xF1D348
    void Update();
    // private System.Void UpdatePreReadMesh(System.Boolean undrawingMesh)
    // Offset: 0xF1D4B4
    void UpdatePreReadMesh(bool undrawingMesh);
    // public System.Void Read()
    // Offset: 0xF226D0
    void Read();
    // public System.Void Read(System.Single startTime)
    // Offset: 0xF1CF48
    void Read(float startTime);
    // public System.Void Unread()
    // Offset: 0xF22770
    void Unread();
    // public System.Void Undraw()
    // Offset: 0xF227D8
    void Undraw();
    // public System.Void UnDraw()
    // Offset: 0xF2280C
    void UnDraw();
    // public System.Void UnRead()
    // Offset: 0xF227A4
    void UnRead();
    // public System.Void SpeedRead()
    // Offset: 0xF228B4
    void SpeedRead();
    // public System.Void SkipToEnd()
    // Offset: 0xF228C8
    void SkipToEnd();
    // public System.Void RegularRead()
    // Offset: 0xF228DC
    void RegularRead();
    // public System.Void ShowAllText()
    // Offset: 0xF1CFA8
    void ShowAllText();
    // private System.Void ShowAllText(System.Boolean unreadingMesh)
    // Offset: 0xF228E4
    void ShowAllText(bool unreadingMesh);
    // public System.Void Append(System.String newText)
    // Offset: 0xF22DFC
    void Append(::StringW newText);
    // public System.Boolean Continue()
    // Offset: 0xF22E34
    bool Continue();
    // private System.Void UpdateDrawnMesh(System.Single myTime, System.Boolean undrawingMesh)
    // Offset: 0xF22E80
    void UpdateDrawnMesh(float myTime, bool undrawingMesh);
    // private UnityEngine.Vector3 LerpWithoutClamp(UnityEngine.Vector3 A, UnityEngine.Vector3 B, System.Single t)
    // Offset: 0xF23980
    ::UnityEngine::Vector3 LerpWithoutClamp(::UnityEngine::Vector3 A, ::UnityEngine::Vector3 B, float t);
    // private System.Boolean AreColorsTheSame(UnityEngine.Color32 col1, UnityEngine.Color32 col2)
    // Offset: 0xF23A60
    bool AreColorsTheSame(::UnityEngine::Color32 col1, ::UnityEngine::Color32 col2);
    // private System.Collections.IEnumerator ReadOutText(System.Single startTime)
    // Offset: 0xF226D8
    ::System::Collections::IEnumerator* ReadOutText(float startTime);
    // private System.Collections.IEnumerator UnReadOutText()
    // Offset: 0xF22840
    ::System::Collections::IEnumerator* UnReadOutText();
    // private System.Void DoEvent(System.Int32 i)
    // Offset: 0xF23AA8
    void DoEvent(int i);
    // private System.String SpecialKeyToName(System.Char ch)
    // Offset: 0xF23F94
    ::StringW SpecialKeyToName(::Il2CppChar ch);
    // private System.Void PlaySound(System.Int32 i)
    // Offset: 0xF241A8
    void PlaySound(int i);
    // private UnityEngine.FontStyle AddStyle(UnityEngine.FontStyle original, UnityEngine.FontStyle newStyle)
    // Offset: 0xF24B70
    ::UnityEngine::FontStyle AddStyle(::UnityEngine::FontStyle original, ::UnityEngine::FontStyle newStyle);
    // private UnityEngine.FontStyle SubtractStyle(UnityEngine.FontStyle original, UnityEngine.FontStyle subStyle)
    // Offset: 0xF24C00
    ::UnityEngine::FontStyle SubtractStyle(::UnityEngine::FontStyle original, ::UnityEngine::FontStyle subStyle);
    // private System.Boolean ValidHexcode(System.String hex)
    // Offset: 0xF24CA0
    bool ValidHexcode(::StringW hex);
    // private UnityEngine.Color32 HexToColor(System.String hex)
    // Offset: 0xF24E8C
    ::UnityEngine::Color32 HexToColor(::StringW hex);
    // private STMColorData GetColor(System.String myCol)
    // Offset: 0xF254B0
    ::GlobalNamespace::STMColorData* GetColor(::StringW myCol);
    // private System.String ParseText(System.String myText)
    // Offset: 0xF2588C
    ::StringW ParseText(::StringW myText);
    // private System.Int32 GetFontSize(UnityEngine.Font myFont, STMTextInfo myInfo)
    // Offset: 0xF289D8
    int GetFontSize(::UnityEngine::Font* myFont, ::GlobalNamespace::STMTextInfo* myInfo);
    // private System.Void RequestAllCharacters()
    // Offset: 0xF28B04
    void RequestAllCharacters();
    // private System.Void FigureOutUnwrappedLimits(UnityEngine.Vector3 pos)
    // Offset: 0xF28D7C
    void FigureOutUnwrappedLimits(::UnityEngine::Vector3 pos);
    // private System.Void RebuildTextInfo()
    // Offset: 0xF1B2CC
    void RebuildTextInfo();
    // private System.Void TrimCutoffText()
    // Offset: 0xF2A77C
    void TrimCutoffText();
    // private System.Void AssembleLeftoverText()
    // Offset: 0xF2BA84
    void AssembleLeftoverText();
    // private System.Void ApplyOffsetDataToTextInfo()
    // Offset: 0xF29674
    void ApplyOffsetDataToTextInfo();
    // private System.Void RecalculateBounds()
    // Offset: 0xF1A238
    void RecalculateBounds();
    // private System.Void RecalculateBoundsOffsets()
    // Offset: 0xF2C458
    void RecalculateBoundsOffsets();
    // private System.Void RecalculateTextBounds()
    // Offset: 0xF2BC60
    void RecalculateTextBounds();
    // private System.Void RecalculateFinalTextBounds()
    // Offset: 0xF2C070
    void RecalculateFinalTextBounds();
    // private System.Void UpdateRTLDrawOrder()
    // Offset: 0xF2AA10
    void UpdateRTLDrawOrder();
    // private System.Void ApplyTimingDataToTextInfo()
    // Offset: 0xF2ABDC
    void ApplyTimingDataToTextInfo();
    // private System.Void ApplyUnreadTimingDataToTextInfo()
    // Offset: 0xF2B3F4
    void ApplyUnreadTimingDataToTextInfo();
    // private UnityEngine.Vector3 WavePosition(STMTextInfo myInfo, STMWaveControl wave, System.Single myTime)
    // Offset: 0xF2C544
    ::UnityEngine::Vector3 WavePosition(::GlobalNamespace::STMTextInfo* myInfo, ::GlobalNamespace::STMWaveControl* wave, float myTime);
    // private UnityEngine.Vector3 WaveRotation(STMTextInfo myInfo, STMWaveRotationControl rot, UnityEngine.Vector3 vertPos, System.Single myTime)
    // Offset: 0xF2C718
    ::UnityEngine::Vector3 WaveRotation(::GlobalNamespace::STMTextInfo* myInfo, ::GlobalNamespace::STMWaveRotationControl* rot, ::UnityEngine::Vector3 vertPos, float myTime);
    // private UnityEngine.Vector3 WaveScale(STMTextInfo myInfo, STMWaveScaleControl scale, UnityEngine.Vector3 vertPos, System.Single myTime)
    // Offset: 0xF2C940
    ::UnityEngine::Vector3 WaveScale(::GlobalNamespace::STMTextInfo* myInfo, ::GlobalNamespace::STMWaveScaleControl* scale, ::UnityEngine::Vector3 vertPos, float myTime);
    // private UnityEngine.Vector3 JitterValue(STMTextInfo myInfo, STMJitterData jit)
    // Offset: 0xF2CBA0
    ::UnityEngine::Vector3 JitterValue(::GlobalNamespace::STMTextInfo* myInfo, ::GlobalNamespace::STMJitterData* jit);
    // private System.Void PrepareSubmeshes()
    // Offset: 0xF2B7F0
    void PrepareSubmeshes();
    // private System.Void UpdateMesh(System.Single myTime)
    // Offset: 0xF1E428
    void UpdateMesh(float myTime);
    // private System.Void SetMesh(System.Single timeValue)
    // Offset: 0xF1A9E0
    void SetMesh(float timeValue);
    // private System.Void SetMesh(System.Single timeValue, System.Boolean undrawingMesh)
    // Offset: 0xF229D8
    void SetMesh(float timeValue, bool undrawingMesh);
    // private System.Void ApplyMesh()
    // Offset: 0xF2D41C
    void ApplyMesh();
    // private System.Void ClearMaterials()
    // Offset: 0xF2D494
    void ClearMaterials();
    // private System.Void ApplyMaterials()
    // Offset: 0xF1CFB0
    void ApplyMaterials();
    // private SubMeshData DoesSubmeshExist(SuperTextMesh stm, STMTextInfo info)
    // Offset: 0xF2CEC8
    ::GlobalNamespace::SubMeshData* DoesSubmeshExist(::GlobalNamespace::SuperTextMesh* stm, ::GlobalNamespace::STMTextInfo* info);
    // public System.Void CalculateLayoutInputHorizontal()
    // Offset: 0xF2D664
    void CalculateLayoutInputHorizontal();
    // public System.Void CalculateLayoutInputVertical()
    // Offset: 0xF2D668
    void CalculateLayoutInputVertical();
    // public System.Single get_minWidth()
    // Offset: 0xF2D66C
    float get_minWidth();
    // public System.Single get_preferredWidth()
    // Offset: 0xF2D674
    float get_preferredWidth();
    // public System.Single get_flexibleWidth()
    // Offset: 0xF2D67C
    float get_flexibleWidth();
    // public System.Single get_minHeight()
    // Offset: 0xF2D684
    float get_minHeight();
    // public System.Single get_preferredHeight()
    // Offset: 0xF2D68C
    float get_preferredHeight();
    // public System.Single get_flexibleHeight()
    // Offset: 0xF2D698
    float get_flexibleHeight();
    // public System.Int32 get_layoutPriority()
    // Offset: 0xF2D6A4
    int get_layoutPriority();
    // public System.Void .ctor()
    // Offset: 0xF2D6AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SuperTextMesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SuperTextMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SuperTextMesh*, creationType>()));
    }
  }; // SuperTextMesh
  #pragma pack(pop)
  static check_size<sizeof(SuperTextMesh), 1272 + sizeof(::ArrayW<::UnityEngine::Material*>)> __GlobalNamespace_SuperTextMeshSizeCheck;
  static_assert(sizeof(SuperTextMesh) == 0x500);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SuperTextMesh::BestFitMode, "", "SuperTextMesh/BestFitMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SuperTextMesh::DrawOrder, "", "SuperTextMesh/DrawOrder");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SuperTextMesh::VerticalLimitMode, "", "SuperTextMesh/VerticalLimitMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SuperTextMesh::Alignment, "", "SuperTextMesh/Alignment");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SuperTextMesh::PitchMode, "", "SuperTextMesh/PitchMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_data
// Il2CppName: get_data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SuperTextMeshData* (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::set_data
// Il2CppName: set_data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMeshData*)>(&GlobalNamespace::SuperTextMesh::set_data)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SuperTextMeshData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "set_data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_t
// Il2CppName: get_t
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_t)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_t", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_f
// Il2CppName: get_f
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::MeshFilter* (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_f)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_f", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_r
// Il2CppName: get_r
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::MeshRenderer* (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_r)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_r", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_c
// Il2CppName: get_c
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::CanvasRenderer* (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_c)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_c", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_uiMode
// Il2CppName: get_uiMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_uiMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_uiMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_text)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::set_text
// Il2CppName: set_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::StringW)>(&GlobalNamespace::SuperTextMesh::set_text)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "set_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_Text
// Il2CppName: get_Text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_Text)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_Text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::set_Text
// Il2CppName: set_Text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::StringW)>(&GlobalNamespace::SuperTextMesh::set_Text)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "set_Text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_GetDeltaTime
// Il2CppName: get_GetDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_GetDeltaTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_GetDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_GetTime
// Il2CppName: get_GetTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_GetTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_GetTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_GetDeltaTime2
// Il2CppName: get_GetDeltaTime2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_GetDeltaTime2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_GetDeltaTime2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_AutoWrap
// Il2CppName: get_AutoWrap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_AutoWrap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_AutoWrap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_tr
// Il2CppName: get_tr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_tr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_tr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_VerticalLimit
// Il2CppName: get_VerticalLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_VerticalLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_VerticalLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::add_OnCompleteEvent
// Il2CppName: add_OnCompleteEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMesh::OnCompleteAction*)>(&GlobalNamespace::SuperTextMesh::add_OnCompleteEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh/OnCompleteAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "add_OnCompleteEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::remove_OnCompleteEvent
// Il2CppName: remove_OnCompleteEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMesh::OnCompleteAction*)>(&GlobalNamespace::SuperTextMesh::remove_OnCompleteEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh/OnCompleteAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "remove_OnCompleteEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::add_OnUndrawnEvent
// Il2CppName: add_OnUndrawnEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMesh::OnUndrawnAction*)>(&GlobalNamespace::SuperTextMesh::add_OnUndrawnEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh/OnUndrawnAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "add_OnUndrawnEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::remove_OnUndrawnEvent
// Il2CppName: remove_OnUndrawnEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMesh::OnUndrawnAction*)>(&GlobalNamespace::SuperTextMesh::remove_OnUndrawnEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh/OnUndrawnAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "remove_OnUndrawnEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::add_OnRebuildEvent
// Il2CppName: add_OnRebuildEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMesh::OnRebuildAction*)>(&GlobalNamespace::SuperTextMesh::add_OnRebuildEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh/OnRebuildAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "add_OnRebuildEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::remove_OnRebuildEvent
// Il2CppName: remove_OnRebuildEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMesh::OnRebuildAction*)>(&GlobalNamespace::SuperTextMesh::remove_OnRebuildEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh/OnRebuildAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "remove_OnRebuildEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::add_OnPrintEvent
// Il2CppName: add_OnPrintEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMesh::OnPrintAction*)>(&GlobalNamespace::SuperTextMesh::add_OnPrintEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh/OnPrintAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "add_OnPrintEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::remove_OnPrintEvent
// Il2CppName: remove_OnPrintEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMesh::OnPrintAction*)>(&GlobalNamespace::SuperTextMesh::remove_OnPrintEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh/OnPrintAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "remove_OnPrintEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::add_OnCustomEvent
// Il2CppName: add_OnCustomEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMesh::OnCustomAction*)>(&GlobalNamespace::SuperTextMesh::add_OnCustomEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh/OnCustomAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "add_OnCustomEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::remove_OnCustomEvent
// Il2CppName: remove_OnCustomEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMesh::OnCustomAction*)>(&GlobalNamespace::SuperTextMesh::remove_OnCustomEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh/OnCustomAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "remove_OnCustomEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::add_OnVertexMod
// Il2CppName: add_OnVertexMod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMesh::OnVertexModAction*)>(&GlobalNamespace::SuperTextMesh::add_OnVertexMod)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh/OnVertexModAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "add_OnVertexMod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::remove_OnVertexMod
// Il2CppName: remove_OnVertexMod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMesh::OnVertexModAction*)>(&GlobalNamespace::SuperTextMesh::remove_OnVertexMod)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh/OnVertexModAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "remove_OnVertexMod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::add_OnPreParse
// Il2CppName: add_OnPreParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMesh::OnPreParseAction*)>(&GlobalNamespace::SuperTextMesh::add_OnPreParse)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh/OnPreParseAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "add_OnPreParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::remove_OnPreParse
// Il2CppName: remove_OnPreParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMesh::OnPreParseAction*)>(&GlobalNamespace::SuperTextMesh::remove_OnPreParse)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh/OnPreParseAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "remove_OnPreParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_UndrawAnim
// Il2CppName: get_UndrawAnim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::STMDrawAnimData* (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_UndrawAnim)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_UndrawAnim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::OnApplicationFocus
// Il2CppName: OnApplicationFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(bool)>(&GlobalNamespace::SuperTextMesh::OnApplicationFocus)> {
  static const MethodInfo* get() {
    static auto* focused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "OnApplicationFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focused});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::OnFontTextureRebuilt
// Il2CppName: OnFontTextureRebuilt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::UnityEngine::Font*)>(&GlobalNamespace::SuperTextMesh::OnFontTextureRebuilt)> {
  static const MethodInfo* get() {
    static auto* changedFont = &::il2cpp_utils::GetClassFromName("UnityEngine", "Font")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "OnFontTextureRebuilt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{changedFont});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::OnSceneLoaded
// Il2CppName: OnSceneLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::UnityEngine::SceneManagement::Scene, ::UnityEngine::SceneManagement::LoadSceneMode)>(&GlobalNamespace::SuperTextMesh::OnSceneLoaded)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* loadSceneMode = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "LoadSceneMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "OnSceneLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, loadSceneMode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::WaitFrameThenRebuild
// Il2CppName: WaitFrameThenRebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::WaitFrameThenRebuild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "WaitFrameThenRebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::UnInit
// Il2CppName: UnInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::UnInit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "UnInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::StopReadRoutine
// Il2CppName: StopReadRoutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::StopReadRoutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "StopReadRoutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::InitializeFont
// Il2CppName: InitializeFont
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::InitializeFont)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "InitializeFont", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::RebuildAll
// Il2CppName: RebuildAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::SuperTextMesh::RebuildAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "RebuildAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::Rebuild
// Il2CppName: Rebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::Rebuild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::Rebuild
// Il2CppName: Rebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(bool)>(&GlobalNamespace::SuperTextMesh::Rebuild)> {
  static const MethodInfo* get() {
    static auto* readAutomatically = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{readAutomatically});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::Rebuild
// Il2CppName: Rebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(float)>(&GlobalNamespace::SuperTextMesh::Rebuild)> {
  static const MethodInfo* get() {
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::Rebuild
// Il2CppName: Rebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(float, bool)>(&GlobalNamespace::SuperTextMesh::Rebuild)> {
  static const MethodInfo* get() {
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* readAutomatically = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startTime, readAutomatically});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::UpdatePreReadMesh
// Il2CppName: UpdatePreReadMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(bool)>(&GlobalNamespace::SuperTextMesh::UpdatePreReadMesh)> {
  static const MethodInfo* get() {
    static auto* undrawingMesh = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "UpdatePreReadMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{undrawingMesh});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(float)>(&GlobalNamespace::SuperTextMesh::Read)> {
  static const MethodInfo* get() {
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::Unread
// Il2CppName: Unread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::Unread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "Unread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::Undraw
// Il2CppName: Undraw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::Undraw)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "Undraw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::UnDraw
// Il2CppName: UnDraw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::UnDraw)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "UnDraw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::UnRead
// Il2CppName: UnRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::UnRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "UnRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::SpeedRead
// Il2CppName: SpeedRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::SpeedRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "SpeedRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::SkipToEnd
// Il2CppName: SkipToEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::SkipToEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "SkipToEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::RegularRead
// Il2CppName: RegularRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::RegularRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "RegularRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::ShowAllText
// Il2CppName: ShowAllText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::ShowAllText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "ShowAllText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::ShowAllText
// Il2CppName: ShowAllText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(bool)>(&GlobalNamespace::SuperTextMesh::ShowAllText)> {
  static const MethodInfo* get() {
    static auto* unreadingMesh = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "ShowAllText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unreadingMesh});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::StringW)>(&GlobalNamespace::SuperTextMesh::Append)> {
  static const MethodInfo* get() {
    static auto* newText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newText});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::Continue
// Il2CppName: Continue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::Continue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "Continue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::UpdateDrawnMesh
// Il2CppName: UpdateDrawnMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(float, bool)>(&GlobalNamespace::SuperTextMesh::UpdateDrawnMesh)> {
  static const MethodInfo* get() {
    static auto* myTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* undrawingMesh = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "UpdateDrawnMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myTime, undrawingMesh});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::LerpWithoutClamp
// Il2CppName: LerpWithoutClamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::SuperTextMesh::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&GlobalNamespace::SuperTextMesh::LerpWithoutClamp)> {
  static const MethodInfo* get() {
    static auto* A = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* B = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "LerpWithoutClamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{A, B, t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::AreColorsTheSame
// Il2CppName: AreColorsTheSame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SuperTextMesh::*)(::UnityEngine::Color32, ::UnityEngine::Color32)>(&GlobalNamespace::SuperTextMesh::AreColorsTheSame)> {
  static const MethodInfo* get() {
    static auto* col1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* col2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "AreColorsTheSame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col1, col2});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::ReadOutText
// Il2CppName: ReadOutText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::SuperTextMesh::*)(float)>(&GlobalNamespace::SuperTextMesh::ReadOutText)> {
  static const MethodInfo* get() {
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "ReadOutText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::UnReadOutText
// Il2CppName: UnReadOutText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::UnReadOutText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "UnReadOutText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::DoEvent
// Il2CppName: DoEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(int)>(&GlobalNamespace::SuperTextMesh::DoEvent)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "DoEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::SpecialKeyToName
// Il2CppName: SpecialKeyToName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::SuperTextMesh::*)(::Il2CppChar)>(&GlobalNamespace::SuperTextMesh::SpecialKeyToName)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "SpecialKeyToName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::PlaySound
// Il2CppName: PlaySound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(int)>(&GlobalNamespace::SuperTextMesh::PlaySound)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "PlaySound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::AddStyle
// Il2CppName: AddStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::FontStyle (GlobalNamespace::SuperTextMesh::*)(::UnityEngine::FontStyle, ::UnityEngine::FontStyle)>(&GlobalNamespace::SuperTextMesh::AddStyle)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "FontStyle")->byval_arg;
    static auto* newStyle = &::il2cpp_utils::GetClassFromName("UnityEngine", "FontStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "AddStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original, newStyle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::SubtractStyle
// Il2CppName: SubtractStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::FontStyle (GlobalNamespace::SuperTextMesh::*)(::UnityEngine::FontStyle, ::UnityEngine::FontStyle)>(&GlobalNamespace::SuperTextMesh::SubtractStyle)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "FontStyle")->byval_arg;
    static auto* subStyle = &::il2cpp_utils::GetClassFromName("UnityEngine", "FontStyle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "SubtractStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original, subStyle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::ValidHexcode
// Il2CppName: ValidHexcode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SuperTextMesh::*)(::StringW)>(&GlobalNamespace::SuperTextMesh::ValidHexcode)> {
  static const MethodInfo* get() {
    static auto* hex = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "ValidHexcode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::HexToColor
// Il2CppName: HexToColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (GlobalNamespace::SuperTextMesh::*)(::StringW)>(&GlobalNamespace::SuperTextMesh::HexToColor)> {
  static const MethodInfo* get() {
    static auto* hex = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "HexToColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::STMColorData* (GlobalNamespace::SuperTextMesh::*)(::StringW)>(&GlobalNamespace::SuperTextMesh::GetColor)> {
  static const MethodInfo* get() {
    static auto* myCol = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myCol});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::ParseText
// Il2CppName: ParseText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::SuperTextMesh::*)(::StringW)>(&GlobalNamespace::SuperTextMesh::ParseText)> {
  static const MethodInfo* get() {
    static auto* myText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "ParseText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myText});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::GetFontSize
// Il2CppName: GetFontSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SuperTextMesh::*)(::UnityEngine::Font*, ::GlobalNamespace::STMTextInfo*)>(&GlobalNamespace::SuperTextMesh::GetFontSize)> {
  static const MethodInfo* get() {
    static auto* myFont = &::il2cpp_utils::GetClassFromName("UnityEngine", "Font")->byval_arg;
    static auto* myInfo = &::il2cpp_utils::GetClassFromName("", "STMTextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "GetFontSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myFont, myInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::RequestAllCharacters
// Il2CppName: RequestAllCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::RequestAllCharacters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "RequestAllCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::FigureOutUnwrappedLimits
// Il2CppName: FigureOutUnwrappedLimits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(::UnityEngine::Vector3)>(&GlobalNamespace::SuperTextMesh::FigureOutUnwrappedLimits)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "FigureOutUnwrappedLimits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::RebuildTextInfo
// Il2CppName: RebuildTextInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::RebuildTextInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "RebuildTextInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::TrimCutoffText
// Il2CppName: TrimCutoffText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::TrimCutoffText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "TrimCutoffText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::AssembleLeftoverText
// Il2CppName: AssembleLeftoverText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::AssembleLeftoverText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "AssembleLeftoverText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::ApplyOffsetDataToTextInfo
// Il2CppName: ApplyOffsetDataToTextInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::ApplyOffsetDataToTextInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "ApplyOffsetDataToTextInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::RecalculateBounds
// Il2CppName: RecalculateBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::RecalculateBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "RecalculateBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::RecalculateBoundsOffsets
// Il2CppName: RecalculateBoundsOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::RecalculateBoundsOffsets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "RecalculateBoundsOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::RecalculateTextBounds
// Il2CppName: RecalculateTextBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::RecalculateTextBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "RecalculateTextBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::RecalculateFinalTextBounds
// Il2CppName: RecalculateFinalTextBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::RecalculateFinalTextBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "RecalculateFinalTextBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::UpdateRTLDrawOrder
// Il2CppName: UpdateRTLDrawOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::UpdateRTLDrawOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "UpdateRTLDrawOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::ApplyTimingDataToTextInfo
// Il2CppName: ApplyTimingDataToTextInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::ApplyTimingDataToTextInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "ApplyTimingDataToTextInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::ApplyUnreadTimingDataToTextInfo
// Il2CppName: ApplyUnreadTimingDataToTextInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::ApplyUnreadTimingDataToTextInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "ApplyUnreadTimingDataToTextInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::WavePosition
// Il2CppName: WavePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::STMTextInfo*, ::GlobalNamespace::STMWaveControl*, float)>(&GlobalNamespace::SuperTextMesh::WavePosition)> {
  static const MethodInfo* get() {
    static auto* myInfo = &::il2cpp_utils::GetClassFromName("", "STMTextInfo")->byval_arg;
    static auto* wave = &::il2cpp_utils::GetClassFromName("", "STMWaveControl")->byval_arg;
    static auto* myTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "WavePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myInfo, wave, myTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::WaveRotation
// Il2CppName: WaveRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::STMTextInfo*, ::GlobalNamespace::STMWaveRotationControl*, ::UnityEngine::Vector3, float)>(&GlobalNamespace::SuperTextMesh::WaveRotation)> {
  static const MethodInfo* get() {
    static auto* myInfo = &::il2cpp_utils::GetClassFromName("", "STMTextInfo")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("", "STMWaveRotationControl")->byval_arg;
    static auto* vertPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* myTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "WaveRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myInfo, rot, vertPos, myTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::WaveScale
// Il2CppName: WaveScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::STMTextInfo*, ::GlobalNamespace::STMWaveScaleControl*, ::UnityEngine::Vector3, float)>(&GlobalNamespace::SuperTextMesh::WaveScale)> {
  static const MethodInfo* get() {
    static auto* myInfo = &::il2cpp_utils::GetClassFromName("", "STMTextInfo")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("", "STMWaveScaleControl")->byval_arg;
    static auto* vertPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* myTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "WaveScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myInfo, scale, vertPos, myTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::JitterValue
// Il2CppName: JitterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::STMTextInfo*, ::GlobalNamespace::STMJitterData*)>(&GlobalNamespace::SuperTextMesh::JitterValue)> {
  static const MethodInfo* get() {
    static auto* myInfo = &::il2cpp_utils::GetClassFromName("", "STMTextInfo")->byval_arg;
    static auto* jit = &::il2cpp_utils::GetClassFromName("", "STMJitterData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "JitterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myInfo, jit});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::PrepareSubmeshes
// Il2CppName: PrepareSubmeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::PrepareSubmeshes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "PrepareSubmeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::UpdateMesh
// Il2CppName: UpdateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(float)>(&GlobalNamespace::SuperTextMesh::UpdateMesh)> {
  static const MethodInfo* get() {
    static auto* myTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "UpdateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::SetMesh
// Il2CppName: SetMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(float)>(&GlobalNamespace::SuperTextMesh::SetMesh)> {
  static const MethodInfo* get() {
    static auto* timeValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "SetMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::SetMesh
// Il2CppName: SetMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)(float, bool)>(&GlobalNamespace::SuperTextMesh::SetMesh)> {
  static const MethodInfo* get() {
    static auto* timeValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* undrawingMesh = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "SetMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeValue, undrawingMesh});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::ApplyMesh
// Il2CppName: ApplyMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::ApplyMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "ApplyMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::ClearMaterials
// Il2CppName: ClearMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::ClearMaterials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "ClearMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::ApplyMaterials
// Il2CppName: ApplyMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::ApplyMaterials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "ApplyMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::DoesSubmeshExist
// Il2CppName: DoesSubmeshExist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SubMeshData* (GlobalNamespace::SuperTextMesh::*)(::GlobalNamespace::SuperTextMesh*, ::GlobalNamespace::STMTextInfo*)>(&GlobalNamespace::SuperTextMesh::DoesSubmeshExist)> {
  static const MethodInfo* get() {
    static auto* stm = &::il2cpp_utils::GetClassFromName("", "SuperTextMesh")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("", "STMTextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "DoesSubmeshExist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stm, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::CalculateLayoutInputHorizontal
// Il2CppName: CalculateLayoutInputHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::CalculateLayoutInputHorizontal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "CalculateLayoutInputHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::CalculateLayoutInputVertical
// Il2CppName: CalculateLayoutInputVertical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::CalculateLayoutInputVertical)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "CalculateLayoutInputVertical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_minWidth
// Il2CppName: get_minWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_minWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_minWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_preferredWidth
// Il2CppName: get_preferredWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_preferredWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_preferredWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_flexibleWidth
// Il2CppName: get_flexibleWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_flexibleWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_flexibleWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_minHeight
// Il2CppName: get_minHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_minHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_minHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_preferredHeight
// Il2CppName: get_preferredHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_preferredHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_preferredHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_flexibleHeight
// Il2CppName: get_flexibleHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_flexibleHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_flexibleHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::get_layoutPriority
// Il2CppName: get_layoutPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::SuperTextMesh::*)()>(&GlobalNamespace::SuperTextMesh::get_layoutPriority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMesh*), "get_layoutPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
