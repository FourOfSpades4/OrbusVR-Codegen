// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.FilterMode
#include "UnityEngine/FilterMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Font
  class Font;
  // Forward declaring type: Texture
  class Texture;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SuperTextMesh
  class SuperTextMesh;
  // Forward declaring type: STMTextInfo
  class STMTextInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SubMeshData
  class SubMeshData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SubMeshData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SubMeshData*, "", "SubMeshData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: SubMeshData
  // [TokenAttribute] Offset: FFFFFFFF
  class SubMeshData : public ::Il2CppObject {
    public:
    public:
    // public System.Collections.Generic.List`1<System.Int32> tris
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<int>* tris;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public UnityEngine.Material refMat
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* refMat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Font refFont
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Font* refFont;
    // Field size check
    static_assert(sizeof(::UnityEngine::Font*) == 0x8);
    // public UnityEngine.Texture refTex
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Texture* refTex;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public UnityEngine.Texture refMask
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Texture* refMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public UnityEngine.Vector2 maskTiling
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Vector2 maskTiling;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.FilterMode refFilter
    // Size: 0x4
    // Offset: 0x40
    ::UnityEngine::FilterMode refFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::FilterMode) == 0x4);
    public:
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> tris
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_tris();
    // Get instance field reference: public UnityEngine.Material refMat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_refMat();
    // Get instance field reference: public UnityEngine.Font refFont
    [[deprecated("Use field access instead!")]] ::UnityEngine::Font*& dyn_refFont();
    // Get instance field reference: public UnityEngine.Texture refTex
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_refTex();
    // Get instance field reference: public UnityEngine.Texture refMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_refMask();
    // Get instance field reference: public UnityEngine.Vector2 maskTiling
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_maskTiling();
    // Get instance field reference: public UnityEngine.FilterMode refFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::FilterMode& dyn_refFilter();
    // public System.Void .ctor(SuperTextMesh stm)
    // Offset: 0xF181E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SubMeshData* New_ctor(::GlobalNamespace::SuperTextMesh* stm) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubMeshData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SubMeshData*, creationType>(stm)));
    }
    // public System.Void .ctor(SuperTextMesh stm, STMTextInfo info)
    // Offset: 0xF182B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SubMeshData* New_ctor(::GlobalNamespace::SuperTextMesh* stm, ::GlobalNamespace::STMTextInfo* info) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SubMeshData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SubMeshData*, creationType>(stm, info)));
    }
    // public UnityEngine.Material get_AsMaterial()
    // Offset: 0xF185E0
    ::UnityEngine::Material* get_AsMaterial();
  }; // SubMeshData
  #pragma pack(pop)
  static check_size<sizeof(SubMeshData), 64 + sizeof(::UnityEngine::FilterMode)> __GlobalNamespace_SubMeshDataSizeCheck;
  static_assert(sizeof(SubMeshData) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SubMeshData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SubMeshData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SubMeshData::get_AsMaterial
// Il2CppName: get_AsMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (GlobalNamespace::SubMeshData::*)()>(&GlobalNamespace::SubMeshData::get_AsMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SubMeshData*), "get_AsMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
