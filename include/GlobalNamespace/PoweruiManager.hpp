// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TextAsset
  class TextAsset;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PoweruiManager
  class PoweruiManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PoweruiManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PoweruiManager*, "", "PoweruiManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: PoweruiManager
  // [TokenAttribute] Offset: FFFFFFFF
  class PoweruiManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.TextAsset HtmlFile
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::TextAsset* HtmlFile;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextAsset*) == 0x8);
    // public System.Single SimpleResolution
    // Size: 0x4
    // Offset: 0x20
    float SimpleResolution;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.TextAsset HtmlFile
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextAsset*& dyn_HtmlFile();
    // Get instance field reference: public System.Single SimpleResolution
    [[deprecated("Use field access instead!")]] float& dyn_SimpleResolution();
    // private System.Void OnEnable()
    // Offset: 0xE1D184
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xE1D2EC
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0xE1D34C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PoweruiManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PoweruiManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PoweruiManager*, creationType>()));
    }
  }; // PoweruiManager
  #pragma pack(pop)
  static check_size<sizeof(PoweruiManager), 32 + sizeof(float)> __GlobalNamespace_PoweruiManagerSizeCheck;
  static_assert(sizeof(PoweruiManager) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PoweruiManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PoweruiManager::*)()>(&GlobalNamespace::PoweruiManager::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PoweruiManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PoweruiManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PoweruiManager::*)()>(&GlobalNamespace::PoweruiManager::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PoweruiManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PoweruiManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
