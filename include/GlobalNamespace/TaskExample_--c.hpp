// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TaskExample
#include "GlobalNamespace/TaskExample.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: Xefier::Threading::Tasks
namespace Xefier::Threading::Tasks {
  // Forward declaring type: ITask
  class ITask;
  // Forward declaring type: ITask`1<TResult>
  template<typename TResult>
  class ITask_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TaskExample::$$c);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TaskExample::$$c*, "", "TaskExample/<>c");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: TaskExample/<>c
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: ACEA78
  class TaskExample::$$c : public ::Il2CppObject {
    public:
    // Get static field: static public readonly TaskExample/<>c <>9
    static ::GlobalNamespace::TaskExample::$$c* _get_$$9();
    // Set static field: static public readonly TaskExample/<>c <>9
    static void _set_$$9(::GlobalNamespace::TaskExample::$$c* value);
    // Get static field: static public System.Action <>9__1_0
    static ::System::Action* _get_$$9__1_0();
    // Set static field: static public System.Action <>9__1_0
    static void _set_$$9__1_0(::System::Action* value);
    // Get static field: static public System.Action <>9__1_1
    static ::System::Action* _get_$$9__1_1();
    // Set static field: static public System.Action <>9__1_1
    static void _set_$$9__1_1(::System::Action* value);
    // Get static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__2_0
    static ::System::Action_1<::Xefier::Threading::Tasks::ITask*>* _get_$$9__2_0();
    // Set static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__2_0
    static void _set_$$9__2_0(::System::Action_1<::Xefier::Threading::Tasks::ITask*>* value);
    // Get static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__2_1
    static ::System::Action_1<::Xefier::Threading::Tasks::ITask*>* _get_$$9__2_1();
    // Set static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__2_1
    static void _set_$$9__2_1(::System::Action_1<::Xefier::Threading::Tasks::ITask*>* value);
    // Get static field: static public System.Func`1<System.Single> <>9__3_0
    static ::System::Func_1<float>* _get_$$9__3_0();
    // Set static field: static public System.Func`1<System.Single> <>9__3_0
    static void _set_$$9__3_0(::System::Func_1<float>* value);
    // Get static field: static public System.Action`1<Xefier.Threading.Tasks.ITask`1<System.Single>> <>9__3_1
    static ::System::Action_1<::Xefier::Threading::Tasks::ITask_1<float>*>* _get_$$9__3_1();
    // Set static field: static public System.Action`1<Xefier.Threading.Tasks.ITask`1<System.Single>> <>9__3_1
    static void _set_$$9__3_1(::System::Action_1<::Xefier::Threading::Tasks::ITask_1<float>*>* value);
    // Get static field: static public System.Action <>9__4_0
    static ::System::Action* _get_$$9__4_0();
    // Set static field: static public System.Action <>9__4_0
    static void _set_$$9__4_0(::System::Action* value);
    // Get static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__4_1
    static ::System::Action_1<::Xefier::Threading::Tasks::ITask*>* _get_$$9__4_1();
    // Set static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__4_1
    static void _set_$$9__4_1(::System::Action_1<::Xefier::Threading::Tasks::ITask*>* value);
    // Get static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__5_0
    static ::System::Action_1<::Xefier::Threading::Tasks::ITask*>* _get_$$9__5_0();
    // Set static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__5_0
    static void _set_$$9__5_0(::System::Action_1<::Xefier::Threading::Tasks::ITask*>* value);
    // Get static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__6_0
    static ::System::Action_1<::Xefier::Threading::Tasks::ITask*>* _get_$$9__6_0();
    // Set static field: static public System.Action`1<Xefier.Threading.Tasks.ITask> <>9__6_0
    static void _set_$$9__6_0(::System::Action_1<::Xefier::Threading::Tasks::ITask*>* value);
    // Get static field: static public System.Action`1<Xefier.Threading.Tasks.ITask`1<Xefier.Threading.Tasks.ITask>> <>9__7_0
    static ::System::Action_1<::Xefier::Threading::Tasks::ITask_1<::Xefier::Threading::Tasks::ITask*>*>* _get_$$9__7_0();
    // Set static field: static public System.Action`1<Xefier.Threading.Tasks.ITask`1<Xefier.Threading.Tasks.ITask>> <>9__7_0
    static void _set_$$9__7_0(::System::Action_1<::Xefier::Threading::Tasks::ITask_1<::Xefier::Threading::Tasks::ITask*>*>* value);
    // static private System.Void .cctor()
    // Offset: 0x103D8D4
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x103D938
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TaskExample::$$c* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::$$c::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TaskExample::$$c*, creationType>()));
    }
    // System.Void <TaskRun>b__1_0()
    // Offset: 0x103D940
    void $TaskRun$b__1_0();
    // System.Void <TaskRun>b__1_1()
    // Offset: 0x103D9AC
    void $TaskRun$b__1_1();
    // System.Void <TaskContinueWith>b__2_0(Xefier.Threading.Tasks.ITask t)
    // Offset: 0x103DA18
    void $TaskContinueWith$b__2_0(::Xefier::Threading::Tasks::ITask* t);
    // System.Void <TaskContinueWith>b__2_1(Xefier.Threading.Tasks.ITask t)
    // Offset: 0x103DA84
    void $TaskContinueWith$b__2_1(::Xefier::Threading::Tasks::ITask* t);
    // System.Single <TaskResult>b__3_0()
    // Offset: 0x103DAF0
    float $TaskResult$b__3_0();
    // System.Void <TaskResult>b__3_1(Xefier.Threading.Tasks.ITask`1<System.Single> t)
    // Offset: 0x103DB68
    void $TaskResult$b__3_1(::Xefier::Threading::Tasks::ITask_1<float>* t);
    // System.Void <TaskException>b__4_0()
    // Offset: 0x103DC8C
    void $TaskException$b__4_0();
    // System.Void <TaskException>b__4_1(Xefier.Threading.Tasks.ITask t)
    // Offset: 0x103DD00
    void $TaskException$b__4_1(::Xefier::Threading::Tasks::ITask* t);
    // System.Void <TaskStatus>b__5_0(Xefier.Threading.Tasks.ITask t)
    // Offset: 0x103DDE4
    void $TaskStatus$b__5_0(::Xefier::Threading::Tasks::ITask* t);
    // System.Void <TaskWhenAll>b__6_0(Xefier.Threading.Tasks.ITask t)
    // Offset: 0x103E124
    void $TaskWhenAll$b__6_0(::Xefier::Threading::Tasks::ITask* t);
    // System.Void <TaskWhenAny>b__7_0(Xefier.Threading.Tasks.ITask`1<Xefier.Threading.Tasks.ITask> t)
    // Offset: 0x103E190
    void $TaskWhenAny$b__7_0(::Xefier::Threading::Tasks::ITask_1<::Xefier::Threading::Tasks::ITask*>* t);
  }; // TaskExample/<>c
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::TaskExample::$$c::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::$$c::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::$$c::$TaskRun$b__1_0
// Il2CppName: <TaskRun>b__1_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::$$c::*)()>(&GlobalNamespace::TaskExample::$$c::$TaskRun$b__1_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample::$$c*), "<TaskRun>b__1_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::$$c::$TaskRun$b__1_1
// Il2CppName: <TaskRun>b__1_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::$$c::*)()>(&GlobalNamespace::TaskExample::$$c::$TaskRun$b__1_1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample::$$c*), "<TaskRun>b__1_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::$$c::$TaskContinueWith$b__2_0
// Il2CppName: <TaskContinueWith>b__2_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::$$c::*)(::Xefier::Threading::Tasks::ITask*)>(&GlobalNamespace::TaskExample::$$c::$TaskContinueWith$b__2_0)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("Xefier.Threading.Tasks", "ITask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample::$$c*), "<TaskContinueWith>b__2_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::$$c::$TaskContinueWith$b__2_1
// Il2CppName: <TaskContinueWith>b__2_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::$$c::*)(::Xefier::Threading::Tasks::ITask*)>(&GlobalNamespace::TaskExample::$$c::$TaskContinueWith$b__2_1)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("Xefier.Threading.Tasks", "ITask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample::$$c*), "<TaskContinueWith>b__2_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::$$c::$TaskResult$b__3_0
// Il2CppName: <TaskResult>b__3_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::TaskExample::$$c::*)()>(&GlobalNamespace::TaskExample::$$c::$TaskResult$b__3_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample::$$c*), "<TaskResult>b__3_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::$$c::$TaskResult$b__3_1
// Il2CppName: <TaskResult>b__3_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::$$c::*)(::Xefier::Threading::Tasks::ITask_1<float>*)>(&GlobalNamespace::TaskExample::$$c::$TaskResult$b__3_1)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Xefier.Threading.Tasks", "ITask`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample::$$c*), "<TaskResult>b__3_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::$$c::$TaskException$b__4_0
// Il2CppName: <TaskException>b__4_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::$$c::*)()>(&GlobalNamespace::TaskExample::$$c::$TaskException$b__4_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample::$$c*), "<TaskException>b__4_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::$$c::$TaskException$b__4_1
// Il2CppName: <TaskException>b__4_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::$$c::*)(::Xefier::Threading::Tasks::ITask*)>(&GlobalNamespace::TaskExample::$$c::$TaskException$b__4_1)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("Xefier.Threading.Tasks", "ITask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample::$$c*), "<TaskException>b__4_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::$$c::$TaskStatus$b__5_0
// Il2CppName: <TaskStatus>b__5_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::$$c::*)(::Xefier::Threading::Tasks::ITask*)>(&GlobalNamespace::TaskExample::$$c::$TaskStatus$b__5_0)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("Xefier.Threading.Tasks", "ITask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample::$$c*), "<TaskStatus>b__5_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::$$c::$TaskWhenAll$b__6_0
// Il2CppName: <TaskWhenAll>b__6_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::$$c::*)(::Xefier::Threading::Tasks::ITask*)>(&GlobalNamespace::TaskExample::$$c::$TaskWhenAll$b__6_0)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("Xefier.Threading.Tasks", "ITask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample::$$c*), "<TaskWhenAll>b__6_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::$$c::$TaskWhenAny$b__7_0
// Il2CppName: <TaskWhenAny>b__7_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::$$c::*)(::Xefier::Threading::Tasks::ITask_1<::Xefier::Threading::Tasks::ITask*>*)>(&GlobalNamespace::TaskExample::$$c::$TaskWhenAny$b__7_0)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Xefier.Threading.Tasks", "ITask`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Xefier.Threading.Tasks", "ITask")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample::$$c*), "<TaskWhenAny>b__7_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
