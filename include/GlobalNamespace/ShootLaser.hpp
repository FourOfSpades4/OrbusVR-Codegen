// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: OrbusAudioParticleController
  class OrbusAudioParticleController;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LineRenderer
  class LineRenderer;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ShootLaser
  class ShootLaser;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ShootLaser);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ShootLaser*, "", "ShootLaser");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x71
  #pragma pack(push, 1)
  // Autogenerated type: ShootLaser
  // [TokenAttribute] Offset: FFFFFFFF
  class ShootLaser : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MagicalActual.OrbusAudioParticleController explosionVFX
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::OrbusAudioParticleController* explosionVFX;
    // Field size check
    static_assert(sizeof(::MagicalActual::OrbusAudioParticleController*) == 0x8);
    // private System.Boolean hasPlayedExplosion
    // Size: 0x1
    // Offset: 0x20
    bool hasPlayedExplosion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasPlayedExplosion and: lineRenderer
    char __padding1[0x7] = {};
    // private UnityEngine.LineRenderer lineRenderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::LineRenderer* lineRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // private UnityEngine.Material lineMat
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* lineMat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.Single length
    // Size: 0x4
    // Offset: 0x38
    float length;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single speed
    // Size: 0x4
    // Offset: 0x3C
    float speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean loop
    // Size: 0x1
    // Offset: 0x40
    bool loop;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: loop and: loopDelay
    char __padding6[0x3] = {};
    // private System.Single loopDelay
    // Size: 0x4
    // Offset: 0x44
    float loopDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single textureOffsetSpeed
    // Size: 0x4
    // Offset: 0x48
    float textureOffsetSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fadeSpeed
    // Size: 0x4
    // Offset: 0x4C
    float fadeSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fadeDelay
    // Size: 0x4
    // Offset: 0x50
    float fadeDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single delay
    // Size: 0x4
    // Offset: 0x54
    float delay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single startWidth
    // Size: 0x4
    // Offset: 0x58
    float startWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 endPos
    // Size: 0xC
    // Offset: 0x5C
    ::UnityEngine::Vector3 endPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector2 textureOffset
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Vector2 textureOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Boolean isPlaying
    // Size: 0x1
    // Offset: 0x70
    bool isPlaying;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MagicalActual.OrbusAudioParticleController explosionVFX
    [[deprecated("Use field access instead!")]] ::MagicalActual::OrbusAudioParticleController*& dyn_explosionVFX();
    // Get instance field reference: private System.Boolean hasPlayedExplosion
    [[deprecated("Use field access instead!")]] bool& dyn_hasPlayedExplosion();
    // Get instance field reference: private UnityEngine.LineRenderer lineRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn_lineRenderer();
    // Get instance field reference: private UnityEngine.Material lineMat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_lineMat();
    // Get instance field reference: public System.Single length
    [[deprecated("Use field access instead!")]] float& dyn_length();
    // Get instance field reference: public System.Single speed
    [[deprecated("Use field access instead!")]] float& dyn_speed();
    // Get instance field reference: public System.Boolean loop
    [[deprecated("Use field access instead!")]] bool& dyn_loop();
    // Get instance field reference: private System.Single loopDelay
    [[deprecated("Use field access instead!")]] float& dyn_loopDelay();
    // Get instance field reference: public System.Single textureOffsetSpeed
    [[deprecated("Use field access instead!")]] float& dyn_textureOffsetSpeed();
    // Get instance field reference: public System.Single fadeSpeed
    [[deprecated("Use field access instead!")]] float& dyn_fadeSpeed();
    // Get instance field reference: public System.Single fadeDelay
    [[deprecated("Use field access instead!")]] float& dyn_fadeDelay();
    // Get instance field reference: private System.Single delay
    [[deprecated("Use field access instead!")]] float& dyn_delay();
    // Get instance field reference: private System.Single startWidth
    [[deprecated("Use field access instead!")]] float& dyn_startWidth();
    // Get instance field reference: private UnityEngine.Vector3 endPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_endPos();
    // Get instance field reference: private UnityEngine.Vector2 textureOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_textureOffset();
    // Get instance field reference: private System.Boolean isPlaying
    [[deprecated("Use field access instead!")]] bool& dyn_isPlaying();
    // private System.Void Start()
    // Offset: 0xE35404
    void Start();
    // private System.Void Update()
    // Offset: 0xE35628
    void Update();
    // public System.Void Play()
    // Offset: 0xE358C0
    void Play();
    // public System.Void .ctor()
    // Offset: 0xE358CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ShootLaser* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShootLaser::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ShootLaser*, creationType>()));
    }
  }; // ShootLaser
  #pragma pack(pop)
  static check_size<sizeof(ShootLaser), 112 + sizeof(bool)> __GlobalNamespace_ShootLaserSizeCheck;
  static_assert(sizeof(ShootLaser) == 0x71);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ShootLaser::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ShootLaser::*)()>(&GlobalNamespace::ShootLaser::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ShootLaser*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ShootLaser::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ShootLaser::*)()>(&GlobalNamespace::ShootLaser::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ShootLaser*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ShootLaser::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ShootLaser::*)()>(&GlobalNamespace::ShootLaser::Play)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ShootLaser*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ShootLaser::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
