// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LocomotionController
  class LocomotionController;
  // Forward declaring type: LocomotionTeleport
  class LocomotionTeleport;
  // Forward declaring type: TeleportInputHandler
  class TeleportInputHandler;
  // Forward declaring type: TeleportAimHandler
  class TeleportAimHandler;
  // Forward declaring type: TeleportTargetHandler
  class TeleportTargetHandler;
  // Forward declaring type: TeleportOrientationHandler
  class TeleportOrientationHandler;
  // Forward declaring type: TeleportTransition
  class TeleportTransition;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Toggle
  class Toggle;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LocomotionSampleSupport
  class LocomotionSampleSupport;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LocomotionSampleSupport);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LocomotionSampleSupport*, "", "LocomotionSampleSupport");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: LocomotionSampleSupport
  // [TokenAttribute] Offset: FFFFFFFF
  class LocomotionSampleSupport : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private LocomotionController lc
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::LocomotionController* lc;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LocomotionController*) == 0x8);
    // private System.Boolean inMenu
    // Size: 0x1
    // Offset: 0x20
    bool inMenu;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private LocomotionController lc
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LocomotionController*& dyn_lc();
    // Get instance field reference: private System.Boolean inMenu
    [[deprecated("Use field access instead!")]] bool& dyn_inMenu();
    // private LocomotionTeleport get_TeleportController()
    // Offset: 0x120DF80
    ::GlobalNamespace::LocomotionTeleport* get_TeleportController();
    // public System.Void Start()
    // Offset: 0x120DFE0
    void Start();
    // public System.Void Update()
    // Offset: 0x120E3A0
    void Update();
    // static private System.Void Log(System.String msg)
    // Offset: 0x120E49C
    static void Log(::StringW msg);
    // static public TActivate ActivateCategory(UnityEngine.GameObject target)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TCategory, class TActivate>
    static TActivate ActivateCategory(::UnityEngine::GameObject* target) {
      static_assert(std::is_convertible_v<TCategory, ::UnityEngine::MonoBehaviour*>);
      static_assert(std::is_convertible_v<TActivate, ::UnityEngine::MonoBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocomotionSampleSupport::ActivateCategory");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LocomotionSampleSupport", "ActivateCategory", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TCategory>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TActivate>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TCategory>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TActivate>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<TActivate, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, target);
    }
    // protected System.Void ActivateHandlers()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TInput, class TAim, class TTarget, class TOrientation, class TTransition>
    void ActivateHandlers() {
      static_assert(std::is_convertible_v<TInput, ::GlobalNamespace::TeleportInputHandler*>);
      static_assert(std::is_convertible_v<TAim, ::GlobalNamespace::TeleportAimHandler*>);
      static_assert(std::is_convertible_v<TTarget, ::GlobalNamespace::TeleportTargetHandler*>);
      static_assert(std::is_convertible_v<TOrientation, ::GlobalNamespace::TeleportOrientationHandler*>);
      static_assert(std::is_convertible_v<TTransition, ::GlobalNamespace::TeleportTransition*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocomotionSampleSupport::ActivateHandlers");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateHandlers", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TInput>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TAim>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TTarget>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TOrientation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TTransition>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TInput>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TAim>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TTarget>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TOrientation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TTransition>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method);
    }
    // protected System.Void ActivateInput()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TActivate>
    void ActivateInput() {
      static_assert(std::is_convertible_v<TActivate, ::GlobalNamespace::TeleportInputHandler*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocomotionSampleSupport::ActivateInput");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateInput", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TActivate>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TActivate>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method);
    }
    // protected System.Void ActivateAim()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TActivate>
    void ActivateAim() {
      static_assert(std::is_convertible_v<TActivate, ::GlobalNamespace::TeleportAimHandler*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocomotionSampleSupport::ActivateAim");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateAim", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TActivate>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TActivate>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method);
    }
    // protected System.Void ActivateTarget()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TActivate>
    void ActivateTarget() {
      static_assert(std::is_convertible_v<TActivate, ::GlobalNamespace::TeleportTargetHandler*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocomotionSampleSupport::ActivateTarget");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateTarget", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TActivate>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TActivate>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method);
    }
    // protected System.Void ActivateOrientation()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TActivate>
    void ActivateOrientation() {
      static_assert(std::is_convertible_v<TActivate, ::GlobalNamespace::TeleportOrientationHandler*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocomotionSampleSupport::ActivateOrientation");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateOrientation", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TActivate>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TActivate>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method);
    }
    // protected System.Void ActivateTransition()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TActivate>
    void ActivateTransition() {
      static_assert(std::is_convertible_v<TActivate, ::GlobalNamespace::TeleportTransition*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocomotionSampleSupport::ActivateTransition");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateTransition", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TActivate>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TActivate>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method);
    }
    // protected TActivate ActivateCategory()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TCategory, class TActivate>
    TActivate ActivateCategory() {
      static_assert(std::is_convertible_v<TCategory, ::UnityEngine::MonoBehaviour*>);
      static_assert(std::is_convertible_v<TActivate, ::UnityEngine::MonoBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocomotionSampleSupport::ActivateCategory");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateCategory", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TCategory>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TActivate>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TCategory>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TActivate>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<TActivate, false>(this, ___generic__method);
    }
    // protected System.Void UpdateToggle(UnityEngine.UI.Toggle toggle, System.Boolean enabled)
    // Offset: 0x120E504
    void UpdateToggle(::UnityEngine::UI::Toggle* toggle, bool enabled);
    // private System.Void SetupNonCap()
    // Offset: 0x120E568
    void SetupNonCap();
    // private System.Void SetupTeleportDefaults()
    // Offset: 0x120E618
    void SetupTeleportDefaults();
    // protected UnityEngine.GameObject AddInstance(UnityEngine.GameObject template, System.String label)
    // Offset: 0x120E838
    ::UnityEngine::GameObject* AddInstance(::UnityEngine::GameObject* _template, ::StringW label);
    // private System.Void SetupNodeTeleport()
    // Offset: 0x120E928
    void SetupNodeTeleport();
    // private System.Void SetupTwoStickTeleport()
    // Offset: 0x120E24C
    void SetupTwoStickTeleport();
    // private System.Void SetupWalkOnly()
    // Offset: 0x120EA10
    void SetupWalkOnly();
    // private System.Void SetupLeftStrafeRightTeleport()
    // Offset: 0x120EAA0
    void SetupLeftStrafeRightTeleport();
    // public System.Void .ctor()
    // Offset: 0x120EBD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocomotionSampleSupport* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocomotionSampleSupport::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocomotionSampleSupport*, creationType>()));
    }
  }; // LocomotionSampleSupport
  #pragma pack(pop)
  static check_size<sizeof(LocomotionSampleSupport), 32 + sizeof(bool)> __GlobalNamespace_LocomotionSampleSupportSizeCheck;
  static_assert(sizeof(LocomotionSampleSupport) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::get_TeleportController
// Il2CppName: get_TeleportController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LocomotionTeleport* (GlobalNamespace::LocomotionSampleSupport::*)()>(&GlobalNamespace::LocomotionSampleSupport::get_TeleportController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionSampleSupport*), "get_TeleportController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionSampleSupport::*)()>(&GlobalNamespace::LocomotionSampleSupport::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionSampleSupport*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionSampleSupport::*)()>(&GlobalNamespace::LocomotionSampleSupport::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionSampleSupport*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::LocomotionSampleSupport::Log)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionSampleSupport*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::ActivateCategory
// Il2CppName: ActivateCategory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::ActivateHandlers
// Il2CppName: ActivateHandlers
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::ActivateInput
// Il2CppName: ActivateInput
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::ActivateAim
// Il2CppName: ActivateAim
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::ActivateTarget
// Il2CppName: ActivateTarget
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::ActivateOrientation
// Il2CppName: ActivateOrientation
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::ActivateTransition
// Il2CppName: ActivateTransition
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::ActivateCategory
// Il2CppName: ActivateCategory
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::UpdateToggle
// Il2CppName: UpdateToggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionSampleSupport::*)(::UnityEngine::UI::Toggle*, bool)>(&GlobalNamespace::LocomotionSampleSupport::UpdateToggle)> {
  static const MethodInfo* get() {
    static auto* toggle = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Toggle")->byval_arg;
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionSampleSupport*), "UpdateToggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toggle, enabled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::SetupNonCap
// Il2CppName: SetupNonCap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionSampleSupport::*)()>(&GlobalNamespace::LocomotionSampleSupport::SetupNonCap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionSampleSupport*), "SetupNonCap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::SetupTeleportDefaults
// Il2CppName: SetupTeleportDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionSampleSupport::*)()>(&GlobalNamespace::LocomotionSampleSupport::SetupTeleportDefaults)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionSampleSupport*), "SetupTeleportDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::AddInstance
// Il2CppName: AddInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::LocomotionSampleSupport::*)(::UnityEngine::GameObject*, ::StringW)>(&GlobalNamespace::LocomotionSampleSupport::AddInstance)> {
  static const MethodInfo* get() {
    static auto* _template = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* label = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionSampleSupport*), "AddInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_template, label});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::SetupNodeTeleport
// Il2CppName: SetupNodeTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionSampleSupport::*)()>(&GlobalNamespace::LocomotionSampleSupport::SetupNodeTeleport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionSampleSupport*), "SetupNodeTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::SetupTwoStickTeleport
// Il2CppName: SetupTwoStickTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionSampleSupport::*)()>(&GlobalNamespace::LocomotionSampleSupport::SetupTwoStickTeleport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionSampleSupport*), "SetupTwoStickTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::SetupWalkOnly
// Il2CppName: SetupWalkOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionSampleSupport::*)()>(&GlobalNamespace::LocomotionSampleSupport::SetupWalkOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionSampleSupport*), "SetupWalkOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::SetupLeftStrafeRightTeleport
// Il2CppName: SetupLeftStrafeRightTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionSampleSupport::*)()>(&GlobalNamespace::LocomotionSampleSupport::SetupLeftStrafeRightTeleport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionSampleSupport*), "SetupLeftStrafeRightTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionSampleSupport::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
