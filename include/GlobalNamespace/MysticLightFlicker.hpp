// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MysticLightFlicker
  class MysticLightFlicker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MysticLightFlicker);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MysticLightFlicker*, "", "MysticLightFlicker");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: MysticLightFlicker
  // [TokenAttribute] Offset: FFFFFFFF
  class MysticLightFlicker : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.String waveFunction
    // Size: 0x8
    // Offset: 0x18
    ::StringW waveFunction;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single startValue
    // Size: 0x4
    // Offset: 0x20
    float startValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single amplitude
    // Size: 0x4
    // Offset: 0x24
    float amplitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single phase
    // Size: 0x4
    // Offset: 0x28
    float phase;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single frequency
    // Size: 0x4
    // Offset: 0x2C
    float frequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color originalColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color originalColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String waveFunction
    [[deprecated("Use field access instead!")]] ::StringW& dyn_waveFunction();
    // Get instance field reference: public System.Single startValue
    [[deprecated("Use field access instead!")]] float& dyn_startValue();
    // Get instance field reference: public System.Single amplitude
    [[deprecated("Use field access instead!")]] float& dyn_amplitude();
    // Get instance field reference: public System.Single phase
    [[deprecated("Use field access instead!")]] float& dyn_phase();
    // Get instance field reference: public System.Single frequency
    [[deprecated("Use field access instead!")]] float& dyn_frequency();
    // Get instance field reference: private UnityEngine.Color originalColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_originalColor();
    // private System.Void Start()
    // Offset: 0xF5493C
    void Start();
    // private System.Void Update()
    // Offset: 0xF549B0
    void Update();
    // private System.Single EvalWave()
    // Offset: 0xF54A78
    float EvalWave();
    // public System.Void .ctor()
    // Offset: 0xF54C4C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MysticLightFlicker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MysticLightFlicker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MysticLightFlicker*, creationType>()));
    }
  }; // MysticLightFlicker
  #pragma pack(pop)
  static check_size<sizeof(MysticLightFlicker), 48 + sizeof(::UnityEngine::Color)> __GlobalNamespace_MysticLightFlickerSizeCheck;
  static_assert(sizeof(MysticLightFlicker) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MysticLightFlicker::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MysticLightFlicker::*)()>(&GlobalNamespace::MysticLightFlicker::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MysticLightFlicker*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MysticLightFlicker::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MysticLightFlicker::*)()>(&GlobalNamespace::MysticLightFlicker::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MysticLightFlicker*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MysticLightFlicker::EvalWave
// Il2CppName: EvalWave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MysticLightFlicker::*)()>(&GlobalNamespace::MysticLightFlicker::EvalWave)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MysticLightFlicker*), "EvalWave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MysticLightFlicker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
