// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ClickedEventHandler
  class ClickedEventHandler;
  // Forward declaring type: ClickedEventArgs
  struct ClickedEventArgs;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SteamVR_TrackedController
  class SteamVR_TrackedController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SteamVR_TrackedController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SteamVR_TrackedController*, "", "SteamVR_TrackedController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC0
  #pragma pack(push, 1)
  // Autogenerated type: SteamVR_TrackedController
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamVR_TrackedController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.UInt32 controllerIndex
    // Size: 0x4
    // Offset: 0x18
    uint controllerIndex;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: controllerIndex and: controllerState
    char __padding0[0x4] = {};
    // public Valve.VR.VRControllerState_t controllerState
    // Size: 0x40
    // Offset: 0x20
    ::Valve::VR::VRControllerState_t controllerState;
    // Field size check
    static_assert(sizeof(::Valve::VR::VRControllerState_t) == 0x40);
    // public System.Boolean triggerPressed
    // Size: 0x1
    // Offset: 0x60
    bool triggerPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean steamPressed
    // Size: 0x1
    // Offset: 0x61
    bool steamPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean menuPressed
    // Size: 0x1
    // Offset: 0x62
    bool menuPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean padPressed
    // Size: 0x1
    // Offset: 0x63
    bool padPressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean padTouched
    // Size: 0x1
    // Offset: 0x64
    bool padTouched;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean gripped
    // Size: 0x1
    // Offset: 0x65
    bool gripped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: gripped and: MenuButtonClicked
    char __padding7[0x2] = {};
    // [CompilerGeneratedAttribute] Offset: 0xADC7AC
    // private ClickedEventHandler MenuButtonClicked
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::ClickedEventHandler* MenuButtonClicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADC7BC
    // private ClickedEventHandler MenuButtonUnclicked
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::ClickedEventHandler* MenuButtonUnclicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADC7CC
    // private ClickedEventHandler TriggerClicked
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::ClickedEventHandler* TriggerClicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADC7DC
    // private ClickedEventHandler TriggerUnclicked
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::ClickedEventHandler* TriggerUnclicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADC7EC
    // private ClickedEventHandler SteamClicked
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::ClickedEventHandler* SteamClicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADC7FC
    // private ClickedEventHandler PadClicked
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::ClickedEventHandler* PadClicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADC80C
    // private ClickedEventHandler PadUnclicked
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::ClickedEventHandler* PadUnclicked;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADC81C
    // private ClickedEventHandler PadTouched
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::ClickedEventHandler* PadTouched;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADC82C
    // private ClickedEventHandler PadUntouched
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::ClickedEventHandler* PadUntouched;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADC83C
    // private ClickedEventHandler Gripped
    // Size: 0x8
    // Offset: 0xB0
    ::GlobalNamespace::ClickedEventHandler* Gripped;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADC84C
    // private ClickedEventHandler Ungripped
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::ClickedEventHandler* Ungripped;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.UInt32 controllerIndex
    [[deprecated("Use field access instead!")]] uint& dyn_controllerIndex();
    // Get instance field reference: public Valve.VR.VRControllerState_t controllerState
    [[deprecated("Use field access instead!")]] ::Valve::VR::VRControllerState_t& dyn_controllerState();
    // Get instance field reference: public System.Boolean triggerPressed
    [[deprecated("Use field access instead!")]] bool& dyn_triggerPressed();
    // Get instance field reference: public System.Boolean steamPressed
    [[deprecated("Use field access instead!")]] bool& dyn_steamPressed();
    // Get instance field reference: public System.Boolean menuPressed
    [[deprecated("Use field access instead!")]] bool& dyn_menuPressed();
    // Get instance field reference: public System.Boolean padPressed
    [[deprecated("Use field access instead!")]] bool& dyn_padPressed();
    // Get instance field reference: public System.Boolean padTouched
    [[deprecated("Use field access instead!")]] bool& dyn_padTouched();
    // Get instance field reference: public System.Boolean gripped
    [[deprecated("Use field access instead!")]] bool& dyn_gripped();
    // Get instance field reference: private ClickedEventHandler MenuButtonClicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_MenuButtonClicked();
    // Get instance field reference: private ClickedEventHandler MenuButtonUnclicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_MenuButtonUnclicked();
    // Get instance field reference: private ClickedEventHandler TriggerClicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_TriggerClicked();
    // Get instance field reference: private ClickedEventHandler TriggerUnclicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_TriggerUnclicked();
    // Get instance field reference: private ClickedEventHandler SteamClicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_SteamClicked();
    // Get instance field reference: private ClickedEventHandler PadClicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_PadClicked();
    // Get instance field reference: private ClickedEventHandler PadUnclicked
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_PadUnclicked();
    // Get instance field reference: private ClickedEventHandler PadTouched
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_PadTouched();
    // Get instance field reference: private ClickedEventHandler PadUntouched
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_PadUntouched();
    // Get instance field reference: private ClickedEventHandler Gripped
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_Gripped();
    // Get instance field reference: private ClickedEventHandler Ungripped
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_Ungripped();
    // public System.Void add_MenuButtonClicked(ClickedEventHandler value)
    // Offset: 0xF12128
    void add_MenuButtonClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_MenuButtonClicked(ClickedEventHandler value)
    // Offset: 0xF12214
    void remove_MenuButtonClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_MenuButtonUnclicked(ClickedEventHandler value)
    // Offset: 0xF12300
    void add_MenuButtonUnclicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_MenuButtonUnclicked(ClickedEventHandler value)
    // Offset: 0xF123EC
    void remove_MenuButtonUnclicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_TriggerClicked(ClickedEventHandler value)
    // Offset: 0xF0EF3C
    void add_TriggerClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_TriggerClicked(ClickedEventHandler value)
    // Offset: 0xF124D8
    void remove_TriggerClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_TriggerUnclicked(ClickedEventHandler value)
    // Offset: 0xF125C4
    void add_TriggerUnclicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_TriggerUnclicked(ClickedEventHandler value)
    // Offset: 0xF126B0
    void remove_TriggerUnclicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_SteamClicked(ClickedEventHandler value)
    // Offset: 0xF1279C
    void add_SteamClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_SteamClicked(ClickedEventHandler value)
    // Offset: 0xF12888
    void remove_SteamClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_PadClicked(ClickedEventHandler value)
    // Offset: 0xF12974
    void add_PadClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_PadClicked(ClickedEventHandler value)
    // Offset: 0xF12A60
    void remove_PadClicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_PadUnclicked(ClickedEventHandler value)
    // Offset: 0xF12B4C
    void add_PadUnclicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_PadUnclicked(ClickedEventHandler value)
    // Offset: 0xF12C38
    void remove_PadUnclicked(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_PadTouched(ClickedEventHandler value)
    // Offset: 0xF12D24
    void add_PadTouched(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_PadTouched(ClickedEventHandler value)
    // Offset: 0xF12E10
    void remove_PadTouched(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_PadUntouched(ClickedEventHandler value)
    // Offset: 0xF12EFC
    void add_PadUntouched(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_PadUntouched(ClickedEventHandler value)
    // Offset: 0xF12FE8
    void remove_PadUntouched(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_Gripped(ClickedEventHandler value)
    // Offset: 0xF130D4
    void add_Gripped(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_Gripped(ClickedEventHandler value)
    // Offset: 0xF131C0
    void remove_Gripped(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void add_Ungripped(ClickedEventHandler value)
    // Offset: 0xF132AC
    void add_Ungripped(::GlobalNamespace::ClickedEventHandler* value);
    // public System.Void remove_Ungripped(ClickedEventHandler value)
    // Offset: 0xF13398
    void remove_Ungripped(::GlobalNamespace::ClickedEventHandler* value);
    // protected System.Void Start()
    // Offset: 0xF13484
    void Start();
    // public System.Void SetDeviceIndex(System.Int32 index)
    // Offset: 0xF135FC
    void SetDeviceIndex(int index);
    // public System.Void OnTriggerClicked(ClickedEventArgs e)
    // Offset: 0xF13604
    void OnTriggerClicked(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnTriggerUnclicked(ClickedEventArgs e)
    // Offset: 0xF13630
    void OnTriggerUnclicked(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnMenuClicked(ClickedEventArgs e)
    // Offset: 0xF1365C
    void OnMenuClicked(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnMenuUnclicked(ClickedEventArgs e)
    // Offset: 0xF13688
    void OnMenuUnclicked(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnSteamClicked(ClickedEventArgs e)
    // Offset: 0xF136B4
    void OnSteamClicked(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnPadClicked(ClickedEventArgs e)
    // Offset: 0xF136E0
    void OnPadClicked(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnPadUnclicked(ClickedEventArgs e)
    // Offset: 0xF1370C
    void OnPadUnclicked(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnPadTouched(ClickedEventArgs e)
    // Offset: 0xF13738
    void OnPadTouched(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnPadUntouched(ClickedEventArgs e)
    // Offset: 0xF13764
    void OnPadUntouched(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnGripped(ClickedEventArgs e)
    // Offset: 0xF13790
    void OnGripped(::GlobalNamespace::ClickedEventArgs e);
    // public System.Void OnUngripped(ClickedEventArgs e)
    // Offset: 0xF137BC
    void OnUngripped(::GlobalNamespace::ClickedEventArgs e);
    // protected System.Void Update()
    // Offset: 0xF137E8
    void Update();
    // public System.Void .ctor()
    // Offset: 0xF13AD8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamVR_TrackedController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TrackedController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamVR_TrackedController*, creationType>()));
    }
  }; // SteamVR_TrackedController
  #pragma pack(pop)
  static check_size<sizeof(SteamVR_TrackedController), 184 + sizeof(::GlobalNamespace::ClickedEventHandler*)> __GlobalNamespace_SteamVR_TrackedControllerSizeCheck;
  static_assert(sizeof(SteamVR_TrackedController) == 0xC0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::add_MenuButtonClicked
// Il2CppName: add_MenuButtonClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::add_MenuButtonClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "add_MenuButtonClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::remove_MenuButtonClicked
// Il2CppName: remove_MenuButtonClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::remove_MenuButtonClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "remove_MenuButtonClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::add_MenuButtonUnclicked
// Il2CppName: add_MenuButtonUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::add_MenuButtonUnclicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "add_MenuButtonUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::remove_MenuButtonUnclicked
// Il2CppName: remove_MenuButtonUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::remove_MenuButtonUnclicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "remove_MenuButtonUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::add_TriggerClicked
// Il2CppName: add_TriggerClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::add_TriggerClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "add_TriggerClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::remove_TriggerClicked
// Il2CppName: remove_TriggerClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::remove_TriggerClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "remove_TriggerClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::add_TriggerUnclicked
// Il2CppName: add_TriggerUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::add_TriggerUnclicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "add_TriggerUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::remove_TriggerUnclicked
// Il2CppName: remove_TriggerUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::remove_TriggerUnclicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "remove_TriggerUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::add_SteamClicked
// Il2CppName: add_SteamClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::add_SteamClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "add_SteamClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::remove_SteamClicked
// Il2CppName: remove_SteamClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::remove_SteamClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "remove_SteamClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::add_PadClicked
// Il2CppName: add_PadClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::add_PadClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "add_PadClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::remove_PadClicked
// Il2CppName: remove_PadClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::remove_PadClicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "remove_PadClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::add_PadUnclicked
// Il2CppName: add_PadUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::add_PadUnclicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "add_PadUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::remove_PadUnclicked
// Il2CppName: remove_PadUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::remove_PadUnclicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "remove_PadUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::add_PadTouched
// Il2CppName: add_PadTouched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::add_PadTouched)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "add_PadTouched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::remove_PadTouched
// Il2CppName: remove_PadTouched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::remove_PadTouched)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "remove_PadTouched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::add_PadUntouched
// Il2CppName: add_PadUntouched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::add_PadUntouched)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "add_PadUntouched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::remove_PadUntouched
// Il2CppName: remove_PadUntouched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::remove_PadUntouched)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "remove_PadUntouched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::add_Gripped
// Il2CppName: add_Gripped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::add_Gripped)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "add_Gripped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::remove_Gripped
// Il2CppName: remove_Gripped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::remove_Gripped)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "remove_Gripped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::add_Ungripped
// Il2CppName: add_Ungripped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::add_Ungripped)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "add_Ungripped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::remove_Ungripped
// Il2CppName: remove_Ungripped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventHandler*)>(&GlobalNamespace::SteamVR_TrackedController::remove_Ungripped)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ClickedEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "remove_Ungripped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)()>(&GlobalNamespace::SteamVR_TrackedController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::SetDeviceIndex
// Il2CppName: SetDeviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(int)>(&GlobalNamespace::SteamVR_TrackedController::SetDeviceIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "SetDeviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::OnTriggerClicked
// Il2CppName: OnTriggerClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::SteamVR_TrackedController::OnTriggerClicked)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "OnTriggerClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::OnTriggerUnclicked
// Il2CppName: OnTriggerUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::SteamVR_TrackedController::OnTriggerUnclicked)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "OnTriggerUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::OnMenuClicked
// Il2CppName: OnMenuClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::SteamVR_TrackedController::OnMenuClicked)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "OnMenuClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::OnMenuUnclicked
// Il2CppName: OnMenuUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::SteamVR_TrackedController::OnMenuUnclicked)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "OnMenuUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::OnSteamClicked
// Il2CppName: OnSteamClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::SteamVR_TrackedController::OnSteamClicked)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "OnSteamClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::OnPadClicked
// Il2CppName: OnPadClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::SteamVR_TrackedController::OnPadClicked)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "OnPadClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::OnPadUnclicked
// Il2CppName: OnPadUnclicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::SteamVR_TrackedController::OnPadUnclicked)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "OnPadUnclicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::OnPadTouched
// Il2CppName: OnPadTouched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::SteamVR_TrackedController::OnPadTouched)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "OnPadTouched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::OnPadUntouched
// Il2CppName: OnPadUntouched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::SteamVR_TrackedController::OnPadUntouched)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "OnPadUntouched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::OnGripped
// Il2CppName: OnGripped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::SteamVR_TrackedController::OnGripped)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "OnGripped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::OnUngripped
// Il2CppName: OnUngripped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)(::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::SteamVR_TrackedController::OnUngripped)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "OnUngripped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TrackedController::*)()>(&GlobalNamespace::SteamVR_TrackedController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TrackedController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TrackedController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
