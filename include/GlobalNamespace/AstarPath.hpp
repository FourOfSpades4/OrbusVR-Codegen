// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Pathfinding.GraphDebugMode
#include "Pathfinding/GraphDebugMode.hpp"
// Including type: Pathfinding.PathLog
#include "Pathfinding/PathLog.hpp"
// Including type: Pathfinding.Heuristic
#include "Pathfinding/Heuristic.hpp"
// Including type: Pathfinding.ThreadCount
#include "Pathfinding/ThreadCount.hpp"
// Including type: Pathfinding.PathThreadInfo
#include "Pathfinding/PathThreadInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: GraphUpdateOrder because it is already included!
  // Skipping declaration: AstarWorkItem because it is already included!
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: AutoResetEvent
  class AutoResetEvent;
  // Forward declaring type: Thread
  class Thread;
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: OnGraphDelegate
  class OnGraphDelegate;
  // Forward declaring type: AstarData
  class AstarData;
  // Forward declaring type: AstarColor
  class AstarColor;
  // Forward declaring type: Path
  class Path;
  // Forward declaring type: GraphUpdateObject
  class GraphUpdateObject;
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: ThreadControlQueue
  class ThreadControlQueue;
  // Forward declaring type: EuclideanEmbedding
  class EuclideanEmbedding;
  // Forward declaring type: OnPathDelegate
  class OnPathDelegate;
  // Forward declaring type: OnScanDelegate
  class OnScanDelegate;
  // Forward declaring type: NavGraph
  class NavGraph;
  // Forward declaring type: PathHandler
  class PathHandler;
  // Forward declaring type: OnScanStatus
  class OnScanStatus;
  // Forward declaring type: NNInfo
  struct NNInfo;
  // Forward declaring type: NNConstraint
  class NNConstraint;
  // Forward declaring type: IUpdatableGraph
  class IUpdatableGraph;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Pathfinding::Util
namespace Pathfinding::Util {
  // Forward declaring type: LockFreeStack
  class LockFreeStack;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Ray
  struct Ray;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AstarPath
  class AstarPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AstarPath);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AstarPath*, "", "AstarPath");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x129
  #pragma pack(push, 1)
  // Autogenerated type: AstarPath
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: ACD018
  // [AddComponentMenu] Offset: ACD018
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class AstarPath : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::AstarPath::AstarDistribution
    struct AstarDistribution;
    // Nested type: ::GlobalNamespace::AstarPath::GraphUpdateOrder
    struct GraphUpdateOrder;
    // Nested type: ::GlobalNamespace::AstarPath::GUOSingle
    struct GUOSingle;
    // Nested type: ::GlobalNamespace::AstarPath::AstarWorkItem
    struct AstarWorkItem;
    // Nested type: ::GlobalNamespace::AstarPath::$DelayedGraphUpdate$d__120
    class $DelayedGraphUpdate$d__120;
    // Nested type: ::GlobalNamespace::AstarPath::$UpdateGraphsInteral$d__123
    class $UpdateGraphsInteral$d__123;
    // Nested type: ::GlobalNamespace::AstarPath::$$c__DisplayClass143_0
    class $$c__DisplayClass143_0;
    // Nested type: ::GlobalNamespace::AstarPath::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::AstarPath::$$c__DisplayClass149_0
    class $$c__DisplayClass149_0;
    // Nested type: ::GlobalNamespace::AstarPath::$$c__DisplayClass149_1
    class $$c__DisplayClass149_1;
    // Nested type: ::GlobalNamespace::AstarPath::$$c__DisplayClass149_2
    class $$c__DisplayClass149_2;
    // Nested type: ::GlobalNamespace::AstarPath::$CalculatePaths$d__159
    class $CalculatePaths$d__159;
    // Nested type: ::GlobalNamespace::AstarPath::$$c__DisplayClass163_0
    class $$c__DisplayClass163_0;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: AstarPath/AstarDistribution
    // [TokenAttribute] Offset: FFFFFFFF
    struct AstarDistribution/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: AstarDistribution
      constexpr AstarDistribution(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public AstarPath/AstarDistribution WebsiteDownload
      static constexpr const int WebsiteDownload = 0;
      // Get static field: static public AstarPath/AstarDistribution WebsiteDownload
      static ::GlobalNamespace::AstarPath::AstarDistribution _get_WebsiteDownload();
      // Set static field: static public AstarPath/AstarDistribution WebsiteDownload
      static void _set_WebsiteDownload(::GlobalNamespace::AstarPath::AstarDistribution value);
      // static field const value: static public AstarPath/AstarDistribution AssetStore
      static constexpr const int AssetStore = 1;
      // Get static field: static public AstarPath/AstarDistribution AssetStore
      static ::GlobalNamespace::AstarPath::AstarDistribution _get_AssetStore();
      // Set static field: static public AstarPath/AstarDistribution AssetStore
      static void _set_AssetStore(::GlobalNamespace::AstarPath::AstarDistribution value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // AstarPath/AstarDistribution
    #pragma pack(pop)
    static check_size<sizeof(AstarPath::AstarDistribution), 0 + sizeof(int)> __GlobalNamespace_AstarPath_AstarDistributionSizeCheck;
    static_assert(sizeof(AstarPath::AstarDistribution) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: AstarPath/GraphUpdateOrder
    // [TokenAttribute] Offset: FFFFFFFF
    struct GraphUpdateOrder/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GraphUpdateOrder
      constexpr GraphUpdateOrder(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public AstarPath/GraphUpdateOrder GraphUpdate
      static constexpr const int GraphUpdate = 0;
      // Get static field: static public AstarPath/GraphUpdateOrder GraphUpdate
      static ::GlobalNamespace::AstarPath::GraphUpdateOrder _get_GraphUpdate();
      // Set static field: static public AstarPath/GraphUpdateOrder GraphUpdate
      static void _set_GraphUpdate(::GlobalNamespace::AstarPath::GraphUpdateOrder value);
      // static field const value: static public AstarPath/GraphUpdateOrder FloodFill
      static constexpr const int FloodFill = 1;
      // Get static field: static public AstarPath/GraphUpdateOrder FloodFill
      static ::GlobalNamespace::AstarPath::GraphUpdateOrder _get_FloodFill();
      // Set static field: static public AstarPath/GraphUpdateOrder FloodFill
      static void _set_FloodFill(::GlobalNamespace::AstarPath::GraphUpdateOrder value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // AstarPath/GraphUpdateOrder
    #pragma pack(pop)
    static check_size<sizeof(AstarPath::GraphUpdateOrder), 0 + sizeof(int)> __GlobalNamespace_AstarPath_GraphUpdateOrderSizeCheck;
    static_assert(sizeof(AstarPath::GraphUpdateOrder) == 0x4);
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: AstarPath/GUOSingle
    // [TokenAttribute] Offset: FFFFFFFF
    struct GUOSingle/*, public ::System::ValueType*/ {
      public:
      public:
      // public AstarPath/GraphUpdateOrder order
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::AstarPath::GraphUpdateOrder order;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::AstarPath::GraphUpdateOrder) == 0x4);
      // Padding between fields: order and: graph
      char __padding0[0x4] = {};
      // public Pathfinding.IUpdatableGraph graph
      // Size: 0x8
      // Offset: 0x8
      ::Pathfinding::IUpdatableGraph* graph;
      // Field size check
      static_assert(sizeof(::Pathfinding::IUpdatableGraph*) == 0x8);
      // public Pathfinding.GraphUpdateObject obj
      // Size: 0x8
      // Offset: 0x10
      ::Pathfinding::GraphUpdateObject* obj;
      // Field size check
      static_assert(sizeof(::Pathfinding::GraphUpdateObject*) == 0x8);
      public:
      // Creating value type constructor for type: GUOSingle
      constexpr GUOSingle(::GlobalNamespace::AstarPath::GraphUpdateOrder order_ = {}, ::Pathfinding::IUpdatableGraph* graph_ = {}, ::Pathfinding::GraphUpdateObject* obj_ = {}) noexcept : order{order_}, graph{graph_}, obj{obj_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public AstarPath/GraphUpdateOrder order
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::AstarPath::GraphUpdateOrder& dyn_order();
      // Get instance field reference: public Pathfinding.IUpdatableGraph graph
      [[deprecated("Use field access instead!")]] ::Pathfinding::IUpdatableGraph*& dyn_graph();
      // Get instance field reference: public Pathfinding.GraphUpdateObject obj
      [[deprecated("Use field access instead!")]] ::Pathfinding::GraphUpdateObject*& dyn_obj();
    }; // AstarPath/GUOSingle
    #pragma pack(pop)
    static check_size<sizeof(AstarPath::GUOSingle), 16 + sizeof(::Pathfinding::GraphUpdateObject*)> __GlobalNamespace_AstarPath_GUOSingleSizeCheck;
    static_assert(sizeof(AstarPath::GUOSingle) == 0x18);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: AstarPath/AstarWorkItem
    // [TokenAttribute] Offset: FFFFFFFF
    struct AstarWorkItem/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Action init
      // Size: 0x8
      // Offset: 0x0
      ::System::Action* init;
      // Field size check
      static_assert(sizeof(::System::Action*) == 0x8);
      // public System.Func`2<System.Boolean,System.Boolean> update
      // Size: 0x8
      // Offset: 0x8
      ::System::Func_2<bool, bool>* update;
      // Field size check
      static_assert(sizeof(::System::Func_2<bool, bool>*) == 0x8);
      public:
      // Creating value type constructor for type: AstarWorkItem
      constexpr AstarWorkItem(::System::Action* init_ = {}, ::System::Func_2<bool, bool>* update_ = {}) noexcept : init{init_}, update{update_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Action init
      [[deprecated("Use field access instead!")]] ::System::Action*& dyn_init();
      // Get instance field reference: public System.Func`2<System.Boolean,System.Boolean> update
      [[deprecated("Use field access instead!")]] ::System::Func_2<bool, bool>*& dyn_update();
      // public System.Void .ctor(System.Func`2<System.Boolean,System.Boolean> update)
      // Offset: 0xB98E08
      AstarWorkItem(::System::Func_2<bool, bool>* update);
      // public System.Void .ctor(System.Action init, System.Func`2<System.Boolean,System.Boolean> update)
      // Offset: 0xB98E10
      // ABORTED: conflicts with another method.  AstarWorkItem(::System::Action* init, ::System::Func_2<bool, bool>* update);
    }; // AstarPath/AstarWorkItem
    #pragma pack(pop)
    static check_size<sizeof(AstarPath::AstarWorkItem), 8 + sizeof(::System::Func_2<bool, bool>*)> __GlobalNamespace_AstarPath_AstarWorkItemSizeCheck;
    static_assert(sizeof(AstarPath::AstarWorkItem) == 0x10);
    public:
    // public Pathfinding.AstarData astarData
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::AstarData* astarData;
    // Field size check
    static_assert(sizeof(::Pathfinding::AstarData*) == 0x8);
    // public System.Boolean showNavGraphs
    // Size: 0x1
    // Offset: 0x20
    bool showNavGraphs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showUnwalkableNodes
    // Size: 0x1
    // Offset: 0x21
    bool showUnwalkableNodes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showUnwalkableNodes and: debugMode
    char __padding2[0x2] = {};
    // public Pathfinding.GraphDebugMode debugMode
    // Size: 0x4
    // Offset: 0x24
    ::Pathfinding::GraphDebugMode debugMode;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphDebugMode) == 0x4);
    // public System.Single debugFloor
    // Size: 0x4
    // Offset: 0x28
    float debugFloor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single debugRoof
    // Size: 0x4
    // Offset: 0x2C
    float debugRoof;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean manualDebugFloorRoof
    // Size: 0x1
    // Offset: 0x30
    bool manualDebugFloorRoof;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showSearchTree
    // Size: 0x1
    // Offset: 0x31
    bool showSearchTree;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showSearchTree and: unwalkableNodeDebugSize
    char __padding7[0x2] = {};
    // public System.Single unwalkableNodeDebugSize
    // Size: 0x4
    // Offset: 0x34
    float unwalkableNodeDebugSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.PathLog logPathResults
    // Size: 0x4
    // Offset: 0x38
    ::Pathfinding::PathLog logPathResults;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathLog) == 0x4);
    // public System.Single maxNearestNodeDistance
    // Size: 0x4
    // Offset: 0x3C
    float maxNearestNodeDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean scanOnStartup
    // Size: 0x1
    // Offset: 0x40
    bool scanOnStartup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean fullGetNearestSearch
    // Size: 0x1
    // Offset: 0x41
    bool fullGetNearestSearch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean prioritizeGraphs
    // Size: 0x1
    // Offset: 0x42
    bool prioritizeGraphs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: prioritizeGraphs and: prioritizeGraphsLimit
    char __padding13[0x1] = {};
    // public System.Single prioritizeGraphsLimit
    // Size: 0x4
    // Offset: 0x44
    float prioritizeGraphsLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.AstarColor colorSettings
    // Size: 0x8
    // Offset: 0x48
    ::Pathfinding::AstarColor* colorSettings;
    // Field size check
    static_assert(sizeof(::Pathfinding::AstarColor*) == 0x8);
    // protected System.String[] tagNames
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::StringW> tagNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public Pathfinding.Heuristic heuristic
    // Size: 0x4
    // Offset: 0x58
    ::Pathfinding::Heuristic heuristic;
    // Field size check
    static_assert(sizeof(::Pathfinding::Heuristic) == 0x4);
    // public System.Single heuristicScale
    // Size: 0x4
    // Offset: 0x5C
    float heuristicScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.ThreadCount threadCount
    // Size: 0x4
    // Offset: 0x60
    ::Pathfinding::ThreadCount threadCount;
    // Field size check
    static_assert(sizeof(::Pathfinding::ThreadCount) == 0x4);
    // public System.Single maxFrameTime
    // Size: 0x4
    // Offset: 0x64
    float maxFrameTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 minAreaSize
    // Size: 0x4
    // Offset: 0x68
    int minAreaSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean batchGraphUpdates
    // Size: 0x1
    // Offset: 0x6C
    bool batchGraphUpdates;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: batchGraphUpdates and: graphUpdateBatchingInterval
    char __padding22[0x3] = {};
    // public System.Single graphUpdateBatchingInterval
    // Size: 0x4
    // Offset: 0x70
    float graphUpdateBatchingInterval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastScanTime
    // Size: 0x4
    // Offset: 0x74
    float lastScanTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.Path debugPath
    // Size: 0x8
    // Offset: 0x78
    ::Pathfinding::Path* debugPath;
    // Field size check
    static_assert(sizeof(::Pathfinding::Path*) == 0x8);
    // public System.String inGameDebugPath
    // Size: 0x8
    // Offset: 0x80
    ::StringW inGameDebugPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAD8A68
    // private System.Boolean <isScanning>k__BackingField
    // Size: 0x1
    // Offset: 0x88
    bool isScanning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean graphUpdateRoutineRunning
    // Size: 0x1
    // Offset: 0x89
    bool graphUpdateRoutineRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isRegisteredForUpdate
    // Size: 0x1
    // Offset: 0x8A
    bool isRegisteredForUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean workItemsQueued
    // Size: 0x1
    // Offset: 0x8B
    bool workItemsQueued;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean queuedWorkItemFloodFill
    // Size: 0x1
    // Offset: 0x8C
    bool queuedWorkItemFloodFill;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: queuedWorkItemFloodFill and: OnDrawGizmosCallback
    char __padding31[0x3] = {};
    // public System.Action OnDrawGizmosCallback
    // Size: 0x8
    // Offset: 0x90
    ::System::Action* OnDrawGizmosCallback;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public System.Action OnUnloadGizmoMeshes
    // Size: 0x8
    // Offset: 0x98
    ::System::Action* OnUnloadGizmoMeshes;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // [ObsoleteAttribute] Offset: 0xAD8A78
    // public System.Action OnGraphsWillBeUpdated
    // Size: 0x8
    // Offset: 0xA0
    ::System::Action* OnGraphsWillBeUpdated;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // [ObsoleteAttribute] Offset: 0xAD8A88
    // public System.Action OnGraphsWillBeUpdated2
    // Size: 0x8
    // Offset: 0xA8
    ::System::Action* OnGraphsWillBeUpdated2;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Collections.Generic.Queue`1<Pathfinding.GraphUpdateObject> graphUpdateQueue
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateObject*>* graphUpdateQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateObject*>*) == 0x8);
    // private System.Collections.Generic.Stack`1<Pathfinding.GraphNode> floodStack
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::Stack_1<::Pathfinding::GraphNode*>* floodStack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<::Pathfinding::GraphNode*>*) == 0x8);
    // private Pathfinding.ThreadControlQueue pathQueue
    // Size: 0x8
    // Offset: 0xC0
    ::Pathfinding::ThreadControlQueue* pathQueue;
    // Field size check
    static_assert(sizeof(::Pathfinding::ThreadControlQueue*) == 0x8);
    // private System.Threading.Thread graphUpdateThread
    // Size: 0x8
    // Offset: 0xC8
    ::System::Threading::Thread* graphUpdateThread;
    // Field size check
    static_assert(sizeof(::System::Threading::Thread*) == 0x8);
    // public Pathfinding.EuclideanEmbedding euclideanEmbedding
    // Size: 0x8
    // Offset: 0xD0
    ::Pathfinding::EuclideanEmbedding* euclideanEmbedding;
    // Field size check
    static_assert(sizeof(::Pathfinding::EuclideanEmbedding*) == 0x8);
    // private System.Int32 nextNodeIndex
    // Size: 0x4
    // Offset: 0xD8
    int nextNodeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: nextNodeIndex and: nodeIndexPool
    char __padding41[0x4] = {};
    // private System.Collections.Generic.Stack`1<System.Int32> nodeIndexPool
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Generic::Stack_1<int>* nodeIndexPool;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<int>*) == 0x8);
    // private Pathfinding.Path pathReturnPop
    // Size: 0x8
    // Offset: 0xE8
    ::Pathfinding::Path* pathReturnPop;
    // Field size check
    static_assert(sizeof(::Pathfinding::Path*) == 0x8);
    // private System.Collections.Generic.Queue`1<AstarPath/GUOSingle> graphUpdateQueueAsync
    // Size: 0x8
    // Offset: 0xF0
    ::System::Collections::Generic::Queue_1<::GlobalNamespace::AstarPath::GUOSingle>* graphUpdateQueueAsync;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::GlobalNamespace::AstarPath::GUOSingle>*) == 0x8);
    // private System.Collections.Generic.Queue`1<AstarPath/GUOSingle> graphUpdateQueueRegular
    // Size: 0x8
    // Offset: 0xF8
    ::System::Collections::Generic::Queue_1<::GlobalNamespace::AstarPath::GUOSingle>* graphUpdateQueueRegular;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::GlobalNamespace::AstarPath::GUOSingle>*) == 0x8);
    // public System.Boolean showGraphs
    // Size: 0x1
    // Offset: 0x100
    bool showGraphs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showGraphs and: lastUniqueAreaIndex
    char __padding46[0x3] = {};
    // public System.UInt32 lastUniqueAreaIndex
    // Size: 0x4
    // Offset: 0x104
    uint lastUniqueAreaIndex;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Threading.AutoResetEvent graphUpdateAsyncEvent
    // Size: 0x8
    // Offset: 0x108
    ::System::Threading::AutoResetEvent* graphUpdateAsyncEvent;
    // Field size check
    static_assert(sizeof(::System::Threading::AutoResetEvent*) == 0x8);
    // private System.Threading.ManualResetEvent processingGraphUpdatesAsync
    // Size: 0x8
    // Offset: 0x110
    ::System::Threading::ManualResetEvent* processingGraphUpdatesAsync;
    // Field size check
    static_assert(sizeof(::System::Threading::ManualResetEvent*) == 0x8);
    // private System.Single lastGraphUpdate
    // Size: 0x4
    // Offset: 0x118
    float lastGraphUpdate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.UInt16 nextFreePathID
    // Size: 0x2
    // Offset: 0x11C
    uint16_t nextFreePathID;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: nextFreePathID and: workItems
    char __padding51[0x2] = {};
    // private System.Collections.Generic.Queue`1<AstarPath/AstarWorkItem> workItems
    // Size: 0x8
    // Offset: 0x120
    ::System::Collections::Generic::Queue_1<::GlobalNamespace::AstarPath::AstarWorkItem>* workItems;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::GlobalNamespace::AstarPath::AstarWorkItem>*) == 0x8);
    // private System.Boolean processingWorkItems
    // Size: 0x1
    // Offset: 0x128
    bool processingWorkItems;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public readonly AstarPath/AstarDistribution Distribution
    static ::GlobalNamespace::AstarPath::AstarDistribution _get_Distribution();
    // Set static field: static public readonly AstarPath/AstarDistribution Distribution
    static void _set_Distribution(::GlobalNamespace::AstarPath::AstarDistribution value);
    // Get static field: static public readonly System.String Branch
    static ::StringW _get_Branch();
    // Set static field: static public readonly System.String Branch
    static void _set_Branch(::StringW value);
    // Get static field: static public AstarPath active
    static ::GlobalNamespace::AstarPath* _get_active();
    // Set static field: static public AstarPath active
    static void _set_active(::GlobalNamespace::AstarPath* value);
    // Get static field: static public System.Action OnAwakeSettings
    static ::System::Action* _get_OnAwakeSettings();
    // Set static field: static public System.Action OnAwakeSettings
    static void _set_OnAwakeSettings(::System::Action* value);
    // Get static field: static public Pathfinding.OnGraphDelegate OnGraphPreScan
    static ::Pathfinding::OnGraphDelegate* _get_OnGraphPreScan();
    // Set static field: static public Pathfinding.OnGraphDelegate OnGraphPreScan
    static void _set_OnGraphPreScan(::Pathfinding::OnGraphDelegate* value);
    // Get static field: static public Pathfinding.OnGraphDelegate OnGraphPostScan
    static ::Pathfinding::OnGraphDelegate* _get_OnGraphPostScan();
    // Set static field: static public Pathfinding.OnGraphDelegate OnGraphPostScan
    static void _set_OnGraphPostScan(::Pathfinding::OnGraphDelegate* value);
    // Get static field: static public Pathfinding.OnPathDelegate OnPathPreSearch
    static ::Pathfinding::OnPathDelegate* _get_OnPathPreSearch();
    // Set static field: static public Pathfinding.OnPathDelegate OnPathPreSearch
    static void _set_OnPathPreSearch(::Pathfinding::OnPathDelegate* value);
    // Get static field: static public Pathfinding.OnPathDelegate OnPathPostSearch
    static ::Pathfinding::OnPathDelegate* _get_OnPathPostSearch();
    // Set static field: static public Pathfinding.OnPathDelegate OnPathPostSearch
    static void _set_OnPathPostSearch(::Pathfinding::OnPathDelegate* value);
    // Get static field: static public Pathfinding.OnScanDelegate OnPreScan
    static ::Pathfinding::OnScanDelegate* _get_OnPreScan();
    // Set static field: static public Pathfinding.OnScanDelegate OnPreScan
    static void _set_OnPreScan(::Pathfinding::OnScanDelegate* value);
    // Get static field: static public Pathfinding.OnScanDelegate OnPostScan
    static ::Pathfinding::OnScanDelegate* _get_OnPostScan();
    // Set static field: static public Pathfinding.OnScanDelegate OnPostScan
    static void _set_OnPostScan(::Pathfinding::OnScanDelegate* value);
    // Get static field: static public Pathfinding.OnScanDelegate OnLatePostScan
    static ::Pathfinding::OnScanDelegate* _get_OnLatePostScan();
    // Set static field: static public Pathfinding.OnScanDelegate OnLatePostScan
    static void _set_OnLatePostScan(::Pathfinding::OnScanDelegate* value);
    // Get static field: static public Pathfinding.OnScanDelegate OnGraphsUpdated
    static ::Pathfinding::OnScanDelegate* _get_OnGraphsUpdated();
    // Set static field: static public Pathfinding.OnScanDelegate OnGraphsUpdated
    static void _set_OnGraphsUpdated(::Pathfinding::OnScanDelegate* value);
    // Get static field: static public System.Action On65KOverflow
    static ::System::Action* _get_On65KOverflow();
    // Set static field: static public System.Action On65KOverflow
    static void _set_On65KOverflow(::System::Action* value);
    // Get static field: static private System.Action OnThreadSafeCallback
    static ::System::Action* _get_OnThreadSafeCallback();
    // Set static field: static private System.Action OnThreadSafeCallback
    static void _set_OnThreadSafeCallback(::System::Action* value);
    // Get static field: static private System.Threading.Thread[] threads
    static ::ArrayW<::System::Threading::Thread*> _get_threads();
    // Set static field: static private System.Threading.Thread[] threads
    static void _set_threads(::ArrayW<::System::Threading::Thread*> value);
    // Get static field: static private Pathfinding.PathThreadInfo[] threadInfos
    static ::ArrayW<::Pathfinding::PathThreadInfo> _get_threadInfos();
    // Set static field: static private Pathfinding.PathThreadInfo[] threadInfos
    static void _set_threadInfos(::ArrayW<::Pathfinding::PathThreadInfo> value);
    // Get static field: static private System.Collections.IEnumerator threadEnumerator
    static ::System::Collections::IEnumerator* _get_threadEnumerator();
    // Set static field: static private System.Collections.IEnumerator threadEnumerator
    static void _set_threadEnumerator(::System::Collections::IEnumerator* value);
    // Get static field: static private Pathfinding.Util.LockFreeStack pathReturnStack
    static ::Pathfinding::Util::LockFreeStack* _get_pathReturnStack();
    // Set static field: static private Pathfinding.Util.LockFreeStack pathReturnStack
    static void _set_pathReturnStack(::Pathfinding::Util::LockFreeStack* value);
    // Get static field: static public System.Boolean isEditor
    static bool _get_isEditor();
    // Set static field: static public System.Boolean isEditor
    static void _set_isEditor(bool value);
    // Get static field: static private readonly System.Object safeUpdateLock
    static ::Il2CppObject* _get_safeUpdateLock();
    // Set static field: static private readonly System.Object safeUpdateLock
    static void _set_safeUpdateLock(::Il2CppObject* value);
    // Get static field: static private System.Int32 waitForPathDepth
    static int _get_waitForPathDepth();
    // Set static field: static private System.Int32 waitForPathDepth
    static void _set_waitForPathDepth(int value);
    // Get instance field reference: public Pathfinding.AstarData astarData
    [[deprecated("Use field access instead!")]] ::Pathfinding::AstarData*& dyn_astarData();
    // Get instance field reference: public System.Boolean showNavGraphs
    [[deprecated("Use field access instead!")]] bool& dyn_showNavGraphs();
    // Get instance field reference: public System.Boolean showUnwalkableNodes
    [[deprecated("Use field access instead!")]] bool& dyn_showUnwalkableNodes();
    // Get instance field reference: public Pathfinding.GraphDebugMode debugMode
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphDebugMode& dyn_debugMode();
    // Get instance field reference: public System.Single debugFloor
    [[deprecated("Use field access instead!")]] float& dyn_debugFloor();
    // Get instance field reference: public System.Single debugRoof
    [[deprecated("Use field access instead!")]] float& dyn_debugRoof();
    // Get instance field reference: public System.Boolean manualDebugFloorRoof
    [[deprecated("Use field access instead!")]] bool& dyn_manualDebugFloorRoof();
    // Get instance field reference: public System.Boolean showSearchTree
    [[deprecated("Use field access instead!")]] bool& dyn_showSearchTree();
    // Get instance field reference: public System.Single unwalkableNodeDebugSize
    [[deprecated("Use field access instead!")]] float& dyn_unwalkableNodeDebugSize();
    // Get instance field reference: public Pathfinding.PathLog logPathResults
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathLog& dyn_logPathResults();
    // Get instance field reference: public System.Single maxNearestNodeDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxNearestNodeDistance();
    // Get instance field reference: public System.Boolean scanOnStartup
    [[deprecated("Use field access instead!")]] bool& dyn_scanOnStartup();
    // Get instance field reference: public System.Boolean fullGetNearestSearch
    [[deprecated("Use field access instead!")]] bool& dyn_fullGetNearestSearch();
    // Get instance field reference: public System.Boolean prioritizeGraphs
    [[deprecated("Use field access instead!")]] bool& dyn_prioritizeGraphs();
    // Get instance field reference: public System.Single prioritizeGraphsLimit
    [[deprecated("Use field access instead!")]] float& dyn_prioritizeGraphsLimit();
    // Get instance field reference: public Pathfinding.AstarColor colorSettings
    [[deprecated("Use field access instead!")]] ::Pathfinding::AstarColor*& dyn_colorSettings();
    // Get instance field reference: protected System.String[] tagNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_tagNames();
    // Get instance field reference: public Pathfinding.Heuristic heuristic
    [[deprecated("Use field access instead!")]] ::Pathfinding::Heuristic& dyn_heuristic();
    // Get instance field reference: public System.Single heuristicScale
    [[deprecated("Use field access instead!")]] float& dyn_heuristicScale();
    // Get instance field reference: public Pathfinding.ThreadCount threadCount
    [[deprecated("Use field access instead!")]] ::Pathfinding::ThreadCount& dyn_threadCount();
    // Get instance field reference: public System.Single maxFrameTime
    [[deprecated("Use field access instead!")]] float& dyn_maxFrameTime();
    // Get instance field reference: public System.Int32 minAreaSize
    [[deprecated("Use field access instead!")]] int& dyn_minAreaSize();
    // Get instance field reference: public System.Boolean batchGraphUpdates
    [[deprecated("Use field access instead!")]] bool& dyn_batchGraphUpdates();
    // Get instance field reference: public System.Single graphUpdateBatchingInterval
    [[deprecated("Use field access instead!")]] float& dyn_graphUpdateBatchingInterval();
    // Get instance field reference: public System.Single lastScanTime
    [[deprecated("Use field access instead!")]] float& dyn_lastScanTime();
    // Get instance field reference: public Pathfinding.Path debugPath
    [[deprecated("Use field access instead!")]] ::Pathfinding::Path*& dyn_debugPath();
    // Get instance field reference: public System.String inGameDebugPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_inGameDebugPath();
    // Get instance field reference: private System.Boolean <isScanning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isScanning$k__BackingField();
    // Get instance field reference: private System.Boolean graphUpdateRoutineRunning
    [[deprecated("Use field access instead!")]] bool& dyn_graphUpdateRoutineRunning();
    // Get instance field reference: private System.Boolean isRegisteredForUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_isRegisteredForUpdate();
    // Get instance field reference: private System.Boolean workItemsQueued
    [[deprecated("Use field access instead!")]] bool& dyn_workItemsQueued();
    // Get instance field reference: private System.Boolean queuedWorkItemFloodFill
    [[deprecated("Use field access instead!")]] bool& dyn_queuedWorkItemFloodFill();
    // Get instance field reference: public System.Action OnDrawGizmosCallback
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnDrawGizmosCallback();
    // Get instance field reference: public System.Action OnUnloadGizmoMeshes
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnUnloadGizmoMeshes();
    // Get instance field reference: public System.Action OnGraphsWillBeUpdated
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnGraphsWillBeUpdated();
    // Get instance field reference: public System.Action OnGraphsWillBeUpdated2
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnGraphsWillBeUpdated2();
    // Get instance field reference: private System.Collections.Generic.Queue`1<Pathfinding.GraphUpdateObject> graphUpdateQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Pathfinding::GraphUpdateObject*>*& dyn_graphUpdateQueue();
    // Get instance field reference: private System.Collections.Generic.Stack`1<Pathfinding.GraphNode> floodStack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<::Pathfinding::GraphNode*>*& dyn_floodStack();
    // Get instance field reference: private Pathfinding.ThreadControlQueue pathQueue
    [[deprecated("Use field access instead!")]] ::Pathfinding::ThreadControlQueue*& dyn_pathQueue();
    // Get instance field reference: private System.Threading.Thread graphUpdateThread
    [[deprecated("Use field access instead!")]] ::System::Threading::Thread*& dyn_graphUpdateThread();
    // Get instance field reference: public Pathfinding.EuclideanEmbedding euclideanEmbedding
    [[deprecated("Use field access instead!")]] ::Pathfinding::EuclideanEmbedding*& dyn_euclideanEmbedding();
    // Get instance field reference: private System.Int32 nextNodeIndex
    [[deprecated("Use field access instead!")]] int& dyn_nextNodeIndex();
    // Get instance field reference: private System.Collections.Generic.Stack`1<System.Int32> nodeIndexPool
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<int>*& dyn_nodeIndexPool();
    // Get instance field reference: private Pathfinding.Path pathReturnPop
    [[deprecated("Use field access instead!")]] ::Pathfinding::Path*& dyn_pathReturnPop();
    // Get instance field reference: private System.Collections.Generic.Queue`1<AstarPath/GUOSingle> graphUpdateQueueAsync
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::GlobalNamespace::AstarPath::GUOSingle>*& dyn_graphUpdateQueueAsync();
    // Get instance field reference: private System.Collections.Generic.Queue`1<AstarPath/GUOSingle> graphUpdateQueueRegular
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::GlobalNamespace::AstarPath::GUOSingle>*& dyn_graphUpdateQueueRegular();
    // Get instance field reference: public System.Boolean showGraphs
    [[deprecated("Use field access instead!")]] bool& dyn_showGraphs();
    // Get instance field reference: public System.UInt32 lastUniqueAreaIndex
    [[deprecated("Use field access instead!")]] uint& dyn_lastUniqueAreaIndex();
    // Get instance field reference: private System.Threading.AutoResetEvent graphUpdateAsyncEvent
    [[deprecated("Use field access instead!")]] ::System::Threading::AutoResetEvent*& dyn_graphUpdateAsyncEvent();
    // Get instance field reference: private System.Threading.ManualResetEvent processingGraphUpdatesAsync
    [[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& dyn_processingGraphUpdatesAsync();
    // Get instance field reference: private System.Single lastGraphUpdate
    [[deprecated("Use field access instead!")]] float& dyn_lastGraphUpdate();
    // Get instance field reference: private System.UInt16 nextFreePathID
    [[deprecated("Use field access instead!")]] uint16_t& dyn_nextFreePathID();
    // Get instance field reference: private System.Collections.Generic.Queue`1<AstarPath/AstarWorkItem> workItems
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::GlobalNamespace::AstarPath::AstarWorkItem>*& dyn_workItems();
    // Get instance field reference: private System.Boolean processingWorkItems
    [[deprecated("Use field access instead!")]] bool& dyn_processingWorkItems();
    // static public System.Version get_Version()
    // Offset: 0x129C8F0
    static ::System::Version* get_Version();
    // public System.Type[] get_graphTypes()
    // Offset: 0x129C958
    ::ArrayW<::System::Type*> get_graphTypes();
    // public Pathfinding.NavGraph[] get_graphs()
    // Offset: 0x129C988
    ::ArrayW<::Pathfinding::NavGraph*> get_graphs();
    // public System.Void set_graphs(Pathfinding.NavGraph[] value)
    // Offset: 0x129CA00
    void set_graphs(::ArrayW<::Pathfinding::NavGraph*> value);
    // public System.Single get_maxNearestNodeDistanceSqr()
    // Offset: 0x129CA84
    float get_maxNearestNodeDistanceSqr();
    // public System.Boolean get_limitGraphUpdates()
    // Offset: 0x129CA90
    bool get_limitGraphUpdates();
    // public System.Void set_limitGraphUpdates(System.Boolean value)
    // Offset: 0x129CA98
    void set_limitGraphUpdates(bool value);
    // public System.Single get_maxGraphUpdateFreq()
    // Offset: 0x129CAA4
    float get_maxGraphUpdateFreq();
    // public System.Void set_maxGraphUpdateFreq(System.Single value)
    // Offset: 0x129CAAC
    void set_maxGraphUpdateFreq(float value);
    // public Pathfinding.PathHandler get_debugPathData()
    // Offset: 0x129CAB4
    ::Pathfinding::PathHandler* get_debugPathData();
    // public System.Boolean get_isScanning()
    // Offset: 0x129CAC8
    bool get_isScanning();
    // private System.Void set_isScanning(System.Boolean value)
    // Offset: 0x129CAD0
    void set_isScanning(bool value);
    // static public System.Int32 get_NumParallelThreads()
    // Offset: 0x129CADC
    static int get_NumParallelThreads();
    // static public System.Boolean get_IsUsingMultithreading()
    // Offset: 0x129CB80
    static bool get_IsUsingMultithreading();
    // public System.Boolean get_IsAnyGraphUpdatesQueued()
    // Offset: 0x129CE2C
    bool get_IsAnyGraphUpdatesQueued();
    // public System.String[] GetTagNames()
    // Offset: 0x129CE8C
    ::ArrayW<::StringW> GetTagNames();
    // static public System.String[] FindTagNames()
    // Offset: 0x129D02C
    static ::ArrayW<::StringW> FindTagNames();
    // public System.UInt16 GetNextPathID()
    // Offset: 0x129D268
    uint16_t GetNextPathID();
    // private System.Void OnDrawGizmos()
    // Offset: 0x129D370
    void OnDrawGizmos();
    // private System.Boolean DrawUnwalkableNode(Pathfinding.GraphNode node)
    // Offset: 0x129D96C
    bool DrawUnwalkableNode(::Pathfinding::GraphNode* node);
    // private System.Void OnGUI()
    // Offset: 0x129DA8C
    void OnGUI();
    // static private System.Void AstarLog(System.String s)
    // Offset: 0x129DB5C
    static void AstarLog(::StringW s);
    // static private System.Void AstarLogError(System.String s)
    // Offset: 0x129DCB0
    static void AstarLogError(::StringW s);
    // private System.Void LogPathResults(Pathfinding.Path p)
    // Offset: 0x129DE24
    void LogPathResults(::Pathfinding::Path* p);
    // private System.Void Update()
    // Offset: 0x129DF0C
    void Update();
    // private System.Void PerformBlockingActions(System.Boolean force, System.Boolean unblockOnComplete)
    // Offset: 0x129E220
    void PerformBlockingActions(bool force, bool unblockOnComplete);
    // public System.Void QueueWorkItemFloodFill()
    // Offset: 0x129E7E8
    void QueueWorkItemFloodFill();
    // public System.Void EnsureValidFloodFill()
    // Offset: 0x129E894
    void EnsureValidFloodFill();
    // public System.Void AddWorkItem(AstarPath/AstarWorkItem itm)
    // Offset: 0x129EED0
    void AddWorkItem(::GlobalNamespace::AstarPath::AstarWorkItem itm);
    // private System.Int32 ProcessWorkItems(System.Boolean force)
    // Offset: 0x129E574
    int ProcessWorkItems(bool force);
    // public System.Void QueueGraphUpdates()
    // Offset: 0x129EFA8
    void QueueGraphUpdates();
    // private System.Collections.IEnumerator DelayedGraphUpdate()
    // Offset: 0x129F07C
    ::System::Collections::IEnumerator* DelayedGraphUpdate();
    // public System.Void UpdateGraphs(UnityEngine.Bounds bounds, System.Single t)
    // Offset: 0x129F11C
    void UpdateGraphs(::UnityEngine::Bounds bounds, float t);
    // public System.Void UpdateGraphs(Pathfinding.GraphUpdateObject ob, System.Single t)
    // Offset: 0x129F1CC
    void UpdateGraphs(::Pathfinding::GraphUpdateObject* ob, float t);
    // private System.Collections.IEnumerator UpdateGraphsInteral(Pathfinding.GraphUpdateObject ob, System.Single t)
    // Offset: 0x129F1F8
    ::System::Collections::IEnumerator* UpdateGraphsInteral(::Pathfinding::GraphUpdateObject* ob, float t);
    // public System.Void UpdateGraphs(UnityEngine.Bounds bounds)
    // Offset: 0x129F2D8
    void UpdateGraphs(::UnityEngine::Bounds bounds);
    // public System.Void UpdateGraphs(Pathfinding.GraphUpdateObject ob)
    // Offset: 0x129F368
    void UpdateGraphs(::Pathfinding::GraphUpdateObject* ob);
    // public System.Void FlushGraphUpdates()
    // Offset: 0x129F46C
    void FlushGraphUpdates();
    // public System.Void FlushWorkItems()
    // Offset: 0x129F4B8
    void FlushWorkItems();
    // public System.Void FlushWorkItems(System.Boolean unblockOnComplete, System.Boolean block)
    // Offset: 0x129F514
    void FlushWorkItems(bool unblockOnComplete, bool block);
    // System.Void FlushWorkItemsInternal(System.Boolean unblockOnComplete)
    // Offset: 0x129F4E4
    void FlushWorkItemsInternal(bool unblockOnComplete);
    // private System.Void QueueGraphUpdatesInternal()
    // Offset: 0x129F69C
    void QueueGraphUpdatesInternal();
    // private System.Boolean ProcessGraphUpdates(System.Boolean force)
    // Offset: 0x129FBD8
    bool ProcessGraphUpdates(bool force);
    // private System.Void ProcessGraphUpdatesAsync(System.Object _astar)
    // Offset: 0x12A0370
    void ProcessGraphUpdatesAsync(::Il2CppObject* _astar);
    // public System.Void FlushThreadSafeCallbacks()
    // Offset: 0x12A0754
    void FlushThreadSafeCallbacks();
    // static public System.Int32 CalculateThreadCount(Pathfinding.ThreadCount count)
    // Offset: 0x12A07E4
    static int CalculateThreadCount(::Pathfinding::ThreadCount count);
    // private System.Void Awake()
    // Offset: 0x12A08D8
    void Awake();
    // System.Void VerifyIntegrity()
    // Offset: 0x12A147C
    void VerifyIntegrity();
    // public System.Void SetUpReferences()
    // Offset: 0x12A1690
    void SetUpReferences();
    // private System.Void Initialize()
    // Offset: 0x12A1314
    void Initialize();
    // private System.Void OnDisable()
    // Offset: 0x12A1760
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x12A1774
    void OnDestroy();
    // public System.Void FloodFill(Pathfinding.GraphNode seed)
    // Offset: 0x12A1CB0
    void FloodFill(::Pathfinding::GraphNode* seed);
    // public System.Void FloodFill(Pathfinding.GraphNode seed, System.UInt32 area)
    // Offset: 0x12A1CE4
    void FloodFill(::Pathfinding::GraphNode* seed, uint area);
    // public System.Void FloodFill()
    // Offset: 0x129E8A4
    void FloodFill();
    // public System.Int32 GetNewNodeIndex()
    // Offset: 0x12A1EE4
    int GetNewNodeIndex();
    // public System.Void InitializeNode(Pathfinding.GraphNode node)
    // Offset: 0x12A1F88
    void InitializeNode(::Pathfinding::GraphNode* node);
    // public System.Void DestroyNode(Pathfinding.GraphNode node)
    // Offset: 0x12A2174
    void DestroyNode(::Pathfinding::GraphNode* node);
    // public System.Void BlockUntilPathQueueBlocked()
    // Offset: 0x129F550
    void BlockUntilPathQueueBlocked();
    // public System.Void Scan()
    // Offset: 0x12A1474
    void Scan();
    // public System.Void ScanLoop(Pathfinding.OnScanStatus statusCallback)
    // Offset: 0x12A2360
    void ScanLoop(::Pathfinding::OnScanStatus* statusCallback);
    // static public System.Void WaitForPath(Pathfinding.Path p)
    // Offset: 0x12A3BB8
    static void WaitForPath(::Pathfinding::Path* p);
    // static public System.Void RegisterSafeUpdate(System.Action callback, System.Boolean threadSafe)
    // Offset: 0x12A415C
    static void RegisterSafeUpdate(::System::Action* callback, bool threadSafe);
    // static public System.Void RegisterSafeUpdate(System.Action callback)
    // Offset: 0x12A41C0
    static void RegisterSafeUpdate(::System::Action* callback);
    // private System.Void InterruptPathfinding()
    // Offset: 0x129EF78
    void InterruptPathfinding();
    // static public System.Void StartPath(Pathfinding.Path p, System.Boolean pushToFront)
    // Offset: 0x12A4598
    static void StartPath(::Pathfinding::Path* p, bool pushToFront);
    // public System.Void OnApplicationQuit()
    // Offset: 0x12A4AEC
    void OnApplicationQuit();
    // public System.Void ReturnPaths(System.Boolean timeSlice)
    // Offset: 0x129E38C
    void ReturnPaths(bool timeSlice);
    // static private System.Void CalculatePathsThreaded(System.Object _threadInfo)
    // Offset: 0x12A4D2C
    static void CalculatePathsThreaded(::Il2CppObject* _threadInfo);
    // static private System.Collections.IEnumerator CalculatePaths(System.Object _threadInfo)
    // Offset: 0x12A12A0
    static ::System::Collections::IEnumerator* CalculatePaths(::Il2CppObject* _threadInfo);
    // public Pathfinding.NNInfo GetNearest(UnityEngine.Vector3 position)
    // Offset: 0x12A5708
    ::Pathfinding::NNInfo GetNearest(::UnityEngine::Vector3 position);
    // public Pathfinding.NNInfo GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint)
    // Offset: 0x12A5764
    ::Pathfinding::NNInfo GetNearest(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint);
    // public Pathfinding.NNInfo GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, Pathfinding.GraphNode hint)
    // Offset: 0x12A5768
    ::Pathfinding::NNInfo GetNearest(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint, ::Pathfinding::GraphNode* hint);
    // public Pathfinding.GraphNode GetNearest(UnityEngine.Ray ray)
    // Offset: 0x12A5BC0
    ::Pathfinding::GraphNode* GetNearest(::UnityEngine::Ray ray);
    // public System.Void .ctor()
    // Offset: 0x12A5DB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AstarPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AstarPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AstarPath*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x12A5F8C
    static void _cctor();
    // private System.Boolean <OnDrawGizmos>b__104_0(Pathfinding.GraphNode node)
    // Offset: 0x12A6078
    bool $OnDrawGizmos$b__104_0(::Pathfinding::GraphNode* node);
  }; // AstarPath
  #pragma pack(pop)
  static check_size<sizeof(AstarPath), 296 + sizeof(bool)> __GlobalNamespace_AstarPathSizeCheck;
  static_assert(sizeof(AstarPath) == 0x129);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AstarPath::AstarWorkItem, "", "AstarPath/AstarWorkItem");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AstarPath::GUOSingle, "", "AstarPath/GUOSingle");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AstarPath::GraphUpdateOrder, "", "AstarPath/GraphUpdateOrder");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AstarPath::AstarDistribution, "", "AstarPath/AstarDistribution");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_Version
// Il2CppName: get_Version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (*)()>(&GlobalNamespace::AstarPath::get_Version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_Version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_graphTypes
// Il2CppName: get_graphTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_graphTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_graphTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_graphs
// Il2CppName: get_graphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Pathfinding::NavGraph*> (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_graphs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_graphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::set_graphs
// Il2CppName: set_graphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::ArrayW<::Pathfinding::NavGraph*>)>(&GlobalNamespace::AstarPath::set_graphs)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "set_graphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_maxNearestNodeDistanceSqr
// Il2CppName: get_maxNearestNodeDistanceSqr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_maxNearestNodeDistanceSqr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_maxNearestNodeDistanceSqr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_limitGraphUpdates
// Il2CppName: get_limitGraphUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_limitGraphUpdates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_limitGraphUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::set_limitGraphUpdates
// Il2CppName: set_limitGraphUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(bool)>(&GlobalNamespace::AstarPath::set_limitGraphUpdates)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "set_limitGraphUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_maxGraphUpdateFreq
// Il2CppName: get_maxGraphUpdateFreq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_maxGraphUpdateFreq)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_maxGraphUpdateFreq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::set_maxGraphUpdateFreq
// Il2CppName: set_maxGraphUpdateFreq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(float)>(&GlobalNamespace::AstarPath::set_maxGraphUpdateFreq)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "set_maxGraphUpdateFreq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_debugPathData
// Il2CppName: get_debugPathData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::PathHandler* (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_debugPathData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_debugPathData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_isScanning
// Il2CppName: get_isScanning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_isScanning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_isScanning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::set_isScanning
// Il2CppName: set_isScanning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(bool)>(&GlobalNamespace::AstarPath::set_isScanning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "set_isScanning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_NumParallelThreads
// Il2CppName: get_NumParallelThreads
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::AstarPath::get_NumParallelThreads)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_NumParallelThreads", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_IsUsingMultithreading
// Il2CppName: get_IsUsingMultithreading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::AstarPath::get_IsUsingMultithreading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_IsUsingMultithreading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::get_IsAnyGraphUpdatesQueued
// Il2CppName: get_IsAnyGraphUpdatesQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::get_IsAnyGraphUpdatesQueued)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "get_IsAnyGraphUpdatesQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::GetTagNames
// Il2CppName: GetTagNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::GetTagNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "GetTagNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FindTagNames
// Il2CppName: FindTagNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (*)()>(&GlobalNamespace::AstarPath::FindTagNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FindTagNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::GetNextPathID
// Il2CppName: GetNextPathID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::GetNextPathID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "GetNextPathID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::DrawUnwalkableNode
// Il2CppName: DrawUnwalkableNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphNode*)>(&GlobalNamespace::AstarPath::DrawUnwalkableNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "DrawUnwalkableNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::AstarLog
// Il2CppName: AstarLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::AstarPath::AstarLog)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "AstarLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::AstarLogError
// Il2CppName: AstarLogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::AstarPath::AstarLogError)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "AstarLogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::LogPathResults
// Il2CppName: LogPathResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::Path*)>(&GlobalNamespace::AstarPath::LogPathResults)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "LogPathResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::PerformBlockingActions
// Il2CppName: PerformBlockingActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(bool, bool)>(&GlobalNamespace::AstarPath::PerformBlockingActions)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* unblockOnComplete = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "PerformBlockingActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force, unblockOnComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::QueueWorkItemFloodFill
// Il2CppName: QueueWorkItemFloodFill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::QueueWorkItemFloodFill)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "QueueWorkItemFloodFill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::EnsureValidFloodFill
// Il2CppName: EnsureValidFloodFill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::EnsureValidFloodFill)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "EnsureValidFloodFill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::AddWorkItem
// Il2CppName: AddWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::GlobalNamespace::AstarPath::AstarWorkItem)>(&GlobalNamespace::AstarPath::AddWorkItem)> {
  static const MethodInfo* get() {
    static auto* itm = &::il2cpp_utils::GetClassFromName("", "AstarPath/AstarWorkItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "AddWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{itm});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::ProcessWorkItems
// Il2CppName: ProcessWorkItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::AstarPath::*)(bool)>(&GlobalNamespace::AstarPath::ProcessWorkItems)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "ProcessWorkItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::QueueGraphUpdates
// Il2CppName: QueueGraphUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::QueueGraphUpdates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "QueueGraphUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::DelayedGraphUpdate
// Il2CppName: DelayedGraphUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::DelayedGraphUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "DelayedGraphUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::UpdateGraphs
// Il2CppName: UpdateGraphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::UnityEngine::Bounds, float)>(&GlobalNamespace::AstarPath::UpdateGraphs)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "UpdateGraphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds, t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::UpdateGraphs
// Il2CppName: UpdateGraphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphUpdateObject*, float)>(&GlobalNamespace::AstarPath::UpdateGraphs)> {
  static const MethodInfo* get() {
    static auto* ob = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "UpdateGraphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ob, t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::UpdateGraphsInteral
// Il2CppName: UpdateGraphsInteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphUpdateObject*, float)>(&GlobalNamespace::AstarPath::UpdateGraphsInteral)> {
  static const MethodInfo* get() {
    static auto* ob = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "UpdateGraphsInteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ob, t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::UpdateGraphs
// Il2CppName: UpdateGraphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::UnityEngine::Bounds)>(&GlobalNamespace::AstarPath::UpdateGraphs)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "UpdateGraphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::UpdateGraphs
// Il2CppName: UpdateGraphs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphUpdateObject*)>(&GlobalNamespace::AstarPath::UpdateGraphs)> {
  static const MethodInfo* get() {
    static auto* ob = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "UpdateGraphs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ob});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FlushGraphUpdates
// Il2CppName: FlushGraphUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::FlushGraphUpdates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FlushGraphUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FlushWorkItems
// Il2CppName: FlushWorkItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::FlushWorkItems)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FlushWorkItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FlushWorkItems
// Il2CppName: FlushWorkItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(bool, bool)>(&GlobalNamespace::AstarPath::FlushWorkItems)> {
  static const MethodInfo* get() {
    static auto* unblockOnComplete = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* block = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FlushWorkItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unblockOnComplete, block});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FlushWorkItemsInternal
// Il2CppName: FlushWorkItemsInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(bool)>(&GlobalNamespace::AstarPath::FlushWorkItemsInternal)> {
  static const MethodInfo* get() {
    static auto* unblockOnComplete = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FlushWorkItemsInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unblockOnComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::QueueGraphUpdatesInternal
// Il2CppName: QueueGraphUpdatesInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::QueueGraphUpdatesInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "QueueGraphUpdatesInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::ProcessGraphUpdates
// Il2CppName: ProcessGraphUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::*)(bool)>(&GlobalNamespace::AstarPath::ProcessGraphUpdates)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "ProcessGraphUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::ProcessGraphUpdatesAsync
// Il2CppName: ProcessGraphUpdatesAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Il2CppObject*)>(&GlobalNamespace::AstarPath::ProcessGraphUpdatesAsync)> {
  static const MethodInfo* get() {
    static auto* _astar = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "ProcessGraphUpdatesAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_astar});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FlushThreadSafeCallbacks
// Il2CppName: FlushThreadSafeCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::FlushThreadSafeCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FlushThreadSafeCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::CalculateThreadCount
// Il2CppName: CalculateThreadCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Pathfinding::ThreadCount)>(&GlobalNamespace::AstarPath::CalculateThreadCount)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("Pathfinding", "ThreadCount")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "CalculateThreadCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::VerifyIntegrity
// Il2CppName: VerifyIntegrity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::VerifyIntegrity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "VerifyIntegrity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::SetUpReferences
// Il2CppName: SetUpReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::SetUpReferences)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "SetUpReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FloodFill
// Il2CppName: FloodFill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphNode*)>(&GlobalNamespace::AstarPath::FloodFill)> {
  static const MethodInfo* get() {
    static auto* seed = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FloodFill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FloodFill
// Il2CppName: FloodFill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphNode*, uint)>(&GlobalNamespace::AstarPath::FloodFill)> {
  static const MethodInfo* get() {
    static auto* seed = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* area = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FloodFill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seed, area});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::FloodFill
// Il2CppName: FloodFill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::FloodFill)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "FloodFill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::GetNewNodeIndex
// Il2CppName: GetNewNodeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::GetNewNodeIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "GetNewNodeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::InitializeNode
// Il2CppName: InitializeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphNode*)>(&GlobalNamespace::AstarPath::InitializeNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "InitializeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::DestroyNode
// Il2CppName: DestroyNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphNode*)>(&GlobalNamespace::AstarPath::DestroyNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "DestroyNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::BlockUntilPathQueueBlocked
// Il2CppName: BlockUntilPathQueueBlocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::BlockUntilPathQueueBlocked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "BlockUntilPathQueueBlocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::Scan
// Il2CppName: Scan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::Scan)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "Scan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::ScanLoop
// Il2CppName: ScanLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(::Pathfinding::OnScanStatus*)>(&GlobalNamespace::AstarPath::ScanLoop)> {
  static const MethodInfo* get() {
    static auto* statusCallback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnScanStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "ScanLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statusCallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::WaitForPath
// Il2CppName: WaitForPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Path*)>(&GlobalNamespace::AstarPath::WaitForPath)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "WaitForPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::RegisterSafeUpdate
// Il2CppName: RegisterSafeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*, bool)>(&GlobalNamespace::AstarPath::RegisterSafeUpdate)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* threadSafe = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "RegisterSafeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, threadSafe});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::RegisterSafeUpdate
// Il2CppName: RegisterSafeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&GlobalNamespace::AstarPath::RegisterSafeUpdate)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "RegisterSafeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::InterruptPathfinding
// Il2CppName: InterruptPathfinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::InterruptPathfinding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "InterruptPathfinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::StartPath
// Il2CppName: StartPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Path*, bool)>(&GlobalNamespace::AstarPath::StartPath)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* pushToFront = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "StartPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, pushToFront});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)()>(&GlobalNamespace::AstarPath::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::ReturnPaths
// Il2CppName: ReturnPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarPath::*)(bool)>(&GlobalNamespace::AstarPath::ReturnPaths)> {
  static const MethodInfo* get() {
    static auto* timeSlice = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "ReturnPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeSlice});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::CalculatePathsThreaded
// Il2CppName: CalculatePathsThreaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&GlobalNamespace::AstarPath::CalculatePathsThreaded)> {
  static const MethodInfo* get() {
    static auto* _threadInfo = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "CalculatePathsThreaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_threadInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::CalculatePaths
// Il2CppName: CalculatePaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (*)(::Il2CppObject*)>(&GlobalNamespace::AstarPath::CalculatePaths)> {
  static const MethodInfo* get() {
    static auto* _threadInfo = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "CalculatePaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_threadInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::GetNearest
// Il2CppName: GetNearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfo (GlobalNamespace::AstarPath::*)(::UnityEngine::Vector3)>(&GlobalNamespace::AstarPath::GetNearest)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "GetNearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::GetNearest
// Il2CppName: GetNearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfo (GlobalNamespace::AstarPath::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*)>(&GlobalNamespace::AstarPath::GetNearest)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "GetNearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::GetNearest
// Il2CppName: GetNearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfo (GlobalNamespace::AstarPath::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*, ::Pathfinding::GraphNode*)>(&GlobalNamespace::AstarPath::GetNearest)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "GetNearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint, hint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::GetNearest
// Il2CppName: GetNearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphNode* (GlobalNamespace::AstarPath::*)(::UnityEngine::Ray)>(&GlobalNamespace::AstarPath::GetNearest)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "GetNearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::AstarPath::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$OnDrawGizmos$b__104_0
// Il2CppName: <OnDrawGizmos>b__104_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::*)(::Pathfinding::GraphNode*)>(&GlobalNamespace::AstarPath::$OnDrawGizmos$b__104_0)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath*), "<OnDrawGizmos>b__104_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
