// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ClickedEventArgs
  struct ClickedEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ClickedEventArgs, "", "ClickedEventArgs");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: ClickedEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  struct ClickedEventArgs/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt32 controllerIndex
    // Size: 0x4
    // Offset: 0x0
    uint controllerIndex;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 flags
    // Size: 0x4
    // Offset: 0x4
    uint flags;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Single padX
    // Size: 0x4
    // Offset: 0x8
    float padX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single padY
    // Size: 0x4
    // Offset: 0xC
    float padY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: ClickedEventArgs
    constexpr ClickedEventArgs(uint controllerIndex_ = {}, uint flags_ = {}, float padX_ = {}, float padY_ = {}) noexcept : controllerIndex{controllerIndex_}, flags{flags_}, padX{padX_}, padY{padY_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt32 controllerIndex
    [[deprecated("Use field access instead!")]] uint& dyn_controllerIndex();
    // Get instance field reference: public System.UInt32 flags
    [[deprecated("Use field access instead!")]] uint& dyn_flags();
    // Get instance field reference: public System.Single padX
    [[deprecated("Use field access instead!")]] float& dyn_padX();
    // Get instance field reference: public System.Single padY
    [[deprecated("Use field access instead!")]] float& dyn_padY();
  }; // ClickedEventArgs
  #pragma pack(pop)
  static check_size<sizeof(ClickedEventArgs), 12 + sizeof(float)> __GlobalNamespace_ClickedEventArgsSizeCheck;
  static_assert(sizeof(ClickedEventArgs) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
