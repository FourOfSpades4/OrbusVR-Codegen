// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: FixedJoint
  class FixedJoint;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SteamVR_TrackedObject
  class SteamVR_TrackedObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SteamVR_TestThrow
  class SteamVR_TestThrow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SteamVR_TestThrow);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SteamVR_TestThrow*, "", "SteamVR_TestThrow");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: SteamVR_TestThrow
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: ACE76C
  class SteamVR_TestThrow : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject prefab
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* prefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Rigidbody attachPoint
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rigidbody* attachPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private SteamVR_TrackedObject trackedObj
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::SteamVR_TrackedObject* trackedObj;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SteamVR_TrackedObject*) == 0x8);
    // private UnityEngine.FixedJoint joint
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::FixedJoint* joint;
    // Field size check
    static_assert(sizeof(::UnityEngine::FixedJoint*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject prefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_prefab();
    // Get instance field reference: public UnityEngine.Rigidbody attachPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_attachPoint();
    // Get instance field reference: private SteamVR_TrackedObject trackedObj
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_TrackedObject*& dyn_trackedObj();
    // Get instance field reference: private UnityEngine.FixedJoint joint
    [[deprecated("Use field access instead!")]] ::UnityEngine::FixedJoint*& dyn_joint();
    // private System.Void Awake()
    // Offset: 0xF1076C
    void Awake();
    // private System.Void FixedUpdate()
    // Offset: 0xF107C4
    void FixedUpdate();
    // public System.Void .ctor()
    // Offset: 0xF10C8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamVR_TestThrow* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestThrow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamVR_TestThrow*, creationType>()));
    }
  }; // SteamVR_TestThrow
  #pragma pack(pop)
  static check_size<sizeof(SteamVR_TestThrow), 48 + sizeof(::UnityEngine::FixedJoint*)> __GlobalNamespace_SteamVR_TestThrowSizeCheck;
  static_assert(sizeof(SteamVR_TestThrow) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TestThrow::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TestThrow::*)()>(&GlobalNamespace::SteamVR_TestThrow::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TestThrow*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TestThrow::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TestThrow::*)()>(&GlobalNamespace::SteamVR_TestThrow::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TestThrow*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TestThrow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
