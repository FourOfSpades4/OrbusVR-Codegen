// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: STMTextContainer
  class STMTextContainer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: STMPreParse
  class STMPreParse;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::STMPreParse);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::STMPreParse*, "", "STMPreParse");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: STMPreParse
  // [TokenAttribute] Offset: FFFFFFFF
  class STMPreParse : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.String addToStart
    // Size: 0x8
    // Offset: 0x18
    ::StringW addToStart;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String addToStart
    [[deprecated("Use field access instead!")]] ::StringW& dyn_addToStart();
    // public System.Void Parse(STMTextContainer x)
    // Offset: 0xE2EE3C
    void Parse(::GlobalNamespace::STMTextContainer* x);
    // public System.Void .ctor()
    // Offset: 0xE2EEA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMPreParse* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMPreParse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMPreParse*, creationType>()));
    }
  }; // STMPreParse
  #pragma pack(pop)
  static check_size<sizeof(STMPreParse), 24 + sizeof(::StringW)> __GlobalNamespace_STMPreParseSizeCheck;
  static_assert(sizeof(STMPreParse) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::STMPreParse::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMPreParse::*)(::GlobalNamespace::STMTextContainer*)>(&GlobalNamespace::STMPreParse::Parse)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("", "STMTextContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMPreParse*), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMPreParse::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
