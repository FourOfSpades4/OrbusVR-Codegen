// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: STMChangeSortingOrder
  class STMChangeSortingOrder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::STMChangeSortingOrder);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::STMChangeSortingOrder*, "", "STMChangeSortingOrder");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: STMChangeSortingOrder
  // [TokenAttribute] Offset: FFFFFFFF
  class STMChangeSortingOrder : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Int32 sortingOrder
    // Size: 0x4
    // Offset: 0x18
    int sortingOrder;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: sortingOrder and: sortingLayer
    char __padding0[0x4] = {};
    // public System.String sortingLayer
    // Size: 0x8
    // Offset: 0x20
    ::StringW sortingLayer;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 sortingOrder
    [[deprecated("Use field access instead!")]] int& dyn_sortingOrder();
    // Get instance field reference: public System.String sortingLayer
    [[deprecated("Use field access instead!")]] ::StringW& dyn_sortingLayer();
    // private System.Void OnEnable()
    // Offset: 0xE2BB9C
    void OnEnable();
    // private System.Void OnValidate()
    // Offset: 0xE2BC98
    void OnValidate();
    // public System.Void Refresh()
    // Offset: 0xE2BBA0
    void Refresh();
    // public System.Void .ctor()
    // Offset: 0xE2BC9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMChangeSortingOrder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMChangeSortingOrder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMChangeSortingOrder*, creationType>()));
    }
  }; // STMChangeSortingOrder
  #pragma pack(pop)
  static check_size<sizeof(STMChangeSortingOrder), 32 + sizeof(::StringW)> __GlobalNamespace_STMChangeSortingOrderSizeCheck;
  static_assert(sizeof(STMChangeSortingOrder) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::STMChangeSortingOrder::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMChangeSortingOrder::*)()>(&GlobalNamespace::STMChangeSortingOrder::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMChangeSortingOrder*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMChangeSortingOrder::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMChangeSortingOrder::*)()>(&GlobalNamespace::STMChangeSortingOrder::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMChangeSortingOrder*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMChangeSortingOrder::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMChangeSortingOrder::*)()>(&GlobalNamespace::STMChangeSortingOrder::Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMChangeSortingOrder*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMChangeSortingOrder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
