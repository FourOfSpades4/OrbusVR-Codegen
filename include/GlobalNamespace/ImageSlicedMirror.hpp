// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: VertexHelper
  class VertexHelper;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rect
  struct Rect;
  // Skipping declaration: Vector4 because it is already included!
  // Skipping declaration: Color32 because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ImageSlicedMirror
  class ImageSlicedMirror;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ImageSlicedMirror);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ImageSlicedMirror*, "", "ImageSlicedMirror");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xDE
  #pragma pack(push, 1)
  // Autogenerated type: ImageSlicedMirror
  // [TokenAttribute] Offset: FFFFFFFF
  class ImageSlicedMirror : public ::UnityEngine::UI::Image {
    public:
    // Get static field: static private readonly UnityEngine.Vector2[] s_VertScratch
    static ::ArrayW<::UnityEngine::Vector2> _get_s_VertScratch();
    // Set static field: static private readonly UnityEngine.Vector2[] s_VertScratch
    static void _set_s_VertScratch(::ArrayW<::UnityEngine::Vector2> value);
    // Get static field: static private readonly UnityEngine.Vector2[] s_UVScratch
    static ::ArrayW<::UnityEngine::Vector2> _get_s_UVScratch();
    // Set static field: static private readonly UnityEngine.Vector2[] s_UVScratch
    static void _set_s_UVScratch(::ArrayW<::UnityEngine::Vector2> value);
    // Get static field: static private readonly System.Single[] s_UVMultiplierScratch
    static ::ArrayW<float> _get_s_UVMultiplierScratch();
    // Set static field: static private readonly System.Single[] s_UVMultiplierScratch
    static void _set_s_UVMultiplierScratch(::ArrayW<float> value);
    // private System.Void GenerateSlicedFilledSprite(UnityEngine.UI.VertexHelper toFill)
    // Offset: 0x149CD58
    void GenerateSlicedFilledSprite(::UnityEngine::UI::VertexHelper* toFill);
    // private System.Void SetSlicedVerts(UnityEngine.Rect rect, UnityEngine.Vector4 border, UnityEngine.Vector4 padding)
    // Offset: 0x149D414
    void SetSlicedVerts(::UnityEngine::Rect rect, ::UnityEngine::Vector4 border, ::UnityEngine::Vector4 padding);
    // private System.Void SetSlicedUVs(UnityEngine.Vector4 outer, UnityEngine.Vector4 inner, UnityEngine.Vector4 border)
    // Offset: 0x149D75C
    void SetSlicedUVs(::UnityEngine::Vector4 outer, ::UnityEngine::Vector4 inner, ::UnityEngine::Vector4 border);
    // static private System.Void AddQuad(UnityEngine.UI.VertexHelper vertexHelper, UnityEngine.Vector2 posMin, UnityEngine.Vector2 posMax, UnityEngine.Color32 color, UnityEngine.Vector2 uvMin, UnityEngine.Vector2 uvMax)
    // Offset: 0x149DE54
    static void AddQuad(::UnityEngine::UI::VertexHelper* vertexHelper, ::UnityEngine::Vector2 posMin, ::UnityEngine::Vector2 posMax, ::UnityEngine::Color32 color, ::UnityEngine::Vector2 uvMin, ::UnityEngine::Vector2 uvMax);
    // private UnityEngine.Vector4 GetAdjustedBorders(UnityEngine.Vector4 border, UnityEngine.Rect rect)
    // Offset: 0x149D2F8
    ::UnityEngine::Vector4 GetAdjustedBorders(::UnityEngine::Vector4 border, ::UnityEngine::Rect rect);
    // public System.Void .ctor()
    // Offset: 0x149E0C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImageSlicedMirror* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImageSlicedMirror::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImageSlicedMirror*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x149E130
    static void _cctor();
    // protected override System.Void OnPopulateMesh(UnityEngine.UI.VertexHelper toFill)
    // Offset: 0x149CC7C
    // Implemented from: UnityEngine.UI.Image
    // Base method: System.Void Image::OnPopulateMesh(UnityEngine.UI.VertexHelper toFill)
    void OnPopulateMesh(::UnityEngine::UI::VertexHelper* toFill);
  }; // ImageSlicedMirror
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ImageSlicedMirror::GenerateSlicedFilledSprite
// Il2CppName: GenerateSlicedFilledSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImageSlicedMirror::*)(::UnityEngine::UI::VertexHelper*)>(&GlobalNamespace::ImageSlicedMirror::GenerateSlicedFilledSprite)> {
  static const MethodInfo* get() {
    static auto* toFill = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImageSlicedMirror*), "GenerateSlicedFilledSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toFill});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImageSlicedMirror::SetSlicedVerts
// Il2CppName: SetSlicedVerts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImageSlicedMirror::*)(::UnityEngine::Rect, ::UnityEngine::Vector4, ::UnityEngine::Vector4)>(&GlobalNamespace::ImageSlicedMirror::SetSlicedVerts)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* border = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImageSlicedMirror*), "SetSlicedVerts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, border, padding});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImageSlicedMirror::SetSlicedUVs
// Il2CppName: SetSlicedUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImageSlicedMirror::*)(::UnityEngine::Vector4, ::UnityEngine::Vector4, ::UnityEngine::Vector4)>(&GlobalNamespace::ImageSlicedMirror::SetSlicedUVs)> {
  static const MethodInfo* get() {
    static auto* outer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* inner = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* border = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImageSlicedMirror*), "SetSlicedUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outer, inner, border});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImageSlicedMirror::AddQuad
// Il2CppName: AddQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UI::VertexHelper*, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Color32, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&GlobalNamespace::ImageSlicedMirror::AddQuad)> {
  static const MethodInfo* get() {
    static auto* vertexHelper = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* posMin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* posMax = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* uvMin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* uvMax = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImageSlicedMirror*), "AddQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexHelper, posMin, posMax, color, uvMin, uvMax});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImageSlicedMirror::GetAdjustedBorders
// Il2CppName: GetAdjustedBorders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (GlobalNamespace::ImageSlicedMirror::*)(::UnityEngine::Vector4, ::UnityEngine::Rect)>(&GlobalNamespace::ImageSlicedMirror::GetAdjustedBorders)> {
  static const MethodInfo* get() {
    static auto* border = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImageSlicedMirror*), "GetAdjustedBorders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{border, rect});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImageSlicedMirror::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ImageSlicedMirror::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ImageSlicedMirror::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImageSlicedMirror*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImageSlicedMirror::OnPopulateMesh
// Il2CppName: OnPopulateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImageSlicedMirror::*)(::UnityEngine::UI::VertexHelper*)>(&GlobalNamespace::ImageSlicedMirror::OnPopulateMesh)> {
  static const MethodInfo* get() {
    static auto* toFill = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImageSlicedMirror*), "OnPopulateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toFill});
  }
};
