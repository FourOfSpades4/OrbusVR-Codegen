// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ClickedEventArgs
  struct ClickedEventArgs;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SteamVR_Teleporter
  class SteamVR_Teleporter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SteamVR_Teleporter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SteamVR_Teleporter*, "", "SteamVR_Teleporter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: SteamVR_Teleporter
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamVR_Teleporter : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::SteamVR_Teleporter::TeleportType
    struct TeleportType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SteamVR_Teleporter/TeleportType
    // [TokenAttribute] Offset: FFFFFFFF
    struct TeleportType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TeleportType
      constexpr TeleportType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SteamVR_Teleporter/TeleportType TeleportTypeUseTerrain
      static constexpr const int TeleportTypeUseTerrain = 0;
      // Get static field: static public SteamVR_Teleporter/TeleportType TeleportTypeUseTerrain
      static ::GlobalNamespace::SteamVR_Teleporter::TeleportType _get_TeleportTypeUseTerrain();
      // Set static field: static public SteamVR_Teleporter/TeleportType TeleportTypeUseTerrain
      static void _set_TeleportTypeUseTerrain(::GlobalNamespace::SteamVR_Teleporter::TeleportType value);
      // static field const value: static public SteamVR_Teleporter/TeleportType TeleportTypeUseCollider
      static constexpr const int TeleportTypeUseCollider = 1;
      // Get static field: static public SteamVR_Teleporter/TeleportType TeleportTypeUseCollider
      static ::GlobalNamespace::SteamVR_Teleporter::TeleportType _get_TeleportTypeUseCollider();
      // Set static field: static public SteamVR_Teleporter/TeleportType TeleportTypeUseCollider
      static void _set_TeleportTypeUseCollider(::GlobalNamespace::SteamVR_Teleporter::TeleportType value);
      // static field const value: static public SteamVR_Teleporter/TeleportType TeleportTypeUseZeroY
      static constexpr const int TeleportTypeUseZeroY = 2;
      // Get static field: static public SteamVR_Teleporter/TeleportType TeleportTypeUseZeroY
      static ::GlobalNamespace::SteamVR_Teleporter::TeleportType _get_TeleportTypeUseZeroY();
      // Set static field: static public SteamVR_Teleporter/TeleportType TeleportTypeUseZeroY
      static void _set_TeleportTypeUseZeroY(::GlobalNamespace::SteamVR_Teleporter::TeleportType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SteamVR_Teleporter/TeleportType
    #pragma pack(pop)
    static check_size<sizeof(SteamVR_Teleporter::TeleportType), 0 + sizeof(int)> __GlobalNamespace_SteamVR_Teleporter_TeleportTypeSizeCheck;
    static_assert(sizeof(SteamVR_Teleporter::TeleportType) == 0x4);
    public:
    // public System.Boolean teleportOnClick
    // Size: 0x1
    // Offset: 0x18
    bool teleportOnClick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: teleportOnClick and: teleportType
    char __padding0[0x3] = {};
    // public SteamVR_Teleporter/TeleportType teleportType
    // Size: 0x4
    // Offset: 0x1C
    ::GlobalNamespace::SteamVR_Teleporter::TeleportType teleportType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SteamVR_Teleporter::TeleportType) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean teleportOnClick
    [[deprecated("Use field access instead!")]] bool& dyn_teleportOnClick();
    // Get instance field reference: public SteamVR_Teleporter/TeleportType teleportType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamVR_Teleporter::TeleportType& dyn_teleportType();
    // private UnityEngine.Transform get_reference()
    // Offset: 0xF0EC6C
    ::UnityEngine::Transform* get_reference();
    // private System.Void Start()
    // Offset: 0xF0ED10
    void Start();
    // private System.Void DoClick(System.Object sender, ClickedEventArgs e)
    // Offset: 0xF0F028
    void DoClick(::Il2CppObject* sender, ::GlobalNamespace::ClickedEventArgs e);
    // public System.Void .ctor()
    // Offset: 0xF0F468
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamVR_Teleporter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_Teleporter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamVR_Teleporter*, creationType>()));
    }
  }; // SteamVR_Teleporter
  #pragma pack(pop)
  static check_size<sizeof(SteamVR_Teleporter), 28 + sizeof(::GlobalNamespace::SteamVR_Teleporter::TeleportType)> __GlobalNamespace_SteamVR_TeleporterSizeCheck;
  static_assert(sizeof(SteamVR_Teleporter) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SteamVR_Teleporter::TeleportType, "", "SteamVR_Teleporter/TeleportType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_Teleporter::get_reference
// Il2CppName: get_reference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::SteamVR_Teleporter::*)()>(&GlobalNamespace::SteamVR_Teleporter::get_reference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_Teleporter*), "get_reference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_Teleporter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_Teleporter::*)()>(&GlobalNamespace::SteamVR_Teleporter::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_Teleporter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_Teleporter::DoClick
// Il2CppName: DoClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_Teleporter::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&GlobalNamespace::SteamVR_Teleporter::DoClick)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_Teleporter*), "DoClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_Teleporter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
