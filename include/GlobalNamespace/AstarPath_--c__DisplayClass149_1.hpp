// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: AstarPath
#include "GlobalNamespace/AstarPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AstarPath::$$c__DisplayClass149_1);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AstarPath::$$c__DisplayClass149_1*, "", "AstarPath/<>c__DisplayClass149_1");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: AstarPath/<>c__DisplayClass149_1
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: ACD0D8
  class AstarPath::$$c__DisplayClass149_1 : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 i
    // Size: 0x4
    // Offset: 0x10
    int i;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: i and: CS$$$8__locals1
    char __padding0[0x4] = {};
    // public AstarPath/<>c__DisplayClass149_0 CS$<>8__locals1
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::AstarPath::$$c__DisplayClass149_0* CS$$$8__locals1;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AstarPath::$$c__DisplayClass149_0*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 i
    [[deprecated("Use field access instead!")]] int& dyn_i();
    // Get instance field reference: public AstarPath/<>c__DisplayClass149_0 CS$<>8__locals1
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AstarPath::$$c__DisplayClass149_0*& dyn_CS$$$8__locals1();
    // public System.Void .ctor()
    // Offset: 0x12A3BA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AstarPath::$$c__DisplayClass149_1* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AstarPath::$$c__DisplayClass149_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AstarPath::$$c__DisplayClass149_1*, creationType>()));
    }
    // System.Boolean <ScanLoop>b__2(Pathfinding.GraphNode node)
    // Offset: 0x12A6820
    bool $ScanLoop$b__2(::Pathfinding::GraphNode* node);
  }; // AstarPath/<>c__DisplayClass149_1
  #pragma pack(pop)
  static check_size<sizeof(AstarPath::$$c__DisplayClass149_1), 24 + sizeof(::GlobalNamespace::AstarPath::$$c__DisplayClass149_0*)> __GlobalNamespace_AstarPath_$$c__DisplayClass149_1SizeCheck;
  static_assert(sizeof(AstarPath::$$c__DisplayClass149_1) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$$c__DisplayClass149_1::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::AstarPath::$$c__DisplayClass149_1::$ScanLoop$b__2
// Il2CppName: <ScanLoop>b__2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AstarPath::$$c__DisplayClass149_1::*)(::Pathfinding::GraphNode*)>(&GlobalNamespace::AstarPath::$$c__DisplayClass149_1::$ScanLoop$b__2)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarPath::$$c__DisplayClass149_1*), "<ScanLoop>b__2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
