// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: STMWaveControl
  class STMWaveControl;
  // Forward declaring type: STMWaveRotationControl
  class STMWaveRotationControl;
  // Forward declaring type: STMWaveScaleControl
  class STMWaveScaleControl;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: STMWaveData
  class STMWaveData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::STMWaveData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::STMWaveData*, "", "STMWaveData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: STMWaveData
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: ACDAF4
  class STMWaveData : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public System.Boolean animateFromTimeDrawn
    // Size: 0x1
    // Offset: 0x18
    bool animateFromTimeDrawn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean positionControl
    // Size: 0x1
    // Offset: 0x19
    bool positionControl;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: positionControl and: position
    char __padding1[0x6] = {};
    // [FormerlySerializedAsAttribute] Offset: 0xAD9194
    // public STMWaveControl position
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::STMWaveControl* position;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMWaveControl*) == 0x8);
    // [TooltipAttribute] Offset: 0xAD91CC
    // public System.Boolean individualVertexControl
    // Size: 0x1
    // Offset: 0x28
    bool individualVertexControl;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: individualVertexControl and: topLeft
    char __padding3[0x7] = {};
    // public STMWaveControl topLeft
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::STMWaveControl* topLeft;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMWaveControl*) == 0x8);
    // public STMWaveControl topRight
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::STMWaveControl* topRight;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMWaveControl*) == 0x8);
    // public STMWaveControl bottomLeft
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::STMWaveControl* bottomLeft;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMWaveControl*) == 0x8);
    // public STMWaveControl bottomRight
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::STMWaveControl* bottomRight;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMWaveControl*) == 0x8);
    // public System.Boolean rotationControl
    // Size: 0x1
    // Offset: 0x50
    bool rotationControl;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: rotationControl and: rotation
    char __padding8[0x7] = {};
    // public STMWaveRotationControl rotation
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::STMWaveRotationControl* rotation;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMWaveRotationControl*) == 0x8);
    // public System.Boolean scaleControl
    // Size: 0x1
    // Offset: 0x60
    bool scaleControl;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: scaleControl and: scale
    char __padding10[0x7] = {};
    // public STMWaveScaleControl scale
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::STMWaveScaleControl* scale;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMWaveScaleControl*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean animateFromTimeDrawn
    [[deprecated("Use field access instead!")]] bool& dyn_animateFromTimeDrawn();
    // Get instance field reference: public System.Boolean positionControl
    [[deprecated("Use field access instead!")]] bool& dyn_positionControl();
    // Get instance field reference: public STMWaveControl position
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMWaveControl*& dyn_position();
    // Get instance field reference: public System.Boolean individualVertexControl
    [[deprecated("Use field access instead!")]] bool& dyn_individualVertexControl();
    // Get instance field reference: public STMWaveControl topLeft
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMWaveControl*& dyn_topLeft();
    // Get instance field reference: public STMWaveControl topRight
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMWaveControl*& dyn_topRight();
    // Get instance field reference: public STMWaveControl bottomLeft
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMWaveControl*& dyn_bottomLeft();
    // Get instance field reference: public STMWaveControl bottomRight
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMWaveControl*& dyn_bottomRight();
    // Get instance field reference: public System.Boolean rotationControl
    [[deprecated("Use field access instead!")]] bool& dyn_rotationControl();
    // Get instance field reference: public STMWaveRotationControl rotation
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMWaveRotationControl*& dyn_rotation();
    // Get instance field reference: public System.Boolean scaleControl
    [[deprecated("Use field access instead!")]] bool& dyn_scaleControl();
    // Get instance field reference: public STMWaveScaleControl scale
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMWaveScaleControl*& dyn_scale();
    // public System.Void .ctor()
    // Offset: 0xE33140
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMWaveData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMWaveData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMWaveData*, creationType>()));
    }
  }; // STMWaveData
  #pragma pack(pop)
  static check_size<sizeof(STMWaveData), 104 + sizeof(::GlobalNamespace::STMWaveScaleControl*)> __GlobalNamespace_STMWaveDataSizeCheck;
  static_assert(sizeof(STMWaveData) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::STMWaveData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
