// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: STMWaveControl
  class STMWaveControl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::STMWaveControl);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::STMWaveControl*, "", "STMWaveControl");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: STMWaveControl
  // [TokenAttribute] Offset: FFFFFFFF
  class STMWaveControl : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.AnimationCurve curveX
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::AnimationCurve* curveX;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve curveY
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AnimationCurve* curveY;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve curveZ
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AnimationCurve* curveZ;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // [TooltipAttribute] Offset: 0xAD8E0C
    // [FormerlySerializedAsAttribute] Offset: 0xAD8E0C
    // [RangeAttribute] Offset: 0xAD8E0C
    // public System.Single phase
    // Size: 0x4
    // Offset: 0x28
    float phase;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAD8E84
    // public UnityEngine.Vector3 speed
    // Size: 0xC
    // Offset: 0x2C
    ::UnityEngine::Vector3 speed;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xAD8EBC
    // public UnityEngine.Vector3 strength
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 strength;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xAD8EF4
    // public UnityEngine.Vector3 density
    // Size: 0xC
    // Offset: 0x44
    ::UnityEngine::Vector3 density;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public UnityEngine.AnimationCurve curveX
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_curveX();
    // Get instance field reference: public UnityEngine.AnimationCurve curveY
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_curveY();
    // Get instance field reference: public UnityEngine.AnimationCurve curveZ
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_curveZ();
    // Get instance field reference: public System.Single phase
    [[deprecated("Use field access instead!")]] float& dyn_phase();
    // Get instance field reference: public UnityEngine.Vector3 speed
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_speed();
    // Get instance field reference: public UnityEngine.Vector3 strength
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_strength();
    // Get instance field reference: public UnityEngine.Vector3 density
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_density();
    // public System.Void .ctor()
    // Offset: 0xE32DAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMWaveControl* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMWaveControl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMWaveControl*, creationType>()));
    }
  }; // STMWaveControl
  #pragma pack(pop)
  static check_size<sizeof(STMWaveControl), 68 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_STMWaveControlSizeCheck;
  static_assert(sizeof(STMWaveControl) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::STMWaveControl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
