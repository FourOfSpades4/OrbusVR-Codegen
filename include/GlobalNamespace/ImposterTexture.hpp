// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ImposterProxy
  class ImposterProxy;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ImposterTexture
  class ImposterTexture;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ImposterTexture);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ImposterTexture*, "", "ImposterTexture");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: ImposterTexture
  // [TokenAttribute] Offset: FFFFFFFF
  class ImposterTexture : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 size
    // Size: 0x4
    // Offset: 0x10
    int size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: size and: texture
    char __padding0[0x4] = {};
    // public UnityEngine.RenderTexture texture
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::RenderTexture* texture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // public ImposterProxy owner
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::ImposterProxy* owner;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ImposterProxy*) == 0x8);
    // public System.Int32 x
    // Size: 0x4
    // Offset: 0x28
    int x;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 y
    // Size: 0x4
    // Offset: 0x2C
    int y;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 h
    // Size: 0x4
    // Offset: 0x30
    int h;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 w
    // Size: 0x4
    // Offset: 0x34
    int w;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 createdTime
    // Size: 0x4
    // Offset: 0x38
    int createdTime;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 lastUsedTime
    // Size: 0x4
    // Offset: 0x3C
    int lastUsedTime;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Int32 size
    [[deprecated("Use field access instead!")]] int& dyn_size();
    // Get instance field reference: public UnityEngine.RenderTexture texture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_texture();
    // Get instance field reference: public ImposterProxy owner
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ImposterProxy*& dyn_owner();
    // Get instance field reference: public System.Int32 x
    [[deprecated("Use field access instead!")]] int& dyn_x();
    // Get instance field reference: public System.Int32 y
    [[deprecated("Use field access instead!")]] int& dyn_y();
    // Get instance field reference: public System.Int32 h
    [[deprecated("Use field access instead!")]] int& dyn_h();
    // Get instance field reference: public System.Int32 w
    [[deprecated("Use field access instead!")]] int& dyn_w();
    // Get instance field reference: public System.Int32 createdTime
    [[deprecated("Use field access instead!")]] int& dyn_createdTime();
    // Get instance field reference: public System.Int32 lastUsedTime
    [[deprecated("Use field access instead!")]] int& dyn_lastUsedTime();
    // public System.Single getMemoryAmount()
    // Offset: 0x14A0FC4
    float getMemoryAmount();
    // public System.Void .ctor()
    // Offset: 0x14A0FBC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImposterTexture* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImposterTexture::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImposterTexture*, creationType>()));
    }
  }; // ImposterTexture
  #pragma pack(pop)
  static check_size<sizeof(ImposterTexture), 60 + sizeof(int)> __GlobalNamespace_ImposterTextureSizeCheck;
  static_assert(sizeof(ImposterTexture) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ImposterTexture::getMemoryAmount
// Il2CppName: getMemoryAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ImposterTexture::*)()>(&GlobalNamespace::ImposterTexture::getMemoryAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterTexture*), "getMemoryAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterTexture::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
