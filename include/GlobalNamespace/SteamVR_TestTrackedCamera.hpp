// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SteamVR_TestTrackedCamera
  class SteamVR_TestTrackedCamera;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SteamVR_TestTrackedCamera);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SteamVR_TestTrackedCamera*, "", "SteamVR_TestTrackedCamera");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2A
  #pragma pack(push, 1)
  // Autogenerated type: SteamVR_TestTrackedCamera
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamVR_TestTrackedCamera : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Material material
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean undistorted
    // Size: 0x1
    // Offset: 0x28
    bool undistorted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean cropped
    // Size: 0x1
    // Offset: 0x29
    bool cropped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Material material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // Get instance field reference: public System.Boolean undistorted
    [[deprecated("Use field access instead!")]] bool& dyn_undistorted();
    // Get instance field reference: public System.Boolean cropped
    [[deprecated("Use field access instead!")]] bool& dyn_cropped();
    // private System.Void OnEnable()
    // Offset: 0xF10C94
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xF10D94
    void OnDisable();
    // private System.Void Update()
    // Offset: 0xF10EB4
    void Update();
    // public System.Void .ctor()
    // Offset: 0xF112DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamVR_TestTrackedCamera* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_TestTrackedCamera::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamVR_TestTrackedCamera*, creationType>()));
    }
  }; // SteamVR_TestTrackedCamera
  #pragma pack(pop)
  static check_size<sizeof(SteamVR_TestTrackedCamera), 41 + sizeof(bool)> __GlobalNamespace_SteamVR_TestTrackedCameraSizeCheck;
  static_assert(sizeof(SteamVR_TestTrackedCamera) == 0x2A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TestTrackedCamera::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TestTrackedCamera::*)()>(&GlobalNamespace::SteamVR_TestTrackedCamera::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TestTrackedCamera*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TestTrackedCamera::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TestTrackedCamera::*)()>(&GlobalNamespace::SteamVR_TestTrackedCamera::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TestTrackedCamera*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TestTrackedCamera::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_TestTrackedCamera::*)()>(&GlobalNamespace::SteamVR_TestTrackedCamera::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_TestTrackedCamera*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_TestTrackedCamera::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
