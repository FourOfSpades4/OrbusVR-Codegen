// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CharacterController
  class CharacterController;
  // Forward declaring type: MeshFilter
  class MeshFilter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CharacterCapsule
  class CharacterCapsule;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CharacterCapsule);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CharacterCapsule*, "", "CharacterCapsule");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: CharacterCapsule
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class CharacterCapsule : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.CharacterController _character
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::CharacterController* character;
    // Field size check
    static_assert(sizeof(::UnityEngine::CharacterController*) == 0x8);
    // private UnityEngine.MeshFilter _meshFilter
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::MeshFilter* meshFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // private System.Single _height
    // Size: 0x4
    // Offset: 0x28
    float height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _radius
    // Size: 0x4
    // Offset: 0x2C
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xADC3D8
    // public System.Int32 SubdivisionsU
    // Size: 0x4
    // Offset: 0x30
    int SubdivisionsU;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RangeAttribute] Offset: 0xADC3F4
    // public System.Int32 SubdivisionsV
    // Size: 0x4
    // Offset: 0x34
    int SubdivisionsV;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _subdivisionU
    // Size: 0x4
    // Offset: 0x38
    int subdivisionU;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _subdivisionV
    // Size: 0x4
    // Offset: 0x3C
    int subdivisionV;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3[] _vertices
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Vector3> vertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Int32[] _triangles
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<int> triangles;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.CharacterController _character
    [[deprecated("Use field access instead!")]] ::UnityEngine::CharacterController*& dyn__character();
    // Get instance field reference: private UnityEngine.MeshFilter _meshFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn__meshFilter();
    // Get instance field reference: private System.Single _height
    [[deprecated("Use field access instead!")]] float& dyn__height();
    // Get instance field reference: private System.Single _radius
    [[deprecated("Use field access instead!")]] float& dyn__radius();
    // Get instance field reference: public System.Int32 SubdivisionsU
    [[deprecated("Use field access instead!")]] int& dyn_SubdivisionsU();
    // Get instance field reference: public System.Int32 SubdivisionsV
    [[deprecated("Use field access instead!")]] int& dyn_SubdivisionsV();
    // Get instance field reference: private System.Int32 _subdivisionU
    [[deprecated("Use field access instead!")]] int& dyn__subdivisionU();
    // Get instance field reference: private System.Int32 _subdivisionV
    [[deprecated("Use field access instead!")]] int& dyn__subdivisionV();
    // Get instance field reference: private UnityEngine.Vector3[] _vertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn__vertices();
    // Get instance field reference: private System.Int32[] _triangles
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__triangles();
    // private System.Void Update()
    // Offset: 0xDE0CF4
    void Update();
    // public System.Void .ctor()
    // Offset: 0xDE1C54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CharacterCapsule* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CharacterCapsule::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CharacterCapsule*, creationType>()));
    }
  }; // CharacterCapsule
  #pragma pack(pop)
  static check_size<sizeof(CharacterCapsule), 72 + sizeof(::ArrayW<int>)> __GlobalNamespace_CharacterCapsuleSizeCheck;
  static_assert(sizeof(CharacterCapsule) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CharacterCapsule::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CharacterCapsule::*)()>(&GlobalNamespace::CharacterCapsule::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CharacterCapsule*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CharacterCapsule::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
