// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VillageWellEffect
  class VillageWellEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VillageWellEffect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VillageWellEffect*, "", "VillageWellEffect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: VillageWellEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class VillageWellEffect : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform rope
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* rope;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform bucket
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* bucket;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform bucketParent
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* bucketParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single effectAmount
    // Size: 0x4
    // Offset: 0x30
    float effectAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastAmt
    // Size: 0x4
    // Offset: 0x34
    float lastAmt;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Transform rope
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rope();
    // Get instance field reference: private UnityEngine.Transform bucket
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_bucket();
    // Get instance field reference: private UnityEngine.Transform bucketParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_bucketParent();
    // Get instance field reference: public System.Single effectAmount
    [[deprecated("Use field access instead!")]] float& dyn_effectAmount();
    // Get instance field reference: private System.Single lastAmt
    [[deprecated("Use field access instead!")]] float& dyn_lastAmt();
    // private System.Void Start()
    // Offset: 0xDCF8D4
    void Start();
    // private System.Void Update()
    // Offset: 0xDCF8E0
    void Update();
    // private System.Void UpdateRope()
    // Offset: 0xDCF8F4
    void UpdateRope();
    // public System.Void .ctor()
    // Offset: 0xDCFA20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VillageWellEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VillageWellEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VillageWellEffect*, creationType>()));
    }
  }; // VillageWellEffect
  #pragma pack(pop)
  static check_size<sizeof(VillageWellEffect), 52 + sizeof(float)> __GlobalNamespace_VillageWellEffectSizeCheck;
  static_assert(sizeof(VillageWellEffect) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VillageWellEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VillageWellEffect::*)()>(&GlobalNamespace::VillageWellEffect::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VillageWellEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VillageWellEffect::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VillageWellEffect::*)()>(&GlobalNamespace::VillageWellEffect::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VillageWellEffect*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VillageWellEffect::UpdateRope
// Il2CppName: UpdateRope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VillageWellEffect::*)()>(&GlobalNamespace::VillageWellEffect::UpdateRope)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VillageWellEffect*), "UpdateRope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VillageWellEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
