// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CFX_LightIntensityFade
  class CFX_LightIntensityFade;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CFX_LightIntensityFade);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CFX_LightIntensityFade*, "", "CFX_LightIntensityFade");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: CFX_LightIntensityFade
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: ACDDC8
  class CFX_LightIntensityFade : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single duration
    // Size: 0x4
    // Offset: 0x18
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single delay
    // Size: 0x4
    // Offset: 0x1C
    float delay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single finalIntensity
    // Size: 0x4
    // Offset: 0x20
    float finalIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single baseIntensity
    // Size: 0x4
    // Offset: 0x24
    float baseIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean autodestruct
    // Size: 0x1
    // Offset: 0x28
    bool autodestruct;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autodestruct and: p_lifetime
    char __padding4[0x3] = {};
    // private System.Single p_lifetime
    // Size: 0x4
    // Offset: 0x2C
    float p_lifetime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single p_delay
    // Size: 0x4
    // Offset: 0x30
    float p_delay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single duration
    [[deprecated("Use field access instead!")]] float& dyn_duration();
    // Get instance field reference: public System.Single delay
    [[deprecated("Use field access instead!")]] float& dyn_delay();
    // Get instance field reference: public System.Single finalIntensity
    [[deprecated("Use field access instead!")]] float& dyn_finalIntensity();
    // Get instance field reference: private System.Single baseIntensity
    [[deprecated("Use field access instead!")]] float& dyn_baseIntensity();
    // Get instance field reference: public System.Boolean autodestruct
    [[deprecated("Use field access instead!")]] bool& dyn_autodestruct();
    // Get instance field reference: private System.Single p_lifetime
    [[deprecated("Use field access instead!")]] float& dyn_p_lifetime();
    // Get instance field reference: private System.Single p_delay
    [[deprecated("Use field access instead!")]] float& dyn_p_delay();
    // private System.Void Start()
    // Offset: 0xDDD1F0
    void Start();
    // private System.Void OnEnable()
    // Offset: 0xDDD260
    void OnEnable();
    // private System.Void Update()
    // Offset: 0xDDD2EC
    void Update();
    // public System.Void .ctor()
    // Offset: 0xDDD4A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CFX_LightIntensityFade* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CFX_LightIntensityFade::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CFX_LightIntensityFade*, creationType>()));
    }
  }; // CFX_LightIntensityFade
  #pragma pack(pop)
  static check_size<sizeof(CFX_LightIntensityFade), 48 + sizeof(float)> __GlobalNamespace_CFX_LightIntensityFadeSizeCheck;
  static_assert(sizeof(CFX_LightIntensityFade) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CFX_LightIntensityFade::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CFX_LightIntensityFade::*)()>(&GlobalNamespace::CFX_LightIntensityFade::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CFX_LightIntensityFade*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CFX_LightIntensityFade::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CFX_LightIntensityFade::*)()>(&GlobalNamespace::CFX_LightIntensityFade::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CFX_LightIntensityFade*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CFX_LightIntensityFade::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CFX_LightIntensityFade::*)()>(&GlobalNamespace::CFX_LightIntensityFade::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CFX_LightIntensityFade*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CFX_LightIntensityFade::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
