// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: VivoxUnity
namespace VivoxUnity {
  // Forward declaring type: Client
  class Client;
  // Forward declaring type: ILoginSession
  class ILoginSession;
  // Forward declaring type: IChannelSession
  class IChannelSession;
  // Forward declaring type: KeyEventArg`1<TK>
  template<typename TK>
  class KeyEventArg_1;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: PropertyChangedEventArgs
  class PropertyChangedEventArgs;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VivoxVoipClient
  class VivoxVoipClient;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VivoxVoipClient);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VivoxVoipClient*, "", "VivoxVoipClient");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: VivoxVoipClient
  // [TokenAttribute] Offset: FFFFFFFF
  class VivoxVoipClient : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::VivoxVoipClient::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::VivoxVoipClient::$$c__DisplayClass28_0
    class $$c__DisplayClass28_0;
    // Nested type: ::GlobalNamespace::VivoxVoipClient::$ChangeZoneChannelAsync$d__28
    class $ChangeZoneChannelAsync$d__28;
    // Nested type: ::GlobalNamespace::VivoxVoipClient::$$c__DisplayClass30_0
    class $$c__DisplayClass30_0;
    // Nested type: ::GlobalNamespace::VivoxVoipClient::$ChangePartyChannelAsync$d__30
    class $ChangePartyChannelAsync$d__30;
    // Nested type: ::GlobalNamespace::VivoxVoipClient::$$c__DisplayClass32_0
    class $$c__DisplayClass32_0;
    // Nested type: ::GlobalNamespace::VivoxVoipClient::$ChangeFellowshipChannelAsync$d__32
    class $ChangeFellowshipChannelAsync$d__32;
    public:
    // private VivoxUnity.Client _client
    // Size: 0x8
    // Offset: 0x18
    ::VivoxUnity::Client* client;
    // Field size check
    static_assert(sizeof(::VivoxUnity::Client*) == 0x8);
    // private System.String _tokenIssuer
    // Size: 0x8
    // Offset: 0x20
    ::StringW tokenIssuer;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _tokenDomain
    // Size: 0x8
    // Offset: 0x28
    ::StringW tokenDomain;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _tokenKey
    // Size: 0x8
    // Offset: 0x30
    ::StringW tokenKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _apiEndPoint
    // Size: 0x8
    // Offset: 0x38
    ::StringW apiEndPoint;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.TimeSpan _tokenExpiration
    // Size: 0x8
    // Offset: 0x40
    ::System::TimeSpan tokenExpiration;
    // Field size check
    static_assert(sizeof(::System::TimeSpan) == 0x8);
    // private VivoxUnity.ILoginSession _loginSession
    // Size: 0x8
    // Offset: 0x48
    ::VivoxUnity::ILoginSession* loginSession;
    // Field size check
    static_assert(sizeof(::VivoxUnity::ILoginSession*) == 0x8);
    // private System.Single timeSincePositionUpdate
    // Size: 0x4
    // Offset: 0x50
    float timeSincePositionUpdate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean isConnected
    // Size: 0x1
    // Offset: 0x54
    bool isConnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isLoggingIn
    // Size: 0x1
    // Offset: 0x55
    bool isLoggingIn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isLoggedIn
    // Size: 0x1
    // Offset: 0x56
    bool isLoggedIn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isLoggedIn and: zoneChannelSession
    char __padding10[0x1] = {};
    // private VivoxUnity.IChannelSession zoneChannelSession
    // Size: 0x8
    // Offset: 0x58
    ::VivoxUnity::IChannelSession* zoneChannelSession;
    // Field size check
    static_assert(sizeof(::VivoxUnity::IChannelSession*) == 0x8);
    // private VivoxUnity.IChannelSession partyChannelSession
    // Size: 0x8
    // Offset: 0x60
    ::VivoxUnity::IChannelSession* partyChannelSession;
    // Field size check
    static_assert(sizeof(::VivoxUnity::IChannelSession*) == 0x8);
    // private VivoxUnity.IChannelSession fellowshipChannelSession
    // Size: 0x8
    // Offset: 0x68
    ::VivoxUnity::IChannelSession* fellowshipChannelSession;
    // Field size check
    static_assert(sizeof(::VivoxUnity::IChannelSession*) == 0x8);
    // private VivoxUnity.IChannelSession currentChannelSession
    // Size: 0x8
    // Offset: 0x70
    ::VivoxUnity::IChannelSession* currentChannelSession;
    // Field size check
    static_assert(sizeof(::VivoxUnity::IChannelSession*) == 0x8);
    // private System.String zoneChannel
    // Size: 0x8
    // Offset: 0x78
    ::StringW zoneChannel;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String partyChannel
    // Size: 0x8
    // Offset: 0x80
    ::StringW partyChannel;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String fellowshipChannel
    // Size: 0x8
    // Offset: 0x88
    ::StringW fellowshipChannel;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String wantZoneChannel
    // Size: 0x8
    // Offset: 0x90
    ::StringW wantZoneChannel;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String wantPartyChannel
    // Size: 0x8
    // Offset: 0x98
    ::StringW wantPartyChannel;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String wantFellowshipChannel
    // Size: 0x8
    // Offset: 0xA0
    ::StringW wantFellowshipChannel;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public VivoxVoipClient Instance
    static ::GlobalNamespace::VivoxVoipClient* _get_Instance();
    // Set static field: static public VivoxVoipClient Instance
    static void _set_Instance(::GlobalNamespace::VivoxVoipClient* value);
    // Get instance field reference: private VivoxUnity.Client _client
    [[deprecated("Use field access instead!")]] ::VivoxUnity::Client*& dyn__client();
    // Get instance field reference: private System.String _tokenIssuer
    [[deprecated("Use field access instead!")]] ::StringW& dyn__tokenIssuer();
    // Get instance field reference: private System.String _tokenDomain
    [[deprecated("Use field access instead!")]] ::StringW& dyn__tokenDomain();
    // Get instance field reference: private System.String _tokenKey
    [[deprecated("Use field access instead!")]] ::StringW& dyn__tokenKey();
    // Get instance field reference: private System.String _apiEndPoint
    [[deprecated("Use field access instead!")]] ::StringW& dyn__apiEndPoint();
    // Get instance field reference: private System.TimeSpan _tokenExpiration
    [[deprecated("Use field access instead!")]] ::System::TimeSpan& dyn__tokenExpiration();
    // Get instance field reference: private VivoxUnity.ILoginSession _loginSession
    [[deprecated("Use field access instead!")]] ::VivoxUnity::ILoginSession*& dyn__loginSession();
    // Get instance field reference: private System.Single timeSincePositionUpdate
    [[deprecated("Use field access instead!")]] float& dyn_timeSincePositionUpdate();
    // Get instance field reference: private System.Boolean isConnected
    [[deprecated("Use field access instead!")]] bool& dyn_isConnected();
    // Get instance field reference: private System.Boolean isLoggingIn
    [[deprecated("Use field access instead!")]] bool& dyn_isLoggingIn();
    // Get instance field reference: private System.Boolean isLoggedIn
    [[deprecated("Use field access instead!")]] bool& dyn_isLoggedIn();
    // Get instance field reference: private VivoxUnity.IChannelSession zoneChannelSession
    [[deprecated("Use field access instead!")]] ::VivoxUnity::IChannelSession*& dyn_zoneChannelSession();
    // Get instance field reference: private VivoxUnity.IChannelSession partyChannelSession
    [[deprecated("Use field access instead!")]] ::VivoxUnity::IChannelSession*& dyn_partyChannelSession();
    // Get instance field reference: private VivoxUnity.IChannelSession fellowshipChannelSession
    [[deprecated("Use field access instead!")]] ::VivoxUnity::IChannelSession*& dyn_fellowshipChannelSession();
    // Get instance field reference: private VivoxUnity.IChannelSession currentChannelSession
    [[deprecated("Use field access instead!")]] ::VivoxUnity::IChannelSession*& dyn_currentChannelSession();
    // Get instance field reference: private System.String zoneChannel
    [[deprecated("Use field access instead!")]] ::StringW& dyn_zoneChannel();
    // Get instance field reference: private System.String partyChannel
    [[deprecated("Use field access instead!")]] ::StringW& dyn_partyChannel();
    // Get instance field reference: private System.String fellowshipChannel
    [[deprecated("Use field access instead!")]] ::StringW& dyn_fellowshipChannel();
    // Get instance field reference: private System.String wantZoneChannel
    [[deprecated("Use field access instead!")]] ::StringW& dyn_wantZoneChannel();
    // Get instance field reference: private System.String wantPartyChannel
    [[deprecated("Use field access instead!")]] ::StringW& dyn_wantPartyChannel();
    // Get instance field reference: private System.String wantFellowshipChannel
    [[deprecated("Use field access instead!")]] ::StringW& dyn_wantFellowshipChannel();
    // private System.Void Awake()
    // Offset: 0xDCFA28
    void Awake();
    // private System.Void Start()
    // Offset: 0xDCFAC4
    void Start();
    // public System.Void LoginUser()
    // Offset: 0xDCFB3C
    void LoginUser();
    // private System.Void onLoginSessionPropertyChanged(System.Object sender, System.ComponentModel.PropertyChangedEventArgs propertyChangedEventArgs)
    // Offset: 0xDCFE88
    void onLoginSessionPropertyChanged(::Il2CppObject* sender, ::System::ComponentModel::PropertyChangedEventArgs* propertyChangedEventArgs);
    // private System.Void SourceOnChannelPropertyChanged(System.Object sender, System.ComponentModel.PropertyChangedEventArgs propertyChangedEventArgs)
    // Offset: 0xDD06A4
    void SourceOnChannelPropertyChanged(::Il2CppObject* sender, ::System::ComponentModel::PropertyChangedEventArgs* propertyChangedEventArgs);
    // private System.Void Update()
    // Offset: 0xDD0B74
    void Update();
    // private System.Collections.IEnumerator ChangeZoneChannelAsync(System.String newZoneId)
    // Offset: 0xDD1218
    ::System::Collections::IEnumerator* ChangeZoneChannelAsync(::StringW newZoneId);
    // public System.Void ChangeZoneChannel(System.String newZoneId)
    // Offset: 0xDD0398
    void ChangeZoneChannel(::StringW newZoneId);
    // private System.Collections.IEnumerator ChangePartyChannelAsync(System.String newZoneId)
    // Offset: 0xDD12DC
    ::System::Collections::IEnumerator* ChangePartyChannelAsync(::StringW newZoneId);
    // public System.Void ChangePartyChannel(System.String newPartyId)
    // Offset: 0xDD048C
    void ChangePartyChannel(::StringW newPartyId);
    // private System.Collections.IEnumerator ChangeFellowshipChannelAsync(System.String newZoneId)
    // Offset: 0xDD13A0
    ::System::Collections::IEnumerator* ChangeFellowshipChannelAsync(::StringW newZoneId);
    // public System.Void ChangeFellowshipChannel(System.String newPartyId)
    // Offset: 0xDD0580
    void ChangeFellowshipChannel(::StringW newPartyId);
    // public System.Void MuteZone(System.Boolean isMuted)
    // Offset: 0xDD1464
    void MuteZone(bool isMuted);
    // public System.Void MuteParty(System.Boolean isMuted)
    // Offset: 0xDD163C
    void MuteParty(bool isMuted);
    // public System.Void MuteFellowship(System.Boolean isMuted)
    // Offset: 0xDD1814
    void MuteFellowship(bool isMuted);
    // public System.Void ChangeBroadcastChannel(System.Int32 newChannel)
    // Offset: 0xDD0B48
    void ChangeBroadcastChannel(int newChannel);
    // public System.Void CloseAllChannels()
    // Offset: 0xDD19EC
    void CloseAllChannels();
    // public System.Void MuteSelf(System.Boolean isMuted)
    // Offset: 0xDD0F24
    void MuteSelf(bool isMuted);
    // public System.Void SetVolume(System.Single percent)
    // Offset: 0xDD00F0
    void SetVolume(float percent);
    // public System.Void SetInputVolume(System.Single percent)
    // Offset: 0xDD0244
    void SetInputVolume(float percent);
    // public System.Void UpdateMutedUsers()
    // Offset: 0xDD1A54
    void UpdateMutedUsers();
    // public System.Void UpdateSpeakingUsers()
    // Offset: 0xDD109C
    void UpdateSpeakingUsers();
    // private System.Void OnParticipantAdded(System.Object sender, VivoxUnity.KeyEventArg`1<System.String> keyEventArg)
    // Offset: 0xDD1BD0
    void OnParticipantAdded(::Il2CppObject* sender, ::VivoxUnity::KeyEventArg_1<::StringW>* keyEventArg);
    // public System.Void .ctor()
    // Offset: 0xDD1BD4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VivoxVoipClient* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VivoxVoipClient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VivoxVoipClient*, creationType>()));
    }
    // private System.Void <LoginUser>b__24_0(System.IAsyncResult ar)
    // Offset: 0xDD1CA4
    void $LoginUser$b__24_0(::System::IAsyncResult* ar);
  }; // VivoxVoipClient
  #pragma pack(pop)
  static check_size<sizeof(VivoxVoipClient), 160 + sizeof(::StringW)> __GlobalNamespace_VivoxVoipClientSizeCheck;
  static_assert(sizeof(VivoxVoipClient) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)()>(&GlobalNamespace::VivoxVoipClient::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)()>(&GlobalNamespace::VivoxVoipClient::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::LoginUser
// Il2CppName: LoginUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)()>(&GlobalNamespace::VivoxVoipClient::LoginUser)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "LoginUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::onLoginSessionPropertyChanged
// Il2CppName: onLoginSessionPropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)(::Il2CppObject*, ::System::ComponentModel::PropertyChangedEventArgs*)>(&GlobalNamespace::VivoxVoipClient::onLoginSessionPropertyChanged)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* propertyChangedEventArgs = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "onLoginSessionPropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, propertyChangedEventArgs});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::SourceOnChannelPropertyChanged
// Il2CppName: SourceOnChannelPropertyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)(::Il2CppObject*, ::System::ComponentModel::PropertyChangedEventArgs*)>(&GlobalNamespace::VivoxVoipClient::SourceOnChannelPropertyChanged)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* propertyChangedEventArgs = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "SourceOnChannelPropertyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, propertyChangedEventArgs});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)()>(&GlobalNamespace::VivoxVoipClient::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::ChangeZoneChannelAsync
// Il2CppName: ChangeZoneChannelAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::VivoxVoipClient::*)(::StringW)>(&GlobalNamespace::VivoxVoipClient::ChangeZoneChannelAsync)> {
  static const MethodInfo* get() {
    static auto* newZoneId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "ChangeZoneChannelAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newZoneId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::ChangeZoneChannel
// Il2CppName: ChangeZoneChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)(::StringW)>(&GlobalNamespace::VivoxVoipClient::ChangeZoneChannel)> {
  static const MethodInfo* get() {
    static auto* newZoneId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "ChangeZoneChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newZoneId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::ChangePartyChannelAsync
// Il2CppName: ChangePartyChannelAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::VivoxVoipClient::*)(::StringW)>(&GlobalNamespace::VivoxVoipClient::ChangePartyChannelAsync)> {
  static const MethodInfo* get() {
    static auto* newZoneId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "ChangePartyChannelAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newZoneId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::ChangePartyChannel
// Il2CppName: ChangePartyChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)(::StringW)>(&GlobalNamespace::VivoxVoipClient::ChangePartyChannel)> {
  static const MethodInfo* get() {
    static auto* newPartyId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "ChangePartyChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPartyId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::ChangeFellowshipChannelAsync
// Il2CppName: ChangeFellowshipChannelAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::VivoxVoipClient::*)(::StringW)>(&GlobalNamespace::VivoxVoipClient::ChangeFellowshipChannelAsync)> {
  static const MethodInfo* get() {
    static auto* newZoneId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "ChangeFellowshipChannelAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newZoneId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::ChangeFellowshipChannel
// Il2CppName: ChangeFellowshipChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)(::StringW)>(&GlobalNamespace::VivoxVoipClient::ChangeFellowshipChannel)> {
  static const MethodInfo* get() {
    static auto* newPartyId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "ChangeFellowshipChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPartyId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::MuteZone
// Il2CppName: MuteZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)(bool)>(&GlobalNamespace::VivoxVoipClient::MuteZone)> {
  static const MethodInfo* get() {
    static auto* isMuted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "MuteZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isMuted});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::MuteParty
// Il2CppName: MuteParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)(bool)>(&GlobalNamespace::VivoxVoipClient::MuteParty)> {
  static const MethodInfo* get() {
    static auto* isMuted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "MuteParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isMuted});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::MuteFellowship
// Il2CppName: MuteFellowship
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)(bool)>(&GlobalNamespace::VivoxVoipClient::MuteFellowship)> {
  static const MethodInfo* get() {
    static auto* isMuted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "MuteFellowship", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isMuted});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::ChangeBroadcastChannel
// Il2CppName: ChangeBroadcastChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)(int)>(&GlobalNamespace::VivoxVoipClient::ChangeBroadcastChannel)> {
  static const MethodInfo* get() {
    static auto* newChannel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "ChangeBroadcastChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newChannel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::CloseAllChannels
// Il2CppName: CloseAllChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)()>(&GlobalNamespace::VivoxVoipClient::CloseAllChannels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "CloseAllChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::MuteSelf
// Il2CppName: MuteSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)(bool)>(&GlobalNamespace::VivoxVoipClient::MuteSelf)> {
  static const MethodInfo* get() {
    static auto* isMuted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "MuteSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isMuted});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::SetVolume
// Il2CppName: SetVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)(float)>(&GlobalNamespace::VivoxVoipClient::SetVolume)> {
  static const MethodInfo* get() {
    static auto* percent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "SetVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::SetInputVolume
// Il2CppName: SetInputVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)(float)>(&GlobalNamespace::VivoxVoipClient::SetInputVolume)> {
  static const MethodInfo* get() {
    static auto* percent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "SetInputVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{percent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::UpdateMutedUsers
// Il2CppName: UpdateMutedUsers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)()>(&GlobalNamespace::VivoxVoipClient::UpdateMutedUsers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "UpdateMutedUsers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::UpdateSpeakingUsers
// Il2CppName: UpdateSpeakingUsers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)()>(&GlobalNamespace::VivoxVoipClient::UpdateSpeakingUsers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "UpdateSpeakingUsers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::OnParticipantAdded
// Il2CppName: OnParticipantAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)(::Il2CppObject*, ::VivoxUnity::KeyEventArg_1<::StringW>*)>(&GlobalNamespace::VivoxVoipClient::OnParticipantAdded)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* keyEventArg = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("VivoxUnity", "KeyEventArg`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "OnParticipantAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, keyEventArg});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::VivoxVoipClient::$LoginUser$b__24_0
// Il2CppName: <LoginUser>b__24_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VivoxVoipClient::*)(::System::IAsyncResult*)>(&GlobalNamespace::VivoxVoipClient::$LoginUser$b__24_0)> {
  static const MethodInfo* get() {
    static auto* ar = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VivoxVoipClient*), "<LoginUser>b__24_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ar});
  }
};
