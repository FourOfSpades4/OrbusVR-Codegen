// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: FMOD.VECTOR
#include "FMOD/VECTOR.hpp"
// Including type: FMOD.DSP
#include "FMOD/DSP.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: FmodResonanceAudioRoom
  class FmodResonanceAudioRoom;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FmodResonanceAudio
  class FmodResonanceAudio;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FmodResonanceAudio);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FmodResonanceAudio*, "", "FmodResonanceAudio");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: FmodResonanceAudio
  // [TokenAttribute] Offset: FFFFFFFF
  class FmodResonanceAudio : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::FmodResonanceAudio::RoomProperties
    struct RoomProperties;
    // static field const value: static public System.Single maxGainDb
    static constexpr const float maxGainDb = 24;
    // Get static field: static public System.Single maxGainDb
    static float _get_maxGainDb();
    // Set static field: static public System.Single maxGainDb
    static void _set_maxGainDb(float value);
    // static field const value: static public System.Single minGainDb
    static constexpr const float minGainDb = -24;
    // Get static field: static public System.Single minGainDb
    static float _get_minGainDb();
    // Set static field: static public System.Single minGainDb
    static void _set_minGainDb(float value);
    // static field const value: static public System.Single maxReverbBrightness
    static constexpr const float maxReverbBrightness = 1;
    // Get static field: static public System.Single maxReverbBrightness
    static float _get_maxReverbBrightness();
    // Set static field: static public System.Single maxReverbBrightness
    static void _set_maxReverbBrightness(float value);
    // static field const value: static public System.Single minReverbBrightness
    static constexpr const float minReverbBrightness = -1;
    // Get static field: static public System.Single minReverbBrightness
    static float _get_minReverbBrightness();
    // Set static field: static public System.Single minReverbBrightness
    static void _set_minReverbBrightness(float value);
    // static field const value: static public System.Single maxReverbTime
    static constexpr const float maxReverbTime = 3;
    // Get static field: static public System.Single maxReverbTime
    static float _get_maxReverbTime();
    // Set static field: static public System.Single maxReverbTime
    static void _set_maxReverbTime(float value);
    // static field const value: static public System.Single maxReflectivity
    static constexpr const float maxReflectivity = 2;
    // Get static field: static public System.Single maxReflectivity
    static float _get_maxReflectivity();
    // Set static field: static public System.Single maxReflectivity
    static void _set_maxReflectivity(float value);
    // Get static field: static private readonly UnityEngine.Matrix4x4 flipZ
    static ::UnityEngine::Matrix4x4 _get_flipZ();
    // Set static field: static private readonly UnityEngine.Matrix4x4 flipZ
    static void _set_flipZ(::UnityEngine::Matrix4x4 value);
    // Get static field: static private readonly System.String listenerPluginName
    static ::StringW _get_listenerPluginName();
    // Set static field: static private readonly System.String listenerPluginName
    static void _set_listenerPluginName(::StringW value);
    // Get static field: static private readonly System.Int32 roomPropertiesSize
    static int _get_roomPropertiesSize();
    // Set static field: static private readonly System.Int32 roomPropertiesSize
    static void _set_roomPropertiesSize(int value);
    // Get static field: static private readonly System.Int32 roomPropertiesIndex
    static int _get_roomPropertiesIndex();
    // Set static field: static private readonly System.Int32 roomPropertiesIndex
    static void _set_roomPropertiesIndex(int value);
    // Get static field: static private UnityEngine.Bounds bounds
    static ::UnityEngine::Bounds _get_bounds();
    // Set static field: static private UnityEngine.Bounds bounds
    static void _set_bounds(::UnityEngine::Bounds value);
    // Get static field: static private System.Collections.Generic.List`1<FmodResonanceAudioRoom> enabledRooms
    static ::System::Collections::Generic::List_1<::GlobalNamespace::FmodResonanceAudioRoom*>* _get_enabledRooms();
    // Set static field: static private System.Collections.Generic.List`1<FmodResonanceAudioRoom> enabledRooms
    static void _set_enabledRooms(::System::Collections::Generic::List_1<::GlobalNamespace::FmodResonanceAudioRoom*>* value);
    // Get static field: static private FMOD.VECTOR listenerPositionFmod
    static ::FMOD::VECTOR _get_listenerPositionFmod();
    // Set static field: static private FMOD.VECTOR listenerPositionFmod
    static void _set_listenerPositionFmod(::FMOD::VECTOR value);
    // Get static field: static private FMOD.DSP listenerPlugin
    static ::FMOD::DSP _get_listenerPlugin();
    // Set static field: static private FMOD.DSP listenerPlugin
    static void _set_listenerPlugin(::FMOD::DSP value);
    // static public System.Void UpdateAudioRoom(FmodResonanceAudioRoom room, System.Boolean roomEnabled)
    // Offset: 0x150B760
    static void UpdateAudioRoom(::GlobalNamespace::FmodResonanceAudioRoom* room, bool roomEnabled);
    // static public System.Boolean IsListenerInsideRoom(FmodResonanceAudioRoom room)
    // Offset: 0x150BE3C
    static bool IsListenerInsideRoom(::GlobalNamespace::FmodResonanceAudioRoom* room);
    // static private FMOD.DSP get_ListenerPlugin()
    // Offset: 0x150BCA8
    static ::FMOD::DSP get_ListenerPlugin();
    // static private System.Single ConvertAmplitudeFromDb(System.Single db)
    // Offset: 0x150C56C
    static float ConvertAmplitudeFromDb(float db);
    // static private System.Void ConvertAudioTransformFromUnity(ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation)
    // Offset: 0x150C5E4
    static void ConvertAudioTransformFromUnity(ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation);
    // static private System.Byte[] GetBytes(System.IntPtr ptr, System.Int32 length)
    // Offset: 0x150BD6C
    static ::ArrayW<uint8_t> GetBytes(::System::IntPtr ptr, int length);
    // static private FmodResonanceAudio/RoomProperties GetRoomProperties(FmodResonanceAudioRoom room)
    // Offset: 0x150BA5C
    static ::GlobalNamespace::FmodResonanceAudio::RoomProperties GetRoomProperties(::GlobalNamespace::FmodResonanceAudioRoom* room);
    // static private FMOD.DSP Initialize()
    // Offset: 0x150C10C
    static ::FMOD::DSP Initialize();
    // static private System.Void .cctor()
    // Offset: 0x150C8E4
    static void _cctor();
  }; // FmodResonanceAudio
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FmodResonanceAudio::UpdateAudioRoom
// Il2CppName: UpdateAudioRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::FmodResonanceAudioRoom*, bool)>(&GlobalNamespace::FmodResonanceAudio::UpdateAudioRoom)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("", "FmodResonanceAudioRoom")->byval_arg;
    static auto* roomEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FmodResonanceAudio*), "UpdateAudioRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room, roomEnabled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FmodResonanceAudio::IsListenerInsideRoom
// Il2CppName: IsListenerInsideRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::FmodResonanceAudioRoom*)>(&GlobalNamespace::FmodResonanceAudio::IsListenerInsideRoom)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("", "FmodResonanceAudioRoom")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FmodResonanceAudio*), "IsListenerInsideRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FmodResonanceAudio::get_ListenerPlugin
// Il2CppName: get_ListenerPlugin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::DSP (*)()>(&GlobalNamespace::FmodResonanceAudio::get_ListenerPlugin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FmodResonanceAudio*), "get_ListenerPlugin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FmodResonanceAudio::ConvertAmplitudeFromDb
// Il2CppName: ConvertAmplitudeFromDb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&GlobalNamespace::FmodResonanceAudio::ConvertAmplitudeFromDb)> {
  static const MethodInfo* get() {
    static auto* db = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FmodResonanceAudio*), "ConvertAmplitudeFromDb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{db});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FmodResonanceAudio::ConvertAudioTransformFromUnity
// Il2CppName: ConvertAudioTransformFromUnity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&GlobalNamespace::FmodResonanceAudio::ConvertAudioTransformFromUnity)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FmodResonanceAudio*), "ConvertAudioTransformFromUnity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FmodResonanceAudio::GetBytes
// Il2CppName: GetBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::IntPtr, int)>(&GlobalNamespace::FmodResonanceAudio::GetBytes)> {
  static const MethodInfo* get() {
    static auto* ptr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FmodResonanceAudio*), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, length});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FmodResonanceAudio::GetRoomProperties
// Il2CppName: GetRoomProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FmodResonanceAudio::RoomProperties (*)(::GlobalNamespace::FmodResonanceAudioRoom*)>(&GlobalNamespace::FmodResonanceAudio::GetRoomProperties)> {
  static const MethodInfo* get() {
    static auto* room = &::il2cpp_utils::GetClassFromName("", "FmodResonanceAudioRoom")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FmodResonanceAudio*), "GetRoomProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{room});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FmodResonanceAudio::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::FMOD::DSP (*)()>(&GlobalNamespace::FmodResonanceAudio::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FmodResonanceAudio*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FmodResonanceAudio::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::FmodResonanceAudio::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FmodResonanceAudio*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
