// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LTDescr
#include "GlobalNamespace/LTDescr.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: TweenAction
#include "GlobalNamespace/TweenAction.hpp"
// Including type: LeanTweenType
#include "GlobalNamespace/LeanTweenType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Sprite
  class Sprite;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Rect
  struct Rect;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LTRect
  class LTRect;
  // Forward declaring type: LTBezierPath
  class LTBezierPath;
  // Forward declaring type: LTSpline
  class LTSpline;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
  // Forward declaring type: Image
  class Image;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LTDescrImpl
  class LTDescrImpl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LTDescrImpl);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LTDescrImpl*, "", "LTDescrImpl");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x158
  #pragma pack(push, 1)
  // Autogenerated type: LTDescrImpl
  // [TokenAttribute] Offset: FFFFFFFF
  class LTDescrImpl : public ::Il2CppObject/*, public ::GlobalNamespace::LTDescr*/ {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xAC29AC
    // private System.Boolean <toggle>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool toggle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xAC29BC
    // private System.Boolean <useEstimatedTime>k__BackingField
    // Size: 0x1
    // Offset: 0x11
    bool useEstimatedTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xAC29CC
    // private System.Boolean <useFrames>k__BackingField
    // Size: 0x1
    // Offset: 0x12
    bool useFrames;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xAC29DC
    // private System.Boolean <useManualTime>k__BackingField
    // Size: 0x1
    // Offset: 0x13
    bool useManualTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xAC29EC
    // private System.Boolean <hasInitiliazed>k__BackingField
    // Size: 0x1
    // Offset: 0x14
    bool hasInitiliazed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xAC29FC
    // private System.Boolean <hasPhysics>k__BackingField
    // Size: 0x1
    // Offset: 0x15
    bool hasPhysics;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xAC2A0C
    // private System.Boolean <onCompleteOnRepeat>k__BackingField
    // Size: 0x1
    // Offset: 0x16
    bool onCompleteOnRepeat;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xAC2A1C
    // private System.Boolean <onCompleteOnStart>k__BackingField
    // Size: 0x1
    // Offset: 0x17
    bool onCompleteOnStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xAC2A2C
    // private System.Single <passed>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    float passed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAC2A3C
    // private System.Single <delay>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    float delay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAC2A4C
    // private System.Single <time>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    float time;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAC2A5C
    // private System.Single <lastVal>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    float lastVal;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.UInt32 _id
    // Size: 0x4
    // Offset: 0x28
    uint id;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAC2A6C
    // private System.Int32 <loopCount>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    int loopCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAC2A7C
    // private System.UInt32 <counter>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    uint counter;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAC2A8C
    // private System.Single <direction>k__BackingField
    // Size: 0x4
    // Offset: 0x34
    float direction;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAC2A9C
    // private System.Single <directionLast>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    float directionLast;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAC2AAC
    // private System.Single <overshoot>k__BackingField
    // Size: 0x4
    // Offset: 0x3C
    float overshoot;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAC2ABC
    // private System.Single <period>k__BackingField
    // Size: 0x4
    // Offset: 0x40
    float period;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAC2ACC
    // private System.Boolean <destroyOnComplete>k__BackingField
    // Size: 0x1
    // Offset: 0x44
    bool destroyOnComplete;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: destroyOnComplete and: trans
    char __padding19[0x3] = {};
    // [CompilerGeneratedAttribute] Offset: 0xAC2ADC
    // private UnityEngine.Transform <trans>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* trans;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2AEC
    // private UnityEngine.Transform <toTrans>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Transform* toTrans;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2AFC
    // private LTRect <ltRect>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::LTRect* ltRect;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LTRect*) == 0x8);
    // UnityEngine.Vector3 fromInternal
    // Size: 0xC
    // Offset: 0x60
    ::UnityEngine::Vector3 fromInternal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Vector3 toInternal
    // Size: 0xC
    // Offset: 0x6C
    ::UnityEngine::Vector3 toInternal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // UnityEngine.Vector3 diffInternal
    // Size: 0xC
    // Offset: 0x78
    ::UnityEngine::Vector3 diffInternal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [CompilerGeneratedAttribute] Offset: 0xAC2B0C
    // private UnityEngine.Vector3 <point>k__BackingField
    // Size: 0xC
    // Offset: 0x84
    ::UnityEngine::Vector3 point;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [CompilerGeneratedAttribute] Offset: 0xAC2B1C
    // private UnityEngine.Vector3 <axis>k__BackingField
    // Size: 0xC
    // Offset: 0x90
    ::UnityEngine::Vector3 axis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [CompilerGeneratedAttribute] Offset: 0xAC2B2C
    // private UnityEngine.Quaternion <origRotation>k__BackingField
    // Size: 0x10
    // Offset: 0x9C
    ::UnityEngine::Quaternion origRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // Padding between fields: origRotation and: path
    char __padding28[0x4] = {};
    // [CompilerGeneratedAttribute] Offset: 0xAC2B3C
    // private LTBezierPath <path>k__BackingField
    // Size: 0x8
    // Offset: 0xB0
    ::GlobalNamespace::LTBezierPath* path;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LTBezierPath*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2B4C
    // private LTSpline <spline>k__BackingField
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::LTSpline* spline;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LTSpline*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2B5C
    // private TweenAction <type>k__BackingField
    // Size: 0x4
    // Offset: 0xC0
    ::GlobalNamespace::TweenAction type;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TweenAction) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAC2B6C
    // private LeanTweenType <tweenType>k__BackingField
    // Size: 0x4
    // Offset: 0xC4
    ::GlobalNamespace::LeanTweenType tweenType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LeanTweenType) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAC2B7C
    // private UnityEngine.AnimationCurve <animationCurve>k__BackingField
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::AnimationCurve* animationCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2B8C
    // private LeanTweenType <loopType>k__BackingField
    // Size: 0x4
    // Offset: 0xD0
    ::GlobalNamespace::LeanTweenType loopType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LeanTweenType) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAC2B9C
    // private System.Boolean <hasUpdateCallback>k__BackingField
    // Size: 0x1
    // Offset: 0xD4
    bool hasUpdateCallback;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasUpdateCallback and: onUpdateFloat
    char __padding35[0x3] = {};
    // [CompilerGeneratedAttribute] Offset: 0xAC2BAC
    // private System.Action`1<System.Single> <onUpdateFloat>k__BackingField
    // Size: 0x8
    // Offset: 0xD8
    ::System::Action_1<float>* onUpdateFloat;
    // Field size check
    static_assert(sizeof(::System::Action_1<float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2BBC
    // private System.Action`2<System.Single,System.Single> <onUpdateFloatRatio>k__BackingField
    // Size: 0x8
    // Offset: 0xE0
    ::System::Action_2<float, float>* onUpdateFloatRatio;
    // Field size check
    static_assert(sizeof(::System::Action_2<float, float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2BCC
    // private System.Action`2<System.Single,System.Object> <onUpdateFloatObject>k__BackingField
    // Size: 0x8
    // Offset: 0xE8
    ::System::Action_2<float, ::Il2CppObject*>* onUpdateFloatObject;
    // Field size check
    static_assert(sizeof(::System::Action_2<float, ::Il2CppObject*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2BDC
    // private System.Action`1<UnityEngine.Vector2> <onUpdateVector2>k__BackingField
    // Size: 0x8
    // Offset: 0xF0
    ::System::Action_1<::UnityEngine::Vector2>* onUpdateVector2;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Vector2>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2BEC
    // private System.Action`1<UnityEngine.Vector3> <onUpdateVector3>k__BackingField
    // Size: 0x8
    // Offset: 0xF8
    ::System::Action_1<::UnityEngine::Vector3>* onUpdateVector3;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Vector3>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2BFC
    // private System.Action`2<UnityEngine.Vector3,System.Object> <onUpdateVector3Object>k__BackingField
    // Size: 0x8
    // Offset: 0x100
    ::System::Action_2<::UnityEngine::Vector3, ::Il2CppObject*>* onUpdateVector3Object;
    // Field size check
    static_assert(sizeof(::System::Action_2<::UnityEngine::Vector3, ::Il2CppObject*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2C0C
    // private System.Action`1<UnityEngine.Color> <onUpdateColor>k__BackingField
    // Size: 0x8
    // Offset: 0x108
    ::System::Action_1<::UnityEngine::Color>* onUpdateColor;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Color>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2C1C
    // private System.Action <onComplete>k__BackingField
    // Size: 0x8
    // Offset: 0x110
    ::System::Action* onComplete;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2C2C
    // private System.Action`1<System.Object> <onCompleteObject>k__BackingField
    // Size: 0x8
    // Offset: 0x118
    ::System::Action_1<::Il2CppObject*>* onCompleteObject;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Il2CppObject*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2C3C
    // private System.Object <onCompleteParam>k__BackingField
    // Size: 0x8
    // Offset: 0x120
    ::Il2CppObject* onCompleteParam;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2C4C
    // private System.Object <onUpdateParam>k__BackingField
    // Size: 0x8
    // Offset: 0x128
    ::Il2CppObject* onUpdateParam;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2C5C
    // private System.Action <onStart>k__BackingField
    // Size: 0x8
    // Offset: 0x130
    ::System::Action* onStart;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // public UnityEngine.RectTransform rectTransform
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::RectTransform* rectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // public UnityEngine.UI.Text uiText
    // Size: 0x8
    // Offset: 0x140
    ::UnityEngine::UI::Text* uiText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Image uiImage
    // Size: 0x8
    // Offset: 0x148
    ::UnityEngine::UI::Image* uiImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.Sprite[] sprites
    // Size: 0x8
    // Offset: 0x150
    ::ArrayW<::UnityEngine::Sprite*> sprites;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Sprite*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::LTDescr
    operator ::GlobalNamespace::LTDescr() noexcept {
      return *reinterpret_cast<::GlobalNamespace::LTDescr*>(this);
    }
    // Get static field: static private System.UInt32 global_counter
    static uint _get_global_counter();
    // Set static field: static private System.UInt32 global_counter
    static void _set_global_counter(uint value);
    // Get instance field reference: private System.Boolean <toggle>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$toggle$k__BackingField();
    // Get instance field reference: private System.Boolean <useEstimatedTime>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$useEstimatedTime$k__BackingField();
    // Get instance field reference: private System.Boolean <useFrames>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$useFrames$k__BackingField();
    // Get instance field reference: private System.Boolean <useManualTime>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$useManualTime$k__BackingField();
    // Get instance field reference: private System.Boolean <hasInitiliazed>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$hasInitiliazed$k__BackingField();
    // Get instance field reference: private System.Boolean <hasPhysics>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$hasPhysics$k__BackingField();
    // Get instance field reference: private System.Boolean <onCompleteOnRepeat>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$onCompleteOnRepeat$k__BackingField();
    // Get instance field reference: private System.Boolean <onCompleteOnStart>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$onCompleteOnStart$k__BackingField();
    // Get instance field reference: private System.Single <passed>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$passed$k__BackingField();
    // Get instance field reference: private System.Single <delay>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$delay$k__BackingField();
    // Get instance field reference: private System.Single <time>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$time$k__BackingField();
    // Get instance field reference: private System.Single <lastVal>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$lastVal$k__BackingField();
    // Get instance field reference: private System.UInt32 _id
    [[deprecated("Use field access instead!")]] uint& dyn__id();
    // Get instance field reference: private System.Int32 <loopCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$loopCount$k__BackingField();
    // Get instance field reference: private System.UInt32 <counter>k__BackingField
    [[deprecated("Use field access instead!")]] uint& dyn_$counter$k__BackingField();
    // Get instance field reference: private System.Single <direction>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$direction$k__BackingField();
    // Get instance field reference: private System.Single <directionLast>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$directionLast$k__BackingField();
    // Get instance field reference: private System.Single <overshoot>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$overshoot$k__BackingField();
    // Get instance field reference: private System.Single <period>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$period$k__BackingField();
    // Get instance field reference: private System.Boolean <destroyOnComplete>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$destroyOnComplete$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <trans>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$trans$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform <toTrans>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$toTrans$k__BackingField();
    // Get instance field reference: private LTRect <ltRect>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LTRect*& dyn_$ltRect$k__BackingField();
    // Get instance field reference: UnityEngine.Vector3 fromInternal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_fromInternal();
    // Get instance field reference: UnityEngine.Vector3 toInternal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_toInternal();
    // Get instance field reference: UnityEngine.Vector3 diffInternal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_diffInternal();
    // Get instance field reference: private UnityEngine.Vector3 <point>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$point$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <axis>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$axis$k__BackingField();
    // Get instance field reference: private UnityEngine.Quaternion <origRotation>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_$origRotation$k__BackingField();
    // Get instance field reference: private LTBezierPath <path>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LTBezierPath*& dyn_$path$k__BackingField();
    // Get instance field reference: private LTSpline <spline>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LTSpline*& dyn_$spline$k__BackingField();
    // Get instance field reference: private TweenAction <type>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TweenAction& dyn_$type$k__BackingField();
    // Get instance field reference: private LeanTweenType <tweenType>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LeanTweenType& dyn_$tweenType$k__BackingField();
    // Get instance field reference: private UnityEngine.AnimationCurve <animationCurve>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_$animationCurve$k__BackingField();
    // Get instance field reference: private LeanTweenType <loopType>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LeanTweenType& dyn_$loopType$k__BackingField();
    // Get instance field reference: private System.Boolean <hasUpdateCallback>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$hasUpdateCallback$k__BackingField();
    // Get instance field reference: private System.Action`1<System.Single> <onUpdateFloat>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_1<float>*& dyn_$onUpdateFloat$k__BackingField();
    // Get instance field reference: private System.Action`2<System.Single,System.Single> <onUpdateFloatRatio>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_2<float, float>*& dyn_$onUpdateFloatRatio$k__BackingField();
    // Get instance field reference: private System.Action`2<System.Single,System.Object> <onUpdateFloatObject>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_2<float, ::Il2CppObject*>*& dyn_$onUpdateFloatObject$k__BackingField();
    // Get instance field reference: private System.Action`1<UnityEngine.Vector2> <onUpdateVector2>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Vector2>*& dyn_$onUpdateVector2$k__BackingField();
    // Get instance field reference: private System.Action`1<UnityEngine.Vector3> <onUpdateVector3>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Vector3>*& dyn_$onUpdateVector3$k__BackingField();
    // Get instance field reference: private System.Action`2<UnityEngine.Vector3,System.Object> <onUpdateVector3Object>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_2<::UnityEngine::Vector3, ::Il2CppObject*>*& dyn_$onUpdateVector3Object$k__BackingField();
    // Get instance field reference: private System.Action`1<UnityEngine.Color> <onUpdateColor>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Color>*& dyn_$onUpdateColor$k__BackingField();
    // Get instance field reference: private System.Action <onComplete>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_$onComplete$k__BackingField();
    // Get instance field reference: private System.Action`1<System.Object> <onCompleteObject>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Il2CppObject*>*& dyn_$onCompleteObject$k__BackingField();
    // Get instance field reference: private System.Object <onCompleteParam>k__BackingField
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$onCompleteParam$k__BackingField();
    // Get instance field reference: private System.Object <onUpdateParam>k__BackingField
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$onUpdateParam$k__BackingField();
    // Get instance field reference: private System.Action <onStart>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_$onStart$k__BackingField();
    // Get instance field reference: public UnityEngine.RectTransform rectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_rectTransform();
    // Get instance field reference: public UnityEngine.UI.Text uiText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_uiText();
    // Get instance field reference: public UnityEngine.UI.Image uiImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_uiImage();
    // Get instance field reference: public UnityEngine.Sprite[] sprites
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Sprite*>& dyn_sprites();
    // public System.Boolean get_toggle()
    // Offset: 0x1AB86EC
    bool get_toggle();
    // public System.Void set_toggle(System.Boolean value)
    // Offset: 0x1AB86F4
    void set_toggle(bool value);
    // public System.Boolean get_useEstimatedTime()
    // Offset: 0x1AB8700
    bool get_useEstimatedTime();
    // public System.Void set_useEstimatedTime(System.Boolean value)
    // Offset: 0x1AB8708
    void set_useEstimatedTime(bool value);
    // public System.Boolean get_useFrames()
    // Offset: 0x1AB8714
    bool get_useFrames();
    // public System.Void set_useFrames(System.Boolean value)
    // Offset: 0x1AB871C
    void set_useFrames(bool value);
    // public System.Boolean get_useManualTime()
    // Offset: 0x1AB8728
    bool get_useManualTime();
    // public System.Void set_useManualTime(System.Boolean value)
    // Offset: 0x1AB8730
    void set_useManualTime(bool value);
    // public System.Boolean get_hasInitiliazed()
    // Offset: 0x1AB873C
    bool get_hasInitiliazed();
    // public System.Void set_hasInitiliazed(System.Boolean value)
    // Offset: 0x1AB8744
    void set_hasInitiliazed(bool value);
    // public System.Boolean get_hasPhysics()
    // Offset: 0x1AB8750
    bool get_hasPhysics();
    // public System.Void set_hasPhysics(System.Boolean value)
    // Offset: 0x1AB8758
    void set_hasPhysics(bool value);
    // public System.Boolean get_onCompleteOnRepeat()
    // Offset: 0x1AB8764
    bool get_onCompleteOnRepeat();
    // public System.Void set_onCompleteOnRepeat(System.Boolean value)
    // Offset: 0x1AB876C
    void set_onCompleteOnRepeat(bool value);
    // public System.Boolean get_onCompleteOnStart()
    // Offset: 0x1AB8778
    bool get_onCompleteOnStart();
    // public System.Void set_onCompleteOnStart(System.Boolean value)
    // Offset: 0x1AB8780
    void set_onCompleteOnStart(bool value);
    // public System.Single get_passed()
    // Offset: 0x1AB878C
    float get_passed();
    // public System.Void set_passed(System.Single value)
    // Offset: 0x1AB8794
    void set_passed(float value);
    // public System.Single get_delay()
    // Offset: 0x1AB879C
    float get_delay();
    // public System.Void set_delay(System.Single value)
    // Offset: 0x1AB87A4
    void set_delay(float value);
    // public System.Single get_time()
    // Offset: 0x1AB87AC
    float get_time();
    // public System.Void set_time(System.Single value)
    // Offset: 0x1AB87B4
    void set_time(float value);
    // public System.Single get_lastVal()
    // Offset: 0x1AB87BC
    float get_lastVal();
    // public System.Void set_lastVal(System.Single value)
    // Offset: 0x1AB87C4
    void set_lastVal(float value);
    // public System.Int32 get_loopCount()
    // Offset: 0x1AB87CC
    int get_loopCount();
    // public System.Void set_loopCount(System.Int32 value)
    // Offset: 0x1AB87D4
    void set_loopCount(int value);
    // public System.UInt32 get_counter()
    // Offset: 0x1AB87DC
    uint get_counter();
    // public System.Void set_counter(System.UInt32 value)
    // Offset: 0x1AB87E4
    void set_counter(uint value);
    // public System.Single get_direction()
    // Offset: 0x1AB87EC
    float get_direction();
    // public System.Void set_direction(System.Single value)
    // Offset: 0x1AB87F4
    void set_direction(float value);
    // public System.Single get_directionLast()
    // Offset: 0x1AB87FC
    float get_directionLast();
    // public System.Void set_directionLast(System.Single value)
    // Offset: 0x1AB8804
    void set_directionLast(float value);
    // public System.Single get_overshoot()
    // Offset: 0x1AB880C
    float get_overshoot();
    // public System.Void set_overshoot(System.Single value)
    // Offset: 0x1AB8814
    void set_overshoot(float value);
    // public System.Single get_period()
    // Offset: 0x1AB881C
    float get_period();
    // public System.Void set_period(System.Single value)
    // Offset: 0x1AB8824
    void set_period(float value);
    // public System.Boolean get_destroyOnComplete()
    // Offset: 0x1AB882C
    bool get_destroyOnComplete();
    // public System.Void set_destroyOnComplete(System.Boolean value)
    // Offset: 0x1AB8834
    void set_destroyOnComplete(bool value);
    // public UnityEngine.Transform get_trans()
    // Offset: 0x1AB8840
    ::UnityEngine::Transform* get_trans();
    // public System.Void set_trans(UnityEngine.Transform value)
    // Offset: 0x1AB8848
    void set_trans(::UnityEngine::Transform* value);
    // public UnityEngine.Transform get_toTrans()
    // Offset: 0x1AB8850
    ::UnityEngine::Transform* get_toTrans();
    // public System.Void set_toTrans(UnityEngine.Transform value)
    // Offset: 0x1AB8858
    void set_toTrans(::UnityEngine::Transform* value);
    // public LTRect get_ltRect()
    // Offset: 0x1AB8860
    ::GlobalNamespace::LTRect* get_ltRect();
    // public System.Void set_ltRect(LTRect value)
    // Offset: 0x1AB8868
    void set_ltRect(::GlobalNamespace::LTRect* value);
    // public UnityEngine.Vector3 get_from()
    // Offset: 0x1AB8870
    ::UnityEngine::Vector3 get_from();
    // public System.Void set_from(UnityEngine.Vector3 value)
    // Offset: 0x1AB887C
    void set_from(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_to()
    // Offset: 0x1AB8888
    ::UnityEngine::Vector3 get_to();
    // public System.Void set_to(UnityEngine.Vector3 value)
    // Offset: 0x1AB8894
    void set_to(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_diff()
    // Offset: 0x1AB88A0
    ::UnityEngine::Vector3 get_diff();
    // public System.Void set_diff(UnityEngine.Vector3 value)
    // Offset: 0x1AB88AC
    void set_diff(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_point()
    // Offset: 0x1AB88B8
    ::UnityEngine::Vector3 get_point();
    // public System.Void set_point(UnityEngine.Vector3 value)
    // Offset: 0x1AB88C4
    void set_point(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_axis()
    // Offset: 0x1AB88D0
    ::UnityEngine::Vector3 get_axis();
    // public System.Void set_axis(UnityEngine.Vector3 value)
    // Offset: 0x1AB88DC
    void set_axis(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_origRotation()
    // Offset: 0x1AB88E8
    ::UnityEngine::Quaternion get_origRotation();
    // public System.Void set_origRotation(UnityEngine.Quaternion value)
    // Offset: 0x1AB88F4
    void set_origRotation(::UnityEngine::Quaternion value);
    // public LTBezierPath get_path()
    // Offset: 0x1AB8900
    ::GlobalNamespace::LTBezierPath* get_path();
    // public System.Void set_path(LTBezierPath value)
    // Offset: 0x1AB8908
    void set_path(::GlobalNamespace::LTBezierPath* value);
    // public LTSpline get_spline()
    // Offset: 0x1AB8910
    ::GlobalNamespace::LTSpline* get_spline();
    // public System.Void set_spline(LTSpline value)
    // Offset: 0x1AB8918
    void set_spline(::GlobalNamespace::LTSpline* value);
    // public TweenAction get_type()
    // Offset: 0x1AB8920
    ::GlobalNamespace::TweenAction get_type();
    // public System.Void set_type(TweenAction value)
    // Offset: 0x1AB8928
    void set_type(::GlobalNamespace::TweenAction value);
    // public LeanTweenType get_tweenType()
    // Offset: 0x1AB8930
    ::GlobalNamespace::LeanTweenType get_tweenType();
    // public System.Void set_tweenType(LeanTweenType value)
    // Offset: 0x1AB8938
    void set_tweenType(::GlobalNamespace::LeanTweenType value);
    // public UnityEngine.AnimationCurve get_animationCurve()
    // Offset: 0x1AB8940
    ::UnityEngine::AnimationCurve* get_animationCurve();
    // public System.Void set_animationCurve(UnityEngine.AnimationCurve value)
    // Offset: 0x1AB8948
    void set_animationCurve(::UnityEngine::AnimationCurve* value);
    // public LeanTweenType get_loopType()
    // Offset: 0x1AB8950
    ::GlobalNamespace::LeanTweenType get_loopType();
    // public System.Void set_loopType(LeanTweenType value)
    // Offset: 0x1AB8958
    void set_loopType(::GlobalNamespace::LeanTweenType value);
    // public System.Boolean get_hasUpdateCallback()
    // Offset: 0x1AB8960
    bool get_hasUpdateCallback();
    // public System.Void set_hasUpdateCallback(System.Boolean value)
    // Offset: 0x1AB8968
    void set_hasUpdateCallback(bool value);
    // public System.Action`1<System.Single> get_onUpdateFloat()
    // Offset: 0x1AB8974
    ::System::Action_1<float>* get_onUpdateFloat();
    // public System.Void set_onUpdateFloat(System.Action`1<System.Single> value)
    // Offset: 0x1AB897C
    void set_onUpdateFloat(::System::Action_1<float>* value);
    // public System.Action`2<System.Single,System.Single> get_onUpdateFloatRatio()
    // Offset: 0x1AB8984
    ::System::Action_2<float, float>* get_onUpdateFloatRatio();
    // public System.Void set_onUpdateFloatRatio(System.Action`2<System.Single,System.Single> value)
    // Offset: 0x1AB898C
    void set_onUpdateFloatRatio(::System::Action_2<float, float>* value);
    // public System.Action`2<System.Single,System.Object> get_onUpdateFloatObject()
    // Offset: 0x1AB8994
    ::System::Action_2<float, ::Il2CppObject*>* get_onUpdateFloatObject();
    // public System.Void set_onUpdateFloatObject(System.Action`2<System.Single,System.Object> value)
    // Offset: 0x1AB899C
    void set_onUpdateFloatObject(::System::Action_2<float, ::Il2CppObject*>* value);
    // public System.Action`1<UnityEngine.Vector2> get_onUpdateVector2()
    // Offset: 0x1AB89A4
    ::System::Action_1<::UnityEngine::Vector2>* get_onUpdateVector2();
    // public System.Void set_onUpdateVector2(System.Action`1<UnityEngine.Vector2> value)
    // Offset: 0x1AB89AC
    void set_onUpdateVector2(::System::Action_1<::UnityEngine::Vector2>* value);
    // public System.Action`1<UnityEngine.Vector3> get_onUpdateVector3()
    // Offset: 0x1AB89B4
    ::System::Action_1<::UnityEngine::Vector3>* get_onUpdateVector3();
    // public System.Void set_onUpdateVector3(System.Action`1<UnityEngine.Vector3> value)
    // Offset: 0x1AB89BC
    void set_onUpdateVector3(::System::Action_1<::UnityEngine::Vector3>* value);
    // public System.Action`2<UnityEngine.Vector3,System.Object> get_onUpdateVector3Object()
    // Offset: 0x1AB89C4
    ::System::Action_2<::UnityEngine::Vector3, ::Il2CppObject*>* get_onUpdateVector3Object();
    // public System.Void set_onUpdateVector3Object(System.Action`2<UnityEngine.Vector3,System.Object> value)
    // Offset: 0x1AB89CC
    void set_onUpdateVector3Object(::System::Action_2<::UnityEngine::Vector3, ::Il2CppObject*>* value);
    // public System.Action`1<UnityEngine.Color> get_onUpdateColor()
    // Offset: 0x1AB89D4
    ::System::Action_1<::UnityEngine::Color>* get_onUpdateColor();
    // public System.Void set_onUpdateColor(System.Action`1<UnityEngine.Color> value)
    // Offset: 0x1AB89DC
    void set_onUpdateColor(::System::Action_1<::UnityEngine::Color>* value);
    // public System.Action get_onComplete()
    // Offset: 0x1AB89E4
    ::System::Action* get_onComplete();
    // public System.Void set_onComplete(System.Action value)
    // Offset: 0x1AB89EC
    void set_onComplete(::System::Action* value);
    // public System.Action`1<System.Object> get_onCompleteObject()
    // Offset: 0x1AB89F4
    ::System::Action_1<::Il2CppObject*>* get_onCompleteObject();
    // public System.Void set_onCompleteObject(System.Action`1<System.Object> value)
    // Offset: 0x1AB89FC
    void set_onCompleteObject(::System::Action_1<::Il2CppObject*>* value);
    // public System.Object get_onCompleteParam()
    // Offset: 0x1AB8A04
    ::Il2CppObject* get_onCompleteParam();
    // public System.Void set_onCompleteParam(System.Object value)
    // Offset: 0x1AB8A0C
    void set_onCompleteParam(::Il2CppObject* value);
    // public System.Object get_onUpdateParam()
    // Offset: 0x1AB8A14
    ::Il2CppObject* get_onUpdateParam();
    // public System.Void set_onUpdateParam(System.Object value)
    // Offset: 0x1AB8A1C
    void set_onUpdateParam(::Il2CppObject* value);
    // public System.Action get_onStart()
    // Offset: 0x1AB8A24
    ::System::Action* get_onStart();
    // public System.Void set_onStart(System.Action value)
    // Offset: 0x1AB8A2C
    void set_onStart(::System::Action* value);
    // public System.Void .ctor()
    // Offset: 0x1AB9448
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LTDescrImpl* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LTDescrImpl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LTDescrImpl*, creationType>()));
    }
    // public LTDescr cancel(UnityEngine.GameObject gameObject)
    // Offset: 0x1AB9450
    ::GlobalNamespace::LTDescr* cancel(::UnityEngine::GameObject* gameObject);
    // public System.Int32 get_uniqueId()
    // Offset: 0x1AB9530
    int get_uniqueId();
    // public System.Int32 get_id()
    // Offset: 0x1AB9438
    int get_id();
    // public System.Void reset()
    // Offset: 0x1AB9644
    void reset();
    // public System.Void cleanup()
    // Offset: 0x1AB977C
    void cleanup();
    // public System.Void init()
    // Offset: 0x1AB97B4
    void init();
    // public LTDescr setFromColor(UnityEngine.Color col)
    // Offset: 0x1ABB634
    ::GlobalNamespace::LTDescr* setFromColor(::UnityEngine::Color col);
    // public LTDescr pause()
    // Offset: 0x1ABB708
    ::GlobalNamespace::LTDescr* pause();
    // public LTDescr resume()
    // Offset: 0x1ABB720
    ::GlobalNamespace::LTDescr* resume();
    // public LTDescr setAxis(UnityEngine.Vector3 axis)
    // Offset: 0x1ABB72C
    ::GlobalNamespace::LTDescr* setAxis(::UnityEngine::Vector3 axis);
    // public LTDescr setDelay(System.Single delay)
    // Offset: 0x1ABB738
    ::GlobalNamespace::LTDescr* setDelay(float delay);
    // public LTDescr setEase(LeanTweenType easeType)
    // Offset: 0x1ABB740
    ::GlobalNamespace::LTDescr* setEase(::GlobalNamespace::LeanTweenType easeType);
    // public LTDescr setOvershoot(System.Single overshoot)
    // Offset: 0x1ABB748
    ::GlobalNamespace::LTDescr* setOvershoot(float overshoot);
    // public LTDescr setPeriod(System.Single period)
    // Offset: 0x1ABB750
    ::GlobalNamespace::LTDescr* setPeriod(float period);
    // public LTDescr setEase(UnityEngine.AnimationCurve easeCurve)
    // Offset: 0x1ABB758
    ::GlobalNamespace::LTDescr* setEase(::UnityEngine::AnimationCurve* easeCurve);
    // public LTDescr setTo(UnityEngine.Vector3 to)
    // Offset: 0x1ABB760
    ::GlobalNamespace::LTDescr* setTo(::UnityEngine::Vector3 to);
    // public LTDescr setTo(UnityEngine.Transform to)
    // Offset: 0x1ABB828
    ::GlobalNamespace::LTDescr* setTo(::UnityEngine::Transform* to);
    // public LTDescr setFrom(UnityEngine.Vector3 from)
    // Offset: 0x1ABB830
    ::GlobalNamespace::LTDescr* setFrom(::UnityEngine::Vector3 from);
    // public LTDescr setFrom(System.Single from)
    // Offset: 0x1ABB92C
    ::GlobalNamespace::LTDescr* setFrom(float from);
    // public LTDescr setDiff(UnityEngine.Vector3 diff)
    // Offset: 0x1ABB97C
    ::GlobalNamespace::LTDescr* setDiff(::UnityEngine::Vector3 diff);
    // public LTDescr setHasInitialized(System.Boolean has)
    // Offset: 0x1ABB988
    ::GlobalNamespace::LTDescr* setHasInitialized(bool has);
    // public LTDescr setId(System.UInt32 id)
    // Offset: 0x1ABB994
    ::GlobalNamespace::LTDescr* setId(uint id);
    // public LTDescr setTime(System.Single time)
    // Offset: 0x1ABBA18
    ::GlobalNamespace::LTDescr* setTime(float time);
    // public LTDescr setRepeat(System.Int32 repeat)
    // Offset: 0x1ABBA34
    ::GlobalNamespace::LTDescr* setRepeat(int repeat);
    // public LTDescr setLoopType(LeanTweenType loopType)
    // Offset: 0x1ABBA88
    ::GlobalNamespace::LTDescr* setLoopType(::GlobalNamespace::LeanTweenType loopType);
    // public LTDescr setUseEstimatedTime(System.Boolean useEstimatedTime)
    // Offset: 0x1ABBA90
    ::GlobalNamespace::LTDescr* setUseEstimatedTime(bool useEstimatedTime);
    // public LTDescr setIgnoreTimeScale(System.Boolean useUnScaledTime)
    // Offset: 0x1ABBA9C
    ::GlobalNamespace::LTDescr* setIgnoreTimeScale(bool useUnScaledTime);
    // public LTDescr setUseFrames(System.Boolean useFrames)
    // Offset: 0x1ABBAA8
    ::GlobalNamespace::LTDescr* setUseFrames(bool useFrames);
    // public LTDescr setUseManualTime(System.Boolean useManualTime)
    // Offset: 0x1ABBAB4
    ::GlobalNamespace::LTDescr* setUseManualTime(bool useManualTime);
    // public LTDescr setLoopCount(System.Int32 loopCount)
    // Offset: 0x1ABBAC0
    ::GlobalNamespace::LTDescr* setLoopCount(int loopCount);
    // public LTDescr setLoopOnce()
    // Offset: 0x1ABBAC8
    ::GlobalNamespace::LTDescr* setLoopOnce();
    // public LTDescr setLoopClamp()
    // Offset: 0x1ABBAD4
    ::GlobalNamespace::LTDescr* setLoopClamp();
    // public LTDescr setLoopClamp(System.Int32 loops)
    // Offset: 0x1ABBAF4
    ::GlobalNamespace::LTDescr* setLoopClamp(int loops);
    // public LTDescr setLoopPingPong()
    // Offset: 0x1ABBAFC
    ::GlobalNamespace::LTDescr* setLoopPingPong();
    // public LTDescr setLoopPingPong(System.Int32 loops)
    // Offset: 0x1ABBB1C
    ::GlobalNamespace::LTDescr* setLoopPingPong(int loops);
    // public LTDescr setOnComplete(System.Action onComplete)
    // Offset: 0x1ABBB5C
    ::GlobalNamespace::LTDescr* setOnComplete(::System::Action* onComplete);
    // public LTDescr setOnComplete(System.Action`1<System.Object> onComplete)
    // Offset: 0x1ABBB64
    ::GlobalNamespace::LTDescr* setOnComplete(::System::Action_1<::Il2CppObject*>* onComplete);
    // public LTDescr setOnComplete(System.Action`1<System.Object> onComplete, System.Object onCompleteParam)
    // Offset: 0x1ABBB6C
    ::GlobalNamespace::LTDescr* setOnComplete(::System::Action_1<::Il2CppObject*>* onComplete, ::Il2CppObject* onCompleteParam);
    // public LTDescr setOnCompleteParam(System.Object onCompleteParam)
    // Offset: 0x1ABBB7C
    ::GlobalNamespace::LTDescr* setOnCompleteParam(::Il2CppObject* onCompleteParam);
    // public LTDescr setOnUpdate(System.Action`1<System.Single> onUpdate)
    // Offset: 0x1ABBB84
    ::GlobalNamespace::LTDescr* setOnUpdate(::System::Action_1<float>* onUpdate);
    // public LTDescr setOnUpdateRatio(System.Action`2<System.Single,System.Single> onUpdate)
    // Offset: 0x1ABBB94
    ::GlobalNamespace::LTDescr* setOnUpdateRatio(::System::Action_2<float, float>* onUpdate);
    // public LTDescr setOnUpdateObject(System.Action`2<System.Single,System.Object> onUpdate)
    // Offset: 0x1ABBBA4
    ::GlobalNamespace::LTDescr* setOnUpdateObject(::System::Action_2<float, ::Il2CppObject*>* onUpdate);
    // public LTDescr setOnUpdateVector2(System.Action`1<UnityEngine.Vector2> onUpdate)
    // Offset: 0x1ABBBB4
    ::GlobalNamespace::LTDescr* setOnUpdateVector2(::System::Action_1<::UnityEngine::Vector2>* onUpdate);
    // public LTDescr setOnUpdateVector3(System.Action`1<UnityEngine.Vector3> onUpdate)
    // Offset: 0x1ABBBC4
    ::GlobalNamespace::LTDescr* setOnUpdateVector3(::System::Action_1<::UnityEngine::Vector3>* onUpdate);
    // public LTDescr setOnUpdateColor(System.Action`1<UnityEngine.Color> onUpdate)
    // Offset: 0x1ABBBD4
    ::GlobalNamespace::LTDescr* setOnUpdateColor(::System::Action_1<::UnityEngine::Color>* onUpdate);
    // public LTDescr setOnUpdate(System.Action`1<UnityEngine.Color> onUpdate)
    // Offset: 0x1ABBBE4
    ::GlobalNamespace::LTDescr* setOnUpdate(::System::Action_1<::UnityEngine::Color>* onUpdate);
    // public LTDescr setOnUpdate(System.Action`2<System.Single,System.Object> onUpdate, System.Object onUpdateParam)
    // Offset: 0x1ABBBF4
    ::GlobalNamespace::LTDescr* setOnUpdate(::System::Action_2<float, ::Il2CppObject*>* onUpdate, ::Il2CppObject* onUpdateParam);
    // public LTDescr setOnUpdate(System.Action`2<UnityEngine.Vector3,System.Object> onUpdate, System.Object onUpdateParam)
    // Offset: 0x1ABBC0C
    ::GlobalNamespace::LTDescr* setOnUpdate(::System::Action_2<::UnityEngine::Vector3, ::Il2CppObject*>* onUpdate, ::Il2CppObject* onUpdateParam);
    // public LTDescr setOnUpdate(System.Action`1<UnityEngine.Vector2> onUpdate, System.Object onUpdateParam)
    // Offset: 0x1ABBC24
    ::GlobalNamespace::LTDescr* setOnUpdate(::System::Action_1<::UnityEngine::Vector2>* onUpdate, ::Il2CppObject* onUpdateParam);
    // public LTDescr setOnUpdate(System.Action`1<UnityEngine.Vector3> onUpdate, System.Object onUpdateParam)
    // Offset: 0x1ABBC3C
    ::GlobalNamespace::LTDescr* setOnUpdate(::System::Action_1<::UnityEngine::Vector3>* onUpdate, ::Il2CppObject* onUpdateParam);
    // public LTDescr setOnUpdateParam(System.Object onUpdateParam)
    // Offset: 0x1ABBC54
    ::GlobalNamespace::LTDescr* setOnUpdateParam(::Il2CppObject* onUpdateParam);
    // public LTDescr setOrientToPath(System.Boolean doesOrient)
    // Offset: 0x1ABBC5C
    ::GlobalNamespace::LTDescr* setOrientToPath(bool doesOrient);
    // public LTDescr setOrientToPath2d(System.Boolean doesOrient2d)
    // Offset: 0x1ABBD14
    ::GlobalNamespace::LTDescr* setOrientToPath2d(bool doesOrient2d);
    // public LTDescr setRect(LTRect rect)
    // Offset: 0x1ABBD8C
    ::GlobalNamespace::LTDescr* setRect(::GlobalNamespace::LTRect* rect);
    // public LTDescr setRect(UnityEngine.Rect rect)
    // Offset: 0x1ABBD94
    ::GlobalNamespace::LTDescr* setRect(::UnityEngine::Rect rect);
    // public LTDescr setPath(LTBezierPath path)
    // Offset: 0x1ABBEE0
    ::GlobalNamespace::LTDescr* setPath(::GlobalNamespace::LTBezierPath* path);
    // public LTDescr setPoint(UnityEngine.Vector3 point)
    // Offset: 0x1ABBEE8
    ::GlobalNamespace::LTDescr* setPoint(::UnityEngine::Vector3 point);
    // public LTDescr setDestroyOnComplete(System.Boolean doesDestroy)
    // Offset: 0x1ABBEF4
    ::GlobalNamespace::LTDescr* setDestroyOnComplete(bool doesDestroy);
    // public LTDescr setAudio(System.Object audio)
    // Offset: 0x1ABBF00
    ::GlobalNamespace::LTDescr* setAudio(::Il2CppObject* audio);
    // public LTDescr setOnCompleteOnRepeat(System.Boolean isOn)
    // Offset: 0x1ABBA7C
    ::GlobalNamespace::LTDescr* setOnCompleteOnRepeat(bool isOn);
    // public LTDescr setOnCompleteOnStart(System.Boolean isOn)
    // Offset: 0x1ABBF08
    ::GlobalNamespace::LTDescr* setOnCompleteOnStart(bool isOn);
    // public LTDescr setRect(UnityEngine.RectTransform rect)
    // Offset: 0x1ABBF14
    ::GlobalNamespace::LTDescr* setRect(::UnityEngine::RectTransform* rect);
    // public LTDescr setSprites(UnityEngine.Sprite[] sprites)
    // Offset: 0x1ABBF1C
    ::GlobalNamespace::LTDescr* setSprites(::ArrayW<::UnityEngine::Sprite*> sprites);
    // public LTDescr setFrameRate(System.Single frameRate)
    // Offset: 0x1ABBF24
    ::GlobalNamespace::LTDescr* setFrameRate(float frameRate);
    // public LTDescr setOnStart(System.Action onStart)
    // Offset: 0x1ABBF70
    ::GlobalNamespace::LTDescr* setOnStart(::System::Action* onStart);
    // public LTDescr setDirection(System.Single direction)
    // Offset: 0x1ABBF78
    ::GlobalNamespace::LTDescr* setDirection(float direction);
    // static private System.Void .cctor()
    // Offset: 0x1ABC610
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0x1AB8A34
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // LTDescrImpl
  #pragma pack(pop)
  static check_size<sizeof(LTDescrImpl), 336 + sizeof(::ArrayW<::UnityEngine::Sprite*>)> __GlobalNamespace_LTDescrImplSizeCheck;
  static_assert(sizeof(LTDescrImpl) == 0x158);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_toggle
// Il2CppName: get_toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_toggle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_toggle
// Il2CppName: set_toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::set_toggle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_useEstimatedTime
// Il2CppName: get_useEstimatedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_useEstimatedTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_useEstimatedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_useEstimatedTime
// Il2CppName: set_useEstimatedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::set_useEstimatedTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_useEstimatedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_useFrames
// Il2CppName: get_useFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_useFrames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_useFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_useFrames
// Il2CppName: set_useFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::set_useFrames)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_useFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_useManualTime
// Il2CppName: get_useManualTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_useManualTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_useManualTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_useManualTime
// Il2CppName: set_useManualTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::set_useManualTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_useManualTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_hasInitiliazed
// Il2CppName: get_hasInitiliazed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_hasInitiliazed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_hasInitiliazed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_hasInitiliazed
// Il2CppName: set_hasInitiliazed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::set_hasInitiliazed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_hasInitiliazed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_hasPhysics
// Il2CppName: get_hasPhysics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_hasPhysics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_hasPhysics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_hasPhysics
// Il2CppName: set_hasPhysics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::set_hasPhysics)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_hasPhysics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_onCompleteOnRepeat
// Il2CppName: get_onCompleteOnRepeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_onCompleteOnRepeat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_onCompleteOnRepeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_onCompleteOnRepeat
// Il2CppName: set_onCompleteOnRepeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::set_onCompleteOnRepeat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_onCompleteOnRepeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_onCompleteOnStart
// Il2CppName: get_onCompleteOnStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_onCompleteOnStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_onCompleteOnStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_onCompleteOnStart
// Il2CppName: set_onCompleteOnStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::set_onCompleteOnStart)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_onCompleteOnStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_passed
// Il2CppName: get_passed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_passed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_passed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_passed
// Il2CppName: set_passed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(float)>(&GlobalNamespace::LTDescrImpl::set_passed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_passed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_delay
// Il2CppName: get_delay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_delay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_delay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_delay
// Il2CppName: set_delay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(float)>(&GlobalNamespace::LTDescrImpl::set_delay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_delay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_time)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(float)>(&GlobalNamespace::LTDescrImpl::set_time)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_lastVal
// Il2CppName: get_lastVal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_lastVal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_lastVal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_lastVal
// Il2CppName: set_lastVal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(float)>(&GlobalNamespace::LTDescrImpl::set_lastVal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_lastVal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_loopCount
// Il2CppName: get_loopCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_loopCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_loopCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_loopCount
// Il2CppName: set_loopCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(int)>(&GlobalNamespace::LTDescrImpl::set_loopCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_loopCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_counter
// Il2CppName: get_counter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_counter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_counter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_counter
// Il2CppName: set_counter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(uint)>(&GlobalNamespace::LTDescrImpl::set_counter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_counter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_direction
// Il2CppName: get_direction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_direction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_direction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_direction
// Il2CppName: set_direction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(float)>(&GlobalNamespace::LTDescrImpl::set_direction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_direction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_directionLast
// Il2CppName: get_directionLast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_directionLast)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_directionLast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_directionLast
// Il2CppName: set_directionLast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(float)>(&GlobalNamespace::LTDescrImpl::set_directionLast)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_directionLast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_overshoot
// Il2CppName: get_overshoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_overshoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_overshoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_overshoot
// Il2CppName: set_overshoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(float)>(&GlobalNamespace::LTDescrImpl::set_overshoot)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_overshoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_period
// Il2CppName: get_period
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_period)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_period", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_period
// Il2CppName: set_period
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(float)>(&GlobalNamespace::LTDescrImpl::set_period)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_period", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_destroyOnComplete
// Il2CppName: get_destroyOnComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_destroyOnComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_destroyOnComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_destroyOnComplete
// Il2CppName: set_destroyOnComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::set_destroyOnComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_destroyOnComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_trans
// Il2CppName: get_trans
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_trans)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_trans", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_trans
// Il2CppName: set_trans
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Transform*)>(&GlobalNamespace::LTDescrImpl::set_trans)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_trans", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_toTrans
// Il2CppName: get_toTrans
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_toTrans)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_toTrans", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_toTrans
// Il2CppName: set_toTrans
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Transform*)>(&GlobalNamespace::LTDescrImpl::set_toTrans)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_toTrans", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_ltRect
// Il2CppName: get_ltRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTRect* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_ltRect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_ltRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_ltRect
// Il2CppName: set_ltRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::GlobalNamespace::LTRect*)>(&GlobalNamespace::LTDescrImpl::set_ltRect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LTRect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_ltRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_from
// Il2CppName: get_from
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_from)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_from", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_from
// Il2CppName: set_from
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Vector3)>(&GlobalNamespace::LTDescrImpl::set_from)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_from", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_to
// Il2CppName: get_to
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_to)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_to", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_to
// Il2CppName: set_to
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Vector3)>(&GlobalNamespace::LTDescrImpl::set_to)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_to", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_diff
// Il2CppName: get_diff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_diff)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_diff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_diff
// Il2CppName: set_diff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Vector3)>(&GlobalNamespace::LTDescrImpl::set_diff)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_diff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_point
// Il2CppName: get_point
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_point)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_point", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_point
// Il2CppName: set_point
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Vector3)>(&GlobalNamespace::LTDescrImpl::set_point)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_point", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_axis
// Il2CppName: get_axis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_axis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_axis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_axis
// Il2CppName: set_axis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Vector3)>(&GlobalNamespace::LTDescrImpl::set_axis)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_axis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_origRotation
// Il2CppName: get_origRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_origRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_origRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_origRotation
// Il2CppName: set_origRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Quaternion)>(&GlobalNamespace::LTDescrImpl::set_origRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_origRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_path
// Il2CppName: get_path
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTBezierPath* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_path)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_path", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_path
// Il2CppName: set_path
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::GlobalNamespace::LTBezierPath*)>(&GlobalNamespace::LTDescrImpl::set_path)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LTBezierPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_path", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_spline
// Il2CppName: get_spline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTSpline* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_spline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_spline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_spline
// Il2CppName: set_spline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::GlobalNamespace::LTSpline*)>(&GlobalNamespace::LTDescrImpl::set_spline)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LTSpline")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_spline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_type
// Il2CppName: get_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::TweenAction (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_type
// Il2CppName: set_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::GlobalNamespace::TweenAction)>(&GlobalNamespace::LTDescrImpl::set_type)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "TweenAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_tweenType
// Il2CppName: get_tweenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LeanTweenType (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_tweenType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_tweenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_tweenType
// Il2CppName: set_tweenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::GlobalNamespace::LeanTweenType)>(&GlobalNamespace::LTDescrImpl::set_tweenType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LeanTweenType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_tweenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_animationCurve
// Il2CppName: get_animationCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_animationCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_animationCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_animationCurve
// Il2CppName: set_animationCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::AnimationCurve*)>(&GlobalNamespace::LTDescrImpl::set_animationCurve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_animationCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_loopType
// Il2CppName: get_loopType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LeanTweenType (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_loopType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_loopType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_loopType
// Il2CppName: set_loopType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::GlobalNamespace::LeanTweenType)>(&GlobalNamespace::LTDescrImpl::set_loopType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LeanTweenType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_loopType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_hasUpdateCallback
// Il2CppName: get_hasUpdateCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_hasUpdateCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_hasUpdateCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_hasUpdateCallback
// Il2CppName: set_hasUpdateCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::set_hasUpdateCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_hasUpdateCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_onUpdateFloat
// Il2CppName: get_onUpdateFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<float>* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_onUpdateFloat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_onUpdateFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_onUpdateFloat
// Il2CppName: set_onUpdateFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::System::Action_1<float>*)>(&GlobalNamespace::LTDescrImpl::set_onUpdateFloat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_onUpdateFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_onUpdateFloatRatio
// Il2CppName: get_onUpdateFloatRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_2<float, float>* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_onUpdateFloatRatio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_onUpdateFloatRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_onUpdateFloatRatio
// Il2CppName: set_onUpdateFloatRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::System::Action_2<float, float>*)>(&GlobalNamespace::LTDescrImpl::set_onUpdateFloatRatio)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_onUpdateFloatRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_onUpdateFloatObject
// Il2CppName: get_onUpdateFloatObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_2<float, ::Il2CppObject*>* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_onUpdateFloatObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_onUpdateFloatObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_onUpdateFloatObject
// Il2CppName: set_onUpdateFloatObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::System::Action_2<float, ::Il2CppObject*>*)>(&GlobalNamespace::LTDescrImpl::set_onUpdateFloatObject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_onUpdateFloatObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_onUpdateVector2
// Il2CppName: get_onUpdateVector2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::UnityEngine::Vector2>* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_onUpdateVector2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_onUpdateVector2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_onUpdateVector2
// Il2CppName: set_onUpdateVector2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::System::Action_1<::UnityEngine::Vector2>*)>(&GlobalNamespace::LTDescrImpl::set_onUpdateVector2)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_onUpdateVector2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_onUpdateVector3
// Il2CppName: get_onUpdateVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::UnityEngine::Vector3>* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_onUpdateVector3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_onUpdateVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_onUpdateVector3
// Il2CppName: set_onUpdateVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::System::Action_1<::UnityEngine::Vector3>*)>(&GlobalNamespace::LTDescrImpl::set_onUpdateVector3)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_onUpdateVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_onUpdateVector3Object
// Il2CppName: get_onUpdateVector3Object
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_2<::UnityEngine::Vector3, ::Il2CppObject*>* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_onUpdateVector3Object)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_onUpdateVector3Object", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_onUpdateVector3Object
// Il2CppName: set_onUpdateVector3Object
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::System::Action_2<::UnityEngine::Vector3, ::Il2CppObject*>*)>(&GlobalNamespace::LTDescrImpl::set_onUpdateVector3Object)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_onUpdateVector3Object", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_onUpdateColor
// Il2CppName: get_onUpdateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::UnityEngine::Color>* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_onUpdateColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_onUpdateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_onUpdateColor
// Il2CppName: set_onUpdateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::System::Action_1<::UnityEngine::Color>*)>(&GlobalNamespace::LTDescrImpl::set_onUpdateColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_onUpdateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_onComplete
// Il2CppName: get_onComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_onComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_onComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_onComplete
// Il2CppName: set_onComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::System::Action*)>(&GlobalNamespace::LTDescrImpl::set_onComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_onComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_onCompleteObject
// Il2CppName: get_onCompleteObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::Il2CppObject*>* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_onCompleteObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_onCompleteObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_onCompleteObject
// Il2CppName: set_onCompleteObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::System::Action_1<::Il2CppObject*>*)>(&GlobalNamespace::LTDescrImpl::set_onCompleteObject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_onCompleteObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_onCompleteParam
// Il2CppName: get_onCompleteParam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_onCompleteParam)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_onCompleteParam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_onCompleteParam
// Il2CppName: set_onCompleteParam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::Il2CppObject*)>(&GlobalNamespace::LTDescrImpl::set_onCompleteParam)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_onCompleteParam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_onUpdateParam
// Il2CppName: get_onUpdateParam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_onUpdateParam)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_onUpdateParam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_onUpdateParam
// Il2CppName: set_onUpdateParam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::Il2CppObject*)>(&GlobalNamespace::LTDescrImpl::set_onUpdateParam)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_onUpdateParam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_onStart
// Il2CppName: get_onStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_onStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_onStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::set_onStart
// Il2CppName: set_onStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)(::System::Action*)>(&GlobalNamespace::LTDescrImpl::set_onStart)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "set_onStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::cancel
// Il2CppName: cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::LTDescrImpl::cancel)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_uniqueId
// Il2CppName: get_uniqueId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_uniqueId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_uniqueId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::get_id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::reset
// Il2CppName: reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::cleanup
// Il2CppName: cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::init
// Il2CppName: init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setFromColor
// Il2CppName: setFromColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Color)>(&GlobalNamespace::LTDescrImpl::setFromColor)> {
  static const MethodInfo* get() {
    static auto* col = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setFromColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::pause
// Il2CppName: pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::pause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::resume
// Il2CppName: resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::resume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setAxis
// Il2CppName: setAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Vector3)>(&GlobalNamespace::LTDescrImpl::setAxis)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setDelay
// Il2CppName: setDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(float)>(&GlobalNamespace::LTDescrImpl::setDelay)> {
  static const MethodInfo* get() {
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delay});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setEase
// Il2CppName: setEase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::GlobalNamespace::LeanTweenType)>(&GlobalNamespace::LTDescrImpl::setEase)> {
  static const MethodInfo* get() {
    static auto* easeType = &::il2cpp_utils::GetClassFromName("", "LeanTweenType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setEase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{easeType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOvershoot
// Il2CppName: setOvershoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(float)>(&GlobalNamespace::LTDescrImpl::setOvershoot)> {
  static const MethodInfo* get() {
    static auto* overshoot = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOvershoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{overshoot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setPeriod
// Il2CppName: setPeriod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(float)>(&GlobalNamespace::LTDescrImpl::setPeriod)> {
  static const MethodInfo* get() {
    static auto* period = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setPeriod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{period});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setEase
// Il2CppName: setEase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::AnimationCurve*)>(&GlobalNamespace::LTDescrImpl::setEase)> {
  static const MethodInfo* get() {
    static auto* easeCurve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setEase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{easeCurve});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setTo
// Il2CppName: setTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Vector3)>(&GlobalNamespace::LTDescrImpl::setTo)> {
  static const MethodInfo* get() {
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{to});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setTo
// Il2CppName: setTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Transform*)>(&GlobalNamespace::LTDescrImpl::setTo)> {
  static const MethodInfo* get() {
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{to});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setFrom
// Il2CppName: setFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Vector3)>(&GlobalNamespace::LTDescrImpl::setFrom)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setFrom
// Il2CppName: setFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(float)>(&GlobalNamespace::LTDescrImpl::setFrom)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setDiff
// Il2CppName: setDiff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Vector3)>(&GlobalNamespace::LTDescrImpl::setDiff)> {
  static const MethodInfo* get() {
    static auto* diff = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setDiff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{diff});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setHasInitialized
// Il2CppName: setHasInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::setHasInitialized)> {
  static const MethodInfo* get() {
    static auto* has = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setHasInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{has});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setId
// Il2CppName: setId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(uint)>(&GlobalNamespace::LTDescrImpl::setId)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setTime
// Il2CppName: setTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(float)>(&GlobalNamespace::LTDescrImpl::setTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setRepeat
// Il2CppName: setRepeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(int)>(&GlobalNamespace::LTDescrImpl::setRepeat)> {
  static const MethodInfo* get() {
    static auto* repeat = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setRepeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{repeat});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setLoopType
// Il2CppName: setLoopType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::GlobalNamespace::LeanTweenType)>(&GlobalNamespace::LTDescrImpl::setLoopType)> {
  static const MethodInfo* get() {
    static auto* loopType = &::il2cpp_utils::GetClassFromName("", "LeanTweenType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setLoopType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setUseEstimatedTime
// Il2CppName: setUseEstimatedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::setUseEstimatedTime)> {
  static const MethodInfo* get() {
    static auto* useEstimatedTime = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setUseEstimatedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useEstimatedTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setIgnoreTimeScale
// Il2CppName: setIgnoreTimeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::setIgnoreTimeScale)> {
  static const MethodInfo* get() {
    static auto* useUnScaledTime = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setIgnoreTimeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useUnScaledTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setUseFrames
// Il2CppName: setUseFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::setUseFrames)> {
  static const MethodInfo* get() {
    static auto* useFrames = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setUseFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useFrames});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setUseManualTime
// Il2CppName: setUseManualTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::setUseManualTime)> {
  static const MethodInfo* get() {
    static auto* useManualTime = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setUseManualTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useManualTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setLoopCount
// Il2CppName: setLoopCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(int)>(&GlobalNamespace::LTDescrImpl::setLoopCount)> {
  static const MethodInfo* get() {
    static auto* loopCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setLoopCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loopCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setLoopOnce
// Il2CppName: setLoopOnce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::setLoopOnce)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setLoopOnce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setLoopClamp
// Il2CppName: setLoopClamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::setLoopClamp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setLoopClamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setLoopClamp
// Il2CppName: setLoopClamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(int)>(&GlobalNamespace::LTDescrImpl::setLoopClamp)> {
  static const MethodInfo* get() {
    static auto* loops = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setLoopClamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loops});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setLoopPingPong
// Il2CppName: setLoopPingPong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::setLoopPingPong)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setLoopPingPong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setLoopPingPong
// Il2CppName: setLoopPingPong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(int)>(&GlobalNamespace::LTDescrImpl::setLoopPingPong)> {
  static const MethodInfo* get() {
    static auto* loops = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setLoopPingPong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loops});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnComplete
// Il2CppName: setOnComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::System::Action*)>(&GlobalNamespace::LTDescrImpl::setOnComplete)> {
  static const MethodInfo* get() {
    static auto* onComplete = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnComplete
// Il2CppName: setOnComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::System::Action_1<::Il2CppObject*>*)>(&GlobalNamespace::LTDescrImpl::setOnComplete)> {
  static const MethodInfo* get() {
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onComplete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnComplete
// Il2CppName: setOnComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::System::Action_1<::Il2CppObject*>*, ::Il2CppObject*)>(&GlobalNamespace::LTDescrImpl::setOnComplete)> {
  static const MethodInfo* get() {
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    static auto* onCompleteParam = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onComplete, onCompleteParam});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnCompleteParam
// Il2CppName: setOnCompleteParam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::Il2CppObject*)>(&GlobalNamespace::LTDescrImpl::setOnCompleteParam)> {
  static const MethodInfo* get() {
    static auto* onCompleteParam = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnCompleteParam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onCompleteParam});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnUpdate
// Il2CppName: setOnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::System::Action_1<float>*)>(&GlobalNamespace::LTDescrImpl::setOnUpdate)> {
  static const MethodInfo* get() {
    static auto* onUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onUpdate});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnUpdateRatio
// Il2CppName: setOnUpdateRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::System::Action_2<float, float>*)>(&GlobalNamespace::LTDescrImpl::setOnUpdateRatio)> {
  static const MethodInfo* get() {
    static auto* onUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnUpdateRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onUpdate});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnUpdateObject
// Il2CppName: setOnUpdateObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::System::Action_2<float, ::Il2CppObject*>*)>(&GlobalNamespace::LTDescrImpl::setOnUpdateObject)> {
  static const MethodInfo* get() {
    static auto* onUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnUpdateObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onUpdate});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnUpdateVector2
// Il2CppName: setOnUpdateVector2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::System::Action_1<::UnityEngine::Vector2>*)>(&GlobalNamespace::LTDescrImpl::setOnUpdateVector2)> {
  static const MethodInfo* get() {
    static auto* onUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnUpdateVector2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onUpdate});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnUpdateVector3
// Il2CppName: setOnUpdateVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::System::Action_1<::UnityEngine::Vector3>*)>(&GlobalNamespace::LTDescrImpl::setOnUpdateVector3)> {
  static const MethodInfo* get() {
    static auto* onUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnUpdateVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onUpdate});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnUpdateColor
// Il2CppName: setOnUpdateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::System::Action_1<::UnityEngine::Color>*)>(&GlobalNamespace::LTDescrImpl::setOnUpdateColor)> {
  static const MethodInfo* get() {
    static auto* onUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnUpdateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onUpdate});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnUpdate
// Il2CppName: setOnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::System::Action_1<::UnityEngine::Color>*)>(&GlobalNamespace::LTDescrImpl::setOnUpdate)> {
  static const MethodInfo* get() {
    static auto* onUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onUpdate});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnUpdate
// Il2CppName: setOnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::System::Action_2<float, ::Il2CppObject*>*, ::Il2CppObject*)>(&GlobalNamespace::LTDescrImpl::setOnUpdate)> {
  static const MethodInfo* get() {
    static auto* onUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    static auto* onUpdateParam = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onUpdate, onUpdateParam});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnUpdate
// Il2CppName: setOnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::System::Action_2<::UnityEngine::Vector3, ::Il2CppObject*>*, ::Il2CppObject*)>(&GlobalNamespace::LTDescrImpl::setOnUpdate)> {
  static const MethodInfo* get() {
    static auto* onUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    static auto* onUpdateParam = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onUpdate, onUpdateParam});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnUpdate
// Il2CppName: setOnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::System::Action_1<::UnityEngine::Vector2>*, ::Il2CppObject*)>(&GlobalNamespace::LTDescrImpl::setOnUpdate)> {
  static const MethodInfo* get() {
    static auto* onUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    static auto* onUpdateParam = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onUpdate, onUpdateParam});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnUpdate
// Il2CppName: setOnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::System::Action_1<::UnityEngine::Vector3>*, ::Il2CppObject*)>(&GlobalNamespace::LTDescrImpl::setOnUpdate)> {
  static const MethodInfo* get() {
    static auto* onUpdate = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* onUpdateParam = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onUpdate, onUpdateParam});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnUpdateParam
// Il2CppName: setOnUpdateParam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::Il2CppObject*)>(&GlobalNamespace::LTDescrImpl::setOnUpdateParam)> {
  static const MethodInfo* get() {
    static auto* onUpdateParam = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnUpdateParam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onUpdateParam});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOrientToPath
// Il2CppName: setOrientToPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::setOrientToPath)> {
  static const MethodInfo* get() {
    static auto* doesOrient = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOrientToPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doesOrient});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOrientToPath2d
// Il2CppName: setOrientToPath2d
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::setOrientToPath2d)> {
  static const MethodInfo* get() {
    static auto* doesOrient2d = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOrientToPath2d", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doesOrient2d});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setRect
// Il2CppName: setRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::GlobalNamespace::LTRect*)>(&GlobalNamespace::LTDescrImpl::setRect)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("", "LTRect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setRect
// Il2CppName: setRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Rect)>(&GlobalNamespace::LTDescrImpl::setRect)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setPath
// Il2CppName: setPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::GlobalNamespace::LTBezierPath*)>(&GlobalNamespace::LTDescrImpl::setPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("", "LTBezierPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setPoint
// Il2CppName: setPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::Vector3)>(&GlobalNamespace::LTDescrImpl::setPoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setDestroyOnComplete
// Il2CppName: setDestroyOnComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::setDestroyOnComplete)> {
  static const MethodInfo* get() {
    static auto* doesDestroy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setDestroyOnComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doesDestroy});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setAudio
// Il2CppName: setAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::Il2CppObject*)>(&GlobalNamespace::LTDescrImpl::setAudio)> {
  static const MethodInfo* get() {
    static auto* audio = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnCompleteOnRepeat
// Il2CppName: setOnCompleteOnRepeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::setOnCompleteOnRepeat)> {
  static const MethodInfo* get() {
    static auto* isOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnCompleteOnRepeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isOn});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnCompleteOnStart
// Il2CppName: setOnCompleteOnStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(bool)>(&GlobalNamespace::LTDescrImpl::setOnCompleteOnStart)> {
  static const MethodInfo* get() {
    static auto* isOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnCompleteOnStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isOn});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setRect
// Il2CppName: setRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::UnityEngine::RectTransform*)>(&GlobalNamespace::LTDescrImpl::setRect)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setSprites
// Il2CppName: setSprites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::ArrayW<::UnityEngine::Sprite*>)>(&GlobalNamespace::LTDescrImpl::setSprites)> {
  static const MethodInfo* get() {
    static auto* sprites = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setSprites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sprites});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setFrameRate
// Il2CppName: setFrameRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(float)>(&GlobalNamespace::LTDescrImpl::setFrameRate)> {
  static const MethodInfo* get() {
    static auto* frameRate = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setFrameRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frameRate});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setOnStart
// Il2CppName: setOnStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(::System::Action*)>(&GlobalNamespace::LTDescrImpl::setOnStart)> {
  static const MethodInfo* get() {
    static auto* onStart = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setOnStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onStart});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::setDirection
// Il2CppName: setDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTDescr* (GlobalNamespace::LTDescrImpl::*)(float)>(&GlobalNamespace::LTDescrImpl::setDirection)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "setDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::LTDescrImpl::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LTDescrImpl::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::LTDescrImpl::*)()>(&GlobalNamespace::LTDescrImpl::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LTDescrImpl*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
