// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BaseStarDataRenderer
  class BaseStarDataRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BaseStarDataRenderer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BaseStarDataRenderer*, "", "BaseStarDataRenderer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: BaseStarDataRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseStarDataRenderer : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::BaseStarDataRenderer::StarDataProgress
    class StarDataProgress;
    // Nested type: ::GlobalNamespace::BaseStarDataRenderer::StarDataComplete
    class StarDataComplete;
    public:
    // [CompilerGeneratedAttribute] Offset: 0xADA048
    // private BaseStarDataRenderer/StarDataProgress progressCallback
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::BaseStarDataRenderer::StarDataProgress* progressCallback;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BaseStarDataRenderer::StarDataProgress*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA058
    // private BaseStarDataRenderer/StarDataComplete completionCallback
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::BaseStarDataRenderer::StarDataComplete* completionCallback;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BaseStarDataRenderer::StarDataComplete*) == 0x8);
    // public System.Single density
    // Size: 0x4
    // Offset: 0x20
    float density;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single imageSize
    // Size: 0x4
    // Offset: 0x24
    float imageSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.String layerId
    // Size: 0x8
    // Offset: 0x28
    ::StringW layerId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single maxRadius
    // Size: 0x4
    // Offset: 0x30
    float maxRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single sphereRadius
    // Size: 0x4
    // Offset: 0x34
    float sphereRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean isCancelled
    // Size: 0x1
    // Offset: 0x38
    bool isCancelled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private BaseStarDataRenderer/StarDataProgress progressCallback
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BaseStarDataRenderer::StarDataProgress*& dyn_progressCallback();
    // Get instance field reference: private BaseStarDataRenderer/StarDataComplete completionCallback
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BaseStarDataRenderer::StarDataComplete*& dyn_completionCallback();
    // Get instance field reference: public System.Single density
    [[deprecated("Use field access instead!")]] float& dyn_density();
    // Get instance field reference: public System.Single imageSize
    [[deprecated("Use field access instead!")]] float& dyn_imageSize();
    // Get instance field reference: public System.String layerId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_layerId();
    // Get instance field reference: public System.Single maxRadius
    [[deprecated("Use field access instead!")]] float& dyn_maxRadius();
    // Get instance field reference: protected System.Single sphereRadius
    [[deprecated("Use field access instead!")]] float& dyn_sphereRadius();
    // Get instance field reference: protected System.Boolean isCancelled
    [[deprecated("Use field access instead!")]] bool& dyn_isCancelled();
    // public System.Void add_progressCallback(BaseStarDataRenderer/StarDataProgress value)
    // Offset: 0x12B1E6C
    void add_progressCallback(::GlobalNamespace::BaseStarDataRenderer::StarDataProgress* value);
    // public System.Void remove_progressCallback(BaseStarDataRenderer/StarDataProgress value)
    // Offset: 0x12B1F58
    void remove_progressCallback(::GlobalNamespace::BaseStarDataRenderer::StarDataProgress* value);
    // public System.Void add_completionCallback(BaseStarDataRenderer/StarDataComplete value)
    // Offset: 0x12B2044
    void add_completionCallback(::GlobalNamespace::BaseStarDataRenderer::StarDataComplete* value);
    // public System.Void remove_completionCallback(BaseStarDataRenderer/StarDataComplete value)
    // Offset: 0x12B2130
    void remove_completionCallback(::GlobalNamespace::BaseStarDataRenderer::StarDataComplete* value);
    // public System.Collections.IEnumerator ComputeStarData()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* ComputeStarData();
    // public System.Void Cancel()
    // Offset: 0x12B221C
    void Cancel();
    // protected System.Void SendProgress(System.Single progress)
    // Offset: 0x12B2224
    void SendProgress(float progress);
    // protected System.Void SendCompletion(UnityEngine.Texture2D texture, System.Boolean success)
    // Offset: 0x12B29CC
    void SendCompletion(::UnityEngine::Texture2D* texture, bool success);
    // protected System.Void .ctor()
    // Offset: 0x12B31B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseStarDataRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BaseStarDataRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseStarDataRenderer*, creationType>()));
    }
  }; // BaseStarDataRenderer
  #pragma pack(pop)
  static check_size<sizeof(BaseStarDataRenderer), 56 + sizeof(bool)> __GlobalNamespace_BaseStarDataRendererSizeCheck;
  static_assert(sizeof(BaseStarDataRenderer) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BaseStarDataRenderer::add_progressCallback
// Il2CppName: add_progressCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BaseStarDataRenderer::*)(::GlobalNamespace::BaseStarDataRenderer::StarDataProgress*)>(&GlobalNamespace::BaseStarDataRenderer::add_progressCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BaseStarDataRenderer/StarDataProgress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BaseStarDataRenderer*), "add_progressCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BaseStarDataRenderer::remove_progressCallback
// Il2CppName: remove_progressCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BaseStarDataRenderer::*)(::GlobalNamespace::BaseStarDataRenderer::StarDataProgress*)>(&GlobalNamespace::BaseStarDataRenderer::remove_progressCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BaseStarDataRenderer/StarDataProgress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BaseStarDataRenderer*), "remove_progressCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BaseStarDataRenderer::add_completionCallback
// Il2CppName: add_completionCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BaseStarDataRenderer::*)(::GlobalNamespace::BaseStarDataRenderer::StarDataComplete*)>(&GlobalNamespace::BaseStarDataRenderer::add_completionCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BaseStarDataRenderer/StarDataComplete")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BaseStarDataRenderer*), "add_completionCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BaseStarDataRenderer::remove_completionCallback
// Il2CppName: remove_completionCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BaseStarDataRenderer::*)(::GlobalNamespace::BaseStarDataRenderer::StarDataComplete*)>(&GlobalNamespace::BaseStarDataRenderer::remove_completionCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BaseStarDataRenderer/StarDataComplete")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BaseStarDataRenderer*), "remove_completionCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BaseStarDataRenderer::ComputeStarData
// Il2CppName: ComputeStarData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::BaseStarDataRenderer::*)()>(&GlobalNamespace::BaseStarDataRenderer::ComputeStarData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BaseStarDataRenderer*), "ComputeStarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BaseStarDataRenderer::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BaseStarDataRenderer::*)()>(&GlobalNamespace::BaseStarDataRenderer::Cancel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BaseStarDataRenderer*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BaseStarDataRenderer::SendProgress
// Il2CppName: SendProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BaseStarDataRenderer::*)(float)>(&GlobalNamespace::BaseStarDataRenderer::SendProgress)> {
  static const MethodInfo* get() {
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BaseStarDataRenderer*), "SendProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progress});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BaseStarDataRenderer::SendCompletion
// Il2CppName: SendCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BaseStarDataRenderer::*)(::UnityEngine::Texture2D*, bool)>(&GlobalNamespace::BaseStarDataRenderer::SendCompletion)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BaseStarDataRenderer*), "SendCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, success});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BaseStarDataRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
