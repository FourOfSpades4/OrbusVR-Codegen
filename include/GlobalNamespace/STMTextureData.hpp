// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.FilterMode
#include "UnityEngine/FilterMode.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: STMTextureData
  class STMTextureData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::STMTextureData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::STMTextureData*, "", "STMTextureData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: STMTextureData
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: ACDA14
  class STMTextureData : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public UnityEngine.Texture texture
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Texture* texture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public UnityEngine.FilterMode filterMode
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::FilterMode filterMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::FilterMode) == 0x4);
    // public System.Boolean relativeToLetter
    // Size: 0x1
    // Offset: 0x24
    bool relativeToLetter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean scaleWithText
    // Size: 0x1
    // Offset: 0x25
    bool scaleWithText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: scaleWithText and: tiling
    char __padding3[0x2] = {};
    // public UnityEngine.Vector2 tiling
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Vector2 tiling;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 offset
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Vector2 offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 scrollSpeed
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Vector2 scrollSpeed;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Texture texture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_texture();
    // Get instance field reference: public UnityEngine.FilterMode filterMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::FilterMode& dyn_filterMode();
    // Get instance field reference: public System.Boolean relativeToLetter
    [[deprecated("Use field access instead!")]] bool& dyn_relativeToLetter();
    // Get instance field reference: public System.Boolean scaleWithText
    [[deprecated("Use field access instead!")]] bool& dyn_scaleWithText();
    // Get instance field reference: public UnityEngine.Vector2 tiling
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_tiling();
    // Get instance field reference: public UnityEngine.Vector2 offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_offset();
    // Get instance field reference: public UnityEngine.Vector2 scrollSpeed
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_scrollSpeed();
    // public System.Void .ctor()
    // Offset: 0xE31270
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMTextureData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMTextureData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMTextureData*, creationType>()));
    }
  }; // STMTextureData
  #pragma pack(pop)
  static check_size<sizeof(STMTextureData), 56 + sizeof(::UnityEngine::Vector2)> __GlobalNamespace_STMTextureDataSizeCheck;
  static_assert(sizeof(STMTextureData) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::STMTextureData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
