// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MB_MaterialAndUVRect
  class MB_MaterialAndUVRect;
  // Forward declaring type: MB_MultiMaterial
  class MB_MultiMaterial;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Rect
  struct Rect;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB_TextureTilingTreatment
  struct MB_TextureTilingTreatment;
  // Forward declaring type: MB2_LogLevel
  struct MB2_LogLevel;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MB2_TextureBakeResults
  class MB2_TextureBakeResults;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MB2_TextureBakeResults);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MB2_TextureBakeResults*, "", "MB2_TextureBakeResults");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: MB2_TextureBakeResults
  // [TokenAttribute] Offset: FFFFFFFF
  class MB2_TextureBakeResults : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::GlobalNamespace::MB2_TextureBakeResults::Material2AtlasRectangleMapper
    class Material2AtlasRectangleMapper;
    public:
    // public System.Int32 version
    // Size: 0x4
    // Offset: 0x18
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: version and: materialsAndUVRects
    char __padding0[0x4] = {};
    // public MB_MaterialAndUVRect[] materialsAndUVRects
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::MB_MaterialAndUVRect*> materialsAndUVRects;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MB_MaterialAndUVRect*>) == 0x8);
    // public MB_MultiMaterial[] resultMaterials
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::MB_MultiMaterial*> resultMaterials;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MB_MultiMaterial*>) == 0x8);
    // public System.Boolean doMultiMaterial
    // Size: 0x1
    // Offset: 0x30
    bool doMultiMaterial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 version
    [[deprecated("Use field access instead!")]] int& dyn_version();
    // Get instance field reference: public MB_MaterialAndUVRect[] materialsAndUVRects
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MB_MaterialAndUVRect*>& dyn_materialsAndUVRects();
    // Get instance field reference: public MB_MultiMaterial[] resultMaterials
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MB_MultiMaterial*>& dyn_resultMaterials();
    // Get instance field reference: public System.Boolean doMultiMaterial
    [[deprecated("Use field access instead!")]] bool& dyn_doMultiMaterial();
    // static public System.Int32 get_VERSION()
    // Offset: 0x1212594
    static int get_VERSION();
    // public System.Void .ctor()
    // Offset: 0x121259C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB2_TextureBakeResults* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MB2_TextureBakeResults::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB2_TextureBakeResults*, creationType>()));
    }
    // private System.Void OnEnable()
    // Offset: 0x12125C8
    void OnEnable();
    // static public MB2_TextureBakeResults CreateForMaterialsOnRenderer(UnityEngine.GameObject[] gos, System.Collections.Generic.List`1<UnityEngine.Material> matsOnTargetRenderer)
    // Offset: 0x121267C
    static ::GlobalNamespace::MB2_TextureBakeResults* CreateForMaterialsOnRenderer(::ArrayW<::UnityEngine::GameObject*> gos, ::System::Collections::Generic::List_1<::UnityEngine::Material*>* matsOnTargetRenderer);
    // public System.Boolean DoAnyResultMatsUseConsiderMeshUVs()
    // Offset: 0x1212F10
    bool DoAnyResultMatsUseConsiderMeshUVs();
    // public System.Boolean ContainsMaterial(UnityEngine.Material m)
    // Offset: 0x1212FBC
    bool ContainsMaterial(::UnityEngine::Material* m);
    // public System.String GetDescription()
    // Offset: 0x12130BC
    ::StringW GetDescription();
    // static public System.Boolean IsMeshAndMaterialRectEnclosedByAtlasRect(DigitalOpus.MB.Core.MB_TextureTilingTreatment tilingTreatment, UnityEngine.Rect uvR, UnityEngine.Rect sourceMaterialTiling, UnityEngine.Rect samplingEncapsulatinRect, DigitalOpus.MB.Core.MB2_LogLevel logLevel)
    // Offset: 0x12135A8
    static bool IsMeshAndMaterialRectEnclosedByAtlasRect(::DigitalOpus::MB::Core::MB_TextureTilingTreatment tilingTreatment, ::UnityEngine::Rect uvR, ::UnityEngine::Rect sourceMaterialTiling, ::UnityEngine::Rect samplingEncapsulatinRect, ::DigitalOpus::MB::Core::MB2_LogLevel logLevel);
  }; // MB2_TextureBakeResults
  #pragma pack(pop)
  static check_size<sizeof(MB2_TextureBakeResults), 48 + sizeof(bool)> __GlobalNamespace_MB2_TextureBakeResultsSizeCheck;
  static_assert(sizeof(MB2_TextureBakeResults) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MB2_TextureBakeResults::get_VERSION
// Il2CppName: get_VERSION
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::MB2_TextureBakeResults::get_VERSION)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB2_TextureBakeResults*), "get_VERSION", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB2_TextureBakeResults::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MB2_TextureBakeResults::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB2_TextureBakeResults::*)()>(&GlobalNamespace::MB2_TextureBakeResults::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB2_TextureBakeResults*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB2_TextureBakeResults::CreateForMaterialsOnRenderer
// Il2CppName: CreateForMaterialsOnRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MB2_TextureBakeResults* (*)(::ArrayW<::UnityEngine::GameObject*>, ::System::Collections::Generic::List_1<::UnityEngine::Material*>*)>(&GlobalNamespace::MB2_TextureBakeResults::CreateForMaterialsOnRenderer)> {
  static const MethodInfo* get() {
    static auto* gos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* matsOnTargetRenderer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Material")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB2_TextureBakeResults*), "CreateForMaterialsOnRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gos, matsOnTargetRenderer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB2_TextureBakeResults::DoAnyResultMatsUseConsiderMeshUVs
// Il2CppName: DoAnyResultMatsUseConsiderMeshUVs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB2_TextureBakeResults::*)()>(&GlobalNamespace::MB2_TextureBakeResults::DoAnyResultMatsUseConsiderMeshUVs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB2_TextureBakeResults*), "DoAnyResultMatsUseConsiderMeshUVs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB2_TextureBakeResults::ContainsMaterial
// Il2CppName: ContainsMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB2_TextureBakeResults::*)(::UnityEngine::Material*)>(&GlobalNamespace::MB2_TextureBakeResults::ContainsMaterial)> {
  static const MethodInfo* get() {
    static auto* m = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB2_TextureBakeResults*), "ContainsMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{m});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB2_TextureBakeResults::GetDescription
// Il2CppName: GetDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::MB2_TextureBakeResults::*)()>(&GlobalNamespace::MB2_TextureBakeResults::GetDescription)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB2_TextureBakeResults*), "GetDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB2_TextureBakeResults::IsMeshAndMaterialRectEnclosedByAtlasRect
// Il2CppName: IsMeshAndMaterialRectEnclosedByAtlasRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DigitalOpus::MB::Core::MB_TextureTilingTreatment, ::UnityEngine::Rect, ::UnityEngine::Rect, ::UnityEngine::Rect, ::DigitalOpus::MB::Core::MB2_LogLevel)>(&GlobalNamespace::MB2_TextureBakeResults::IsMeshAndMaterialRectEnclosedByAtlasRect)> {
  static const MethodInfo* get() {
    static auto* tilingTreatment = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB_TextureTilingTreatment")->byval_arg;
    static auto* uvR = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* sourceMaterialTiling = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* samplingEncapsulatinRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* logLevel = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_LogLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB2_TextureBakeResults*), "IsMeshAndMaterialRectEnclosedByAtlasRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tilingTreatment, uvR, sourceMaterialTiling, samplingEncapsulatinRect, logLevel});
  }
};
