// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Renderer
  class Renderer;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ImposterTexture
  class ImposterTexture;
  // Forward declaring type: Imposter
  class Imposter;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ImposterProxy
  class ImposterProxy;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ImposterProxy);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ImposterProxy*, "", "ImposterProxy");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x91
  #pragma pack(push, 1)
  // Autogenerated type: ImposterProxy
  // [TokenAttribute] Offset: FFFFFFFF
  class ImposterProxy : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single maxSize
    // Size: 0x4
    // Offset: 0x18
    float maxSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Bounds bound
    // Size: 0x18
    // Offset: 0x1C
    ::UnityEngine::Bounds bound;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // public UnityEngine.Bounds shadowBound
    // Size: 0x18
    // Offset: 0x34
    ::UnityEngine::Bounds shadowBound;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // public System.Single shadowZOffset
    // Size: 0x4
    // Offset: 0x4C
    float shadowZOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single zOffset
    // Size: 0x4
    // Offset: 0x50
    float zOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxShadowDistance
    // Size: 0x4
    // Offset: 0x54
    float maxShadowDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 shadowDivider
    // Size: 0x4
    // Offset: 0x58
    int shadowDivider;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: shadowDivider and: quad
    char __padding6[0x4] = {};
    // public UnityEngine.MeshRenderer quad
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::MeshRenderer* quad;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.MeshRenderer shadow
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::MeshRenderer* shadow;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private ImposterTexture imposterTexture
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::ImposterTexture* imposterTexture;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ImposterTexture*) == 0x8);
    // private ImposterTexture shadowTexture
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::ImposterTexture* shadowTexture;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ImposterTexture*) == 0x8);
    // private UnityEngine.Camera renderingCamera
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Camera* renderingCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Renderer> renderers
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>* renderers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*) == 0x8);
    // private System.Boolean castShadow
    // Size: 0x1
    // Offset: 0x90
    bool castShadow;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single maxSize
    [[deprecated("Use field access instead!")]] float& dyn_maxSize();
    // Get instance field reference: public UnityEngine.Bounds bound
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_bound();
    // Get instance field reference: public UnityEngine.Bounds shadowBound
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_shadowBound();
    // Get instance field reference: public System.Single shadowZOffset
    [[deprecated("Use field access instead!")]] float& dyn_shadowZOffset();
    // Get instance field reference: public System.Single zOffset
    [[deprecated("Use field access instead!")]] float& dyn_zOffset();
    // Get instance field reference: public System.Single maxShadowDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxShadowDistance();
    // Get instance field reference: public System.Int32 shadowDivider
    [[deprecated("Use field access instead!")]] int& dyn_shadowDivider();
    // Get instance field reference: public UnityEngine.MeshRenderer quad
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_quad();
    // Get instance field reference: public UnityEngine.MeshRenderer shadow
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_shadow();
    // Get instance field reference: private ImposterTexture imposterTexture
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ImposterTexture*& dyn_imposterTexture();
    // Get instance field reference: private ImposterTexture shadowTexture
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ImposterTexture*& dyn_shadowTexture();
    // Get instance field reference: private UnityEngine.Camera renderingCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_renderingCamera();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Renderer> renderers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*& dyn_renderers();
    // Get instance field reference: private System.Boolean castShadow
    [[deprecated("Use field access instead!")]] bool& dyn_castShadow();
    // private System.Void Awake()
    // Offset: 0x14A1968
    void Awake();
    // public System.Void Init(System.Collections.Generic.List`1<UnityEngine.Renderer> renderers, System.Boolean useShadow)
    // Offset: 0x149ED7C
    void Init(::System::Collections::Generic::List_1<::UnityEngine::Renderer*>* renderers, bool useShadow);
    // private System.Void OnDestroy()
    // Offset: 0x14A2228
    void OnDestroy();
    // public System.Void AdjustTextureSize(System.Int32 size)
    // Offset: 0x149FE74
    void AdjustTextureSize(int size);
    // private System.Void updateShadow(System.Int32 size)
    // Offset: 0x14A222C
    void updateShadow(int size);
    // private System.Void extractBounds()
    // Offset: 0x14A1970
    void extractBounds();
    // public System.Void Render(Imposter thisImposter)
    // Offset: 0x149FBAC
    void Render(::GlobalNamespace::Imposter* thisImposter);
    // public System.Void InvalidateTexture()
    // Offset: 0x149F620
    void InvalidateTexture();
    // public System.Boolean IsTextureInvalid()
    // Offset: 0x149FA30
    bool IsTextureInvalid();
    // private System.Void adjustSize()
    // Offset: 0x14A20DC
    void adjustSize();
    // private System.Void renderImposter(Imposter thisImposter)
    // Offset: 0x14A2B1C
    void renderImposter(::GlobalNamespace::Imposter* thisImposter);
    // private System.Void renderShadow()
    // Offset: 0x14A25A8
    void renderShadow();
    // public System.Boolean isVisible()
    // Offset: 0x149F8A4
    bool isVisible();
    // public System.Boolean isVisibleInCache()
    // Offset: 0x149FDA0
    bool isVisibleInCache();
    // public System.Void setVisibility(System.Boolean bVisible)
    // Offset: 0x14A3514
    void setVisibility(bool bVisible);
    // public System.Void .ctor()
    // Offset: 0x14A35FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImposterProxy* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ImposterProxy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImposterProxy*, creationType>()));
    }
  }; // ImposterProxy
  #pragma pack(pop)
  static check_size<sizeof(ImposterProxy), 144 + sizeof(bool)> __GlobalNamespace_ImposterProxySizeCheck;
  static_assert(sizeof(ImposterProxy) == 0x91);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterProxy::*)()>(&GlobalNamespace::ImposterProxy::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterProxy*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterProxy::*)(::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*, bool)>(&GlobalNamespace::ImposterProxy::Init)> {
  static const MethodInfo* get() {
    static auto* renderers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")})->byval_arg;
    static auto* useShadow = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterProxy*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderers, useShadow});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterProxy::*)()>(&GlobalNamespace::ImposterProxy::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterProxy*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::AdjustTextureSize
// Il2CppName: AdjustTextureSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterProxy::*)(int)>(&GlobalNamespace::ImposterProxy::AdjustTextureSize)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterProxy*), "AdjustTextureSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::updateShadow
// Il2CppName: updateShadow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterProxy::*)(int)>(&GlobalNamespace::ImposterProxy::updateShadow)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterProxy*), "updateShadow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::extractBounds
// Il2CppName: extractBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterProxy::*)()>(&GlobalNamespace::ImposterProxy::extractBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterProxy*), "extractBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterProxy::*)(::GlobalNamespace::Imposter*)>(&GlobalNamespace::ImposterProxy::Render)> {
  static const MethodInfo* get() {
    static auto* thisImposter = &::il2cpp_utils::GetClassFromName("", "Imposter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterProxy*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thisImposter});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::InvalidateTexture
// Il2CppName: InvalidateTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterProxy::*)()>(&GlobalNamespace::ImposterProxy::InvalidateTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterProxy*), "InvalidateTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::IsTextureInvalid
// Il2CppName: IsTextureInvalid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ImposterProxy::*)()>(&GlobalNamespace::ImposterProxy::IsTextureInvalid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterProxy*), "IsTextureInvalid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::adjustSize
// Il2CppName: adjustSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterProxy::*)()>(&GlobalNamespace::ImposterProxy::adjustSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterProxy*), "adjustSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::renderImposter
// Il2CppName: renderImposter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterProxy::*)(::GlobalNamespace::Imposter*)>(&GlobalNamespace::ImposterProxy::renderImposter)> {
  static const MethodInfo* get() {
    static auto* thisImposter = &::il2cpp_utils::GetClassFromName("", "Imposter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterProxy*), "renderImposter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thisImposter});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::renderShadow
// Il2CppName: renderShadow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterProxy::*)()>(&GlobalNamespace::ImposterProxy::renderShadow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterProxy*), "renderShadow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::isVisible
// Il2CppName: isVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ImposterProxy::*)()>(&GlobalNamespace::ImposterProxy::isVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterProxy*), "isVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::isVisibleInCache
// Il2CppName: isVisibleInCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ImposterProxy::*)()>(&GlobalNamespace::ImposterProxy::isVisibleInCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterProxy*), "isVisibleInCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::setVisibility
// Il2CppName: setVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ImposterProxy::*)(bool)>(&GlobalNamespace::ImposterProxy::setVisibility)> {
  static const MethodInfo* get() {
    static auto* bVisible = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ImposterProxy*), "setVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bVisible});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ImposterProxy::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
