// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AstarSmoothFollow2
  class AstarSmoothFollow2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AstarSmoothFollow2);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AstarSmoothFollow2*, "", "AstarSmoothFollow2");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x35
  #pragma pack(push, 1)
  // Autogenerated type: AstarSmoothFollow2
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: ACD33C
  class AstarSmoothFollow2 : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single distance
    // Size: 0x4
    // Offset: 0x20
    float distance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single height
    // Size: 0x4
    // Offset: 0x24
    float height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single damping
    // Size: 0x4
    // Offset: 0x28
    float damping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean smoothRotation
    // Size: 0x1
    // Offset: 0x2C
    bool smoothRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean followBehind
    // Size: 0x1
    // Offset: 0x2D
    bool followBehind;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: followBehind and: rotationDamping
    char __padding5[0x2] = {};
    // public System.Single rotationDamping
    // Size: 0x4
    // Offset: 0x30
    float rotationDamping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean staticOffset
    // Size: 0x1
    // Offset: 0x34
    bool staticOffset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // Get instance field reference: public System.Single distance
    [[deprecated("Use field access instead!")]] float& dyn_distance();
    // Get instance field reference: public System.Single height
    [[deprecated("Use field access instead!")]] float& dyn_height();
    // Get instance field reference: public System.Single damping
    [[deprecated("Use field access instead!")]] float& dyn_damping();
    // Get instance field reference: public System.Boolean smoothRotation
    [[deprecated("Use field access instead!")]] bool& dyn_smoothRotation();
    // Get instance field reference: public System.Boolean followBehind
    [[deprecated("Use field access instead!")]] bool& dyn_followBehind();
    // Get instance field reference: public System.Single rotationDamping
    [[deprecated("Use field access instead!")]] float& dyn_rotationDamping();
    // Get instance field reference: public System.Boolean staticOffset
    [[deprecated("Use field access instead!")]] bool& dyn_staticOffset();
    // private System.Void LateUpdate()
    // Offset: 0x12A7880
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x12A7CD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AstarSmoothFollow2* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AstarSmoothFollow2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AstarSmoothFollow2*, creationType>()));
    }
  }; // AstarSmoothFollow2
  #pragma pack(pop)
  static check_size<sizeof(AstarSmoothFollow2), 52 + sizeof(bool)> __GlobalNamespace_AstarSmoothFollow2SizeCheck;
  static_assert(sizeof(AstarSmoothFollow2) == 0x35);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AstarSmoothFollow2::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AstarSmoothFollow2::*)()>(&GlobalNamespace::AstarSmoothFollow2::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AstarSmoothFollow2*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AstarSmoothFollow2::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
