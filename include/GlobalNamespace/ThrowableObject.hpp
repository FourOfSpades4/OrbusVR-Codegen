// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: InteractableObject
#include "GlobalNamespace/InteractableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collision
  class Collision;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ThrowableObject
  class ThrowableObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ThrowableObject);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ThrowableObject*, "", "ThrowableObject");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: ThrowableObject
  // [TokenAttribute] Offset: FFFFFFFF
  class ThrowableObject : public ::GlobalNamespace::InteractableObject {
    public:
    public:
    // public UnityEngine.GameObject vfxCollision
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* vfxCollision;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject vfxCollision
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxCollision();
    // protected override System.Void Start()
    // Offset: 0x10528DC
    // Implemented from: InteractableObject
    // Base method: System.Void InteractableObject::Start()
    void Start();
    // protected override System.Void Update()
    // Offset: 0x10528E4
    // Implemented from: InteractableObject
    // Base method: System.Void InteractableObject::Update()
    void Update();
    // protected override System.Void OnCollisionEnter(UnityEngine.Collision col)
    // Offset: 0x10528EC
    // Implemented from: InteractableObject
    // Base method: System.Void InteractableObject::OnCollisionEnter(UnityEngine.Collision col)
    void OnCollisionEnter(::UnityEngine::Collision* col);
    // public System.Void .ctor()
    // Offset: 0x1052AC4
    // Implemented from: InteractableObject
    // Base method: System.Void InteractableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThrowableObject* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ThrowableObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThrowableObject*, creationType>()));
    }
  }; // ThrowableObject
  #pragma pack(pop)
  static check_size<sizeof(ThrowableObject), 24 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_ThrowableObjectSizeCheck;
  static_assert(sizeof(ThrowableObject) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ThrowableObject::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableObject::*)()>(&GlobalNamespace::ThrowableObject::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableObject*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableObject::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableObject::*)()>(&GlobalNamespace::ThrowableObject::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableObject*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableObject::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ThrowableObject::*)(::UnityEngine::Collision*)>(&GlobalNamespace::ThrowableObject::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* col = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ThrowableObject*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ThrowableObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
