// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.RuntimePlatform
#include "UnityEngine/RuntimePlatform.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: LineRenderer
  class LineRenderer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: PDollarGestureRecognizer
namespace PDollarGestureRecognizer {
  // Forward declaring type: Gesture
  class Gesture;
  // Forward declaring type: Point
  class Point;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Demo
  class Demo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Demo);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Demo*, "", "Demo");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: Demo
  // [TokenAttribute] Offset: FFFFFFFF
  class Demo : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform gestureOnScreenPrefab
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* gestureOnScreenPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Collections.Generic.List`1<PDollarGestureRecognizer.Gesture> trainingSet
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::PDollarGestureRecognizer::Gesture*>* trainingSet;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PDollarGestureRecognizer::Gesture*>*) == 0x8);
    // private System.Collections.Generic.List`1<PDollarGestureRecognizer.Point> points
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::PDollarGestureRecognizer::Point*>* points;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::PDollarGestureRecognizer::Point*>*) == 0x8);
    // private System.Int32 strokeId
    // Size: 0x4
    // Offset: 0x30
    int strokeId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 virtualKeyPosition
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 virtualKeyPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Rect drawArea
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Rect drawArea;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private UnityEngine.RuntimePlatform platform
    // Size: 0x4
    // Offset: 0x50
    ::UnityEngine::RuntimePlatform platform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RuntimePlatform) == 0x4);
    // private System.Int32 vertexCount
    // Size: 0x4
    // Offset: 0x54
    int vertexCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.List`1<UnityEngine.LineRenderer> gestureLinesRenderer
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::LineRenderer*>* gestureLinesRenderer;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::LineRenderer*>*) == 0x8);
    // private UnityEngine.LineRenderer currentGestureLineRenderer
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::LineRenderer* currentGestureLineRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // private System.String message
    // Size: 0x8
    // Offset: 0x68
    ::StringW message;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean recognized
    // Size: 0x1
    // Offset: 0x70
    bool recognized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: recognized and: newGestureName
    char __padding11[0x7] = {};
    // private System.String newGestureName
    // Size: 0x8
    // Offset: 0x78
    ::StringW newGestureName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Transform gestureOnScreenPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_gestureOnScreenPrefab();
    // Get instance field reference: private System.Collections.Generic.List`1<PDollarGestureRecognizer.Gesture> trainingSet
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PDollarGestureRecognizer::Gesture*>*& dyn_trainingSet();
    // Get instance field reference: private System.Collections.Generic.List`1<PDollarGestureRecognizer.Point> points
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::PDollarGestureRecognizer::Point*>*& dyn_points();
    // Get instance field reference: private System.Int32 strokeId
    [[deprecated("Use field access instead!")]] int& dyn_strokeId();
    // Get instance field reference: private UnityEngine.Vector3 virtualKeyPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_virtualKeyPosition();
    // Get instance field reference: private UnityEngine.Rect drawArea
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_drawArea();
    // Get instance field reference: private UnityEngine.RuntimePlatform platform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RuntimePlatform& dyn_platform();
    // Get instance field reference: private System.Int32 vertexCount
    [[deprecated("Use field access instead!")]] int& dyn_vertexCount();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.LineRenderer> gestureLinesRenderer
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::LineRenderer*>*& dyn_gestureLinesRenderer();
    // Get instance field reference: private UnityEngine.LineRenderer currentGestureLineRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn_currentGestureLineRenderer();
    // Get instance field reference: private System.String message
    [[deprecated("Use field access instead!")]] ::StringW& dyn_message();
    // Get instance field reference: private System.Boolean recognized
    [[deprecated("Use field access instead!")]] bool& dyn_recognized();
    // Get instance field reference: private System.String newGestureName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_newGestureName();
    // private System.Void Start()
    // Offset: 0xDF1BDC
    void Start();
    // private System.Void Update()
    // Offset: 0xDF1E0C
    void Update();
    // private System.Void OnGUI()
    // Offset: 0xDF2374
    void OnGUI();
    // public System.Void .ctor()
    // Offset: 0xDF2830
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Demo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Demo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Demo*, creationType>()));
    }
  }; // Demo
  #pragma pack(pop)
  static check_size<sizeof(Demo), 120 + sizeof(::StringW)> __GlobalNamespace_DemoSizeCheck;
  static_assert(sizeof(Demo) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Demo::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Demo::*)()>(&GlobalNamespace::Demo::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Demo*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Demo::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Demo::*)()>(&GlobalNamespace::Demo::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Demo*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Demo::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Demo::*)()>(&GlobalNamespace::Demo::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Demo*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Demo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
