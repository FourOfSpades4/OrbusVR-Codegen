// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Random/State
#include "UnityEngine/Random_State.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: STMVertexMod
  class STMVertexMod;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::STMVertexMod);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::STMVertexMod*, "", "STMVertexMod");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: STMVertexMod
  // [TokenAttribute] Offset: FFFFFFFF
  class STMVertexMod : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [HeaderAttribute] Offset: 0xAD8B9C
    // public UnityEngine.Vector3 positionOffset
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 positionOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single angleOffset
    // Size: 0x4
    // Offset: 0x24
    float angleOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 pivot
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 pivot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single letterRotation
    // Size: 0x4
    // Offset: 0x34
    float letterRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xAD8BD4
    // [HeaderAttribute] Offset: 0xAD8BD4
    // public System.Single sketchDelay
    // Size: 0x4
    // Offset: 0x38
    float sketchDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single sketchLastTime
    // Size: 0x4
    // Offset: 0x3C
    float sketchLastTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Random/State thisState
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Random::State thisState;
    // Field size check
    static_assert(sizeof(::UnityEngine::Random::State) == 0x10);
    // public System.Single sketchAmount
    // Size: 0x4
    // Offset: 0x50
    float sketchAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: sketchAmount and: storedVerts
    char __padding7[0x4] = {};
    // private UnityEngine.Vector3[] storedVerts
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::Vector3> storedVerts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public System.Boolean unscaledTime
    // Size: 0x1
    // Offset: 0x60
    bool unscaledTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Vector3 positionOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_positionOffset();
    // Get instance field reference: public System.Single angleOffset
    [[deprecated("Use field access instead!")]] float& dyn_angleOffset();
    // Get instance field reference: public UnityEngine.Vector3 pivot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_pivot();
    // Get instance field reference: public System.Single letterRotation
    [[deprecated("Use field access instead!")]] float& dyn_letterRotation();
    // Get instance field reference: public System.Single sketchDelay
    [[deprecated("Use field access instead!")]] float& dyn_sketchDelay();
    // Get instance field reference: private System.Single sketchLastTime
    [[deprecated("Use field access instead!")]] float& dyn_sketchLastTime();
    // Get instance field reference: private UnityEngine.Random/State thisState
    [[deprecated("Use field access instead!")]] ::UnityEngine::Random::State& dyn_thisState();
    // Get instance field reference: public System.Single sketchAmount
    [[deprecated("Use field access instead!")]] float& dyn_sketchAmount();
    // Get instance field reference: private UnityEngine.Vector3[] storedVerts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_storedVerts();
    // Get instance field reference: public System.Boolean unscaledTime
    [[deprecated("Use field access instead!")]] bool& dyn_unscaledTime();
    // private System.Void Awake()
    // Offset: 0xE31420
    void Awake();
    // public System.Void SketchifyVerts(UnityEngine.Vector3[] verts, UnityEngine.Vector3[] middles, UnityEngine.Vector3[] positions)
    // Offset: 0xE3142C
    void SketchifyVerts(::ArrayW<::UnityEngine::Vector3> verts, ::ArrayW<::UnityEngine::Vector3> middles, ::ArrayW<::UnityEngine::Vector3> positions);
    // public System.Void AlignToGrid(UnityEngine.Vector3[] verts, UnityEngine.Vector3[] middles, UnityEngine.Vector3[] positions)
    // Offset: 0xE319A0
    void AlignToGrid(::ArrayW<::UnityEngine::Vector3> verts, ::ArrayW<::UnityEngine::Vector3> middles, ::ArrayW<::UnityEngine::Vector3> positions);
    // private UnityEngine.Vector3 RoundDifference(UnityEngine.Vector3 original)
    // Offset: 0xE31CB0
    ::UnityEngine::Vector3 RoundDifference(::UnityEngine::Vector3 original);
    // public System.Void ApplyCurveToVertices(UnityEngine.Vector3[] verts, UnityEngine.Vector3[] middles, UnityEngine.Vector3[] positions)
    // Offset: 0xE31EF8
    void ApplyCurveToVertices(::ArrayW<::UnityEngine::Vector3> verts, ::ArrayW<::UnityEngine::Vector3> middles, ::ArrayW<::UnityEngine::Vector3> positions);
    // private UnityEngine.Vector3 RotatePointAroundPivot(UnityEngine.Vector3 point, UnityEngine.Vector3 myPivot, UnityEngine.Vector3 angles)
    // Offset: 0xE32738
    ::UnityEngine::Vector3 RotatePointAroundPivot(::UnityEngine::Vector3 point, ::UnityEngine::Vector3 myPivot, ::UnityEngine::Vector3 angles);
    // public System.Void .ctor()
    // Offset: 0xE3285C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMVertexMod* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMVertexMod::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMVertexMod*, creationType>()));
    }
  }; // STMVertexMod
  #pragma pack(pop)
  static check_size<sizeof(STMVertexMod), 96 + sizeof(bool)> __GlobalNamespace_STMVertexModSizeCheck;
  static_assert(sizeof(STMVertexMod) == 0x61);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::STMVertexMod::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMVertexMod::*)()>(&GlobalNamespace::STMVertexMod::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMVertexMod*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMVertexMod::SketchifyVerts
// Il2CppName: SketchifyVerts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMVertexMod::*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>)>(&GlobalNamespace::STMVertexMod::SketchifyVerts)> {
  static const MethodInfo* get() {
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* middles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* positions = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMVertexMod*), "SketchifyVerts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{verts, middles, positions});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMVertexMod::AlignToGrid
// Il2CppName: AlignToGrid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMVertexMod::*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>)>(&GlobalNamespace::STMVertexMod::AlignToGrid)> {
  static const MethodInfo* get() {
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* middles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* positions = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMVertexMod*), "AlignToGrid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{verts, middles, positions});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMVertexMod::RoundDifference
// Il2CppName: RoundDifference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMVertexMod::*)(::UnityEngine::Vector3)>(&GlobalNamespace::STMVertexMod::RoundDifference)> {
  static const MethodInfo* get() {
    static auto* original = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMVertexMod*), "RoundDifference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{original});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMVertexMod::ApplyCurveToVertices
// Il2CppName: ApplyCurveToVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMVertexMod::*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>)>(&GlobalNamespace::STMVertexMod::ApplyCurveToVertices)> {
  static const MethodInfo* get() {
    static auto* verts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* middles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* positions = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMVertexMod*), "ApplyCurveToVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{verts, middles, positions});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMVertexMod::RotatePointAroundPivot
// Il2CppName: RotatePointAroundPivot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::STMVertexMod::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::STMVertexMod::RotatePointAroundPivot)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* myPivot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angles = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMVertexMod*), "RotatePointAroundPivot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, myPivot, angles});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMVertexMod::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
