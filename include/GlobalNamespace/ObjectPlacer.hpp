// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ObjectPlacer
  class ObjectPlacer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ObjectPlacer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ObjectPlacer*, "", "ObjectPlacer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x22
  #pragma pack(push, 1)
  // Autogenerated type: ObjectPlacer
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: ACD434
  class ObjectPlacer : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject go
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* go;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean direct
    // Size: 0x1
    // Offset: 0x20
    bool direct;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean issueGUOs
    // Size: 0x1
    // Offset: 0x21
    bool issueGUOs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject go
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_go();
    // Get instance field reference: public System.Boolean direct
    [[deprecated("Use field access instead!")]] bool& dyn_direct();
    // Get instance field reference: public System.Boolean issueGUOs
    [[deprecated("Use field access instead!")]] bool& dyn_issueGUOs();
    // private System.Void Start()
    // Offset: 0x13975B0
    void Start();
    // private System.Void Update()
    // Offset: 0x13975B4
    void Update();
    // public System.Void PlaceObject()
    // Offset: 0x139763C
    void PlaceObject();
    // public System.Void RemoveObject()
    // Offset: 0x13978D8
    void RemoveObject();
    // public System.Void .ctor()
    // Offset: 0x1397BAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjectPlacer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectPlacer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjectPlacer*, creationType>()));
    }
  }; // ObjectPlacer
  #pragma pack(pop)
  static check_size<sizeof(ObjectPlacer), 33 + sizeof(bool)> __GlobalNamespace_ObjectPlacerSizeCheck;
  static_assert(sizeof(ObjectPlacer) == 0x22);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ObjectPlacer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ObjectPlacer::*)()>(&GlobalNamespace::ObjectPlacer::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPlacer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPlacer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ObjectPlacer::*)()>(&GlobalNamespace::ObjectPlacer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPlacer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPlacer::PlaceObject
// Il2CppName: PlaceObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ObjectPlacer::*)()>(&GlobalNamespace::ObjectPlacer::PlaceObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPlacer*), "PlaceObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPlacer::RemoveObject
// Il2CppName: RemoveObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ObjectPlacer::*)()>(&GlobalNamespace::ObjectPlacer::RemoveObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectPlacer*), "RemoveObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectPlacer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
