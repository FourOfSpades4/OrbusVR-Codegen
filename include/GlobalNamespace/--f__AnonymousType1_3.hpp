// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: <>f__AnonymousType1`3<$pose$j__TPar, $index$j__TPar, $deviceClass$j__TPar>
  template<typename $pose$j__TPar, typename $index$j__TPar, typename $deviceClass$j__TPar>
  class $$f__AnonymousType1_3;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::$$f__AnonymousType1_3, "", "<>f__AnonymousType1`3");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: <>f__AnonymousType1`3
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: ACCA8C
  template<typename $pose$j__TPar, typename $index$j__TPar, typename $deviceClass$j__TPar>
  class $$f__AnonymousType1_3 : public ::Il2CppObject {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0xAD8888
    // private readonly <pose>j__TPar <pose>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $pose$j__TPar $pose$i__Field;
    // [DebuggerBrowsableAttribute] Offset: 0xAD889C
    // private readonly <index>j__TPar <index>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $index$j__TPar $index$i__Field;
    // [DebuggerBrowsableAttribute] Offset: 0xAD88B0
    // private readonly <deviceClass>j__TPar <deviceClass>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $deviceClass$j__TPar $deviceClass$i__Field;
    public:
    // Autogenerated instance field getter
    // Get instance field: private readonly <pose>j__TPar <pose>i__Field
    [[deprecated("Use field access instead!")]] $pose$j__TPar& dyn_$pose$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_3::dyn_$pose$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<pose>i__Field"))->offset;
      return *reinterpret_cast<$pose$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly <index>j__TPar <index>i__Field
    [[deprecated("Use field access instead!")]] $index$j__TPar& dyn_$index$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_3::dyn_$index$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<index>i__Field"))->offset;
      return *reinterpret_cast<$index$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly <deviceClass>j__TPar <deviceClass>i__Field
    [[deprecated("Use field access instead!")]] $deviceClass$j__TPar& dyn_$deviceClass$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_3::dyn_$deviceClass$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<deviceClass>i__Field"))->offset;
      return *reinterpret_cast<$deviceClass$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public <pose>j__TPar get_pose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $pose$j__TPar get_pose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_3::get_pose");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$pose$j__TPar, false>(this, ___internal__method);
    }
    // public <index>j__TPar get_index()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $index$j__TPar get_index() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_3::get_index");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_index", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$index$j__TPar, false>(this, ___internal__method);
    }
    // public <deviceClass>j__TPar get_deviceClass()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $deviceClass$j__TPar get_deviceClass() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_3::get_deviceClass");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deviceClass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$deviceClass$j__TPar, false>(this, ___internal__method);
    }
    // public System.Void .ctor(<pose>j__TPar pose, <index>j__TPar index, <deviceClass>j__TPar deviceClass)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static $$f__AnonymousType1_3<$pose$j__TPar, $index$j__TPar, $deviceClass$j__TPar>* New_ctor($pose$j__TPar pose, $index$j__TPar index, $deviceClass$j__TPar deviceClass) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_3::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<$$f__AnonymousType1_3<$pose$j__TPar, $index$j__TPar, $deviceClass$j__TPar>*, creationType>(pose, index, deviceClass)));
    }
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object value)
    bool Equals(::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_3::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_3::GetHashCode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public override System.String ToString()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_3::ToString");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
  }; // <>f__AnonymousType1`3
  // Could not write size check! Type: <>f__AnonymousType1`3 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
