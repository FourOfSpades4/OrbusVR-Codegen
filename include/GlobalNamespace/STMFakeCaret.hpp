// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SuperTextMesh
  class SuperTextMesh;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: STMFakeCaret
  class STMFakeCaret;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::STMFakeCaret);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::STMFakeCaret*, "", "STMFakeCaret");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: STMFakeCaret
  // [TokenAttribute] Offset: FFFFFFFF
  class STMFakeCaret : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public SuperTextMesh stm
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::SuperTextMesh* stm;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh*) == 0x8);
    // public UnityEngine.Vector3 offset
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public SuperTextMesh stm
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh*& dyn_stm();
    // Get instance field reference: public UnityEngine.Vector3 offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_offset();
    // private System.Void Update()
    // Offset: 0xE2E06C
    void Update();
    // public System.Void .ctor()
    // Offset: 0xE2E3F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMFakeCaret* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMFakeCaret::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMFakeCaret*, creationType>()));
    }
  }; // STMFakeCaret
  #pragma pack(pop)
  static check_size<sizeof(STMFakeCaret), 32 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_STMFakeCaretSizeCheck;
  static_assert(sizeof(STMFakeCaret) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::STMFakeCaret::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMFakeCaret::*)()>(&GlobalNamespace::STMFakeCaret::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMFakeCaret*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMFakeCaret::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
