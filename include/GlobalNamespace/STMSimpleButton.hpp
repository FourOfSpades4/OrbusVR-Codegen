// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: STMSimpleButton
  class STMSimpleButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::STMSimpleButton);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::STMSimpleButton*, "", "STMSimpleButton");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: STMSimpleButton
  // [TokenAttribute] Offset: FFFFFFFF
  class STMSimpleButton : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Events.UnityEvent buttonEvent
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Events::UnityEvent* buttonEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Vector3 normalSize
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 normalSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 mouseoverSize
    // Size: 0xC
    // Offset: 0x2C
    ::UnityEngine::Vector3 mouseoverSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 clickSize
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 clickSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Events.UnityEvent buttonEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_buttonEvent();
    // Get instance field reference: public UnityEngine.Vector3 normalSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_normalSize();
    // Get instance field reference: public UnityEngine.Vector3 mouseoverSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_mouseoverSize();
    // Get instance field reference: public UnityEngine.Vector3 clickSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_clickSize();
    // public System.Void OnMouseEnter()
    // Offset: 0xE3002C
    void OnMouseEnter();
    // public System.Void OnMouseExit()
    // Offset: 0xE30088
    void OnMouseExit();
    // public System.Void OnMouseDown()
    // Offset: 0xE300E4
    void OnMouseDown();
    // public System.Void OnMouseUp()
    // Offset: 0xE3015C
    void OnMouseUp();
    // public System.Void .ctor()
    // Offset: 0xE301B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMSimpleButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMSimpleButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMSimpleButton*, creationType>()));
    }
  }; // STMSimpleButton
  #pragma pack(pop)
  static check_size<sizeof(STMSimpleButton), 56 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_STMSimpleButtonSizeCheck;
  static_assert(sizeof(STMSimpleButton) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::STMSimpleButton::OnMouseEnter
// Il2CppName: OnMouseEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMSimpleButton::*)()>(&GlobalNamespace::STMSimpleButton::OnMouseEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMSimpleButton*), "OnMouseEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMSimpleButton::OnMouseExit
// Il2CppName: OnMouseExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMSimpleButton::*)()>(&GlobalNamespace::STMSimpleButton::OnMouseExit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMSimpleButton*), "OnMouseExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMSimpleButton::OnMouseDown
// Il2CppName: OnMouseDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMSimpleButton::*)()>(&GlobalNamespace::STMSimpleButton::OnMouseDown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMSimpleButton*), "OnMouseDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMSimpleButton::OnMouseUp
// Il2CppName: OnMouseUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMSimpleButton::*)()>(&GlobalNamespace::STMSimpleButton::OnMouseUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMSimpleButton*), "OnMouseUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMSimpleButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
