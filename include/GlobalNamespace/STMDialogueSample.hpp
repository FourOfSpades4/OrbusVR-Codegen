// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.KeyCode
#include "UnityEngine/KeyCode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SuperTextMesh
  class SuperTextMesh;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SpriteRenderer
  class SpriteRenderer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: STMDialogueSample
  class STMDialogueSample;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::STMDialogueSample);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::STMDialogueSample*, "", "STMDialogueSample");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: STMDialogueSample
  // [TokenAttribute] Offset: FFFFFFFF
  class STMDialogueSample : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public SuperTextMesh textMesh
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::SuperTextMesh* textMesh;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh*) == 0x8);
    // public UnityEngine.KeyCode advanceKey
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::KeyCode advanceKey;
    // Field size check
    static_assert(sizeof(::UnityEngine::KeyCode) == 0x4);
    // Padding between fields: advanceKey and: advanceKeySprite
    char __padding1[0x4] = {};
    // public UnityEngine.SpriteRenderer advanceKeySprite
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::SpriteRenderer* advanceKeySprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::SpriteRenderer*) == 0x8);
    // private UnityEngine.Vector3 advanceKeyStartScale
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 advanceKeyStartScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 advanceKeyScale
    // Size: 0xC
    // Offset: 0x3C
    ::UnityEngine::Vector3 advanceKeyScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single advanceKeyTime
    // Size: 0x4
    // Offset: 0x48
    float advanceKeyTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: advanceKeyTime and: lines
    char __padding5[0x4] = {};
    // public System.String[] lines
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::StringW> lines;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.Int32 currentLine
    // Size: 0x4
    // Offset: 0x58
    int currentLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public SuperTextMesh textMesh
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh*& dyn_textMesh();
    // Get instance field reference: public UnityEngine.KeyCode advanceKey
    [[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& dyn_advanceKey();
    // Get instance field reference: public UnityEngine.SpriteRenderer advanceKeySprite
    [[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& dyn_advanceKeySprite();
    // Get instance field reference: private UnityEngine.Vector3 advanceKeyStartScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_advanceKeyStartScale();
    // Get instance field reference: public UnityEngine.Vector3 advanceKeyScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_advanceKeyScale();
    // Get instance field reference: public System.Single advanceKeyTime
    [[deprecated("Use field access instead!")]] float& dyn_advanceKeyTime();
    // Get instance field reference: public System.String[] lines
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_lines();
    // Get instance field reference: private System.Int32 currentLine
    [[deprecated("Use field access instead!")]] int& dyn_currentLine();
    // private System.Void Start()
    // Offset: 0xE2BE20
    void Start();
    // public System.Void CompletedDrawing()
    // Offset: 0xE2BF24
    void CompletedDrawing();
    // public System.Void CompletedUnreading()
    // Offset: 0xE2BF90
    void CompletedUnreading();
    // private System.Void Apply()
    // Offset: 0xE2BE7C
    void Apply();
    // private System.Void Update()
    // Offset: 0xE2C008
    void Update();
    // public System.Void .ctor()
    // Offset: 0xE2C2B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMDialogueSample* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMDialogueSample::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMDialogueSample*, creationType>()));
    }
  }; // STMDialogueSample
  #pragma pack(pop)
  static check_size<sizeof(STMDialogueSample), 88 + sizeof(int)> __GlobalNamespace_STMDialogueSampleSizeCheck;
  static_assert(sizeof(STMDialogueSample) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::STMDialogueSample::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMDialogueSample::*)()>(&GlobalNamespace::STMDialogueSample::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMDialogueSample*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMDialogueSample::CompletedDrawing
// Il2CppName: CompletedDrawing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMDialogueSample::*)()>(&GlobalNamespace::STMDialogueSample::CompletedDrawing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMDialogueSample*), "CompletedDrawing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMDialogueSample::CompletedUnreading
// Il2CppName: CompletedUnreading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMDialogueSample::*)()>(&GlobalNamespace::STMDialogueSample::CompletedUnreading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMDialogueSample*), "CompletedUnreading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMDialogueSample::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMDialogueSample::*)()>(&GlobalNamespace::STMDialogueSample::Apply)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMDialogueSample*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMDialogueSample::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMDialogueSample::*)()>(&GlobalNamespace::STMDialogueSample::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMDialogueSample*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMDialogueSample::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
