// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Grabber
  class Grabber;
  // Forward declaring type: LongDistanceTeleporter
  class LongDistanceTeleporter;
  // Forward declaring type: Portal
  class Portal;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ActionOpenDoor
  class ActionOpenDoor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ActionOpenDoor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ActionOpenDoor*, "", "ActionOpenDoor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x81
  #pragma pack(push, 1)
  // Autogenerated type: ActionOpenDoor
  // [TokenAttribute] Offset: FFFFFFFF
  class ActionOpenDoor : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MagicalActual.Grabber attachedToPlayer
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::Grabber* attachedToPlayer;
    // Field size check
    static_assert(sizeof(::MagicalActual::Grabber*) == 0x8);
    // public UnityEngine.GameObject door
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* door;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single startZPosition
    // Size: 0x4
    // Offset: 0x28
    float startZPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single startZRotation
    // Size: 0x4
    // Offset: 0x2C
    float startZRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.GameObject placeholdergo
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* placeholdergo;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject teleportDestination
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* teleportDestination;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Vector3 teleportLocation
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 teleportLocation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean destinationIsIndoors
    // Size: 0x1
    // Offset: 0x4C
    bool destinationIsIndoors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: destinationIsIndoors and: keyItemId
    char __padding7[0x3] = {};
    // public System.Int32 keyItemId
    // Size: 0x4
    // Offset: 0x50
    int keyItemId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: keyItemId and: myTeleporter
    char __padding8[0x4] = {};
    // private MagicalActual.LongDistanceTeleporter myTeleporter
    // Size: 0x8
    // Offset: 0x58
    ::MagicalActual::LongDistanceTeleporter* myTeleporter;
    // Field size check
    static_assert(sizeof(::MagicalActual::LongDistanceTeleporter*) == 0x8);
    // private MagicalActual.Portal myPortal
    // Size: 0x8
    // Offset: 0x60
    ::MagicalActual::Portal* myPortal;
    // Field size check
    static_assert(sizeof(::MagicalActual::Portal*) == 0x8);
    // private System.Single baseXRotation
    // Size: 0x4
    // Offset: 0x68
    float baseXRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single baseYRotation
    // Size: 0x4
    // Offset: 0x6C
    float baseYRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single baseZRotation
    // Size: 0x4
    // Offset: 0x70
    float baseZRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 startPosition
    // Size: 0xC
    // Offset: 0x74
    ::UnityEngine::Vector3 startPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean wasAttachedToPlayer
    // Size: 0x1
    // Offset: 0x80
    bool wasAttachedToPlayer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MagicalActual.Grabber attachedToPlayer
    [[deprecated("Use field access instead!")]] ::MagicalActual::Grabber*& dyn_attachedToPlayer();
    // Get instance field reference: public UnityEngine.GameObject door
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_door();
    // Get instance field reference: private System.Single startZPosition
    [[deprecated("Use field access instead!")]] float& dyn_startZPosition();
    // Get instance field reference: private System.Single startZRotation
    [[deprecated("Use field access instead!")]] float& dyn_startZRotation();
    // Get instance field reference: private UnityEngine.GameObject placeholdergo
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_placeholdergo();
    // Get instance field reference: public UnityEngine.GameObject teleportDestination
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_teleportDestination();
    // Get instance field reference: public UnityEngine.Vector3 teleportLocation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_teleportLocation();
    // Get instance field reference: public System.Boolean destinationIsIndoors
    [[deprecated("Use field access instead!")]] bool& dyn_destinationIsIndoors();
    // Get instance field reference: public System.Int32 keyItemId
    [[deprecated("Use field access instead!")]] int& dyn_keyItemId();
    // Get instance field reference: private MagicalActual.LongDistanceTeleporter myTeleporter
    [[deprecated("Use field access instead!")]] ::MagicalActual::LongDistanceTeleporter*& dyn_myTeleporter();
    // Get instance field reference: private MagicalActual.Portal myPortal
    [[deprecated("Use field access instead!")]] ::MagicalActual::Portal*& dyn_myPortal();
    // Get instance field reference: private System.Single baseXRotation
    [[deprecated("Use field access instead!")]] float& dyn_baseXRotation();
    // Get instance field reference: private System.Single baseYRotation
    [[deprecated("Use field access instead!")]] float& dyn_baseYRotation();
    // Get instance field reference: private System.Single baseZRotation
    [[deprecated("Use field access instead!")]] float& dyn_baseZRotation();
    // Get instance field reference: private UnityEngine.Vector3 startPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startPosition();
    // Get instance field reference: private System.Boolean wasAttachedToPlayer
    [[deprecated("Use field access instead!")]] bool& dyn_wasAttachedToPlayer();
    // private System.Void Start()
    // Offset: 0xEF4224
    void Start();
    // public System.Void doGripInteraction(UnityEngine.GameObject sender)
    // Offset: 0xEF433C
    void doGripInteraction(::UnityEngine::GameObject* sender);
    // public System.Void doUnGripInteraction(UnityEngine.GameObject sender)
    // Offset: 0xEF4530
    void doUnGripInteraction(::UnityEngine::GameObject* sender);
    // private System.Void TeleportTo(UnityEngine.Vector3 position)
    // Offset: 0xEF463C
    void TeleportTo(::UnityEngine::Vector3 position);
    // private System.Void FixedUpdate()
    // Offset: 0xEF4794
    void FixedUpdate();
    // public System.Void .ctor()
    // Offset: 0xEF4BA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActionOpenDoor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ActionOpenDoor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActionOpenDoor*, creationType>()));
    }
  }; // ActionOpenDoor
  #pragma pack(pop)
  static check_size<sizeof(ActionOpenDoor), 128 + sizeof(bool)> __GlobalNamespace_ActionOpenDoorSizeCheck;
  static_assert(sizeof(ActionOpenDoor) == 0x81);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ActionOpenDoor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ActionOpenDoor::*)()>(&GlobalNamespace::ActionOpenDoor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ActionOpenDoor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ActionOpenDoor::doGripInteraction
// Il2CppName: doGripInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ActionOpenDoor::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::ActionOpenDoor::doGripInteraction)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ActionOpenDoor*), "doGripInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ActionOpenDoor::doUnGripInteraction
// Il2CppName: doUnGripInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ActionOpenDoor::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::ActionOpenDoor::doUnGripInteraction)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ActionOpenDoor*), "doUnGripInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ActionOpenDoor::TeleportTo
// Il2CppName: TeleportTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ActionOpenDoor::*)(::UnityEngine::Vector3)>(&GlobalNamespace::ActionOpenDoor::TeleportTo)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ActionOpenDoor*), "TeleportTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ActionOpenDoor::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ActionOpenDoor::*)()>(&GlobalNamespace::ActionOpenDoor::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ActionOpenDoor*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ActionOpenDoor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
