// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: UnityMainThreadDispatcher
  class UnityMainThreadDispatcher;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::UnityMainThreadDispatcher);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::UnityMainThreadDispatcher*, "", "UnityMainThreadDispatcher");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityMainThreadDispatcher
  // [TokenAttribute] Offset: FFFFFFFF
  class UnityMainThreadDispatcher : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::UnityMainThreadDispatcher::$$c__DisplayClass2_0
    class $$c__DisplayClass2_0;
    // Nested type: ::GlobalNamespace::UnityMainThreadDispatcher::$ActionWrapper$d__4
    class $ActionWrapper$d__4;
    // Get static field: static private readonly System.Collections.Generic.Queue`1<System.Action> _executionQueue
    static ::System::Collections::Generic::Queue_1<::System::Action*>* _get__executionQueue();
    // Set static field: static private readonly System.Collections.Generic.Queue`1<System.Action> _executionQueue
    static void _set__executionQueue(::System::Collections::Generic::Queue_1<::System::Action*>* value);
    // Get static field: static private UnityMainThreadDispatcher _instance
    static ::GlobalNamespace::UnityMainThreadDispatcher* _get__instance();
    // Set static field: static private UnityMainThreadDispatcher _instance
    static void _set__instance(::GlobalNamespace::UnityMainThreadDispatcher* value);
    // public System.Void Update()
    // Offset: 0xFE5860
    void Update();
    // public System.Void Enqueue(System.Collections.IEnumerator action)
    // Offset: 0xFE59F8
    void Enqueue(::System::Collections::IEnumerator* action);
    // public System.Void Enqueue(System.Action action)
    // Offset: 0xFE5BA4
    void Enqueue(::System::Action* action);
    // private System.Collections.IEnumerator ActionWrapper(System.Action a)
    // Offset: 0xFE5BCC
    ::System::Collections::IEnumerator* ActionWrapper(::System::Action* a);
    // static public System.Boolean Exists()
    // Offset: 0xFE5C6C
    static bool Exists();
    // static public UnityMainThreadDispatcher Instance()
    // Offset: 0xFE5D04
    static ::GlobalNamespace::UnityMainThreadDispatcher* Instance();
    // private System.Void Awake()
    // Offset: 0xFE5DD0
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0xFE5EA0
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0xFE5F08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnityMainThreadDispatcher* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnityMainThreadDispatcher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnityMainThreadDispatcher*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0xFE5F10
    static void _cctor();
  }; // UnityMainThreadDispatcher
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::UnityMainThreadDispatcher::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UnityMainThreadDispatcher::*)()>(&GlobalNamespace::UnityMainThreadDispatcher::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UnityMainThreadDispatcher*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UnityMainThreadDispatcher::Enqueue
// Il2CppName: Enqueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UnityMainThreadDispatcher::*)(::System::Collections::IEnumerator*)>(&GlobalNamespace::UnityMainThreadDispatcher::Enqueue)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System.Collections", "IEnumerator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UnityMainThreadDispatcher*), "Enqueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UnityMainThreadDispatcher::Enqueue
// Il2CppName: Enqueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UnityMainThreadDispatcher::*)(::System::Action*)>(&GlobalNamespace::UnityMainThreadDispatcher::Enqueue)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UnityMainThreadDispatcher*), "Enqueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UnityMainThreadDispatcher::ActionWrapper
// Il2CppName: ActionWrapper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::UnityMainThreadDispatcher::*)(::System::Action*)>(&GlobalNamespace::UnityMainThreadDispatcher::ActionWrapper)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UnityMainThreadDispatcher*), "ActionWrapper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UnityMainThreadDispatcher::Exists
// Il2CppName: Exists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::UnityMainThreadDispatcher::Exists)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UnityMainThreadDispatcher*), "Exists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UnityMainThreadDispatcher::Instance
// Il2CppName: Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::UnityMainThreadDispatcher* (*)()>(&GlobalNamespace::UnityMainThreadDispatcher::Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UnityMainThreadDispatcher*), "Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UnityMainThreadDispatcher::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UnityMainThreadDispatcher::*)()>(&GlobalNamespace::UnityMainThreadDispatcher::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UnityMainThreadDispatcher*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UnityMainThreadDispatcher::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UnityMainThreadDispatcher::*)()>(&GlobalNamespace::UnityMainThreadDispatcher::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UnityMainThreadDispatcher*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UnityMainThreadDispatcher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::UnityMainThreadDispatcher::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::UnityMainThreadDispatcher::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UnityMainThreadDispatcher*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
