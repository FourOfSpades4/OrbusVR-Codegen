// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: STMWaveData
  class STMWaveData;
  // Forward declaring type: STMJitterData
  class STMJitterData;
  // Forward declaring type: STMDrawAnimData
  class STMDrawAnimData;
  // Forward declaring type: STMColorData
  class STMColorData;
  // Forward declaring type: STMGradientData
  class STMGradientData;
  // Forward declaring type: STMTextureData
  class STMTextureData;
  // Forward declaring type: STMDelayData
  class STMDelayData;
  // Forward declaring type: STMVoiceData
  class STMVoiceData;
  // Forward declaring type: STMFontData
  class STMFontData;
  // Forward declaring type: STMSoundClipData
  class STMSoundClipData;
  // Forward declaring type: STMAudioClipData
  class STMAudioClipData;
  // Forward declaring type: STMQuadData
  class STMQuadData;
  // Forward declaring type: STMMaterialData
  class STMMaterialData;
  // Forward declaring type: STMAutoClipData
  class STMAutoClipData;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Font
  class Font;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SuperTextMeshData
  class SuperTextMeshData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SuperTextMeshData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SuperTextMeshData*, "", "SuperTextMeshData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x148
  #pragma pack(push, 1)
  // Autogenerated type: SuperTextMeshData
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: ACDC28
  class SuperTextMeshData : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::GlobalNamespace::SuperTextMeshData::$$c
    class $$c;
    public:
    // public System.Boolean textDataEditMode
    // Size: 0x1
    // Offset: 0x18
    bool textDataEditMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showEffectsFoldout
    // Size: 0x1
    // Offset: 0x19
    bool showEffectsFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showWavesFoldout
    // Size: 0x1
    // Offset: 0x1A
    bool showWavesFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showWavesFoldout and: waves
    char __padding2[0x5] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,STMWaveData> waves
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMWaveData*>* waves;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMWaveData*>*) == 0x8);
    // public System.Boolean showJittersFoldout
    // Size: 0x1
    // Offset: 0x28
    bool showJittersFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showJittersFoldout and: jitters
    char __padding4[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,STMJitterData> jitters
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMJitterData*>* jitters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMJitterData*>*) == 0x8);
    // public System.Boolean showDrawAnimsFoldout
    // Size: 0x1
    // Offset: 0x38
    bool showDrawAnimsFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showDrawAnimsFoldout and: drawAnims
    char __padding6[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,STMDrawAnimData> drawAnims
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMDrawAnimData*>* drawAnims;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMDrawAnimData*>*) == 0x8);
    // public System.Boolean showTextColorFoldout
    // Size: 0x1
    // Offset: 0x48
    bool showTextColorFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showColorsFoldout
    // Size: 0x1
    // Offset: 0x49
    bool showColorsFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showColorsFoldout and: colors
    char __padding9[0x6] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,STMColorData> colors
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMColorData*>* colors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMColorData*>*) == 0x8);
    // public System.Boolean showGradientsFoldout
    // Size: 0x1
    // Offset: 0x58
    bool showGradientsFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showGradientsFoldout and: gradients
    char __padding11[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,STMGradientData> gradients
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMGradientData*>* gradients;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMGradientData*>*) == 0x8);
    // public System.Boolean showTexturesFoldout
    // Size: 0x1
    // Offset: 0x68
    bool showTexturesFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showTexturesFoldout and: textures
    char __padding13[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,STMTextureData> textures
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMTextureData*>* textures;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMTextureData*>*) == 0x8);
    // public System.Boolean showInlineFoldout
    // Size: 0x1
    // Offset: 0x78
    bool showInlineFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showDelaysFoldout
    // Size: 0x1
    // Offset: 0x79
    bool showDelaysFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showDelaysFoldout and: delays
    char __padding16[0x6] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,STMDelayData> delays
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMDelayData*>* delays;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMDelayData*>*) == 0x8);
    // public System.Boolean showVoicesFoldout
    // Size: 0x1
    // Offset: 0x88
    bool showVoicesFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showVoicesFoldout and: voices
    char __padding18[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,STMVoiceData> voices
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMVoiceData*>* voices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMVoiceData*>*) == 0x8);
    // public System.Boolean showFontsFoldout
    // Size: 0x1
    // Offset: 0x98
    bool showFontsFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showFontsFoldout and: fonts
    char __padding20[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,STMFontData> fonts
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMFontData*>* fonts;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMFontData*>*) == 0x8);
    // public System.Boolean showSoundClipsFoldout
    // Size: 0x1
    // Offset: 0xA8
    bool showSoundClipsFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showSoundClipsFoldout and: soundClips
    char __padding22[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,STMSoundClipData> soundClips
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMSoundClipData*>* soundClips;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMSoundClipData*>*) == 0x8);
    // public System.Boolean showAudioClipsFoldout
    // Size: 0x1
    // Offset: 0xB8
    bool showAudioClipsFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showAudioClipsFoldout and: audioClips
    char __padding24[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,STMAudioClipData> audioClips
    // Size: 0x8
    // Offset: 0xC0
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMAudioClipData*>* audioClips;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMAudioClipData*>*) == 0x8);
    // public System.Boolean showQuadsFoldout
    // Size: 0x1
    // Offset: 0xC8
    bool showQuadsFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showQuadsFoldout and: quads
    char __padding26[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,STMQuadData> quads
    // Size: 0x8
    // Offset: 0xD0
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMQuadData*>* quads;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMQuadData*>*) == 0x8);
    // public System.Boolean showMaterialsFoldout
    // Size: 0x1
    // Offset: 0xD8
    bool showMaterialsFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showMaterialsFoldout and: materials
    char __padding28[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,STMMaterialData> materials
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMMaterialData*>* materials;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMMaterialData*>*) == 0x8);
    // public System.Boolean showAutomaticFoldout
    // Size: 0x1
    // Offset: 0xE8
    bool showAutomaticFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean showAutoClipsFoldout
    // Size: 0x1
    // Offset: 0xE9
    bool showAutoClipsFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showAutoClipsFoldout and: autoClips
    char __padding31[0x6] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,STMAutoClipData> autoClips
    // Size: 0x8
    // Offset: 0xF0
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMAutoClipData*>* autoClips;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMAutoClipData*>*) == 0x8);
    // public System.Boolean showAutoDelaysFoldout
    // Size: 0x1
    // Offset: 0xF8
    bool showAutoDelaysFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showAutoDelaysFoldout and: autoDelays
    char __padding33[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,STMDelayData> autoDelays
    // Size: 0x8
    // Offset: 0x100
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMDelayData*>* autoDelays;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMDelayData*>*) == 0x8);
    // public System.Boolean showMasterFoldout
    // Size: 0x1
    // Offset: 0x108
    bool showMasterFoldout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xADA010
    // public System.Boolean disableAnimatedText
    // Size: 0x1
    // Offset: 0x109
    bool disableAnimatedText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disableAnimatedText and: defaultFont
    char __padding36[0x6] = {};
    // public UnityEngine.Font defaultFont
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::Font* defaultFont;
    // Field size check
    static_assert(sizeof(::UnityEngine::Font*) == 0x8);
    // public UnityEngine.Color boundsColor
    // Size: 0x10
    // Offset: 0x118
    ::UnityEngine::Color boundsColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color textBoundsColor
    // Size: 0x10
    // Offset: 0x128
    ::UnityEngine::Color textBoundsColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color finalTextBoundsColor
    // Size: 0x10
    // Offset: 0x138
    ::UnityEngine::Color finalTextBoundsColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean textDataEditMode
    [[deprecated("Use field access instead!")]] bool& dyn_textDataEditMode();
    // Get instance field reference: public System.Boolean showEffectsFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showEffectsFoldout();
    // Get instance field reference: public System.Boolean showWavesFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showWavesFoldout();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,STMWaveData> waves
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMWaveData*>*& dyn_waves();
    // Get instance field reference: public System.Boolean showJittersFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showJittersFoldout();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,STMJitterData> jitters
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMJitterData*>*& dyn_jitters();
    // Get instance field reference: public System.Boolean showDrawAnimsFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showDrawAnimsFoldout();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,STMDrawAnimData> drawAnims
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMDrawAnimData*>*& dyn_drawAnims();
    // Get instance field reference: public System.Boolean showTextColorFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showTextColorFoldout();
    // Get instance field reference: public System.Boolean showColorsFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showColorsFoldout();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,STMColorData> colors
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMColorData*>*& dyn_colors();
    // Get instance field reference: public System.Boolean showGradientsFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showGradientsFoldout();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,STMGradientData> gradients
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMGradientData*>*& dyn_gradients();
    // Get instance field reference: public System.Boolean showTexturesFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showTexturesFoldout();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,STMTextureData> textures
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMTextureData*>*& dyn_textures();
    // Get instance field reference: public System.Boolean showInlineFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showInlineFoldout();
    // Get instance field reference: public System.Boolean showDelaysFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showDelaysFoldout();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,STMDelayData> delays
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMDelayData*>*& dyn_delays();
    // Get instance field reference: public System.Boolean showVoicesFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showVoicesFoldout();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,STMVoiceData> voices
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMVoiceData*>*& dyn_voices();
    // Get instance field reference: public System.Boolean showFontsFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showFontsFoldout();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,STMFontData> fonts
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMFontData*>*& dyn_fonts();
    // Get instance field reference: public System.Boolean showSoundClipsFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showSoundClipsFoldout();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,STMSoundClipData> soundClips
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMSoundClipData*>*& dyn_soundClips();
    // Get instance field reference: public System.Boolean showAudioClipsFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showAudioClipsFoldout();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,STMAudioClipData> audioClips
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMAudioClipData*>*& dyn_audioClips();
    // Get instance field reference: public System.Boolean showQuadsFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showQuadsFoldout();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,STMQuadData> quads
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMQuadData*>*& dyn_quads();
    // Get instance field reference: public System.Boolean showMaterialsFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showMaterialsFoldout();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,STMMaterialData> materials
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMMaterialData*>*& dyn_materials();
    // Get instance field reference: public System.Boolean showAutomaticFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showAutomaticFoldout();
    // Get instance field reference: public System.Boolean showAutoClipsFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showAutoClipsFoldout();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,STMAutoClipData> autoClips
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMAutoClipData*>*& dyn_autoClips();
    // Get instance field reference: public System.Boolean showAutoDelaysFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showAutoDelaysFoldout();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,STMDelayData> autoDelays
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::STMDelayData*>*& dyn_autoDelays();
    // Get instance field reference: public System.Boolean showMasterFoldout
    [[deprecated("Use field access instead!")]] bool& dyn_showMasterFoldout();
    // Get instance field reference: public System.Boolean disableAnimatedText
    [[deprecated("Use field access instead!")]] bool& dyn_disableAnimatedText();
    // Get instance field reference: public UnityEngine.Font defaultFont
    [[deprecated("Use field access instead!")]] ::UnityEngine::Font*& dyn_defaultFont();
    // Get instance field reference: public UnityEngine.Color boundsColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_boundsColor();
    // Get instance field reference: public UnityEngine.Color textBoundsColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_textBoundsColor();
    // Get instance field reference: public UnityEngine.Color finalTextBoundsColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_finalTextBoundsColor();
    // public System.Void RebuildDictionaries()
    // Offset: 0x103AB64
    void RebuildDictionaries();
    // public System.Void .ctor()
    // Offset: 0x103C028
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SuperTextMeshData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SuperTextMeshData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SuperTextMeshData*, creationType>()));
    }
  }; // SuperTextMeshData
  #pragma pack(pop)
  static check_size<sizeof(SuperTextMeshData), 312 + sizeof(::UnityEngine::Color)> __GlobalNamespace_SuperTextMeshDataSizeCheck;
  static_assert(sizeof(SuperTextMeshData) == 0x148);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMeshData::RebuildDictionaries
// Il2CppName: RebuildDictionaries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SuperTextMeshData::*)()>(&GlobalNamespace::SuperTextMeshData::RebuildDictionaries)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SuperTextMeshData*), "RebuildDictionaries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SuperTextMeshData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
