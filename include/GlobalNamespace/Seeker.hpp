// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: StartEndModifier
  class StartEndModifier;
  // Forward declaring type: TagMask
  class TagMask;
  // Forward declaring type: OnPathDelegate
  class OnPathDelegate;
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: Path
  class Path;
  // Forward declaring type: IPathModifier
  class IPathModifier;
  // Forward declaring type: ABPath
  class ABPath;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Seeker
  class Seeker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Seeker);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Seeker*, "", "Seeker");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: Seeker
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: ACCFA8
  // [HelpURLAttribute] Offset: ACCFA8
  class Seeker : public ::UnityEngine::MonoBehaviour/*, public ::UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    // Nested type: ::GlobalNamespace::Seeker::ModifierPass
    struct ModifierPass;
    // Nested type: ::GlobalNamespace::Seeker::$$c
    class $$c;
    public:
    // public System.Boolean drawGizmos
    // Size: 0x1
    // Offset: 0x18
    bool drawGizmos;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean detailedGizmos
    // Size: 0x1
    // Offset: 0x19
    bool detailedGizmos;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: detailedGizmos and: startEndModifier
    char __padding1[0x6] = {};
    // public Pathfinding.StartEndModifier startEndModifier
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::StartEndModifier* startEndModifier;
    // Field size check
    static_assert(sizeof(::Pathfinding::StartEndModifier*) == 0x8);
    // public System.Int32 traversableTags
    // Size: 0x4
    // Offset: 0x28
    int traversableTags;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: traversableTags and: traversableTagsCompatibility
    char __padding3[0x4] = {};
    // [FormerlySerializedAsAttribute] Offset: 0xAD89EC
    // protected Pathfinding.TagMask traversableTagsCompatibility
    // Size: 0x8
    // Offset: 0x30
    ::Pathfinding::TagMask* traversableTagsCompatibility;
    // Field size check
    static_assert(sizeof(::Pathfinding::TagMask*) == 0x8);
    // public System.Int32[] tagPenalties
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<int> tagPenalties;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public Pathfinding.OnPathDelegate pathCallback
    // Size: 0x8
    // Offset: 0x40
    ::Pathfinding::OnPathDelegate* pathCallback;
    // Field size check
    static_assert(sizeof(::Pathfinding::OnPathDelegate*) == 0x8);
    // public Pathfinding.OnPathDelegate preProcessPath
    // Size: 0x8
    // Offset: 0x48
    ::Pathfinding::OnPathDelegate* preProcessPath;
    // Field size check
    static_assert(sizeof(::Pathfinding::OnPathDelegate*) == 0x8);
    // public Pathfinding.OnPathDelegate postProcessPath
    // Size: 0x8
    // Offset: 0x50
    ::Pathfinding::OnPathDelegate* postProcessPath;
    // Field size check
    static_assert(sizeof(::Pathfinding::OnPathDelegate*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> lastCompletedVectorPath
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* lastCompletedVectorPath;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // private System.Collections.Generic.List`1<Pathfinding.GraphNode> lastCompletedNodePath
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* lastCompletedNodePath;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*) == 0x8);
    // protected Pathfinding.Path path
    // Size: 0x8
    // Offset: 0x68
    ::Pathfinding::Path* path;
    // Field size check
    static_assert(sizeof(::Pathfinding::Path*) == 0x8);
    // private Pathfinding.Path prevPath
    // Size: 0x8
    // Offset: 0x70
    ::Pathfinding::Path* prevPath;
    // Field size check
    static_assert(sizeof(::Pathfinding::Path*) == 0x8);
    // private readonly Pathfinding.OnPathDelegate onPathDelegate
    // Size: 0x8
    // Offset: 0x78
    ::Pathfinding::OnPathDelegate* onPathDelegate;
    // Field size check
    static_assert(sizeof(::Pathfinding::OnPathDelegate*) == 0x8);
    // private Pathfinding.OnPathDelegate tmpPathCallback
    // Size: 0x8
    // Offset: 0x80
    ::Pathfinding::OnPathDelegate* tmpPathCallback;
    // Field size check
    static_assert(sizeof(::Pathfinding::OnPathDelegate*) == 0x8);
    // protected System.UInt32 lastPathID
    // Size: 0x4
    // Offset: 0x88
    uint lastPathID;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: lastPathID and: modifiers
    char __padding15[0x4] = {};
    // private readonly System.Collections.Generic.List`1<Pathfinding.IPathModifier> modifiers
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::List_1<::Pathfinding::IPathModifier*>* modifiers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::IPathModifier*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean drawGizmos
    [[deprecated("Use field access instead!")]] bool& dyn_drawGizmos();
    // Get instance field reference: public System.Boolean detailedGizmos
    [[deprecated("Use field access instead!")]] bool& dyn_detailedGizmos();
    // Get instance field reference: public Pathfinding.StartEndModifier startEndModifier
    [[deprecated("Use field access instead!")]] ::Pathfinding::StartEndModifier*& dyn_startEndModifier();
    // Get instance field reference: public System.Int32 traversableTags
    [[deprecated("Use field access instead!")]] int& dyn_traversableTags();
    // Get instance field reference: protected Pathfinding.TagMask traversableTagsCompatibility
    [[deprecated("Use field access instead!")]] ::Pathfinding::TagMask*& dyn_traversableTagsCompatibility();
    // Get instance field reference: public System.Int32[] tagPenalties
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_tagPenalties();
    // Get instance field reference: public Pathfinding.OnPathDelegate pathCallback
    [[deprecated("Use field access instead!")]] ::Pathfinding::OnPathDelegate*& dyn_pathCallback();
    // Get instance field reference: public Pathfinding.OnPathDelegate preProcessPath
    [[deprecated("Use field access instead!")]] ::Pathfinding::OnPathDelegate*& dyn_preProcessPath();
    // Get instance field reference: public Pathfinding.OnPathDelegate postProcessPath
    [[deprecated("Use field access instead!")]] ::Pathfinding::OnPathDelegate*& dyn_postProcessPath();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector3> lastCompletedVectorPath
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_lastCompletedVectorPath();
    // Get instance field reference: private System.Collections.Generic.List`1<Pathfinding.GraphNode> lastCompletedNodePath
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*& dyn_lastCompletedNodePath();
    // Get instance field reference: protected Pathfinding.Path path
    [[deprecated("Use field access instead!")]] ::Pathfinding::Path*& dyn_path();
    // Get instance field reference: private Pathfinding.Path prevPath
    [[deprecated("Use field access instead!")]] ::Pathfinding::Path*& dyn_prevPath();
    // Get instance field reference: private readonly Pathfinding.OnPathDelegate onPathDelegate
    [[deprecated("Use field access instead!")]] ::Pathfinding::OnPathDelegate*& dyn_onPathDelegate();
    // Get instance field reference: private Pathfinding.OnPathDelegate tmpPathCallback
    [[deprecated("Use field access instead!")]] ::Pathfinding::OnPathDelegate*& dyn_tmpPathCallback();
    // Get instance field reference: protected System.UInt32 lastPathID
    [[deprecated("Use field access instead!")]] uint& dyn_lastPathID();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<Pathfinding.IPathModifier> modifiers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::IPathModifier*>*& dyn_modifiers();
    // public System.Void .ctor()
    // Offset: 0xE3438C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Seeker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Seeker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Seeker*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xE344A0
    void Awake();
    // public Pathfinding.Path GetCurrentPath()
    // Offset: 0xE344D8
    ::Pathfinding::Path* GetCurrentPath();
    // public System.Void OnDestroy()
    // Offset: 0xE344E0
    void OnDestroy();
    // public System.Void ReleaseClaimedPath()
    // Offset: 0xE34534
    void ReleaseClaimedPath();
    // public System.Void RegisterModifier(Pathfinding.IPathModifier mod)
    // Offset: 0xE3456C
    void RegisterModifier(::Pathfinding::IPathModifier* mod);
    // public System.Void DeregisterModifier(Pathfinding.IPathModifier mod)
    // Offset: 0xE3469C
    void DeregisterModifier(::Pathfinding::IPathModifier* mod);
    // public System.Void PostProcess(Pathfinding.Path p)
    // Offset: 0xE3470C
    void PostProcess(::Pathfinding::Path* p);
    // public System.Void RunModifiers(Seeker/ModifierPass pass, Pathfinding.Path p)
    // Offset: 0xE3471C
    void RunModifiers(::GlobalNamespace::Seeker::ModifierPass pass, ::Pathfinding::Path* p);
    // public System.Boolean IsDone()
    // Offset: 0xE349C0
    bool IsDone();
    // private System.Void OnPathComplete(Pathfinding.Path p)
    // Offset: 0xE349F0
    void OnPathComplete(::Pathfinding::Path* p);
    // private System.Void OnPathComplete(Pathfinding.Path p, System.Boolean runModifiers, System.Boolean sendCallbacks)
    // Offset: 0xE349FC
    void OnPathComplete(::Pathfinding::Path* p, bool runModifiers, bool sendCallbacks);
    // public Pathfinding.ABPath GetNewPath(UnityEngine.Vector3 start, UnityEngine.Vector3 end)
    // Offset: 0xE34B6C
    ::Pathfinding::ABPath* GetNewPath(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end);
    // public Pathfinding.Path StartPath(UnityEngine.Vector3 start, UnityEngine.Vector3 end)
    // Offset: 0xE34B78
    ::Pathfinding::Path* StartPath(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end);
    // public Pathfinding.Path StartPath(UnityEngine.Vector3 start, UnityEngine.Vector3 end, Pathfinding.OnPathDelegate callback)
    // Offset: 0xE34BF8
    ::Pathfinding::Path* StartPath(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::Pathfinding::OnPathDelegate* callback);
    // public Pathfinding.Path StartPath(UnityEngine.Vector3 start, UnityEngine.Vector3 end, Pathfinding.OnPathDelegate callback, System.Int32 graphMask)
    // Offset: 0xE34BB0
    ::Pathfinding::Path* StartPath(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::Pathfinding::OnPathDelegate* callback, int graphMask);
    // public Pathfinding.Path StartPath(Pathfinding.Path p, Pathfinding.OnPathDelegate callback, System.Int32 graphMask)
    // Offset: 0xE34C34
    ::Pathfinding::Path* StartPath(::Pathfinding::Path* p, ::Pathfinding::OnPathDelegate* callback, int graphMask);
    // private System.Void StartPathInternal(Pathfinding.Path p, Pathfinding.OnPathDelegate callback)
    // Offset: 0xE34DA8
    void StartPathInternal(::Pathfinding::Path* p, ::Pathfinding::OnPathDelegate* callback);
    // public System.Void OnDrawGizmos()
    // Offset: 0xE34EEC
    void OnDrawGizmos();
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
    // Offset: 0xE351D0
    void UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize();
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
    // Offset: 0xE351D4
    void UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize();
  }; // Seeker
  #pragma pack(pop)
  static check_size<sizeof(Seeker), 144 + sizeof(::System::Collections::Generic::List_1<::Pathfinding::IPathModifier*>*)> __GlobalNamespace_SeekerSizeCheck;
  static_assert(sizeof(Seeker) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Seeker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Seeker::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Seeker::*)()>(&GlobalNamespace::Seeker::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::GetCurrentPath
// Il2CppName: GetCurrentPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Path* (GlobalNamespace::Seeker::*)()>(&GlobalNamespace::Seeker::GetCurrentPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "GetCurrentPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Seeker::*)()>(&GlobalNamespace::Seeker::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::ReleaseClaimedPath
// Il2CppName: ReleaseClaimedPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Seeker::*)()>(&GlobalNamespace::Seeker::ReleaseClaimedPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "ReleaseClaimedPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::RegisterModifier
// Il2CppName: RegisterModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Seeker::*)(::Pathfinding::IPathModifier*)>(&GlobalNamespace::Seeker::RegisterModifier)> {
  static const MethodInfo* get() {
    static auto* mod = &::il2cpp_utils::GetClassFromName("Pathfinding", "IPathModifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "RegisterModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mod});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::DeregisterModifier
// Il2CppName: DeregisterModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Seeker::*)(::Pathfinding::IPathModifier*)>(&GlobalNamespace::Seeker::DeregisterModifier)> {
  static const MethodInfo* get() {
    static auto* mod = &::il2cpp_utils::GetClassFromName("Pathfinding", "IPathModifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "DeregisterModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mod});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::PostProcess
// Il2CppName: PostProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Seeker::*)(::Pathfinding::Path*)>(&GlobalNamespace::Seeker::PostProcess)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "PostProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::RunModifiers
// Il2CppName: RunModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Seeker::*)(::GlobalNamespace::Seeker::ModifierPass, ::Pathfinding::Path*)>(&GlobalNamespace::Seeker::RunModifiers)> {
  static const MethodInfo* get() {
    static auto* pass = &::il2cpp_utils::GetClassFromName("", "Seeker/ModifierPass")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "RunModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pass, p});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::IsDone
// Il2CppName: IsDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::Seeker::*)()>(&GlobalNamespace::Seeker::IsDone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "IsDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::OnPathComplete
// Il2CppName: OnPathComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Seeker::*)(::Pathfinding::Path*)>(&GlobalNamespace::Seeker::OnPathComplete)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "OnPathComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::OnPathComplete
// Il2CppName: OnPathComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Seeker::*)(::Pathfinding::Path*, bool, bool)>(&GlobalNamespace::Seeker::OnPathComplete)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* runModifiers = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* sendCallbacks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "OnPathComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, runModifiers, sendCallbacks});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::GetNewPath
// Il2CppName: GetNewPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ABPath* (GlobalNamespace::Seeker::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::Seeker::GetNewPath)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "GetNewPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::StartPath
// Il2CppName: StartPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Path* (GlobalNamespace::Seeker::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::Seeker::StartPath)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "StartPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::StartPath
// Il2CppName: StartPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Path* (GlobalNamespace::Seeker::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::OnPathDelegate*)>(&GlobalNamespace::Seeker::StartPath)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "StartPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::StartPath
// Il2CppName: StartPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Path* (GlobalNamespace::Seeker::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::OnPathDelegate*, int)>(&GlobalNamespace::Seeker::StartPath)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    static auto* graphMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "StartPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, callback, graphMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::StartPath
// Il2CppName: StartPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Path* (GlobalNamespace::Seeker::*)(::Pathfinding::Path*, ::Pathfinding::OnPathDelegate*, int)>(&GlobalNamespace::Seeker::StartPath)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    static auto* graphMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "StartPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, callback, graphMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::StartPathInternal
// Il2CppName: StartPathInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Seeker::*)(::Pathfinding::Path*, ::Pathfinding::OnPathDelegate*)>(&GlobalNamespace::Seeker::StartPathInternal)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "StartPathInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, callback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Seeker::*)()>(&GlobalNamespace::Seeker::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Seeker::*)()>(&GlobalNamespace::Seeker::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Seeker::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Seeker::*)()>(&GlobalNamespace::Seeker::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Seeker*), "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
