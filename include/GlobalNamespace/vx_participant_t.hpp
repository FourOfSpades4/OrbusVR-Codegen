// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Runtime.InteropServices.HandleRef
#include "System/Runtime/InteropServices/HandleRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: vx_participant_t
  class vx_participant_t;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::vx_participant_t);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::vx_participant_t*, "", "vx_participant_t");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: vx_participant_t
  // [TokenAttribute] Offset: FFFFFFFF
  class vx_participant_t : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Runtime.InteropServices.HandleRef swigCPtr
    // Size: 0x10
    // Offset: 0x10
    ::System::Runtime::InteropServices::HandleRef swigCPtr;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::HandleRef) == 0x10);
    // protected System.Boolean swigCMemOwn
    // Size: 0x1
    // Offset: 0x20
    bool swigCMemOwn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Runtime.InteropServices.HandleRef swigCPtr
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& dyn_swigCPtr();
    // Get instance field reference: protected System.Boolean swigCMemOwn
    [[deprecated("Use field access instead!")]] bool& dyn_swigCMemOwn();
    // System.Void .ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    // Offset: 0x2184BE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static vx_participant_t* New_ctor(::System::IntPtr cPtr, bool cMemoryOwn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_participant_t::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<vx_participant_t*, creationType>(cPtr, cMemoryOwn)));
    }
    // static System.Runtime.InteropServices.HandleRef getCPtr(vx_participant_t obj)
    // Offset: 0x2184C4C
    static ::System::Runtime::InteropServices::HandleRef getCPtr(::GlobalNamespace::vx_participant_t* obj);
    // public System.Void Dispose()
    // Offset: 0x2184D3C
    void Dispose();
    // public System.Void set_uri(System.String value)
    // Offset: 0x2184EAC
    void set_uri(::StringW value);
    // public System.String get_uri()
    // Offset: 0x2184F2C
    ::StringW get_uri();
    // public System.Void set_first_name(System.String value)
    // Offset: 0x2184F9C
    void set_first_name(::StringW value);
    // public System.String get_first_name()
    // Offset: 0x218501C
    ::StringW get_first_name();
    // public System.Void set_last_name(System.String value)
    // Offset: 0x218508C
    void set_last_name(::StringW value);
    // public System.String get_last_name()
    // Offset: 0x218510C
    ::StringW get_last_name();
    // public System.Void set_display_name(System.String value)
    // Offset: 0x218517C
    void set_display_name(::StringW value);
    // public System.String get_display_name()
    // Offset: 0x21851FC
    ::StringW get_display_name();
    // public System.Void set_username(System.String value)
    // Offset: 0x218526C
    void set_username(::StringW value);
    // public System.String get_username()
    // Offset: 0x21852EC
    ::StringW get_username();
    // public System.Void set_is_moderator(System.Int32 value)
    // Offset: 0x218535C
    void set_is_moderator(int value);
    // public System.Int32 get_is_moderator()
    // Offset: 0x21853DC
    int get_is_moderator();
    // public System.Void set_is_moderator_muted(System.Int32 value)
    // Offset: 0x218544C
    void set_is_moderator_muted(int value);
    // public System.Int32 get_is_moderator_muted()
    // Offset: 0x21854CC
    int get_is_moderator_muted();
    // public System.Void set_is_moderator_text_muted(System.Int32 value)
    // Offset: 0x218553C
    void set_is_moderator_text_muted(int value);
    // public System.Int32 get_is_moderator_text_muted()
    // Offset: 0x21855BC
    int get_is_moderator_text_muted();
    // public System.Void set_is_muted_for_me(System.Int32 value)
    // Offset: 0x218562C
    void set_is_muted_for_me(int value);
    // public System.Int32 get_is_muted_for_me()
    // Offset: 0x21856AC
    int get_is_muted_for_me();
    // public System.Void set_is_owner(System.Int32 value)
    // Offset: 0x218571C
    void set_is_owner(int value);
    // public System.Int32 get_is_owner()
    // Offset: 0x218579C
    int get_is_owner();
    // public System.Void set_account_id(System.Int32 value)
    // Offset: 0x218580C
    void set_account_id(int value);
    // public System.Int32 get_account_id()
    // Offset: 0x218588C
    int get_account_id();
    // public System.Void .ctor()
    // Offset: 0x21858FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static vx_participant_t* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::vx_participant_t::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<vx_participant_t*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x2184CC0
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // vx_participant_t
  #pragma pack(pop)
  static check_size<sizeof(vx_participant_t), 32 + sizeof(bool)> __GlobalNamespace_vx_participant_tSizeCheck;
  static_assert(sizeof(vx_participant_t) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::getCPtr
// Il2CppName: getCPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::InteropServices::HandleRef (*)(::GlobalNamespace::vx_participant_t*)>(&GlobalNamespace::vx_participant_t::getCPtr)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("", "vx_participant_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "getCPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_participant_t::*)()>(&GlobalNamespace::vx_participant_t::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::set_uri
// Il2CppName: set_uri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_participant_t::*)(::StringW)>(&GlobalNamespace::vx_participant_t::set_uri)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "set_uri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::get_uri
// Il2CppName: get_uri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::vx_participant_t::*)()>(&GlobalNamespace::vx_participant_t::get_uri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "get_uri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::set_first_name
// Il2CppName: set_first_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_participant_t::*)(::StringW)>(&GlobalNamespace::vx_participant_t::set_first_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "set_first_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::get_first_name
// Il2CppName: get_first_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::vx_participant_t::*)()>(&GlobalNamespace::vx_participant_t::get_first_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "get_first_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::set_last_name
// Il2CppName: set_last_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_participant_t::*)(::StringW)>(&GlobalNamespace::vx_participant_t::set_last_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "set_last_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::get_last_name
// Il2CppName: get_last_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::vx_participant_t::*)()>(&GlobalNamespace::vx_participant_t::get_last_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "get_last_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::set_display_name
// Il2CppName: set_display_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_participant_t::*)(::StringW)>(&GlobalNamespace::vx_participant_t::set_display_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "set_display_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::get_display_name
// Il2CppName: get_display_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::vx_participant_t::*)()>(&GlobalNamespace::vx_participant_t::get_display_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "get_display_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::set_username
// Il2CppName: set_username
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_participant_t::*)(::StringW)>(&GlobalNamespace::vx_participant_t::set_username)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "set_username", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::get_username
// Il2CppName: get_username
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::vx_participant_t::*)()>(&GlobalNamespace::vx_participant_t::get_username)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "get_username", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::set_is_moderator
// Il2CppName: set_is_moderator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_participant_t::*)(int)>(&GlobalNamespace::vx_participant_t::set_is_moderator)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "set_is_moderator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::get_is_moderator
// Il2CppName: get_is_moderator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_participant_t::*)()>(&GlobalNamespace::vx_participant_t::get_is_moderator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "get_is_moderator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::set_is_moderator_muted
// Il2CppName: set_is_moderator_muted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_participant_t::*)(int)>(&GlobalNamespace::vx_participant_t::set_is_moderator_muted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "set_is_moderator_muted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::get_is_moderator_muted
// Il2CppName: get_is_moderator_muted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_participant_t::*)()>(&GlobalNamespace::vx_participant_t::get_is_moderator_muted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "get_is_moderator_muted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::set_is_moderator_text_muted
// Il2CppName: set_is_moderator_text_muted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_participant_t::*)(int)>(&GlobalNamespace::vx_participant_t::set_is_moderator_text_muted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "set_is_moderator_text_muted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::get_is_moderator_text_muted
// Il2CppName: get_is_moderator_text_muted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_participant_t::*)()>(&GlobalNamespace::vx_participant_t::get_is_moderator_text_muted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "get_is_moderator_text_muted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::set_is_muted_for_me
// Il2CppName: set_is_muted_for_me
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_participant_t::*)(int)>(&GlobalNamespace::vx_participant_t::set_is_muted_for_me)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "set_is_muted_for_me", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::get_is_muted_for_me
// Il2CppName: get_is_muted_for_me
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_participant_t::*)()>(&GlobalNamespace::vx_participant_t::get_is_muted_for_me)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "get_is_muted_for_me", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::set_is_owner
// Il2CppName: set_is_owner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_participant_t::*)(int)>(&GlobalNamespace::vx_participant_t::set_is_owner)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "set_is_owner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::get_is_owner
// Il2CppName: get_is_owner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_participant_t::*)()>(&GlobalNamespace::vx_participant_t::get_is_owner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "get_is_owner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::set_account_id
// Il2CppName: set_account_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_participant_t::*)(int)>(&GlobalNamespace::vx_participant_t::set_account_id)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "set_account_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::get_account_id
// Il2CppName: get_account_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::vx_participant_t::*)()>(&GlobalNamespace::vx_participant_t::get_account_id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "get_account_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::vx_participant_t::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::vx_participant_t::*)()>(&GlobalNamespace::vx_participant_t::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::vx_participant_t*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
