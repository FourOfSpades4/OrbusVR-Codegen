// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: vx_sessiongroup_audio_injection_control_type
  struct vx_sessiongroup_audio_injection_control_type;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::vx_sessiongroup_audio_injection_control_type, "", "vx_sessiongroup_audio_injection_control_type");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: vx_sessiongroup_audio_injection_control_type
  // [TokenAttribute] Offset: FFFFFFFF
  struct vx_sessiongroup_audio_injection_control_type/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: vx_sessiongroup_audio_injection_control_type
    constexpr vx_sessiongroup_audio_injection_control_type(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public vx_sessiongroup_audio_injection_control_type VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_STOP
    static constexpr const int VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_STOP = 0;
    // Get static field: static public vx_sessiongroup_audio_injection_control_type VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_STOP
    static ::GlobalNamespace::vx_sessiongroup_audio_injection_control_type _get_VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_STOP();
    // Set static field: static public vx_sessiongroup_audio_injection_control_type VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_STOP
    static void _set_VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_STOP(::GlobalNamespace::vx_sessiongroup_audio_injection_control_type value);
    // static field const value: static public vx_sessiongroup_audio_injection_control_type vx_sessiongroup_audio_injection_control_stop
    static constexpr const int vx_sessiongroup_audio_injection_control_stop = 0;
    // Get static field: static public vx_sessiongroup_audio_injection_control_type vx_sessiongroup_audio_injection_control_stop
    static ::GlobalNamespace::vx_sessiongroup_audio_injection_control_type _get_vx_sessiongroup_audio_injection_control_stop();
    // Set static field: static public vx_sessiongroup_audio_injection_control_type vx_sessiongroup_audio_injection_control_stop
    static void _set_vx_sessiongroup_audio_injection_control_stop(::GlobalNamespace::vx_sessiongroup_audio_injection_control_type value);
    // static field const value: static public vx_sessiongroup_audio_injection_control_type VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_START
    static constexpr const int VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_START = 1;
    // Get static field: static public vx_sessiongroup_audio_injection_control_type VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_START
    static ::GlobalNamespace::vx_sessiongroup_audio_injection_control_type _get_VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_START();
    // Set static field: static public vx_sessiongroup_audio_injection_control_type VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_START
    static void _set_VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_START(::GlobalNamespace::vx_sessiongroup_audio_injection_control_type value);
    // static field const value: static public vx_sessiongroup_audio_injection_control_type vx_sessiongroup_audio_injection_control_start
    static constexpr const int vx_sessiongroup_audio_injection_control_start = 1;
    // Get static field: static public vx_sessiongroup_audio_injection_control_type vx_sessiongroup_audio_injection_control_start
    static ::GlobalNamespace::vx_sessiongroup_audio_injection_control_type _get_vx_sessiongroup_audio_injection_control_start();
    // Set static field: static public vx_sessiongroup_audio_injection_control_type vx_sessiongroup_audio_injection_control_start
    static void _set_vx_sessiongroup_audio_injection_control_start(::GlobalNamespace::vx_sessiongroup_audio_injection_control_type value);
    // static field const value: static public vx_sessiongroup_audio_injection_control_type VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_RESTART
    static constexpr const int VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_RESTART = 2;
    // Get static field: static public vx_sessiongroup_audio_injection_control_type VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_RESTART
    static ::GlobalNamespace::vx_sessiongroup_audio_injection_control_type _get_VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_RESTART();
    // Set static field: static public vx_sessiongroup_audio_injection_control_type VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_RESTART
    static void _set_VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_RESTART(::GlobalNamespace::vx_sessiongroup_audio_injection_control_type value);
    // static field const value: static public vx_sessiongroup_audio_injection_control_type vx_sessiongroup_audio_injection_control_restart
    static constexpr const int vx_sessiongroup_audio_injection_control_restart = 2;
    // Get static field: static public vx_sessiongroup_audio_injection_control_type vx_sessiongroup_audio_injection_control_restart
    static ::GlobalNamespace::vx_sessiongroup_audio_injection_control_type _get_vx_sessiongroup_audio_injection_control_restart();
    // Set static field: static public vx_sessiongroup_audio_injection_control_type vx_sessiongroup_audio_injection_control_restart
    static void _set_vx_sessiongroup_audio_injection_control_restart(::GlobalNamespace::vx_sessiongroup_audio_injection_control_type value);
    // static field const value: static public vx_sessiongroup_audio_injection_control_type VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_MIN
    static constexpr const int VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_MIN = 0;
    // Get static field: static public vx_sessiongroup_audio_injection_control_type VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_MIN
    static ::GlobalNamespace::vx_sessiongroup_audio_injection_control_type _get_VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_MIN();
    // Set static field: static public vx_sessiongroup_audio_injection_control_type VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_MIN
    static void _set_VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_MIN(::GlobalNamespace::vx_sessiongroup_audio_injection_control_type value);
    // static field const value: static public vx_sessiongroup_audio_injection_control_type vx_sessiongroup_audio_injection_control_min
    static constexpr const int vx_sessiongroup_audio_injection_control_min = 0;
    // Get static field: static public vx_sessiongroup_audio_injection_control_type vx_sessiongroup_audio_injection_control_min
    static ::GlobalNamespace::vx_sessiongroup_audio_injection_control_type _get_vx_sessiongroup_audio_injection_control_min();
    // Set static field: static public vx_sessiongroup_audio_injection_control_type vx_sessiongroup_audio_injection_control_min
    static void _set_vx_sessiongroup_audio_injection_control_min(::GlobalNamespace::vx_sessiongroup_audio_injection_control_type value);
    // static field const value: static public vx_sessiongroup_audio_injection_control_type VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_MAX
    static constexpr const int VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_MAX = 2;
    // Get static field: static public vx_sessiongroup_audio_injection_control_type VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_MAX
    static ::GlobalNamespace::vx_sessiongroup_audio_injection_control_type _get_VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_MAX();
    // Set static field: static public vx_sessiongroup_audio_injection_control_type VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_MAX
    static void _set_VX_SESSIONGROUP_AUDIO_INJECTION_CONTROL_MAX(::GlobalNamespace::vx_sessiongroup_audio_injection_control_type value);
    // static field const value: static public vx_sessiongroup_audio_injection_control_type vx_sessiongroup_audio_injection_control_max
    static constexpr const int vx_sessiongroup_audio_injection_control_max = 2;
    // Get static field: static public vx_sessiongroup_audio_injection_control_type vx_sessiongroup_audio_injection_control_max
    static ::GlobalNamespace::vx_sessiongroup_audio_injection_control_type _get_vx_sessiongroup_audio_injection_control_max();
    // Set static field: static public vx_sessiongroup_audio_injection_control_type vx_sessiongroup_audio_injection_control_max
    static void _set_vx_sessiongroup_audio_injection_control_max(::GlobalNamespace::vx_sessiongroup_audio_injection_control_type value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // vx_sessiongroup_audio_injection_control_type
  #pragma pack(pop)
  static check_size<sizeof(vx_sessiongroup_audio_injection_control_type), 0 + sizeof(int)> __GlobalNamespace_vx_sessiongroup_audio_injection_control_typeSizeCheck;
  static_assert(sizeof(vx_sessiongroup_audio_injection_control_type) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
