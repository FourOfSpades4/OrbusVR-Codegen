// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ScreenRecorder
  class ScreenRecorder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ScreenRecorder);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ScreenRecorder*, "", "ScreenRecorder");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: ScreenRecorder
  // [TokenAttribute] Offset: FFFFFFFF
  class ScreenRecorder : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ScreenRecorder::Format
    struct Format;
    // Nested type: ::GlobalNamespace::ScreenRecorder::$$c__DisplayClass18_0
    class $$c__DisplayClass18_0;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: ScreenRecorder/Format
    // [TokenAttribute] Offset: FFFFFFFF
    struct Format/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Format
      constexpr Format(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public ScreenRecorder/Format RAW
      static constexpr const int RAW = 0;
      // Get static field: static public ScreenRecorder/Format RAW
      static ::GlobalNamespace::ScreenRecorder::Format _get_RAW();
      // Set static field: static public ScreenRecorder/Format RAW
      static void _set_RAW(::GlobalNamespace::ScreenRecorder::Format value);
      // static field const value: static public ScreenRecorder/Format JPG
      static constexpr const int JPG = 1;
      // Get static field: static public ScreenRecorder/Format JPG
      static ::GlobalNamespace::ScreenRecorder::Format _get_JPG();
      // Set static field: static public ScreenRecorder/Format JPG
      static void _set_JPG(::GlobalNamespace::ScreenRecorder::Format value);
      // static field const value: static public ScreenRecorder/Format PNG
      static constexpr const int PNG = 2;
      // Get static field: static public ScreenRecorder/Format PNG
      static ::GlobalNamespace::ScreenRecorder::Format _get_PNG();
      // Set static field: static public ScreenRecorder/Format PNG
      static void _set_PNG(::GlobalNamespace::ScreenRecorder::Format value);
      // static field const value: static public ScreenRecorder/Format PPM
      static constexpr const int PPM = 3;
      // Get static field: static public ScreenRecorder/Format PPM
      static ::GlobalNamespace::ScreenRecorder::Format _get_PPM();
      // Set static field: static public ScreenRecorder/Format PPM
      static void _set_PPM(::GlobalNamespace::ScreenRecorder::Format value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // ScreenRecorder/Format
    #pragma pack(pop)
    static check_size<sizeof(ScreenRecorder::Format), 0 + sizeof(int)> __GlobalNamespace_ScreenRecorder_FormatSizeCheck;
    static_assert(sizeof(ScreenRecorder::Format) == 0x4);
    public:
    // public System.Int32 captureWidth
    // Size: 0x4
    // Offset: 0x18
    int captureWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 captureHeight
    // Size: 0x4
    // Offset: 0x1C
    int captureHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.GameObject hideGameObject
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* hideGameObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean optimizeForManyScreenshots
    // Size: 0x1
    // Offset: 0x28
    bool optimizeForManyScreenshots;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: optimizeForManyScreenshots and: format
    char __padding3[0x3] = {};
    // public ScreenRecorder/Format format
    // Size: 0x4
    // Offset: 0x2C
    ::GlobalNamespace::ScreenRecorder::Format format;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ScreenRecorder::Format) == 0x4);
    // public System.String folder
    // Size: 0x8
    // Offset: 0x30
    ::StringW folder;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Rect rect
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Rect rect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private UnityEngine.RenderTexture renderTexture
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::RenderTexture* renderTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.Texture2D screenShot
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Texture2D* screenShot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private System.Int32 counter
    // Size: 0x4
    // Offset: 0x58
    int counter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean captureScreenshot
    // Size: 0x1
    // Offset: 0x5C
    bool captureScreenshot;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean captureVideo
    // Size: 0x1
    // Offset: 0x5D
    bool captureVideo;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: captureVideo and: mirrorPlane
    char __padding11[0x2] = {};
    // public UnityEngine.MeshRenderer mirrorPlane
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::MeshRenderer* mirrorPlane;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 captureWidth
    [[deprecated("Use field access instead!")]] int& dyn_captureWidth();
    // Get instance field reference: public System.Int32 captureHeight
    [[deprecated("Use field access instead!")]] int& dyn_captureHeight();
    // Get instance field reference: public UnityEngine.GameObject hideGameObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_hideGameObject();
    // Get instance field reference: public System.Boolean optimizeForManyScreenshots
    [[deprecated("Use field access instead!")]] bool& dyn_optimizeForManyScreenshots();
    // Get instance field reference: public ScreenRecorder/Format format
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ScreenRecorder::Format& dyn_format();
    // Get instance field reference: public System.String folder
    [[deprecated("Use field access instead!")]] ::StringW& dyn_folder();
    // Get instance field reference: private UnityEngine.Rect rect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_rect();
    // Get instance field reference: private UnityEngine.RenderTexture renderTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_renderTexture();
    // Get instance field reference: private UnityEngine.Texture2D screenShot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_screenShot();
    // Get instance field reference: private System.Int32 counter
    [[deprecated("Use field access instead!")]] int& dyn_counter();
    // Get instance field reference: private System.Boolean captureScreenshot
    [[deprecated("Use field access instead!")]] bool& dyn_captureScreenshot();
    // Get instance field reference: private System.Boolean captureVideo
    [[deprecated("Use field access instead!")]] bool& dyn_captureVideo();
    // Get instance field reference: public UnityEngine.MeshRenderer mirrorPlane
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_mirrorPlane();
    // private System.String uniqueFilename(System.Int32 width, System.Int32 height)
    // Offset: 0xE33574
    ::StringW uniqueFilename(int width, int height);
    // public System.Void CaptureScreenshot()
    // Offset: 0xE339EC
    void CaptureScreenshot();
    // public System.Void EnableMirror()
    // Offset: 0xE339F8
    void EnableMirror();
    // public System.Void DisableMirror()
    // Offset: 0xE33C2C
    void DisableMirror();
    // private System.Void Update()
    // Offset: 0xE33CD4
    void Update();
    // public System.Void .ctor()
    // Offset: 0xE341F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScreenRecorder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScreenRecorder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScreenRecorder*, creationType>()));
    }
  }; // ScreenRecorder
  #pragma pack(pop)
  static check_size<sizeof(ScreenRecorder), 96 + sizeof(::UnityEngine::MeshRenderer*)> __GlobalNamespace_ScreenRecorderSizeCheck;
  static_assert(sizeof(ScreenRecorder) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ScreenRecorder::Format, "", "ScreenRecorder/Format");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ScreenRecorder::uniqueFilename
// Il2CppName: uniqueFilename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::ScreenRecorder::*)(int, int)>(&GlobalNamespace::ScreenRecorder::uniqueFilename)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScreenRecorder*), "uniqueFilename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScreenRecorder::CaptureScreenshot
// Il2CppName: CaptureScreenshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScreenRecorder::*)()>(&GlobalNamespace::ScreenRecorder::CaptureScreenshot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScreenRecorder*), "CaptureScreenshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScreenRecorder::EnableMirror
// Il2CppName: EnableMirror
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScreenRecorder::*)()>(&GlobalNamespace::ScreenRecorder::EnableMirror)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScreenRecorder*), "EnableMirror", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScreenRecorder::DisableMirror
// Il2CppName: DisableMirror
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScreenRecorder::*)()>(&GlobalNamespace::ScreenRecorder::DisableMirror)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScreenRecorder*), "DisableMirror", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScreenRecorder::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScreenRecorder::*)()>(&GlobalNamespace::ScreenRecorder::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScreenRecorder*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScreenRecorder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
