// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: vx_mute_scope
  struct vx_mute_scope;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::vx_mute_scope, "", "vx_mute_scope");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: vx_mute_scope
  // [TokenAttribute] Offset: FFFFFFFF
  struct vx_mute_scope/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: vx_mute_scope
    constexpr vx_mute_scope(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public vx_mute_scope mute_scope_all
    static constexpr const int mute_scope_all = 0;
    // Get static field: static public vx_mute_scope mute_scope_all
    static ::GlobalNamespace::vx_mute_scope _get_mute_scope_all();
    // Set static field: static public vx_mute_scope mute_scope_all
    static void _set_mute_scope_all(::GlobalNamespace::vx_mute_scope value);
    // static field const value: static public vx_mute_scope mute_scope_audio
    static constexpr const int mute_scope_audio = 1;
    // Get static field: static public vx_mute_scope mute_scope_audio
    static ::GlobalNamespace::vx_mute_scope _get_mute_scope_audio();
    // Set static field: static public vx_mute_scope mute_scope_audio
    static void _set_mute_scope_audio(::GlobalNamespace::vx_mute_scope value);
    // static field const value: static public vx_mute_scope mute_scope_text
    static constexpr const int mute_scope_text = 2;
    // Get static field: static public vx_mute_scope mute_scope_text
    static ::GlobalNamespace::vx_mute_scope _get_mute_scope_text();
    // Set static field: static public vx_mute_scope mute_scope_text
    static void _set_mute_scope_text(::GlobalNamespace::vx_mute_scope value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // vx_mute_scope
  #pragma pack(pop)
  static check_size<sizeof(vx_mute_scope), 0 + sizeof(int)> __GlobalNamespace_vx_mute_scopeSizeCheck;
  static_assert(sizeof(vx_mute_scope) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
