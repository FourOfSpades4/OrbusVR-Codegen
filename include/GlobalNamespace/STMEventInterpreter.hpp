// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SuperTextMesh
  class SuperTextMesh;
  // Forward declaring type: STMSampleLink
  class STMSampleLink;
  // Forward declaring type: STMTextInfo
  class STMTextInfo;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: SpriteRenderer
  class SpriteRenderer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: STMEventInterpreter
  class STMEventInterpreter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::STMEventInterpreter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::STMEventInterpreter*, "", "STMEventInterpreter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: STMEventInterpreter
  // [TokenAttribute] Offset: FFFFFFFF
  class STMEventInterpreter : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private SuperTextMesh _stm
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::SuperTextMesh* stm;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh*) == 0x8);
    // public UnityEngine.GameObject confetti
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* confetti;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.AudioSource au
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AudioSource* au;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioClip myClip
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AudioClip* myClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public STMSampleLink link
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::STMSampleLink* link;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STMSampleLink*) == 0x8);
    // private System.Collections.Generic.List`1<STMSampleLink> allLinks
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::GlobalNamespace::STMSampleLink*>* allLinks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::STMSampleLink*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.SpriteRenderer> allBGs
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::UnityEngine::SpriteRenderer*>* allBGs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::SpriteRenderer*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.SpriteRenderer> allStrikethrus
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::SpriteRenderer*>* allStrikethrus;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::SpriteRenderer*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.SpriteRenderer> allUnderlines
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::SpriteRenderer*>* allUnderlines;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::SpriteRenderer*>*) == 0x8);
    // public UnityEngine.SpriteRenderer bgPrefab
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::SpriteRenderer* bgPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::SpriteRenderer*) == 0x8);
    // [HeaderAttribute] Offset: 0xAD8AD8
    // public UnityEngine.SpriteRenderer linePrefab
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::SpriteRenderer* linePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::SpriteRenderer*) == 0x8);
    // [HeaderAttribute] Offset: 0xAD8B10
    // public UnityEngine.Vector3 underlineDistance
    // Size: 0xC
    // Offset: 0x70
    ::UnityEngine::Vector3 underlineDistance;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single underlineWidth
    // Size: 0x4
    // Offset: 0x7C
    float underlineWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single underlineThickness
    // Size: 0x4
    // Offset: 0x80
    float underlineThickness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color underlineColor
    // Size: 0x10
    // Offset: 0x84
    ::UnityEngine::Color underlineColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [RangeAttribute] Offset: 0xAD8B48
    // [HeaderAttribute] Offset: 0xAD8B48
    // public System.Single strikethruHeight
    // Size: 0x4
    // Offset: 0x94
    float strikethruHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single strikethruWidth
    // Size: 0x4
    // Offset: 0x98
    float strikethruWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single strikethruThickness
    // Size: 0x4
    // Offset: 0x9C
    float strikethruThickness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color strikethruColor
    // Size: 0x10
    // Offset: 0xA0
    ::UnityEngine::Color strikethruColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private SuperTextMesh _stm
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh*& dyn__stm();
    // Get instance field reference: public UnityEngine.GameObject confetti
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_confetti();
    // Get instance field reference: public UnityEngine.AudioSource au
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_au();
    // Get instance field reference: public UnityEngine.AudioClip myClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_myClip();
    // Get instance field reference: public STMSampleLink link
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STMSampleLink*& dyn_link();
    // Get instance field reference: private System.Collections.Generic.List`1<STMSampleLink> allLinks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::STMSampleLink*>*& dyn_allLinks();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.SpriteRenderer> allBGs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::SpriteRenderer*>*& dyn_allBGs();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.SpriteRenderer> allStrikethrus
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::SpriteRenderer*>*& dyn_allStrikethrus();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.SpriteRenderer> allUnderlines
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::SpriteRenderer*>*& dyn_allUnderlines();
    // Get instance field reference: public UnityEngine.SpriteRenderer bgPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& dyn_bgPrefab();
    // Get instance field reference: public UnityEngine.SpriteRenderer linePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& dyn_linePrefab();
    // Get instance field reference: public UnityEngine.Vector3 underlineDistance
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_underlineDistance();
    // Get instance field reference: public System.Single underlineWidth
    [[deprecated("Use field access instead!")]] float& dyn_underlineWidth();
    // Get instance field reference: public System.Single underlineThickness
    [[deprecated("Use field access instead!")]] float& dyn_underlineThickness();
    // Get instance field reference: public UnityEngine.Color underlineColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_underlineColor();
    // Get instance field reference: public System.Single strikethruHeight
    [[deprecated("Use field access instead!")]] float& dyn_strikethruHeight();
    // Get instance field reference: public System.Single strikethruWidth
    [[deprecated("Use field access instead!")]] float& dyn_strikethruWidth();
    // Get instance field reference: public System.Single strikethruThickness
    [[deprecated("Use field access instead!")]] float& dyn_strikethruThickness();
    // Get instance field reference: public UnityEngine.Color strikethruColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_strikethruColor();
    // public SuperTextMesh get_stm()
    // Offset: 0xE2C60C
    ::GlobalNamespace::SuperTextMesh* get_stm();
    // public System.Void DebugReset()
    // Offset: 0xE2C6BC
    void DebugReset();
    // public System.Void DoEvent(System.String s, STMTextInfo info)
    // Offset: 0xE2C744
    void DoEvent(::StringW s, ::GlobalNamespace::STMTextInfo* info);
    // public System.Void ClearLinks()
    // Offset: 0xE2D9F0
    void ClearLinks();
    // public System.Void ClearBGs()
    // Offset: 0xE2DB08
    void ClearBGs();
    // public System.Void ClearUnderlines()
    // Offset: 0xE2DC20
    void ClearUnderlines();
    // public System.Void ClearStrikethrus()
    // Offset: 0xE2DD38
    void ClearStrikethrus();
    // public System.Void .ctor()
    // Offset: 0xE2DE50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static STMEventInterpreter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::STMEventInterpreter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<STMEventInterpreter*, creationType>()));
    }
  }; // STMEventInterpreter
  #pragma pack(pop)
  static check_size<sizeof(STMEventInterpreter), 160 + sizeof(::UnityEngine::Color)> __GlobalNamespace_STMEventInterpreterSizeCheck;
  static_assert(sizeof(STMEventInterpreter) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::STMEventInterpreter::get_stm
// Il2CppName: get_stm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SuperTextMesh* (GlobalNamespace::STMEventInterpreter::*)()>(&GlobalNamespace::STMEventInterpreter::get_stm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMEventInterpreter*), "get_stm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMEventInterpreter::DebugReset
// Il2CppName: DebugReset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMEventInterpreter::*)()>(&GlobalNamespace::STMEventInterpreter::DebugReset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMEventInterpreter*), "DebugReset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMEventInterpreter::DoEvent
// Il2CppName: DoEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMEventInterpreter::*)(::StringW, ::GlobalNamespace::STMTextInfo*)>(&GlobalNamespace::STMEventInterpreter::DoEvent)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("", "STMTextInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMEventInterpreter*), "DoEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMEventInterpreter::ClearLinks
// Il2CppName: ClearLinks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMEventInterpreter::*)()>(&GlobalNamespace::STMEventInterpreter::ClearLinks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMEventInterpreter*), "ClearLinks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMEventInterpreter::ClearBGs
// Il2CppName: ClearBGs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMEventInterpreter::*)()>(&GlobalNamespace::STMEventInterpreter::ClearBGs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMEventInterpreter*), "ClearBGs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMEventInterpreter::ClearUnderlines
// Il2CppName: ClearUnderlines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMEventInterpreter::*)()>(&GlobalNamespace::STMEventInterpreter::ClearUnderlines)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMEventInterpreter*), "ClearUnderlines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMEventInterpreter::ClearStrikethrus
// Il2CppName: ClearStrikethrus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::STMEventInterpreter::*)()>(&GlobalNamespace::STMEventInterpreter::ClearStrikethrus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::STMEventInterpreter*), "ClearStrikethrus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::STMEventInterpreter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
