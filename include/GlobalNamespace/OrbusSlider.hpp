// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SuperTextMesh
  class SuperTextMesh;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OrbusSlider
  class OrbusSlider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OrbusSlider);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OrbusSlider*, "", "OrbusSlider");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: OrbusSlider
  // [TokenAttribute] Offset: FFFFFFFF
  class OrbusSlider : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Color backgroundColor
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Color backgroundColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color fillColor
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Color fillColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Transform background
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* background;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform fill
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* fill;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.MeshRenderer fillRenderer
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::MeshRenderer* fillRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private SuperTextMesh progressText
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::SuperTextMesh* progressText;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh*) == 0x8);
    // private System.Boolean isVertical
    // Size: 0x1
    // Offset: 0x58
    bool isVertical;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isVertical and: backgroundRenderer
    char __padding6[0x7] = {};
    // private UnityEngine.MeshRenderer backgroundRenderer
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::MeshRenderer* backgroundRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.MaterialPropertyBlock backgroundBlock
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::MaterialPropertyBlock* backgroundBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // private UnityEngine.MaterialPropertyBlock fillBlock
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::MaterialPropertyBlock* fillBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Color backgroundColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_backgroundColor();
    // Get instance field reference: private UnityEngine.Color fillColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_fillColor();
    // Get instance field reference: private UnityEngine.Transform background
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_background();
    // Get instance field reference: private UnityEngine.Transform fill
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_fill();
    // Get instance field reference: private UnityEngine.MeshRenderer fillRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_fillRenderer();
    // Get instance field reference: private SuperTextMesh progressText
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh*& dyn_progressText();
    // Get instance field reference: private System.Boolean isVertical
    [[deprecated("Use field access instead!")]] bool& dyn_isVertical();
    // Get instance field reference: private UnityEngine.MeshRenderer backgroundRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_backgroundRenderer();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock backgroundBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_backgroundBlock();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock fillBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_fillBlock();
    // private System.Void Start()
    // Offset: 0xD86388
    void Start();
    // public System.Void SetProgressText(System.String text)
    // Offset: 0xD8653C
    void SetProgressText(::StringW text);
    // public System.Void SetFill(System.Single val)
    // Offset: 0xD86574
    void SetFill(float val);
    // public System.Void .ctor()
    // Offset: 0xD865F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrbusSlider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OrbusSlider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrbusSlider*, creationType>()));
    }
  }; // OrbusSlider
  #pragma pack(pop)
  static check_size<sizeof(OrbusSlider), 112 + sizeof(::UnityEngine::MaterialPropertyBlock*)> __GlobalNamespace_OrbusSliderSizeCheck;
  static_assert(sizeof(OrbusSlider) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OrbusSlider::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusSlider::*)()>(&GlobalNamespace::OrbusSlider::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusSlider*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusSlider::SetProgressText
// Il2CppName: SetProgressText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusSlider::*)(::StringW)>(&GlobalNamespace::OrbusSlider::SetProgressText)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusSlider*), "SetProgressText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusSlider::SetFill
// Il2CppName: SetFill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OrbusSlider::*)(float)>(&GlobalNamespace::OrbusSlider::SetFill)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OrbusSlider*), "SetFill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OrbusSlider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
