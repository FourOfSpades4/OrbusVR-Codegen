// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Mesh
  class Mesh;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TerrainCell
  class TerrainCell;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TerrainGrid
  class TerrainGrid;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TerrainGrid);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TerrainGrid*, "", "TerrainGrid");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xBC
  #pragma pack(push, 1)
  // Autogenerated type: TerrainGrid
  // [TokenAttribute] Offset: FFFFFFFF
  class TerrainGrid : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xADA348
    // private System.Single <cellSize>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    float cellSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xADA358
    // private System.Int32 <gridWidth>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    int gridWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xADA368
    // private System.Int32 <gridHeight>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    int gridHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single yOffset
    // Size: 0x4
    // Offset: 0x24
    float yOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single cellHeightClearance
    // Size: 0x4
    // Offset: 0x28
    float cellHeightClearance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: cellHeightClearance and: cellMaterialValid
    char __padding4[0x4] = {};
    // public UnityEngine.Material cellMaterialValid
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* cellMaterialValid;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material cellMaterialInvalid
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Material* cellMaterialInvalid;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material outlineMaterial
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Material* outlineMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA378
    // private TerrainCell[] <_cells>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::GlobalNamespace::TerrainCell*> cells;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::TerrainCell*>) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADA388
    // private System.Single[] <_heights>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<float> heights;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Boolean firstFrame
    // Size: 0x1
    // Offset: 0x58
    bool firstFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: firstFrame and: gridDisplay
    char __padding10[0x7] = {};
    // private UnityEngine.GameObject gridDisplay
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* gridDisplay;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject[] navigationJumps
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::GameObject*> navigationJumps;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private UnityEngine.GameObject[] taxiExitJumps
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::UnityEngine::GameObject*> taxiExitJumps;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.Collider[] latestCols
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::UnityEngine::Collider*> latestCols;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // public UnityEngine.Collider[] ignoreEnemyCols
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::UnityEngine::Collider*> ignoreEnemyCols;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private System.Int32 numIgnoreEnemyCols
    // Size: 0x4
    // Offset: 0x88
    int numIgnoreEnemyCols;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 spaceCheckYOffset
    // Size: 0xC
    // Offset: 0x8C
    ::UnityEngine::Vector3 spaceCheckYOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [CompilerGeneratedAttribute] Offset: 0xADA3B8
    // private UnityEngine.Vector3 <currentNavmeshPosition>k__BackingField
    // Size: 0xC
    // Offset: 0x98
    ::UnityEngine::Vector3 currentNavmeshPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: currentNavmeshPosition and: vertices
    char __padding18[0x4] = {};
    // private UnityEngine.Vector3[] vertices
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<::UnityEngine::Vector3> vertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Int32[] indices
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<int> indices;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Int32 _NavAreaMask
    // Size: 0x4
    // Offset: 0xB8
    int NavAreaMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single <cellSize>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$cellSize$k__BackingField();
    // Get instance field reference: private System.Int32 <gridWidth>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$gridWidth$k__BackingField();
    // Get instance field reference: private System.Int32 <gridHeight>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$gridHeight$k__BackingField();
    // Get instance field reference: public System.Single yOffset
    [[deprecated("Use field access instead!")]] float& dyn_yOffset();
    // Get instance field reference: private System.Single cellHeightClearance
    [[deprecated("Use field access instead!")]] float& dyn_cellHeightClearance();
    // Get instance field reference: public UnityEngine.Material cellMaterialValid
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_cellMaterialValid();
    // Get instance field reference: public UnityEngine.Material cellMaterialInvalid
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_cellMaterialInvalid();
    // Get instance field reference: public UnityEngine.Material outlineMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_outlineMaterial();
    // Get instance field reference: private TerrainCell[] <_cells>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TerrainCell*>& dyn_$_cells$k__BackingField();
    // Get instance field reference: private System.Single[] <_heights>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_$_heights$k__BackingField();
    // Get instance field reference: private System.Boolean firstFrame
    [[deprecated("Use field access instead!")]] bool& dyn_firstFrame();
    // Get instance field reference: private UnityEngine.GameObject gridDisplay
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_gridDisplay();
    // Get instance field reference: private UnityEngine.GameObject[] navigationJumps
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_navigationJumps();
    // Get instance field reference: private UnityEngine.GameObject[] taxiExitJumps
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_taxiExitJumps();
    // Get instance field reference: public UnityEngine.Collider[] latestCols
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_latestCols();
    // Get instance field reference: public UnityEngine.Collider[] ignoreEnemyCols
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_ignoreEnemyCols();
    // Get instance field reference: private System.Int32 numIgnoreEnemyCols
    [[deprecated("Use field access instead!")]] int& dyn_numIgnoreEnemyCols();
    // Get instance field reference: private UnityEngine.Vector3 spaceCheckYOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_spaceCheckYOffset();
    // Get instance field reference: private UnityEngine.Vector3 <currentNavmeshPosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$currentNavmeshPosition$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3[] vertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_vertices();
    // Get instance field reference: private System.Int32[] indices
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_indices();
    // Get instance field reference: public System.Int32 _NavAreaMask
    [[deprecated("Use field access instead!")]] int& dyn__NavAreaMask();
    // public System.Single get_cellSize()
    // Offset: 0x1050508
    float get_cellSize();
    // private System.Void set_cellSize(System.Single value)
    // Offset: 0x105052C
    void set_cellSize(float value);
    // public System.Int32 get_gridWidth()
    // Offset: 0x10504F8
    int get_gridWidth();
    // private System.Void set_gridWidth(System.Int32 value)
    // Offset: 0x1050534
    void set_gridWidth(int value);
    // public System.Int32 get_gridHeight()
    // Offset: 0x105053C
    int get_gridHeight();
    // private System.Void set_gridHeight(System.Int32 value)
    // Offset: 0x1050544
    void set_gridHeight(int value);
    // public TerrainCell[] get__cells()
    // Offset: 0x105054C
    ::ArrayW<::GlobalNamespace::TerrainCell*> get__cells();
    // private System.Void set__cells(TerrainCell[] value)
    // Offset: 0x1050554
    void set__cells(::ArrayW<::GlobalNamespace::TerrainCell*> value);
    // public System.Single[] get__heights()
    // Offset: 0x1050500
    ::ArrayW<float> get__heights();
    // private System.Void set__heights(System.Single[] value)
    // Offset: 0x105055C
    void set__heights(::ArrayW<float> value);
    // public UnityEngine.Vector3 get_currentNavmeshPosition()
    // Offset: 0x1050510
    ::UnityEngine::Vector3 get_currentNavmeshPosition();
    // private System.Void set_currentNavmeshPosition(UnityEngine.Vector3 value)
    // Offset: 0x1050564
    void set_currentNavmeshPosition(::UnityEngine::Vector3 value);
    // private System.Void Awake()
    // Offset: 0x1050570
    void Awake();
    // private System.Void Start()
    // Offset: 0x10505EC
    void Start();
    // public System.Void UpdateNavigationJumps()
    // Offset: 0x1050FD8
    void UpdateNavigationJumps();
    // private System.Void OnDisable()
    // Offset: 0x10511B8
    void OnDisable();
    // private System.Void OnEnable()
    // Offset: 0x1051430
    void OnEnable();
    // public System.Void GridMoved(UnityEngine.Vector3 newPosition)
    // Offset: 0x1051584
    void GridMoved(::UnityEngine::Vector3 newPosition);
    // public System.Void BuildOutGridByPercentage(System.Single pctbuilt)
    // Offset: 0x10519FC
    void BuildOutGridByPercentage(float pctbuilt);
    // private System.Void CombineMeshes()
    // Offset: 0x1051C00
    void CombineMeshes();
    // private TerrainCell CreateChild(System.Int32 x, System.Int32 z)
    // Offset: 0x1050AC4
    ::GlobalNamespace::TerrainCell* CreateChild(int x, int z);
    // private System.Void UpdateSize()
    // Offset: 0x1051704
    void UpdateSize();
    // private System.Void UpdatePosition(UnityEngine.Vector3 position)
    // Offset: 0x1051708
    void UpdatePosition(::UnityEngine::Vector3 position);
    // private System.Void UpdateHeights()
    // Offset: 0x10517D0
    void UpdateHeights();
    // private System.Void UpdateCells()
    // Offset: 0x1051890
    void UpdateCells();
    // public System.Boolean validCellAtPosition(UnityEngine.Vector3 position)
    // Offset: 0x1052328
    bool validCellAtPosition(::UnityEngine::Vector3 position);
    // public System.Single findGroundAtPosition(UnityEngine.Vector3 position)
    // Offset: 0x10524AC
    float findGroundAtPosition(::UnityEngine::Vector3 position);
    // public System.Boolean isSpaceUnoccupied(UnityEngine.Vector3 position, System.Single boxSize)
    // Offset: 0x10525D0
    bool isSpaceUnoccupied(::UnityEngine::Vector3 position, float boxSize);
    // private UnityEngine.Mesh CreateMesh()
    // Offset: 0x1051EC0
    ::UnityEngine::Mesh* CreateMesh();
    // private System.Boolean CheckCellSlope(System.Int32 x, System.Int32 z)
    // Offset: 0x10526C4
    bool CheckCellSlope(int x, int z);
    // public System.Void UpdateMesh(UnityEngine.Mesh mesh, System.Int32 x, System.Int32 z)
    // Offset: 0x105029C
    void UpdateMesh(::UnityEngine::Mesh* mesh, int x, int z);
    // private System.Single CornerHeightAt(System.Int32 x, System.Int32 z)
    // Offset: 0x10527DC
    float CornerHeightAt(int x, int z);
    // private UnityEngine.Vector3 MeshVertex(System.Int32 x, System.Int32 z, System.Int32 xv, System.Int32 zv, System.Single baseHeight)
    // Offset: 0x10526CC
    ::UnityEngine::Vector3 MeshVertex(int x, int z, int xv, int zv, float baseHeight);
    // public System.Void .ctor()
    // Offset: 0x1052848
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TerrainGrid* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TerrainGrid::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TerrainGrid*, creationType>()));
    }
  }; // TerrainGrid
  #pragma pack(pop)
  static check_size<sizeof(TerrainGrid), 184 + sizeof(int)> __GlobalNamespace_TerrainGridSizeCheck;
  static_assert(sizeof(TerrainGrid) == 0xBC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::get_cellSize
// Il2CppName: get_cellSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::get_cellSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "get_cellSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::set_cellSize
// Il2CppName: set_cellSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)(float)>(&GlobalNamespace::TerrainGrid::set_cellSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "set_cellSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::get_gridWidth
// Il2CppName: get_gridWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::get_gridWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "get_gridWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::set_gridWidth
// Il2CppName: set_gridWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)(int)>(&GlobalNamespace::TerrainGrid::set_gridWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "set_gridWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::get_gridHeight
// Il2CppName: get_gridHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::get_gridHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "get_gridHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::set_gridHeight
// Il2CppName: set_gridHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)(int)>(&GlobalNamespace::TerrainGrid::set_gridHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "set_gridHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::get__cells
// Il2CppName: get__cells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::TerrainCell*> (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::get__cells)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "get__cells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::set__cells
// Il2CppName: set__cells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)(::ArrayW<::GlobalNamespace::TerrainCell*>)>(&GlobalNamespace::TerrainGrid::set__cells)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "TerrainCell"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "set__cells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::get__heights
// Il2CppName: get__heights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::get__heights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "get__heights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::set__heights
// Il2CppName: set__heights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)(::ArrayW<float>)>(&GlobalNamespace::TerrainGrid::set__heights)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "set__heights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::get_currentNavmeshPosition
// Il2CppName: get_currentNavmeshPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::get_currentNavmeshPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "get_currentNavmeshPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::set_currentNavmeshPosition
// Il2CppName: set_currentNavmeshPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)(::UnityEngine::Vector3)>(&GlobalNamespace::TerrainGrid::set_currentNavmeshPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "set_currentNavmeshPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::UpdateNavigationJumps
// Il2CppName: UpdateNavigationJumps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::UpdateNavigationJumps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "UpdateNavigationJumps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::GridMoved
// Il2CppName: GridMoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)(::UnityEngine::Vector3)>(&GlobalNamespace::TerrainGrid::GridMoved)> {
  static const MethodInfo* get() {
    static auto* newPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "GridMoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPosition});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::BuildOutGridByPercentage
// Il2CppName: BuildOutGridByPercentage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)(float)>(&GlobalNamespace::TerrainGrid::BuildOutGridByPercentage)> {
  static const MethodInfo* get() {
    static auto* pctbuilt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "BuildOutGridByPercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pctbuilt});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::CombineMeshes
// Il2CppName: CombineMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::CombineMeshes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "CombineMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::CreateChild
// Il2CppName: CreateChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::TerrainCell* (GlobalNamespace::TerrainGrid::*)(int, int)>(&GlobalNamespace::TerrainGrid::CreateChild)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "CreateChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::UpdateSize
// Il2CppName: UpdateSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::UpdateSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "UpdateSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::UpdatePosition
// Il2CppName: UpdatePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)(::UnityEngine::Vector3)>(&GlobalNamespace::TerrainGrid::UpdatePosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "UpdatePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::UpdateHeights
// Il2CppName: UpdateHeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::UpdateHeights)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "UpdateHeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::UpdateCells
// Il2CppName: UpdateCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::UpdateCells)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "UpdateCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::validCellAtPosition
// Il2CppName: validCellAtPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TerrainGrid::*)(::UnityEngine::Vector3)>(&GlobalNamespace::TerrainGrid::validCellAtPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "validCellAtPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::findGroundAtPosition
// Il2CppName: findGroundAtPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::TerrainGrid::*)(::UnityEngine::Vector3)>(&GlobalNamespace::TerrainGrid::findGroundAtPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "findGroundAtPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::isSpaceUnoccupied
// Il2CppName: isSpaceUnoccupied
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TerrainGrid::*)(::UnityEngine::Vector3, float)>(&GlobalNamespace::TerrainGrid::isSpaceUnoccupied)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* boxSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "isSpaceUnoccupied", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, boxSize});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::CreateMesh
// Il2CppName: CreateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (GlobalNamespace::TerrainGrid::*)()>(&GlobalNamespace::TerrainGrid::CreateMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "CreateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::CheckCellSlope
// Il2CppName: CheckCellSlope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::TerrainGrid::*)(int, int)>(&GlobalNamespace::TerrainGrid::CheckCellSlope)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "CheckCellSlope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::UpdateMesh
// Il2CppName: UpdateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TerrainGrid::*)(::UnityEngine::Mesh*, int, int)>(&GlobalNamespace::TerrainGrid::UpdateMesh)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "UpdateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, x, z});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::CornerHeightAt
// Il2CppName: CornerHeightAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::TerrainGrid::*)(int, int)>(&GlobalNamespace::TerrainGrid::CornerHeightAt)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "CornerHeightAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::MeshVertex
// Il2CppName: MeshVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::TerrainGrid::*)(int, int, int, int, float)>(&GlobalNamespace::TerrainGrid::MeshVertex)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* xv = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* zv = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* baseHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TerrainGrid*), "MeshVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, xv, zv, baseHeight});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TerrainGrid::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
