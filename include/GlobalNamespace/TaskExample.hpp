// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: Xefier::Threading::Tasks
namespace Xefier::Threading::Tasks {
  // Forward declaring type: ITask
  class ITask;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TaskExample
  class TaskExample;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TaskExample);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TaskExample*, "", "TaskExample");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: TaskExample
  // [TokenAttribute] Offset: FFFFFFFF
  class TaskExample : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::TaskExample::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::TaskExample::$$c__DisplayClass13_0
    class $$c__DisplayClass13_0;
    // private System.Void Start()
    // Offset: 0x103C6C4
    void Start();
    // private System.Void TaskRun()
    // Offset: 0x103C720
    void TaskRun();
    // private System.Void TaskContinueWith()
    // Offset: 0x103C8AC
    void TaskContinueWith();
    // private System.Void TaskResult()
    // Offset: 0x103CC50
    void TaskResult();
    // private System.Void TaskException()
    // Offset: 0x103CDF4
    void TaskException();
    // private System.Void TaskStatus()
    // Offset: 0x103CFE0
    void TaskStatus();
    // private System.Void TaskWhenAll()
    // Offset: 0x103D17C
    void TaskWhenAll();
    // private System.Void TaskWhenAny()
    // Offset: 0x103D2EC
    void TaskWhenAny();
    // private System.Void TaskWait()
    // Offset: 0x103D45C
    void TaskWait();
    // private System.Void TaskWaitAll()
    // Offset: 0x103D57C
    void TaskWaitAll();
    // private System.Void TaskWaitAny()
    // Offset: 0x103D5F8
    void TaskWaitAny();
    // private System.Void RunMethod()
    // Offset: 0x103D7EC
    void RunMethod();
    // private System.Void ContinueWithMethod(Xefier.Threading.Tasks.ITask t)
    // Offset: 0x103D858
    void ContinueWithMethod(::Xefier::Threading::Tasks::ITask* t);
    // private System.Collections.Generic.List`1<Xefier.Threading.Tasks.ITask> RunMultipleTasks(System.Int32 count)
    // Offset: 0x103D6B0
    ::System::Collections::Generic::List_1<::Xefier::Threading::Tasks::ITask*>* RunMultipleTasks(int count);
    // public System.Void .ctor()
    // Offset: 0x103D8CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TaskExample* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TaskExample::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TaskExample*, creationType>()));
    }
  }; // TaskExample
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::*)()>(&GlobalNamespace::TaskExample::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::TaskRun
// Il2CppName: TaskRun
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::*)()>(&GlobalNamespace::TaskExample::TaskRun)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample*), "TaskRun", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::TaskContinueWith
// Il2CppName: TaskContinueWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::*)()>(&GlobalNamespace::TaskExample::TaskContinueWith)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample*), "TaskContinueWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::TaskResult
// Il2CppName: TaskResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::*)()>(&GlobalNamespace::TaskExample::TaskResult)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample*), "TaskResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::TaskException
// Il2CppName: TaskException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::*)()>(&GlobalNamespace::TaskExample::TaskException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample*), "TaskException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::TaskStatus
// Il2CppName: TaskStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::*)()>(&GlobalNamespace::TaskExample::TaskStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample*), "TaskStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::TaskWhenAll
// Il2CppName: TaskWhenAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::*)()>(&GlobalNamespace::TaskExample::TaskWhenAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample*), "TaskWhenAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::TaskWhenAny
// Il2CppName: TaskWhenAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::*)()>(&GlobalNamespace::TaskExample::TaskWhenAny)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample*), "TaskWhenAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::TaskWait
// Il2CppName: TaskWait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::*)()>(&GlobalNamespace::TaskExample::TaskWait)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample*), "TaskWait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::TaskWaitAll
// Il2CppName: TaskWaitAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::*)()>(&GlobalNamespace::TaskExample::TaskWaitAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample*), "TaskWaitAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::TaskWaitAny
// Il2CppName: TaskWaitAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::*)()>(&GlobalNamespace::TaskExample::TaskWaitAny)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample*), "TaskWaitAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::RunMethod
// Il2CppName: RunMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::*)()>(&GlobalNamespace::TaskExample::RunMethod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample*), "RunMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::ContinueWithMethod
// Il2CppName: ContinueWithMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TaskExample::*)(::Xefier::Threading::Tasks::ITask*)>(&GlobalNamespace::TaskExample::ContinueWithMethod)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("Xefier.Threading.Tasks", "ITask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample*), "ContinueWithMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::RunMultipleTasks
// Il2CppName: RunMultipleTasks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Xefier::Threading::Tasks::ITask*>* (GlobalNamespace::TaskExample::*)(int)>(&GlobalNamespace::TaskExample::RunMultipleTasks)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TaskExample*), "RunMultipleTasks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TaskExample::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
