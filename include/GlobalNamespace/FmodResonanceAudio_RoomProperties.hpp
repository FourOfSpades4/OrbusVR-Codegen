// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: FmodResonanceAudio
#include "GlobalNamespace/FmodResonanceAudio.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: FmodResonanceAudioRoom/SurfaceMaterial
#include "GlobalNamespace/FmodResonanceAudioRoom.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FmodResonanceAudio::RoomProperties, "", "FmodResonanceAudio/RoomProperties");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: FmodResonanceAudio/RoomProperties
  // [TokenAttribute] Offset: FFFFFFFF
  struct FmodResonanceAudio::RoomProperties/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single positionX
    // Size: 0x4
    // Offset: 0x0
    float positionX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single positionY
    // Size: 0x4
    // Offset: 0x4
    float positionY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single positionZ
    // Size: 0x4
    // Offset: 0x8
    float positionZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rotationX
    // Size: 0x4
    // Offset: 0xC
    float rotationX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rotationY
    // Size: 0x4
    // Offset: 0x10
    float rotationY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rotationZ
    // Size: 0x4
    // Offset: 0x14
    float rotationZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rotationW
    // Size: 0x4
    // Offset: 0x18
    float rotationW;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single dimensionsX
    // Size: 0x4
    // Offset: 0x1C
    float dimensionsX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single dimensionsY
    // Size: 0x4
    // Offset: 0x20
    float dimensionsY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single dimensionsZ
    // Size: 0x4
    // Offset: 0x24
    float dimensionsZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public FmodResonanceAudioRoom/SurfaceMaterial materialLeft
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial materialLeft;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial) == 0x4);
    // public FmodResonanceAudioRoom/SurfaceMaterial materialRight
    // Size: 0x4
    // Offset: 0x2C
    ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial materialRight;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial) == 0x4);
    // public FmodResonanceAudioRoom/SurfaceMaterial materialBottom
    // Size: 0x4
    // Offset: 0x30
    ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial materialBottom;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial) == 0x4);
    // public FmodResonanceAudioRoom/SurfaceMaterial materialTop
    // Size: 0x4
    // Offset: 0x34
    ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial materialTop;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial) == 0x4);
    // public FmodResonanceAudioRoom/SurfaceMaterial materialFront
    // Size: 0x4
    // Offset: 0x38
    ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial materialFront;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial) == 0x4);
    // public FmodResonanceAudioRoom/SurfaceMaterial materialBack
    // Size: 0x4
    // Offset: 0x3C
    ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial materialBack;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial) == 0x4);
    // public System.Single reflectionScalar
    // Size: 0x4
    // Offset: 0x40
    float reflectionScalar;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single reverbGain
    // Size: 0x4
    // Offset: 0x44
    float reverbGain;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single reverbTime
    // Size: 0x4
    // Offset: 0x48
    float reverbTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single reverbBrightness
    // Size: 0x4
    // Offset: 0x4C
    float reverbBrightness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: RoomProperties
    constexpr RoomProperties(float positionX_ = {}, float positionY_ = {}, float positionZ_ = {}, float rotationX_ = {}, float rotationY_ = {}, float rotationZ_ = {}, float rotationW_ = {}, float dimensionsX_ = {}, float dimensionsY_ = {}, float dimensionsZ_ = {}, ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial materialLeft_ = {}, ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial materialRight_ = {}, ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial materialBottom_ = {}, ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial materialTop_ = {}, ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial materialFront_ = {}, ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial materialBack_ = {}, float reflectionScalar_ = {}, float reverbGain_ = {}, float reverbTime_ = {}, float reverbBrightness_ = {}) noexcept : positionX{positionX_}, positionY{positionY_}, positionZ{positionZ_}, rotationX{rotationX_}, rotationY{rotationY_}, rotationZ{rotationZ_}, rotationW{rotationW_}, dimensionsX{dimensionsX_}, dimensionsY{dimensionsY_}, dimensionsZ{dimensionsZ_}, materialLeft{materialLeft_}, materialRight{materialRight_}, materialBottom{materialBottom_}, materialTop{materialTop_}, materialFront{materialFront_}, materialBack{materialBack_}, reflectionScalar{reflectionScalar_}, reverbGain{reverbGain_}, reverbTime{reverbTime_}, reverbBrightness{reverbBrightness_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single positionX
    [[deprecated("Use field access instead!")]] float& dyn_positionX();
    // Get instance field reference: public System.Single positionY
    [[deprecated("Use field access instead!")]] float& dyn_positionY();
    // Get instance field reference: public System.Single positionZ
    [[deprecated("Use field access instead!")]] float& dyn_positionZ();
    // Get instance field reference: public System.Single rotationX
    [[deprecated("Use field access instead!")]] float& dyn_rotationX();
    // Get instance field reference: public System.Single rotationY
    [[deprecated("Use field access instead!")]] float& dyn_rotationY();
    // Get instance field reference: public System.Single rotationZ
    [[deprecated("Use field access instead!")]] float& dyn_rotationZ();
    // Get instance field reference: public System.Single rotationW
    [[deprecated("Use field access instead!")]] float& dyn_rotationW();
    // Get instance field reference: public System.Single dimensionsX
    [[deprecated("Use field access instead!")]] float& dyn_dimensionsX();
    // Get instance field reference: public System.Single dimensionsY
    [[deprecated("Use field access instead!")]] float& dyn_dimensionsY();
    // Get instance field reference: public System.Single dimensionsZ
    [[deprecated("Use field access instead!")]] float& dyn_dimensionsZ();
    // Get instance field reference: public FmodResonanceAudioRoom/SurfaceMaterial materialLeft
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial& dyn_materialLeft();
    // Get instance field reference: public FmodResonanceAudioRoom/SurfaceMaterial materialRight
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial& dyn_materialRight();
    // Get instance field reference: public FmodResonanceAudioRoom/SurfaceMaterial materialBottom
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial& dyn_materialBottom();
    // Get instance field reference: public FmodResonanceAudioRoom/SurfaceMaterial materialTop
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial& dyn_materialTop();
    // Get instance field reference: public FmodResonanceAudioRoom/SurfaceMaterial materialFront
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial& dyn_materialFront();
    // Get instance field reference: public FmodResonanceAudioRoom/SurfaceMaterial materialBack
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FmodResonanceAudioRoom::SurfaceMaterial& dyn_materialBack();
    // Get instance field reference: public System.Single reflectionScalar
    [[deprecated("Use field access instead!")]] float& dyn_reflectionScalar();
    // Get instance field reference: public System.Single reverbGain
    [[deprecated("Use field access instead!")]] float& dyn_reverbGain();
    // Get instance field reference: public System.Single reverbTime
    [[deprecated("Use field access instead!")]] float& dyn_reverbTime();
    // Get instance field reference: public System.Single reverbBrightness
    [[deprecated("Use field access instead!")]] float& dyn_reverbBrightness();
  }; // FmodResonanceAudio/RoomProperties
  #pragma pack(pop)
  static check_size<sizeof(FmodResonanceAudio::RoomProperties), 76 + sizeof(float)> __GlobalNamespace_FmodResonanceAudio_RoomPropertiesSizeCheck;
  static_assert(sizeof(FmodResonanceAudio::RoomProperties) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
