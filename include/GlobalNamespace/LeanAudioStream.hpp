// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LeanAudioStream
  class LeanAudioStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LeanAudioStream);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LeanAudioStream*, "", "LeanAudioStream");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: LeanAudioStream
  // [TokenAttribute] Offset: FFFFFFFF
  class LeanAudioStream : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 position
    // Size: 0x4
    // Offset: 0x10
    int position;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: position and: audioClip
    char __padding0[0x4] = {};
    // public UnityEngine.AudioClip audioClip
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AudioClip* audioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public System.Single[] audioArr
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<float> audioArr;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Get instance field reference: public System.Int32 position
    [[deprecated("Use field access instead!")]] int& dyn_position();
    // Get instance field reference: public UnityEngine.AudioClip audioClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_audioClip();
    // Get instance field reference: public System.Single[] audioArr
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_audioArr();
    // public System.Void .ctor(System.Single[] audioArr)
    // Offset: 0x1AC1458
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LeanAudioStream* New_ctor(::ArrayW<float> audioArr) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LeanAudioStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LeanAudioStream*, creationType>(audioArr)));
    }
    // public System.Void OnAudioRead(System.Single[] data)
    // Offset: 0x1AC1C34
    void OnAudioRead(::ArrayW<float> data);
    // public System.Void OnAudioSetPosition(System.Int32 newPosition)
    // Offset: 0x1AC1CF4
    void OnAudioSetPosition(int newPosition);
  }; // LeanAudioStream
  #pragma pack(pop)
  static check_size<sizeof(LeanAudioStream), 32 + sizeof(::ArrayW<float>)> __GlobalNamespace_LeanAudioStreamSizeCheck;
  static_assert(sizeof(LeanAudioStream) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LeanAudioStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LeanAudioStream::OnAudioRead
// Il2CppName: OnAudioRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LeanAudioStream::*)(::ArrayW<float>)>(&GlobalNamespace::LeanAudioStream::OnAudioRead)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudioStream*), "OnAudioRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeanAudioStream::OnAudioSetPosition
// Il2CppName: OnAudioSetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LeanAudioStream::*)(int)>(&GlobalNamespace::LeanAudioStream::OnAudioSetPosition)> {
  static const MethodInfo* get() {
    static auto* newPosition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeanAudioStream*), "OnAudioSetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPosition});
  }
};
