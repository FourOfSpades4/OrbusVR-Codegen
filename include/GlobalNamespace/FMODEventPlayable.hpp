// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableAsset
#include "UnityEngine/Playables/PlayableAsset.hpp"
// Including type: UnityEngine.Timeline.ITimelineClipAsset
#include "UnityEngine/Timeline/ITimelineClipAsset.hpp"
// Including type: STOP_MODE
#include "GlobalNamespace/STOP_MODE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: FMODEventPlayableBehavior
  class FMODEventPlayableBehavior;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: FMODUnity
namespace FMODUnity {
  // Forward declaring type: ParamRef
  class ParamRef;
}
// Forward declaring namespace: UnityEngine::Timeline
namespace UnityEngine::Timeline {
  // Forward declaring type: TimelineClip
  class TimelineClip;
  // Forward declaring type: ClipCaps
  struct ClipCaps;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FMODEventPlayable
  class FMODEventPlayable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FMODEventPlayable);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FMODEventPlayable*, "", "FMODEventPlayable");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: FMODEventPlayable
  // [TokenAttribute] Offset: FFFFFFFF
  class FMODEventPlayable : public ::UnityEngine::Playables::PlayableAsset/*, public ::UnityEngine::Timeline::ITimelineClipAsset*/ {
    public:
    public:
    // public FMODEventPlayableBehavior template
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::FMODEventPlayableBehavior* _template;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FMODEventPlayableBehavior*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC2934
    // private UnityEngine.GameObject <TrackTargetObject>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* TrackTargetObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Single eventLength
    // Size: 0x4
    // Offset: 0x28
    float eventLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: eventLength and: behavior
    char __padding2[0x4] = {};
    // private FMODEventPlayableBehavior behavior
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::FMODEventPlayableBehavior* behavior;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FMODEventPlayableBehavior*) == 0x8);
    // public System.String eventName
    // Size: 0x8
    // Offset: 0x38
    ::StringW eventName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public STOP_MODE stopType
    // Size: 0x4
    // Offset: 0x40
    ::GlobalNamespace::STOP_MODE stopType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::STOP_MODE) == 0x4);
    // Padding between fields: stopType and: parameters
    char __padding5[0x4] = {};
    // public FMODUnity.ParamRef[] parameters
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::FMODUnity::ParamRef*> parameters;
    // Field size check
    static_assert(sizeof(::ArrayW<::FMODUnity::ParamRef*>) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAC299C
    // private UnityEngine.Timeline.TimelineClip <OwningClip>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Timeline::TimelineClip* OwningClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::Timeline::TimelineClip*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::Timeline::ITimelineClipAsset
    operator ::UnityEngine::Timeline::ITimelineClipAsset() noexcept {
      return *reinterpret_cast<::UnityEngine::Timeline::ITimelineClipAsset*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public FMODEventPlayableBehavior template
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FMODEventPlayableBehavior*& dyn_template();
    // Get instance field reference: private UnityEngine.GameObject <TrackTargetObject>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$TrackTargetObject$k__BackingField();
    // Get instance field reference: public System.Single eventLength
    [[deprecated("Use field access instead!")]] float& dyn_eventLength();
    // Get instance field reference: private FMODEventPlayableBehavior behavior
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FMODEventPlayableBehavior*& dyn_behavior();
    // Get instance field reference: public System.String eventName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_eventName();
    // Get instance field reference: public STOP_MODE stopType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::STOP_MODE& dyn_stopType();
    // Get instance field reference: public FMODUnity.ParamRef[] parameters
    [[deprecated("Use field access instead!")]] ::ArrayW<::FMODUnity::ParamRef*>& dyn_parameters();
    // Get instance field reference: private UnityEngine.Timeline.TimelineClip <OwningClip>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineClip*& dyn_$OwningClip$k__BackingField();
    // public UnityEngine.GameObject get_TrackTargetObject()
    // Offset: 0x15D3904
    ::UnityEngine::GameObject* get_TrackTargetObject();
    // public System.Void set_TrackTargetObject(UnityEngine.GameObject value)
    // Offset: 0x15D390C
    void set_TrackTargetObject(::UnityEngine::GameObject* value);
    // public UnityEngine.Timeline.ClipCaps get_clipCaps()
    // Offset: 0x15D3930
    ::UnityEngine::Timeline::ClipCaps get_clipCaps();
    // public UnityEngine.Timeline.TimelineClip get_OwningClip()
    // Offset: 0x15D3938
    ::UnityEngine::Timeline::TimelineClip* get_OwningClip();
    // public System.Void set_OwningClip(UnityEngine.Timeline.TimelineClip value)
    // Offset: 0x15D3940
    void set_OwningClip(::UnityEngine::Timeline::TimelineClip* value);
    // public System.Void .ctor()
    // Offset: 0x15D3A8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FMODEventPlayable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FMODEventPlayable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FMODEventPlayable*, creationType>()));
    }
    // public override System.Double get_duration()
    // Offset: 0x15D3914
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: System.Double PlayableAsset::get_duration()
    double get_duration();
    // public override UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner)
    // Offset: 0x15D3948
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: UnityEngine.Playables.Playable PlayableAsset::CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner)
    ::UnityEngine::Playables::Playable CreatePlayable(::UnityEngine::Playables::PlayableGraph graph, ::UnityEngine::GameObject* owner);
  }; // FMODEventPlayable
  #pragma pack(pop)
  static check_size<sizeof(FMODEventPlayable), 80 + sizeof(::UnityEngine::Timeline::TimelineClip*)> __GlobalNamespace_FMODEventPlayableSizeCheck;
  static_assert(sizeof(FMODEventPlayable) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FMODEventPlayable::get_TrackTargetObject
// Il2CppName: get_TrackTargetObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::FMODEventPlayable::*)()>(&GlobalNamespace::FMODEventPlayable::get_TrackTargetObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FMODEventPlayable*), "get_TrackTargetObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FMODEventPlayable::set_TrackTargetObject
// Il2CppName: set_TrackTargetObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FMODEventPlayable::*)(::UnityEngine::GameObject*)>(&GlobalNamespace::FMODEventPlayable::set_TrackTargetObject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FMODEventPlayable*), "set_TrackTargetObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FMODEventPlayable::get_clipCaps
// Il2CppName: get_clipCaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::ClipCaps (GlobalNamespace::FMODEventPlayable::*)()>(&GlobalNamespace::FMODEventPlayable::get_clipCaps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FMODEventPlayable*), "get_clipCaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FMODEventPlayable::get_OwningClip
// Il2CppName: get_OwningClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TimelineClip* (GlobalNamespace::FMODEventPlayable::*)()>(&GlobalNamespace::FMODEventPlayable::get_OwningClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FMODEventPlayable*), "get_OwningClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FMODEventPlayable::set_OwningClip
// Il2CppName: set_OwningClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FMODEventPlayable::*)(::UnityEngine::Timeline::TimelineClip*)>(&GlobalNamespace::FMODEventPlayable::set_OwningClip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TimelineClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FMODEventPlayable*), "set_OwningClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FMODEventPlayable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FMODEventPlayable::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (GlobalNamespace::FMODEventPlayable::*)()>(&GlobalNamespace::FMODEventPlayable::get_duration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FMODEventPlayable*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FMODEventPlayable::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Playables::Playable (GlobalNamespace::FMODEventPlayable::*)(::UnityEngine::Playables::PlayableGraph, ::UnityEngine::GameObject*)>(&GlobalNamespace::FMODEventPlayable::CreatePlayable)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "PlayableGraph")->byval_arg;
    static auto* owner = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FMODEventPlayable*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, owner});
  }
};
