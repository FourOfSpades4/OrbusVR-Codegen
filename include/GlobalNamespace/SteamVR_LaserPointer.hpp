// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PointerEventHandler
  class PointerEventHandler;
  // Forward declaring type: PointerEventArgs
  struct PointerEventArgs;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SteamVR_LaserPointer
  class SteamVR_LaserPointer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SteamVR_LaserPointer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SteamVR_LaserPointer*, "", "SteamVR_LaserPointer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: SteamVR_LaserPointer
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamVR_LaserPointer : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean active
    // Size: 0x1
    // Offset: 0x18
    bool active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: active and: color
    char __padding0[0x3] = {};
    // public UnityEngine.Color color
    // Size: 0x10
    // Offset: 0x1C
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Single thickness
    // Size: 0x4
    // Offset: 0x2C
    float thickness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.GameObject holder
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* holder;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject pointer
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* pointer;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean isActive
    // Size: 0x1
    // Offset: 0x40
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean addRigidBody
    // Size: 0x1
    // Offset: 0x41
    bool addRigidBody;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: addRigidBody and: reference
    char __padding6[0x6] = {};
    // public UnityEngine.Transform reference
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* reference;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADC78C
    // private PointerEventHandler PointerIn
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::PointerEventHandler* PointerIn;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PointerEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADC79C
    // private PointerEventHandler PointerOut
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::PointerEventHandler* PointerOut;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PointerEventHandler*) == 0x8);
    // private UnityEngine.Transform previousContact
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* previousContact;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean active
    [[deprecated("Use field access instead!")]] bool& dyn_active();
    // Get instance field reference: public UnityEngine.Color color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_color();
    // Get instance field reference: public System.Single thickness
    [[deprecated("Use field access instead!")]] float& dyn_thickness();
    // Get instance field reference: public UnityEngine.GameObject holder
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_holder();
    // Get instance field reference: public UnityEngine.GameObject pointer
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_pointer();
    // Get instance field reference: private System.Boolean isActive
    [[deprecated("Use field access instead!")]] bool& dyn_isActive();
    // Get instance field reference: public System.Boolean addRigidBody
    [[deprecated("Use field access instead!")]] bool& dyn_addRigidBody();
    // Get instance field reference: public UnityEngine.Transform reference
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_reference();
    // Get instance field reference: private PointerEventHandler PointerIn
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PointerEventHandler*& dyn_PointerIn();
    // Get instance field reference: private PointerEventHandler PointerOut
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PointerEventHandler*& dyn_PointerOut();
    // Get instance field reference: private UnityEngine.Transform previousContact
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_previousContact();
    // public System.Void add_PointerIn(PointerEventHandler value)
    // Offset: 0xE0AA24
    void add_PointerIn(::GlobalNamespace::PointerEventHandler* value);
    // public System.Void remove_PointerIn(PointerEventHandler value)
    // Offset: 0xE0AB10
    void remove_PointerIn(::GlobalNamespace::PointerEventHandler* value);
    // public System.Void add_PointerOut(PointerEventHandler value)
    // Offset: 0xE0ABFC
    void add_PointerOut(::GlobalNamespace::PointerEventHandler* value);
    // public System.Void remove_PointerOut(PointerEventHandler value)
    // Offset: 0xE0ACE8
    void remove_PointerOut(::GlobalNamespace::PointerEventHandler* value);
    // private System.Void Start()
    // Offset: 0xE0ADD4
    void Start();
    // public System.Void OnPointerIn(PointerEventArgs e)
    // Offset: 0xE0B2F0
    void OnPointerIn(::GlobalNamespace::PointerEventArgs e);
    // public System.Void OnPointerOut(PointerEventArgs e)
    // Offset: 0xE0B334
    void OnPointerOut(::GlobalNamespace::PointerEventArgs e);
    // private System.Void Update()
    // Offset: 0xE0B378
    void Update();
    // public System.Void .ctor()
    // Offset: 0xE0B878
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamVR_LaserPointer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR_LaserPointer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamVR_LaserPointer*, creationType>()));
    }
  }; // SteamVR_LaserPointer
  #pragma pack(pop)
  static check_size<sizeof(SteamVR_LaserPointer), 96 + sizeof(::UnityEngine::Transform*)> __GlobalNamespace_SteamVR_LaserPointerSizeCheck;
  static_assert(sizeof(SteamVR_LaserPointer) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_LaserPointer::add_PointerIn
// Il2CppName: add_PointerIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_LaserPointer::*)(::GlobalNamespace::PointerEventHandler*)>(&GlobalNamespace::SteamVR_LaserPointer::add_PointerIn)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "PointerEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_LaserPointer*), "add_PointerIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_LaserPointer::remove_PointerIn
// Il2CppName: remove_PointerIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_LaserPointer::*)(::GlobalNamespace::PointerEventHandler*)>(&GlobalNamespace::SteamVR_LaserPointer::remove_PointerIn)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "PointerEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_LaserPointer*), "remove_PointerIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_LaserPointer::add_PointerOut
// Il2CppName: add_PointerOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_LaserPointer::*)(::GlobalNamespace::PointerEventHandler*)>(&GlobalNamespace::SteamVR_LaserPointer::add_PointerOut)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "PointerEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_LaserPointer*), "add_PointerOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_LaserPointer::remove_PointerOut
// Il2CppName: remove_PointerOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_LaserPointer::*)(::GlobalNamespace::PointerEventHandler*)>(&GlobalNamespace::SteamVR_LaserPointer::remove_PointerOut)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "PointerEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_LaserPointer*), "remove_PointerOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_LaserPointer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_LaserPointer::*)()>(&GlobalNamespace::SteamVR_LaserPointer::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_LaserPointer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_LaserPointer::OnPointerIn
// Il2CppName: OnPointerIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_LaserPointer::*)(::GlobalNamespace::PointerEventArgs)>(&GlobalNamespace::SteamVR_LaserPointer::OnPointerIn)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "PointerEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_LaserPointer*), "OnPointerIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_LaserPointer::OnPointerOut
// Il2CppName: OnPointerOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_LaserPointer::*)(::GlobalNamespace::PointerEventArgs)>(&GlobalNamespace::SteamVR_LaserPointer::OnPointerOut)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "PointerEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_LaserPointer*), "OnPointerOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_LaserPointer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_LaserPointer::*)()>(&GlobalNamespace::SteamVR_LaserPointer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_LaserPointer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_LaserPointer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
