// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RSG.IPromise
#include "RSG/IPromise.hpp"
// Including type: RSG.IPendingPromise
#include "RSG/IPendingPromise.hpp"
// Including type: RSG.IPromiseInfo
#include "RSG/IPromiseInfo.hpp"
// Including type: RSG.RejectHandler
#include "RSG/RejectHandler.hpp"
// Including type: RSG.ProgressHandler
#include "RSG/ProgressHandler.hpp"
// Including type: RSG.PromiseState
#include "RSG/PromiseState.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: RSG
namespace RSG {
  // Skipping declaration: IRejectable because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: RSG
namespace RSG {
  // Forward declaring type: Promise
  class Promise;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RSG::Promise);
DEFINE_IL2CPP_ARG_TYPE(::RSG::Promise*, "RSG", "Promise");
// Type namespace: RSG
namespace RSG {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: RSG.Promise
  // [TokenAttribute] Offset: FFFFFFFF
  class Promise : public ::Il2CppObject/*, public ::RSG::IPromise, public ::RSG::IPendingPromise, public ::RSG::IPromiseInfo*/ {
    public:
    // Nested type: ::RSG::Promise::ResolveHandler
    struct ResolveHandler;
    // Nested type: ::RSG::Promise::$$c__DisplayClass34_0
    class $$c__DisplayClass34_0;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: RSG.Promise/ResolveHandler
    // [TokenAttribute] Offset: FFFFFFFF
    struct ResolveHandler/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Action callback
      // Size: 0x8
      // Offset: 0x0
      ::System::Action* callback;
      // Field size check
      static_assert(sizeof(::System::Action*) == 0x8);
      // public RSG.IRejectable rejectable
      // Size: 0x8
      // Offset: 0x8
      ::RSG::IRejectable* rejectable;
      // Field size check
      static_assert(sizeof(::RSG::IRejectable*) == 0x8);
      public:
      // Creating value type constructor for type: ResolveHandler
      constexpr ResolveHandler(::System::Action* callback_ = {}, ::RSG::IRejectable* rejectable_ = {}) noexcept : callback{callback_}, rejectable{rejectable_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Action callback
      [[deprecated("Use field access instead!")]] ::System::Action*& dyn_callback();
      // Get instance field reference: public RSG.IRejectable rejectable
      [[deprecated("Use field access instead!")]] ::RSG::IRejectable*& dyn_rejectable();
    }; // RSG.Promise/ResolveHandler
    #pragma pack(pop)
    static check_size<sizeof(Promise::ResolveHandler), 8 + sizeof(::RSG::IRejectable*)> __RSG_Promise_ResolveHandlerSizeCheck;
    static_assert(sizeof(Promise::ResolveHandler) == 0x10);
    public:
    // private System.Exception rejectionException
    // Size: 0x8
    // Offset: 0x10
    ::System::Exception* rejectionException;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    // private System.Collections.Generic.List`1<RSG.RejectHandler> rejectHandlers
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::RSG::RejectHandler>* rejectHandlers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::RSG::RejectHandler>*) == 0x8);
    // private System.Collections.Generic.List`1<RSG.Promise/ResolveHandler> resolveHandlers
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::RSG::Promise::ResolveHandler>* resolveHandlers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::RSG::Promise::ResolveHandler>*) == 0x8);
    // private System.Collections.Generic.List`1<RSG.ProgressHandler> progressHandlers
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::RSG::ProgressHandler>* progressHandlers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::RSG::ProgressHandler>*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0xABC43C
    // [CompilerGeneratedAttribute] Offset: 0xABC43C
    // private RSG.PromiseState <CurState>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    ::RSG::PromiseState CurState;
    // Field size check
    static_assert(sizeof(::RSG::PromiseState) == 0x4);
    public:
    // Creating interface conversion operator: operator ::RSG::IPromise
    operator ::RSG::IPromise() noexcept {
      return *reinterpret_cast<::RSG::IPromise*>(this);
    }
    // Creating interface conversion operator: operator ::RSG::IPendingPromise
    operator ::RSG::IPendingPromise() noexcept {
      return *reinterpret_cast<::RSG::IPendingPromise*>(this);
    }
    // Creating interface conversion operator: operator ::RSG::IPromiseInfo
    operator ::RSG::IPromiseInfo() noexcept {
      return *reinterpret_cast<::RSG::IPromiseInfo*>(this);
    }
    // Get static field: static public System.Boolean EnablePromiseTracking
    static bool _get_EnablePromiseTracking();
    // Set static field: static public System.Boolean EnablePromiseTracking
    static void _set_EnablePromiseTracking(bool value);
    // Get static field: static private System.Int32 nextPromiseId
    static int _get_nextPromiseId();
    // Set static field: static private System.Int32 nextPromiseId
    static void _set_nextPromiseId(int value);
    // Get static field: static readonly System.Collections.Generic.HashSet`1<RSG.IPromiseInfo> PendingPromises
    static ::System::Collections::Generic::HashSet_1<::RSG::IPromiseInfo*>* _get_PendingPromises();
    // Set static field: static readonly System.Collections.Generic.HashSet`1<RSG.IPromiseInfo> PendingPromises
    static void _set_PendingPromises(::System::Collections::Generic::HashSet_1<::RSG::IPromiseInfo*>* value);
    // Get instance field reference: private System.Exception rejectionException
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn_rejectionException();
    // Get instance field reference: private System.Collections.Generic.List`1<RSG.RejectHandler> rejectHandlers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::RSG::RejectHandler>*& dyn_rejectHandlers();
    // Get instance field reference: private System.Collections.Generic.List`1<RSG.Promise/ResolveHandler> resolveHandlers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::RSG::Promise::ResolveHandler>*& dyn_resolveHandlers();
    // Get instance field reference: private System.Collections.Generic.List`1<RSG.ProgressHandler> progressHandlers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::RSG::ProgressHandler>*& dyn_progressHandlers();
    // Get instance field reference: private RSG.PromiseState <CurState>k__BackingField
    [[deprecated("Use field access instead!")]] ::RSG::PromiseState& dyn_$CurState$k__BackingField();
    // public RSG.PromiseState get_CurState()
    // Offset: 0x28A35D8
    ::RSG::PromiseState get_CurState();
    // private System.Void set_CurState(RSG.PromiseState value)
    // Offset: 0x28A35E0
    void set_CurState(::RSG::PromiseState value);
    // static System.Int32 NextId()
    // Offset: 0x28A35E8
    static int NextId();
    // private System.Void InvokeRejectHandler(System.Action`1<System.Exception> callback, RSG.IRejectable rejectable, System.Exception value)
    // Offset: 0x28A3658
    void InvokeRejectHandler(::System::Action_1<::System::Exception*>* callback, ::RSG::IRejectable* rejectable, ::System::Exception* value);
    // private System.Void ClearHandlers()
    // Offset: 0x28A37BC
    void ClearHandlers();
    // private System.Void InvokeRejectHandlers(System.Exception ex)
    // Offset: 0x28A37C8
    void InvokeRejectHandlers(::System::Exception* ex);
    // public System.Void Reject(System.Exception ex)
    // Offset: 0x28A38BC
    void Reject(::System::Exception* ex);
    // static private System.Void .cctor()
    // Offset: 0x28A3ADC
    static void _cctor();
  }; // RSG.Promise
  #pragma pack(pop)
  static check_size<sizeof(Promise), 48 + sizeof(::RSG::PromiseState)> __RSG_PromiseSizeCheck;
  static_assert(sizeof(Promise) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::RSG::Promise::ResolveHandler, "RSG", "Promise/ResolveHandler");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RSG::Promise::get_CurState
// Il2CppName: get_CurState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RSG::PromiseState (RSG::Promise::*)()>(&RSG::Promise::get_CurState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "get_CurState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::Promise::set_CurState
// Il2CppName: set_CurState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::RSG::PromiseState)>(&RSG::Promise::set_CurState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("RSG", "PromiseState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "set_CurState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: RSG::Promise::NextId
// Il2CppName: NextId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&RSG::Promise::NextId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "NextId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::Promise::InvokeRejectHandler
// Il2CppName: InvokeRejectHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Action_1<::System::Exception*>*, ::RSG::IRejectable*, ::System::Exception*)>(&RSG::Promise::InvokeRejectHandler)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Exception")})->byval_arg;
    static auto* rejectable = &::il2cpp_utils::GetClassFromName("RSG", "IRejectable")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "InvokeRejectHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, rejectable, value});
  }
};
// Writing MetadataGetter for method: RSG::Promise::ClearHandlers
// Il2CppName: ClearHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)()>(&RSG::Promise::ClearHandlers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "ClearHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RSG::Promise::InvokeRejectHandlers
// Il2CppName: InvokeRejectHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Exception*)>(&RSG::Promise::InvokeRejectHandlers)> {
  static const MethodInfo* get() {
    static auto* ex = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "InvokeRejectHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ex});
  }
};
// Writing MetadataGetter for method: RSG::Promise::Reject
// Il2CppName: Reject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RSG::Promise::*)(::System::Exception*)>(&RSG::Promise::Reject)> {
  static const MethodInfo* get() {
    static auto* ex = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), "Reject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ex});
  }
};
// Writing MetadataGetter for method: RSG::Promise::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&RSG::Promise::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RSG::Promise*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
