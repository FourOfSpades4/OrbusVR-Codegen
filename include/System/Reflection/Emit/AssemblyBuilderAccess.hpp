// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: System.Reflection.Emit
namespace System::Reflection::Emit {
  // Forward declaring type: AssemblyBuilderAccess
  struct AssemblyBuilderAccess;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::Emit::AssemblyBuilderAccess, "System.Reflection.Emit", "AssemblyBuilderAccess");
// Type namespace: System.Reflection.Emit
namespace System::Reflection::Emit {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: System.Reflection.Emit.AssemblyBuilderAccess
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: A59878
  struct AssemblyBuilderAccess/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: AssemblyBuilderAccess
    constexpr AssemblyBuilderAccess(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public System.Reflection.Emit.AssemblyBuilderAccess Run
    static constexpr const int Run = 1;
    // Get static field: static public System.Reflection.Emit.AssemblyBuilderAccess Run
    static ::System::Reflection::Emit::AssemblyBuilderAccess _get_Run();
    // Set static field: static public System.Reflection.Emit.AssemblyBuilderAccess Run
    static void _set_Run(::System::Reflection::Emit::AssemblyBuilderAccess value);
    // static field const value: static public System.Reflection.Emit.AssemblyBuilderAccess Save
    static constexpr const int Save = 2;
    // Get static field: static public System.Reflection.Emit.AssemblyBuilderAccess Save
    static ::System::Reflection::Emit::AssemblyBuilderAccess _get_Save();
    // Set static field: static public System.Reflection.Emit.AssemblyBuilderAccess Save
    static void _set_Save(::System::Reflection::Emit::AssemblyBuilderAccess value);
    // static field const value: static public System.Reflection.Emit.AssemblyBuilderAccess RunAndSave
    static constexpr const int RunAndSave = 3;
    // Get static field: static public System.Reflection.Emit.AssemblyBuilderAccess RunAndSave
    static ::System::Reflection::Emit::AssemblyBuilderAccess _get_RunAndSave();
    // Set static field: static public System.Reflection.Emit.AssemblyBuilderAccess RunAndSave
    static void _set_RunAndSave(::System::Reflection::Emit::AssemblyBuilderAccess value);
    // static field const value: static public System.Reflection.Emit.AssemblyBuilderAccess ReflectionOnly
    static constexpr const int ReflectionOnly = 6;
    // Get static field: static public System.Reflection.Emit.AssemblyBuilderAccess ReflectionOnly
    static ::System::Reflection::Emit::AssemblyBuilderAccess _get_ReflectionOnly();
    // Set static field: static public System.Reflection.Emit.AssemblyBuilderAccess ReflectionOnly
    static void _set_ReflectionOnly(::System::Reflection::Emit::AssemblyBuilderAccess value);
    // static field const value: static public System.Reflection.Emit.AssemblyBuilderAccess RunAndCollect
    static constexpr const int RunAndCollect = 9;
    // Get static field: static public System.Reflection.Emit.AssemblyBuilderAccess RunAndCollect
    static ::System::Reflection::Emit::AssemblyBuilderAccess _get_RunAndCollect();
    // Set static field: static public System.Reflection.Emit.AssemblyBuilderAccess RunAndCollect
    static void _set_RunAndCollect(::System::Reflection::Emit::AssemblyBuilderAccess value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // System.Reflection.Emit.AssemblyBuilderAccess
  #pragma pack(pop)
  static check_size<sizeof(AssemblyBuilderAccess), 0 + sizeof(int)> __System_Reflection_Emit_AssemblyBuilderAccessSizeCheck;
  static_assert(sizeof(AssemblyBuilderAccess) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
