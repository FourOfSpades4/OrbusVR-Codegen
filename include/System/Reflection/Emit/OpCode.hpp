// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System.Reflection.Emit
namespace System::Reflection::Emit {
  // Forward declaring type: OpCode
  struct OpCode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::Emit::OpCode, "System.Reflection.Emit", "OpCode");
// Type namespace: System.Reflection.Emit
namespace System::Reflection::Emit {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Reflection.Emit.OpCode
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: A59908
  struct OpCode/*, public ::System::ValueType*/ {
    public:
    public:
    // System.Byte op1
    // Size: 0x1
    // Offset: 0x0
    uint8_t op1;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte op2
    // Size: 0x1
    // Offset: 0x1
    uint8_t op2;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte push
    // Size: 0x1
    // Offset: 0x2
    uint8_t push;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte pop
    // Size: 0x1
    // Offset: 0x3
    uint8_t pop;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte size
    // Size: 0x1
    // Offset: 0x4
    uint8_t size;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte type
    // Size: 0x1
    // Offset: 0x5
    uint8_t type;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte args
    // Size: 0x1
    // Offset: 0x6
    uint8_t args;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte flow
    // Size: 0x1
    // Offset: 0x7
    uint8_t flow;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: OpCode
    constexpr OpCode(uint8_t op1_ = {}, uint8_t op2_ = {}, uint8_t push_ = {}, uint8_t pop_ = {}, uint8_t size_ = {}, uint8_t type_ = {}, uint8_t args_ = {}, uint8_t flow_ = {}) noexcept : op1{op1_}, op2{op2_}, push{push_}, pop{pop_}, size{size_}, type{type_}, args{args_}, flow{flow_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: System.Byte op1
    [[deprecated("Use field access instead!")]] uint8_t& dyn_op1();
    // Get instance field reference: System.Byte op2
    [[deprecated("Use field access instead!")]] uint8_t& dyn_op2();
    // Get instance field reference: private System.Byte push
    [[deprecated("Use field access instead!")]] uint8_t& dyn_push();
    // Get instance field reference: private System.Byte pop
    [[deprecated("Use field access instead!")]] uint8_t& dyn_pop();
    // Get instance field reference: private System.Byte size
    [[deprecated("Use field access instead!")]] uint8_t& dyn_size();
    // Get instance field reference: private System.Byte type
    [[deprecated("Use field access instead!")]] uint8_t& dyn_type();
    // Get instance field reference: private System.Byte args
    [[deprecated("Use field access instead!")]] uint8_t& dyn_args();
    // Get instance field reference: private System.Byte flow
    [[deprecated("Use field access instead!")]] uint8_t& dyn_flow();
    // System.Void .ctor(System.Int32 p, System.Int32 q)
    // Offset: 0xBAF658
    OpCode(int p, int q);
    // public System.String get_Name()
    // Offset: 0xBAF6AC
    ::StringW get_Name();
    // public override System.Int32 GetHashCode()
    // Offset: 0xBAF694
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xBAF69C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.String ToString()
    // Offset: 0xBAF6A4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // System.Reflection.Emit.OpCode
  #pragma pack(pop)
  static check_size<sizeof(OpCode), 7 + sizeof(uint8_t)> __System_Reflection_Emit_OpCodeSizeCheck;
  static_assert(sizeof(OpCode) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Reflection::Emit::OpCode::OpCode
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Reflection::Emit::OpCode::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::Emit::OpCode::*)()>(&System::Reflection::Emit::OpCode::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Emit::OpCode), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Emit::OpCode::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Reflection::Emit::OpCode::*)()>(&System::Reflection::Emit::OpCode::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Emit::OpCode), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Reflection::Emit::OpCode::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Reflection::Emit::OpCode::*)(::Il2CppObject*)>(&System::Reflection::Emit::OpCode::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Emit::OpCode), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Reflection::Emit::OpCode::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Reflection::Emit::OpCode::*)()>(&System::Reflection::Emit::OpCode::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Emit::OpCode), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
