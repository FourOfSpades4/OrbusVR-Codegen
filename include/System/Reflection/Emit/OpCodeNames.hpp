// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: System.Reflection.Emit
namespace System::Reflection::Emit {
  // Forward declaring type: OpCodeNames
  class OpCodeNames;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Reflection::Emit::OpCodeNames);
DEFINE_IL2CPP_ARG_TYPE(::System::Reflection::Emit::OpCodeNames*, "System.Reflection.Emit", "OpCodeNames");
// Type namespace: System.Reflection.Emit
namespace System::Reflection::Emit {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Reflection.Emit.OpCodeNames
  // [TokenAttribute] Offset: FFFFFFFF
  class OpCodeNames : public ::Il2CppObject {
    public:
    // Get static field: static readonly System.String[] names
    static ::ArrayW<::StringW> _get_names();
    // Set static field: static readonly System.String[] names
    static void _set_names(::ArrayW<::StringW> value);
    // static private System.Void .cctor()
    // Offset: 0x1D6F2F4
    static void _cctor();
  }; // System.Reflection.Emit.OpCodeNames
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Reflection::Emit::OpCodeNames::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Reflection::Emit::OpCodeNames::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Reflection::Emit::OpCodeNames*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
