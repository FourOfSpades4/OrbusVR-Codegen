// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainImpl
#include "System/Security/Cryptography/X509Certificates/X509ChainImpl.hpp"
// Including type: System.Security.Cryptography.X509Certificates.StoreLocation
#include "System/Security/Cryptography/X509Certificates/StoreLocation.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainStatus
#include "System/Security/Cryptography/X509Certificates/X509ChainStatus.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509ChainElementCollection
  class X509ChainElementCollection;
  // Forward declaring type: X509ChainPolicy
  class X509ChainPolicy;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography.X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509ChainImplMono
  class X509ChainImplMono;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::Cryptography::X509Certificates::X509ChainImplMono);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::Cryptography::X509Certificates::X509ChainImplMono*, "System.Security.Cryptography.X509Certificates", "X509ChainImplMono");
// Type namespace: System.Security.Cryptography.X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.X509Certificates.X509ChainImplMono
  // [TokenAttribute] Offset: FFFFFFFF
  class X509ChainImplMono : public ::System::Security::Cryptography::X509Certificates::X509ChainImpl {
    public:
    public:
    // private System.Security.Cryptography.X509Certificates.StoreLocation location
    // Size: 0x4
    // Offset: 0x10
    ::System::Security::Cryptography::X509Certificates::StoreLocation location;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::StoreLocation) == 0x4);
    // Padding between fields: location and: elements
    char __padding0[0x4] = {};
    // private System.Security.Cryptography.X509Certificates.X509ChainElementCollection elements
    // Size: 0x8
    // Offset: 0x18
    ::System::Security::Cryptography::X509Certificates::X509ChainElementCollection* elements;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509ChainElementCollection*) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509ChainPolicy policy
    // Size: 0x8
    // Offset: 0x20
    ::System::Security::Cryptography::X509Certificates::X509ChainPolicy* policy;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509ChainPolicy*) == 0x8);
    public:
    // Get static field: static private System.Security.Cryptography.X509Certificates.X509ChainStatus[] Empty
    static ::ArrayW<::System::Security::Cryptography::X509Certificates::X509ChainStatus> _get_Empty();
    // Set static field: static private System.Security.Cryptography.X509Certificates.X509ChainStatus[] Empty
    static void _set_Empty(::ArrayW<::System::Security::Cryptography::X509Certificates::X509ChainStatus> value);
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.StoreLocation location
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::StoreLocation& dyn_location();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509ChainElementCollection elements
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509ChainElementCollection*& dyn_elements();
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509ChainPolicy policy
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509ChainPolicy*& dyn_policy();
    // public System.Void .ctor(System.Boolean useMachineContext)
    // Offset: 0x18BC16C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509ChainImplMono* New_ctor(bool useMachineContext) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::Cryptography::X509Certificates::X509ChainImplMono::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509ChainImplMono*, creationType>(useMachineContext)));
    }
    // static private System.Void .cctor()
    // Offset: 0x18BC25C
    static void _cctor();
    // public override System.Boolean get_IsValid()
    // Offset: 0x18BC24C
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Boolean X509ChainImpl::get_IsValid()
    bool get_IsValid();
    // public override System.Void set_ChainPolicy(System.Security.Cryptography.X509Certificates.X509ChainPolicy value)
    // Offset: 0x18BC254
    // Implemented from: System.Security.Cryptography.X509Certificates.X509ChainImpl
    // Base method: System.Void X509ChainImpl::set_ChainPolicy(System.Security.Cryptography.X509Certificates.X509ChainPolicy value)
    void set_ChainPolicy(::System::Security::Cryptography::X509Certificates::X509ChainPolicy* value);
  }; // System.Security.Cryptography.X509Certificates.X509ChainImplMono
  #pragma pack(pop)
  static check_size<sizeof(X509ChainImplMono), 32 + sizeof(::System::Security::Cryptography::X509Certificates::X509ChainPolicy*)> __System_Security_Cryptography_X509Certificates_X509ChainImplMonoSizeCheck;
  static_assert(sizeof(X509ChainImplMono) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)()>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Security::Cryptography::X509Certificates::X509ChainImplMono::set_ChainPolicy
// Il2CppName: set_ChainPolicy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Cryptography::X509Certificates::X509ChainImplMono::*)(::System::Security::Cryptography::X509Certificates::X509ChainPolicy*)>(&System::Security::Cryptography::X509Certificates::X509ChainImplMono::set_ChainPolicy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509ChainPolicy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Cryptography::X509Certificates::X509ChainImplMono*), "set_ChainPolicy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
