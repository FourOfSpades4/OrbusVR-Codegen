// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.Permissions.CodeAccessSecurityAttribute
#include "System/Security/Permissions/CodeAccessSecurityAttribute.hpp"
// Including type: System.Security.Permissions.SecurityPermissionFlag
#include "System/Security/Permissions/SecurityPermissionFlag.hpp"
// Completed includes
// Type namespace: System.Security.Permissions
namespace System::Security::Permissions {
  // Forward declaring type: SecurityPermissionAttribute
  class SecurityPermissionAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::Permissions::SecurityPermissionAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::Permissions::SecurityPermissionAttribute*, "System.Security.Permissions", "SecurityPermissionAttribute");
// Type namespace: System.Security.Permissions
namespace System::Security::Permissions {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Permissions.SecurityPermissionAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [ObsoleteAttribute] Offset: A5A988
  // [ComVisibleAttribute] Offset: A5A988
  // [AttributeUsageAttribute] Offset: A5A988
  class SecurityPermissionAttribute : public ::System::Security::Permissions::CodeAccessSecurityAttribute {
    public:
    public:
    // private System.Security.Permissions.SecurityPermissionFlag m_Flags
    // Size: 0x4
    // Offset: 0x10
    ::System::Security::Permissions::SecurityPermissionFlag m_Flags;
    // Field size check
    static_assert(sizeof(::System::Security::Permissions::SecurityPermissionFlag) == 0x4);
    public:
    // Creating conversion operator: operator ::System::Security::Permissions::SecurityPermissionFlag
    constexpr operator ::System::Security::Permissions::SecurityPermissionFlag() const noexcept {
      return m_Flags;
    }
    // Get instance field reference: private System.Security.Permissions.SecurityPermissionFlag m_Flags
    [[deprecated("Use field access instead!")]] ::System::Security::Permissions::SecurityPermissionFlag& dyn_m_Flags();
    // public System.Void set_SkipVerification(System.Boolean value)
    // Offset: 0x182DB9C
    void set_SkipVerification(bool value);
  }; // System.Security.Permissions.SecurityPermissionAttribute
  #pragma pack(pop)
  static check_size<sizeof(SecurityPermissionAttribute), 16 + sizeof(::System::Security::Permissions::SecurityPermissionFlag)> __System_Security_Permissions_SecurityPermissionAttributeSizeCheck;
  static_assert(sizeof(SecurityPermissionAttribute) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::Permissions::SecurityPermissionAttribute::set_SkipVerification
// Il2CppName: set_SkipVerification
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::Permissions::SecurityPermissionAttribute::*)(bool)>(&System::Security::Permissions::SecurityPermissionAttribute::set_SkipVerification)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::Permissions::SecurityPermissionAttribute*), "set_SkipVerification", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
