// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Security.SecurityRuleSet
#include "System/Security/SecurityRuleSet.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Security
namespace System::Security {
  // Forward declaring type: SecurityRulesAttribute
  class SecurityRulesAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Security::SecurityRulesAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::Security::SecurityRulesAttribute*, "System.Security", "SecurityRulesAttribute");
// Type namespace: System.Security
namespace System::Security {
  // Size: 0x12
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.SecurityRulesAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: A5A750
  class SecurityRulesAttribute : public ::System::Attribute {
    public:
    public:
    // private System.Security.SecurityRuleSet m_ruleSet
    // Size: 0x1
    // Offset: 0x10
    ::System::Security::SecurityRuleSet m_ruleSet;
    // Field size check
    static_assert(sizeof(::System::Security::SecurityRuleSet) == 0x1);
    // private System.Boolean m_skipVerificationInFullTrust
    // Size: 0x1
    // Offset: 0x11
    bool m_skipVerificationInFullTrust;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Security.SecurityRuleSet m_ruleSet
    [[deprecated("Use field access instead!")]] ::System::Security::SecurityRuleSet& dyn_m_ruleSet();
    // Get instance field reference: private System.Boolean m_skipVerificationInFullTrust
    [[deprecated("Use field access instead!")]] bool& dyn_m_skipVerificationInFullTrust();
    // public System.Void .ctor(System.Security.SecurityRuleSet ruleSet)
    // Offset: 0x18324E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SecurityRulesAttribute* New_ctor(::System::Security::SecurityRuleSet ruleSet) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Security::SecurityRulesAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SecurityRulesAttribute*, creationType>(ruleSet)));
    }
    // public System.Void set_SkipVerificationInFullTrust(System.Boolean value)
    // Offset: 0x1832514
    void set_SkipVerificationInFullTrust(bool value);
  }; // System.Security.SecurityRulesAttribute
  #pragma pack(pop)
  static check_size<sizeof(SecurityRulesAttribute), 17 + sizeof(bool)> __System_Security_SecurityRulesAttributeSizeCheck;
  static_assert(sizeof(SecurityRulesAttribute) == 0x12);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Security::SecurityRulesAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Security::SecurityRulesAttribute::set_SkipVerificationInFullTrust
// Il2CppName: set_SkipVerificationInFullTrust
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Security::SecurityRulesAttribute::*)(bool)>(&System::Security::SecurityRulesAttribute::set_SkipVerificationInFullTrust)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Security::SecurityRulesAttribute*), "set_SkipVerificationInFullTrust", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
