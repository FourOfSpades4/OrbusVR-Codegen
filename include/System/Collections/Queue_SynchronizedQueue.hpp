// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Queue
#include "System/Collections/Queue.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Collections::Queue::SynchronizedQueue);
DEFINE_IL2CPP_ARG_TYPE(::System::Collections::Queue::SynchronizedQueue*, "System.Collections", "Queue/SynchronizedQueue");
// Type namespace: System.Collections
namespace System::Collections {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: System.Collections.Queue/SynchronizedQueue
  // [TokenAttribute] Offset: FFFFFFFF
  class Queue::SynchronizedQueue : public ::System::Collections::Queue {
    public:
    public:
    // private System.Collections.Queue _q
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Queue* q;
    // Field size check
    static_assert(sizeof(::System::Collections::Queue*) == 0x8);
    // private System.Object root
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppObject* root;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Queue _q
    [[deprecated("Use field access instead!")]] ::System::Collections::Queue*& dyn__q();
    // Get instance field reference: private System.Object root
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_root();
    // System.Void .ctor(System.Collections.Queue q)
    // Offset: 0x1A7B104
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Queue::SynchronizedQueue* New_ctor(::System::Collections::Queue* q) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Collections::Queue::SynchronizedQueue::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Queue::SynchronizedQueue*, creationType>(q)));
    }
    // public override System.Boolean get_IsSynchronized()
    // Offset: 0x1A7B5D0
    // Implemented from: System.Collections.Queue
    // Base method: System.Boolean Queue::get_IsSynchronized()
    bool get_IsSynchronized();
    // public override System.Object get_SyncRoot()
    // Offset: 0x1A7B5D8
    // Implemented from: System.Collections.Queue
    // Base method: System.Object Queue::get_SyncRoot()
    ::Il2CppObject* get_SyncRoot();
    // public override System.Int32 get_Count()
    // Offset: 0x1A7B5E0
    // Implemented from: System.Collections.Queue
    // Base method: System.Int32 Queue::get_Count()
    int get_Count();
    // public override System.Void Clear()
    // Offset: 0x1A7B694
    // Implemented from: System.Collections.Queue
    // Base method: System.Void Queue::Clear()
    void Clear();
    // public override System.Object Clone()
    // Offset: 0x1A7B740
    // Implemented from: System.Collections.Queue
    // Base method: System.Object Queue::Clone()
    ::Il2CppObject* Clone();
    // public override System.Void CopyTo(System.Array array, System.Int32 arrayIndex)
    // Offset: 0x1A7B8D4
    // Implemented from: System.Collections.Queue
    // Base method: System.Void Queue::CopyTo(System.Array array, System.Int32 arrayIndex)
    void CopyTo(::System::Array* array, int arrayIndex);
    // public override System.Void Enqueue(System.Object value)
    // Offset: 0x1A7B998
    // Implemented from: System.Collections.Queue
    // Base method: System.Void Queue::Enqueue(System.Object value)
    void Enqueue(::Il2CppObject* value);
    // public override System.Object Dequeue()
    // Offset: 0x1A7BA4C
    // Implemented from: System.Collections.Queue
    // Base method: System.Object Queue::Dequeue()
    ::Il2CppObject* Dequeue();
    // public override System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x1A7BB04
    // Implemented from: System.Collections.Queue
    // Base method: System.Collections.IEnumerator Queue::GetEnumerator()
    ::System::Collections::IEnumerator* GetEnumerator();
    // public override System.Object Peek()
    // Offset: 0x1A7BBBC
    // Implemented from: System.Collections.Queue
    // Base method: System.Object Queue::Peek()
    ::Il2CppObject* Peek();
    // public override System.Object[] ToArray()
    // Offset: 0x1A7BC74
    // Implemented from: System.Collections.Queue
    // Base method: System.Object[] Queue::ToArray()
    ::ArrayW<::Il2CppObject*> ToArray();
  }; // System.Collections.Queue/SynchronizedQueue
  #pragma pack(pop)
  static check_size<sizeof(Queue::SynchronizedQueue), 64 + sizeof(::Il2CppObject*)> __System_Collections_Queue_SynchronizedQueueSizeCheck;
  static_assert(sizeof(Queue::SynchronizedQueue) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Collections::Queue::SynchronizedQueue::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Collections::Queue::SynchronizedQueue::get_IsSynchronized
// Il2CppName: get_IsSynchronized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Collections::Queue::SynchronizedQueue::*)()>(&System::Collections::Queue::SynchronizedQueue::get_IsSynchronized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Queue::SynchronizedQueue*), "get_IsSynchronized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Queue::SynchronizedQueue::get_SyncRoot
// Il2CppName: get_SyncRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Collections::Queue::SynchronizedQueue::*)()>(&System::Collections::Queue::SynchronizedQueue::get_SyncRoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Queue::SynchronizedQueue*), "get_SyncRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Queue::SynchronizedQueue::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Collections::Queue::SynchronizedQueue::*)()>(&System::Collections::Queue::SynchronizedQueue::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Queue::SynchronizedQueue*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Queue::SynchronizedQueue::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Queue::SynchronizedQueue::*)()>(&System::Collections::Queue::SynchronizedQueue::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Queue::SynchronizedQueue*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Queue::SynchronizedQueue::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Collections::Queue::SynchronizedQueue::*)()>(&System::Collections::Queue::SynchronizedQueue::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Queue::SynchronizedQueue*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Queue::SynchronizedQueue::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Queue::SynchronizedQueue::*)(::System::Array*, int)>(&System::Collections::Queue::SynchronizedQueue::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* arrayIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Queue::SynchronizedQueue*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, arrayIndex});
  }
};
// Writing MetadataGetter for method: System::Collections::Queue::SynchronizedQueue::Enqueue
// Il2CppName: Enqueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Collections::Queue::SynchronizedQueue::*)(::Il2CppObject*)>(&System::Collections::Queue::SynchronizedQueue::Enqueue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Queue::SynchronizedQueue*), "Enqueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Collections::Queue::SynchronizedQueue::Dequeue
// Il2CppName: Dequeue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Collections::Queue::SynchronizedQueue::*)()>(&System::Collections::Queue::SynchronizedQueue::Dequeue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Queue::SynchronizedQueue*), "Dequeue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Queue::SynchronizedQueue::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Collections::Queue::SynchronizedQueue::*)()>(&System::Collections::Queue::SynchronizedQueue::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Queue::SynchronizedQueue*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Queue::SynchronizedQueue::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Collections::Queue::SynchronizedQueue::*)()>(&System::Collections::Queue::SynchronizedQueue::Peek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Queue::SynchronizedQueue*), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Collections::Queue::SynchronizedQueue::ToArray
// Il2CppName: ToArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppObject*> (System::Collections::Queue::SynchronizedQueue::*)()>(&System::Collections::Queue::SynchronizedQueue::ToArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Collections::Queue::SynchronizedQueue*), "ToArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
