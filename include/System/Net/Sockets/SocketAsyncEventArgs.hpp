// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.EventArgs
#include "System/EventArgs.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.ArraySegment`1
#include "System/ArraySegment_1.hpp"
// Including type: System.Net.Sockets.SocketAsyncOperation
#include "System/Net/Sockets/SocketAsyncOperation.hpp"
// Including type: System.Net.Sockets.IPPacketInformation
#include "System/Net/Sockets/IPPacketInformation.hpp"
// Including type: System.Net.Sockets.TransmitFileOptions
#include "System/Net/Sockets/TransmitFileOptions.hpp"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: System.Net.Sockets.SocketFlags
#include "System/Net/Sockets/SocketFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: EndPoint
  class EndPoint;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
  // Forward declaring type: SocketAsyncResult
  class SocketAsyncResult;
  // Forward declaring type: SendPacketsElement
  class SendPacketsElement;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IList`1 because it is already included!
}
// Completed forward declares
// Type namespace: System.Net.Sockets
namespace System::Net::Sockets {
  // Forward declaring type: SocketAsyncEventArgs
  class SocketAsyncEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Sockets::SocketAsyncEventArgs);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Sockets::SocketAsyncEventArgs*, "System.Net.Sockets", "SocketAsyncEventArgs");
// Type namespace: System.Net.Sockets
namespace System::Net::Sockets {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Sockets.SocketAsyncEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  class SocketAsyncEventArgs : public ::System::EventArgs/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0x10
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disposed and: in_progress
    char __padding0[0x3] = {};
    // System.Int32 in_progress
    // Size: 0x4
    // Offset: 0x14
    int in_progress;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Net.EndPoint remote_ep
    // Size: 0x8
    // Offset: 0x18
    ::System::Net::EndPoint* remote_ep;
    // Field size check
    static_assert(sizeof(::System::Net::EndPoint*) == 0x8);
    // System.Net.Sockets.Socket current_socket
    // Size: 0x8
    // Offset: 0x20
    ::System::Net::Sockets::Socket* current_socket;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::Socket*) == 0x8);
    // System.Net.Sockets.SocketAsyncResult socket_async_result
    // Size: 0x8
    // Offset: 0x28
    ::System::Net::Sockets::SocketAsyncResult* socket_async_result;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::SocketAsyncResult*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xA66A44
    // private System.Exception <ConnectByNameError>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::System::Exception* ConnectByNameError;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xA66A54
    // private System.Net.Sockets.Socket <AcceptSocket>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::System::Net::Sockets::Socket* AcceptSocket;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::Socket*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xA66A64
    // private System.Byte[] <Buffer>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<uint8_t> Buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.Collections.Generic.IList`1<System.ArraySegment`1<System.Byte>> m_BufferList
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::IList_1<::System::ArraySegment_1<uint8_t>>* m_BufferList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IList_1<::System::ArraySegment_1<uint8_t>>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xA66A74
    // private System.Int32 <BytesTransferred>k__BackingField
    // Size: 0x4
    // Offset: 0x50
    int BytesTransferred;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xA66A84
    // private System.Int32 <Count>k__BackingField
    // Size: 0x4
    // Offset: 0x54
    int Count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xA66A94
    // private System.Boolean <DisconnectReuseSocket>k__BackingField
    // Size: 0x1
    // Offset: 0x58
    bool DisconnectReuseSocket;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: DisconnectReuseSocket and: LastOperation
    char __padding11[0x3] = {};
    // [CompilerGeneratedAttribute] Offset: 0xA66AA4
    // private System.Net.Sockets.SocketAsyncOperation <LastOperation>k__BackingField
    // Size: 0x4
    // Offset: 0x5C
    ::System::Net::Sockets::SocketAsyncOperation LastOperation;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::SocketAsyncOperation) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xA66AB4
    // private System.Int32 <Offset>k__BackingField
    // Size: 0x4
    // Offset: 0x60
    int Offset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Offset and: ReceiveMessageFromPacketInfo
    char __padding13[0x4] = {};
    // [CompilerGeneratedAttribute] Offset: 0xA66AC4
    // private System.Net.Sockets.IPPacketInformation <ReceiveMessageFromPacketInfo>k__BackingField
    // Size: 0xC
    // Offset: 0x68
    ::System::Net::Sockets::IPPacketInformation ReceiveMessageFromPacketInfo;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::IPPacketInformation) == 0xC);
    // Padding between fields: ReceiveMessageFromPacketInfo and: SendPacketsElements
    char __padding14[0x4] = {};
    // [CompilerGeneratedAttribute] Offset: 0xA66AD4
    // private System.Net.Sockets.SendPacketsElement[] <SendPacketsElements>k__BackingField
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::System::Net::Sockets::SendPacketsElement*> SendPacketsElements;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Net::Sockets::SendPacketsElement*>) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xA66AE4
    // private System.Net.Sockets.TransmitFileOptions <SendPacketsFlags>k__BackingField
    // Size: 0x4
    // Offset: 0x80
    ::System::Net::Sockets::TransmitFileOptions SendPacketsFlags;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::TransmitFileOptions) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xA66AF4
    // private System.Int32 <SendPacketsSendSize>k__BackingField
    // Size: 0x4
    // Offset: 0x84
    int SendPacketsSendSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xA66B04
    // private System.Net.Sockets.SocketError <SocketError>k__BackingField
    // Size: 0x4
    // Offset: 0x88
    ::System::Net::Sockets::SocketError SocketError;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::SocketError) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xA66B14
    // private System.Net.Sockets.SocketFlags <SocketFlags>k__BackingField
    // Size: 0x4
    // Offset: 0x8C
    ::System::Net::Sockets::SocketFlags SocketFlags;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::SocketFlags) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xA66B24
    // private System.Object <UserToken>k__BackingField
    // Size: 0x8
    // Offset: 0x90
    ::Il2CppObject* UserToken;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xA66B34
    // private System.Boolean <PolicyRestricted>k__BackingField
    // Size: 0x1
    // Offset: 0x98
    bool PolicyRestricted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: PolicyRestricted and: Completed
    char __padding21[0x7] = {};
    // [CompilerGeneratedAttribute] Offset: 0xA66B44
    // private System.EventHandler`1<System.Net.Sockets.SocketAsyncEventArgs> Completed
    // Size: 0x8
    // Offset: 0xA0
    ::System::EventHandler_1<::System::Net::Sockets::SocketAsyncEventArgs*>* Completed;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::System::Net::Sockets::SocketAsyncEventArgs*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Boolean disposed
    [[deprecated("Use field access instead!")]] bool& dyn_disposed();
    // Get instance field reference: System.Int32 in_progress
    [[deprecated("Use field access instead!")]] int& dyn_in_progress();
    // Get instance field reference: System.Net.EndPoint remote_ep
    [[deprecated("Use field access instead!")]] ::System::Net::EndPoint*& dyn_remote_ep();
    // Get instance field reference: System.Net.Sockets.Socket current_socket
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::Socket*& dyn_current_socket();
    // Get instance field reference: System.Net.Sockets.SocketAsyncResult socket_async_result
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::SocketAsyncResult*& dyn_socket_async_result();
    // Get instance field reference: private System.Exception <ConnectByNameError>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn_$ConnectByNameError$k__BackingField();
    // Get instance field reference: private System.Net.Sockets.Socket <AcceptSocket>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::Socket*& dyn_$AcceptSocket$k__BackingField();
    // Get instance field reference: private System.Byte[] <Buffer>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_$Buffer$k__BackingField();
    // Get instance field reference: System.Collections.Generic.IList`1<System.ArraySegment`1<System.Byte>> m_BufferList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IList_1<::System::ArraySegment_1<uint8_t>>*& dyn_m_BufferList();
    // Get instance field reference: private System.Int32 <BytesTransferred>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$BytesTransferred$k__BackingField();
    // Get instance field reference: private System.Int32 <Count>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Count$k__BackingField();
    // Get instance field reference: private System.Boolean <DisconnectReuseSocket>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$DisconnectReuseSocket$k__BackingField();
    // Get instance field reference: private System.Net.Sockets.SocketAsyncOperation <LastOperation>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::SocketAsyncOperation& dyn_$LastOperation$k__BackingField();
    // Get instance field reference: private System.Int32 <Offset>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Offset$k__BackingField();
    // Get instance field reference: private System.Net.Sockets.IPPacketInformation <ReceiveMessageFromPacketInfo>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::IPPacketInformation& dyn_$ReceiveMessageFromPacketInfo$k__BackingField();
    // Get instance field reference: private System.Net.Sockets.SendPacketsElement[] <SendPacketsElements>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Net::Sockets::SendPacketsElement*>& dyn_$SendPacketsElements$k__BackingField();
    // Get instance field reference: private System.Net.Sockets.TransmitFileOptions <SendPacketsFlags>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::TransmitFileOptions& dyn_$SendPacketsFlags$k__BackingField();
    // Get instance field reference: private System.Int32 <SendPacketsSendSize>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$SendPacketsSendSize$k__BackingField();
    // Get instance field reference: private System.Net.Sockets.SocketError <SocketError>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::SocketError& dyn_$SocketError$k__BackingField();
    // Get instance field reference: private System.Net.Sockets.SocketFlags <SocketFlags>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::SocketFlags& dyn_$SocketFlags$k__BackingField();
    // Get instance field reference: private System.Object <UserToken>k__BackingField
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$UserToken$k__BackingField();
    // Get instance field reference: private System.Boolean <PolicyRestricted>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$PolicyRestricted$k__BackingField();
    // Get instance field reference: private System.EventHandler`1<System.Net.Sockets.SocketAsyncEventArgs> Completed
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::System::Net::Sockets::SocketAsyncEventArgs*>*& dyn_Completed();
    // System.Void set_ConnectByNameError(System.Exception value)
    // Offset: 0x17031C0
    void set_ConnectByNameError(::System::Exception* value);
    // public System.Net.Sockets.Socket get_AcceptSocket()
    // Offset: 0x17031C8
    ::System::Net::Sockets::Socket* get_AcceptSocket();
    // public System.Void set_AcceptSocket(System.Net.Sockets.Socket value)
    // Offset: 0x17031D0
    void set_AcceptSocket(::System::Net::Sockets::Socket* value);
    // public System.Byte[] get_Buffer()
    // Offset: 0x17031D8
    ::ArrayW<uint8_t> get_Buffer();
    // private System.Void set_Buffer(System.Byte[] value)
    // Offset: 0x17031E0
    void set_Buffer(::ArrayW<uint8_t> value);
    // public System.Collections.Generic.IList`1<System.ArraySegment`1<System.Byte>> get_BufferList()
    // Offset: 0x17031E8
    ::System::Collections::Generic::IList_1<::System::ArraySegment_1<uint8_t>>* get_BufferList();
    // System.Void set_BytesTransferred(System.Int32 value)
    // Offset: 0x17031F0
    void set_BytesTransferred(int value);
    // public System.Int32 get_Count()
    // Offset: 0x17031F8
    int get_Count();
    // System.Void set_Count(System.Int32 value)
    // Offset: 0x1703200
    void set_Count(int value);
    // public System.Net.Sockets.SocketAsyncOperation get_LastOperation()
    // Offset: 0x1703208
    ::System::Net::Sockets::SocketAsyncOperation get_LastOperation();
    // private System.Void set_LastOperation(System.Net.Sockets.SocketAsyncOperation value)
    // Offset: 0x1703210
    void set_LastOperation(::System::Net::Sockets::SocketAsyncOperation value);
    // public System.Int32 get_Offset()
    // Offset: 0x1703218
    int get_Offset();
    // private System.Void set_Offset(System.Int32 value)
    // Offset: 0x1703220
    void set_Offset(int value);
    // public System.Net.EndPoint get_RemoteEndPoint()
    // Offset: 0x1703228
    ::System::Net::EndPoint* get_RemoteEndPoint();
    // public System.Void set_RemoteEndPoint(System.Net.EndPoint value)
    // Offset: 0x1703230
    void set_RemoteEndPoint(::System::Net::EndPoint* value);
    // public System.Void set_SendPacketsSendSize(System.Int32 value)
    // Offset: 0x1703238
    void set_SendPacketsSendSize(int value);
    // public System.Net.Sockets.SocketError get_SocketError()
    // Offset: 0x1703240
    ::System::Net::Sockets::SocketError get_SocketError();
    // public System.Void set_SocketError(System.Net.Sockets.SocketError value)
    // Offset: 0x1703248
    void set_SocketError(::System::Net::Sockets::SocketError value);
    // public System.Void set_UserToken(System.Object value)
    // Offset: 0x1703250
    void set_UserToken(::Il2CppObject* value);
    // public System.Void add_Completed(System.EventHandler`1<System.Net.Sockets.SocketAsyncEventArgs> value)
    // Offset: 0x1703258
    void add_Completed(::System::EventHandler_1<::System::Net::Sockets::SocketAsyncEventArgs*>* value);
    // public System.Void remove_Completed(System.EventHandler`1<System.Net.Sockets.SocketAsyncEventArgs> value)
    // Offset: 0x1703344
    void remove_Completed(::System::EventHandler_1<::System::Net::Sockets::SocketAsyncEventArgs*>* value);
    // public System.Void .ctor()
    // Offset: 0x1703430
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SocketAsyncEventArgs* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Sockets::SocketAsyncEventArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SocketAsyncEventArgs*, creationType>()));
    }
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x17034DC
    void Dispose(bool disposing);
    // public System.Void Dispose()
    // Offset: 0x17034F0
    void Dispose();
    // System.Void SetLastOperation(System.Net.Sockets.SocketAsyncOperation op)
    // Offset: 0x1703564
    void SetLastOperation(::System::Net::Sockets::SocketAsyncOperation op);
    // System.Void Complete()
    // Offset: 0x1703648
    void Complete();
    // protected System.Void OnCompleted(System.Net.Sockets.SocketAsyncEventArgs e)
    // Offset: 0x1703658
    void OnCompleted(::System::Net::Sockets::SocketAsyncEventArgs* e);
    // public System.Void SetBuffer(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x17036C4
    void SetBuffer(::ArrayW<uint8_t> buffer, int offset, int count);
    // protected override System.Void Finalize()
    // Offset: 0x17034CC
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // System.Net.Sockets.SocketAsyncEventArgs
  #pragma pack(pop)
  static check_size<sizeof(SocketAsyncEventArgs), 160 + sizeof(::System::EventHandler_1<::System::Net::Sockets::SocketAsyncEventArgs*>*)> __System_Net_Sockets_SocketAsyncEventArgsSizeCheck;
  static_assert(sizeof(SocketAsyncEventArgs) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::set_ConnectByNameError
// Il2CppName: set_ConnectByNameError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(::System::Exception*)>(&System::Net::Sockets::SocketAsyncEventArgs::set_ConnectByNameError)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "set_ConnectByNameError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::get_AcceptSocket
// Il2CppName: get_AcceptSocket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::Socket* (System::Net::Sockets::SocketAsyncEventArgs::*)()>(&System::Net::Sockets::SocketAsyncEventArgs::get_AcceptSocket)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "get_AcceptSocket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::set_AcceptSocket
// Il2CppName: set_AcceptSocket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(::System::Net::Sockets::Socket*)>(&System::Net::Sockets::SocketAsyncEventArgs::set_AcceptSocket)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "Socket")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "set_AcceptSocket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::get_Buffer
// Il2CppName: get_Buffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::Net::Sockets::SocketAsyncEventArgs::*)()>(&System::Net::Sockets::SocketAsyncEventArgs::get_Buffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "get_Buffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::set_Buffer
// Il2CppName: set_Buffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(::ArrayW<uint8_t>)>(&System::Net::Sockets::SocketAsyncEventArgs::set_Buffer)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "set_Buffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::get_BufferList
// Il2CppName: get_BufferList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IList_1<::System::ArraySegment_1<uint8_t>>* (System::Net::Sockets::SocketAsyncEventArgs::*)()>(&System::Net::Sockets::SocketAsyncEventArgs::get_BufferList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "get_BufferList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::set_BytesTransferred
// Il2CppName: set_BytesTransferred
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(int)>(&System::Net::Sockets::SocketAsyncEventArgs::set_BytesTransferred)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "set_BytesTransferred", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::SocketAsyncEventArgs::*)()>(&System::Net::Sockets::SocketAsyncEventArgs::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::set_Count
// Il2CppName: set_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(int)>(&System::Net::Sockets::SocketAsyncEventArgs::set_Count)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "set_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::get_LastOperation
// Il2CppName: get_LastOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::SocketAsyncOperation (System::Net::Sockets::SocketAsyncEventArgs::*)()>(&System::Net::Sockets::SocketAsyncEventArgs::get_LastOperation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "get_LastOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::set_LastOperation
// Il2CppName: set_LastOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(::System::Net::Sockets::SocketAsyncOperation)>(&System::Net::Sockets::SocketAsyncEventArgs::set_LastOperation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketAsyncOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "set_LastOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::get_Offset
// Il2CppName: get_Offset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::SocketAsyncEventArgs::*)()>(&System::Net::Sockets::SocketAsyncEventArgs::get_Offset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "get_Offset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::set_Offset
// Il2CppName: set_Offset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(int)>(&System::Net::Sockets::SocketAsyncEventArgs::set_Offset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "set_Offset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::get_RemoteEndPoint
// Il2CppName: get_RemoteEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::EndPoint* (System::Net::Sockets::SocketAsyncEventArgs::*)()>(&System::Net::Sockets::SocketAsyncEventArgs::get_RemoteEndPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "get_RemoteEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::set_RemoteEndPoint
// Il2CppName: set_RemoteEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(::System::Net::EndPoint*)>(&System::Net::Sockets::SocketAsyncEventArgs::set_RemoteEndPoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "EndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "set_RemoteEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::set_SendPacketsSendSize
// Il2CppName: set_SendPacketsSendSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(int)>(&System::Net::Sockets::SocketAsyncEventArgs::set_SendPacketsSendSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "set_SendPacketsSendSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::get_SocketError
// Il2CppName: get_SocketError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::SocketError (System::Net::Sockets::SocketAsyncEventArgs::*)()>(&System::Net::Sockets::SocketAsyncEventArgs::get_SocketError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "get_SocketError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::set_SocketError
// Il2CppName: set_SocketError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(::System::Net::Sockets::SocketError)>(&System::Net::Sockets::SocketAsyncEventArgs::set_SocketError)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "set_SocketError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::set_UserToken
// Il2CppName: set_UserToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(::Il2CppObject*)>(&System::Net::Sockets::SocketAsyncEventArgs::set_UserToken)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "set_UserToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::add_Completed
// Il2CppName: add_Completed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(::System::EventHandler_1<::System::Net::Sockets::SocketAsyncEventArgs*>*)>(&System::Net::Sockets::SocketAsyncEventArgs::add_Completed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketAsyncEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "add_Completed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::remove_Completed
// Il2CppName: remove_Completed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(::System::EventHandler_1<::System::Net::Sockets::SocketAsyncEventArgs*>*)>(&System::Net::Sockets::SocketAsyncEventArgs::remove_Completed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketAsyncEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "remove_Completed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(bool)>(&System::Net::Sockets::SocketAsyncEventArgs::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)()>(&System::Net::Sockets::SocketAsyncEventArgs::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::SetLastOperation
// Il2CppName: SetLastOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(::System::Net::Sockets::SocketAsyncOperation)>(&System::Net::Sockets::SocketAsyncEventArgs::SetLastOperation)> {
  static const MethodInfo* get() {
    static auto* op = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketAsyncOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "SetLastOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::Complete
// Il2CppName: Complete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)()>(&System::Net::Sockets::SocketAsyncEventArgs::Complete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::OnCompleted
// Il2CppName: OnCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(::System::Net::Sockets::SocketAsyncEventArgs*)>(&System::Net::Sockets::SocketAsyncEventArgs::OnCompleted)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketAsyncEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "OnCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::SetBuffer
// Il2CppName: SetBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)(::ArrayW<uint8_t>, int, int)>(&System::Net::Sockets::SocketAsyncEventArgs::SetBuffer)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "SetBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::SocketAsyncEventArgs::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::SocketAsyncEventArgs::*)()>(&System::Net::Sockets::SocketAsyncEventArgs::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::SocketAsyncEventArgs*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
