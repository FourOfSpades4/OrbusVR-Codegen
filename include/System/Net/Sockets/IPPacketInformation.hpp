// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System.Net.Sockets
namespace System::Net::Sockets {
  // Forward declaring type: IPPacketInformation
  struct IPPacketInformation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Sockets::IPPacketInformation, "System.Net.Sockets", "IPPacketInformation");
// Type namespace: System.Net.Sockets
namespace System::Net::Sockets {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Net.Sockets.IPPacketInformation
  // [TokenAttribute] Offset: FFFFFFFF
  struct IPPacketInformation/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Net.IPAddress address
    // Size: 0x8
    // Offset: 0x0
    ::System::Net::IPAddress* address;
    // Field size check
    static_assert(sizeof(::System::Net::IPAddress*) == 0x8);
    // private System.Int32 networkInterface
    // Size: 0x4
    // Offset: 0x8
    int networkInterface;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: IPPacketInformation
    constexpr IPPacketInformation(::System::Net::IPAddress* address_ = {}, int networkInterface_ = {}) noexcept : address{address_}, networkInterface{networkInterface_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Net.IPAddress address
    [[deprecated("Use field access instead!")]] ::System::Net::IPAddress*& dyn_address();
    // Get instance field reference: private System.Int32 networkInterface
    [[deprecated("Use field access instead!")]] int& dyn_networkInterface();
    // public override System.Boolean Equals(System.Object comparand)
    // Offset: 0xBA1DF8
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object comparand)
    bool Equals(::Il2CppObject* comparand);
    // public override System.Int32 GetHashCode()
    // Offset: 0xBA1E00
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // System.Net.Sockets.IPPacketInformation
  #pragma pack(pop)
  static check_size<sizeof(IPPacketInformation), 8 + sizeof(int)> __System_Net_Sockets_IPPacketInformationSizeCheck;
  static_assert(sizeof(IPPacketInformation) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Sockets::IPPacketInformation::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Sockets::IPPacketInformation::*)(::Il2CppObject*)>(&System::Net::Sockets::IPPacketInformation::Equals)> {
  static const MethodInfo* get() {
    static auto* comparand = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::IPPacketInformation), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{comparand});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::IPPacketInformation::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::IPPacketInformation::*)()>(&System::Net::Sockets::IPPacketInformation::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::IPPacketInformation), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
