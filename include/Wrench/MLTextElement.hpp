// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: Wrench
namespace Wrench {
  // Forward declaring type: MLTextElement
  class MLTextElement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Wrench::MLTextElement);
DEFINE_IL2CPP_ARG_TYPE(::Wrench::MLTextElement*, "Wrench", "MLTextElement");
// Type namespace: Wrench
namespace Wrench {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Wrench.MLTextElement
  // [TokenAttribute] Offset: FFFFFFFF
  class MLTextElement {
    public:
    // public System.Void DoneWord(System.Boolean lastOne)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void DoneWord(bool lastOne);
    // public System.Void AddCharacter(System.Char character)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddCharacter(::Il2CppChar character);
  }; // Wrench.MLTextElement
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Wrench::MLTextElement::DoneWord
// Il2CppName: DoneWord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::MLTextElement::*)(bool)>(&Wrench::MLTextElement::DoneWord)> {
  static const MethodInfo* get() {
    static auto* lastOne = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLTextElement*), "DoneWord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lastOne});
  }
};
// Writing MetadataGetter for method: Wrench::MLTextElement::AddCharacter
// Il2CppName: AddCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::MLTextElement::*)(::Il2CppChar)>(&Wrench::MLTextElement::AddCharacter)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLTextElement*), "AddCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
