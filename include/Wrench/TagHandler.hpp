// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Wrench
namespace Wrench {
  // Forward declaring type: MLLexer
  class MLLexer;
}
// Completed forward declares
// Type namespace: Wrench
namespace Wrench {
  // Forward declaring type: TagHandler
  class TagHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Wrench::TagHandler);
DEFINE_IL2CPP_ARG_TYPE(::Wrench::TagHandler*, "Wrench", "TagHandler");
// Type namespace: Wrench
namespace Wrench {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Wrench.TagHandler
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  class TagHandler : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 Priority
    // Size: 0x4
    // Offset: 0x10
    int Priority;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Priority and: TagExtension
    char __padding0[0x4] = {};
    // public System.String TagExtension
    // Size: 0x8
    // Offset: 0x18
    ::StringW TagExtension;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.Int32 Priority
    [[deprecated("Use field access instead!")]] int& dyn_Priority();
    // Get instance field reference: public System.String TagExtension
    [[deprecated("Use field access instead!")]] ::StringW& dyn_TagExtension();
    // public System.String[] GetTags()
    // Offset: 0x282F63C
    ::ArrayW<::StringW> GetTags();
    // public System.Boolean SelfClosing()
    // Offset: 0x282F644
    bool SelfClosing();
    // public Wrench.TagHandler GetInstance()
    // Offset: 0x282F64C
    ::Wrench::TagHandler* GetInstance();
    // public System.Void OnTagLoaded()
    // Offset: 0x282F654
    void OnTagLoaded();
    // public System.Void OnParseContent(Wrench.MLLexer lexer)
    // Offset: 0x282F658
    void OnParseContent(::Wrench::MLLexer* lexer);
    // public System.Boolean OnAttributeChange(System.String attribute)
    // Offset: 0x282F65C
    bool OnAttributeChange(::StringW attribute);
    // public System.Void .ctor()
    // Offset: 0x282B638
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TagHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::TagHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TagHandler*, creationType>()));
    }
  }; // Wrench.TagHandler
  #pragma pack(pop)
  static check_size<sizeof(TagHandler), 24 + sizeof(::StringW)> __Wrench_TagHandlerSizeCheck;
  static_assert(sizeof(TagHandler) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Wrench::TagHandler::GetTags
// Il2CppName: GetTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (Wrench::TagHandler::*)()>(&Wrench::TagHandler::GetTags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::TagHandler*), "GetTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::TagHandler::SelfClosing
// Il2CppName: SelfClosing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Wrench::TagHandler::*)()>(&Wrench::TagHandler::SelfClosing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::TagHandler*), "SelfClosing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::TagHandler::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (Wrench::TagHandler::*)()>(&Wrench::TagHandler::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::TagHandler*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::TagHandler::OnTagLoaded
// Il2CppName: OnTagLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::TagHandler::*)()>(&Wrench::TagHandler::OnTagLoaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::TagHandler*), "OnTagLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::TagHandler::OnParseContent
// Il2CppName: OnParseContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::TagHandler::*)(::Wrench::MLLexer*)>(&Wrench::TagHandler::OnParseContent)> {
  static const MethodInfo* get() {
    static auto* lexer = &::il2cpp_utils::GetClassFromName("Wrench", "MLLexer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::TagHandler*), "OnParseContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lexer});
  }
};
// Writing MetadataGetter for method: Wrench::TagHandler::OnAttributeChange
// Il2CppName: OnAttributeChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Wrench::TagHandler::*)(::StringW)>(&Wrench::TagHandler::OnAttributeChange)> {
  static const MethodInfo* get() {
    static auto* attribute = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::TagHandler*), "OnAttributeChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attribute});
  }
};
// Writing MetadataGetter for method: Wrench::TagHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
