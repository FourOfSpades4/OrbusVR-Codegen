// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Wrench.VariableSet
#include "Wrench/VariableSet.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Wrench
namespace Wrench {
  // Forward declaring type: LanguageLoader
  class LanguageLoader;
  // Forward declaring type: GroupResolve
  class GroupResolve;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Wrench
namespace Wrench {
  // Forward declaring type: LanguageSet
  class LanguageSet;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Wrench::LanguageSet);
DEFINE_IL2CPP_ARG_TYPE(::Wrench::LanguageSet*, "Wrench", "LanguageSet");
// Type namespace: Wrench
namespace Wrench {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Wrench.LanguageSet
  // [TokenAttribute] Offset: FFFFFFFF
  class LanguageSet : public ::Wrench::VariableSet {
    public:
    public:
    // public System.String Name
    // Size: 0x8
    // Offset: 0x18
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Code
    // Size: 0x8
    // Offset: 0x20
    ::StringW Code;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Group
    // Size: 0x8
    // Offset: 0x28
    ::StringW Group;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean GoesLeftwards
    // Size: 0x1
    // Offset: 0x30
    bool GoesLeftwards;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: GoesLeftwards and: Loader
    char __padding3[0x7] = {};
    // public Wrench.LanguageLoader Loader
    // Size: 0x8
    // Offset: 0x38
    ::Wrench::LanguageLoader* Loader;
    // Field size check
    static_assert(sizeof(::Wrench::LanguageLoader*) == 0x8);
    // public Wrench.GroupResolve OnGroupResolve
    // Size: 0x8
    // Offset: 0x40
    ::Wrench::GroupResolve* OnGroupResolve;
    // Field size check
    static_assert(sizeof(::Wrench::GroupResolve*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,Wrench.LanguageSet> ExtraGroups
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<::StringW, ::Wrench::LanguageSet*>* ExtraGroups;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::Wrench::LanguageSet*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*
    constexpr operator ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*() const noexcept = delete;
    // Get instance field reference: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public System.String Code
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Code();
    // Get instance field reference: public System.String Group
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Group();
    // Get instance field reference: public System.Boolean GoesLeftwards
    [[deprecated("Use field access instead!")]] bool& dyn_GoesLeftwards();
    // Get instance field reference: public Wrench.LanguageLoader Loader
    [[deprecated("Use field access instead!")]] ::Wrench::LanguageLoader*& dyn_Loader();
    // Get instance field reference: public Wrench.GroupResolve OnGroupResolve
    [[deprecated("Use field access instead!")]] ::Wrench::GroupResolve*& dyn_OnGroupResolve();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,Wrench.LanguageSet> ExtraGroups
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Wrench::LanguageSet*>*& dyn_ExtraGroups();
    // public System.Void .ctor(System.String content, Wrench.LanguageLoader loader)
    // Offset: 0xDD89C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LanguageSet* New_ctor(::StringW content, ::Wrench::LanguageLoader* loader) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LanguageSet*, creationType>(content, loader)));
    }
    // public System.Void .ctor(System.String content)
    // Offset: 0xDD8AB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LanguageSet* New_ctor(::StringW content) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LanguageSet*, creationType>(content)));
    }
    // public System.Void .ctor(System.String content, System.String group)
    // Offset: 0xDD8A30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LanguageSet* New_ctor(::StringW content, ::StringW group) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LanguageSet*, creationType>(content, group)));
    }
    // public System.Void SetContent(System.String content)
    // Offset: 0xDD8B14
    void SetContent(::StringW content);
    // public System.Boolean ContainsGroup(System.String group)
    // Offset: 0xDD8BC8
    bool ContainsGroup(::StringW group);
    // public Wrench.LanguageSet LoadGroup(System.String groupName)
    // Offset: 0xDD8C3C
    ::Wrench::LanguageSet* LoadGroup(::StringW groupName);
    // public Wrench.LanguageSet AddGroup(System.String content)
    // Offset: 0xDD8D8C
    ::Wrench::LanguageSet* AddGroup(::StringW content);
    // public Wrench.LanguageSet AddGroup(System.String content, System.String group)
    // Offset: 0xDD8D94
    ::Wrench::LanguageSet* AddGroup(::StringW content, ::StringW group);
    // public System.Void AddGroup(Wrench.LanguageSet group)
    // Offset: 0xDD8CA4
    void AddGroup(::Wrench::LanguageSet* group);
    // public System.Void RemoveGroup(System.String group)
    // Offset: 0xDD8E28
    void RemoveGroup(::StringW group);
    // public System.Void .ctor()
    // Offset: 0xDD89BC
    // Implemented from: Wrench.VariableSet
    // Base method: System.Void VariableSet::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LanguageSet* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LanguageSet*, creationType>()));
    }
    // public override System.String GetValue(System.String code)
    // Offset: 0xDD8ED8
    // Implemented from: Wrench.VariableSet
    // Base method: System.String VariableSet::GetValue(System.String code)
    ::StringW GetValue(::StringW code);
  }; // Wrench.LanguageSet
  #pragma pack(pop)
  static check_size<sizeof(LanguageSet), 72 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::Wrench::LanguageSet*>*)> __Wrench_LanguageSetSizeCheck;
  static_assert(sizeof(LanguageSet) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Wrench::LanguageSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Wrench::LanguageSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Wrench::LanguageSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Wrench::LanguageSet::SetContent
// Il2CppName: SetContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::LanguageSet::*)(::StringW)>(&Wrench::LanguageSet::SetContent)> {
  static const MethodInfo* get() {
    static auto* content = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageSet*), "SetContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content});
  }
};
// Writing MetadataGetter for method: Wrench::LanguageSet::ContainsGroup
// Il2CppName: ContainsGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Wrench::LanguageSet::*)(::StringW)>(&Wrench::LanguageSet::ContainsGroup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageSet*), "ContainsGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group});
  }
};
// Writing MetadataGetter for method: Wrench::LanguageSet::LoadGroup
// Il2CppName: LoadGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::LanguageSet* (Wrench::LanguageSet::*)(::StringW)>(&Wrench::LanguageSet::LoadGroup)> {
  static const MethodInfo* get() {
    static auto* groupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageSet*), "LoadGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupName});
  }
};
// Writing MetadataGetter for method: Wrench::LanguageSet::AddGroup
// Il2CppName: AddGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::LanguageSet* (Wrench::LanguageSet::*)(::StringW)>(&Wrench::LanguageSet::AddGroup)> {
  static const MethodInfo* get() {
    static auto* content = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageSet*), "AddGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content});
  }
};
// Writing MetadataGetter for method: Wrench::LanguageSet::AddGroup
// Il2CppName: AddGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::LanguageSet* (Wrench::LanguageSet::*)(::StringW, ::StringW)>(&Wrench::LanguageSet::AddGroup)> {
  static const MethodInfo* get() {
    static auto* content = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* group = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageSet*), "AddGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content, group});
  }
};
// Writing MetadataGetter for method: Wrench::LanguageSet::AddGroup
// Il2CppName: AddGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::LanguageSet::*)(::Wrench::LanguageSet*)>(&Wrench::LanguageSet::AddGroup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("Wrench", "LanguageSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageSet*), "AddGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group});
  }
};
// Writing MetadataGetter for method: Wrench::LanguageSet::RemoveGroup
// Il2CppName: RemoveGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::LanguageSet::*)(::StringW)>(&Wrench::LanguageSet::RemoveGroup)> {
  static const MethodInfo* get() {
    static auto* group = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageSet*), "RemoveGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{group});
  }
};
// Writing MetadataGetter for method: Wrench::LanguageSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Wrench::LanguageSet::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Wrench::LanguageSet::*)(::StringW)>(&Wrench::LanguageSet::GetValue)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageSet*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
