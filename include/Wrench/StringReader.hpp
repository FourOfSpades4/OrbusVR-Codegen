// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Wrench
namespace Wrench {
  // Forward declaring type: StringReader
  class StringReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Wrench::StringReader);
DEFINE_IL2CPP_ARG_TYPE(::Wrench::StringReader*, "Wrench", "StringReader");
// Type namespace: Wrench
namespace Wrench {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Wrench.StringReader
  // [TokenAttribute] Offset: FFFFFFFF
  class StringReader : public ::Il2CppObject {
    public:
    public:
    // public System.String Input
    // Size: 0x8
    // Offset: 0x10
    ::StringW Input;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 Position
    // Size: 0x4
    // Offset: 0x18
    int Position;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 InputLength
    // Size: 0x4
    // Offset: 0x1C
    int InputLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static public System.Char NULL
    static ::Il2CppChar _get_NULL();
    // Set static field: static public System.Char NULL
    static void _set_NULL(::Il2CppChar value);
    // Get instance field reference: public System.String Input
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Input();
    // Get instance field reference: public System.Int32 Position
    [[deprecated("Use field access instead!")]] int& dyn_Position();
    // Get instance field reference: public System.Int32 InputLength
    [[deprecated("Use field access instead!")]] int& dyn_InputLength();
    // public System.Void .ctor(System.Byte[] str)
    // Offset: 0x282F3B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringReader* New_ctor(::ArrayW<uint8_t> str) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringReader*, creationType>(str)));
    }
    // public System.Void .ctor(System.String str)
    // Offset: 0x282DD10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringReader* New_ctor(::StringW str) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::StringReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringReader*, creationType>(str)));
    }
    // public System.Boolean More()
    // Offset: 0x282F4BC
    bool More();
    // public System.Char Peek()
    // Offset: 0x282C380
    ::Il2CppChar Peek();
    // public System.Char Peek(System.Int32 delta)
    // Offset: 0x282E31C
    ::Il2CppChar Peek(int delta);
    // public System.Void StepBack()
    // Offset: 0x282F4CC
    void StepBack();
    // public System.Void Advance()
    // Offset: 0x282E3E8
    void Advance();
    // public System.Void Advance(System.Int32 places)
    // Offset: 0x282E3D0
    void Advance(int places);
    // public System.Int32 Length()
    // Offset: 0x282F4E0
    int Length();
    // public System.Char Read()
    // Offset: 0x282E220
    ::Il2CppChar Read();
    // public System.Void ReadUntil(System.Char character)
    // Offset: 0x282F4E8
    void ReadUntil(::Il2CppChar character);
    // public System.Void ReadOff(System.Char[] chars)
    // Offset: 0x282F534
    void ReadOff(::ArrayW<::Il2CppChar> chars);
    // public System.Void ReadOff(System.Char[] chars, out System.Int32 count)
    // Offset: 0x282F558
    void ReadOff(::ArrayW<::Il2CppChar> chars, ByRef<int> count);
    // public System.Int32 GetLineNumber()
    // Offset: 0x282F614
    int GetLineNumber();
    // public System.Int32 GetLineNumber(out System.Int32 charOnLine)
    // Offset: 0x282D658
    int GetLineNumber(ByRef<int> charOnLine);
    // public System.String ReadLine(System.Int32 lineNumber)
    // Offset: 0x282D704
    ::StringW ReadLine(int lineNumber);
    // static private System.Void .cctor()
    // Offset: 0x282F638
    static void _cctor();
  }; // Wrench.StringReader
  #pragma pack(pop)
  static check_size<sizeof(StringReader), 28 + sizeof(int)> __Wrench_StringReaderSizeCheck;
  static_assert(sizeof(StringReader) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Wrench::StringReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Wrench::StringReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Wrench::StringReader::More
// Il2CppName: More
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Wrench::StringReader::*)()>(&Wrench::StringReader::More)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::StringReader*), "More", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::StringReader::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (Wrench::StringReader::*)()>(&Wrench::StringReader::Peek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::StringReader*), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::StringReader::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (Wrench::StringReader::*)(int)>(&Wrench::StringReader::Peek)> {
  static const MethodInfo* get() {
    static auto* delta = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::StringReader*), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delta});
  }
};
// Writing MetadataGetter for method: Wrench::StringReader::StepBack
// Il2CppName: StepBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::StringReader::*)()>(&Wrench::StringReader::StepBack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::StringReader*), "StepBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::StringReader::Advance
// Il2CppName: Advance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::StringReader::*)()>(&Wrench::StringReader::Advance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::StringReader*), "Advance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::StringReader::Advance
// Il2CppName: Advance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::StringReader::*)(int)>(&Wrench::StringReader::Advance)> {
  static const MethodInfo* get() {
    static auto* places = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::StringReader*), "Advance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{places});
  }
};
// Writing MetadataGetter for method: Wrench::StringReader::Length
// Il2CppName: Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Wrench::StringReader::*)()>(&Wrench::StringReader::Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::StringReader*), "Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::StringReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (Wrench::StringReader::*)()>(&Wrench::StringReader::Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::StringReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::StringReader::ReadUntil
// Il2CppName: ReadUntil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::StringReader::*)(::Il2CppChar)>(&Wrench::StringReader::ReadUntil)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::StringReader*), "ReadUntil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character});
  }
};
// Writing MetadataGetter for method: Wrench::StringReader::ReadOff
// Il2CppName: ReadOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::StringReader::*)(::ArrayW<::Il2CppChar>)>(&Wrench::StringReader::ReadOff)> {
  static const MethodInfo* get() {
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::StringReader*), "ReadOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chars});
  }
};
// Writing MetadataGetter for method: Wrench::StringReader::ReadOff
// Il2CppName: ReadOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::StringReader::*)(::ArrayW<::Il2CppChar>, ByRef<int>)>(&Wrench::StringReader::ReadOff)> {
  static const MethodInfo* get() {
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::StringReader*), "ReadOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chars, count});
  }
};
// Writing MetadataGetter for method: Wrench::StringReader::GetLineNumber
// Il2CppName: GetLineNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Wrench::StringReader::*)()>(&Wrench::StringReader::GetLineNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::StringReader*), "GetLineNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::StringReader::GetLineNumber
// Il2CppName: GetLineNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Wrench::StringReader::*)(ByRef<int>)>(&Wrench::StringReader::GetLineNumber)> {
  static const MethodInfo* get() {
    static auto* charOnLine = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::StringReader*), "GetLineNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{charOnLine});
  }
};
// Writing MetadataGetter for method: Wrench::StringReader::ReadLine
// Il2CppName: ReadLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Wrench::StringReader::*)(int)>(&Wrench::StringReader::ReadLine)> {
  static const MethodInfo* get() {
    static auto* lineNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::StringReader*), "ReadLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineNumber});
  }
};
// Writing MetadataGetter for method: Wrench::StringReader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Wrench::StringReader::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::StringReader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
