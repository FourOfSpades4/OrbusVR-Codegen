// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Wrench
namespace Wrench {
  // Forward declaring type: TagHandler
  class TagHandler;
  // Forward declaring type: MLLexer
  class MLLexer;
  // Forward declaring type: MLVariableElement
  class MLVariableElement;
  // Forward declaring type: MLTextElement
  class MLTextElement;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Wrench
namespace Wrench {
  // Forward declaring type: MLElement
  class MLElement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Wrench::MLElement);
DEFINE_IL2CPP_ARG_TYPE(::Wrench::MLElement*, "Wrench", "MLElement");
// Type namespace: Wrench
namespace Wrench {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Wrench.MLElement
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: AD11A0
  class MLElement : public ::Il2CppObject {
    public:
    public:
    // public System.String Tag
    // Size: 0x8
    // Offset: 0x10
    ::StringW Tag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected System.Boolean SelfClosing
    // Size: 0x1
    // Offset: 0x18
    bool SelfClosing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: SelfClosing and: Properties
    char __padding1[0x7] = {};
    // protected System.Collections.Generic.Dictionary`2<System.String,System.String> Properties
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* Properties;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    public:
    // Get instance field reference: public System.String Tag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Tag();
    // Get instance field reference: protected System.Boolean SelfClosing
    [[deprecated("Use field access instead!")]] bool& dyn_SelfClosing();
    // Get instance field reference: protected System.Collections.Generic.Dictionary`2<System.String,System.String> Properties
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_Properties();
    // public System.Void SetTag(System.String tag)
    // Offset: 0x282C188
    void SetTag(::StringW tag);
    // public Wrench.TagHandler GetHandler()
    // Offset: 0x282C190
    ::Wrench::TagHandler* GetHandler();
    // protected System.Void ReadTag(Wrench.MLLexer lexer)
    // Offset: 0x282C198
    void ReadTag(::Wrench::MLLexer* lexer);
    // public System.String get_Item(System.String property)
    // Offset: 0x282B55C
    ::StringW get_Item(::StringW property);
    // public System.Void set_Item(System.String property, System.String value)
    // Offset: 0x282C70C
    void set_Item(::StringW property, ::StringW value);
    // public System.Void ResetVariable(System.String name)
    // Offset: 0x282C7F4
    void ResetVariable(::StringW name);
    // public System.Void ResetAllVariables()
    // Offset: 0x282C7F8
    void ResetAllVariables();
    // protected System.Void ReadContent(Wrench.MLLexer lexer, System.Boolean innerElement, System.Boolean literal)
    // Offset: 0x282C7FC
    void ReadContent(::Wrench::MLLexer* lexer, bool innerElement, bool literal);
    // protected Wrench.MLVariableElement CreateVariableElement()
    // Offset: 0x282D81C
    ::Wrench::MLVariableElement* CreateVariableElement();
    // protected Wrench.MLTextElement CreateTextElement()
    // Offset: 0x282D824
    ::Wrench::MLTextElement* CreateTextElement();
    // protected Wrench.MLElement CreateTagElement(Wrench.MLLexer lexer)
    // Offset: 0x282D82C
    ::Wrench::MLElement* CreateTagElement(::Wrench::MLLexer* lexer);
    // public System.Void OnChildrenLoaded()
    // Offset: 0x282D834
    void OnChildrenLoaded();
    // protected System.String GetVariableValue(System.String variable)
    // Offset: 0x282D838
    ::StringW GetVariableValue(::StringW variable);
    // public System.Void ToString(System.Text.StringBuilder result)
    // Offset: 0x282D8C8
    void ToString(::System::Text::StringBuilder* result);
    // public System.Void .ctor()
    // Offset: 0x282DBBC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MLElement* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MLElement*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x282D840
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Wrench.MLElement
  #pragma pack(pop)
  static check_size<sizeof(MLElement), 32 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)> __Wrench_MLElementSizeCheck;
  static_assert(sizeof(MLElement) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Wrench::MLElement::SetTag
// Il2CppName: SetTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::MLElement::*)(::StringW)>(&Wrench::MLElement::SetTag)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLElement*), "SetTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag});
  }
};
// Writing MetadataGetter for method: Wrench::MLElement::GetHandler
// Il2CppName: GetHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (Wrench::MLElement::*)()>(&Wrench::MLElement::GetHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLElement*), "GetHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::MLElement::ReadTag
// Il2CppName: ReadTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::MLElement::*)(::Wrench::MLLexer*)>(&Wrench::MLElement::ReadTag)> {
  static const MethodInfo* get() {
    static auto* lexer = &::il2cpp_utils::GetClassFromName("Wrench", "MLLexer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLElement*), "ReadTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lexer});
  }
};
// Writing MetadataGetter for method: Wrench::MLElement::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Wrench::MLElement::*)(::StringW)>(&Wrench::MLElement::get_Item)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLElement*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: Wrench::MLElement::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::MLElement::*)(::StringW, ::StringW)>(&Wrench::MLElement::set_Item)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLElement*), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property, value});
  }
};
// Writing MetadataGetter for method: Wrench::MLElement::ResetVariable
// Il2CppName: ResetVariable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::MLElement::*)(::StringW)>(&Wrench::MLElement::ResetVariable)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLElement*), "ResetVariable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Wrench::MLElement::ResetAllVariables
// Il2CppName: ResetAllVariables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::MLElement::*)()>(&Wrench::MLElement::ResetAllVariables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLElement*), "ResetAllVariables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::MLElement::ReadContent
// Il2CppName: ReadContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::MLElement::*)(::Wrench::MLLexer*, bool, bool)>(&Wrench::MLElement::ReadContent)> {
  static const MethodInfo* get() {
    static auto* lexer = &::il2cpp_utils::GetClassFromName("Wrench", "MLLexer")->byval_arg;
    static auto* innerElement = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* literal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLElement*), "ReadContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lexer, innerElement, literal});
  }
};
// Writing MetadataGetter for method: Wrench::MLElement::CreateVariableElement
// Il2CppName: CreateVariableElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::MLVariableElement* (Wrench::MLElement::*)()>(&Wrench::MLElement::CreateVariableElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLElement*), "CreateVariableElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::MLElement::CreateTextElement
// Il2CppName: CreateTextElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::MLTextElement* (Wrench::MLElement::*)()>(&Wrench::MLElement::CreateTextElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLElement*), "CreateTextElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::MLElement::CreateTagElement
// Il2CppName: CreateTagElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::MLElement* (Wrench::MLElement::*)(::Wrench::MLLexer*)>(&Wrench::MLElement::CreateTagElement)> {
  static const MethodInfo* get() {
    static auto* lexer = &::il2cpp_utils::GetClassFromName("Wrench", "MLLexer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLElement*), "CreateTagElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lexer});
  }
};
// Writing MetadataGetter for method: Wrench::MLElement::OnChildrenLoaded
// Il2CppName: OnChildrenLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::MLElement::*)()>(&Wrench::MLElement::OnChildrenLoaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLElement*), "OnChildrenLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::MLElement::GetVariableValue
// Il2CppName: GetVariableValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Wrench::MLElement::*)(::StringW)>(&Wrench::MLElement::GetVariableValue)> {
  static const MethodInfo* get() {
    static auto* variable = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLElement*), "GetVariableValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{variable});
  }
};
// Writing MetadataGetter for method: Wrench::MLElement::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::MLElement::*)(::System::Text::StringBuilder*)>(&Wrench::MLElement::ToString)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLElement*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: Wrench::MLElement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Wrench::MLElement::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Wrench::MLElement::*)()>(&Wrench::MLElement::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLElement*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
