// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Wrench
namespace Wrench {
  // Forward declaring type: VariableSet
  class VariableSet;
  // Forward declaring type: LanguageSet
  class LanguageSet;
  // Forward declaring type: OnVariableFind
  class OnVariableFind;
  // Forward declaring type: OnVariableChange
  class OnVariableChange;
  // Forward declaring type: GroupResolve
  class GroupResolve;
}
// Completed forward declares
// Type namespace: Wrench
namespace Wrench {
  // Forward declaring type: FullVariableSet
  class FullVariableSet;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Wrench::FullVariableSet);
DEFINE_IL2CPP_ARG_TYPE(::Wrench::FullVariableSet*, "Wrench", "FullVariableSet");
// Type namespace: Wrench
namespace Wrench {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Wrench.FullVariableSet
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: AD11E8
  class FullVariableSet : public ::Il2CppObject {
    public:
    public:
    // public Wrench.VariableSet Custom
    // Size: 0x8
    // Offset: 0x10
    ::Wrench::VariableSet* Custom;
    // Field size check
    static_assert(sizeof(::Wrench::VariableSet*) == 0x8);
    // public Wrench.LanguageSet Language
    // Size: 0x8
    // Offset: 0x18
    ::Wrench::LanguageSet* Language;
    // Field size check
    static_assert(sizeof(::Wrench::LanguageSet*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADECA4
    // private Wrench.OnVariableFind OnFind
    // Size: 0x8
    // Offset: 0x20
    ::Wrench::OnVariableFind* OnFind;
    // Field size check
    static_assert(sizeof(::Wrench::OnVariableFind*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xADECB4
    // private Wrench.OnVariableChange OnChange
    // Size: 0x8
    // Offset: 0x28
    ::Wrench::OnVariableChange* OnChange;
    // Field size check
    static_assert(sizeof(::Wrench::OnVariableChange*) == 0x8);
    public:
    // Get instance field reference: public Wrench.VariableSet Custom
    [[deprecated("Use field access instead!")]] ::Wrench::VariableSet*& dyn_Custom();
    // Get instance field reference: public Wrench.LanguageSet Language
    [[deprecated("Use field access instead!")]] ::Wrench::LanguageSet*& dyn_Language();
    // Get instance field reference: private Wrench.OnVariableFind OnFind
    [[deprecated("Use field access instead!")]] ::Wrench::OnVariableFind*& dyn_OnFind();
    // Get instance field reference: private Wrench.OnVariableChange OnChange
    [[deprecated("Use field access instead!")]] ::Wrench::OnVariableChange*& dyn_OnChange();
    // public System.Void add_OnFind(Wrench.OnVariableFind value)
    // Offset: 0xDD6F78
    void add_OnFind(::Wrench::OnVariableFind* value);
    // public System.Void remove_OnFind(Wrench.OnVariableFind value)
    // Offset: 0xDD7064
    void remove_OnFind(::Wrench::OnVariableFind* value);
    // public System.Void add_OnChange(Wrench.OnVariableChange value)
    // Offset: 0xDD7150
    void add_OnChange(::Wrench::OnVariableChange* value);
    // public System.Void remove_OnChange(Wrench.OnVariableChange value)
    // Offset: 0xDD723C
    void remove_OnChange(::Wrench::OnVariableChange* value);
    // public System.Void .ctor()
    // Offset: 0xDD7328
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FullVariableSet* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::FullVariableSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FullVariableSet*, creationType>()));
    }
    // public System.Void ChangeLanguageSet(Wrench.LanguageSet language)
    // Offset: 0xDD7394
    void ChangeLanguageSet(::Wrench::LanguageSet* language);
    // public System.String GetValue(System.String variableString)
    // Offset: 0xDD739C
    ::StringW GetValue(::StringW variableString);
    // public System.Void SetGroupResolver(Wrench.GroupResolve resolver)
    // Offset: 0xDD7410
    void SetGroupResolver(::Wrench::GroupResolve* resolver);
    // public System.Void SetValue(System.String code, System.String value)
    // Offset: 0xDD7440
    void SetValue(::StringW code, ::StringW value);
    // public System.String get_Item(System.String code)
    // Offset: 0xDD74F8
    ::StringW get_Item(::StringW code);
    // public System.Void set_Item(System.String code, System.String value)
    // Offset: 0xDD74FC
    void set_Item(::StringW code, ::StringW value);
  }; // Wrench.FullVariableSet
  #pragma pack(pop)
  static check_size<sizeof(FullVariableSet), 40 + sizeof(::Wrench::OnVariableChange*)> __Wrench_FullVariableSetSizeCheck;
  static_assert(sizeof(FullVariableSet) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Wrench::FullVariableSet::add_OnFind
// Il2CppName: add_OnFind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::FullVariableSet::*)(::Wrench::OnVariableFind*)>(&Wrench::FullVariableSet::add_OnFind)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Wrench", "OnVariableFind")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::FullVariableSet*), "add_OnFind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Wrench::FullVariableSet::remove_OnFind
// Il2CppName: remove_OnFind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::FullVariableSet::*)(::Wrench::OnVariableFind*)>(&Wrench::FullVariableSet::remove_OnFind)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Wrench", "OnVariableFind")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::FullVariableSet*), "remove_OnFind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Wrench::FullVariableSet::add_OnChange
// Il2CppName: add_OnChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::FullVariableSet::*)(::Wrench::OnVariableChange*)>(&Wrench::FullVariableSet::add_OnChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Wrench", "OnVariableChange")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::FullVariableSet*), "add_OnChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Wrench::FullVariableSet::remove_OnChange
// Il2CppName: remove_OnChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::FullVariableSet::*)(::Wrench::OnVariableChange*)>(&Wrench::FullVariableSet::remove_OnChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Wrench", "OnVariableChange")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::FullVariableSet*), "remove_OnChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Wrench::FullVariableSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Wrench::FullVariableSet::ChangeLanguageSet
// Il2CppName: ChangeLanguageSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::FullVariableSet::*)(::Wrench::LanguageSet*)>(&Wrench::FullVariableSet::ChangeLanguageSet)> {
  static const MethodInfo* get() {
    static auto* language = &::il2cpp_utils::GetClassFromName("Wrench", "LanguageSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::FullVariableSet*), "ChangeLanguageSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{language});
  }
};
// Writing MetadataGetter for method: Wrench::FullVariableSet::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Wrench::FullVariableSet::*)(::StringW)>(&Wrench::FullVariableSet::GetValue)> {
  static const MethodInfo* get() {
    static auto* variableString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::FullVariableSet*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{variableString});
  }
};
// Writing MetadataGetter for method: Wrench::FullVariableSet::SetGroupResolver
// Il2CppName: SetGroupResolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::FullVariableSet::*)(::Wrench::GroupResolve*)>(&Wrench::FullVariableSet::SetGroupResolver)> {
  static const MethodInfo* get() {
    static auto* resolver = &::il2cpp_utils::GetClassFromName("Wrench", "GroupResolve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::FullVariableSet*), "SetGroupResolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resolver});
  }
};
// Writing MetadataGetter for method: Wrench::FullVariableSet::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::FullVariableSet::*)(::StringW, ::StringW)>(&Wrench::FullVariableSet::SetValue)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::FullVariableSet*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, value});
  }
};
// Writing MetadataGetter for method: Wrench::FullVariableSet::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Wrench::FullVariableSet::*)(::StringW)>(&Wrench::FullVariableSet::get_Item)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::FullVariableSet*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: Wrench::FullVariableSet::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::FullVariableSet::*)(::StringW, ::StringW)>(&Wrench::FullVariableSet::set_Item)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::FullVariableSet*), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, value});
  }
};
