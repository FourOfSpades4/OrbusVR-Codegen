// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Wrench.LanguageTagHandler
#include "Wrench/LanguageTagHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Wrench
namespace Wrench {
  // Forward declaring type: LanguageSet
  class LanguageSet;
  // Forward declaring type: LanguageElement
  class LanguageElement;
  // Forward declaring type: MLLexer
  class MLLexer;
}
// Completed forward declares
// Type namespace: Wrench
namespace Wrench {
  // Forward declaring type: VariableTag
  class VariableTag;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Wrench::VariableTag);
DEFINE_IL2CPP_ARG_TYPE(::Wrench::VariableTag*, "Wrench", "VariableTag");
// Type namespace: Wrench
namespace Wrench {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Wrench.VariableTag
  // [TokenAttribute] Offset: FFFFFFFF
  class VariableTag : public ::Wrench::LanguageTagHandler {
    public:
    public:
    // public System.String Gender
    // Size: 0x8
    // Offset: 0x20
    ::StringW Gender;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Wrench.LanguageSet Parent
    // Size: 0x8
    // Offset: 0x28
    ::Wrench::LanguageSet* Parent;
    // Field size check
    static_assert(sizeof(::Wrench::LanguageSet*) == 0x8);
    // public Wrench.LanguageElement Element
    // Size: 0x8
    // Offset: 0x30
    ::Wrench::LanguageElement* Element;
    // Field size check
    static_assert(sizeof(::Wrench::LanguageElement*) == 0x8);
    public:
    // Get instance field reference: public System.String Gender
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Gender();
    // Get instance field reference: public Wrench.LanguageSet Parent
    [[deprecated("Use field access instead!")]] ::Wrench::LanguageSet*& dyn_Parent();
    // Get instance field reference: public Wrench.LanguageElement Element
    [[deprecated("Use field access instead!")]] ::Wrench::LanguageElement*& dyn_Element();
    // private System.Boolean AtEnd(Wrench.MLLexer lexer)
    // Offset: 0x28318A4
    bool AtEnd(::Wrench::MLLexer* lexer);
    // public override System.String[] GetTags()
    // Offset: 0x28314F0
    // Implemented from: Wrench.TagHandler
    // Base method: System.String[] TagHandler::GetTags()
    ::ArrayW<::StringW> GetTags();
    // public override Wrench.TagHandler GetInstance()
    // Offset: 0x28315F4
    // Implemented from: Wrench.TagHandler
    // Base method: Wrench.TagHandler TagHandler::GetInstance()
    ::Wrench::TagHandler* GetInstance();
    // public override System.Boolean OnAttributeChange(System.String property)
    // Offset: 0x2831650
    // Implemented from: Wrench.TagHandler
    // Base method: System.Boolean TagHandler::OnAttributeChange(System.String property)
    bool OnAttributeChange(::StringW property);
    // public override System.Void OnParseContent(Wrench.MLLexer lexer)
    // Offset: 0x283170C
    // Implemented from: Wrench.TagHandler
    // Base method: System.Void TagHandler::OnParseContent(Wrench.MLLexer lexer)
    void OnParseContent(::Wrench::MLLexer* lexer);
    // public System.Void .ctor()
    // Offset: 0x283164C
    // Implemented from: Wrench.LanguageTagHandler
    // Base method: System.Void LanguageTagHandler::.ctor()
    // Base method: System.Void TagHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VariableTag* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableTag::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VariableTag*, creationType>()));
    }
  }; // Wrench.VariableTag
  #pragma pack(pop)
  static check_size<sizeof(VariableTag), 48 + sizeof(::Wrench::LanguageElement*)> __Wrench_VariableTagSizeCheck;
  static_assert(sizeof(VariableTag) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Wrench::VariableTag::AtEnd
// Il2CppName: AtEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Wrench::VariableTag::*)(::Wrench::MLLexer*)>(&Wrench::VariableTag::AtEnd)> {
  static const MethodInfo* get() {
    static auto* lexer = &::il2cpp_utils::GetClassFromName("Wrench", "MLLexer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::VariableTag*), "AtEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lexer});
  }
};
// Writing MetadataGetter for method: Wrench::VariableTag::GetTags
// Il2CppName: GetTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (Wrench::VariableTag::*)()>(&Wrench::VariableTag::GetTags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::VariableTag*), "GetTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::VariableTag::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (Wrench::VariableTag::*)()>(&Wrench::VariableTag::GetInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::VariableTag*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::VariableTag::OnAttributeChange
// Il2CppName: OnAttributeChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Wrench::VariableTag::*)(::StringW)>(&Wrench::VariableTag::OnAttributeChange)> {
  static const MethodInfo* get() {
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::VariableTag*), "OnAttributeChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{property});
  }
};
// Writing MetadataGetter for method: Wrench::VariableTag::OnParseContent
// Il2CppName: OnParseContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::VariableTag::*)(::Wrench::MLLexer*)>(&Wrench::VariableTag::OnParseContent)> {
  static const MethodInfo* get() {
    static auto* lexer = &::il2cpp_utils::GetClassFromName("Wrench", "MLLexer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::VariableTag*), "OnParseContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lexer});
  }
};
// Writing MetadataGetter for method: Wrench::VariableTag::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
