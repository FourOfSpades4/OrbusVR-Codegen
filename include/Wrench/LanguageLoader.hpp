// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Wrench
namespace Wrench {
  // Forward declaring type: LanguageSet
  class LanguageSet;
}
// Completed forward declares
// Type namespace: Wrench
namespace Wrench {
  // Forward declaring type: LanguageLoader
  class LanguageLoader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Wrench::LanguageLoader);
DEFINE_IL2CPP_ARG_TYPE(::Wrench::LanguageLoader*, "Wrench", "LanguageLoader");
// Type namespace: Wrench
namespace Wrench {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Wrench.LanguageLoader
  // [TokenAttribute] Offset: FFFFFFFF
  class LanguageLoader : public ::Il2CppObject {
    public:
    public:
    // public System.String Path
    // Size: 0x8
    // Offset: 0x10
    ::StringW Path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Wrench.LanguageSet[] AllLanguagesLoaded
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::Wrench::LanguageSet*> AllLanguagesLoaded;
    // Field size check
    static_assert(sizeof(::ArrayW<::Wrench::LanguageSet*>) == 0x8);
    public:
    // Get instance field reference: public System.String Path
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Path();
    // Get instance field reference: private Wrench.LanguageSet[] AllLanguagesLoaded
    [[deprecated("Use field access instead!")]] ::ArrayW<::Wrench::LanguageSet*>& dyn_AllLanguagesLoaded();
    // public System.Void .ctor(System.String path)
    // Offset: 0xDD87EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LanguageLoader* New_ctor(::StringW path) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageLoader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LanguageLoader*, creationType>(path)));
    }
    // public Wrench.LanguageSet GetGroup(System.String groupName, System.String code)
    // Offset: 0xDD8818
    ::Wrench::LanguageSet* GetGroup(::StringW groupName, ::StringW code);
    // public Wrench.LanguageSet Get(System.String code)
    // Offset: 0xDD88B0
    ::Wrench::LanguageSet* Get(::StringW code);
    // public Wrench.LanguageSet[] AllLanguages()
    // Offset: 0xDD8974
    ::ArrayW<::Wrench::LanguageSet*> AllLanguages();
    // protected Wrench.LanguageSet[] GetAllLanguages()
    // Offset: 0xDD89AC
    ::ArrayW<::Wrench::LanguageSet*> GetAllLanguages();
    // protected Wrench.LanguageSet GetLanguage(System.String code)
    // Offset: 0xDD89B4
    ::Wrench::LanguageSet* GetLanguage(::StringW code);
  }; // Wrench.LanguageLoader
  #pragma pack(pop)
  static check_size<sizeof(LanguageLoader), 24 + sizeof(::ArrayW<::Wrench::LanguageSet*>)> __Wrench_LanguageLoaderSizeCheck;
  static_assert(sizeof(LanguageLoader) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Wrench::LanguageLoader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Wrench::LanguageLoader::GetGroup
// Il2CppName: GetGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::LanguageSet* (Wrench::LanguageLoader::*)(::StringW, ::StringW)>(&Wrench::LanguageLoader::GetGroup)> {
  static const MethodInfo* get() {
    static auto* groupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageLoader*), "GetGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupName, code});
  }
};
// Writing MetadataGetter for method: Wrench::LanguageLoader::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::LanguageSet* (Wrench::LanguageLoader::*)(::StringW)>(&Wrench::LanguageLoader::Get)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageLoader*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: Wrench::LanguageLoader::AllLanguages
// Il2CppName: AllLanguages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Wrench::LanguageSet*> (Wrench::LanguageLoader::*)()>(&Wrench::LanguageLoader::AllLanguages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageLoader*), "AllLanguages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::LanguageLoader::GetAllLanguages
// Il2CppName: GetAllLanguages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Wrench::LanguageSet*> (Wrench::LanguageLoader::*)()>(&Wrench::LanguageLoader::GetAllLanguages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageLoader*), "GetAllLanguages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::LanguageLoader::GetLanguage
// Il2CppName: GetLanguage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::LanguageSet* (Wrench::LanguageLoader::*)(::StringW)>(&Wrench::LanguageLoader::GetLanguage)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageLoader*), "GetLanguage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
