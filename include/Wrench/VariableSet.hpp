// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Wrench
namespace Wrench {
  // Forward declaring type: VariableSet
  class VariableSet;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Wrench::VariableSet);
DEFINE_IL2CPP_ARG_TYPE(::Wrench::VariableSet*, "Wrench", "VariableSet");
// Type namespace: Wrench
namespace Wrench {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Wrench.VariableSet
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: AD1220
  class VariableSet : public ::Il2CppObject {
    public:
    public:
    // public System.Collections.Generic.Dictionary`2<System.String,System.String> Map
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* Map;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*
    constexpr operator ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*() const noexcept {
      return Map;
    }
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.String> Map
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_Map();
    // public System.Void .ctor()
    // Offset: 0x28311E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VariableSet* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::VariableSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VariableSet*, creationType>()));
    }
    // public System.Void Clear()
    // Offset: 0x283125C
    void Clear();
    // public System.Void Add(System.String code, System.String value)
    // Offset: 0x28312BC
    void Add(::StringW code, ::StringW value);
    // public System.Void Remove(System.String code)
    // Offset: 0x28312C8
    void Remove(::StringW code);
    // public System.Boolean Contains(System.String code)
    // Offset: 0x28312D8
    bool Contains(::StringW code);
    // public System.String GetValue(System.String code)
    // Offset: 0x2831348
    ::StringW GetValue(::StringW code);
    // public System.Void SetValue(System.String code, System.String value)
    // Offset: 0x2831434
    void SetValue(::StringW code, ::StringW value);
    // public System.String get_Item(System.String code)
    // Offset: 0x28314D8
    ::StringW get_Item(::StringW code);
    // public System.Void set_Item(System.String code, System.String value)
    // Offset: 0x28314E4
    void set_Item(::StringW code, ::StringW value);
  }; // Wrench.VariableSet
  #pragma pack(pop)
  static check_size<sizeof(VariableSet), 16 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)> __Wrench_VariableSetSizeCheck;
  static_assert(sizeof(VariableSet) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Wrench::VariableSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Wrench::VariableSet::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::VariableSet::*)()>(&Wrench::VariableSet::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::VariableSet*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::VariableSet::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::VariableSet::*)(::StringW, ::StringW)>(&Wrench::VariableSet::Add)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::VariableSet*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, value});
  }
};
// Writing MetadataGetter for method: Wrench::VariableSet::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::VariableSet::*)(::StringW)>(&Wrench::VariableSet::Remove)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::VariableSet*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: Wrench::VariableSet::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Wrench::VariableSet::*)(::StringW)>(&Wrench::VariableSet::Contains)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::VariableSet*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: Wrench::VariableSet::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Wrench::VariableSet::*)(::StringW)>(&Wrench::VariableSet::GetValue)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::VariableSet*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: Wrench::VariableSet::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::VariableSet::*)(::StringW, ::StringW)>(&Wrench::VariableSet::SetValue)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::VariableSet*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, value});
  }
};
// Writing MetadataGetter for method: Wrench::VariableSet::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Wrench::VariableSet::*)(::StringW)>(&Wrench::VariableSet::get_Item)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::VariableSet*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: Wrench::VariableSet::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::VariableSet::*)(::StringW, ::StringW)>(&Wrench::VariableSet::set_Item)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::VariableSet*), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code, value});
  }
};
