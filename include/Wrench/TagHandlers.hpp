// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Wrench
namespace Wrench {
  // Forward declaring type: TagHandler
  class TagHandler;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: Assembly
  class Assembly;
}
// Completed forward declares
// Type namespace: Wrench
namespace Wrench {
  // Forward declaring type: TagHandlers
  class TagHandlers;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Wrench::TagHandlers);
DEFINE_IL2CPP_ARG_TYPE(::Wrench::TagHandlers*, "Wrench", "TagHandlers");
// Type namespace: Wrench
namespace Wrench {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Wrench.TagHandlers
  // [TokenAttribute] Offset: FFFFFFFF
  class TagHandlers : public ::Il2CppObject {
    public:
    // Get static field: static public System.Collections.Generic.Dictionary`2<System.String,Wrench.TagHandler> Handlers
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::Wrench::TagHandler*>* _get_Handlers();
    // Set static field: static public System.Collections.Generic.Dictionary`2<System.String,Wrench.TagHandler> Handlers
    static void _set_Handlers(::System::Collections::Generic::Dictionary_2<::StringW, ::Wrench::TagHandler*>* value);
    // static public System.Void Setup()
    // Offset: 0x282F664
    static void Setup();
    // static public System.Void AddHandlers(System.Reflection.Assembly asm)
    // Offset: 0x282F6FC
    static void AddHandlers(::System::Reflection::Assembly* _asm);
    // static public Wrench.TagHandler Default()
    // Offset: 0x282FB38
    static ::Wrench::TagHandler* Default();
    // static public System.Boolean AddHandler(Wrench.TagHandler handler)
    // Offset: 0x282F918
    static bool AddHandler(::Wrench::TagHandler* handler);
    // static public Wrench.TagHandler GetHandler(System.String tag, System.String defaultTag)
    // Offset: 0x282FB94
    static ::Wrench::TagHandler* GetHandler(::StringW tag, ::StringW defaultTag);
    // static public Wrench.TagHandler GetHandler(System.String tag)
    // Offset: 0x282FBD4
    static ::Wrench::TagHandler* GetHandler(::StringW tag);
  }; // Wrench.TagHandlers
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Wrench::TagHandlers::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Wrench::TagHandlers::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::TagHandlers*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::TagHandlers::AddHandlers
// Il2CppName: AddHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Reflection::Assembly*)>(&Wrench::TagHandlers::AddHandlers)> {
  static const MethodInfo* get() {
    static auto* _asm = &::il2cpp_utils::GetClassFromName("System.Reflection", "Assembly")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::TagHandlers*), "AddHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_asm});
  }
};
// Writing MetadataGetter for method: Wrench::TagHandlers::Default
// Il2CppName: Default
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (*)()>(&Wrench::TagHandlers::Default)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::TagHandlers*), "Default", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::TagHandlers::AddHandler
// Il2CppName: AddHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Wrench::TagHandler*)>(&Wrench::TagHandlers::AddHandler)> {
  static const MethodInfo* get() {
    static auto* handler = &::il2cpp_utils::GetClassFromName("Wrench", "TagHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::TagHandlers*), "AddHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handler});
  }
};
// Writing MetadataGetter for method: Wrench::TagHandlers::GetHandler
// Il2CppName: GetHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (*)(::StringW, ::StringW)>(&Wrench::TagHandlers::GetHandler)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* defaultTag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::TagHandlers*), "GetHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag, defaultTag});
  }
};
// Writing MetadataGetter for method: Wrench::TagHandlers::GetHandler
// Il2CppName: GetHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (*)(::StringW)>(&Wrench::TagHandlers::GetHandler)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::TagHandlers*), "GetHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag});
  }
};
