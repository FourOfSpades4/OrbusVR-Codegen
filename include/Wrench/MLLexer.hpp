// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Wrench.StringReader
#include "Wrench/StringReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Wrench
namespace Wrench {
  // Forward declaring type: MLLexer
  class MLLexer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Wrench::MLLexer);
DEFINE_IL2CPP_ARG_TYPE(::Wrench::MLLexer*, "Wrench", "MLLexer");
// Type namespace: Wrench
namespace Wrench {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: Wrench.MLLexer
  // [TokenAttribute] Offset: FFFFFFFF
  class MLLexer : public ::Wrench::StringReader {
    public:
    public:
    // public System.Boolean Literal
    // Size: 0x1
    // Offset: 0x20
    bool Literal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Literal and: LineNumber
    char __padding0[0x3] = {};
    // public System.Int32 LineNumber
    // Size: 0x4
    // Offset: 0x24
    int LineNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean DidReadJunk
    // Size: 0x1
    // Offset: 0x28
    bool DidReadJunk;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Boolean Literal
    [[deprecated("Use field access instead!")]] bool& dyn_Literal();
    // Get instance field reference: public System.Int32 LineNumber
    [[deprecated("Use field access instead!")]] int& dyn_LineNumber();
    // Get instance field reference: public System.Boolean DidReadJunk
    [[deprecated("Use field access instead!")]] bool& dyn_DidReadJunk();
    // public System.Void .ctor(System.String str, System.Boolean literal)
    // Offset: 0x282DC2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MLLexer* New_ctor(::StringW str, bool literal) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLLexer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MLLexer*, creationType>(str, literal)));
    }
    // public System.Void ExitLiteral()
    // Offset: 0x282E2DC
    void ExitLiteral();
    // public System.Boolean PeekJunk()
    // Offset: 0x282E314
    bool PeekJunk();
    // public System.Boolean ReadJunk()
    // Offset: 0x282DD50
    bool ReadJunk();
    // public System.Void SkipSpaces()
    // Offset: 0x282E020
    void SkipSpaces();
    // public System.Void .ctor(System.String str)
    // Offset: 0x282E068
    // Implemented from: Wrench.StringReader
    // Base method: System.Void StringReader::.ctor(System.String str)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MLLexer* New_ctor(::StringW str) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::MLLexer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MLLexer*, creationType>(str)));
    }
    // public override System.Char Read()
    // Offset: 0x282E13C
    // Implemented from: Wrench.StringReader
    // Base method: System.Char StringReader::Read()
    ::Il2CppChar Read();
    // public override System.Int32 GetLineNumber()
    // Offset: 0x282E2D4
    // Implemented from: Wrench.StringReader
    // Base method: System.Int32 StringReader::GetLineNumber()
    int GetLineNumber();
  }; // Wrench.MLLexer
  #pragma pack(pop)
  static check_size<sizeof(MLLexer), 40 + sizeof(bool)> __Wrench_MLLexerSizeCheck;
  static_assert(sizeof(MLLexer) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Wrench::MLLexer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Wrench::MLLexer::ExitLiteral
// Il2CppName: ExitLiteral
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::MLLexer::*)()>(&Wrench::MLLexer::ExitLiteral)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLLexer*), "ExitLiteral", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::MLLexer::PeekJunk
// Il2CppName: PeekJunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Wrench::MLLexer::*)()>(&Wrench::MLLexer::PeekJunk)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLLexer*), "PeekJunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::MLLexer::ReadJunk
// Il2CppName: ReadJunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Wrench::MLLexer::*)()>(&Wrench::MLLexer::ReadJunk)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLLexer*), "ReadJunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::MLLexer::SkipSpaces
// Il2CppName: SkipSpaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::MLLexer::*)()>(&Wrench::MLLexer::SkipSpaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLLexer*), "SkipSpaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::MLLexer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Wrench::MLLexer::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (Wrench::MLLexer::*)()>(&Wrench::MLLexer::Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLLexer*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Wrench::MLLexer::GetLineNumber
// Il2CppName: GetLineNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Wrench::MLLexer::*)()>(&Wrench::MLLexer::GetLineNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::MLLexer*), "GetLineNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
