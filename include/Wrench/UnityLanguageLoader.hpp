// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Wrench.LanguageLoader
#include "Wrench/LanguageLoader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Wrench
namespace Wrench {
  // Forward declaring type: LanguageSet
  class LanguageSet;
}
// Completed forward declares
// Type namespace: Wrench
namespace Wrench {
  // Forward declaring type: UnityLanguageLoader
  class UnityLanguageLoader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Wrench::UnityLanguageLoader);
DEFINE_IL2CPP_ARG_TYPE(::Wrench::UnityLanguageLoader*, "Wrench", "UnityLanguageLoader");
// Type namespace: Wrench
namespace Wrench {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Wrench.UnityLanguageLoader
  // [TokenAttribute] Offset: FFFFFFFF
  class UnityLanguageLoader : public ::Wrench::LanguageLoader {
    public:
    public:
    // private Wrench.LanguageSet[] Languages
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::Wrench::LanguageSet*> Languages;
    // Field size check
    static_assert(sizeof(::ArrayW<::Wrench::LanguageSet*>) == 0x8);
    public:
    // Creating conversion operator: operator ::ArrayW<::Wrench::LanguageSet*>
    constexpr operator ::ArrayW<::Wrench::LanguageSet*>() const noexcept {
      return Languages;
    }
    // Get instance field reference: private Wrench.LanguageSet[] Languages
    [[deprecated("Use field access instead!")]] ::ArrayW<::Wrench::LanguageSet*>& dyn_Languages();
    // public System.Void .ctor(System.String path)
    // Offset: 0x2830BE0
    // Implemented from: Wrench.LanguageLoader
    // Base method: System.Void LanguageLoader::.ctor(System.String path)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnityLanguageLoader* New_ctor(::StringW path) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::UnityLanguageLoader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnityLanguageLoader*, creationType>(path)));
    }
    // protected override Wrench.LanguageSet GetLanguage(System.String code)
    // Offset: 0x2830C50
    // Implemented from: Wrench.LanguageLoader
    // Base method: Wrench.LanguageSet LanguageLoader::GetLanguage(System.String code)
    ::Wrench::LanguageSet* GetLanguage(::StringW code);
    // protected override Wrench.LanguageSet[] GetAllLanguages()
    // Offset: 0x2830E0C
    // Implemented from: Wrench.LanguageLoader
    // Base method: Wrench.LanguageSet[] LanguageLoader::GetAllLanguages()
    ::ArrayW<::Wrench::LanguageSet*> GetAllLanguages();
  }; // Wrench.UnityLanguageLoader
  #pragma pack(pop)
  static check_size<sizeof(UnityLanguageLoader), 32 + sizeof(::ArrayW<::Wrench::LanguageSet*>)> __Wrench_UnityLanguageLoaderSizeCheck;
  static_assert(sizeof(UnityLanguageLoader) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Wrench::UnityLanguageLoader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Wrench::UnityLanguageLoader::GetLanguage
// Il2CppName: GetLanguage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::LanguageSet* (Wrench::UnityLanguageLoader::*)(::StringW)>(&Wrench::UnityLanguageLoader::GetLanguage)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::UnityLanguageLoader*), "GetLanguage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: Wrench::UnityLanguageLoader::GetAllLanguages
// Il2CppName: GetAllLanguages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Wrench::LanguageSet*> (Wrench::UnityLanguageLoader::*)()>(&Wrench::UnityLanguageLoader::GetAllLanguages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::UnityLanguageLoader*), "GetAllLanguages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
