// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Wrench
namespace Wrench {
  // Forward declaring type: TypeData
  class TypeData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Wrench::TypeData);
DEFINE_IL2CPP_ARG_TYPE(::Wrench::TypeData*, "Wrench", "TypeData");
// Type namespace: Wrench
namespace Wrench {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Wrench.TypeData
  // [TokenAttribute] Offset: FFFFFFFF
  class TypeData : public ::Il2CppObject {
    public:
    // static public System.Boolean IsSubclassOf(System.Type toCheck, System.Type classOf)
    // Offset: 0x282F8DC
    static bool IsSubclassOf(::System::Type* toCheck, ::System::Type* classOf);
    // static public System.Type[] GenericArguments(System.Type forType)
    // Offset: 0x2830BAC
    static ::ArrayW<::System::Type*> GenericArguments(::System::Type* forType);
  }; // Wrench.TypeData
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Wrench::TypeData::IsSubclassOf
// Il2CppName: IsSubclassOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*, ::System::Type*)>(&Wrench::TypeData::IsSubclassOf)> {
  static const MethodInfo* get() {
    static auto* toCheck = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* classOf = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::TypeData*), "IsSubclassOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toCheck, classOf});
  }
};
// Writing MetadataGetter for method: Wrench::TypeData::GenericArguments
// Il2CppName: GenericArguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Type*> (*)(::System::Type*)>(&Wrench::TypeData::GenericArguments)> {
  static const MethodInfo* get() {
    static auto* forType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::TypeData*), "GenericArguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forType});
  }
};
