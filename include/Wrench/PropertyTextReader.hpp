// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Wrench
namespace Wrench {
  // Forward declaring type: MLLexer
  class MLLexer;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Wrench
namespace Wrench {
  // Forward declaring type: PropertyTextReader
  class PropertyTextReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Wrench::PropertyTextReader);
DEFINE_IL2CPP_ARG_TYPE(::Wrench::PropertyTextReader*, "Wrench", "PropertyTextReader");
// Type namespace: Wrench
namespace Wrench {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Wrench.PropertyTextReader
  // [TokenAttribute] Offset: FFFFFFFF
  class PropertyTextReader : public ::Il2CppObject {
    public:
    // static public System.Void Read(Wrench.MLLexer lexer, System.Boolean selfClosing, out System.String property, out System.String value)
    // Offset: 0x282C388
    static void Read(::Wrench::MLLexer* lexer, bool selfClosing, ByRef<::StringW> property, ByRef<::StringW> value);
    // static public System.Void ReadString(Wrench.MLLexer lexer, System.Text.StringBuilder builder)
    // Offset: 0x282D4F8
    static void ReadString(::Wrench::MLLexer* lexer, ::System::Text::StringBuilder* builder);
    // static public System.Void SkipSpaces(Wrench.MLLexer lexer)
    // Offset: 0x282F344
    static void SkipSpaces(::Wrench::MLLexer* lexer);
  }; // Wrench.PropertyTextReader
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Wrench::PropertyTextReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Wrench::MLLexer*, bool, ByRef<::StringW>, ByRef<::StringW>)>(&Wrench::PropertyTextReader::Read)> {
  static const MethodInfo* get() {
    static auto* lexer = &::il2cpp_utils::GetClassFromName("Wrench", "MLLexer")->byval_arg;
    static auto* selfClosing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* property = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::PropertyTextReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lexer, selfClosing, property, value});
  }
};
// Writing MetadataGetter for method: Wrench::PropertyTextReader::ReadString
// Il2CppName: ReadString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Wrench::MLLexer*, ::System::Text::StringBuilder*)>(&Wrench::PropertyTextReader::ReadString)> {
  static const MethodInfo* get() {
    static auto* lexer = &::il2cpp_utils::GetClassFromName("Wrench", "MLLexer")->byval_arg;
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::PropertyTextReader*), "ReadString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lexer, builder});
  }
};
// Writing MetadataGetter for method: Wrench::PropertyTextReader::SkipSpaces
// Il2CppName: SkipSpaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Wrench::MLLexer*)>(&Wrench::PropertyTextReader::SkipSpaces)> {
  static const MethodInfo* get() {
    static auto* lexer = &::il2cpp_utils::GetClassFromName("Wrench", "MLLexer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::PropertyTextReader*), "SkipSpaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lexer});
  }
};
