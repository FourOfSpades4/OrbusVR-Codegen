// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Wrench.MLElement
#include "Wrench/MLElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Wrench
namespace Wrench {
  // Forward declaring type: LanguageSet
  class LanguageSet;
  // Forward declaring type: TagHandler
  class TagHandler;
  // Forward declaring type: MLLexer
  class MLLexer;
}
// Completed forward declares
// Type namespace: Wrench
namespace Wrench {
  // Forward declaring type: LanguageElement
  class LanguageElement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Wrench::LanguageElement);
DEFINE_IL2CPP_ARG_TYPE(::Wrench::LanguageElement*, "Wrench", "LanguageElement");
// Type namespace: Wrench
namespace Wrench {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Wrench.LanguageElement
  // [TokenAttribute] Offset: FFFFFFFF
  class LanguageElement : public ::Wrench::MLElement {
    public:
    public:
    // public Wrench.LanguageSet Parent
    // Size: 0x8
    // Offset: 0x28
    ::Wrench::LanguageSet* Parent;
    // Field size check
    static_assert(sizeof(::Wrench::LanguageSet*) == 0x8);
    // public Wrench.TagHandler Handler
    // Size: 0x8
    // Offset: 0x30
    ::Wrench::TagHandler* Handler;
    // Field size check
    static_assert(sizeof(::Wrench::TagHandler*) == 0x8);
    public:
    // Get instance field reference: public Wrench.LanguageSet Parent
    [[deprecated("Use field access instead!")]] ::Wrench::LanguageSet*& dyn_Parent();
    // Get instance field reference: public Wrench.TagHandler Handler
    [[deprecated("Use field access instead!")]] ::Wrench::TagHandler*& dyn_Handler();
    // public System.Void .ctor(Wrench.LanguageSet parent, Wrench.MLLexer lexer)
    // Offset: 0xDD8450
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LanguageElement* New_ctor(::Wrench::LanguageSet* parent, ::Wrench::MLLexer* lexer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LanguageElement*, creationType>(parent, lexer)));
    }
    // public System.Void .ctor(Wrench.LanguageSet parent, Wrench.MLLexer lexer, System.Boolean innerElement)
    // Offset: 0xDD849C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LanguageElement* New_ctor(::Wrench::LanguageSet* parent, ::Wrench::MLLexer* lexer, bool innerElement) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Wrench::LanguageElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LanguageElement*, creationType>(parent, lexer, innerElement)));
    }
    // protected override Wrench.MLElement CreateTagElement(Wrench.MLLexer lexer)
    // Offset: 0xDD84E0
    // Implemented from: Wrench.MLElement
    // Base method: Wrench.MLElement MLElement::CreateTagElement(Wrench.MLLexer lexer)
    ::Wrench::MLElement* CreateTagElement(::Wrench::MLLexer* lexer);
    // public override System.Void SetTag(System.String tag)
    // Offset: 0xDD86E8
    // Implemented from: Wrench.MLElement
    // Base method: System.Void MLElement::SetTag(System.String tag)
    void SetTag(::StringW tag);
    // public override Wrench.TagHandler GetHandler()
    // Offset: 0xDD87E4
    // Implemented from: Wrench.MLElement
    // Base method: Wrench.TagHandler MLElement::GetHandler()
    ::Wrench::TagHandler* GetHandler();
  }; // Wrench.LanguageElement
  #pragma pack(pop)
  static check_size<sizeof(LanguageElement), 48 + sizeof(::Wrench::TagHandler*)> __Wrench_LanguageElementSizeCheck;
  static_assert(sizeof(LanguageElement) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Wrench::LanguageElement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Wrench::LanguageElement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Wrench::LanguageElement::CreateTagElement
// Il2CppName: CreateTagElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::MLElement* (Wrench::LanguageElement::*)(::Wrench::MLLexer*)>(&Wrench::LanguageElement::CreateTagElement)> {
  static const MethodInfo* get() {
    static auto* lexer = &::il2cpp_utils::GetClassFromName("Wrench", "MLLexer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageElement*), "CreateTagElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lexer});
  }
};
// Writing MetadataGetter for method: Wrench::LanguageElement::SetTag
// Il2CppName: SetTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Wrench::LanguageElement::*)(::StringW)>(&Wrench::LanguageElement::SetTag)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageElement*), "SetTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag});
  }
};
// Writing MetadataGetter for method: Wrench::LanguageElement::GetHandler
// Il2CppName: GetHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wrench::TagHandler* (Wrench::LanguageElement::*)()>(&Wrench::LanguageElement::GetHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Wrench::LanguageElement*), "GetHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
