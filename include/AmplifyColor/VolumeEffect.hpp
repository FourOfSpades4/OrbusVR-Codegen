// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AmplifyColor
namespace AmplifyColor {
  // Forward declaring type: VolumeEffectComponent
  class VolumeEffectComponent;
  // Forward declaring type: VolumeEffectFlags
  class VolumeEffectFlags;
  // Forward declaring type: VolumeEffectComponentFlags
  class VolumeEffectComponentFlags;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AmplifyColorBase
  class AmplifyColorBase;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Component
  class Component;
}
// Completed forward declares
// Type namespace: AmplifyColor
namespace AmplifyColor {
  // Forward declaring type: VolumeEffect
  class VolumeEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AmplifyColor::VolumeEffect);
DEFINE_IL2CPP_ARG_TYPE(::AmplifyColor::VolumeEffect*, "AmplifyColor", "VolumeEffect");
// Type namespace: AmplifyColor
namespace AmplifyColor {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: AmplifyColor.VolumeEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class VolumeEffect : public ::Il2CppObject {
    public:
    // Nested type: ::AmplifyColor::VolumeEffect::$$c
    class $$c;
    public:
    // public AmplifyColorBase gameObject
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::AmplifyColorBase* gameObject;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AmplifyColorBase*) == 0x8);
    // public System.Collections.Generic.List`1<AmplifyColor.VolumeEffectComponent> components
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::AmplifyColor::VolumeEffectComponent*>* components;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::AmplifyColor::VolumeEffectComponent*>*) == 0x8);
    public:
    // Get instance field reference: public AmplifyColorBase gameObject
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AmplifyColorBase*& dyn_gameObject();
    // Get instance field reference: public System.Collections.Generic.List`1<AmplifyColor.VolumeEffectComponent> components
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::AmplifyColor::VolumeEffectComponent*>*& dyn_components();
    // public System.Void .ctor(AmplifyColorBase effect)
    // Offset: 0xF00720
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VolumeEffect* New_ctor(::GlobalNamespace::AmplifyColorBase* effect) {
      static auto ___internal__logger = ::Logger::get().WithContext("::AmplifyColor::VolumeEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VolumeEffect*, creationType>(effect)));
    }
    // static public AmplifyColor.VolumeEffect BlendValuesToVolumeEffect(AmplifyColor.VolumeEffectFlags flags, AmplifyColor.VolumeEffect volume1, AmplifyColor.VolumeEffect volume2, System.Single blend)
    // Offset: 0xF007A4
    static ::AmplifyColor::VolumeEffect* BlendValuesToVolumeEffect(::AmplifyColor::VolumeEffectFlags* flags, ::AmplifyColor::VolumeEffect* volume1, ::AmplifyColor::VolumeEffect* volume2, float blend);
    // public AmplifyColor.VolumeEffectComponent AddComponent(UnityEngine.Component c, AmplifyColor.VolumeEffectComponentFlags compFlags)
    // Offset: 0xF011A4
    ::AmplifyColor::VolumeEffectComponent* AddComponent(::UnityEngine::Component* c, ::AmplifyColor::VolumeEffectComponentFlags* compFlags);
    // public System.Void RemoveEffectComponent(AmplifyColor.VolumeEffectComponent comp)
    // Offset: 0xF01880
    void RemoveEffectComponent(::AmplifyColor::VolumeEffectComponent* comp);
    // public System.Void UpdateVolume()
    // Offset: 0xF018F0
    void UpdateVolume();
    // public System.Void SetValues(AmplifyColorBase targetColor)
    // Offset: 0xF01AEC
    void SetValues(::GlobalNamespace::AmplifyColorBase* targetColor);
    // public System.Void BlendValues(AmplifyColorBase targetColor, AmplifyColor.VolumeEffect other, System.Single blendAmount)
    // Offset: 0xF021B4
    void BlendValues(::GlobalNamespace::AmplifyColorBase* targetColor, ::AmplifyColor::VolumeEffect* other, float blendAmount);
    // public AmplifyColor.VolumeEffectComponent FindEffectComponent(System.String compName)
    // Offset: 0xF00EF0
    ::AmplifyColor::VolumeEffectComponent* FindEffectComponent(::StringW compName);
    // static public UnityEngine.Component[] ListAcceptableComponents(AmplifyColorBase go)
    // Offset: 0xF02778
    static ::ArrayW<::UnityEngine::Component*> ListAcceptableComponents(::GlobalNamespace::AmplifyColorBase* go);
    // public System.String[] GetComponentNames()
    // Offset: 0xF02928
    ::ArrayW<::StringW> GetComponentNames();
  }; // AmplifyColor.VolumeEffect
  #pragma pack(pop)
  static check_size<sizeof(VolumeEffect), 24 + sizeof(::System::Collections::Generic::List_1<::AmplifyColor::VolumeEffectComponent*>*)> __AmplifyColor_VolumeEffectSizeCheck;
  static_assert(sizeof(VolumeEffect) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AmplifyColor::VolumeEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AmplifyColor::VolumeEffect::BlendValuesToVolumeEffect
// Il2CppName: BlendValuesToVolumeEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyColor::VolumeEffect* (*)(::AmplifyColor::VolumeEffectFlags*, ::AmplifyColor::VolumeEffect*, ::AmplifyColor::VolumeEffect*, float)>(&AmplifyColor::VolumeEffect::BlendValuesToVolumeEffect)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("AmplifyColor", "VolumeEffectFlags")->byval_arg;
    static auto* volume1 = &::il2cpp_utils::GetClassFromName("AmplifyColor", "VolumeEffect")->byval_arg;
    static auto* volume2 = &::il2cpp_utils::GetClassFromName("AmplifyColor", "VolumeEffect")->byval_arg;
    static auto* blend = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffect*), "BlendValuesToVolumeEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags, volume1, volume2, blend});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffect::AddComponent
// Il2CppName: AddComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyColor::VolumeEffectComponent* (AmplifyColor::VolumeEffect::*)(::UnityEngine::Component*, ::AmplifyColor::VolumeEffectComponentFlags*)>(&AmplifyColor::VolumeEffect::AddComponent)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    static auto* compFlags = &::il2cpp_utils::GetClassFromName("AmplifyColor", "VolumeEffectComponentFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffect*), "AddComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, compFlags});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffect::RemoveEffectComponent
// Il2CppName: RemoveEffectComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyColor::VolumeEffect::*)(::AmplifyColor::VolumeEffectComponent*)>(&AmplifyColor::VolumeEffect::RemoveEffectComponent)> {
  static const MethodInfo* get() {
    static auto* comp = &::il2cpp_utils::GetClassFromName("AmplifyColor", "VolumeEffectComponent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffect*), "RemoveEffectComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{comp});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffect::UpdateVolume
// Il2CppName: UpdateVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyColor::VolumeEffect::*)()>(&AmplifyColor::VolumeEffect::UpdateVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffect*), "UpdateVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffect::SetValues
// Il2CppName: SetValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyColor::VolumeEffect::*)(::GlobalNamespace::AmplifyColorBase*)>(&AmplifyColor::VolumeEffect::SetValues)> {
  static const MethodInfo* get() {
    static auto* targetColor = &::il2cpp_utils::GetClassFromName("", "AmplifyColorBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffect*), "SetValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetColor});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffect::BlendValues
// Il2CppName: BlendValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyColor::VolumeEffect::*)(::GlobalNamespace::AmplifyColorBase*, ::AmplifyColor::VolumeEffect*, float)>(&AmplifyColor::VolumeEffect::BlendValues)> {
  static const MethodInfo* get() {
    static auto* targetColor = &::il2cpp_utils::GetClassFromName("", "AmplifyColorBase")->byval_arg;
    static auto* other = &::il2cpp_utils::GetClassFromName("AmplifyColor", "VolumeEffect")->byval_arg;
    static auto* blendAmount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffect*), "BlendValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetColor, other, blendAmount});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffect::FindEffectComponent
// Il2CppName: FindEffectComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyColor::VolumeEffectComponent* (AmplifyColor::VolumeEffect::*)(::StringW)>(&AmplifyColor::VolumeEffect::FindEffectComponent)> {
  static const MethodInfo* get() {
    static auto* compName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffect*), "FindEffectComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{compName});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffect::ListAcceptableComponents
// Il2CppName: ListAcceptableComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Component*> (*)(::GlobalNamespace::AmplifyColorBase*)>(&AmplifyColor::VolumeEffect::ListAcceptableComponents)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("", "AmplifyColorBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffect*), "ListAcceptableComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffect::GetComponentNames
// Il2CppName: GetComponentNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (AmplifyColor::VolumeEffect::*)()>(&AmplifyColor::VolumeEffect::GetComponentNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffect*), "GetComponentNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
