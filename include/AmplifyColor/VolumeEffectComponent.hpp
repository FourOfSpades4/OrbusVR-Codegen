// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AmplifyColor
namespace AmplifyColor {
  // Forward declaring type: VolumeEffectField
  class VolumeEffectField;
  // Forward declaring type: VolumeEffectComponentFlags
  class VolumeEffectComponentFlags;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: FieldInfo
  class FieldInfo;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Component
  class Component;
}
// Completed forward declares
// Type namespace: AmplifyColor
namespace AmplifyColor {
  // Forward declaring type: VolumeEffectComponent
  class VolumeEffectComponent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AmplifyColor::VolumeEffectComponent);
DEFINE_IL2CPP_ARG_TYPE(::AmplifyColor::VolumeEffectComponent*, "AmplifyColor", "VolumeEffectComponent");
// Type namespace: AmplifyColor
namespace AmplifyColor {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: AmplifyColor.VolumeEffectComponent
  // [TokenAttribute] Offset: FFFFFFFF
  class VolumeEffectComponent : public ::Il2CppObject {
    public:
    // Nested type: ::AmplifyColor::VolumeEffectComponent::$$c__DisplayClass7_0
    class $$c__DisplayClass7_0;
    // Nested type: ::AmplifyColor::VolumeEffectComponent::$$c
    class $$c;
    public:
    // public System.String componentName
    // Size: 0x8
    // Offset: 0x10
    ::StringW componentName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.List`1<AmplifyColor.VolumeEffectField> fields
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::AmplifyColor::VolumeEffectField*>* fields;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::AmplifyColor::VolumeEffectField*>*) == 0x8);
    public:
    // Get instance field reference: public System.String componentName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_componentName();
    // Get instance field reference: public System.Collections.Generic.List`1<AmplifyColor.VolumeEffectField> fields
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::AmplifyColor::VolumeEffectField*>*& dyn_fields();
    // public System.Void .ctor(System.String name)
    // Offset: 0xF00FEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VolumeEffectComponent* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::AmplifyColor::VolumeEffectComponent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VolumeEffectComponent*, creationType>(name)));
    }
    // public AmplifyColor.VolumeEffectField AddField(System.Reflection.FieldInfo pi, UnityEngine.Component c)
    // Offset: 0xF02BF4
    ::AmplifyColor::VolumeEffectField* AddField(::System::Reflection::FieldInfo* pi, ::UnityEngine::Component* c);
    // public AmplifyColor.VolumeEffectField AddField(System.Reflection.FieldInfo pi, UnityEngine.Component c, System.Int32 position)
    // Offset: 0xF02BFC
    ::AmplifyColor::VolumeEffectField* AddField(::System::Reflection::FieldInfo* pi, ::UnityEngine::Component* c, int position);
    // public System.Void RemoveEffectField(AmplifyColor.VolumeEffectField field)
    // Offset: 0xF02F10
    void RemoveEffectField(::AmplifyColor::VolumeEffectField* field);
    // public System.Void .ctor(UnityEngine.Component c, AmplifyColor.VolumeEffectComponentFlags compFlags)
    // Offset: 0xF01604
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VolumeEffectComponent* New_ctor(::UnityEngine::Component* c, ::AmplifyColor::VolumeEffectComponentFlags* compFlags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::AmplifyColor::VolumeEffectComponent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VolumeEffectComponent*, creationType>(c, compFlags)));
    }
    // public System.Void UpdateComponent(UnityEngine.Component c, AmplifyColor.VolumeEffectComponentFlags compFlags)
    // Offset: 0xF012B8
    void UpdateComponent(::UnityEngine::Component* c, ::AmplifyColor::VolumeEffectComponentFlags* compFlags);
    // public AmplifyColor.VolumeEffectField FindEffectField(System.String fieldName)
    // Offset: 0xF01070
    ::AmplifyColor::VolumeEffectField* FindEffectField(::StringW fieldName);
    // static public System.Reflection.FieldInfo[] ListAcceptableFields(UnityEngine.Component c)
    // Offset: 0xF02F88
    static ::ArrayW<::System::Reflection::FieldInfo*> ListAcceptableFields(::UnityEngine::Component* c);
    // public System.String[] GetFieldNames()
    // Offset: 0xF03110
    ::ArrayW<::StringW> GetFieldNames();
  }; // AmplifyColor.VolumeEffectComponent
  #pragma pack(pop)
  static check_size<sizeof(VolumeEffectComponent), 24 + sizeof(::System::Collections::Generic::List_1<::AmplifyColor::VolumeEffectField*>*)> __AmplifyColor_VolumeEffectComponentSizeCheck;
  static_assert(sizeof(VolumeEffectComponent) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AmplifyColor::VolumeEffectComponent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AmplifyColor::VolumeEffectComponent::AddField
// Il2CppName: AddField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyColor::VolumeEffectField* (AmplifyColor::VolumeEffectComponent::*)(::System::Reflection::FieldInfo*, ::UnityEngine::Component*)>(&AmplifyColor::VolumeEffectComponent::AddField)> {
  static const MethodInfo* get() {
    static auto* pi = &::il2cpp_utils::GetClassFromName("System.Reflection", "FieldInfo")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffectComponent*), "AddField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pi, c});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffectComponent::AddField
// Il2CppName: AddField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyColor::VolumeEffectField* (AmplifyColor::VolumeEffectComponent::*)(::System::Reflection::FieldInfo*, ::UnityEngine::Component*, int)>(&AmplifyColor::VolumeEffectComponent::AddField)> {
  static const MethodInfo* get() {
    static auto* pi = &::il2cpp_utils::GetClassFromName("System.Reflection", "FieldInfo")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffectComponent*), "AddField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pi, c, position});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffectComponent::RemoveEffectField
// Il2CppName: RemoveEffectField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyColor::VolumeEffectComponent::*)(::AmplifyColor::VolumeEffectField*)>(&AmplifyColor::VolumeEffectComponent::RemoveEffectField)> {
  static const MethodInfo* get() {
    static auto* field = &::il2cpp_utils::GetClassFromName("AmplifyColor", "VolumeEffectField")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffectComponent*), "RemoveEffectField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{field});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffectComponent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AmplifyColor::VolumeEffectComponent::UpdateComponent
// Il2CppName: UpdateComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyColor::VolumeEffectComponent::*)(::UnityEngine::Component*, ::AmplifyColor::VolumeEffectComponentFlags*)>(&AmplifyColor::VolumeEffectComponent::UpdateComponent)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    static auto* compFlags = &::il2cpp_utils::GetClassFromName("AmplifyColor", "VolumeEffectComponentFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffectComponent*), "UpdateComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, compFlags});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffectComponent::FindEffectField
// Il2CppName: FindEffectField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyColor::VolumeEffectField* (AmplifyColor::VolumeEffectComponent::*)(::StringW)>(&AmplifyColor::VolumeEffectComponent::FindEffectField)> {
  static const MethodInfo* get() {
    static auto* fieldName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffectComponent*), "FindEffectField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fieldName});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffectComponent::ListAcceptableFields
// Il2CppName: ListAcceptableFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Reflection::FieldInfo*> (*)(::UnityEngine::Component*)>(&AmplifyColor::VolumeEffectComponent::ListAcceptableFields)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffectComponent*), "ListAcceptableFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffectComponent::GetFieldNames
// Il2CppName: GetFieldNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (AmplifyColor::VolumeEffectComponent::*)()>(&AmplifyColor::VolumeEffectComponent::GetFieldNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffectComponent*), "GetFieldNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
