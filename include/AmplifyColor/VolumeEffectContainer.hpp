// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: AmplifyColor
namespace AmplifyColor {
  // Forward declaring type: VolumeEffect
  class VolumeEffect;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AmplifyColorBase
  class AmplifyColorBase;
}
// Completed forward declares
// Type namespace: AmplifyColor
namespace AmplifyColor {
  // Forward declaring type: VolumeEffectContainer
  class VolumeEffectContainer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::AmplifyColor::VolumeEffectContainer);
DEFINE_IL2CPP_ARG_TYPE(::AmplifyColor::VolumeEffectContainer*, "AmplifyColor", "VolumeEffectContainer");
// Type namespace: AmplifyColor
namespace AmplifyColor {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: AmplifyColor.VolumeEffectContainer
  // [TokenAttribute] Offset: FFFFFFFF
  class VolumeEffectContainer : public ::Il2CppObject {
    public:
    // Nested type: ::AmplifyColor::VolumeEffectContainer::$$c
    class $$c;
    public:
    // public System.Collections.Generic.List`1<AmplifyColor.VolumeEffect> volumes
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::AmplifyColor::VolumeEffect*>* volumes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::AmplifyColor::VolumeEffect*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::AmplifyColor::VolumeEffect*>*
    constexpr operator ::System::Collections::Generic::List_1<::AmplifyColor::VolumeEffect*>*() const noexcept {
      return volumes;
    }
    // Get instance field reference: public System.Collections.Generic.List`1<AmplifyColor.VolumeEffect> volumes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::AmplifyColor::VolumeEffect*>*& dyn_volumes();
    // public System.Void .ctor()
    // Offset: 0xF03FB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VolumeEffectContainer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::AmplifyColor::VolumeEffectContainer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VolumeEffectContainer*, creationType>()));
    }
    // public System.Void AddColorEffect(AmplifyColorBase colorEffect)
    // Offset: 0xF0402C
    void AddColorEffect(::GlobalNamespace::AmplifyColorBase* colorEffect);
    // public AmplifyColor.VolumeEffect AddJustColorEffect(AmplifyColorBase colorEffect)
    // Offset: 0xF042F0
    ::AmplifyColor::VolumeEffect* AddJustColorEffect(::GlobalNamespace::AmplifyColorBase* colorEffect);
    // public AmplifyColor.VolumeEffect FindVolumeEffect(AmplifyColorBase colorEffect)
    // Offset: 0xF040DC
    ::AmplifyColor::VolumeEffect* FindVolumeEffect(::GlobalNamespace::AmplifyColorBase* colorEffect);
    // public System.Void RemoveVolumeEffect(AmplifyColor.VolumeEffect volume)
    // Offset: 0xF0438C
    void RemoveVolumeEffect(::AmplifyColor::VolumeEffect* volume);
    // public AmplifyColorBase[] GetStoredEffects()
    // Offset: 0xF043FC
    ::ArrayW<::GlobalNamespace::AmplifyColorBase*> GetStoredEffects();
  }; // AmplifyColor.VolumeEffectContainer
  #pragma pack(pop)
  static check_size<sizeof(VolumeEffectContainer), 16 + sizeof(::System::Collections::Generic::List_1<::AmplifyColor::VolumeEffect*>*)> __AmplifyColor_VolumeEffectContainerSizeCheck;
  static_assert(sizeof(VolumeEffectContainer) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: AmplifyColor::VolumeEffectContainer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: AmplifyColor::VolumeEffectContainer::AddColorEffect
// Il2CppName: AddColorEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyColor::VolumeEffectContainer::*)(::GlobalNamespace::AmplifyColorBase*)>(&AmplifyColor::VolumeEffectContainer::AddColorEffect)> {
  static const MethodInfo* get() {
    static auto* colorEffect = &::il2cpp_utils::GetClassFromName("", "AmplifyColorBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffectContainer*), "AddColorEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorEffect});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffectContainer::AddJustColorEffect
// Il2CppName: AddJustColorEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyColor::VolumeEffect* (AmplifyColor::VolumeEffectContainer::*)(::GlobalNamespace::AmplifyColorBase*)>(&AmplifyColor::VolumeEffectContainer::AddJustColorEffect)> {
  static const MethodInfo* get() {
    static auto* colorEffect = &::il2cpp_utils::GetClassFromName("", "AmplifyColorBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffectContainer*), "AddJustColorEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorEffect});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffectContainer::FindVolumeEffect
// Il2CppName: FindVolumeEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::AmplifyColor::VolumeEffect* (AmplifyColor::VolumeEffectContainer::*)(::GlobalNamespace::AmplifyColorBase*)>(&AmplifyColor::VolumeEffectContainer::FindVolumeEffect)> {
  static const MethodInfo* get() {
    static auto* colorEffect = &::il2cpp_utils::GetClassFromName("", "AmplifyColorBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffectContainer*), "FindVolumeEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorEffect});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffectContainer::RemoveVolumeEffect
// Il2CppName: RemoveVolumeEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AmplifyColor::VolumeEffectContainer::*)(::AmplifyColor::VolumeEffect*)>(&AmplifyColor::VolumeEffectContainer::RemoveVolumeEffect)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("AmplifyColor", "VolumeEffect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffectContainer*), "RemoveVolumeEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume});
  }
};
// Writing MetadataGetter for method: AmplifyColor::VolumeEffectContainer::GetStoredEffects
// Il2CppName: GetStoredEffects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::AmplifyColorBase*> (AmplifyColor::VolumeEffectContainer::*)()>(&AmplifyColor::VolumeEffectContainer::GetStoredEffects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AmplifyColor::VolumeEffectContainer*), "GetStoredEffects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
