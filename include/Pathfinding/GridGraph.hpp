// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.NavGraph
#include "Pathfinding/NavGraph.hpp"
// Including type: Pathfinding.IUpdatableGraph
#include "Pathfinding/IUpdatableGraph.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: Pathfinding.NumNeighbours
#include "Pathfinding/NumNeighbours.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphCollision
  class GraphCollision;
  // Forward declaring type: GridNode
  class GridNode;
  // Forward declaring type: Int3
  struct Int3;
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: GraphUpdateShape
  class GraphUpdateShape;
  // Forward declaring type: GraphUpdateThreading
  struct GraphUpdateThreading;
  // Forward declaring type: GraphUpdateObject
  class GraphUpdateObject;
  // Forward declaring type: GraphNodeDelegateCancelable
  class GraphNodeDelegateCancelable;
  // Forward declaring type: NNInfo
  struct NNInfo;
  // Forward declaring type: NNConstraint
  class NNConstraint;
  // Forward declaring type: OnScanStatus
  class OnScanStatus;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Bounds
  struct Bounds;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AstarPath
  class AstarPath;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Pathfinding::Serialization
namespace Pathfinding::Serialization {
  // Forward declaring type: GraphSerializationContext
  class GraphSerializationContext;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GridGraph
  class GridGraph;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::GridGraph);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::GridGraph*, "Pathfinding", "GridGraph");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x1B8
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.GridGraph
  // [TokenAttribute] Offset: FFFFFFFF
  // [JsonOptInAttribute] Offset: FFFFFFFF
  class GridGraph : public ::Pathfinding::NavGraph/*, public ::Pathfinding::IUpdatableGraph*/ {
    public:
    public:
    // public System.Int32 width
    // Size: 0x4
    // Offset: 0xC4
    int width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 depth
    // Size: 0x4
    // Offset: 0xC8
    int depth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single aspectRatio
    // Size: 0x4
    // Offset: 0xCC
    float aspectRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single isometricAngle
    // Size: 0x4
    // Offset: 0xD0
    float isometricAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean uniformEdgeCosts
    // Size: 0x1
    // Offset: 0xD4
    bool uniformEdgeCosts;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: uniformEdgeCosts and: rotation
    char __padding4[0x3] = {};
    // public UnityEngine.Vector3 rotation
    // Size: 0xC
    // Offset: 0xD8
    ::UnityEngine::Vector3 rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 center
    // Size: 0xC
    // Offset: 0xE4
    ::UnityEngine::Vector3 center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector2 unclampedSize
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::Vector2 unclampedSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.Single nodeSize
    // Size: 0x4
    // Offset: 0xF8
    float nodeSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: nodeSize and: collision
    char __padding8[0x4] = {};
    // public Pathfinding.GraphCollision collision
    // Size: 0x8
    // Offset: 0x100
    ::Pathfinding::GraphCollision* collision;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphCollision*) == 0x8);
    // public System.Single maxClimb
    // Size: 0x4
    // Offset: 0x108
    float maxClimb;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 maxClimbAxis
    // Size: 0x4
    // Offset: 0x10C
    int maxClimbAxis;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single maxSlope
    // Size: 0x4
    // Offset: 0x110
    float maxSlope;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 erodeIterations
    // Size: 0x4
    // Offset: 0x114
    int erodeIterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean erosionUseTags
    // Size: 0x1
    // Offset: 0x118
    bool erosionUseTags;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: erosionUseTags and: erosionFirstTag
    char __padding14[0x3] = {};
    // public System.Int32 erosionFirstTag
    // Size: 0x4
    // Offset: 0x11C
    int erosionFirstTag;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean autoLinkGrids
    // Size: 0x1
    // Offset: 0x120
    bool autoLinkGrids;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoLinkGrids and: autoLinkDistLimit
    char __padding16[0x3] = {};
    // public System.Single autoLinkDistLimit
    // Size: 0x4
    // Offset: 0x124
    float autoLinkDistLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.NumNeighbours neighbours
    // Size: 0x4
    // Offset: 0x128
    ::Pathfinding::NumNeighbours neighbours;
    // Field size check
    static_assert(sizeof(::Pathfinding::NumNeighbours) == 0x4);
    // public System.Boolean cutCorners
    // Size: 0x1
    // Offset: 0x12C
    bool cutCorners;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: cutCorners and: penaltyPositionOffset
    char __padding19[0x3] = {};
    // public System.Single penaltyPositionOffset
    // Size: 0x4
    // Offset: 0x130
    float penaltyPositionOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean penaltyPosition
    // Size: 0x1
    // Offset: 0x134
    bool penaltyPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: penaltyPosition and: penaltyPositionFactor
    char __padding21[0x3] = {};
    // public System.Single penaltyPositionFactor
    // Size: 0x4
    // Offset: 0x138
    float penaltyPositionFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean penaltyAngle
    // Size: 0x1
    // Offset: 0x13C
    bool penaltyAngle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: penaltyAngle and: penaltyAngleFactor
    char __padding23[0x3] = {};
    // public System.Single penaltyAngleFactor
    // Size: 0x4
    // Offset: 0x140
    float penaltyAngleFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single penaltyAnglePower
    // Size: 0x4
    // Offset: 0x144
    float penaltyAnglePower;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAE5DB4
    // private UnityEngine.Vector2 <size>k__BackingField
    // Size: 0x8
    // Offset: 0x148
    ::UnityEngine::Vector2 size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public readonly System.Int32[] neighbourOffsets
    // Size: 0x8
    // Offset: 0x150
    ::ArrayW<int> neighbourOffsets;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public readonly System.UInt32[] neighbourCosts
    // Size: 0x8
    // Offset: 0x158
    ::ArrayW<uint> neighbourCosts;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // public readonly System.Int32[] neighbourXOffsets
    // Size: 0x8
    // Offset: 0x160
    ::ArrayW<int> neighbourXOffsets;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public readonly System.Int32[] neighbourZOffsets
    // Size: 0x8
    // Offset: 0x168
    ::ArrayW<int> neighbourZOffsets;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAE5DC4
    // private UnityEngine.Matrix4x4 <boundsMatrix>k__BackingField
    // Size: 0x40
    // Offset: 0x170
    ::UnityEngine::Matrix4x4 boundsMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // public Pathfinding.GridNode[] nodes
    // Size: 0x8
    // Offset: 0x1B0
    ::ArrayW<::Pathfinding::GridNode*> nodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::GridNode*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Pathfinding::IUpdatableGraph
    operator ::Pathfinding::IUpdatableGraph() noexcept {
      return *reinterpret_cast<::Pathfinding::IUpdatableGraph*>(this);
    }
    // Get static field: static readonly System.Int32[] hexagonNeighbourIndices
    static ::ArrayW<int> _get_hexagonNeighbourIndices();
    // Set static field: static readonly System.Int32[] hexagonNeighbourIndices
    static void _set_hexagonNeighbourIndices(::ArrayW<int> value);
    // static field const value: static public System.Int32 getNearestForceOverlap
    static constexpr const int getNearestForceOverlap = 2;
    // Get static field: static public System.Int32 getNearestForceOverlap
    static int _get_getNearestForceOverlap();
    // Set static field: static public System.Int32 getNearestForceOverlap
    static void _set_getNearestForceOverlap(int value);
    // Get instance field reference: public System.Int32 width
    [[deprecated("Use field access instead!")]] int& dyn_width();
    // Get instance field reference: public System.Int32 depth
    [[deprecated("Use field access instead!")]] int& dyn_depth();
    // Get instance field reference: public System.Single aspectRatio
    [[deprecated("Use field access instead!")]] float& dyn_aspectRatio();
    // Get instance field reference: public System.Single isometricAngle
    [[deprecated("Use field access instead!")]] float& dyn_isometricAngle();
    // Get instance field reference: public System.Boolean uniformEdgeCosts
    [[deprecated("Use field access instead!")]] bool& dyn_uniformEdgeCosts();
    // Get instance field reference: public UnityEngine.Vector3 rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rotation();
    // Get instance field reference: public UnityEngine.Vector3 center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_center();
    // Get instance field reference: public UnityEngine.Vector2 unclampedSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_unclampedSize();
    // Get instance field reference: public System.Single nodeSize
    [[deprecated("Use field access instead!")]] float& dyn_nodeSize();
    // Get instance field reference: public Pathfinding.GraphCollision collision
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphCollision*& dyn_collision();
    // Get instance field reference: public System.Single maxClimb
    [[deprecated("Use field access instead!")]] float& dyn_maxClimb();
    // Get instance field reference: public System.Int32 maxClimbAxis
    [[deprecated("Use field access instead!")]] int& dyn_maxClimbAxis();
    // Get instance field reference: public System.Single maxSlope
    [[deprecated("Use field access instead!")]] float& dyn_maxSlope();
    // Get instance field reference: public System.Int32 erodeIterations
    [[deprecated("Use field access instead!")]] int& dyn_erodeIterations();
    // Get instance field reference: public System.Boolean erosionUseTags
    [[deprecated("Use field access instead!")]] bool& dyn_erosionUseTags();
    // Get instance field reference: public System.Int32 erosionFirstTag
    [[deprecated("Use field access instead!")]] int& dyn_erosionFirstTag();
    // Get instance field reference: public System.Boolean autoLinkGrids
    [[deprecated("Use field access instead!")]] bool& dyn_autoLinkGrids();
    // Get instance field reference: public System.Single autoLinkDistLimit
    [[deprecated("Use field access instead!")]] float& dyn_autoLinkDistLimit();
    // Get instance field reference: public Pathfinding.NumNeighbours neighbours
    [[deprecated("Use field access instead!")]] ::Pathfinding::NumNeighbours& dyn_neighbours();
    // Get instance field reference: public System.Boolean cutCorners
    [[deprecated("Use field access instead!")]] bool& dyn_cutCorners();
    // Get instance field reference: public System.Single penaltyPositionOffset
    [[deprecated("Use field access instead!")]] float& dyn_penaltyPositionOffset();
    // Get instance field reference: public System.Boolean penaltyPosition
    [[deprecated("Use field access instead!")]] bool& dyn_penaltyPosition();
    // Get instance field reference: public System.Single penaltyPositionFactor
    [[deprecated("Use field access instead!")]] float& dyn_penaltyPositionFactor();
    // Get instance field reference: public System.Boolean penaltyAngle
    [[deprecated("Use field access instead!")]] bool& dyn_penaltyAngle();
    // Get instance field reference: public System.Single penaltyAngleFactor
    [[deprecated("Use field access instead!")]] float& dyn_penaltyAngleFactor();
    // Get instance field reference: public System.Single penaltyAnglePower
    [[deprecated("Use field access instead!")]] float& dyn_penaltyAnglePower();
    // Get instance field reference: private UnityEngine.Vector2 <size>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$size$k__BackingField();
    // Get instance field reference: public readonly System.Int32[] neighbourOffsets
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_neighbourOffsets();
    // Get instance field reference: public readonly System.UInt32[] neighbourCosts
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_neighbourCosts();
    // Get instance field reference: public readonly System.Int32[] neighbourXOffsets
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_neighbourXOffsets();
    // Get instance field reference: public readonly System.Int32[] neighbourZOffsets
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_neighbourZOffsets();
    // Get instance field reference: private UnityEngine.Matrix4x4 <boundsMatrix>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_$boundsMatrix$k__BackingField();
    // Get instance field reference: public Pathfinding.GridNode[] nodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::GridNode*>& dyn_nodes();
    // private System.Void RemoveGridGraphFromStatic()
    // Offset: 0x1C0E284
    void RemoveGridGraphFromStatic();
    // public System.Boolean get_uniformWidthDepthGrid()
    // Offset: 0x1C0E5A8
    bool get_uniformWidthDepthGrid();
    // public System.Boolean get_useRaycastNormal()
    // Offset: 0x1C0E690
    bool get_useRaycastNormal();
    // public UnityEngine.Vector2 get_size()
    // Offset: 0x1C0E71C
    ::UnityEngine::Vector2 get_size();
    // protected System.Void set_size(UnityEngine.Vector2 value)
    // Offset: 0x1C0E728
    void set_size(::UnityEngine::Vector2 value);
    // public UnityEngine.Matrix4x4 get_boundsMatrix()
    // Offset: 0x1C0E734
    ::UnityEngine::Matrix4x4 get_boundsMatrix();
    // protected System.Void set_boundsMatrix(UnityEngine.Matrix4x4 value)
    // Offset: 0x1C0E758
    void set_boundsMatrix(::UnityEngine::Matrix4x4 value);
    // public System.Void RelocateNodes(UnityEngine.Vector3 center, UnityEngine.Quaternion rotation, System.Single nodeSize, System.Single aspectRatio, System.Single isometricAngle)
    // Offset: 0x1C0E96C
    void RelocateNodes(::UnityEngine::Vector3 center, ::UnityEngine::Quaternion rotation, float nodeSize, float aspectRatio, float isometricAngle);
    // public Pathfinding.Int3 GraphPointToWorld(System.Int32 x, System.Int32 z, System.Single height)
    // Offset: 0x1C0EB00
    ::Pathfinding::Int3 GraphPointToWorld(int x, int z, float height);
    // public System.Int32 get_Width()
    // Offset: 0x1C0EDE0
    int get_Width();
    // public System.Void set_Width(System.Int32 value)
    // Offset: 0x1C0EDE8
    void set_Width(int value);
    // public System.Int32 get_Depth()
    // Offset: 0x1C0EDF0
    int get_Depth();
    // public System.Void set_Depth(System.Int32 value)
    // Offset: 0x1C0EDF8
    void set_Depth(int value);
    // public System.UInt32 GetConnectionCost(System.Int32 dir)
    // Offset: 0x1C0EE00
    uint GetConnectionCost(int dir);
    // public Pathfinding.GridNode GetNodeConnection(Pathfinding.GridNode node, System.Int32 dir)
    // Offset: 0x1C0EE54
    ::Pathfinding::GridNode* GetNodeConnection(::Pathfinding::GridNode* node, int dir);
    // public System.Boolean HasNodeConnection(Pathfinding.GridNode node, System.Int32 dir)
    // Offset: 0x1C0F13C
    bool HasNodeConnection(::Pathfinding::GridNode* node, int dir);
    // public System.Void SetNodeConnection(Pathfinding.GridNode node, System.Int32 dir, System.Boolean value)
    // Offset: 0x1C0F2FC
    void SetNodeConnection(::Pathfinding::GridNode* node, int dir, bool value);
    // private Pathfinding.GridNode GetNodeConnection(System.Int32 index, System.Int32 x, System.Int32 z, System.Int32 dir)
    // Offset: 0x1C0EF8C
    ::Pathfinding::GridNode* GetNodeConnection(int index, int x, int z, int dir);
    // public System.Void SetNodeConnection(System.Int32 index, System.Int32 x, System.Int32 z, System.Int32 dir, System.Boolean value)
    // Offset: 0x1C0F348
    void SetNodeConnection(int index, int x, int z, int dir, bool value);
    // public System.Boolean HasNodeConnection(System.Int32 index, System.Int32 x, System.Int32 z, System.Int32 dir)
    // Offset: 0x1C0F1C4
    bool HasNodeConnection(int index, int x, int z, int dir);
    // public System.Void UpdateSizeFromWidthDepth()
    // Offset: 0x1C0EA5C
    void UpdateSizeFromWidthDepth();
    // public System.Void GenerateMatrix()
    // Offset: 0x1C0F438
    void GenerateMatrix();
    // public System.Void SetUpOffsetsAndCosts()
    // Offset: 0x1C110B0
    void SetUpOffsetsAndCosts();
    // public System.Void UpdateNodePositionCollision(Pathfinding.GridNode node, System.Int32 x, System.Int32 z, System.Boolean resetPenalty)
    // Offset: 0x1C11D78
    void UpdateNodePositionCollision(::Pathfinding::GridNode* node, int x, int z, bool resetPenalty);
    // public System.Void ErodeWalkableArea()
    // Offset: 0x1C121BC
    void ErodeWalkableArea();
    // private System.Boolean ErosionAnyFalseConnections(Pathfinding.GridNode node)
    // Offset: 0x1C121D8
    bool ErosionAnyFalseConnections(::Pathfinding::GridNode* node);
    // public System.Void ErodeWalkableArea(System.Int32 xmin, System.Int32 zmin, System.Int32 xmax, System.Int32 zmax)
    // Offset: 0x1C122E8
    void ErodeWalkableArea(int xmin, int zmin, int xmax, int zmax);
    // public System.Boolean IsValidConnection(Pathfinding.GridNode n1, Pathfinding.GridNode n2)
    // Offset: 0x1C129C8
    bool IsValidConnection(::Pathfinding::GridNode* n1, ::Pathfinding::GridNode* n2);
    // static public System.Void CalculateConnections(Pathfinding.GridNode node)
    // Offset: 0x1C12AF8
    static void CalculateConnections(::Pathfinding::GridNode* node);
    // public System.Void CalculateConnections(Pathfinding.GridNode[] nodes, System.Int32 x, System.Int32 z, Pathfinding.GridNode node)
    // Offset: 0x1C12C04
    void CalculateConnections(::ArrayW<::Pathfinding::GridNode*> nodes, int x, int z, ::Pathfinding::GridNode* node);
    // public System.Void CalculateConnections(System.Int32 x, System.Int32 z, Pathfinding.GridNode node)
    // Offset: 0x1C12C24
    void CalculateConnections(int x, int z, ::Pathfinding::GridNode* node);
    // public System.Void OnPostScan(AstarPath script)
    // Offset: 0x1C13350
    void OnPostScan(::GlobalNamespace::AstarPath* script);
    // static protected System.Void GetBoundsMinMax(UnityEngine.Bounds b, UnityEngine.Matrix4x4 matrix, out UnityEngine.Vector3 min, out UnityEngine.Vector3 max)
    // Offset: 0x1C13B1C
    static void GetBoundsMinMax(::UnityEngine::Bounds b, ::UnityEngine::Matrix4x4 matrix, ByRef<::UnityEngine::Vector3> min, ByRef<::UnityEngine::Vector3> max);
    // public System.Collections.Generic.List`1<Pathfinding.GraphNode> GetNodesInArea(UnityEngine.Bounds b)
    // Offset: 0x1C142C0
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* GetNodesInArea(::UnityEngine::Bounds b);
    // public System.Collections.Generic.List`1<Pathfinding.GraphNode> GetNodesInArea(Pathfinding.GraphUpdateShape shape)
    // Offset: 0x1C14674
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* GetNodesInArea(::Pathfinding::GraphUpdateShape* shape);
    // private System.Collections.Generic.List`1<Pathfinding.GraphNode> GetNodesInArea(UnityEngine.Bounds b, Pathfinding.GraphUpdateShape shape)
    // Offset: 0x1C142F4
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* GetNodesInArea(::UnityEngine::Bounds b, ::Pathfinding::GraphUpdateShape* shape);
    // public Pathfinding.GraphUpdateThreading CanUpdateAsync(Pathfinding.GraphUpdateObject o)
    // Offset: 0x1C147C4
    ::Pathfinding::GraphUpdateThreading CanUpdateAsync(::Pathfinding::GraphUpdateObject* o);
    // public System.Void UpdateAreaInit(Pathfinding.GraphUpdateObject o)
    // Offset: 0x1C147CC
    void UpdateAreaInit(::Pathfinding::GraphUpdateObject* o);
    // public System.Void UpdateArea(Pathfinding.GraphUpdateObject o)
    // Offset: 0x1C147D0
    void UpdateArea(::Pathfinding::GraphUpdateObject* o);
    // public System.Boolean CheckConnection(Pathfinding.GridNode node, System.Int32 dir)
    // Offset: 0x1C15830
    bool CheckConnection(::Pathfinding::GridNode* node, int dir);
    // static private System.Void .cctor()
    // Offset: 0x1C16550
    static void _cctor();
    // public override System.Void OnDestroy()
    // Offset: 0x1C0E16C
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::OnDestroy()
    void OnDestroy();
    // public override System.Int32 CountNodes()
    // Offset: 0x1C0E5B0
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Int32 NavGraph::CountNodes()
    int CountNodes();
    // public override System.Void GetNodes(Pathfinding.GraphNodeDelegateCancelable del)
    // Offset: 0x1C0E5DC
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::GetNodes(Pathfinding.GraphNodeDelegateCancelable del)
    void GetNodes(::Pathfinding::GraphNodeDelegateCancelable* del);
    // public System.Void .ctor()
    // Offset: 0x1C0E76C
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GridGraph* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::GridGraph::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GridGraph*, creationType>()));
    }
    // public override Pathfinding.NNInfo GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, Pathfinding.GraphNode hint)
    // Offset: 0x1C0FBD0
    // Implemented from: Pathfinding.NavGraph
    // Base method: Pathfinding.NNInfo NavGraph::GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, Pathfinding.GraphNode hint)
    ::Pathfinding::NNInfo GetNearest(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint, ::Pathfinding::GraphNode* hint);
    // public override Pathfinding.NNInfo GetNearestForce(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint)
    // Offset: 0x1C0FF1C
    // Implemented from: Pathfinding.NavGraph
    // Base method: Pathfinding.NNInfo NavGraph::GetNearestForce(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint)
    ::Pathfinding::NNInfo GetNearestForce(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint);
    // public override System.Void ScanInternal(Pathfinding.OnScanStatus statusCallback)
    // Offset: 0x1C117D8
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::ScanInternal(Pathfinding.OnScanStatus statusCallback)
    void ScanInternal(::Pathfinding::OnScanStatus* statusCallback);
    // public override System.Void OnDrawGizmos(System.Boolean drawNodes)
    // Offset: 0x1C134BC
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::OnDrawGizmos(System.Boolean drawNodes)
    void OnDrawGizmos(bool drawNodes);
    // public override System.Void SerializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x1C15A28
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::SerializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    void SerializeExtraInfo(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public override System.Void DeserializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x1C15B64
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::DeserializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    void DeserializeExtraInfo(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public override System.Void DeserializeSettingsCompatibility(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x1C15D28
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::DeserializeSettingsCompatibility(Pathfinding.Serialization.GraphSerializationContext ctx)
    void DeserializeSettingsCompatibility(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public override System.Void PostDeserialization()
    // Offset: 0x1C16318
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::PostDeserialization()
    void PostDeserialization();
  }; // Pathfinding.GridGraph
  #pragma pack(pop)
  static check_size<sizeof(GridGraph), 432 + sizeof(::ArrayW<::Pathfinding::GridNode*>)> __Pathfinding_GridGraphSizeCheck;
  static_assert(sizeof(GridGraph) == 0x1B8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::GridGraph::RemoveGridGraphFromStatic
// Il2CppName: RemoveGridGraphFromStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::RemoveGridGraphFromStatic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "RemoveGridGraphFromStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::get_uniformWidthDepthGrid
// Il2CppName: get_uniformWidthDepthGrid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::get_uniformWidthDepthGrid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "get_uniformWidthDepthGrid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::get_useRaycastNormal
// Il2CppName: get_useRaycastNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::get_useRaycastNormal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "get_useRaycastNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::get_size
// Il2CppName: get_size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::get_size)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "get_size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::set_size
// Il2CppName: set_size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::UnityEngine::Vector2)>(&Pathfinding::GridGraph::set_size)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "set_size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::get_boundsMatrix
// Il2CppName: get_boundsMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::get_boundsMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "get_boundsMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::set_boundsMatrix
// Il2CppName: set_boundsMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::UnityEngine::Matrix4x4)>(&Pathfinding::GridGraph::set_boundsMatrix)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "set_boundsMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::RelocateNodes
// Il2CppName: RelocateNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, float, float)>(&Pathfinding::GridGraph::RelocateNodes)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* nodeSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* aspectRatio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isometricAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "RelocateNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotation, nodeSize, aspectRatio, isometricAngle});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GraphPointToWorld
// Il2CppName: GraphPointToWorld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Int3 (Pathfinding::GridGraph::*)(int, int, float)>(&Pathfinding::GridGraph::GraphPointToWorld)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GraphPointToWorld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, height});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::get_Width
// Il2CppName: get_Width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::get_Width)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "get_Width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::set_Width
// Il2CppName: set_Width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(int)>(&Pathfinding::GridGraph::set_Width)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "set_Width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::get_Depth
// Il2CppName: get_Depth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::get_Depth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "get_Depth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::set_Depth
// Il2CppName: set_Depth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(int)>(&Pathfinding::GridGraph::set_Depth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "set_Depth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetConnectionCost
// Il2CppName: GetConnectionCost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::GridGraph::*)(int)>(&Pathfinding::GridGraph::GetConnectionCost)> {
  static const MethodInfo* get() {
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetConnectionCost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dir});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodeConnection
// Il2CppName: GetNodeConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GridNode* (Pathfinding::GridGraph::*)(::Pathfinding::GridNode*, int)>(&Pathfinding::GridGraph::GetNodeConnection)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodeConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, dir});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::HasNodeConnection
// Il2CppName: HasNodeConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::Pathfinding::GridNode*, int)>(&Pathfinding::GridGraph::HasNodeConnection)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "HasNodeConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, dir});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::SetNodeConnection
// Il2CppName: SetNodeConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::GridNode*, int, bool)>(&Pathfinding::GridGraph::SetNodeConnection)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "SetNodeConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, dir, value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodeConnection
// Il2CppName: GetNodeConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GridNode* (Pathfinding::GridGraph::*)(int, int, int, int)>(&Pathfinding::GridGraph::GetNodeConnection)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodeConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, x, z, dir});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::SetNodeConnection
// Il2CppName: SetNodeConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(int, int, int, int, bool)>(&Pathfinding::GridGraph::SetNodeConnection)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "SetNodeConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, x, z, dir, value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::HasNodeConnection
// Il2CppName: HasNodeConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(int, int, int, int)>(&Pathfinding::GridGraph::HasNodeConnection)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "HasNodeConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, x, z, dir});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::UpdateSizeFromWidthDepth
// Il2CppName: UpdateSizeFromWidthDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::UpdateSizeFromWidthDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "UpdateSizeFromWidthDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GenerateMatrix
// Il2CppName: GenerateMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::GenerateMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GenerateMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::SetUpOffsetsAndCosts
// Il2CppName: SetUpOffsetsAndCosts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::SetUpOffsetsAndCosts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "SetUpOffsetsAndCosts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::UpdateNodePositionCollision
// Il2CppName: UpdateNodePositionCollision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::GridNode*, int, int, bool)>(&Pathfinding::GridGraph::UpdateNodePositionCollision)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* resetPenalty = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "UpdateNodePositionCollision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, x, z, resetPenalty});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::ErodeWalkableArea
// Il2CppName: ErodeWalkableArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::ErodeWalkableArea)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "ErodeWalkableArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::ErosionAnyFalseConnections
// Il2CppName: ErosionAnyFalseConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::Pathfinding::GridNode*)>(&Pathfinding::GridGraph::ErosionAnyFalseConnections)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "ErosionAnyFalseConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::ErodeWalkableArea
// Il2CppName: ErodeWalkableArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(int, int, int, int)>(&Pathfinding::GridGraph::ErodeWalkableArea)> {
  static const MethodInfo* get() {
    static auto* xmin = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* zmin = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* xmax = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* zmax = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "ErodeWalkableArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xmin, zmin, xmax, zmax});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::IsValidConnection
// Il2CppName: IsValidConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::Pathfinding::GridNode*, ::Pathfinding::GridNode*)>(&Pathfinding::GridGraph::IsValidConnection)> {
  static const MethodInfo* get() {
    static auto* n1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    static auto* n2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "IsValidConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n1, n2});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CalculateConnections
// Il2CppName: CalculateConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::GridNode*)>(&Pathfinding::GridGraph::CalculateConnections)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CalculateConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CalculateConnections
// Il2CppName: CalculateConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::ArrayW<::Pathfinding::GridNode*>, int, int, ::Pathfinding::GridNode*)>(&Pathfinding::GridGraph::CalculateConnections)> {
  static const MethodInfo* get() {
    static auto* nodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode"), 1)->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CalculateConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodes, x, z, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CalculateConnections
// Il2CppName: CalculateConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(int, int, ::Pathfinding::GridNode*)>(&Pathfinding::GridGraph::CalculateConnections)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CalculateConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, z, node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::OnPostScan
// Il2CppName: OnPostScan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::GlobalNamespace::AstarPath*)>(&Pathfinding::GridGraph::OnPostScan)> {
  static const MethodInfo* get() {
    static auto* script = &::il2cpp_utils::GetClassFromName("", "AstarPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "OnPostScan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{script});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetBoundsMinMax
// Il2CppName: GetBoundsMinMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Bounds, ::UnityEngine::Matrix4x4, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&Pathfinding::GridGraph::GetBoundsMinMax)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetBoundsMinMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b, matrix, min, max});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodesInArea
// Il2CppName: GetNodesInArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* (Pathfinding::GridGraph::*)(::UnityEngine::Bounds)>(&Pathfinding::GridGraph::GetNodesInArea)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodesInArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodesInArea
// Il2CppName: GetNodesInArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* (Pathfinding::GridGraph::*)(::Pathfinding::GraphUpdateShape*)>(&Pathfinding::GridGraph::GetNodesInArea)> {
  static const MethodInfo* get() {
    static auto* shape = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateShape")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodesInArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shape});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodesInArea
// Il2CppName: GetNodesInArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* (Pathfinding::GridGraph::*)(::UnityEngine::Bounds, ::Pathfinding::GraphUpdateShape*)>(&Pathfinding::GridGraph::GetNodesInArea)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* shape = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateShape")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodesInArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b, shape});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CanUpdateAsync
// Il2CppName: CanUpdateAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphUpdateThreading (Pathfinding::GridGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::GridGraph::CanUpdateAsync)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CanUpdateAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::UpdateAreaInit
// Il2CppName: UpdateAreaInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::GridGraph::UpdateAreaInit)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "UpdateAreaInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::UpdateArea
// Il2CppName: UpdateArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::GridGraph::UpdateArea)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "UpdateArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CheckConnection
// Il2CppName: CheckConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridGraph::*)(::Pathfinding::GridNode*, int)>(&Pathfinding::GridGraph::CheckConnection)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GridNode")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CheckConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, dir});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::GridGraph::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::CountNodes
// Il2CppName: CountNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::CountNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "CountNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNodes
// Il2CppName: GetNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::GraphNodeDelegateCancelable*)>(&Pathfinding::GridGraph::GetNodes)> {
  static const MethodInfo* get() {
    static auto* del = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNodeDelegateCancelable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{del});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNearest
// Il2CppName: GetNearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfo (Pathfinding::GridGraph::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*, ::Pathfinding::GraphNode*)>(&Pathfinding::GridGraph::GetNearest)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint, hint});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::GetNearestForce
// Il2CppName: GetNearestForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfo (Pathfinding::GridGraph::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*)>(&Pathfinding::GridGraph::GetNearestForce)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "GetNearestForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::ScanInternal
// Il2CppName: ScanInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::OnScanStatus*)>(&Pathfinding::GridGraph::ScanInternal)> {
  static const MethodInfo* get() {
    static auto* statusCallback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnScanStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "ScanInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statusCallback});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(bool)>(&Pathfinding::GridGraph::OnDrawGizmos)> {
  static const MethodInfo* get() {
    static auto* drawNodes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{drawNodes});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::SerializeExtraInfo
// Il2CppName: SerializeExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::GridGraph::SerializeExtraInfo)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "SerializeExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::DeserializeExtraInfo
// Il2CppName: DeserializeExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::GridGraph::DeserializeExtraInfo)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "DeserializeExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::DeserializeSettingsCompatibility
// Il2CppName: DeserializeSettingsCompatibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::GridGraph::DeserializeSettingsCompatibility)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "DeserializeSettingsCompatibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridGraph::PostDeserialization
// Il2CppName: PostDeserialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridGraph::*)()>(&Pathfinding::GridGraph::PostDeserialization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridGraph*), "PostDeserialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
