// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.PointGraph
#include "Pathfinding/PointGraph.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Pathfinding.Int3
#include "Pathfinding/Int3.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PointNode
  class PointNode;
  // Forward declaring type: NNConstraint
  class NNConstraint;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::PointGraph::GetNearestHelper, "Pathfinding", "PointGraph/GetNearestHelper");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.PointGraph/GetNearestHelper
  // [TokenAttribute] Offset: FFFFFFFF
  struct PointGraph::GetNearestHelper/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 position
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single minDist
    // Size: 0x4
    // Offset: 0xC
    float minDist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minConstDist
    // Size: 0x4
    // Offset: 0x10
    float minConstDist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxDistSqr
    // Size: 0x4
    // Offset: 0x14
    float maxDistSqr;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.PointNode minNode
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::PointNode* minNode;
    // Field size check
    static_assert(sizeof(::Pathfinding::PointNode*) == 0x8);
    // public Pathfinding.PointNode minConstNode
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::PointNode* minConstNode;
    // Field size check
    static_assert(sizeof(::Pathfinding::PointNode*) == 0x8);
    // private Pathfinding.NNConstraint constraint
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::NNConstraint* constraint;
    // Field size check
    static_assert(sizeof(::Pathfinding::NNConstraint*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<Pathfinding.Int3,Pathfinding.PointNode> nodeLookup
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<::Pathfinding::Int3, ::Pathfinding::PointNode*>* nodeLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Pathfinding::Int3, ::Pathfinding::PointNode*>*) == 0x8);
    public:
    // Creating value type constructor for type: GetNearestHelper
    constexpr GetNearestHelper(::UnityEngine::Vector3 position_ = {}, float minDist_ = {}, float minConstDist_ = {}, float maxDistSqr_ = {}, ::Pathfinding::PointNode* minNode_ = {}, ::Pathfinding::PointNode* minConstNode_ = {}, ::Pathfinding::NNConstraint* constraint_ = {}, ::System::Collections::Generic::Dictionary_2<::Pathfinding::Int3, ::Pathfinding::PointNode*>* nodeLookup_ = {}) noexcept : position{position_}, minDist{minDist_}, minConstDist{minConstDist_}, maxDistSqr{maxDistSqr_}, minNode{minNode_}, minConstNode{minConstNode_}, constraint{constraint_}, nodeLookup{nodeLookup_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
    // Get instance field reference: public System.Single minDist
    [[deprecated("Use field access instead!")]] float& dyn_minDist();
    // Get instance field reference: public System.Single minConstDist
    [[deprecated("Use field access instead!")]] float& dyn_minConstDist();
    // Get instance field reference: public System.Single maxDistSqr
    [[deprecated("Use field access instead!")]] float& dyn_maxDistSqr();
    // Get instance field reference: public Pathfinding.PointNode minNode
    [[deprecated("Use field access instead!")]] ::Pathfinding::PointNode*& dyn_minNode();
    // Get instance field reference: public Pathfinding.PointNode minConstNode
    [[deprecated("Use field access instead!")]] ::Pathfinding::PointNode*& dyn_minConstNode();
    // Get instance field reference: private Pathfinding.NNConstraint constraint
    [[deprecated("Use field access instead!")]] ::Pathfinding::NNConstraint*& dyn_constraint();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Pathfinding.Int3,Pathfinding.PointNode> nodeLookup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Pathfinding::Int3, ::Pathfinding::PointNode*>*& dyn_nodeLookup();
    // public System.Void .ctor(UnityEngine.Vector3 position, System.Single maxDistSqr, Pathfinding.NNConstraint constraint, System.Collections.Generic.Dictionary`2<Pathfinding.Int3,Pathfinding.PointNode> nodeLookup)
    // Offset: 0xBA2BC8
    GetNearestHelper(::UnityEngine::Vector3 position, float maxDistSqr, ::Pathfinding::NNConstraint* constraint, ::System::Collections::Generic::Dictionary_2<::Pathfinding::Int3, ::Pathfinding::PointNode*>* nodeLookup);
    // public System.Void Search(Pathfinding.Int3 p)
    // Offset: 0xBA2BE8
    void Search(::Pathfinding::Int3 p);
  }; // Pathfinding.PointGraph/GetNearestHelper
  #pragma pack(pop)
  static check_size<sizeof(PointGraph::GetNearestHelper), 48 + sizeof(::System::Collections::Generic::Dictionary_2<::Pathfinding::Int3, ::Pathfinding::PointNode*>*)> __Pathfinding_PointGraph_GetNearestHelperSizeCheck;
  static_assert(sizeof(PointGraph::GetNearestHelper) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::PointGraph::GetNearestHelper::GetNearestHelper
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::PointGraph::GetNearestHelper::Search
// Il2CppName: Search
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PointGraph::GetNearestHelper::*)(::Pathfinding::Int3)>(&Pathfinding::PointGraph::GetNearestHelper::Search)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PointGraph::GetNearestHelper), "Search", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
