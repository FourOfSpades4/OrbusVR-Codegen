// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.PathState
#include "Pathfinding/PathState.hpp"
// Including type: Pathfinding.PathCompleteState
#include "Pathfinding/PathCompleteState.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: Pathfinding.Heuristic
#include "Pathfinding/Heuristic.hpp"
// Including type: Pathfinding.Int3
#include "Pathfinding/Int3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PathHandler
  class PathHandler;
  // Forward declaring type: OnPathDelegate
  class OnPathDelegate;
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: PathNode
  class PathNode;
  // Forward declaring type: NNConstraint
  class NNConstraint;
  // Forward declaring type: PathLog
  struct PathLog;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Path);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Path*, "Pathfinding", "Path");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0xD9
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Path
  // [TokenAttribute] Offset: FFFFFFFF
  class Path : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::Path::$WaitForPath$d__53
    class $WaitForPath$d__53;
    public:
    // [CompilerGeneratedAttribute] Offset: 0xAE5BA4
    // private Pathfinding.PathHandler <pathHandler>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::PathHandler* pathHandler;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathHandler*) == 0x8);
    // public Pathfinding.OnPathDelegate callback
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::OnPathDelegate* callback;
    // Field size check
    static_assert(sizeof(::Pathfinding::OnPathDelegate*) == 0x8);
    // public Pathfinding.OnPathDelegate immediateCallback
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::OnPathDelegate* immediateCallback;
    // Field size check
    static_assert(sizeof(::Pathfinding::OnPathDelegate*) == 0x8);
    // private Pathfinding.PathState state
    // Size: 0x4
    // Offset: 0x28
    ::Pathfinding::PathState state;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathState) == 0x4);
    // Padding between fields: state and: stateLock
    char __padding3[0x4] = {};
    // private System.Object stateLock
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppObject* stateLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private Pathfinding.PathCompleteState pathCompleteState
    // Size: 0x4
    // Offset: 0x38
    ::Pathfinding::PathCompleteState pathCompleteState;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathCompleteState) == 0x4);
    // Padding between fields: pathCompleteState and: errorLog
    char __padding5[0x4] = {};
    // private System.String _errorLog
    // Size: 0x8
    // Offset: 0x40
    ::StringW errorLog;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.List`1<Pathfinding.GraphNode> path
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* path;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> vectorPath
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* vectorPath;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // protected System.Single maxFrameTime
    // Size: 0x4
    // Offset: 0x58
    float maxFrameTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: maxFrameTime and: currentR
    char __padding9[0x4] = {};
    // protected Pathfinding.PathNode currentR
    // Size: 0x8
    // Offset: 0x60
    ::Pathfinding::PathNode* currentR;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathNode*) == 0x8);
    // public System.Single duration
    // Size: 0x4
    // Offset: 0x68
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 searchIterations
    // Size: 0x4
    // Offset: 0x6C
    int searchIterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 searchedNodes
    // Size: 0x4
    // Offset: 0x70
    int searchedNodes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: searchedNodes and: callTime
    char __padding13[0x4] = {};
    // [CompilerGeneratedAttribute] Offset: 0xAE5BB4
    // private System.DateTime <callTime>k__BackingField
    // Size: 0x8
    // Offset: 0x78
    ::System::DateTime callTime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // System.Boolean pooled
    // Size: 0x1
    // Offset: 0x80
    bool pooled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean hasBeenReset
    // Size: 0x1
    // Offset: 0x81
    bool hasBeenReset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasBeenReset and: nnConstraint
    char __padding16[0x6] = {};
    // public Pathfinding.NNConstraint nnConstraint
    // Size: 0x8
    // Offset: 0x88
    ::Pathfinding::NNConstraint* nnConstraint;
    // Field size check
    static_assert(sizeof(::Pathfinding::NNConstraint*) == 0x8);
    // Pathfinding.Path next
    // Size: 0x8
    // Offset: 0x90
    ::Pathfinding::Path* next;
    // Field size check
    static_assert(sizeof(::Pathfinding::Path*) == 0x8);
    // public Pathfinding.Heuristic heuristic
    // Size: 0x4
    // Offset: 0x98
    ::Pathfinding::Heuristic heuristic;
    // Field size check
    static_assert(sizeof(::Pathfinding::Heuristic) == 0x4);
    // public System.Single heuristicScale
    // Size: 0x4
    // Offset: 0x9C
    float heuristicScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAE5BC4
    // private System.UInt16 <pathID>k__BackingField
    // Size: 0x2
    // Offset: 0xA0
    uint16_t pathID;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: pathID and: hTargetNode
    char __padding21[0x6] = {};
    // protected Pathfinding.GraphNode hTargetNode
    // Size: 0x8
    // Offset: 0xA8
    ::Pathfinding::GraphNode* hTargetNode;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    // protected Pathfinding.Int3 hTarget
    // Size: 0xC
    // Offset: 0xB0
    ::Pathfinding::Int3 hTarget;
    // Field size check
    static_assert(sizeof(::Pathfinding::Int3) == 0xC);
    // public System.Int32 enabledTags
    // Size: 0x4
    // Offset: 0xBC
    int enabledTags;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32[] internalTagPenalties
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<int> internalTagPenalties;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // protected System.Int32[] manualTagPenalties
    // Size: 0x8
    // Offset: 0xC8
    ::ArrayW<int> manualTagPenalties;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Collections.Generic.List`1<System.Object> claimed
    // Size: 0x8
    // Offset: 0xD0
    ::System::Collections::Generic::List_1<::Il2CppObject*>* claimed;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Il2CppObject*>*) == 0x8);
    // private System.Boolean releasedNotSilent
    // Size: 0x1
    // Offset: 0xD8
    bool releasedNotSilent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly System.Int32[] ZeroTagPenalties
    static ::ArrayW<int> _get_ZeroTagPenalties();
    // Set static field: static private readonly System.Int32[] ZeroTagPenalties
    static void _set_ZeroTagPenalties(::ArrayW<int> value);
    // Get instance field reference: private Pathfinding.PathHandler <pathHandler>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathHandler*& dyn_$pathHandler$k__BackingField();
    // Get instance field reference: public Pathfinding.OnPathDelegate callback
    [[deprecated("Use field access instead!")]] ::Pathfinding::OnPathDelegate*& dyn_callback();
    // Get instance field reference: public Pathfinding.OnPathDelegate immediateCallback
    [[deprecated("Use field access instead!")]] ::Pathfinding::OnPathDelegate*& dyn_immediateCallback();
    // Get instance field reference: private Pathfinding.PathState state
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathState& dyn_state();
    // Get instance field reference: private System.Object stateLock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_stateLock();
    // Get instance field reference: private Pathfinding.PathCompleteState pathCompleteState
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathCompleteState& dyn_pathCompleteState();
    // Get instance field reference: private System.String _errorLog
    [[deprecated("Use field access instead!")]] ::StringW& dyn__errorLog();
    // Get instance field reference: public System.Collections.Generic.List`1<Pathfinding.GraphNode> path
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*& dyn_path();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector3> vectorPath
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_vectorPath();
    // Get instance field reference: protected System.Single maxFrameTime
    [[deprecated("Use field access instead!")]] float& dyn_maxFrameTime();
    // Get instance field reference: protected Pathfinding.PathNode currentR
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathNode*& dyn_currentR();
    // Get instance field reference: public System.Single duration
    [[deprecated("Use field access instead!")]] float& dyn_duration();
    // Get instance field reference: public System.Int32 searchIterations
    [[deprecated("Use field access instead!")]] int& dyn_searchIterations();
    // Get instance field reference: public System.Int32 searchedNodes
    [[deprecated("Use field access instead!")]] int& dyn_searchedNodes();
    // Get instance field reference: private System.DateTime <callTime>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_$callTime$k__BackingField();
    // Get instance field reference: System.Boolean pooled
    [[deprecated("Use field access instead!")]] bool& dyn_pooled();
    // Get instance field reference: protected System.Boolean hasBeenReset
    [[deprecated("Use field access instead!")]] bool& dyn_hasBeenReset();
    // Get instance field reference: public Pathfinding.NNConstraint nnConstraint
    [[deprecated("Use field access instead!")]] ::Pathfinding::NNConstraint*& dyn_nnConstraint();
    // Get instance field reference: Pathfinding.Path next
    [[deprecated("Use field access instead!")]] ::Pathfinding::Path*& dyn_next();
    // Get instance field reference: public Pathfinding.Heuristic heuristic
    [[deprecated("Use field access instead!")]] ::Pathfinding::Heuristic& dyn_heuristic();
    // Get instance field reference: public System.Single heuristicScale
    [[deprecated("Use field access instead!")]] float& dyn_heuristicScale();
    // Get instance field reference: private System.UInt16 <pathID>k__BackingField
    [[deprecated("Use field access instead!")]] uint16_t& dyn_$pathID$k__BackingField();
    // Get instance field reference: protected Pathfinding.GraphNode hTargetNode
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_hTargetNode();
    // Get instance field reference: protected Pathfinding.Int3 hTarget
    [[deprecated("Use field access instead!")]] ::Pathfinding::Int3& dyn_hTarget();
    // Get instance field reference: public System.Int32 enabledTags
    [[deprecated("Use field access instead!")]] int& dyn_enabledTags();
    // Get instance field reference: protected System.Int32[] internalTagPenalties
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_internalTagPenalties();
    // Get instance field reference: protected System.Int32[] manualTagPenalties
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_manualTagPenalties();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Object> claimed
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Il2CppObject*>*& dyn_claimed();
    // Get instance field reference: private System.Boolean releasedNotSilent
    [[deprecated("Use field access instead!")]] bool& dyn_releasedNotSilent();
    // public Pathfinding.PathHandler get_pathHandler()
    // Offset: 0x16A9A40
    ::Pathfinding::PathHandler* get_pathHandler();
    // private System.Void set_pathHandler(Pathfinding.PathHandler value)
    // Offset: 0x16A9A48
    void set_pathHandler(::Pathfinding::PathHandler* value);
    // public Pathfinding.PathCompleteState get_CompleteState()
    // Offset: 0x16A9A50
    ::Pathfinding::PathCompleteState get_CompleteState();
    // protected System.Void set_CompleteState(Pathfinding.PathCompleteState value)
    // Offset: 0x16A9A58
    void set_CompleteState(::Pathfinding::PathCompleteState value);
    // public System.Boolean get_error()
    // Offset: 0x16A9A60
    bool get_error();
    // public System.String get_errorLog()
    // Offset: 0x16A9A70
    ::StringW get_errorLog();
    // public System.DateTime get_callTime()
    // Offset: 0x16A9A78
    ::System::DateTime get_callTime();
    // private System.Void set_callTime(System.DateTime value)
    // Offset: 0x16A9A80
    void set_callTime(::System::DateTime value);
    // System.Boolean get_recycled()
    // Offset: 0x16A9A88
    bool get_recycled();
    // System.Void set_recycled(System.Boolean value)
    // Offset: 0x16A9A90
    void set_recycled(bool value);
    // public System.UInt16 get_pathID()
    // Offset: 0x16A9A9C
    uint16_t get_pathID();
    // private System.Void set_pathID(System.UInt16 value)
    // Offset: 0x16A9AA4
    void set_pathID(uint16_t value);
    // public System.Int32[] get_tagPenalties()
    // Offset: 0x16A9AAC
    ::ArrayW<int> get_tagPenalties();
    // public System.Void set_tagPenalties(System.Int32[] value)
    // Offset: 0x16A9AB4
    void set_tagPenalties(::ArrayW<int> value);
    // public System.Boolean get_FloodingPath()
    // Offset: 0x16A9B4C
    bool get_FloodingPath();
    // public System.Single GetTotalLength()
    // Offset: 0x16A9B54
    float GetTotalLength();
    // public System.Collections.IEnumerator WaitForPath()
    // Offset: 0x16A9CCC
    ::System::Collections::IEnumerator* WaitForPath();
    // public System.UInt32 CalculateHScore(Pathfinding.GraphNode node)
    // Offset: 0x16A9D6C
    uint CalculateHScore(::Pathfinding::GraphNode* node);
    // public System.UInt32 GetTagPenalty(System.Int32 tag)
    // Offset: 0x16A9FDC
    uint GetTagPenalty(int tag);
    // public Pathfinding.Int3 GetHTarget()
    // Offset: 0x16A9FCC
    ::Pathfinding::Int3 GetHTarget();
    // public System.Boolean CanTraverse(Pathfinding.GraphNode node)
    // Offset: 0x16AA030
    bool CanTraverse(::Pathfinding::GraphNode* node);
    // public System.UInt32 GetTraversalCost(Pathfinding.GraphNode node)
    // Offset: 0x16AA0A4
    uint GetTraversalCost(::Pathfinding::GraphNode* node);
    // public System.UInt32 GetConnectionSpecialCost(Pathfinding.GraphNode a, Pathfinding.GraphNode b, System.UInt32 currentCost)
    // Offset: 0x16AA108
    uint GetConnectionSpecialCost(::Pathfinding::GraphNode* a, ::Pathfinding::GraphNode* b, uint currentCost);
    // public System.Boolean IsDone()
    // Offset: 0x16AA110
    bool IsDone();
    // public System.Void AdvanceState(Pathfinding.PathState s)
    // Offset: 0x16AA120
    void AdvanceState(::Pathfinding::PathState s);
    // public Pathfinding.PathState GetState()
    // Offset: 0x16AA210
    ::Pathfinding::PathState GetState();
    // public System.Void LogError(System.String msg)
    // Offset: 0x16AA218
    void LogError(::StringW msg);
    // public System.Void ForceLogError(System.String msg)
    // Offset: 0x16AA388
    void ForceLogError(::StringW msg);
    // public System.Void Log(System.String msg)
    // Offset: 0x16AA424
    void Log(::StringW msg);
    // public System.Void Error()
    // Offset: 0x16AA418
    void Error();
    // private System.Void ErrorCheck()
    // Offset: 0x16AA4E8
    void ErrorCheck();
    // public System.Void OnEnterPool()
    // Offset: 0x16AA5E4
    void OnEnterPool();
    // public System.Void Reset()
    // Offset: 0x16AA6A0
    void Reset();
    // protected System.Boolean HasExceededTime(System.Int32 searchedNodes, System.Int64 targetTime)
    // Offset: 0x16AA95C
    bool HasExceededTime(int searchedNodes, int64_t targetTime);
    // public System.Void Claim(System.Object o)
    // Offset: 0x16AA9E8
    void Claim(::Il2CppObject* o);
    // public System.Void ReleaseSilent(System.Object o)
    // Offset: 0x16AAB64
    void ReleaseSilent(::Il2CppObject* o);
    // public System.Void Release(System.Object o, System.Boolean silent)
    // Offset: 0x16AAB6C
    void Release(::Il2CppObject* o, bool silent);
    // protected System.Void Trace(Pathfinding.PathNode from)
    // Offset: 0x16AB030
    void Trace(::Pathfinding::PathNode* from);
    // protected System.Void DebugStringPrefix(Pathfinding.PathLog logMode, System.Text.StringBuilder text)
    // Offset: 0x16AB380
    void DebugStringPrefix(::Pathfinding::PathLog logMode, ::System::Text::StringBuilder* text);
    // protected System.Void DebugStringSuffix(Pathfinding.PathLog logMode, System.Text.StringBuilder text)
    // Offset: 0x16AB5C0
    void DebugStringSuffix(::Pathfinding::PathLog logMode, ::System::Text::StringBuilder* text);
    // public System.String DebugString(Pathfinding.PathLog logMode)
    // Offset: 0x16AB7D0
    ::StringW DebugString(::Pathfinding::PathLog logMode);
    // public System.Void ReturnPath()
    // Offset: 0x16AB8E8
    void ReturnPath();
    // System.Void PrepareBase(Pathfinding.PathHandler pathHandler)
    // Offset: 0x16AB900
    void PrepareBase(::Pathfinding::PathHandler* pathHandler);
    // public System.Void Prepare()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Prepare();
    // public System.Void Cleanup()
    // Offset: 0x16ABCF8
    void Cleanup();
    // public System.Void Initialize()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Initialize();
    // public System.Void CalculateStep(System.Int64 targetTick)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CalculateStep(int64_t targetTick);
    // protected System.Void .ctor()
    // Offset: 0x16ABCFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Path* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Path::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Path*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x16ABDB4
    static void _cctor();
  }; // Pathfinding.Path
  #pragma pack(pop)
  static check_size<sizeof(Path), 216 + sizeof(bool)> __Pathfinding_PathSizeCheck;
  static_assert(sizeof(Path) == 0xD9);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Path::get_pathHandler
// Il2CppName: get_pathHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::PathHandler* (Pathfinding::Path::*)()>(&Pathfinding::Path::get_pathHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "get_pathHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::set_pathHandler
// Il2CppName: set_pathHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(::Pathfinding::PathHandler*)>(&Pathfinding::Path::set_pathHandler)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "set_pathHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::get_CompleteState
// Il2CppName: get_CompleteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::PathCompleteState (Pathfinding::Path::*)()>(&Pathfinding::Path::get_CompleteState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "get_CompleteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::set_CompleteState
// Il2CppName: set_CompleteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(::Pathfinding::PathCompleteState)>(&Pathfinding::Path::set_CompleteState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathCompleteState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "set_CompleteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::get_error
// Il2CppName: get_error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Path::*)()>(&Pathfinding::Path::get_error)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "get_error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::get_errorLog
// Il2CppName: get_errorLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Path::*)()>(&Pathfinding::Path::get_errorLog)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "get_errorLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::get_callTime
// Il2CppName: get_callTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (Pathfinding::Path::*)()>(&Pathfinding::Path::get_callTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "get_callTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::set_callTime
// Il2CppName: set_callTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(::System::DateTime)>(&Pathfinding::Path::set_callTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "set_callTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::get_recycled
// Il2CppName: get_recycled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Path::*)()>(&Pathfinding::Path::get_recycled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "get_recycled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::set_recycled
// Il2CppName: set_recycled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(bool)>(&Pathfinding::Path::set_recycled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "set_recycled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::get_pathID
// Il2CppName: get_pathID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (Pathfinding::Path::*)()>(&Pathfinding::Path::get_pathID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "get_pathID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::set_pathID
// Il2CppName: set_pathID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(uint16_t)>(&Pathfinding::Path::set_pathID)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "set_pathID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::get_tagPenalties
// Il2CppName: get_tagPenalties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (Pathfinding::Path::*)()>(&Pathfinding::Path::get_tagPenalties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "get_tagPenalties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::set_tagPenalties
// Il2CppName: set_tagPenalties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(::ArrayW<int>)>(&Pathfinding::Path::set_tagPenalties)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "set_tagPenalties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::get_FloodingPath
// Il2CppName: get_FloodingPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Path::*)()>(&Pathfinding::Path::get_FloodingPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "get_FloodingPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::GetTotalLength
// Il2CppName: GetTotalLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::Path::*)()>(&Pathfinding::Path::GetTotalLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "GetTotalLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::WaitForPath
// Il2CppName: WaitForPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Pathfinding::Path::*)()>(&Pathfinding::Path::WaitForPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "WaitForPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::CalculateHScore
// Il2CppName: CalculateHScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::Path::*)(::Pathfinding::GraphNode*)>(&Pathfinding::Path::CalculateHScore)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "CalculateHScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::GetTagPenalty
// Il2CppName: GetTagPenalty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::Path::*)(int)>(&Pathfinding::Path::GetTagPenalty)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "GetTagPenalty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::GetHTarget
// Il2CppName: GetHTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Int3 (Pathfinding::Path::*)()>(&Pathfinding::Path::GetHTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "GetHTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::CanTraverse
// Il2CppName: CanTraverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Path::*)(::Pathfinding::GraphNode*)>(&Pathfinding::Path::CanTraverse)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "CanTraverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::GetTraversalCost
// Il2CppName: GetTraversalCost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::Path::*)(::Pathfinding::GraphNode*)>(&Pathfinding::Path::GetTraversalCost)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "GetTraversalCost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::GetConnectionSpecialCost
// Il2CppName: GetConnectionSpecialCost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::Path::*)(::Pathfinding::GraphNode*, ::Pathfinding::GraphNode*, uint)>(&Pathfinding::Path::GetConnectionSpecialCost)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* currentCost = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "GetConnectionSpecialCost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, currentCost});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::IsDone
// Il2CppName: IsDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Path::*)()>(&Pathfinding::Path::IsDone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "IsDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::AdvanceState
// Il2CppName: AdvanceState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(::Pathfinding::PathState)>(&Pathfinding::Path::AdvanceState)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "AdvanceState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::GetState
// Il2CppName: GetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::PathState (Pathfinding::Path::*)()>(&Pathfinding::Path::GetState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "GetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(::StringW)>(&Pathfinding::Path::LogError)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::ForceLogError
// Il2CppName: ForceLogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(::StringW)>(&Pathfinding::Path::ForceLogError)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "ForceLogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(::StringW)>(&Pathfinding::Path::Log)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::Error
// Il2CppName: Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)()>(&Pathfinding::Path::Error)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::ErrorCheck
// Il2CppName: ErrorCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)()>(&Pathfinding::Path::ErrorCheck)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "ErrorCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::OnEnterPool
// Il2CppName: OnEnterPool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)()>(&Pathfinding::Path::OnEnterPool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "OnEnterPool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)()>(&Pathfinding::Path::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::HasExceededTime
// Il2CppName: HasExceededTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Path::*)(int, int64_t)>(&Pathfinding::Path::HasExceededTime)> {
  static const MethodInfo* get() {
    static auto* searchedNodes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* targetTime = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "HasExceededTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{searchedNodes, targetTime});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::Claim
// Il2CppName: Claim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(::Il2CppObject*)>(&Pathfinding::Path::Claim)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "Claim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::ReleaseSilent
// Il2CppName: ReleaseSilent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(::Il2CppObject*)>(&Pathfinding::Path::ReleaseSilent)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "ReleaseSilent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(::Il2CppObject*, bool)>(&Pathfinding::Path::Release)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* silent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o, silent});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::Trace
// Il2CppName: Trace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(::Pathfinding::PathNode*)>(&Pathfinding::Path::Trace)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "Trace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::DebugStringPrefix
// Il2CppName: DebugStringPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(::Pathfinding::PathLog, ::System::Text::StringBuilder*)>(&Pathfinding::Path::DebugStringPrefix)> {
  static const MethodInfo* get() {
    static auto* logMode = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathLog")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "DebugStringPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logMode, text});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::DebugStringSuffix
// Il2CppName: DebugStringSuffix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(::Pathfinding::PathLog, ::System::Text::StringBuilder*)>(&Pathfinding::Path::DebugStringSuffix)> {
  static const MethodInfo* get() {
    static auto* logMode = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathLog")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "DebugStringSuffix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logMode, text});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::DebugString
// Il2CppName: DebugString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Path::*)(::Pathfinding::PathLog)>(&Pathfinding::Path::DebugString)> {
  static const MethodInfo* get() {
    static auto* logMode = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathLog")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "DebugString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logMode});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::ReturnPath
// Il2CppName: ReturnPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)()>(&Pathfinding::Path::ReturnPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "ReturnPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::PrepareBase
// Il2CppName: PrepareBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(::Pathfinding::PathHandler*)>(&Pathfinding::Path::PrepareBase)> {
  static const MethodInfo* get() {
    static auto* pathHandler = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "PrepareBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pathHandler});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::Prepare
// Il2CppName: Prepare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)()>(&Pathfinding::Path::Prepare)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "Prepare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)()>(&Pathfinding::Path::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)()>(&Pathfinding::Path::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::CalculateStep
// Il2CppName: CalculateStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Path::*)(int64_t)>(&Pathfinding::Path::CalculateStep)> {
  static const MethodInfo* get() {
    static auto* targetTick = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), "CalculateStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetTick});
  }
};
// Writing MetadataGetter for method: Pathfinding::Path::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Path::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::Path::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Path*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
