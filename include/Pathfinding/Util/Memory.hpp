// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueType
  class ValueType;
}
// Completed forward declares
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Forward declaring type: Memory
  class Memory;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Util::Memory);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Util::Memory*, "Pathfinding.Util", "Memory");
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Util.Memory
  // [TokenAttribute] Offset: FFFFFFFF
  class Memory : public ::Il2CppObject {
    public:
    // static public System.Void MemSet(System.Byte[] array, System.Byte value)
    // Offset: 0xE3EF0C
    static void MemSet(::ArrayW<uint8_t> array, uint8_t value);
    // static public System.Void MemSet(T[] array, T value, System.Int32 byteSize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void MemSet(::ArrayW<T> array, T value, int byteSize) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::Memory::MemSet");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Util", "Memory", "MemSet", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(byteSize)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value, byteSize);
    }
    // static public System.Void MemSet(T[] array, T value, System.Int32 totalSize, System.Int32 byteSize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void MemSet(::ArrayW<T> array, T value, int totalSize, int byteSize) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::Memory::MemSet");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding.Util", "Memory", "MemSet", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(totalSize), ::il2cpp_utils::ExtractType(byteSize)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value, totalSize, byteSize);
    }
  }; // Pathfinding.Util.Memory
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Util::Memory::MemSet
// Il2CppName: MemSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint8_t>, uint8_t)>(&Pathfinding::Util::Memory::MemSet)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Memory*), "MemSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Memory::MemSet
// Il2CppName: MemSet
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Pathfinding::Util::Memory::MemSet
// Il2CppName: MemSet
// Cannot write MetadataGetter for generic methods!
