// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Random
  class Random;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Forward declaring type: Guid
  struct Guid;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Util::Guid, "Pathfinding.Util", "Guid");
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.Util.Guid
  // [TokenAttribute] Offset: FFFFFFFF
  struct Guid/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.UInt64 _a
    // Size: 0x8
    // Offset: 0x0
    uint64_t a;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private readonly System.UInt64 _b
    // Size: 0x8
    // Offset: 0x8
    uint64_t b;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: Guid
    constexpr Guid(uint64_t a_ = {}, uint64_t b_ = {}) noexcept : a{a_}, b{b_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static private System.String hex
    static constexpr const char* hex = "0123456789ABCDEF";
    // Get static field: static private System.String hex
    static ::StringW _get_hex();
    // Set static field: static private System.String hex
    static void _set_hex(::StringW value);
    // Get static field: static public readonly Pathfinding.Util.Guid zero
    static ::Pathfinding::Util::Guid _get_zero();
    // Set static field: static public readonly Pathfinding.Util.Guid zero
    static void _set_zero(::Pathfinding::Util::Guid value);
    // Get static field: static public readonly System.String zeroString
    static ::StringW _get_zeroString();
    // Set static field: static public readonly System.String zeroString
    static void _set_zeroString(::StringW value);
    // Get static field: static private System.Random random
    static ::System::Random* _get_random();
    // Set static field: static private System.Random random
    static void _set_random(::System::Random* value);
    // Get static field: static private System.Text.StringBuilder text
    static ::System::Text::StringBuilder* _get_text();
    // Set static field: static private System.Text.StringBuilder text
    static void _set_text(::System::Text::StringBuilder* value);
    // Get instance field reference: private readonly System.UInt64 _a
    [[deprecated("Use field access instead!")]] uint64_t& dyn__a();
    // Get instance field reference: private readonly System.UInt64 _b
    [[deprecated("Use field access instead!")]] uint64_t& dyn__b();
    // public System.Void .ctor(System.Byte[] bytes)
    // Offset: 0xB93A70
    Guid(::ArrayW<uint8_t> bytes);
    // public System.Void .ctor(System.String str)
    // Offset: 0xB93A78
    Guid(::StringW str);
    // static public Pathfinding.Util.Guid Parse(System.String input)
    // Offset: 0xE3EA58
    static ::Pathfinding::Util::Guid Parse(::StringW input);
    // static private System.UInt64 SwapEndianness(System.UInt64 value)
    // Offset: 0xE3E710
    static uint64_t SwapEndianness(uint64_t value);
    // public System.Byte[] ToByteArray()
    // Offset: 0xB93A80
    ::ArrayW<uint8_t> ToByteArray();
    // static public Pathfinding.Util.Guid NewGuid()
    // Offset: 0xE3DE68
    static ::Pathfinding::Util::Guid NewGuid();
    // static private System.Void .cctor()
    // Offset: 0xE3ED8C
    static void _cctor();
    // public override System.Boolean Equals(System.Object _rhs)
    // Offset: 0xB93A88
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object _rhs)
    bool Equals(::Il2CppObject* _rhs);
    // public override System.Int32 GetHashCode()
    // Offset: 0xB93A90
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0xB93AA4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Pathfinding.Util.Guid
  #pragma pack(pop)
  static check_size<sizeof(Guid), 8 + sizeof(uint64_t)> __Pathfinding_Util_GuidSizeCheck;
  static_assert(sizeof(Guid) == 0x10);
  // static public System.Boolean op_Equality(Pathfinding.Util.Guid lhs, Pathfinding.Util.Guid rhs)
  // Offset: 0xE3ECB0
  bool operator ==(const ::Pathfinding::Util::Guid& lhs, const ::Pathfinding::Util::Guid& rhs);
  // static public System.Boolean op_Inequality(Pathfinding.Util.Guid lhs, Pathfinding.Util.Guid rhs)
  // Offset: 0xE3ECC8
  bool operator !=(const ::Pathfinding::Util::Guid& lhs, const ::Pathfinding::Util::Guid& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Util::Guid::Guid
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Util::Guid::Guid
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Util::Guid::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Util::Guid (*)(::StringW)>(&Pathfinding::Util::Guid::Parse)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Guid), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Guid::SwapEndianness
// Il2CppName: SwapEndianness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t)>(&Pathfinding::Util::Guid::SwapEndianness)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Guid), "SwapEndianness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Guid::ToByteArray
// Il2CppName: ToByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Pathfinding::Util::Guid::*)()>(&Pathfinding::Util::Guid::ToByteArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Guid), "ToByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Guid::NewGuid
// Il2CppName: NewGuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Util::Guid (*)()>(&Pathfinding::Util::Guid::NewGuid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Guid), "NewGuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Guid::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::Util::Guid::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Guid), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Guid::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Util::Guid::*)(::Il2CppObject*)>(&Pathfinding::Util::Guid::Equals)> {
  static const MethodInfo* get() {
    static auto* _rhs = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Guid), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_rhs});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Guid::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Util::Guid::*)()>(&Pathfinding::Util::Guid::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Guid), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Guid::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Util::Guid::*)()>(&Pathfinding::Util::Guid::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::Guid), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::Guid::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Pathfinding::Util::Guid::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
