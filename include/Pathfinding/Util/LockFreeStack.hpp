// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
}
// Completed forward declares
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Forward declaring type: LockFreeStack
  class LockFreeStack;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Util::LockFreeStack);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Util::LockFreeStack*, "Pathfinding.Util", "LockFreeStack");
// Type namespace: Pathfinding.Util
namespace Pathfinding::Util {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Util.LockFreeStack
  // [TokenAttribute] Offset: FFFFFFFF
  class LockFreeStack : public ::Il2CppObject {
    public:
    public:
    // public Pathfinding.Path head
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::Path* head;
    // Field size check
    static_assert(sizeof(::Pathfinding::Path*) == 0x8);
    public:
    // Creating conversion operator: operator ::Pathfinding::Path*
    constexpr operator ::Pathfinding::Path*() const noexcept {
      return head;
    }
    // Get instance field reference: public Pathfinding.Path head
    [[deprecated("Use field access instead!")]] ::Pathfinding::Path*& dyn_head();
    // public System.Void Push(Pathfinding.Path p)
    // Offset: 0xE3EE70
    void Push(::Pathfinding::Path* p);
    // public Pathfinding.Path PopAll()
    // Offset: 0xE3EEF8
    ::Pathfinding::Path* PopAll();
    // public System.Void .ctor()
    // Offset: 0xE3EF04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LockFreeStack* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Util::LockFreeStack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LockFreeStack*, creationType>()));
    }
  }; // Pathfinding.Util.LockFreeStack
  #pragma pack(pop)
  static check_size<sizeof(LockFreeStack), 16 + sizeof(::Pathfinding::Path*)> __Pathfinding_Util_LockFreeStackSizeCheck;
  static_assert(sizeof(LockFreeStack) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Util::LockFreeStack::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Util::LockFreeStack::*)(::Pathfinding::Path*)>(&Pathfinding::Util::LockFreeStack::Push)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::LockFreeStack*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::LockFreeStack::PopAll
// Il2CppName: PopAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Path* (Pathfinding::Util::LockFreeStack::*)()>(&Pathfinding::Util::LockFreeStack::PopAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Util::LockFreeStack*), "PopAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Util::LockFreeStack::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
