// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.PathUtilities
#include "Pathfinding/PathUtilities.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::PathUtilities::$$c__DisplayClass6_0);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::PathUtilities::$$c__DisplayClass6_0*, "Pathfinding", "PathUtilities/<>c__DisplayClass6_0");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.PathUtilities/<>c__DisplayClass6_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: AD8614
  class PathUtilities::$$c__DisplayClass6_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Collections.Generic.Dictionary`2<Pathfinding.GraphNode,System.Int32> map
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, int>* map;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, int>*) == 0x8);
    // public System.Int32 currentDist
    // Size: 0x4
    // Offset: 0x18
    int currentDist;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: currentDist and: result
    char __padding1[0x4] = {};
    // public System.Collections.Generic.List`1<Pathfinding.GraphNode> result
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* result;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*) == 0x8);
    // public System.Collections.Generic.Queue`1<Pathfinding.GraphNode> que
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Queue_1<::Pathfinding::GraphNode*>* que;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Pathfinding::GraphNode*>*) == 0x8);
    // public System.Int32 tagMask
    // Size: 0x4
    // Offset: 0x30
    int tagMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<Pathfinding.GraphNode,System.Int32> map
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, int>*& dyn_map();
    // Get instance field reference: public System.Int32 currentDist
    [[deprecated("Use field access instead!")]] int& dyn_currentDist();
    // Get instance field reference: public System.Collections.Generic.List`1<Pathfinding.GraphNode> result
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*& dyn_result();
    // Get instance field reference: public System.Collections.Generic.Queue`1<Pathfinding.GraphNode> que
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Pathfinding::GraphNode*>*& dyn_que();
    // Get instance field reference: public System.Int32 tagMask
    [[deprecated("Use field access instead!")]] int& dyn_tagMask();
    // public System.Void .ctor()
    // Offset: 0x16AD720
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PathUtilities::$$c__DisplayClass6_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::PathUtilities::$$c__DisplayClass6_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PathUtilities::$$c__DisplayClass6_0*, creationType>()));
    }
    // System.Void <BFS>b__0(Pathfinding.GraphNode node)
    // Offset: 0x16AF34C
    void $BFS$b__0(::Pathfinding::GraphNode* node);
    // System.Void <BFS>b__1(Pathfinding.GraphNode node)
    // Offset: 0x16AF46C
    void $BFS$b__1(::Pathfinding::GraphNode* node);
  }; // Pathfinding.PathUtilities/<>c__DisplayClass6_0
  #pragma pack(pop)
  static check_size<sizeof(PathUtilities::$$c__DisplayClass6_0), 48 + sizeof(int)> __Pathfinding_PathUtilities_$$c__DisplayClass6_0SizeCheck;
  static_assert(sizeof(PathUtilities::$$c__DisplayClass6_0) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::PathUtilities::$$c__DisplayClass6_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::PathUtilities::$$c__DisplayClass6_0::$BFS$b__0
// Il2CppName: <BFS>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathUtilities::$$c__DisplayClass6_0::*)(::Pathfinding::GraphNode*)>(&Pathfinding::PathUtilities::$$c__DisplayClass6_0::$BFS$b__0)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathUtilities::$$c__DisplayClass6_0*), "<BFS>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathUtilities::$$c__DisplayClass6_0::$BFS$b__1
// Il2CppName: <BFS>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathUtilities::$$c__DisplayClass6_0::*)(::Pathfinding::GraphNode*)>(&Pathfinding::PathUtilities::$$c__DisplayClass6_0::$BFS$b__1)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathUtilities::$$c__DisplayClass6_0*), "<BFS>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
