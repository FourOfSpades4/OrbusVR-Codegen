// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Boolean
#include "System/Boolean.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PathNode
  class PathNode;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: BinaryHeapM
  class BinaryHeapM;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::BinaryHeapM);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::BinaryHeapM*, "Pathfinding", "BinaryHeapM");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.BinaryHeapM
  // [TokenAttribute] Offset: FFFFFFFF
  class BinaryHeapM : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::BinaryHeapM::Tuple
    struct Tuple;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Pathfinding.BinaryHeapM/Tuple
    // [TokenAttribute] Offset: FFFFFFFF
    struct Tuple/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.UInt32 F
      // Size: 0x4
      // Offset: 0x0
      uint F;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // Padding between fields: F and: node
      char __padding0[0x4] = {};
      // public Pathfinding.PathNode node
      // Size: 0x8
      // Offset: 0x8
      ::Pathfinding::PathNode* node;
      // Field size check
      static_assert(sizeof(::Pathfinding::PathNode*) == 0x8);
      public:
      // Creating value type constructor for type: Tuple
      constexpr Tuple(uint F_ = {}, ::Pathfinding::PathNode* node_ = {}) noexcept : F{F_}, node{node_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.UInt32 F
      [[deprecated("Use field access instead!")]] uint& dyn_F();
      // Get instance field reference: public Pathfinding.PathNode node
      [[deprecated("Use field access instead!")]] ::Pathfinding::PathNode*& dyn_node();
      // public System.Void .ctor(System.UInt32 f, Pathfinding.PathNode node)
      // Offset: 0xBAC880
      // ABORTED: conflicts with another method.  Tuple(uint f, ::Pathfinding::PathNode* node);
    }; // Pathfinding.BinaryHeapM/Tuple
    #pragma pack(pop)
    static check_size<sizeof(BinaryHeapM::Tuple), 8 + sizeof(::Pathfinding::PathNode*)> __Pathfinding_BinaryHeapM_TupleSizeCheck;
    static_assert(sizeof(BinaryHeapM::Tuple) == 0x10);
    public:
    // public System.Int32 numberOfItems
    // Size: 0x4
    // Offset: 0x10
    int numberOfItems;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single growthFactor
    // Size: 0x4
    // Offset: 0x14
    float growthFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Pathfinding.BinaryHeapM/Tuple[] binaryHeap
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::Pathfinding::BinaryHeapM::Tuple> binaryHeap;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::BinaryHeapM::Tuple>) == 0x8);
    public:
    // static field const value: static private System.Int32 D
    static constexpr const int D = 4;
    // Get static field: static private System.Int32 D
    static int _get_D();
    // Set static field: static private System.Int32 D
    static void _set_D(int value);
    // static field const value: static private System.Boolean SortGScores
    static constexpr const bool SortGScores = true;
    // Get static field: static private System.Boolean SortGScores
    static bool _get_SortGScores();
    // Set static field: static private System.Boolean SortGScores
    static void _set_SortGScores(bool value);
    // Get instance field reference: public System.Int32 numberOfItems
    [[deprecated("Use field access instead!")]] int& dyn_numberOfItems();
    // Get instance field reference: public System.Single growthFactor
    [[deprecated("Use field access instead!")]] float& dyn_growthFactor();
    // Get instance field reference: private Pathfinding.BinaryHeapM/Tuple[] binaryHeap
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::BinaryHeapM::Tuple>& dyn_binaryHeap();
    // public System.Void .ctor(System.Int32 numberOfElements)
    // Offset: 0x1C05AE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BinaryHeapM* New_ctor(int numberOfElements) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::BinaryHeapM::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BinaryHeapM*, creationType>(numberOfElements)));
    }
    // public System.Void Clear()
    // Offset: 0x1C05B64
    void Clear();
    // Pathfinding.PathNode GetNode(System.Int32 i)
    // Offset: 0x1C05B6C
    ::Pathfinding::PathNode* GetNode(int i);
    // System.Void SetF(System.Int32 i, System.UInt32 f)
    // Offset: 0x1C05BC0
    void SetF(int i, uint f);
    // public System.Void Add(Pathfinding.PathNode node)
    // Offset: 0x1C05C20
    void Add(::Pathfinding::PathNode* node);
    // public Pathfinding.PathNode Remove()
    // Offset: 0x1C060D8
    ::Pathfinding::PathNode* Remove();
    // private System.Void Validate()
    // Offset: 0x1C0689C
    void Validate();
    // public System.Void Rebuild()
    // Offset: 0x1C06C40
    void Rebuild();
  }; // Pathfinding.BinaryHeapM
  #pragma pack(pop)
  static check_size<sizeof(BinaryHeapM), 24 + sizeof(::ArrayW<::Pathfinding::BinaryHeapM::Tuple>)> __Pathfinding_BinaryHeapMSizeCheck;
  static_assert(sizeof(BinaryHeapM) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::BinaryHeapM::Tuple, "Pathfinding", "BinaryHeapM/Tuple");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::BinaryHeapM::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::BinaryHeapM::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BinaryHeapM::*)()>(&Pathfinding::BinaryHeapM::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeapM*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeapM::GetNode
// Il2CppName: GetNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::PathNode* (Pathfinding::BinaryHeapM::*)(int)>(&Pathfinding::BinaryHeapM::GetNode)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeapM*), "GetNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeapM::SetF
// Il2CppName: SetF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BinaryHeapM::*)(int, uint)>(&Pathfinding::BinaryHeapM::SetF)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeapM*), "SetF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, f});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeapM::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BinaryHeapM::*)(::Pathfinding::PathNode*)>(&Pathfinding::BinaryHeapM::Add)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeapM*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeapM::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::PathNode* (Pathfinding::BinaryHeapM::*)()>(&Pathfinding::BinaryHeapM::Remove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeapM*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeapM::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BinaryHeapM::*)()>(&Pathfinding::BinaryHeapM::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeapM*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::BinaryHeapM::Rebuild
// Il2CppName: Rebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::BinaryHeapM::*)()>(&Pathfinding::BinaryHeapM::Rebuild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::BinaryHeapM*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
