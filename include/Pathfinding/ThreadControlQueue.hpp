// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: ThreadControlQueue
  class ThreadControlQueue;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::ThreadControlQueue);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::ThreadControlQueue*, "Pathfinding", "ThreadControlQueue");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.ThreadControlQueue
  // [TokenAttribute] Offset: FFFFFFFF
  class ThreadControlQueue : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::ThreadControlQueue::QueueTerminationException
    class QueueTerminationException;
    public:
    // private Pathfinding.Path head
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::Path* head;
    // Field size check
    static_assert(sizeof(::Pathfinding::Path*) == 0x8);
    // private Pathfinding.Path tail
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::Path* tail;
    // Field size check
    static_assert(sizeof(::Pathfinding::Path*) == 0x8);
    // private readonly System.Object lockObj
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* lockObj;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private readonly System.Int32 numReceivers
    // Size: 0x4
    // Offset: 0x28
    int numReceivers;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean blocked
    // Size: 0x1
    // Offset: 0x2C
    bool blocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: blocked and: blockedReceivers
    char __padding4[0x3] = {};
    // private System.Int32 blockedReceivers
    // Size: 0x4
    // Offset: 0x30
    int blockedReceivers;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean starving
    // Size: 0x1
    // Offset: 0x34
    bool starving;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean terminate
    // Size: 0x1
    // Offset: 0x35
    bool terminate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: terminate and: block
    char __padding7[0x2] = {};
    // private System.Threading.ManualResetEvent block
    // Size: 0x8
    // Offset: 0x38
    ::System::Threading::ManualResetEvent* block;
    // Field size check
    static_assert(sizeof(::System::Threading::ManualResetEvent*) == 0x8);
    public:
    // Get instance field reference: private Pathfinding.Path head
    [[deprecated("Use field access instead!")]] ::Pathfinding::Path*& dyn_head();
    // Get instance field reference: private Pathfinding.Path tail
    [[deprecated("Use field access instead!")]] ::Pathfinding::Path*& dyn_tail();
    // Get instance field reference: private readonly System.Object lockObj
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_lockObj();
    // Get instance field reference: private readonly System.Int32 numReceivers
    [[deprecated("Use field access instead!")]] int& dyn_numReceivers();
    // Get instance field reference: private System.Boolean blocked
    [[deprecated("Use field access instead!")]] bool& dyn_blocked();
    // Get instance field reference: private System.Int32 blockedReceivers
    [[deprecated("Use field access instead!")]] int& dyn_blockedReceivers();
    // Get instance field reference: private System.Boolean starving
    [[deprecated("Use field access instead!")]] bool& dyn_starving();
    // Get instance field reference: private System.Boolean terminate
    [[deprecated("Use field access instead!")]] bool& dyn_terminate();
    // Get instance field reference: private System.Threading.ManualResetEvent block
    [[deprecated("Use field access instead!")]] ::System::Threading::ManualResetEvent*& dyn_block();
    // public System.Void .ctor(System.Int32 numReceivers)
    // Offset: 0xE3B2F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThreadControlQueue* New_ctor(int numReceivers) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::ThreadControlQueue::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThreadControlQueue*, creationType>(numReceivers)));
    }
    // public System.Boolean get_IsEmpty()
    // Offset: 0xE3B390
    bool get_IsEmpty();
    // public System.Boolean get_IsTerminating()
    // Offset: 0xE3B3A0
    bool get_IsTerminating();
    // public System.Void Block()
    // Offset: 0xE3B3A8
    void Block();
    // public System.Void Unblock()
    // Offset: 0xE3B454
    void Unblock();
    // public System.Void Lock()
    // Offset: 0xE3B4FC
    void Lock();
    // public System.Void Unlock()
    // Offset: 0xE3B508
    void Unlock();
    // public System.Boolean get_AllReceiversBlocked()
    // Offset: 0xE3B514
    bool get_AllReceiversBlocked();
    // public System.Void PushFront(Pathfinding.Path p)
    // Offset: 0xE3B5C0
    void PushFront(::Pathfinding::Path* p);
    // public System.Void Push(Pathfinding.Path p)
    // Offset: 0xE3B6CC
    void Push(::Pathfinding::Path* p);
    // private System.Void Starving()
    // Offset: 0xE3B7C4
    void Starving();
    // public System.Void TerminateReceivers()
    // Offset: 0xE3B7FC
    void TerminateReceivers();
    // public Pathfinding.Path Pop()
    // Offset: 0xE3B8A8
    ::Pathfinding::Path* Pop();
    // public System.Void ReceiverTerminated()
    // Offset: 0xE3BD90
    void ReceiverTerminated();
    // public Pathfinding.Path PopNoBlock(System.Boolean blockedBefore)
    // Offset: 0xE3BDCC
    ::Pathfinding::Path* PopNoBlock(bool blockedBefore);
  }; // Pathfinding.ThreadControlQueue
  #pragma pack(pop)
  static check_size<sizeof(ThreadControlQueue), 56 + sizeof(::System::Threading::ManualResetEvent*)> __Pathfinding_ThreadControlQueueSizeCheck;
  static_assert(sizeof(ThreadControlQueue) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::ThreadControlQueue::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::ThreadControlQueue::get_IsEmpty
// Il2CppName: get_IsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ThreadControlQueue::*)()>(&Pathfinding::ThreadControlQueue::get_IsEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ThreadControlQueue*), "get_IsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ThreadControlQueue::get_IsTerminating
// Il2CppName: get_IsTerminating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ThreadControlQueue::*)()>(&Pathfinding::ThreadControlQueue::get_IsTerminating)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ThreadControlQueue*), "get_IsTerminating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ThreadControlQueue::Block
// Il2CppName: Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ThreadControlQueue::*)()>(&Pathfinding::ThreadControlQueue::Block)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ThreadControlQueue*), "Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ThreadControlQueue::Unblock
// Il2CppName: Unblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ThreadControlQueue::*)()>(&Pathfinding::ThreadControlQueue::Unblock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ThreadControlQueue*), "Unblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ThreadControlQueue::Lock
// Il2CppName: Lock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ThreadControlQueue::*)()>(&Pathfinding::ThreadControlQueue::Lock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ThreadControlQueue*), "Lock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ThreadControlQueue::Unlock
// Il2CppName: Unlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ThreadControlQueue::*)()>(&Pathfinding::ThreadControlQueue::Unlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ThreadControlQueue*), "Unlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ThreadControlQueue::get_AllReceiversBlocked
// Il2CppName: get_AllReceiversBlocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ThreadControlQueue::*)()>(&Pathfinding::ThreadControlQueue::get_AllReceiversBlocked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ThreadControlQueue*), "get_AllReceiversBlocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ThreadControlQueue::PushFront
// Il2CppName: PushFront
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ThreadControlQueue::*)(::Pathfinding::Path*)>(&Pathfinding::ThreadControlQueue::PushFront)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ThreadControlQueue*), "PushFront", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::ThreadControlQueue::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ThreadControlQueue::*)(::Pathfinding::Path*)>(&Pathfinding::ThreadControlQueue::Push)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ThreadControlQueue*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::ThreadControlQueue::Starving
// Il2CppName: Starving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ThreadControlQueue::*)()>(&Pathfinding::ThreadControlQueue::Starving)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ThreadControlQueue*), "Starving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ThreadControlQueue::TerminateReceivers
// Il2CppName: TerminateReceivers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ThreadControlQueue::*)()>(&Pathfinding::ThreadControlQueue::TerminateReceivers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ThreadControlQueue*), "TerminateReceivers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ThreadControlQueue::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Path* (Pathfinding::ThreadControlQueue::*)()>(&Pathfinding::ThreadControlQueue::Pop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ThreadControlQueue*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ThreadControlQueue::ReceiverTerminated
// Il2CppName: ReceiverTerminated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ThreadControlQueue::*)()>(&Pathfinding::ThreadControlQueue::ReceiverTerminated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ThreadControlQueue*), "ReceiverTerminated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ThreadControlQueue::PopNoBlock
// Il2CppName: PopNoBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Path* (Pathfinding::ThreadControlQueue::*)(bool)>(&Pathfinding::ThreadControlQueue::PopNoBlock)> {
  static const MethodInfo* get() {
    static auto* blockedBefore = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ThreadControlQueue*), "PopNoBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{blockedBefore});
  }
};
