// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphHitInfo
  struct GraphHitInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::GraphHitInfo, "Pathfinding", "GraphHitInfo");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.GraphHitInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct GraphHitInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 origin
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 origin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 point
    // Size: 0xC
    // Offset: 0xC
    ::UnityEngine::Vector3 point;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public Pathfinding.GraphNode node
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::GraphNode* node;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    // public UnityEngine.Vector3 tangentOrigin
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 tangentOrigin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 tangent
    // Size: 0xC
    // Offset: 0x2C
    ::UnityEngine::Vector3 tangent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating value type constructor for type: GraphHitInfo
    constexpr GraphHitInfo(::UnityEngine::Vector3 origin_ = {}, ::UnityEngine::Vector3 point_ = {}, ::Pathfinding::GraphNode* node_ = {}, ::UnityEngine::Vector3 tangentOrigin_ = {}, ::UnityEngine::Vector3 tangent_ = {}) noexcept : origin{origin_}, point{point_}, node{node_}, tangentOrigin{tangentOrigin_}, tangent{tangent_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 origin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_origin();
    // Get instance field reference: public UnityEngine.Vector3 point
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_point();
    // Get instance field reference: public Pathfinding.GraphNode node
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_node();
    // Get instance field reference: public UnityEngine.Vector3 tangentOrigin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_tangentOrigin();
    // Get instance field reference: public UnityEngine.Vector3 tangent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_tangent();
    // public System.Single get_distance()
    // Offset: 0xBAC8D8
    float get_distance();
    // public System.Void .ctor(UnityEngine.Vector3 point)
    // Offset: 0xBAC8E0
    GraphHitInfo(::UnityEngine::Vector3 point);
  }; // Pathfinding.GraphHitInfo
  #pragma pack(pop)
  static check_size<sizeof(GraphHitInfo), 44 + sizeof(::UnityEngine::Vector3)> __Pathfinding_GraphHitInfoSizeCheck;
  static_assert(sizeof(GraphHitInfo) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::GraphHitInfo::get_distance
// Il2CppName: get_distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Pathfinding::GraphHitInfo::*)()>(&Pathfinding::GraphHitInfo::get_distance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphHitInfo), "get_distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphHitInfo::GraphHitInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
