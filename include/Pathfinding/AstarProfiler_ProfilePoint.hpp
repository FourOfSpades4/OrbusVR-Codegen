// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.AstarProfiler
#include "Pathfinding/AstarProfiler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: Stopwatch
  class Stopwatch;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::AstarProfiler::ProfilePoint);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::AstarProfiler::ProfilePoint*, "Pathfinding", "AstarProfiler/ProfilePoint");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.AstarProfiler/ProfilePoint
  // [TokenAttribute] Offset: FFFFFFFF
  class AstarProfiler::ProfilePoint : public ::Il2CppObject {
    public:
    public:
    // public System.Diagnostics.Stopwatch watch
    // Size: 0x8
    // Offset: 0x10
    ::System::Diagnostics::Stopwatch* watch;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Stopwatch*) == 0x8);
    // public System.Int32 totalCalls
    // Size: 0x4
    // Offset: 0x18
    int totalCalls;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: totalCalls and: tmpBytes
    char __padding1[0x4] = {};
    // public System.Int64 tmpBytes
    // Size: 0x8
    // Offset: 0x20
    int64_t tmpBytes;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Int64 totalBytes
    // Size: 0x8
    // Offset: 0x28
    int64_t totalBytes;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Get instance field reference: public System.Diagnostics.Stopwatch watch
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Stopwatch*& dyn_watch();
    // Get instance field reference: public System.Int32 totalCalls
    [[deprecated("Use field access instead!")]] int& dyn_totalCalls();
    // Get instance field reference: public System.Int64 tmpBytes
    [[deprecated("Use field access instead!")]] int64_t& dyn_tmpBytes();
    // Get instance field reference: public System.Int64 totalBytes
    [[deprecated("Use field access instead!")]] int64_t& dyn_totalBytes();
    // public System.Void .ctor()
    // Offset: 0x1C03EFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AstarProfiler::ProfilePoint* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::AstarProfiler::ProfilePoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AstarProfiler::ProfilePoint*, creationType>()));
    }
  }; // Pathfinding.AstarProfiler/ProfilePoint
  #pragma pack(pop)
  static check_size<sizeof(AstarProfiler::ProfilePoint), 40 + sizeof(int64_t)> __Pathfinding_AstarProfiler_ProfilePointSizeCheck;
  static_assert(sizeof(AstarProfiler::ProfilePoint) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::AstarProfiler::ProfilePoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
