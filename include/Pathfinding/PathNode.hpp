// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PathNode
  class PathNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::PathNode);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::PathNode*, "Pathfinding", "PathNode");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.PathNode
  // [TokenAttribute] Offset: FFFFFFFF
  class PathNode : public ::Il2CppObject {
    public:
    public:
    // public Pathfinding.GraphNode node
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::GraphNode* node;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    // public Pathfinding.PathNode parent
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::PathNode* parent;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathNode*) == 0x8);
    // public System.UInt16 pathID
    // Size: 0x2
    // Offset: 0x20
    uint16_t pathID;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: pathID and: flags
    char __padding2[0x2] = {};
    // private System.UInt32 flags
    // Size: 0x4
    // Offset: 0x24
    uint flags;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 g
    // Size: 0x4
    // Offset: 0x28
    uint g;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 h
    // Size: 0x4
    // Offset: 0x2C
    uint h;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // static field const value: static private System.UInt32 CostMask
    static constexpr const uint CostMask = 268435455u;
    // Get static field: static private System.UInt32 CostMask
    static uint _get_CostMask();
    // Set static field: static private System.UInt32 CostMask
    static void _set_CostMask(uint value);
    // static field const value: static private System.Int32 Flag1Offset
    static constexpr const int Flag1Offset = 28;
    // Get static field: static private System.Int32 Flag1Offset
    static int _get_Flag1Offset();
    // Set static field: static private System.Int32 Flag1Offset
    static void _set_Flag1Offset(int value);
    // static field const value: static private System.UInt32 Flag1Mask
    static constexpr const uint Flag1Mask = 268435456u;
    // Get static field: static private System.UInt32 Flag1Mask
    static uint _get_Flag1Mask();
    // Set static field: static private System.UInt32 Flag1Mask
    static void _set_Flag1Mask(uint value);
    // static field const value: static private System.Int32 Flag2Offset
    static constexpr const int Flag2Offset = 29;
    // Get static field: static private System.Int32 Flag2Offset
    static int _get_Flag2Offset();
    // Set static field: static private System.Int32 Flag2Offset
    static void _set_Flag2Offset(int value);
    // static field const value: static private System.UInt32 Flag2Mask
    static constexpr const uint Flag2Mask = 536870912u;
    // Get static field: static private System.UInt32 Flag2Mask
    static uint _get_Flag2Mask();
    // Set static field: static private System.UInt32 Flag2Mask
    static void _set_Flag2Mask(uint value);
    // Get instance field reference: public Pathfinding.GraphNode node
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_node();
    // Get instance field reference: public Pathfinding.PathNode parent
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathNode*& dyn_parent();
    // Get instance field reference: public System.UInt16 pathID
    [[deprecated("Use field access instead!")]] uint16_t& dyn_pathID();
    // Get instance field reference: private System.UInt32 flags
    [[deprecated("Use field access instead!")]] uint& dyn_flags();
    // Get instance field reference: private System.UInt32 g
    [[deprecated("Use field access instead!")]] uint& dyn_g();
    // Get instance field reference: private System.UInt32 h
    [[deprecated("Use field access instead!")]] uint& dyn_h();
    // public System.UInt32 get_cost()
    // Offset: 0x16ACAA8
    uint get_cost();
    // public System.Void set_cost(System.UInt32 value)
    // Offset: 0x16ACAB4
    void set_cost(uint value);
    // public System.Boolean get_flag1()
    // Offset: 0x16ACAC8
    bool get_flag1();
    // public System.Void set_flag1(System.Boolean value)
    // Offset: 0x16ACAD4
    void set_flag1(bool value);
    // public System.Boolean get_flag2()
    // Offset: 0x16ACB1C
    bool get_flag2();
    // public System.Void set_flag2(System.Boolean value)
    // Offset: 0x16ACB28
    void set_flag2(bool value);
    // public System.UInt32 get_G()
    // Offset: 0x16ACB70
    uint get_G();
    // public System.Void set_G(System.UInt32 value)
    // Offset: 0x16ACB78
    void set_G(uint value);
    // public System.UInt32 get_H()
    // Offset: 0x16ACB80
    uint get_H();
    // public System.Void set_H(System.UInt32 value)
    // Offset: 0x16ACB88
    void set_H(uint value);
    // public System.UInt32 get_F()
    // Offset: 0x16ACB90
    uint get_F();
    // public System.Void .ctor()
    // Offset: 0x16AC86C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PathNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::PathNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PathNode*, creationType>()));
    }
  }; // Pathfinding.PathNode
  #pragma pack(pop)
  static check_size<sizeof(PathNode), 44 + sizeof(uint)> __Pathfinding_PathNodeSizeCheck;
  static_assert(sizeof(PathNode) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::PathNode::get_cost
// Il2CppName: get_cost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::PathNode::*)()>(&Pathfinding::PathNode::get_cost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathNode*), "get_cost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathNode::set_cost
// Il2CppName: set_cost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathNode::*)(uint)>(&Pathfinding::PathNode::set_cost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathNode*), "set_cost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathNode::get_flag1
// Il2CppName: get_flag1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::PathNode::*)()>(&Pathfinding::PathNode::get_flag1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathNode*), "get_flag1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathNode::set_flag1
// Il2CppName: set_flag1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathNode::*)(bool)>(&Pathfinding::PathNode::set_flag1)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathNode*), "set_flag1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathNode::get_flag2
// Il2CppName: get_flag2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::PathNode::*)()>(&Pathfinding::PathNode::get_flag2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathNode*), "get_flag2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathNode::set_flag2
// Il2CppName: set_flag2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathNode::*)(bool)>(&Pathfinding::PathNode::set_flag2)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathNode*), "set_flag2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathNode::get_G
// Il2CppName: get_G
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::PathNode::*)()>(&Pathfinding::PathNode::get_G)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathNode*), "get_G", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathNode::set_G
// Il2CppName: set_G
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathNode::*)(uint)>(&Pathfinding::PathNode::set_G)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathNode*), "set_G", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathNode::get_H
// Il2CppName: get_H
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::PathNode::*)()>(&Pathfinding::PathNode::get_H)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathNode*), "get_H", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathNode::set_H
// Il2CppName: set_H
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::PathNode::*)(uint)>(&Pathfinding::PathNode::set_H)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathNode*), "set_H", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathNode::get_F
// Il2CppName: get_F
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::PathNode::*)()>(&Pathfinding::PathNode::get_F)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathNode*), "get_F", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
