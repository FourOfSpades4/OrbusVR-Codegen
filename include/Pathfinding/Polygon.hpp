// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Int3
  struct Int3;
  // Forward declaring type: Int2
  struct Int2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Polygon
  class Polygon;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Polygon);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Polygon*, "Pathfinding", "Polygon");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Polygon
  // [TokenAttribute] Offset: FFFFFFFF
  class Polygon : public ::Il2CppObject {
    public:
    // static public System.Int64 TriangleArea2(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 c)
    // Offset: 0x16B3474
    static int64_t TriangleArea2(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 c);
    // static public System.Single TriangleArea2(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c)
    // Offset: 0x16B3488
    static float TriangleArea2(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c);
    // static public System.Int64 TriangleArea(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 c)
    // Offset: 0x16B34A0
    static int64_t TriangleArea(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 c);
    // static public System.Single TriangleArea(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c)
    // Offset: 0x16B34B4
    static float TriangleArea(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c);
    // static public System.Boolean ContainsPoint(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c, UnityEngine.Vector3 p)
    // Offset: 0x16B34CC
    static bool ContainsPoint(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c, ::UnityEngine::Vector3 p);
    // static public System.Boolean ContainsPointXZ(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c, UnityEngine.Vector3 p)
    // Offset: 0x16B34F0
    static bool ContainsPointXZ(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c, ::UnityEngine::Vector3 p);
    // static public System.Boolean ContainsPoint(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 c, Pathfinding.Int3 p)
    // Offset: 0x16B35DC
    static bool ContainsPoint(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 c, ::Pathfinding::Int3 p);
    // static public System.Boolean ContainsPointXZ(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 c, Pathfinding.Int3 p)
    // Offset: 0x16B35F0
    static bool ContainsPointXZ(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 c, ::Pathfinding::Int3 p);
    // static public System.Boolean ContainsPoint(Pathfinding.Int2 a, Pathfinding.Int2 b, Pathfinding.Int2 c, Pathfinding.Int2 p)
    // Offset: 0x16B36BC
    static bool ContainsPoint(::Pathfinding::Int2 a, ::Pathfinding::Int2 b, ::Pathfinding::Int2 c, ::Pathfinding::Int2 p);
    // static public System.Boolean ContainsPoint(UnityEngine.Vector3[] polyPoints, UnityEngine.Vector3 p)
    // Offset: 0x16B3738
    static bool ContainsPoint(::ArrayW<::UnityEngine::Vector3> polyPoints, ::UnityEngine::Vector3 p);
    // static public System.Boolean ContainsPoint(UnityEngine.Vector2[] polyPoints, UnityEngine.Vector2 p)
    // Offset: 0x16B3988
    static bool ContainsPoint(::ArrayW<::UnityEngine::Vector2> polyPoints, ::UnityEngine::Vector2 p);
    // static public System.Boolean ContainsPointXZ(UnityEngine.Vector3[] polyPoints, UnityEngine.Vector3 p)
    // Offset: 0x16B373C
    static bool ContainsPointXZ(::ArrayW<::UnityEngine::Vector3> polyPoints, ::UnityEngine::Vector3 p);
    // static public System.Boolean LeftNotColinear(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 p)
    // Offset: 0x16B3BBC
    static bool LeftNotColinear(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 p);
    // static public System.Boolean Left(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 p)
    // Offset: 0x16B3BD4
    static bool Left(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 p);
    // static public System.Boolean Left(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 p)
    // Offset: 0x16B3BEC
    static bool Left(::UnityEngine::Vector2 a, ::UnityEngine::Vector2 b, ::UnityEngine::Vector2 p);
    // static public System.Boolean Left(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 p)
    // Offset: 0x16B3BF4
    static bool Left(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 p);
    // static public System.Boolean LeftNotColinear(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 p)
    // Offset: 0x16B3C08
    static bool LeftNotColinear(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 p);
    // static public System.Boolean Left(Pathfinding.Int2 a, Pathfinding.Int2 b, Pathfinding.Int2 p)
    // Offset: 0x16B3C1C
    static bool Left(::Pathfinding::Int2 a, ::Pathfinding::Int2 b, ::Pathfinding::Int2 p);
    // static public System.Boolean IsClockwiseMargin(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c)
    // Offset: 0x16B3C24
    static bool IsClockwiseMargin(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c);
    // static public System.Boolean IsClockwise(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c)
    // Offset: 0x16B3C3C
    static bool IsClockwise(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c);
    // static public System.Boolean IsClockwise(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 c)
    // Offset: 0x16B3C54
    static bool IsClockwise(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 c);
    // static public System.Boolean IsClockwiseMargin(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 c)
    // Offset: 0x16B3C68
    static bool IsClockwiseMargin(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 c);
    // static public System.Boolean IsClockwiseMargin(Pathfinding.Int2 a, Pathfinding.Int2 b, Pathfinding.Int2 c)
    // Offset: 0x16B3C7C
    static bool IsClockwiseMargin(::Pathfinding::Int2 a, ::Pathfinding::Int2 b, ::Pathfinding::Int2 c);
    // static public System.Boolean IsColinear(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 c)
    // Offset: 0x16B3C84
    static bool IsColinear(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 c);
    // static public System.Boolean IsColinearAlmost(Pathfinding.Int3 a, Pathfinding.Int3 b, Pathfinding.Int3 c)
    // Offset: 0x16B3C98
    static bool IsColinearAlmost(::Pathfinding::Int3 a, ::Pathfinding::Int3 b, ::Pathfinding::Int3 c);
    // static public System.Boolean IsColinear(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c)
    // Offset: 0x16B3CAC
    static bool IsColinear(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c);
    // static public System.Boolean IntersectsUnclamped(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 a2, UnityEngine.Vector3 b2)
    // Offset: 0x16B3CC4
    static bool IntersectsUnclamped(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 a2, ::UnityEngine::Vector3 b2);
    // static public System.Boolean Intersects(Pathfinding.Int2 start1, Pathfinding.Int2 end1, Pathfinding.Int2 start2, Pathfinding.Int2 end2)
    // Offset: 0x16B3D84
    static bool Intersects(::Pathfinding::Int2 start1, ::Pathfinding::Int2 end1, ::Pathfinding::Int2 start2, ::Pathfinding::Int2 end2);
    // static public System.Boolean Intersects(Pathfinding.Int3 start1, Pathfinding.Int3 end1, Pathfinding.Int3 start2, Pathfinding.Int3 end2)
    // Offset: 0x16B3D8C
    static bool Intersects(::Pathfinding::Int3 start1, ::Pathfinding::Int3 end1, ::Pathfinding::Int3 start2, ::Pathfinding::Int3 end2);
    // static public System.Boolean Intersects(UnityEngine.Vector3 start1, UnityEngine.Vector3 end1, UnityEngine.Vector3 start2, UnityEngine.Vector3 end2)
    // Offset: 0x16B3DA4
    static bool Intersects(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 end1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 end2);
    // static public UnityEngine.Vector3 IntersectionPointOptimized(UnityEngine.Vector3 start1, UnityEngine.Vector3 dir1, UnityEngine.Vector3 start2, UnityEngine.Vector3 dir2)
    // Offset: 0x16B3DCC
    static ::UnityEngine::Vector3 IntersectionPointOptimized(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 dir1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 dir2);
    // static public UnityEngine.Vector3 IntersectionPointOptimized(UnityEngine.Vector3 start1, UnityEngine.Vector3 dir1, UnityEngine.Vector3 start2, UnityEngine.Vector3 dir2, out System.Boolean intersects)
    // Offset: 0x16B3DF4
    static ::UnityEngine::Vector3 IntersectionPointOptimized(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 dir1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 dir2, ByRef<bool> intersects);
    // static public System.Boolean IntersectionFactorRaySegment(Pathfinding.Int3 start1, Pathfinding.Int3 end1, Pathfinding.Int3 start2, Pathfinding.Int3 end2)
    // Offset: 0x16B3E1C
    static bool IntersectionFactorRaySegment(::Pathfinding::Int3 start1, ::Pathfinding::Int3 end1, ::Pathfinding::Int3 start2, ::Pathfinding::Int3 end2);
    // static public System.Boolean IntersectionFactor(Pathfinding.Int3 start1, Pathfinding.Int3 end1, Pathfinding.Int3 start2, Pathfinding.Int3 end2, out System.Single factor1, out System.Single factor2)
    // Offset: 0x16B3E34
    static bool IntersectionFactor(::Pathfinding::Int3 start1, ::Pathfinding::Int3 end1, ::Pathfinding::Int3 start2, ::Pathfinding::Int3 end2, ByRef<float> factor1, ByRef<float> factor2);
    // static public System.Boolean IntersectionFactor(UnityEngine.Vector3 start1, UnityEngine.Vector3 end1, UnityEngine.Vector3 start2, UnityEngine.Vector3 end2, out System.Single factor1, out System.Single factor2)
    // Offset: 0x16B3E54
    static bool IntersectionFactor(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 end1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 end2, ByRef<float> factor1, ByRef<float> factor2);
    // static public System.Single IntersectionFactorRay(Pathfinding.Int3 start1, Pathfinding.Int3 end1, Pathfinding.Int3 start2, Pathfinding.Int3 end2)
    // Offset: 0x16B3E7C
    static float IntersectionFactorRay(::Pathfinding::Int3 start1, ::Pathfinding::Int3 end1, ::Pathfinding::Int3 start2, ::Pathfinding::Int3 end2);
    // static public System.Single IntersectionFactor(UnityEngine.Vector3 start1, UnityEngine.Vector3 end1, UnityEngine.Vector3 start2, UnityEngine.Vector3 end2)
    // Offset: 0x16B3E94
    static float IntersectionFactor(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 end1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 end2);
    // static public UnityEngine.Vector3 IntersectionPoint(UnityEngine.Vector3 start1, UnityEngine.Vector3 end1, UnityEngine.Vector3 start2, UnityEngine.Vector3 end2)
    // Offset: 0x16B3EBC
    static ::UnityEngine::Vector3 IntersectionPoint(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 end1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 end2);
    // static public UnityEngine.Vector3 IntersectionPoint(UnityEngine.Vector3 start1, UnityEngine.Vector3 end1, UnityEngine.Vector3 start2, UnityEngine.Vector3 end2, out System.Boolean intersects)
    // Offset: 0x16B3EE4
    static ::UnityEngine::Vector3 IntersectionPoint(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 end1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 end2, ByRef<bool> intersects);
    // static public UnityEngine.Vector2 IntersectionPoint(UnityEngine.Vector2 start1, UnityEngine.Vector2 end1, UnityEngine.Vector2 start2, UnityEngine.Vector2 end2)
    // Offset: 0x16B3F0C
    static ::UnityEngine::Vector2 IntersectionPoint(::UnityEngine::Vector2 start1, ::UnityEngine::Vector2 end1, ::UnityEngine::Vector2 start2, ::UnityEngine::Vector2 end2);
    // static public UnityEngine.Vector2 IntersectionPoint(UnityEngine.Vector2 start1, UnityEngine.Vector2 end1, UnityEngine.Vector2 start2, UnityEngine.Vector2 end2, out System.Boolean intersects)
    // Offset: 0x16B3F14
    static ::UnityEngine::Vector2 IntersectionPoint(::UnityEngine::Vector2 start1, ::UnityEngine::Vector2 end1, ::UnityEngine::Vector2 start2, ::UnityEngine::Vector2 end2, ByRef<bool> intersects);
    // static public UnityEngine.Vector3 SegmentIntersectionPoint(UnityEngine.Vector3 start1, UnityEngine.Vector3 end1, UnityEngine.Vector3 start2, UnityEngine.Vector3 end2, out System.Boolean intersects)
    // Offset: 0x16B3F1C
    static ::UnityEngine::Vector3 SegmentIntersectionPoint(::UnityEngine::Vector3 start1, ::UnityEngine::Vector3 end1, ::UnityEngine::Vector3 start2, ::UnityEngine::Vector3 end2, ByRef<bool> intersects);
    // static public UnityEngine.Vector3[] ConvexHull(UnityEngine.Vector3[] points)
    // Offset: 0x16B3F44
    static ::ArrayW<::UnityEngine::Vector3> ConvexHull(::ArrayW<::UnityEngine::Vector3> points);
    // static public UnityEngine.Vector3[] ConvexHullXZ(UnityEngine.Vector3[] points)
    // Offset: 0x16B3F48
    static ::ArrayW<::UnityEngine::Vector3> ConvexHullXZ(::ArrayW<::UnityEngine::Vector3> points);
    // static public System.Boolean LineIntersectsBounds(UnityEngine.Bounds bounds, UnityEngine.Vector3 a, UnityEngine.Vector3 b)
    // Offset: 0x16B42BC
    static bool LineIntersectsBounds(::UnityEngine::Bounds bounds, ::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b);
    // static public UnityEngine.Vector3[] Subdivide(UnityEngine.Vector3[] path, System.Int32 subdivisions)
    // Offset: 0x16B42F4
    static ::ArrayW<::UnityEngine::Vector3> Subdivide(::ArrayW<::UnityEngine::Vector3> path, int subdivisions);
    // static public UnityEngine.Vector3 ClosestPointOnTriangle(UnityEngine.Vector3[] triangle, UnityEngine.Vector3 point)
    // Offset: 0x16B462C
    static ::UnityEngine::Vector3 ClosestPointOnTriangle(::ArrayW<::UnityEngine::Vector3> triangle, ::UnityEngine::Vector3 point);
    // static public UnityEngine.Vector2 ClosestPointOnTriangle(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UnityEngine.Vector2 c, UnityEngine.Vector2 p)
    // Offset: 0x16B4C28
    static ::UnityEngine::Vector2 ClosestPointOnTriangle(::UnityEngine::Vector2 a, ::UnityEngine::Vector2 b, ::UnityEngine::Vector2 c, ::UnityEngine::Vector2 p);
    // static public UnityEngine.Vector3 ClosestPointOnTriangle(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c, UnityEngine.Vector3 p)
    // Offset: 0x16B4720
    static ::UnityEngine::Vector3 ClosestPointOnTriangle(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 c, ::UnityEngine::Vector3 p);
    // static public System.Single DistanceSegmentSegment3D(UnityEngine.Vector3 s1, UnityEngine.Vector3 e1, UnityEngine.Vector3 s2, UnityEngine.Vector3 e2)
    // Offset: 0x16B5038
    static float DistanceSegmentSegment3D(::UnityEngine::Vector3 s1, ::UnityEngine::Vector3 e1, ::UnityEngine::Vector3 s2, ::UnityEngine::Vector3 e2);
  }; // Pathfinding.Polygon
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Polygon::TriangleArea2
// Il2CppName: TriangleArea2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::Polygon::TriangleArea2)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "TriangleArea2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::TriangleArea2
// Il2CppName: TriangleArea2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::TriangleArea2)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "TriangleArea2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::TriangleArea
// Il2CppName: TriangleArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::Polygon::TriangleArea)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "TriangleArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::TriangleArea
// Il2CppName: TriangleArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::TriangleArea)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "TriangleArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ContainsPoint
// Il2CppName: ContainsPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::ContainsPoint)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ContainsPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ContainsPointXZ
// Il2CppName: ContainsPointXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::ContainsPointXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ContainsPointXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ContainsPoint
// Il2CppName: ContainsPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::Polygon::ContainsPoint)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ContainsPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ContainsPointXZ
// Il2CppName: ContainsPointXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::Polygon::ContainsPointXZ)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ContainsPointXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ContainsPoint
// Il2CppName: ContainsPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int2, ::Pathfinding::Int2, ::Pathfinding::Int2, ::Pathfinding::Int2)>(&Pathfinding::Polygon::ContainsPoint)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ContainsPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ContainsPoint
// Il2CppName: ContainsPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::UnityEngine::Vector3>, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::ContainsPoint)> {
  static const MethodInfo* get() {
    static auto* polyPoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ContainsPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polyPoints, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ContainsPoint
// Il2CppName: ContainsPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::UnityEngine::Vector2>, ::UnityEngine::Vector2)>(&Pathfinding::Polygon::ContainsPoint)> {
  static const MethodInfo* get() {
    static auto* polyPoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2"), 1)->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ContainsPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polyPoints, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ContainsPointXZ
// Il2CppName: ContainsPointXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::UnityEngine::Vector3>, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::ContainsPointXZ)> {
  static const MethodInfo* get() {
    static auto* polyPoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ContainsPointXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{polyPoints, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::LeftNotColinear
// Il2CppName: LeftNotColinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::LeftNotColinear)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "LeftNotColinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::Left
// Il2CppName: Left
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::Left)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "Left", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::Left
// Il2CppName: Left
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Pathfinding::Polygon::Left)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "Left", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::Left
// Il2CppName: Left
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::Polygon::Left)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "Left", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::LeftNotColinear
// Il2CppName: LeftNotColinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::Polygon::LeftNotColinear)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "LeftNotColinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::Left
// Il2CppName: Left
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int2, ::Pathfinding::Int2, ::Pathfinding::Int2)>(&Pathfinding::Polygon::Left)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "Left", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IsClockwiseMargin
// Il2CppName: IsClockwiseMargin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::IsClockwiseMargin)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IsClockwiseMargin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IsClockwise
// Il2CppName: IsClockwise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::IsClockwise)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IsClockwise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IsClockwise
// Il2CppName: IsClockwise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::Polygon::IsClockwise)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IsClockwise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IsClockwiseMargin
// Il2CppName: IsClockwiseMargin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::Polygon::IsClockwiseMargin)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IsClockwiseMargin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IsClockwiseMargin
// Il2CppName: IsClockwiseMargin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int2, ::Pathfinding::Int2, ::Pathfinding::Int2)>(&Pathfinding::Polygon::IsClockwiseMargin)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IsClockwiseMargin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IsColinear
// Il2CppName: IsColinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::Polygon::IsColinear)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IsColinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IsColinearAlmost
// Il2CppName: IsColinearAlmost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::Polygon::IsColinearAlmost)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IsColinearAlmost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IsColinear
// Il2CppName: IsColinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::IsColinear)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IsColinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IntersectsUnclamped
// Il2CppName: IntersectsUnclamped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::IntersectsUnclamped)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* a2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IntersectsUnclamped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, a2, b2});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::Intersects
// Il2CppName: Intersects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int2, ::Pathfinding::Int2, ::Pathfinding::Int2, ::Pathfinding::Int2)>(&Pathfinding::Polygon::Intersects)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "Intersects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::Intersects
// Il2CppName: Intersects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::Polygon::Intersects)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "Intersects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::Intersects
// Il2CppName: Intersects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::Intersects)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "Intersects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IntersectionPointOptimized
// Il2CppName: IntersectionPointOptimized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::IntersectionPointOptimized)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dir1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dir2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IntersectionPointOptimized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, dir1, start2, dir2});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IntersectionPointOptimized
// Il2CppName: IntersectionPointOptimized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<bool>)>(&Pathfinding::Polygon::IntersectionPointOptimized)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dir1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dir2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* intersects = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IntersectionPointOptimized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, dir1, start2, dir2, intersects});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IntersectionFactorRaySegment
// Il2CppName: IntersectionFactorRaySegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::Polygon::IntersectionFactorRaySegment)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IntersectionFactorRaySegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IntersectionFactor
// Il2CppName: IntersectionFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3, ByRef<float>, ByRef<float>)>(&Pathfinding::Polygon::IntersectionFactor)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* factor1 = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* factor2 = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IntersectionFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2, factor1, factor2});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IntersectionFactor
// Il2CppName: IntersectionFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<float>, ByRef<float>)>(&Pathfinding::Polygon::IntersectionFactor)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* factor1 = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* factor2 = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IntersectionFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2, factor1, factor2});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IntersectionFactorRay
// Il2CppName: IntersectionFactorRay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3, ::Pathfinding::Int3)>(&Pathfinding::Polygon::IntersectionFactorRay)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "Int3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IntersectionFactorRay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IntersectionFactor
// Il2CppName: IntersectionFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::IntersectionFactor)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IntersectionFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IntersectionPoint
// Il2CppName: IntersectionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::IntersectionPoint)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IntersectionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IntersectionPoint
// Il2CppName: IntersectionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<bool>)>(&Pathfinding::Polygon::IntersectionPoint)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* intersects = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IntersectionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2, intersects});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IntersectionPoint
// Il2CppName: IntersectionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Pathfinding::Polygon::IntersectionPoint)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IntersectionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::IntersectionPoint
// Il2CppName: IntersectionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ByRef<bool>)>(&Pathfinding::Polygon::IntersectionPoint)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* intersects = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "IntersectionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2, intersects});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::SegmentIntersectionPoint
// Il2CppName: SegmentIntersectionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<bool>)>(&Pathfinding::Polygon::SegmentIntersectionPoint)> {
  static const MethodInfo* get() {
    static auto* start1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* intersects = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "SegmentIntersectionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start1, end1, start2, end2, intersects});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ConvexHull
// Il2CppName: ConvexHull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (*)(::ArrayW<::UnityEngine::Vector3>)>(&Pathfinding::Polygon::ConvexHull)> {
  static const MethodInfo* get() {
    static auto* points = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ConvexHull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ConvexHullXZ
// Il2CppName: ConvexHullXZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (*)(::ArrayW<::UnityEngine::Vector3>)>(&Pathfinding::Polygon::ConvexHullXZ)> {
  static const MethodInfo* get() {
    static auto* points = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ConvexHullXZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::LineIntersectsBounds
// Il2CppName: LineIntersectsBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Bounds, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::LineIntersectsBounds)> {
  static const MethodInfo* get() {
    static auto* bounds = &::il2cpp_utils::GetClassFromName("UnityEngine", "Bounds")->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "LineIntersectsBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bounds, a, b});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::Subdivide
// Il2CppName: Subdivide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (*)(::ArrayW<::UnityEngine::Vector3>, int)>(&Pathfinding::Polygon::Subdivide)> {
  static const MethodInfo* get() {
    static auto* path = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* subdivisions = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "Subdivide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, subdivisions});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ClosestPointOnTriangle
// Il2CppName: ClosestPointOnTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::ArrayW<::UnityEngine::Vector3>, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::ClosestPointOnTriangle)> {
  static const MethodInfo* get() {
    static auto* triangle = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ClosestPointOnTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triangle, point});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ClosestPointOnTriangle
// Il2CppName: ClosestPointOnTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Pathfinding::Polygon::ClosestPointOnTriangle)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ClosestPointOnTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::ClosestPointOnTriangle
// Il2CppName: ClosestPointOnTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::ClosestPointOnTriangle)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "ClosestPointOnTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, c, p});
  }
};
// Writing MetadataGetter for method: Pathfinding::Polygon::DistanceSegmentSegment3D
// Il2CppName: DistanceSegmentSegment3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::Polygon::DistanceSegmentSegment3D)> {
  static const MethodInfo* get() {
    static auto* s1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* e1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* s2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* e2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Polygon*), "DistanceSegmentSegment3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s1, e1, s2, e2});
  }
};
