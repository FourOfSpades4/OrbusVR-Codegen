// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.NodeLink2
#include "Pathfinding/NodeLink2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: AnimationLink
  class AnimationLink;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::AnimationLink);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::AnimationLink*, "Pathfinding", "AnimationLink");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.AnimationLink
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: AD7FF4
  class AnimationLink : public ::Pathfinding::NodeLink2 {
    public:
    // Writing base type padding for base size: 0x79 to desired offset: 0x80
    char ___base_padding[0x7] = {};
    // Nested type: ::Pathfinding::AnimationLink::LinkClip
    class LinkClip;
    public:
    // public System.String clip
    // Size: 0x8
    // Offset: 0x80
    ::StringW clip;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single animSpeed
    // Size: 0x4
    // Offset: 0x88
    float animSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean reverseAnim
    // Size: 0x1
    // Offset: 0x8C
    bool reverseAnim;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: reverseAnim and: referenceMesh
    char __padding2[0x3] = {};
    // public UnityEngine.GameObject referenceMesh
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::GameObject* referenceMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public Pathfinding.AnimationLink/LinkClip[] sequence
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::Pathfinding::AnimationLink::LinkClip*> sequence;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::AnimationLink::LinkClip*>) == 0x8);
    // public System.String boneRoot
    // Size: 0x8
    // Offset: 0xA0
    ::StringW boneRoot;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String clip
    [[deprecated("Use field access instead!")]] ::StringW& dyn_clip();
    // Get instance field reference: public System.Single animSpeed
    [[deprecated("Use field access instead!")]] float& dyn_animSpeed();
    // Get instance field reference: public System.Boolean reverseAnim
    [[deprecated("Use field access instead!")]] bool& dyn_reverseAnim();
    // Get instance field reference: public UnityEngine.GameObject referenceMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_referenceMesh();
    // Get instance field reference: public Pathfinding.AnimationLink/LinkClip[] sequence
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::AnimationLink::LinkClip*>& dyn_sequence();
    // Get instance field reference: public System.String boneRoot
    [[deprecated("Use field access instead!")]] ::StringW& dyn_boneRoot();
    // static private UnityEngine.Transform SearchRec(UnityEngine.Transform tr, System.String name)
    // Offset: 0x103261C
    static ::UnityEngine::Transform* SearchRec(::UnityEngine::Transform* tr, ::StringW name);
    // public System.Void CalculateOffsets(System.Collections.Generic.List`1<UnityEngine.Vector3> trace, out UnityEngine.Vector3 endPosition)
    // Offset: 0x1032738
    void CalculateOffsets(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* trace, ByRef<::UnityEngine::Vector3> endPosition);
    // public override System.Void OnDrawGizmosSelected()
    // Offset: 0x103329C
    // Implemented from: Pathfinding.NodeLink2
    // Base method: System.Void NodeLink2::OnDrawGizmosSelected()
    void OnDrawGizmosSelected();
    // public System.Void .ctor()
    // Offset: 0x1033448
    // Implemented from: Pathfinding.NodeLink2
    // Base method: System.Void NodeLink2::.ctor()
    // Base method: System.Void GraphModifier::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AnimationLink* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::AnimationLink::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AnimationLink*, creationType>()));
    }
  }; // Pathfinding.AnimationLink
  #pragma pack(pop)
  static check_size<sizeof(AnimationLink), 160 + sizeof(::StringW)> __Pathfinding_AnimationLinkSizeCheck;
  static_assert(sizeof(AnimationLink) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::AnimationLink::SearchRec
// Il2CppName: SearchRec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (*)(::UnityEngine::Transform*, ::StringW)>(&Pathfinding::AnimationLink::SearchRec)> {
  static const MethodInfo* get() {
    static auto* tr = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AnimationLink*), "SearchRec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tr, name});
  }
};
// Writing MetadataGetter for method: Pathfinding::AnimationLink::CalculateOffsets
// Il2CppName: CalculateOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AnimationLink::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, ByRef<::UnityEngine::Vector3>)>(&Pathfinding::AnimationLink::CalculateOffsets)> {
  static const MethodInfo* get() {
    static auto* trace = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* endPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AnimationLink*), "CalculateOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trace, endPosition});
  }
};
// Writing MetadataGetter for method: Pathfinding::AnimationLink::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AnimationLink::*)()>(&Pathfinding::AnimationLink::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AnimationLink*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AnimationLink::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
