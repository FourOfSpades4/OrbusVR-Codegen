// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: TagMask
  class TagMask;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::TagMask);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::TagMask*, "Pathfinding", "TagMask");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.TagMask
  // [TokenAttribute] Offset: FFFFFFFF
  class TagMask : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 tagsChange
    // Size: 0x4
    // Offset: 0x10
    int tagsChange;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 tagsSet
    // Size: 0x4
    // Offset: 0x14
    int tagsSet;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Int32 tagsChange
    [[deprecated("Use field access instead!")]] int& dyn_tagsChange();
    // Get instance field reference: public System.Int32 tagsSet
    [[deprecated("Use field access instead!")]] int& dyn_tagsSet();
    // public System.Void .ctor()
    // Offset: 0xE3AC1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TagMask* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::TagMask::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TagMask*, creationType>()));
    }
    // public System.Void .ctor(System.Int32 change, System.Int32 set)
    // Offset: 0xE3AC24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TagMask* New_ctor(int change, int set) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::TagMask::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TagMask*, creationType>(change, set)));
    }
    // public override System.String ToString()
    // Offset: 0xE3AC5C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Pathfinding.TagMask
  #pragma pack(pop)
  static check_size<sizeof(TagMask), 20 + sizeof(int)> __Pathfinding_TagMaskSizeCheck;
  static_assert(sizeof(TagMask) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::TagMask::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::TagMask::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::TagMask::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::TagMask::*)()>(&Pathfinding::TagMask::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::TagMask*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
