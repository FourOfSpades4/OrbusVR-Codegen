// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: Pathfinding.Ionic.Zip.Zip64Option
#include "Pathfinding/Ionic/Zip/Zip64Option.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipOption
#include "Pathfinding/Ionic/Zip/ZipOption.hpp"
// Including type: Pathfinding.Ionic.Zlib.CompressionStrategy
#include "Pathfinding/Ionic/Zlib/CompressionStrategy.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Ionic::Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipEntry
  class ZipEntry;
  // Forward declaring type: CountingStream
  class CountingStream;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: Pathfinding::Ionic::Crc
namespace Pathfinding::Ionic::Crc {
  // Forward declaring type: CrcCalculatorStream
  class CrcCalculatorStream;
}
// Forward declaring namespace: Pathfinding::Ionic::Zlib
namespace Pathfinding::Ionic::Zlib {
  // Forward declaring type: ParallelDeflateOutputStream
  class ParallelDeflateOutputStream;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Completed forward declares
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipOutputStream
  class ZipOutputStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Ionic::Zip::ZipOutputStream);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Ionic::Zip::ZipOutputStream*, "Pathfinding.Ionic.Zip", "ZipOutputStream");
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Size: 0xBC
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Ionic.Zip.ZipOutputStream
  // [TokenAttribute] Offset: FFFFFFFF
  class ZipOutputStream : public ::System::IO::Stream {
    public:
    public:
    // System.String _password
    // Size: 0x8
    // Offset: 0x28
    ::StringW password;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _comment
    // Size: 0x8
    // Offset: 0x30
    ::StringW comment;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.IO.Stream _outputStream
    // Size: 0x8
    // Offset: 0x38
    ::System::IO::Stream* outputStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private Pathfinding.Ionic.Zip.ZipEntry _currentEntry
    // Size: 0x8
    // Offset: 0x40
    ::Pathfinding::Ionic::Zip::ZipEntry* currentEntry;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipEntry*) == 0x8);
    // Pathfinding.Ionic.Zip.Zip64Option _zip64
    // Size: 0x4
    // Offset: 0x48
    ::Pathfinding::Ionic::Zip::Zip64Option zip64;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::Zip64Option) == 0x4);
    // Padding between fields: zip64 and: entriesWritten
    char __padding4[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<System.String,Pathfinding.Ionic.Zip.ZipEntry> _entriesWritten
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<::StringW, ::Pathfinding::Ionic::Zip::ZipEntry*>* entriesWritten;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::Pathfinding::Ionic::Zip::ZipEntry*>*) == 0x8);
    // private System.Int32 _entryCount
    // Size: 0x4
    // Offset: 0x58
    int entryCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Pathfinding.Ionic.Zip.ZipOption _alternateEncodingUsage
    // Size: 0x4
    // Offset: 0x5C
    ::Pathfinding::Ionic::Zip::ZipOption alternateEncodingUsage;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipOption) == 0x4);
    // private System.Text.Encoding _alternateEncoding
    // Size: 0x8
    // Offset: 0x60
    ::System::Text::Encoding* alternateEncoding;
    // Field size check
    static_assert(sizeof(::System::Text::Encoding*) == 0x8);
    // private System.Boolean _leaveUnderlyingStreamOpen
    // Size: 0x1
    // Offset: 0x68
    bool leaveUnderlyingStreamOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _disposed
    // Size: 0x1
    // Offset: 0x69
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _exceptionPending
    // Size: 0x1
    // Offset: 0x6A
    bool exceptionPending;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _anyEntriesUsedZip64
    // Size: 0x1
    // Offset: 0x6B
    bool anyEntriesUsedZip64;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _directoryNeededZip64
    // Size: 0x1
    // Offset: 0x6C
    bool directoryNeededZip64;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: directoryNeededZip64 and: outputCounter
    char __padding13[0x3] = {};
    // private Pathfinding.Ionic.Zip.CountingStream _outputCounter
    // Size: 0x8
    // Offset: 0x70
    ::Pathfinding::Ionic::Zip::CountingStream* outputCounter;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::CountingStream*) == 0x8);
    // private System.IO.Stream _encryptor
    // Size: 0x8
    // Offset: 0x78
    ::System::IO::Stream* encryptor;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.IO.Stream _deflater
    // Size: 0x8
    // Offset: 0x80
    ::System::IO::Stream* deflater;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private Pathfinding.Ionic.Crc.CrcCalculatorStream _entryOutputStream
    // Size: 0x8
    // Offset: 0x88
    ::Pathfinding::Ionic::Crc::CrcCalculatorStream* entryOutputStream;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Crc::CrcCalculatorStream*) == 0x8);
    // private System.Boolean _needToWriteEntryHeader
    // Size: 0x1
    // Offset: 0x90
    bool needToWriteEntryHeader;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: needToWriteEntryHeader and: name
    char __padding18[0x7] = {};
    // private System.String _name
    // Size: 0x8
    // Offset: 0x98
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream ParallelDeflater
    // Size: 0x8
    // Offset: 0xA0
    ::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream* ParallelDeflater;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream*) == 0x8);
    // private System.Int64 _ParallelDeflateThreshold
    // Size: 0x8
    // Offset: 0xA8
    int64_t ParallelDeflateThreshold;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int32 _maxBufferPairs
    // Size: 0x4
    // Offset: 0xB0
    int maxBufferPairs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xABBFE8
    // private System.Int32 <CodecBufferSize>k__BackingField
    // Size: 0x4
    // Offset: 0xB4
    int CodecBufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xABBFF8
    // private Pathfinding.Ionic.Zlib.CompressionStrategy <Strategy>k__BackingField
    // Size: 0x4
    // Offset: 0xB8
    ::Pathfinding::Ionic::Zlib::CompressionStrategy Strategy;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zlib::CompressionStrategy) == 0x4);
    public:
    // Get instance field reference: System.String _password
    [[deprecated("Use field access instead!")]] ::StringW& dyn__password();
    // Get instance field reference: private System.String _comment
    [[deprecated("Use field access instead!")]] ::StringW& dyn__comment();
    // Get instance field reference: private System.IO.Stream _outputStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__outputStream();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipEntry _currentEntry
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipEntry*& dyn__currentEntry();
    // Get instance field reference: Pathfinding.Ionic.Zip.Zip64Option _zip64
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::Zip64Option& dyn__zip64();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,Pathfinding.Ionic.Zip.ZipEntry> _entriesWritten
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Pathfinding::Ionic::Zip::ZipEntry*>*& dyn__entriesWritten();
    // Get instance field reference: private System.Int32 _entryCount
    [[deprecated("Use field access instead!")]] int& dyn__entryCount();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipOption _alternateEncodingUsage
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipOption& dyn__alternateEncodingUsage();
    // Get instance field reference: private System.Text.Encoding _alternateEncoding
    [[deprecated("Use field access instead!")]] ::System::Text::Encoding*& dyn__alternateEncoding();
    // Get instance field reference: private System.Boolean _leaveUnderlyingStreamOpen
    [[deprecated("Use field access instead!")]] bool& dyn__leaveUnderlyingStreamOpen();
    // Get instance field reference: private System.Boolean _disposed
    [[deprecated("Use field access instead!")]] bool& dyn__disposed();
    // Get instance field reference: private System.Boolean _exceptionPending
    [[deprecated("Use field access instead!")]] bool& dyn__exceptionPending();
    // Get instance field reference: private System.Boolean _anyEntriesUsedZip64
    [[deprecated("Use field access instead!")]] bool& dyn__anyEntriesUsedZip64();
    // Get instance field reference: private System.Boolean _directoryNeededZip64
    [[deprecated("Use field access instead!")]] bool& dyn__directoryNeededZip64();
    // Get instance field reference: private Pathfinding.Ionic.Zip.CountingStream _outputCounter
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::CountingStream*& dyn__outputCounter();
    // Get instance field reference: private System.IO.Stream _encryptor
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__encryptor();
    // Get instance field reference: private System.IO.Stream _deflater
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__deflater();
    // Get instance field reference: private Pathfinding.Ionic.Crc.CrcCalculatorStream _entryOutputStream
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Crc::CrcCalculatorStream*& dyn__entryOutputStream();
    // Get instance field reference: private System.Boolean _needToWriteEntryHeader
    [[deprecated("Use field access instead!")]] bool& dyn__needToWriteEntryHeader();
    // Get instance field reference: private System.String _name
    [[deprecated("Use field access instead!")]] ::StringW& dyn__name();
    // Get instance field reference: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream ParallelDeflater
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream*& dyn_ParallelDeflater();
    // Get instance field reference: private System.Int64 _ParallelDeflateThreshold
    [[deprecated("Use field access instead!")]] int64_t& dyn__ParallelDeflateThreshold();
    // Get instance field reference: private System.Int32 _maxBufferPairs
    [[deprecated("Use field access instead!")]] int& dyn__maxBufferPairs();
    // Get instance field reference: private System.Int32 <CodecBufferSize>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$CodecBufferSize$k__BackingField();
    // Get instance field reference: private Pathfinding.Ionic.Zlib.CompressionStrategy <Strategy>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionStrategy& dyn_$Strategy$k__BackingField();
    // public System.Int32 get_CodecBufferSize()
    // Offset: 0x25D62C4
    int get_CodecBufferSize();
    // public Pathfinding.Ionic.Zlib.CompressionStrategy get_Strategy()
    // Offset: 0x25D62CC
    ::Pathfinding::Ionic::Zlib::CompressionStrategy get_Strategy();
    // public System.String get_Comment()
    // Offset: 0x25D62D4
    ::StringW get_Comment();
    // public Pathfinding.Ionic.Zip.Zip64Option get_EnableZip64()
    // Offset: 0x25D62DC
    ::Pathfinding::Ionic::Zip::Zip64Option get_EnableZip64();
    // public System.Text.Encoding get_AlternateEncoding()
    // Offset: 0x25D62E4
    ::System::Text::Encoding* get_AlternateEncoding();
    // public Pathfinding.Ionic.Zip.ZipOption get_AlternateEncodingUsage()
    // Offset: 0x25D62EC
    ::Pathfinding::Ionic::Zip::ZipOption get_AlternateEncodingUsage();
    // static public System.Text.Encoding get_DefaultEncoding()
    // Offset: 0x25D62F4
    static ::System::Text::Encoding* get_DefaultEncoding();
    // public System.Int64 get_ParallelDeflateThreshold()
    // Offset: 0x25D62FC
    int64_t get_ParallelDeflateThreshold();
    // public System.Int32 get_ParallelDeflateMaxBufferPairs()
    // Offset: 0x25D6304
    int get_ParallelDeflateMaxBufferPairs();
    // System.IO.Stream get_OutputStream()
    // Offset: 0x25D630C
    ::System::IO::Stream* get_OutputStream();
    // private System.Void _InitiateCurrentEntry(System.Boolean finishing)
    // Offset: 0x25D64B0
    void _InitiateCurrentEntry(bool finishing);
    // private System.Void _FinishCurrentEntry()
    // Offset: 0x25D66A4
    void _FinishCurrentEntry();
    // public override System.String ToString()
    // Offset: 0x25D623C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x25D6314
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    void Write(::ArrayW<uint8_t> buffer, int offset, int count);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x25D6818
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override System.Boolean get_CanRead()
    // Offset: 0x25D6990
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanRead()
    bool get_CanRead();
    // public override System.Boolean get_CanSeek()
    // Offset: 0x25D6998
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanSeek()
    bool get_CanSeek();
    // public override System.Boolean get_CanWrite()
    // Offset: 0x25D69A0
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanWrite()
    bool get_CanWrite();
    // public override System.Int64 get_Length()
    // Offset: 0x25D69A8
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Length()
    int64_t get_Length();
    // public override System.Int64 get_Position()
    // Offset: 0x25D6A10
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Position()
    int64_t get_Position();
    // public override System.Void set_Position(System.Int64 value)
    // Offset: 0x25D6A44
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_Position(System.Int64 value)
    void set_Position(int64_t value);
    // public override System.Void Flush()
    // Offset: 0x25D6AAC
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Flush()
    void Flush();
    // public override System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x25D6AB0
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    int Read(::ArrayW<uint8_t> buffer, int offset, int count);
    // public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    // Offset: 0x25D6B24
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    int64_t Seek(int64_t offset, ::System::IO::SeekOrigin origin);
    // public override System.Void SetLength(System.Int64 value)
    // Offset: 0x25D6B98
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::SetLength(System.Int64 value)
    void SetLength(int64_t value);
  }; // Pathfinding.Ionic.Zip.ZipOutputStream
  #pragma pack(pop)
  static check_size<sizeof(ZipOutputStream), 184 + sizeof(::Pathfinding::Ionic::Zlib::CompressionStrategy)> __Pathfinding_Ionic_Zip_ZipOutputStreamSizeCheck;
  static_assert(sizeof(ZipOutputStream) == 0xBC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::get_CodecBufferSize
// Il2CppName: get_CodecBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::get_CodecBufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "get_CodecBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::get_Strategy
// Il2CppName: get_Strategy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zlib::CompressionStrategy (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::get_Strategy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "get_Strategy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::get_Comment
// Il2CppName: get_Comment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::get_Comment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "get_Comment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::get_EnableZip64
// Il2CppName: get_EnableZip64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::Zip64Option (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::get_EnableZip64)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "get_EnableZip64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::get_AlternateEncoding
// Il2CppName: get_AlternateEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::Encoding* (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::get_AlternateEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "get_AlternateEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::get_AlternateEncodingUsage
// Il2CppName: get_AlternateEncodingUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipOption (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::get_AlternateEncodingUsage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "get_AlternateEncodingUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::get_DefaultEncoding
// Il2CppName: get_DefaultEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::Encoding* (*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::get_DefaultEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "get_DefaultEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::get_ParallelDeflateThreshold
// Il2CppName: get_ParallelDeflateThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::get_ParallelDeflateThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "get_ParallelDeflateThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::get_ParallelDeflateMaxBufferPairs
// Il2CppName: get_ParallelDeflateMaxBufferPairs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::get_ParallelDeflateMaxBufferPairs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "get_ParallelDeflateMaxBufferPairs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::get_OutputStream
// Il2CppName: get_OutputStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::get_OutputStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "get_OutputStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::_InitiateCurrentEntry
// Il2CppName: _InitiateCurrentEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipOutputStream::*)(bool)>(&Pathfinding::Ionic::Zip::ZipOutputStream::_InitiateCurrentEntry)> {
  static const MethodInfo* get() {
    static auto* finishing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "_InitiateCurrentEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finishing});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::_FinishCurrentEntry
// Il2CppName: _FinishCurrentEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::_FinishCurrentEntry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "_FinishCurrentEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipOutputStream::*)(::ArrayW<uint8_t>, int, int)>(&Pathfinding::Ionic::Zip::ZipOutputStream::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipOutputStream::*)(bool)>(&Pathfinding::Ionic::Zip::ZipOutputStream::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::get_CanRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::get_CanSeek
// Il2CppName: get_CanSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::get_CanSeek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "get_CanSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::get_CanWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipOutputStream::*)(int64_t)>(&Pathfinding::Ionic::Zip::ZipOutputStream::set_Position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipOutputStream::*)()>(&Pathfinding::Ionic::Zip::ZipOutputStream::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipOutputStream::*)(::ArrayW<uint8_t>, int, int)>(&Pathfinding::Ionic::Zip::ZipOutputStream::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipOutputStream::*)(int64_t, ::System::IO::SeekOrigin)>(&Pathfinding::Ionic::Zip::ZipOutputStream::Seek)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("System.IO", "SeekOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, origin});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipOutputStream::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipOutputStream::*)(int64_t)>(&Pathfinding::Ionic::Zip::ZipOutputStream::SetLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipOutputStream*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
