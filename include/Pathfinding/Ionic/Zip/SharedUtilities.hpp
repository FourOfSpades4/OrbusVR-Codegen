// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: Regex
  class Regex;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: DateTime
  struct DateTime;
}
// Completed forward declares
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: SharedUtilities
  class SharedUtilities;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Ionic::Zip::SharedUtilities);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Ionic::Zip::SharedUtilities*, "Pathfinding.Ionic.Zip", "SharedUtilities");
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Ionic.Zip.SharedUtilities
  // [TokenAttribute] Offset: FFFFFFFF
  class SharedUtilities : public ::Il2CppObject {
    public:
    // Get static field: static private System.Text.RegularExpressions.Regex doubleDotRegex1
    static ::System::Text::RegularExpressions::Regex* _get_doubleDotRegex1();
    // Set static field: static private System.Text.RegularExpressions.Regex doubleDotRegex1
    static void _set_doubleDotRegex1(::System::Text::RegularExpressions::Regex* value);
    // Get static field: static private System.Text.Encoding ibm437
    static ::System::Text::Encoding* _get_ibm437();
    // Set static field: static private System.Text.Encoding ibm437
    static void _set_ibm437(::System::Text::Encoding* value);
    // Get static field: static private System.Text.Encoding utf8
    static ::System::Text::Encoding* _get_utf8();
    // Set static field: static private System.Text.Encoding utf8
    static void _set_utf8(::System::Text::Encoding* value);
    // static private System.Void .cctor()
    // Offset: 0x1F4A148
    static void _cctor();
    // static public System.Int64 GetFileLength(System.String fileName)
    // Offset: 0x1F4A1F8
    static int64_t GetFileLength(::StringW fileName);
    // static private System.String SimplifyFwdSlashPath(System.String path)
    // Offset: 0x1F4A36C
    static ::StringW SimplifyFwdSlashPath(::StringW path);
    // static public System.String NormalizePathForUseInZipFile(System.String pathName)
    // Offset: 0x1F4A47C
    static ::StringW NormalizePathForUseInZipFile(::StringW pathName);
    // static System.Byte[] StringToByteArray(System.String value, System.Text.Encoding encoding)
    // Offset: 0x1F4A600
    static ::ArrayW<uint8_t> StringToByteArray(::StringW value, ::System::Text::Encoding* encoding);
    // static System.Byte[] StringToByteArray(System.String value)
    // Offset: 0x1F4A640
    static ::ArrayW<uint8_t> StringToByteArray(::StringW value);
    // static System.String Utf8StringFromBuffer(System.Byte[] buf)
    // Offset: 0x1F4A6CC
    static ::StringW Utf8StringFromBuffer(::ArrayW<uint8_t> buf);
    // static System.String StringFromBuffer(System.Byte[] buf, System.Text.Encoding encoding)
    // Offset: 0x1F4A73C
    static ::StringW StringFromBuffer(::ArrayW<uint8_t> buf, ::System::Text::Encoding* encoding);
    // static System.Int32 ReadSignature(System.IO.Stream s)
    // Offset: 0x1F4A794
    static int ReadSignature(::System::IO::Stream* s);
    // static System.Int32 ReadEntrySignature(System.IO.Stream s)
    // Offset: 0x1F4AA4C
    static int ReadEntrySignature(::System::IO::Stream* s);
    // static System.Int32 ReadInt(System.IO.Stream s)
    // Offset: 0x1F4AC80
    static int ReadInt(::System::IO::Stream* s);
    // static private System.Int32 _ReadFourBytes(System.IO.Stream s, System.String message)
    // Offset: 0x1F4A87C
    static int _ReadFourBytes(::System::IO::Stream* s, ::StringW message);
    // static System.Int64 FindSignature(System.IO.Stream stream, System.Int32 SignatureToFind)
    // Offset: 0x1F4ACF0
    static int64_t FindSignature(::System::IO::Stream* stream, int SignatureToFind);
    // static System.DateTime AdjustTime_Reverse(System.DateTime time)
    // Offset: 0x1F4AFD4
    static ::System::DateTime AdjustTime_Reverse(::System::DateTime time);
    // static System.DateTime PackedToDateTime(System.Int32 packedDateTime)
    // Offset: 0x1F4B164
    static ::System::DateTime PackedToDateTime(int packedDateTime);
    // static System.Int32 DateTimeToPacked(System.DateTime time)
    // Offset: 0x1F4B790
    static int DateTimeToPacked(::System::DateTime time);
    // static public System.Void CreateAndOpenUniqueTempFile(System.String dir, out System.IO.Stream fs, out System.String filename)
    // Offset: 0x1F4B84C
    static void CreateAndOpenUniqueTempFile(::StringW dir, ByRef<::System::IO::Stream*> fs, ByRef<::StringW> filename);
    // static public System.String InternalGetTempFileName()
    // Offset: 0x1F4BA18
    static ::StringW InternalGetTempFileName();
    // static System.String GenerateRandomStringImpl(System.Int32 length, System.Int32 delta)
    // Offset: 0x1F4BAA4
    static ::StringW GenerateRandomStringImpl(int length, int delta);
    // static System.Int32 ReadWithRetry(System.IO.Stream s, System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.String FileName)
    // Offset: 0x1F4BC00
    static int ReadWithRetry(::System::IO::Stream* s, ::ArrayW<uint8_t> buffer, int offset, int count, ::StringW FileName);
  }; // Pathfinding.Ionic.Zip.SharedUtilities
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::Ionic::Zip::SharedUtilities::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::GetFileLength
// Il2CppName: GetFileLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::StringW)>(&Pathfinding::Ionic::Zip::SharedUtilities::GetFileLength)> {
  static const MethodInfo* get() {
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "GetFileLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fileName});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::SimplifyFwdSlashPath
// Il2CppName: SimplifyFwdSlashPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&Pathfinding::Ionic::Zip::SharedUtilities::SimplifyFwdSlashPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "SimplifyFwdSlashPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::NormalizePathForUseInZipFile
// Il2CppName: NormalizePathForUseInZipFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&Pathfinding::Ionic::Zip::SharedUtilities::NormalizePathForUseInZipFile)> {
  static const MethodInfo* get() {
    static auto* pathName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "NormalizePathForUseInZipFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pathName});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::StringToByteArray
// Il2CppName: StringToByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::StringW, ::System::Text::Encoding*)>(&Pathfinding::Ionic::Zip::SharedUtilities::StringToByteArray)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* encoding = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "StringToByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, encoding});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::StringToByteArray
// Il2CppName: StringToByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::StringW)>(&Pathfinding::Ionic::Zip::SharedUtilities::StringToByteArray)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "StringToByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::Utf8StringFromBuffer
// Il2CppName: Utf8StringFromBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::ArrayW<uint8_t>)>(&Pathfinding::Ionic::Zip::SharedUtilities::Utf8StringFromBuffer)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "Utf8StringFromBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::StringFromBuffer
// Il2CppName: StringFromBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::ArrayW<uint8_t>, ::System::Text::Encoding*)>(&Pathfinding::Ionic::Zip::SharedUtilities::StringFromBuffer)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* encoding = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "StringFromBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, encoding});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::ReadSignature
// Il2CppName: ReadSignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::SharedUtilities::ReadSignature)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "ReadSignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::ReadEntrySignature
// Il2CppName: ReadEntrySignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::SharedUtilities::ReadEntrySignature)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "ReadEntrySignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::ReadInt
// Il2CppName: ReadInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::SharedUtilities::ReadInt)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "ReadInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::_ReadFourBytes
// Il2CppName: _ReadFourBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IO::Stream*, ::StringW)>(&Pathfinding::Ionic::Zip::SharedUtilities::_ReadFourBytes)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "_ReadFourBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, message});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::FindSignature
// Il2CppName: FindSignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::System::IO::Stream*, int)>(&Pathfinding::Ionic::Zip::SharedUtilities::FindSignature)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* SignatureToFind = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "FindSignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, SignatureToFind});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::AdjustTime_Reverse
// Il2CppName: AdjustTime_Reverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(::System::DateTime)>(&Pathfinding::Ionic::Zip::SharedUtilities::AdjustTime_Reverse)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "AdjustTime_Reverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::PackedToDateTime
// Il2CppName: PackedToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(int)>(&Pathfinding::Ionic::Zip::SharedUtilities::PackedToDateTime)> {
  static const MethodInfo* get() {
    static auto* packedDateTime = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "PackedToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packedDateTime});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::DateTimeToPacked
// Il2CppName: DateTimeToPacked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::DateTime)>(&Pathfinding::Ionic::Zip::SharedUtilities::DateTimeToPacked)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "DateTimeToPacked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::CreateAndOpenUniqueTempFile
// Il2CppName: CreateAndOpenUniqueTempFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ByRef<::System::IO::Stream*>, ByRef<::StringW>)>(&Pathfinding::Ionic::Zip::SharedUtilities::CreateAndOpenUniqueTempFile)> {
  static const MethodInfo* get() {
    static auto* dir = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fs = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->this_arg;
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "CreateAndOpenUniqueTempFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dir, fs, filename});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::InternalGetTempFileName
// Il2CppName: InternalGetTempFileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&Pathfinding::Ionic::Zip::SharedUtilities::InternalGetTempFileName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "InternalGetTempFileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::GenerateRandomStringImpl
// Il2CppName: GenerateRandomStringImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int, int)>(&Pathfinding::Ionic::Zip::SharedUtilities::GenerateRandomStringImpl)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* delta = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "GenerateRandomStringImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length, delta});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::SharedUtilities::ReadWithRetry
// Il2CppName: ReadWithRetry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IO::Stream*, ::ArrayW<uint8_t>, int, int, ::StringW)>(&Pathfinding::Ionic::Zip::SharedUtilities::ReadWithRetry)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* FileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::SharedUtilities*), "ReadWithRetry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, buffer, offset, count, FileName});
  }
};
