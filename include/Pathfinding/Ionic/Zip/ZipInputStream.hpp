// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Ionic::Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipEntry
  class ZipEntry;
}
// Forward declaring namespace: Pathfinding::Ionic::Crc
namespace Pathfinding::Ionic::Crc {
  // Forward declaring type: CrcCalculatorStream
  class CrcCalculatorStream;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Completed forward declares
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipInputStream
  class ZipInputStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Ionic::Zip::ZipInputStream);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Ionic::Zip::ZipInputStream*, "Pathfinding.Ionic.Zip", "ZipInputStream");
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Ionic.Zip.ZipInputStream
  // [TokenAttribute] Offset: FFFFFFFF
  class ZipInputStream : public ::System::IO::Stream {
    public:
    public:
    // private System.IO.Stream _inputStream
    // Size: 0x8
    // Offset: 0x28
    ::System::IO::Stream* inputStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private Pathfinding.Ionic.Zip.ZipEntry _currentEntry
    // Size: 0x8
    // Offset: 0x30
    ::Pathfinding::Ionic::Zip::ZipEntry* currentEntry;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipEntry*) == 0x8);
    // private System.Boolean _needSetup
    // Size: 0x1
    // Offset: 0x38
    bool needSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: needSetup and: crcStream
    char __padding2[0x7] = {};
    // private Pathfinding.Ionic.Crc.CrcCalculatorStream _crcStream
    // Size: 0x8
    // Offset: 0x40
    ::Pathfinding::Ionic::Crc::CrcCalculatorStream* crcStream;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Crc::CrcCalculatorStream*) == 0x8);
    // private System.Int64 _LeftToRead
    // Size: 0x8
    // Offset: 0x48
    int64_t LeftToRead;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.String _Password
    // Size: 0x8
    // Offset: 0x50
    ::StringW Password;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int64 _endOfEntry
    // Size: 0x8
    // Offset: 0x58
    int64_t endOfEntry;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.String _name
    // Size: 0x8
    // Offset: 0x60
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _leaveUnderlyingStreamOpen
    // Size: 0x1
    // Offset: 0x68
    bool leaveUnderlyingStreamOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _closed
    // Size: 0x1
    // Offset: 0x69
    bool closed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _findRequired
    // Size: 0x1
    // Offset: 0x6A
    bool findRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _exceptionPending
    // Size: 0x1
    // Offset: 0x6B
    bool exceptionPending;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xABBFD8
    // private System.Int32 <CodecBufferSize>k__BackingField
    // Size: 0x4
    // Offset: 0x6C
    int CodecBufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.IO.Stream _inputStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__inputStream();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipEntry _currentEntry
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipEntry*& dyn__currentEntry();
    // Get instance field reference: private System.Boolean _needSetup
    [[deprecated("Use field access instead!")]] bool& dyn__needSetup();
    // Get instance field reference: private Pathfinding.Ionic.Crc.CrcCalculatorStream _crcStream
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Crc::CrcCalculatorStream*& dyn__crcStream();
    // Get instance field reference: private System.Int64 _LeftToRead
    [[deprecated("Use field access instead!")]] int64_t& dyn__LeftToRead();
    // Get instance field reference: System.String _Password
    [[deprecated("Use field access instead!")]] ::StringW& dyn__Password();
    // Get instance field reference: private System.Int64 _endOfEntry
    [[deprecated("Use field access instead!")]] int64_t& dyn__endOfEntry();
    // Get instance field reference: private System.String _name
    [[deprecated("Use field access instead!")]] ::StringW& dyn__name();
    // Get instance field reference: private System.Boolean _leaveUnderlyingStreamOpen
    [[deprecated("Use field access instead!")]] bool& dyn__leaveUnderlyingStreamOpen();
    // Get instance field reference: private System.Boolean _closed
    [[deprecated("Use field access instead!")]] bool& dyn__closed();
    // Get instance field reference: private System.Boolean _findRequired
    [[deprecated("Use field access instead!")]] bool& dyn__findRequired();
    // Get instance field reference: private System.Boolean _exceptionPending
    [[deprecated("Use field access instead!")]] bool& dyn__exceptionPending();
    // Get instance field reference: private System.Int32 <CodecBufferSize>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$CodecBufferSize$k__BackingField();
    // public System.Int32 get_CodecBufferSize()
    // Offset: 0x1F4D2F8
    int get_CodecBufferSize();
    // private System.Void SetupStream()
    // Offset: 0x1F5F890
    void SetupStream();
    // System.IO.Stream get_ReadStream()
    // Offset: 0x1F4D570
    ::System::IO::Stream* get_ReadStream();
    // public override System.String ToString()
    // Offset: 0x1F5F808
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // public override System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x1F5F8FC
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    int Read(::ArrayW<uint8_t> buffer, int offset, int count);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1F5FA90
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override System.Boolean get_CanRead()
    // Offset: 0x1F5FAEC
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanRead()
    bool get_CanRead();
    // public override System.Boolean get_CanSeek()
    // Offset: 0x1F5FAF4
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanSeek()
    bool get_CanSeek();
    // public override System.Boolean get_CanWrite()
    // Offset: 0x1F5FB28
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanWrite()
    bool get_CanWrite();
    // public override System.Int64 get_Length()
    // Offset: 0x1F5FB30
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Length()
    int64_t get_Length();
    // public override System.Int64 get_Position()
    // Offset: 0x1F5FB64
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Position()
    int64_t get_Position();
    // public override System.Void set_Position(System.Int64 value)
    // Offset: 0x1F5FB98
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_Position(System.Int64 value)
    void set_Position(int64_t value);
    // public override System.Void Flush()
    // Offset: 0x1F5FBAC
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Flush()
    void Flush();
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x1F5FC20
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    void Write(::ArrayW<uint8_t> buffer, int offset, int count);
    // public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    // Offset: 0x1F5FC94
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    int64_t Seek(int64_t offset, ::System::IO::SeekOrigin origin);
    // public override System.Void SetLength(System.Int64 value)
    // Offset: 0x1F5FCEC
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::SetLength(System.Int64 value)
    void SetLength(int64_t value);
  }; // Pathfinding.Ionic.Zip.ZipInputStream
  #pragma pack(pop)
  static check_size<sizeof(ZipInputStream), 108 + sizeof(int)> __Pathfinding_Ionic_Zip_ZipInputStreamSizeCheck;
  static_assert(sizeof(ZipInputStream) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::get_CodecBufferSize
// Il2CppName: get_CodecBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipInputStream::*)()>(&Pathfinding::Ionic::Zip::ZipInputStream::get_CodecBufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "get_CodecBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::SetupStream
// Il2CppName: SetupStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipInputStream::*)()>(&Pathfinding::Ionic::Zip::ZipInputStream::SetupStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "SetupStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::get_ReadStream
// Il2CppName: get_ReadStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (Pathfinding::Ionic::Zip::ZipInputStream::*)()>(&Pathfinding::Ionic::Zip::ZipInputStream::get_ReadStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "get_ReadStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipInputStream::*)()>(&Pathfinding::Ionic::Zip::ZipInputStream::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipInputStream::*)(::ArrayW<uint8_t>, int, int)>(&Pathfinding::Ionic::Zip::ZipInputStream::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipInputStream::*)(bool)>(&Pathfinding::Ionic::Zip::ZipInputStream::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipInputStream::*)()>(&Pathfinding::Ionic::Zip::ZipInputStream::get_CanRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::get_CanSeek
// Il2CppName: get_CanSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipInputStream::*)()>(&Pathfinding::Ionic::Zip::ZipInputStream::get_CanSeek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "get_CanSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipInputStream::*)()>(&Pathfinding::Ionic::Zip::ZipInputStream::get_CanWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipInputStream::*)()>(&Pathfinding::Ionic::Zip::ZipInputStream::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipInputStream::*)()>(&Pathfinding::Ionic::Zip::ZipInputStream::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipInputStream::*)(int64_t)>(&Pathfinding::Ionic::Zip::ZipInputStream::set_Position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipInputStream::*)()>(&Pathfinding::Ionic::Zip::ZipInputStream::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipInputStream::*)(::ArrayW<uint8_t>, int, int)>(&Pathfinding::Ionic::Zip::ZipInputStream::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipInputStream::*)(int64_t, ::System::IO::SeekOrigin)>(&Pathfinding::Ionic::Zip::ZipInputStream::Seek)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("System.IO", "SeekOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, origin});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipInputStream::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipInputStream::*)(int64_t)>(&Pathfinding::Ionic::Zip::ZipInputStream::SetLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipInputStream*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
