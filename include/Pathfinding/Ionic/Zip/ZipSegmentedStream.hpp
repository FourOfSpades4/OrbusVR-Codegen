// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Completed forward declares
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipSegmentedStream
  class ZipSegmentedStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Ionic::Zip::ZipSegmentedStream);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Ionic::Zip::ZipSegmentedStream*, "Pathfinding.Ionic.Zip", "ZipSegmentedStream");
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Size: 0x69
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Ionic.Zip.ZipSegmentedStream
  // [TokenAttribute] Offset: FFFFFFFF
  class ZipSegmentedStream : public ::System::IO::Stream {
    public:
    // Nested type: ::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode
    struct RwMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct RwMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RwMode
      constexpr RwMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode None
      static constexpr const int None = 0;
      // Get static field: static public Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode None
      static ::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode _get_None();
      // Set static field: static public Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode None
      static void _set_None(::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode value);
      // static field const value: static public Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode ReadOnly
      static constexpr const int ReadOnly = 1;
      // Get static field: static public Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode ReadOnly
      static ::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode _get_ReadOnly();
      // Set static field: static public Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode ReadOnly
      static void _set_ReadOnly(::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode value);
      // static field const value: static public Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode Write
      static constexpr const int Write = 2;
      // Get static field: static public Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode Write
      static ::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode _get_Write();
      // Set static field: static public Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode Write
      static void _set_Write(::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode
    #pragma pack(pop)
    static check_size<sizeof(ZipSegmentedStream::RwMode), 0 + sizeof(int)> __Pathfinding_Ionic_Zip_ZipSegmentedStream_RwModeSizeCheck;
    static_assert(sizeof(ZipSegmentedStream::RwMode) == 0x4);
    public:
    // private Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode rwMode
    // Size: 0x4
    // Offset: 0x28
    ::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode rwMode;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode) == 0x4);
    // private System.Boolean _exceptionPending
    // Size: 0x1
    // Offset: 0x2C
    bool exceptionPending;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: exceptionPending and: baseName
    char __padding1[0x3] = {};
    // private System.String _baseName
    // Size: 0x8
    // Offset: 0x30
    ::StringW baseName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _baseDir
    // Size: 0x8
    // Offset: 0x38
    ::StringW baseDir;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _currentName
    // Size: 0x8
    // Offset: 0x40
    ::StringW currentName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _currentTempName
    // Size: 0x8
    // Offset: 0x48
    ::StringW currentTempName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.UInt32 _currentDiskNumber
    // Size: 0x4
    // Offset: 0x50
    uint currentDiskNumber;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 _maxDiskNumber
    // Size: 0x4
    // Offset: 0x54
    uint maxDiskNumber;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Int32 _maxSegmentSize
    // Size: 0x4
    // Offset: 0x58
    int maxSegmentSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: maxSegmentSize and: innerStream
    char __padding8[0x4] = {};
    // private System.IO.Stream _innerStream
    // Size: 0x8
    // Offset: 0x60
    ::System::IO::Stream* innerStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABC008
    // private System.Boolean <ContiguousWrite>k__BackingField
    // Size: 0x1
    // Offset: 0x68
    bool ContiguousWrite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipSegmentedStream/RwMode rwMode
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode& dyn_rwMode();
    // Get instance field reference: private System.Boolean _exceptionPending
    [[deprecated("Use field access instead!")]] bool& dyn__exceptionPending();
    // Get instance field reference: private System.String _baseName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__baseName();
    // Get instance field reference: private System.String _baseDir
    [[deprecated("Use field access instead!")]] ::StringW& dyn__baseDir();
    // Get instance field reference: private System.String _currentName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__currentName();
    // Get instance field reference: private System.String _currentTempName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__currentTempName();
    // Get instance field reference: private System.UInt32 _currentDiskNumber
    [[deprecated("Use field access instead!")]] uint& dyn__currentDiskNumber();
    // Get instance field reference: private System.UInt32 _maxDiskNumber
    [[deprecated("Use field access instead!")]] uint& dyn__maxDiskNumber();
    // Get instance field reference: private System.Int32 _maxSegmentSize
    [[deprecated("Use field access instead!")]] int& dyn__maxSegmentSize();
    // Get instance field reference: private System.IO.Stream _innerStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__innerStream();
    // Get instance field reference: private System.Boolean <ContiguousWrite>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ContiguousWrite$k__BackingField();
    // private System.Void .ctor()
    // Offset: 0x25D6D24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZipSegmentedStream* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipSegmentedStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZipSegmentedStream*, creationType>()));
    }
    // static public Pathfinding.Ionic.Zip.ZipSegmentedStream ForReading(System.String name, System.UInt32 initialDiskNumber, System.UInt32 maxDiskNumber)
    // Offset: 0x25D6D94
    static ::Pathfinding::Ionic::Zip::ZipSegmentedStream* ForReading(::StringW name, uint initialDiskNumber, uint maxDiskNumber);
    // static public Pathfinding.Ionic.Zip.ZipSegmentedStream ForWriting(System.String name, System.Int32 maxSegmentSize)
    // Offset: 0x25D6EEC
    static ::Pathfinding::Ionic::Zip::ZipSegmentedStream* ForWriting(::StringW name, int maxSegmentSize);
    // static public System.IO.Stream ForUpdate(System.String name, System.UInt32 diskNumber)
    // Offset: 0x25D71B8
    static ::System::IO::Stream* ForUpdate(::StringW name, uint diskNumber);
    // public System.Boolean get_ContiguousWrite()
    // Offset: 0x25D72F0
    bool get_ContiguousWrite();
    // public System.Void set_ContiguousWrite(System.Boolean value)
    // Offset: 0x25D72F8
    void set_ContiguousWrite(bool value);
    // public System.UInt32 get_CurrentSegment()
    // Offset: 0x25D7304
    uint get_CurrentSegment();
    // private System.Void set_CurrentSegment(System.UInt32 value)
    // Offset: 0x25D6E74
    void set_CurrentSegment(uint value);
    // public System.String get_CurrentName()
    // Offset: 0x25D730C
    ::StringW get_CurrentName();
    // public System.String get_CurrentTempName()
    // Offset: 0x25D7474
    ::StringW get_CurrentTempName();
    // private System.String _NameForSegment(System.UInt32 diskNumber)
    // Offset: 0x25D7340
    ::StringW _NameForSegment(uint diskNumber);
    // public System.UInt32 ComputeSegment(System.Int32 length)
    // Offset: 0x25D747C
    uint ComputeSegment(int length);
    // private System.Void _SetReadStream()
    // Offset: 0x25D6E80
    void _SetReadStream();
    // private System.Void _SetWriteStream(System.UInt32 increment)
    // Offset: 0x25D7024
    void _SetWriteStream(uint increment);
    // public System.Int64 TruncateBackward(System.UInt32 diskNumber, System.Int64 offset)
    // Offset: 0x25D7AF8
    int64_t TruncateBackward(uint diskNumber, int64_t offset);
    // public override System.String ToString()
    // Offset: 0x25D74D8
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // public override System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x25D7710
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    int Read(::ArrayW<uint8_t> buffer, int offset, int count);
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x25D7930
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    void Write(::ArrayW<uint8_t> buffer, int offset, int count);
    // public override System.Boolean get_CanRead()
    // Offset: 0x25D7DB4
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanRead()
    bool get_CanRead();
    // public override System.Boolean get_CanSeek()
    // Offset: 0x25D7DDC
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanSeek()
    bool get_CanSeek();
    // public override System.Boolean get_CanWrite()
    // Offset: 0x25D7DF4
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanWrite()
    bool get_CanWrite();
    // public override System.Void Flush()
    // Offset: 0x25D7E1C
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Flush()
    void Flush();
    // public override System.Int64 get_Length()
    // Offset: 0x25D7E54
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Length()
    int64_t get_Length();
    // public override System.Int64 get_Position()
    // Offset: 0x25D7E88
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Position()
    int64_t get_Position();
    // public override System.Void set_Position(System.Int64 value)
    // Offset: 0x25D7EBC
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_Position(System.Int64 value)
    void set_Position(int64_t value);
    // public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    // Offset: 0x25D7EF8
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    int64_t Seek(int64_t offset, ::System::IO::SeekOrigin origin);
    // public override System.Void SetLength(System.Int64 value)
    // Offset: 0x25D7F48
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::SetLength(System.Int64 value)
    void SetLength(int64_t value);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x25D8004
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
  }; // Pathfinding.Ionic.Zip.ZipSegmentedStream
  #pragma pack(pop)
  static check_size<sizeof(ZipSegmentedStream), 104 + sizeof(bool)> __Pathfinding_Ionic_Zip_ZipSegmentedStreamSizeCheck;
  static_assert(sizeof(ZipSegmentedStream) == 0x69);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Ionic::Zip::ZipSegmentedStream::RwMode, "Pathfinding.Ionic.Zip", "ZipSegmentedStream/RwMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::ForReading
// Il2CppName: ForReading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipSegmentedStream* (*)(::StringW, uint, uint)>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::ForReading)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* initialDiskNumber = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* maxDiskNumber = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "ForReading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, initialDiskNumber, maxDiskNumber});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::ForWriting
// Il2CppName: ForWriting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipSegmentedStream* (*)(::StringW, int)>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::ForWriting)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* maxSegmentSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "ForWriting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, maxSegmentSize});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::ForUpdate
// Il2CppName: ForUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (*)(::StringW, uint)>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::ForUpdate)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* diskNumber = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "ForUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, diskNumber});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::get_ContiguousWrite
// Il2CppName: get_ContiguousWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)()>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::get_ContiguousWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "get_ContiguousWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::set_ContiguousWrite
// Il2CppName: set_ContiguousWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)(bool)>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::set_ContiguousWrite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "set_ContiguousWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CurrentSegment
// Il2CppName: get_CurrentSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)()>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CurrentSegment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "get_CurrentSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::set_CurrentSegment
// Il2CppName: set_CurrentSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)(uint)>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::set_CurrentSegment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "set_CurrentSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CurrentName
// Il2CppName: get_CurrentName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)()>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CurrentName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "get_CurrentName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CurrentTempName
// Il2CppName: get_CurrentTempName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)()>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CurrentTempName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "get_CurrentTempName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::_NameForSegment
// Il2CppName: _NameForSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)(uint)>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::_NameForSegment)> {
  static const MethodInfo* get() {
    static auto* diskNumber = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "_NameForSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{diskNumber});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::ComputeSegment
// Il2CppName: ComputeSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)(int)>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::ComputeSegment)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "ComputeSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::_SetReadStream
// Il2CppName: _SetReadStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)()>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::_SetReadStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "_SetReadStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::_SetWriteStream
// Il2CppName: _SetWriteStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)(uint)>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::_SetWriteStream)> {
  static const MethodInfo* get() {
    static auto* increment = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "_SetWriteStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{increment});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::TruncateBackward
// Il2CppName: TruncateBackward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)(uint, int64_t)>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::TruncateBackward)> {
  static const MethodInfo* get() {
    static auto* diskNumber = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "TruncateBackward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{diskNumber, offset});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)()>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)(::ArrayW<uint8_t>, int, int)>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)(::ArrayW<uint8_t>, int, int)>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)()>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CanRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CanSeek
// Il2CppName: get_CanSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)()>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CanSeek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "get_CanSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)()>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::get_CanWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)()>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)()>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)()>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)(int64_t)>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::set_Position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)(int64_t, ::System::IO::SeekOrigin)>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::Seek)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("System.IO", "SeekOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, origin});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)(int64_t)>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::SetLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipSegmentedStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipSegmentedStream::*)(bool)>(&Pathfinding::Ionic::Zip::ZipSegmentedStream::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipSegmentedStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
