// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.EventArgs
#include "System/EventArgs.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipProgressEventType
#include "Pathfinding/Ionic/Zip/ZipProgressEventType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Ionic::Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipEntry
  class ZipEntry;
}
// Completed forward declares
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipProgressEventArgs
  class ZipProgressEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Ionic::Zip::ZipProgressEventArgs);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Ionic::Zip::ZipProgressEventArgs*, "Pathfinding.Ionic.Zip", "ZipProgressEventArgs");
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Ionic.Zip.ZipProgressEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  class ZipProgressEventArgs : public ::System::EventArgs {
    public:
    public:
    // private System.Int32 _entriesTotal
    // Size: 0x4
    // Offset: 0x10
    int entriesTotal;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _cancel
    // Size: 0x1
    // Offset: 0x14
    bool cancel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: cancel and: latestEntry
    char __padding1[0x3] = {};
    // private Pathfinding.Ionic.Zip.ZipEntry _latestEntry
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::Ionic::Zip::ZipEntry* latestEntry;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipEntry*) == 0x8);
    // private Pathfinding.Ionic.Zip.ZipProgressEventType _flavor
    // Size: 0x4
    // Offset: 0x20
    ::Pathfinding::Ionic::Zip::ZipProgressEventType flavor;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipProgressEventType) == 0x4);
    // Padding between fields: flavor and: archiveName
    char __padding3[0x4] = {};
    // private System.String _archiveName
    // Size: 0x8
    // Offset: 0x28
    ::StringW archiveName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int64 _bytesTransferred
    // Size: 0x8
    // Offset: 0x30
    int64_t bytesTransferred;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 _totalBytesToTransfer
    // Size: 0x8
    // Offset: 0x38
    int64_t totalBytesToTransfer;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Get instance field reference: private System.Int32 _entriesTotal
    [[deprecated("Use field access instead!")]] int& dyn__entriesTotal();
    // Get instance field reference: private System.Boolean _cancel
    [[deprecated("Use field access instead!")]] bool& dyn__cancel();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipEntry _latestEntry
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipEntry*& dyn__latestEntry();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipProgressEventType _flavor
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipProgressEventType& dyn__flavor();
    // Get instance field reference: private System.String _archiveName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__archiveName();
    // Get instance field reference: private System.Int64 _bytesTransferred
    [[deprecated("Use field access instead!")]] int64_t& dyn__bytesTransferred();
    // Get instance field reference: private System.Int64 _totalBytesToTransfer
    [[deprecated("Use field access instead!")]] int64_t& dyn__totalBytesToTransfer();
    // System.Void .ctor()
    // Offset: 0x25D6C00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZipProgressEventArgs* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipProgressEventArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZipProgressEventArgs*, creationType>()));
    }
    // System.Void .ctor(System.String archiveName, Pathfinding.Ionic.Zip.ZipProgressEventType flavor)
    // Offset: 0x25D6C68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZipProgressEventArgs* New_ctor(::StringW archiveName, ::Pathfinding::Ionic::Zip::ZipProgressEventType flavor) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipProgressEventArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZipProgressEventArgs*, creationType>(archiveName, flavor)));
    }
    // public System.Void set_EntriesTotal(System.Int32 value)
    // Offset: 0x25D6CEC
    void set_EntriesTotal(int value);
    // public System.Void set_CurrentEntry(Pathfinding.Ionic.Zip.ZipEntry value)
    // Offset: 0x25D6CF4
    void set_CurrentEntry(::Pathfinding::Ionic::Zip::ZipEntry* value);
    // public System.Boolean get_Cancel()
    // Offset: 0x25D6CFC
    bool get_Cancel();
    // public System.Void set_EventType(Pathfinding.Ionic.Zip.ZipProgressEventType value)
    // Offset: 0x25D6D04
    void set_EventType(::Pathfinding::Ionic::Zip::ZipProgressEventType value);
    // public System.Void set_ArchiveName(System.String value)
    // Offset: 0x25D6D0C
    void set_ArchiveName(::StringW value);
    // public System.Void set_BytesTransferred(System.Int64 value)
    // Offset: 0x25D6D14
    void set_BytesTransferred(int64_t value);
    // public System.Void set_TotalBytesToTransfer(System.Int64 value)
    // Offset: 0x25D6D1C
    void set_TotalBytesToTransfer(int64_t value);
  }; // Pathfinding.Ionic.Zip.ZipProgressEventArgs
  #pragma pack(pop)
  static check_size<sizeof(ZipProgressEventArgs), 56 + sizeof(int64_t)> __Pathfinding_Ionic_Zip_ZipProgressEventArgsSizeCheck;
  static_assert(sizeof(ZipProgressEventArgs) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipProgressEventArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipProgressEventArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipProgressEventArgs::set_EntriesTotal
// Il2CppName: set_EntriesTotal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipProgressEventArgs::*)(int)>(&Pathfinding::Ionic::Zip::ZipProgressEventArgs::set_EntriesTotal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipProgressEventArgs*), "set_EntriesTotal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipProgressEventArgs::set_CurrentEntry
// Il2CppName: set_CurrentEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipProgressEventArgs::*)(::Pathfinding::Ionic::Zip::ZipEntry*)>(&Pathfinding::Ionic::Zip::ZipProgressEventArgs::set_CurrentEntry)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipProgressEventArgs*), "set_CurrentEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipProgressEventArgs::get_Cancel
// Il2CppName: get_Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipProgressEventArgs::*)()>(&Pathfinding::Ionic::Zip::ZipProgressEventArgs::get_Cancel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipProgressEventArgs*), "get_Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipProgressEventArgs::set_EventType
// Il2CppName: set_EventType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipProgressEventArgs::*)(::Pathfinding::Ionic::Zip::ZipProgressEventType)>(&Pathfinding::Ionic::Zip::ZipProgressEventArgs::set_EventType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipProgressEventType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipProgressEventArgs*), "set_EventType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipProgressEventArgs::set_ArchiveName
// Il2CppName: set_ArchiveName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipProgressEventArgs::*)(::StringW)>(&Pathfinding::Ionic::Zip::ZipProgressEventArgs::set_ArchiveName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipProgressEventArgs*), "set_ArchiveName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipProgressEventArgs::set_BytesTransferred
// Il2CppName: set_BytesTransferred
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipProgressEventArgs::*)(int64_t)>(&Pathfinding::Ionic::Zip::ZipProgressEventArgs::set_BytesTransferred)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipProgressEventArgs*), "set_BytesTransferred", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipProgressEventArgs::set_TotalBytesToTransfer
// Il2CppName: set_TotalBytesToTransfer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipProgressEventArgs::*)(int64_t)>(&Pathfinding::Ionic::Zip::ZipProgressEventArgs::set_TotalBytesToTransfer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipProgressEventArgs*), "set_TotalBytesToTransfer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
