// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: Zip64Option
  struct Zip64Option;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Ionic::Zip::Zip64Option, "Pathfinding.Ionic.Zip", "Zip64Option");
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Ionic.Zip.Zip64Option
  // [TokenAttribute] Offset: FFFFFFFF
  struct Zip64Option/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Zip64Option
    constexpr Zip64Option(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Pathfinding.Ionic.Zip.Zip64Option Default
    static constexpr const int Default = 0;
    // Get static field: static public Pathfinding.Ionic.Zip.Zip64Option Default
    static ::Pathfinding::Ionic::Zip::Zip64Option _get_Default();
    // Set static field: static public Pathfinding.Ionic.Zip.Zip64Option Default
    static void _set_Default(::Pathfinding::Ionic::Zip::Zip64Option value);
    // static field const value: static public Pathfinding.Ionic.Zip.Zip64Option Never
    static constexpr const int Never = 0;
    // Get static field: static public Pathfinding.Ionic.Zip.Zip64Option Never
    static ::Pathfinding::Ionic::Zip::Zip64Option _get_Never();
    // Set static field: static public Pathfinding.Ionic.Zip.Zip64Option Never
    static void _set_Never(::Pathfinding::Ionic::Zip::Zip64Option value);
    // static field const value: static public Pathfinding.Ionic.Zip.Zip64Option AsNecessary
    static constexpr const int AsNecessary = 1;
    // Get static field: static public Pathfinding.Ionic.Zip.Zip64Option AsNecessary
    static ::Pathfinding::Ionic::Zip::Zip64Option _get_AsNecessary();
    // Set static field: static public Pathfinding.Ionic.Zip.Zip64Option AsNecessary
    static void _set_AsNecessary(::Pathfinding::Ionic::Zip::Zip64Option value);
    // static field const value: static public Pathfinding.Ionic.Zip.Zip64Option Always
    static constexpr const int Always = 2;
    // Get static field: static public Pathfinding.Ionic.Zip.Zip64Option Always
    static ::Pathfinding::Ionic::Zip::Zip64Option _get_Always();
    // Set static field: static public Pathfinding.Ionic.Zip.Zip64Option Always
    static void _set_Always(::Pathfinding::Ionic::Zip::Zip64Option value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Pathfinding.Ionic.Zip.Zip64Option
  #pragma pack(pop)
  static check_size<sizeof(Zip64Option), 0 + sizeof(int)> __Pathfinding_Ionic_Zip_Zip64OptionSizeCheck;
  static_assert(sizeof(Zip64Option) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
