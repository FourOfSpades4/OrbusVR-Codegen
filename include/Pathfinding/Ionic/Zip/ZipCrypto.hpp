// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Ionic::Crc
namespace Pathfinding::Ionic::Crc {
  // Forward declaring type: CRC32
  class CRC32;
}
// Forward declaring namespace: Pathfinding::Ionic::Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipEntry
  class ZipEntry;
}
// Completed forward declares
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipCrypto
  class ZipCrypto;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Ionic::Zip::ZipCrypto);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Ionic::Zip::ZipCrypto*, "Pathfinding.Ionic.Zip", "ZipCrypto");
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Ionic.Zip.ZipCrypto
  // [TokenAttribute] Offset: FFFFFFFF
  class ZipCrypto : public ::Il2CppObject {
    public:
    public:
    // private System.UInt32[] _Keys
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint> Keys;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // private Pathfinding.Ionic.Crc.CRC32 crc32
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::Ionic::Crc::CRC32* crc32;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Crc::CRC32*) == 0x8);
    public:
    // Get instance field reference: private System.UInt32[] _Keys
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn__Keys();
    // Get instance field reference: private Pathfinding.Ionic.Crc.CRC32 crc32
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Crc::CRC32*& dyn_crc32();
    // private System.Void .ctor()
    // Offset: 0x1F4D578
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZipCrypto* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipCrypto::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZipCrypto*, creationType>()));
    }
    // static public Pathfinding.Ionic.Zip.ZipCrypto ForWrite(System.String password)
    // Offset: 0x1F4D630
    static ::Pathfinding::Ionic::Zip::ZipCrypto* ForWrite(::StringW password);
    // static public Pathfinding.Ionic.Zip.ZipCrypto ForRead(System.String password, Pathfinding.Ionic.Zip.ZipEntry e)
    // Offset: 0x1F4D7D0
    static ::Pathfinding::Ionic::Zip::ZipCrypto* ForRead(::StringW password, ::Pathfinding::Ionic::Zip::ZipEntry* e);
    // private System.Byte get_MagicByte()
    // Offset: 0x1F4DAF0
    uint8_t get_MagicByte();
    // public System.Byte[] DecryptMessage(System.Byte[] cipherText, System.Int32 length)
    // Offset: 0x1F4C744
    ::ArrayW<uint8_t> DecryptMessage(::ArrayW<uint8_t> cipherText, int length);
    // public System.Byte[] EncryptMessage(System.Byte[] plainText, System.Int32 length)
    // Offset: 0x1F4CADC
    ::ArrayW<uint8_t> EncryptMessage(::ArrayW<uint8_t> plainText, int length);
    // public System.Void InitCipher(System.String passphrase)
    // Offset: 0x1F4D6E8
    void InitCipher(::StringW passphrase);
    // private System.Void UpdateKeys(System.Byte byteValue)
    // Offset: 0x1F4DB50
    void UpdateKeys(uint8_t byteValue);
  }; // Pathfinding.Ionic.Zip.ZipCrypto
  #pragma pack(pop)
  static check_size<sizeof(ZipCrypto), 24 + sizeof(::Pathfinding::Ionic::Crc::CRC32*)> __Pathfinding_Ionic_Zip_ZipCryptoSizeCheck;
  static_assert(sizeof(ZipCrypto) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipCrypto::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipCrypto::ForWrite
// Il2CppName: ForWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipCrypto* (*)(::StringW)>(&Pathfinding::Ionic::Zip::ZipCrypto::ForWrite)> {
  static const MethodInfo* get() {
    static auto* password = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipCrypto*), "ForWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{password});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipCrypto::ForRead
// Il2CppName: ForRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipCrypto* (*)(::StringW, ::Pathfinding::Ionic::Zip::ZipEntry*)>(&Pathfinding::Ionic::Zip::ZipCrypto::ForRead)> {
  static const MethodInfo* get() {
    static auto* password = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipCrypto*), "ForRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{password, e});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipCrypto::get_MagicByte
// Il2CppName: get_MagicByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (Pathfinding::Ionic::Zip::ZipCrypto::*)()>(&Pathfinding::Ionic::Zip::ZipCrypto::get_MagicByte)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipCrypto*), "get_MagicByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipCrypto::DecryptMessage
// Il2CppName: DecryptMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Pathfinding::Ionic::Zip::ZipCrypto::*)(::ArrayW<uint8_t>, int)>(&Pathfinding::Ionic::Zip::ZipCrypto::DecryptMessage)> {
  static const MethodInfo* get() {
    static auto* cipherText = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipCrypto*), "DecryptMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cipherText, length});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipCrypto::EncryptMessage
// Il2CppName: EncryptMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Pathfinding::Ionic::Zip::ZipCrypto::*)(::ArrayW<uint8_t>, int)>(&Pathfinding::Ionic::Zip::ZipCrypto::EncryptMessage)> {
  static const MethodInfo* get() {
    static auto* plainText = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipCrypto*), "EncryptMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{plainText, length});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipCrypto::InitCipher
// Il2CppName: InitCipher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipCrypto::*)(::StringW)>(&Pathfinding::Ionic::Zip::ZipCrypto::InitCipher)> {
  static const MethodInfo* get() {
    static auto* passphrase = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipCrypto*), "InitCipher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passphrase});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipCrypto::UpdateKeys
// Il2CppName: UpdateKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipCrypto::*)(uint8_t)>(&Pathfinding::Ionic::Zip::ZipCrypto::UpdateKeys)> {
  static const MethodInfo* get() {
    static auto* byteValue = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipCrypto*), "UpdateKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{byteValue});
  }
};
