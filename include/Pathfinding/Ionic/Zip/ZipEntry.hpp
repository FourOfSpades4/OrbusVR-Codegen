// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: Pathfinding.Ionic.Zlib.CompressionLevel
#include "Pathfinding/Ionic/Zlib/CompressionLevel.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipEntrySource
#include "Pathfinding/Ionic/Zip/ZipEntrySource.hpp"
// Including type: Pathfinding.Ionic.Zip.EncryptionAlgorithm
#include "Pathfinding/Ionic/Zip/EncryptionAlgorithm.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipEntryTimestamp
#include "Pathfinding/Ionic/Zip/ZipEntryTimestamp.hpp"
// Including type: Pathfinding.Ionic.Zip.ExtractExistingFileAction
#include "Pathfinding/Ionic/Zip/ExtractExistingFileAction.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipErrorAction
#include "Pathfinding/Ionic/Zip/ZipErrorAction.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipOption
#include "Pathfinding/Ionic/Zip/ZipOption.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Ionic::Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipCrypto
  class ZipCrypto;
  // Forward declaring type: ZipContainer
  class ZipContainer;
  // Forward declaring type: WriteDelegate
  class WriteDelegate;
  // Forward declaring type: OpenDelegate
  class OpenDelegate;
  // Forward declaring type: CloseDelegate
  class CloseDelegate;
  // Forward declaring type: SetCompressionCallback
  class SetCompressionCallback;
  // Forward declaring type: ZipFile
  class ZipFile;
  // Forward declaring type: CountingStream
  class CountingStream;
  // Forward declaring type: CompressionMethod
  struct CompressionMethod;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Pathfinding::Ionic::Crc
namespace Pathfinding::Ionic::Crc {
  // Forward declaring type: CrcCalculatorStream
  class CrcCalculatorStream;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipEntry
  class ZipEntry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Ionic::Zip::ZipEntry);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Ionic::Zip::ZipEntry*, "Pathfinding.Ionic.Zip", "ZipEntry");
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // WARNING Size may be invalid!
  // Autogenerated type: Pathfinding.Ionic.Zip.ZipEntry
  // [TokenAttribute] Offset: FFFFFFFF
  // [GuidAttribute] Offset: ABBCDC
  // [ComVisibleAttribute] Offset: ABBCDC
  // [ClassInterfaceAttribute] Offset: ABBCDC
  class ZipEntry : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::Ionic::Zip::ZipEntry::CopyHelper
    class CopyHelper;
    public:
    // private System.Int16 _VersionMadeBy
    // Size: 0x2
    // Offset: 0x10
    int16_t VersionMadeBy;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int16 _InternalFileAttrs
    // Size: 0x2
    // Offset: 0x12
    int16_t InternalFileAttrs;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int32 _ExternalFileAttrs
    // Size: 0x4
    // Offset: 0x14
    int ExternalFileAttrs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int16 _filenameLength
    // Size: 0x2
    // Offset: 0x18
    int16_t filenameLength;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int16 _extraFieldLength
    // Size: 0x2
    // Offset: 0x1A
    int16_t extraFieldLength;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int16 _commentLength
    // Size: 0x2
    // Offset: 0x1C
    int16_t commentLength;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.IO.Stream _inputDecryptorStream
    // Size: 0x8
    // Offset: 0x20
    ::System::IO::Stream* inputDecryptorStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.Object _outputLock
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* outputLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private Pathfinding.Ionic.Zip.ZipCrypto _zipCrypto_forExtract
    // Size: 0x8
    // Offset: 0x30
    ::Pathfinding::Ionic::Zip::ZipCrypto* zipCrypto_forExtract;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipCrypto*) == 0x8);
    // private Pathfinding.Ionic.Zip.ZipCrypto _zipCrypto_forWrite
    // Size: 0x8
    // Offset: 0x38
    ::Pathfinding::Ionic::Zip::ZipCrypto* zipCrypto_forWrite;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipCrypto*) == 0x8);
    // System.DateTime _LastModified
    // Size: 0x8
    // Offset: 0x40
    ::System::DateTime LastModified;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.DateTime _Mtime
    // Size: 0x8
    // Offset: 0x48
    ::System::DateTime Mtime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.DateTime _Atime
    // Size: 0x8
    // Offset: 0x50
    ::System::DateTime Atime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.DateTime _Ctime
    // Size: 0x8
    // Offset: 0x58
    ::System::DateTime Ctime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.Boolean _ntfsTimesAreSet
    // Size: 0x1
    // Offset: 0x60
    bool ntfsTimesAreSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _emitNtfsTimes
    // Size: 0x1
    // Offset: 0x61
    bool emitNtfsTimes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _emitUnixTimes
    // Size: 0x1
    // Offset: 0x62
    bool emitUnixTimes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _TrimVolumeFromFullyQualifiedPaths
    // Size: 0x1
    // Offset: 0x63
    bool TrimVolumeFromFullyQualifiedPaths;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.String _LocalFileName
    // Size: 0x8
    // Offset: 0x68
    ::StringW LocalFileName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _FileNameInArchive
    // Size: 0x8
    // Offset: 0x70
    ::StringW FileNameInArchive;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Int16 _VersionNeeded
    // Size: 0x2
    // Offset: 0x78
    int16_t VersionNeeded;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // System.Int16 _BitField
    // Size: 0x2
    // Offset: 0x7A
    int16_t BitField;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // System.Int16 _CompressionMethod
    // Size: 0x2
    // Offset: 0x7C
    int16_t CompressionMethod;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int16 _CompressionMethod_FromZipFile
    // Size: 0x2
    // Offset: 0x7E
    int16_t CompressionMethod_FromZipFile;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private Pathfinding.Ionic.Zlib.CompressionLevel _CompressionLevel
    // Size: 0x4
    // Offset: 0x80
    ::Pathfinding::Ionic::Zlib::CompressionLevel CompressionLevel;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zlib::CompressionLevel) == 0x4);
    // System.String _Comment
    // Size: 0x8
    // Offset: 0x88
    ::StringW Comment;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _IsDirectory
    // Size: 0x1
    // Offset: 0x90
    bool IsDirectory;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Byte[] _CommentBytes
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<uint8_t> CommentBytes;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.Int64 _CompressedSize
    // Size: 0x8
    // Offset: 0xA0
    int64_t CompressedSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int64 _CompressedFileDataSize
    // Size: 0x8
    // Offset: 0xA8
    int64_t CompressedFileDataSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int64 _UncompressedSize
    // Size: 0x8
    // Offset: 0xB0
    int64_t UncompressedSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int32 _TimeBlob
    // Size: 0x4
    // Offset: 0xB8
    int TimeBlob;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _crcCalculated
    // Size: 0x1
    // Offset: 0xBC
    bool crcCalculated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Int32 _Crc32
    // Size: 0x4
    // Offset: 0xC0
    int Crc32;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Byte[] _Extra
    // Size: 0x8
    // Offset: 0xC8
    ::ArrayW<uint8_t> Extra;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Boolean _metadataChanged
    // Size: 0x1
    // Offset: 0xD0
    bool metadataChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _restreamRequiredOnSave
    // Size: 0x1
    // Offset: 0xD1
    bool restreamRequiredOnSave;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _sourceIsEncrypted
    // Size: 0x1
    // Offset: 0xD2
    bool sourceIsEncrypted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _skippedDuringSave
    // Size: 0x1
    // Offset: 0xD3
    bool skippedDuringSave;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.UInt32 _diskNumber
    // Size: 0x4
    // Offset: 0xD4
    uint diskNumber;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Text.Encoding _actualEncoding
    // Size: 0x8
    // Offset: 0xD8
    ::System::Text::Encoding* actualEncoding;
    // Field size check
    static_assert(sizeof(::System::Text::Encoding*) == 0x8);
    // Pathfinding.Ionic.Zip.ZipContainer _container
    // Size: 0x8
    // Offset: 0xE0
    ::Pathfinding::Ionic::Zip::ZipContainer* container;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipContainer*) == 0x8);
    // private System.Int64 __FileDataPosition
    // Size: 0x8
    // Offset: 0xE8
    int64_t FileDataPosition;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Byte[] _EntryHeader
    // Size: 0x8
    // Offset: 0xF0
    ::ArrayW<uint8_t> EntryHeader;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.Int64 _RelativeOffsetOfLocalHeader
    // Size: 0x8
    // Offset: 0xF8
    int64_t RelativeOffsetOfLocalHeader;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 _future_ROLH
    // Size: 0x8
    // Offset: 0x100
    int64_t future_ROLH;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 _TotalEntrySize
    // Size: 0x8
    // Offset: 0x108
    int64_t TotalEntrySize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int32 _LengthOfHeader
    // Size: 0x4
    // Offset: 0x110
    int LengthOfHeader;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _LengthOfTrailer
    // Size: 0x4
    // Offset: 0x114
    int LengthOfTrailer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean _InputUsesZip64
    // Size: 0x1
    // Offset: 0x118
    bool InputUsesZip64;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.UInt32 _UnsupportedAlgorithmId
    // Size: 0x4
    // Offset: 0x11C
    uint UnsupportedAlgorithmId;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.String _Password
    // Size: 0x8
    // Offset: 0x120
    ::StringW Password;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // Pathfinding.Ionic.Zip.ZipEntrySource _Source
    // Size: 0x4
    // Offset: 0x128
    ::Pathfinding::Ionic::Zip::ZipEntrySource Source;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipEntrySource) == 0x4);
    // Pathfinding.Ionic.Zip.EncryptionAlgorithm _Encryption
    // Size: 0x4
    // Offset: 0x12C
    ::Pathfinding::Ionic::Zip::EncryptionAlgorithm Encryption;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::EncryptionAlgorithm) == 0x4);
    // Pathfinding.Ionic.Zip.EncryptionAlgorithm _Encryption_FromZipFile
    // Size: 0x4
    // Offset: 0x130
    ::Pathfinding::Ionic::Zip::EncryptionAlgorithm Encryption_FromZipFile;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::EncryptionAlgorithm) == 0x4);
    // System.Byte[] _WeakEncryptionHeader
    // Size: 0x8
    // Offset: 0x138
    ::ArrayW<uint8_t> WeakEncryptionHeader;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.IO.Stream _archiveStream
    // Size: 0x8
    // Offset: 0x140
    ::System::IO::Stream* archiveStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.IO.Stream _sourceStream
    // Size: 0x8
    // Offset: 0x148
    ::System::IO::Stream* sourceStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.Nullable`1<System.Int64> _sourceStreamOriginalPosition
    // Size: 0xFFFFFFFF
    // Offset: 0x150
    ::System::Nullable_1<int64_t> sourceStreamOriginalPosition;
    // private System.Boolean _ioOperationCanceled
    // Size: 0x1
    // Offset: 0x160
    bool ioOperationCanceled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _presumeZip64
    // Size: 0x1
    // Offset: 0x161
    bool presumeZip64;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Nullable`1<System.Boolean> _entryRequiresZip64
    // Size: 0xFFFFFFFF
    // Offset: 0x162
    ::System::Nullable_1<bool> entryRequiresZip64;
    // private System.Nullable`1<System.Boolean> _OutputUsesZip64
    // Size: 0xFFFFFFFF
    // Offset: 0x164
    ::System::Nullable_1<bool> OutputUsesZip64;
    // private System.Boolean _IsText
    // Size: 0x1
    // Offset: 0x166
    bool IsText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Pathfinding.Ionic.Zip.ZipEntryTimestamp _timestamp
    // Size: 0x4
    // Offset: 0x168
    ::Pathfinding::Ionic::Zip::ZipEntryTimestamp timestamp;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipEntryTimestamp) == 0x4);
    // private Pathfinding.Ionic.Zip.WriteDelegate _WriteDelegate
    // Size: 0x8
    // Offset: 0x170
    ::Pathfinding::Ionic::Zip::WriteDelegate* WriteDelegate;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::WriteDelegate*) == 0x8);
    // private Pathfinding.Ionic.Zip.OpenDelegate _OpenDelegate
    // Size: 0x8
    // Offset: 0x178
    ::Pathfinding::Ionic::Zip::OpenDelegate* OpenDelegate;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::OpenDelegate*) == 0x8);
    // private Pathfinding.Ionic.Zip.CloseDelegate _CloseDelegate
    // Size: 0x8
    // Offset: 0x180
    ::Pathfinding::Ionic::Zip::CloseDelegate* CloseDelegate;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::CloseDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABBF08
    // private Pathfinding.Ionic.Zip.ExtractExistingFileAction <ExtractExistingFile>k__BackingField
    // Size: 0x4
    // Offset: 0x188
    ::Pathfinding::Ionic::Zip::ExtractExistingFileAction ExtractExistingFile;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ExtractExistingFileAction) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xABBF18
    // private Pathfinding.Ionic.Zip.ZipErrorAction <ZipErrorAction>k__BackingField
    // Size: 0x4
    // Offset: 0x18C
    ::Pathfinding::Ionic::Zip::ZipErrorAction ZipErrorAction;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipErrorAction) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xABBF28
    // private Pathfinding.Ionic.Zip.SetCompressionCallback <SetCompression>k__BackingField
    // Size: 0x8
    // Offset: 0x190
    ::Pathfinding::Ionic::Zip::SetCompressionCallback* SetCompression;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::SetCompressionCallback*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABBF38
    // private System.Text.Encoding <AlternateEncoding>k__BackingField
    // Size: 0x8
    // Offset: 0x198
    ::System::Text::Encoding* AlternateEncoding;
    // Field size check
    static_assert(sizeof(::System::Text::Encoding*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABBF48
    // private Pathfinding.Ionic.Zip.ZipOption <AlternateEncodingUsage>k__BackingField
    // Size: 0x4
    // Offset: 0x1A0
    ::Pathfinding::Ionic::Zip::ZipOption AlternateEncodingUsage;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipOption) == 0x4);
    public:
    // Get static field: static private System.Text.Encoding ibm437
    static ::System::Text::Encoding* _get_ibm437();
    // Set static field: static private System.Text.Encoding ibm437
    static void _set_ibm437(::System::Text::Encoding* value);
    // Get static field: static private System.DateTime _unixEpoch
    static ::System::DateTime _get__unixEpoch();
    // Set static field: static private System.DateTime _unixEpoch
    static void _set__unixEpoch(::System::DateTime value);
    // Get static field: static private System.DateTime _win32Epoch
    static ::System::DateTime _get__win32Epoch();
    // Set static field: static private System.DateTime _win32Epoch
    static void _set__win32Epoch(::System::DateTime value);
    // Get static field: static private System.DateTime _zeroHour
    static ::System::DateTime _get__zeroHour();
    // Set static field: static private System.DateTime _zeroHour
    static void _set__zeroHour(::System::DateTime value);
    // Get instance field reference: private System.Int16 _VersionMadeBy
    [[deprecated("Use field access instead!")]] int16_t& dyn__VersionMadeBy();
    // Get instance field reference: private System.Int16 _InternalFileAttrs
    [[deprecated("Use field access instead!")]] int16_t& dyn__InternalFileAttrs();
    // Get instance field reference: private System.Int32 _ExternalFileAttrs
    [[deprecated("Use field access instead!")]] int& dyn__ExternalFileAttrs();
    // Get instance field reference: private System.Int16 _filenameLength
    [[deprecated("Use field access instead!")]] int16_t& dyn__filenameLength();
    // Get instance field reference: private System.Int16 _extraFieldLength
    [[deprecated("Use field access instead!")]] int16_t& dyn__extraFieldLength();
    // Get instance field reference: private System.Int16 _commentLength
    [[deprecated("Use field access instead!")]] int16_t& dyn__commentLength();
    // Get instance field reference: private System.IO.Stream _inputDecryptorStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__inputDecryptorStream();
    // Get instance field reference: private System.Object _outputLock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__outputLock();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipCrypto _zipCrypto_forExtract
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipCrypto*& dyn__zipCrypto_forExtract();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipCrypto _zipCrypto_forWrite
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipCrypto*& dyn__zipCrypto_forWrite();
    // Get instance field reference: System.DateTime _LastModified
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn__LastModified();
    // Get instance field reference: private System.DateTime _Mtime
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn__Mtime();
    // Get instance field reference: private System.DateTime _Atime
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn__Atime();
    // Get instance field reference: private System.DateTime _Ctime
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn__Ctime();
    // Get instance field reference: private System.Boolean _ntfsTimesAreSet
    [[deprecated("Use field access instead!")]] bool& dyn__ntfsTimesAreSet();
    // Get instance field reference: private System.Boolean _emitNtfsTimes
    [[deprecated("Use field access instead!")]] bool& dyn__emitNtfsTimes();
    // Get instance field reference: private System.Boolean _emitUnixTimes
    [[deprecated("Use field access instead!")]] bool& dyn__emitUnixTimes();
    // Get instance field reference: private System.Boolean _TrimVolumeFromFullyQualifiedPaths
    [[deprecated("Use field access instead!")]] bool& dyn__TrimVolumeFromFullyQualifiedPaths();
    // Get instance field reference: System.String _LocalFileName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__LocalFileName();
    // Get instance field reference: private System.String _FileNameInArchive
    [[deprecated("Use field access instead!")]] ::StringW& dyn__FileNameInArchive();
    // Get instance field reference: System.Int16 _VersionNeeded
    [[deprecated("Use field access instead!")]] int16_t& dyn__VersionNeeded();
    // Get instance field reference: System.Int16 _BitField
    [[deprecated("Use field access instead!")]] int16_t& dyn__BitField();
    // Get instance field reference: System.Int16 _CompressionMethod
    [[deprecated("Use field access instead!")]] int16_t& dyn__CompressionMethod();
    // Get instance field reference: private System.Int16 _CompressionMethod_FromZipFile
    [[deprecated("Use field access instead!")]] int16_t& dyn__CompressionMethod_FromZipFile();
    // Get instance field reference: private Pathfinding.Ionic.Zlib.CompressionLevel _CompressionLevel
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionLevel& dyn__CompressionLevel();
    // Get instance field reference: System.String _Comment
    [[deprecated("Use field access instead!")]] ::StringW& dyn__Comment();
    // Get instance field reference: private System.Boolean _IsDirectory
    [[deprecated("Use field access instead!")]] bool& dyn__IsDirectory();
    // Get instance field reference: private System.Byte[] _CommentBytes
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__CommentBytes();
    // Get instance field reference: System.Int64 _CompressedSize
    [[deprecated("Use field access instead!")]] int64_t& dyn__CompressedSize();
    // Get instance field reference: System.Int64 _CompressedFileDataSize
    [[deprecated("Use field access instead!")]] int64_t& dyn__CompressedFileDataSize();
    // Get instance field reference: System.Int64 _UncompressedSize
    [[deprecated("Use field access instead!")]] int64_t& dyn__UncompressedSize();
    // Get instance field reference: System.Int32 _TimeBlob
    [[deprecated("Use field access instead!")]] int& dyn__TimeBlob();
    // Get instance field reference: private System.Boolean _crcCalculated
    [[deprecated("Use field access instead!")]] bool& dyn__crcCalculated();
    // Get instance field reference: System.Int32 _Crc32
    [[deprecated("Use field access instead!")]] int& dyn__Crc32();
    // Get instance field reference: System.Byte[] _Extra
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__Extra();
    // Get instance field reference: private System.Boolean _metadataChanged
    [[deprecated("Use field access instead!")]] bool& dyn__metadataChanged();
    // Get instance field reference: private System.Boolean _restreamRequiredOnSave
    [[deprecated("Use field access instead!")]] bool& dyn__restreamRequiredOnSave();
    // Get instance field reference: private System.Boolean _sourceIsEncrypted
    [[deprecated("Use field access instead!")]] bool& dyn__sourceIsEncrypted();
    // Get instance field reference: private System.Boolean _skippedDuringSave
    [[deprecated("Use field access instead!")]] bool& dyn__skippedDuringSave();
    // Get instance field reference: private System.UInt32 _diskNumber
    [[deprecated("Use field access instead!")]] uint& dyn__diskNumber();
    // Get instance field reference: private System.Text.Encoding _actualEncoding
    [[deprecated("Use field access instead!")]] ::System::Text::Encoding*& dyn__actualEncoding();
    // Get instance field reference: Pathfinding.Ionic.Zip.ZipContainer _container
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipContainer*& dyn__container();
    // Get instance field reference: private System.Int64 __FileDataPosition
    [[deprecated("Use field access instead!")]] int64_t& dyn___FileDataPosition();
    // Get instance field reference: private System.Byte[] _EntryHeader
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__EntryHeader();
    // Get instance field reference: System.Int64 _RelativeOffsetOfLocalHeader
    [[deprecated("Use field access instead!")]] int64_t& dyn__RelativeOffsetOfLocalHeader();
    // Get instance field reference: private System.Int64 _future_ROLH
    [[deprecated("Use field access instead!")]] int64_t& dyn__future_ROLH();
    // Get instance field reference: private System.Int64 _TotalEntrySize
    [[deprecated("Use field access instead!")]] int64_t& dyn__TotalEntrySize();
    // Get instance field reference: private System.Int32 _LengthOfHeader
    [[deprecated("Use field access instead!")]] int& dyn__LengthOfHeader();
    // Get instance field reference: private System.Int32 _LengthOfTrailer
    [[deprecated("Use field access instead!")]] int& dyn__LengthOfTrailer();
    // Get instance field reference: System.Boolean _InputUsesZip64
    [[deprecated("Use field access instead!")]] bool& dyn__InputUsesZip64();
    // Get instance field reference: private System.UInt32 _UnsupportedAlgorithmId
    [[deprecated("Use field access instead!")]] uint& dyn__UnsupportedAlgorithmId();
    // Get instance field reference: System.String _Password
    [[deprecated("Use field access instead!")]] ::StringW& dyn__Password();
    // Get instance field reference: Pathfinding.Ionic.Zip.ZipEntrySource _Source
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipEntrySource& dyn__Source();
    // Get instance field reference: Pathfinding.Ionic.Zip.EncryptionAlgorithm _Encryption
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::EncryptionAlgorithm& dyn__Encryption();
    // Get instance field reference: Pathfinding.Ionic.Zip.EncryptionAlgorithm _Encryption_FromZipFile
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::EncryptionAlgorithm& dyn__Encryption_FromZipFile();
    // Get instance field reference: System.Byte[] _WeakEncryptionHeader
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__WeakEncryptionHeader();
    // Get instance field reference: System.IO.Stream _archiveStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__archiveStream();
    // Get instance field reference: private System.IO.Stream _sourceStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__sourceStream();
    // Get instance field reference: private System.Nullable`1<System.Int64> _sourceStreamOriginalPosition
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<int64_t>& dyn__sourceStreamOriginalPosition();
    // Get instance field reference: private System.Boolean _ioOperationCanceled
    [[deprecated("Use field access instead!")]] bool& dyn__ioOperationCanceled();
    // Get instance field reference: private System.Boolean _presumeZip64
    [[deprecated("Use field access instead!")]] bool& dyn__presumeZip64();
    // Get instance field reference: private System.Nullable`1<System.Boolean> _entryRequiresZip64
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& dyn__entryRequiresZip64();
    // Get instance field reference: private System.Nullable`1<System.Boolean> _OutputUsesZip64
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& dyn__OutputUsesZip64();
    // Get instance field reference: private System.Boolean _IsText
    [[deprecated("Use field access instead!")]] bool& dyn__IsText();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipEntryTimestamp _timestamp
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipEntryTimestamp& dyn__timestamp();
    // Get instance field reference: private Pathfinding.Ionic.Zip.WriteDelegate _WriteDelegate
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::WriteDelegate*& dyn__WriteDelegate();
    // Get instance field reference: private Pathfinding.Ionic.Zip.OpenDelegate _OpenDelegate
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::OpenDelegate*& dyn__OpenDelegate();
    // Get instance field reference: private Pathfinding.Ionic.Zip.CloseDelegate _CloseDelegate
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::CloseDelegate*& dyn__CloseDelegate();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ExtractExistingFileAction <ExtractExistingFile>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ExtractExistingFileAction& dyn_$ExtractExistingFile$k__BackingField();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipErrorAction <ZipErrorAction>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipErrorAction& dyn_$ZipErrorAction$k__BackingField();
    // Get instance field reference: private Pathfinding.Ionic.Zip.SetCompressionCallback <SetCompression>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::SetCompressionCallback*& dyn_$SetCompression$k__BackingField();
    // Get instance field reference: private System.Text.Encoding <AlternateEncoding>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Text::Encoding*& dyn_$AlternateEncoding$k__BackingField();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipOption <AlternateEncodingUsage>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipOption& dyn_$AlternateEncodingUsage$k__BackingField();
    // public System.Void .ctor()
    // Offset: 0x1F4DD68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZipEntry* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipEntry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZipEntry*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1F4DE1C
    static void _cctor();
    // System.Boolean get_AttributesIndicateDirectory()
    // Offset: 0x1F4DF28
    bool get_AttributesIndicateDirectory();
    // System.Void ResetDirEntry()
    // Offset: 0x1F4DF44
    void ResetDirEntry();
    // static Pathfinding.Ionic.Zip.ZipEntry ReadDirEntry(Pathfinding.Ionic.Zip.ZipFile zf, System.Collections.Generic.Dictionary`2<System.String,System.Object> previouslySeen)
    // Offset: 0x1F4DF54
    static ::Pathfinding::Ionic::Zip::ZipEntry* ReadDirEntry(::Pathfinding::Ionic::Zip::ZipFile* zf, ::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>* previouslySeen);
    // static System.Boolean IsNotValidZipDirEntrySig(System.Int32 signature)
    // Offset: 0x1F4EB50
    static bool IsNotValidZipDirEntrySig(int signature);
    // public System.Void Extract(System.IO.Stream stream)
    // Offset: 0x1F4F33C
    void Extract(::System::IO::Stream* stream);
    // Pathfinding.Ionic.Crc.CrcCalculatorStream InternalOpenReader(System.String password)
    // Offset: 0x1F4FC2C
    ::Pathfinding::Ionic::Crc::CrcCalculatorStream* InternalOpenReader(::StringW password);
    // private System.Void OnExtractProgress(System.Int64 bytesWritten, System.Int64 totalBytesToWrite)
    // Offset: 0x1F502A0
    void OnExtractProgress(int64_t bytesWritten, int64_t totalBytesToWrite);
    // private System.Void OnBeforeExtract(System.String path)
    // Offset: 0x1F50418
    void OnBeforeExtract(::StringW path);
    // private System.Void OnAfterExtract(System.String path)
    // Offset: 0x1F505BC
    void OnAfterExtract(::StringW path);
    // private System.Void OnExtractExisting(System.String path)
    // Offset: 0x1F50664
    void OnExtractExisting(::StringW path);
    // static private System.Void ReallyDelete(System.String fileName)
    // Offset: 0x1F507CC
    static void ReallyDelete(::StringW fileName);
    // private System.Void WriteStatus(System.String format, params System.Object[] args)
    // Offset: 0x1F507D4
    void WriteStatus(::StringW format, ::ArrayW<::Il2CppObject*> args);
    // private System.Void InternalExtract(System.String baseDir, System.IO.Stream outstream, System.String password)
    // Offset: 0x1F4F350
    void InternalExtract(::StringW baseDir, ::System::IO::Stream* outstream, ::StringW password);
    // System.Void VerifyCrcAfterExtract(System.Int32 actualCrc32)
    // Offset: 0x1F5179C
    void VerifyCrcAfterExtract(int actualCrc32);
    // private System.Int32 CheckExtractExistingFile(System.String baseDir, System.String targetFileName)
    // Offset: 0x1F511A8
    int CheckExtractExistingFile(::StringW baseDir, ::StringW targetFileName);
    // private System.Void _CheckRead(System.Int32 nbytes)
    // Offset: 0x1F519D0
    void _CheckRead(int nbytes);
    // private System.Int32 ExtractOne(System.IO.Stream output)
    // Offset: 0x1F513B4
    int ExtractOne(::System::IO::Stream* output);
    // System.IO.Stream GetExtractDecompressor(System.IO.Stream input2)
    // Offset: 0x1F5020C
    ::System::IO::Stream* GetExtractDecompressor(::System::IO::Stream* input2);
    // System.IO.Stream GetExtractDecryptor(System.IO.Stream input)
    // Offset: 0x1F50184
    ::System::IO::Stream* GetExtractDecryptor(::System::IO::Stream* input);
    // System.Void _SetTimes(System.String fileOrDirectory, System.Boolean isFile)
    // Offset: 0x1F5189C
    void _SetTimes(::StringW fileOrDirectory, bool isFile);
    // private System.String get_UnsupportedAlgorithm()
    // Offset: 0x1F51AA4
    ::StringW get_UnsupportedAlgorithm();
    // private System.String get_UnsupportedCompressionMethod()
    // Offset: 0x1F51C1C
    ::StringW get_UnsupportedCompressionMethod();
    // System.Void ValidateEncryption()
    // Offset: 0x1F4FE90
    void ValidateEncryption();
    // private System.Void ValidateCompression()
    // Offset: 0x1F4FDAC
    void ValidateCompression();
    // private System.Void SetupCryptoForExtract(System.String password)
    // Offset: 0x1F4FF7C
    void SetupCryptoForExtract(::StringW password);
    // private System.Boolean ValidateOutput(System.String basedir, System.IO.Stream outstream, out System.String outFileName)
    // Offset: 0x1F50ECC
    bool ValidateOutput(::StringW basedir, ::System::IO::Stream* outstream, ByRef<::StringW> outFileName);
    // static private System.Boolean ReadHeader(Pathfinding.Ionic.Zip.ZipEntry ze, System.Text.Encoding defaultEncoding)
    // Offset: 0x1F51D60
    static bool ReadHeader(::Pathfinding::Ionic::Zip::ZipEntry* ze, ::System::Text::Encoding* defaultEncoding);
    // static System.Int32 ReadWeakEncryptionHeader(System.IO.Stream s, System.Byte[] buffer)
    // Offset: 0x1F4D9DC
    static int ReadWeakEncryptionHeader(::System::IO::Stream* s, ::ArrayW<uint8_t> buffer);
    // static private System.Boolean IsNotValidSig(System.Int32 signature)
    // Offset: 0x1F52AE4
    static bool IsNotValidSig(int signature);
    // static Pathfinding.Ionic.Zip.ZipEntry ReadEntry(Pathfinding.Ionic.Zip.ZipContainer zc, System.Boolean first)
    // Offset: 0x1F52C08
    static ::Pathfinding::Ionic::Zip::ZipEntry* ReadEntry(::Pathfinding::Ionic::Zip::ZipContainer* zc, bool first);
    // static System.Void HandlePK00Prefix(System.IO.Stream s)
    // Offset: 0x1F52F68
    static void HandlePK00Prefix(::System::IO::Stream* s);
    // static private System.Void HandleUnexpectedDataDescriptor(Pathfinding.Ionic.Zip.ZipEntry entry)
    // Offset: 0x1F53010
    static void HandleUnexpectedDataDescriptor(::Pathfinding::Ionic::Zip::ZipEntry* entry);
    // System.Int32 ProcessExtraField(System.IO.Stream s, System.Int16 extraFieldLength)
    // Offset: 0x1F4F0B8
    int ProcessExtraField(::System::IO::Stream* s, int16_t extraFieldLength);
    // private System.Int32 ProcessExtraFieldPkwareStrongEncryption(System.Byte[] Buffer, System.Int32 j)
    // Offset: 0x1F53834
    int ProcessExtraFieldPkwareStrongEncryption(::ArrayW<uint8_t> Buffer, int j);
    // private System.Int32 ProcessExtraFieldZip64(System.Byte[] buffer, System.Int32 j, System.Int16 dataSize, System.Int64 posn)
    // Offset: 0x1F53724
    int ProcessExtraFieldZip64(::ArrayW<uint8_t> buffer, int j, int16_t dataSize, int64_t posn);
    // private System.Int32 ProcessExtraFieldInfoZipTimes(System.Byte[] buffer, System.Int32 j, System.Int16 dataSize, System.Int64 posn)
    // Offset: 0x1F5352C
    int ProcessExtraFieldInfoZipTimes(::ArrayW<uint8_t> buffer, int j, int16_t dataSize, int64_t posn);
    // private System.Int32 ProcessExtraFieldUnixTimes(System.Byte[] buffer, System.Int32 j, System.Int16 dataSize, System.Int64 posn)
    // Offset: 0x1F5341C
    int ProcessExtraFieldUnixTimes(::ArrayW<uint8_t> buffer, int j, int16_t dataSize, int64_t posn);
    // private System.Int32 ProcessExtraFieldWindowsTimes(System.Byte[] buffer, System.Int32 j, System.Int16 dataSize, System.Int64 posn)
    // Offset: 0x1F53178
    int ProcessExtraFieldWindowsTimes(::ArrayW<uint8_t> buffer, int j, int16_t dataSize, int64_t posn);
    // System.Void WriteCentralDirectoryEntry(System.IO.Stream s)
    // Offset: 0x1F538E8
    void WriteCentralDirectoryEntry(::System::IO::Stream* s);
    // private System.Byte[] ConstructExtraField(System.Boolean forCentralDirectory)
    // Offset: 0x1F54770
    ::ArrayW<uint8_t> ConstructExtraField(bool forCentralDirectory);
    // private System.String NormalizeFileName()
    // Offset: 0x1F550C8
    ::StringW NormalizeFileName();
    // private System.Byte[] GetEncodedFileNameBytes()
    // Offset: 0x1F5434C
    ::ArrayW<uint8_t> GetEncodedFileNameBytes();
    // private System.Boolean WantReadAgain()
    // Offset: 0x1F55384
    bool WantReadAgain();
    // private System.Void MaybeUnsetCompressionMethodForWriting(System.Int32 cycle)
    // Offset: 0x1F55430
    void MaybeUnsetCompressionMethodForWriting(int cycle);
    // System.Void WriteHeader(System.IO.Stream s, System.Int32 cycle)
    // Offset: 0x1F55610
    void WriteHeader(::System::IO::Stream* s, int cycle);
    // private System.Int32 FigureCrc32()
    // Offset: 0x1F56270
    int FigureCrc32();
    // private System.Void PrepSourceStream()
    // Offset: 0x1F56460
    void PrepSourceStream();
    // System.Void CopyMetaData(Pathfinding.Ionic.Zip.ZipEntry source)
    // Offset: 0x1F56628
    void CopyMetaData(::Pathfinding::Ionic::Zip::ZipEntry* source);
    // private System.Void OnWriteBlock(System.Int64 bytesXferred, System.Int64 totalBytesToXfer)
    // Offset: 0x1F568D8
    void OnWriteBlock(int64_t bytesXferred, int64_t totalBytesToXfer);
    // private System.Void _WriteEntryData(System.IO.Stream s)
    // Offset: 0x1F56A50
    void _WriteEntryData(::System::IO::Stream* s);
    // private System.Int64 SetInputAndFigureFileLength(ref System.IO.Stream input)
    // Offset: 0x1F56E04
    int64_t SetInputAndFigureFileLength(ByRef<::System::IO::Stream*> input);
    // System.Void FinishOutputStream(System.IO.Stream s, Pathfinding.Ionic.Zip.CountingStream entryCounter, System.IO.Stream encryptor, System.IO.Stream compressor, Pathfinding.Ionic.Crc.CrcCalculatorStream output)
    // Offset: 0x1F57544
    void FinishOutputStream(::System::IO::Stream* s, ::Pathfinding::Ionic::Zip::CountingStream* entryCounter, ::System::IO::Stream* encryptor, ::System::IO::Stream* compressor, ::Pathfinding::Ionic::Crc::CrcCalculatorStream* output);
    // System.Void PostProcessOutput(System.IO.Stream s)
    // Offset: 0x1F576C4
    void PostProcessOutput(::System::IO::Stream* s);
    // private System.Void SetZip64Flags()
    // Offset: 0x1F560EC
    void SetZip64Flags();
    // System.Void PrepOutputStream(System.IO.Stream s, System.Int64 streamLength, out Pathfinding.Ionic.Zip.CountingStream outputCounter, out System.IO.Stream encryptor, out System.IO.Stream compressor, out Pathfinding.Ionic.Crc.CrcCalculatorStream output)
    // Offset: 0x1F58514
    void PrepOutputStream(::System::IO::Stream* s, int64_t streamLength, ByRef<::Pathfinding::Ionic::Zip::CountingStream*> outputCounter, ByRef<::System::IO::Stream*> encryptor, ByRef<::System::IO::Stream*> compressor, ByRef<::Pathfinding::Ionic::Crc::CrcCalculatorStream*> output);
    // private System.IO.Stream MaybeApplyCompression(System.IO.Stream s, System.Int64 streamLength)
    // Offset: 0x1F57144
    ::System::IO::Stream* MaybeApplyCompression(::System::IO::Stream* s, int64_t streamLength);
    // private System.IO.Stream MaybeApplyEncryption(System.IO.Stream s)
    // Offset: 0x1F570BC
    ::System::IO::Stream* MaybeApplyEncryption(::System::IO::Stream* s);
    // private System.Void OnZipErrorWhileSaving(System.Exception e)
    // Offset: 0x1F58608
    void OnZipErrorWhileSaving(::System::Exception* e);
    // System.Void Write(System.IO.Stream s)
    // Offset: 0x1F587A0
    void Write(::System::IO::Stream* s);
    // System.Void StoreRelativeOffset()
    // Offset: 0x1F58500
    void StoreRelativeOffset();
    // System.Void NotifySaveComplete()
    // Offset: 0x1F5924C
    void NotifySaveComplete();
    // System.Void WriteSecurityMetadata(System.IO.Stream outstream)
    // Offset: 0x1F58FF4
    void WriteSecurityMetadata(::System::IO::Stream* outstream);
    // private System.Void CopyThroughOneEntry(System.IO.Stream outStream)
    // Offset: 0x1F58DC4
    void CopyThroughOneEntry(::System::IO::Stream* outStream);
    // private System.Void CopyThroughWithRecompute(System.IO.Stream outstream)
    // Offset: 0x1F5929C
    void CopyThroughWithRecompute(::System::IO::Stream* outstream);
    // private System.Void CopyThroughWithNoChange(System.IO.Stream outstream)
    // Offset: 0x1F597A4
    void CopyThroughWithNoChange(::System::IO::Stream* outstream);
    // public System.DateTime get_LastModified()
    // Offset: 0x1F56264
    ::System::DateTime get_LastModified();
    // public System.Void set_LastModified(System.DateTime value)
    // Offset: 0x1F59A18
    void set_LastModified(::System::DateTime value);
    // private System.Int32 get_BufferSize()
    // Offset: 0x1F51A78
    int get_BufferSize();
    // public System.Void set_ModifiedTime(System.DateTime value)
    // Offset: 0x1F59B14
    void set_ModifiedTime(::System::DateTime value);
    // public System.Void set_AccessedTime(System.DateTime value)
    // Offset: 0x1F59E48
    void set_AccessedTime(::System::DateTime value);
    // public System.Void set_CreationTime(System.DateTime value)
    // Offset: 0x1F59E60
    void set_CreationTime(::System::DateTime value);
    // public System.Void SetEntryTimes(System.DateTime created, System.DateTime accessed, System.DateTime modified)
    // Offset: 0x1F59B28
    void SetEntryTimes(::System::DateTime created, ::System::DateTime accessed, ::System::DateTime modified);
    // public System.Void set_EmitTimesInWindowsFormatWhenSaving(System.Boolean value)
    // Offset: 0x1F59E68
    void set_EmitTimesInWindowsFormatWhenSaving(bool value);
    // public System.Void set_EmitTimesInUnixFormatWhenSaving(System.Boolean value)
    // Offset: 0x1F59E7C
    void set_EmitTimesInUnixFormatWhenSaving(bool value);
    // System.String get_LocalFileName()
    // Offset: 0x1F55550
    ::StringW get_LocalFileName();
    // public System.String get_FileName()
    // Offset: 0x1F513AC
    ::StringW get_FileName();
    // public System.Int16 get_VersionNeeded()
    // Offset: 0x1F54344
    int16_t get_VersionNeeded();
    // public System.String get_Comment()
    // Offset: 0x1F5537C
    ::StringW get_Comment();
    // public System.Nullable`1<System.Boolean> get_OutputUsedZip64()
    // Offset: 0x1F59E90
    ::System::Nullable_1<bool> get_OutputUsedZip64();
    // public Pathfinding.Ionic.Zip.CompressionMethod get_CompressionMethod()
    // Offset: 0x1F55608
    ::Pathfinding::Ionic::Zip::CompressionMethod get_CompressionMethod();
    // public System.Void set_CompressionMethod(Pathfinding.Ionic.Zip.CompressionMethod value)
    // Offset: 0x1F567CC
    void set_CompressionMethod(::Pathfinding::Ionic::Zip::CompressionMethod value);
    // public Pathfinding.Ionic.Zlib.CompressionLevel get_CompressionLevel()
    // Offset: 0x1F55420
    ::Pathfinding::Ionic::Zlib::CompressionLevel get_CompressionLevel();
    // public System.Void set_CompressionLevel(Pathfinding.Ionic.Zlib.CompressionLevel value)
    // Offset: 0x1F55560
    void set_CompressionLevel(::Pathfinding::Ionic::Zlib::CompressionLevel value);
    // public System.Int64 get_CompressedSize()
    // Offset: 0x1F55428
    int64_t get_CompressedSize();
    // public System.Int64 get_UncompressedSize()
    // Offset: 0x1F5007C
    int64_t get_UncompressedSize();
    // public System.Boolean get_IsDirectory()
    // Offset: 0x1F51D58
    bool get_IsDirectory();
    // public Pathfinding.Ionic.Zip.EncryptionAlgorithm get_Encryption()
    // Offset: 0x1F51D48
    ::Pathfinding::Ionic::Zip::EncryptionAlgorithm get_Encryption();
    // public System.Void set_Encryption(Pathfinding.Ionic.Zip.EncryptionAlgorithm value)
    // Offset: 0x1F55FB8
    void set_Encryption(::Pathfinding::Ionic::Zip::EncryptionAlgorithm value);
    // public System.Void set_Password(System.String value)
    // Offset: 0x1F560A8
    void set_Password(::StringW value);
    // public Pathfinding.Ionic.Zip.ExtractExistingFileAction get_ExtractExistingFile()
    // Offset: 0x1F519C8
    ::Pathfinding::Ionic::Zip::ExtractExistingFileAction get_ExtractExistingFile();
    // public System.Void set_ExtractExistingFile(Pathfinding.Ionic.Zip.ExtractExistingFileAction value)
    // Offset: 0x1F59EA4
    void set_ExtractExistingFile(::Pathfinding::Ionic::Zip::ExtractExistingFileAction value);
    // public Pathfinding.Ionic.Zip.ZipErrorAction get_ZipErrorAction()
    // Offset: 0x1F5923C
    ::Pathfinding::Ionic::Zip::ZipErrorAction get_ZipErrorAction();
    // public System.Void set_ZipErrorAction(Pathfinding.Ionic.Zip.ZipErrorAction value)
    // Offset: 0x1F59244
    void set_ZipErrorAction(::Pathfinding::Ionic::Zip::ZipErrorAction value);
    // public System.Boolean get_IncludedInMostRecentSave()
    // Offset: 0x1F59EAC
    bool get_IncludedInMostRecentSave();
    // public Pathfinding.Ionic.Zip.SetCompressionCallback get_SetCompression()
    // Offset: 0x1F55558
    ::Pathfinding::Ionic::Zip::SetCompressionCallback* get_SetCompression();
    // public System.Void set_SetCompression(Pathfinding.Ionic.Zip.SetCompressionCallback value)
    // Offset: 0x1F59EBC
    void set_SetCompression(::Pathfinding::Ionic::Zip::SetCompressionCallback* value);
    // public System.Text.Encoding get_AlternateEncoding()
    // Offset: 0x1F52AF8
    ::System::Text::Encoding* get_AlternateEncoding();
    // public System.Void set_AlternateEncoding(System.Text.Encoding value)
    // Offset: 0x1F4DE0C
    void set_AlternateEncoding(::System::Text::Encoding* value);
    // public Pathfinding.Ionic.Zip.ZipOption get_AlternateEncodingUsage()
    // Offset: 0x1F55374
    ::Pathfinding::Ionic::Zip::ZipOption get_AlternateEncodingUsage();
    // public System.Void set_AlternateEncodingUsage(Pathfinding.Ionic.Zip.ZipOption value)
    // Offset: 0x1F4DE14
    void set_AlternateEncodingUsage(::Pathfinding::Ionic::Zip::ZipOption value);
    // static Pathfinding.Ionic.Zip.ZipEntry CreateForStream(System.String entryName, System.IO.Stream s)
    // Offset: 0x1F59EC4
    static ::Pathfinding::Ionic::Zip::ZipEntry* CreateForStream(::StringW entryName, ::System::IO::Stream* s);
    // static private Pathfinding.Ionic.Zip.ZipEntry Create(System.String nameInArchive, Pathfinding.Ionic.Zip.ZipEntrySource source, System.Object arg1, System.Object arg2)
    // Offset: 0x1F59F40
    static ::Pathfinding::Ionic::Zip::ZipEntry* Create(::StringW nameInArchive, ::Pathfinding::Ionic::Zip::ZipEntrySource source, ::Il2CppObject* arg1, ::Il2CppObject* arg2);
    // System.Void MarkAsDirectory()
    // Offset: 0x1F4F028
    void MarkAsDirectory();
    // public System.Void set_IsText(System.Boolean value)
    // Offset: 0x1F4EB64
    void set_IsText(bool value);
    // System.IO.Stream get_ArchiveStream()
    // Offset: 0x1F50084
    ::System::IO::Stream* get_ArchiveStream();
    // private System.Void SetFdpLoh()
    // Offset: 0x1F5A388
    void SetFdpLoh();
    // static System.Int32 GetLengthOfCryptoHeaderBytes(Pathfinding.Ionic.Zip.EncryptionAlgorithm a)
    // Offset: 0x1F59980
    static int GetLengthOfCryptoHeaderBytes(::Pathfinding::Ionic::Zip::EncryptionAlgorithm a);
    // System.Int64 get_FileDataPosition()
    // Offset: 0x1F50150
    int64_t get_FileDataPosition();
    // private System.Int32 get_LengthOfHeader()
    // Offset: 0x1F5926C
    int get_LengthOfHeader();
    // public override System.String ToString()
    // Offset: 0x1F5A300
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Pathfinding.Ionic.Zip.ZipEntry
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::Ionic::Zip::ZipEntry::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_AttributesIndicateDirectory
// Il2CppName: get_AttributesIndicateDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_AttributesIndicateDirectory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_AttributesIndicateDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ResetDirEntry
// Il2CppName: ResetDirEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::ResetDirEntry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ResetDirEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ReadDirEntry
// Il2CppName: ReadDirEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipEntry* (*)(::Pathfinding::Ionic::Zip::ZipFile*, ::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>*)>(&Pathfinding::Ionic::Zip::ZipEntry::ReadDirEntry)> {
  static const MethodInfo* get() {
    static auto* zf = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipFile")->byval_arg;
    static auto* previouslySeen = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ReadDirEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zf, previouslySeen});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::IsNotValidZipDirEntrySig
// Il2CppName: IsNotValidZipDirEntrySig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&Pathfinding::Ionic::Zip::ZipEntry::IsNotValidZipDirEntrySig)> {
  static const MethodInfo* get() {
    static auto* signature = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "IsNotValidZipDirEntrySig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signature});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::Extract
// Il2CppName: Extract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipEntry::Extract)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "Extract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::InternalOpenReader
// Il2CppName: InternalOpenReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Crc::CrcCalculatorStream* (Pathfinding::Ionic::Zip::ZipEntry::*)(::StringW)>(&Pathfinding::Ionic::Zip::ZipEntry::InternalOpenReader)> {
  static const MethodInfo* get() {
    static auto* password = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "InternalOpenReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{password});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::OnExtractProgress
// Il2CppName: OnExtractProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(int64_t, int64_t)>(&Pathfinding::Ionic::Zip::ZipEntry::OnExtractProgress)> {
  static const MethodInfo* get() {
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* totalBytesToWrite = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "OnExtractProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytesWritten, totalBytesToWrite});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::OnBeforeExtract
// Il2CppName: OnBeforeExtract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::StringW)>(&Pathfinding::Ionic::Zip::ZipEntry::OnBeforeExtract)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "OnBeforeExtract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::OnAfterExtract
// Il2CppName: OnAfterExtract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::StringW)>(&Pathfinding::Ionic::Zip::ZipEntry::OnAfterExtract)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "OnAfterExtract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::OnExtractExisting
// Il2CppName: OnExtractExisting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::StringW)>(&Pathfinding::Ionic::Zip::ZipEntry::OnExtractExisting)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "OnExtractExisting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ReallyDelete
// Il2CppName: ReallyDelete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&Pathfinding::Ionic::Zip::ZipEntry::ReallyDelete)> {
  static const MethodInfo* get() {
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ReallyDelete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fileName});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::WriteStatus
// Il2CppName: WriteStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&Pathfinding::Ionic::Zip::ZipEntry::WriteStatus)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "WriteStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, args});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::InternalExtract
// Il2CppName: InternalExtract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::StringW, ::System::IO::Stream*, ::StringW)>(&Pathfinding::Ionic::Zip::ZipEntry::InternalExtract)> {
  static const MethodInfo* get() {
    static auto* baseDir = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* outstream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* password = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "InternalExtract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseDir, outstream, password});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::VerifyCrcAfterExtract
// Il2CppName: VerifyCrcAfterExtract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(int)>(&Pathfinding::Ionic::Zip::ZipEntry::VerifyCrcAfterExtract)> {
  static const MethodInfo* get() {
    static auto* actualCrc32 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "VerifyCrcAfterExtract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actualCrc32});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::CheckExtractExistingFile
// Il2CppName: CheckExtractExistingFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipEntry::*)(::StringW, ::StringW)>(&Pathfinding::Ionic::Zip::ZipEntry::CheckExtractExistingFile)> {
  static const MethodInfo* get() {
    static auto* baseDir = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* targetFileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "CheckExtractExistingFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseDir, targetFileName});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::_CheckRead
// Il2CppName: _CheckRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(int)>(&Pathfinding::Ionic::Zip::ZipEntry::_CheckRead)> {
  static const MethodInfo* get() {
    static auto* nbytes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "_CheckRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nbytes});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ExtractOne
// Il2CppName: ExtractOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipEntry::ExtractOne)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ExtractOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::GetExtractDecompressor
// Il2CppName: GetExtractDecompressor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipEntry::GetExtractDecompressor)> {
  static const MethodInfo* get() {
    static auto* input2 = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "GetExtractDecompressor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input2});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::GetExtractDecryptor
// Il2CppName: GetExtractDecryptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipEntry::GetExtractDecryptor)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "GetExtractDecryptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::_SetTimes
// Il2CppName: _SetTimes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::StringW, bool)>(&Pathfinding::Ionic::Zip::ZipEntry::_SetTimes)> {
  static const MethodInfo* get() {
    static auto* fileOrDirectory = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isFile = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "_SetTimes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fileOrDirectory, isFile});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_UnsupportedAlgorithm
// Il2CppName: get_UnsupportedAlgorithm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_UnsupportedAlgorithm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_UnsupportedAlgorithm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_UnsupportedCompressionMethod
// Il2CppName: get_UnsupportedCompressionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_UnsupportedCompressionMethod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_UnsupportedCompressionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ValidateEncryption
// Il2CppName: ValidateEncryption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::ValidateEncryption)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ValidateEncryption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ValidateCompression
// Il2CppName: ValidateCompression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::ValidateCompression)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ValidateCompression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::SetupCryptoForExtract
// Il2CppName: SetupCryptoForExtract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::StringW)>(&Pathfinding::Ionic::Zip::ZipEntry::SetupCryptoForExtract)> {
  static const MethodInfo* get() {
    static auto* password = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "SetupCryptoForExtract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{password});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ValidateOutput
// Il2CppName: ValidateOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipEntry::*)(::StringW, ::System::IO::Stream*, ByRef<::StringW>)>(&Pathfinding::Ionic::Zip::ZipEntry::ValidateOutput)> {
  static const MethodInfo* get() {
    static auto* basedir = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* outstream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* outFileName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ValidateOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{basedir, outstream, outFileName});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ReadHeader
// Il2CppName: ReadHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::Ionic::Zip::ZipEntry*, ::System::Text::Encoding*)>(&Pathfinding::Ionic::Zip::ZipEntry::ReadHeader)> {
  static const MethodInfo* get() {
    static auto* ze = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    static auto* defaultEncoding = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ReadHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ze, defaultEncoding});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ReadWeakEncryptionHeader
// Il2CppName: ReadWeakEncryptionHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IO::Stream*, ::ArrayW<uint8_t>)>(&Pathfinding::Ionic::Zip::ZipEntry::ReadWeakEncryptionHeader)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ReadWeakEncryptionHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, buffer});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::IsNotValidSig
// Il2CppName: IsNotValidSig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&Pathfinding::Ionic::Zip::ZipEntry::IsNotValidSig)> {
  static const MethodInfo* get() {
    static auto* signature = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "IsNotValidSig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{signature});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ReadEntry
// Il2CppName: ReadEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipEntry* (*)(::Pathfinding::Ionic::Zip::ZipContainer*, bool)>(&Pathfinding::Ionic::Zip::ZipEntry::ReadEntry)> {
  static const MethodInfo* get() {
    static auto* zc = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipContainer")->byval_arg;
    static auto* first = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ReadEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zc, first});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::HandlePK00Prefix
// Il2CppName: HandlePK00Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipEntry::HandlePK00Prefix)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "HandlePK00Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::HandleUnexpectedDataDescriptor
// Il2CppName: HandleUnexpectedDataDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Ionic::Zip::ZipEntry*)>(&Pathfinding::Ionic::Zip::ZipEntry::HandleUnexpectedDataDescriptor)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "HandleUnexpectedDataDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraField
// Il2CppName: ProcessExtraField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*, int16_t)>(&Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraField)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* extraFieldLength = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ProcessExtraField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, extraFieldLength});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldPkwareStrongEncryption
// Il2CppName: ProcessExtraFieldPkwareStrongEncryption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipEntry::*)(::ArrayW<uint8_t>, int)>(&Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldPkwareStrongEncryption)> {
  static const MethodInfo* get() {
    static auto* Buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ProcessExtraFieldPkwareStrongEncryption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Buffer, j});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldZip64
// Il2CppName: ProcessExtraFieldZip64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipEntry::*)(::ArrayW<uint8_t>, int, int16_t, int64_t)>(&Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldZip64)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dataSize = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* posn = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ProcessExtraFieldZip64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, j, dataSize, posn});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldInfoZipTimes
// Il2CppName: ProcessExtraFieldInfoZipTimes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipEntry::*)(::ArrayW<uint8_t>, int, int16_t, int64_t)>(&Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldInfoZipTimes)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dataSize = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* posn = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ProcessExtraFieldInfoZipTimes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, j, dataSize, posn});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldUnixTimes
// Il2CppName: ProcessExtraFieldUnixTimes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipEntry::*)(::ArrayW<uint8_t>, int, int16_t, int64_t)>(&Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldUnixTimes)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dataSize = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* posn = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ProcessExtraFieldUnixTimes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, j, dataSize, posn});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldWindowsTimes
// Il2CppName: ProcessExtraFieldWindowsTimes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipEntry::*)(::ArrayW<uint8_t>, int, int16_t, int64_t)>(&Pathfinding::Ionic::Zip::ZipEntry::ProcessExtraFieldWindowsTimes)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* j = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dataSize = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* posn = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ProcessExtraFieldWindowsTimes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, j, dataSize, posn});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::WriteCentralDirectoryEntry
// Il2CppName: WriteCentralDirectoryEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipEntry::WriteCentralDirectoryEntry)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "WriteCentralDirectoryEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ConstructExtraField
// Il2CppName: ConstructExtraField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Pathfinding::Ionic::Zip::ZipEntry::*)(bool)>(&Pathfinding::Ionic::Zip::ZipEntry::ConstructExtraField)> {
  static const MethodInfo* get() {
    static auto* forCentralDirectory = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ConstructExtraField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forCentralDirectory});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::NormalizeFileName
// Il2CppName: NormalizeFileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::NormalizeFileName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "NormalizeFileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::GetEncodedFileNameBytes
// Il2CppName: GetEncodedFileNameBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::GetEncodedFileNameBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "GetEncodedFileNameBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::WantReadAgain
// Il2CppName: WantReadAgain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::WantReadAgain)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "WantReadAgain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::MaybeUnsetCompressionMethodForWriting
// Il2CppName: MaybeUnsetCompressionMethodForWriting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(int)>(&Pathfinding::Ionic::Zip::ZipEntry::MaybeUnsetCompressionMethodForWriting)> {
  static const MethodInfo* get() {
    static auto* cycle = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "MaybeUnsetCompressionMethodForWriting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cycle});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::WriteHeader
// Il2CppName: WriteHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*, int)>(&Pathfinding::Ionic::Zip::ZipEntry::WriteHeader)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* cycle = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "WriteHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, cycle});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::FigureCrc32
// Il2CppName: FigureCrc32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::FigureCrc32)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "FigureCrc32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::PrepSourceStream
// Il2CppName: PrepSourceStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::PrepSourceStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "PrepSourceStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::CopyMetaData
// Il2CppName: CopyMetaData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::Pathfinding::Ionic::Zip::ZipEntry*)>(&Pathfinding::Ionic::Zip::ZipEntry::CopyMetaData)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "CopyMetaData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::OnWriteBlock
// Il2CppName: OnWriteBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(int64_t, int64_t)>(&Pathfinding::Ionic::Zip::ZipEntry::OnWriteBlock)> {
  static const MethodInfo* get() {
    static auto* bytesXferred = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* totalBytesToXfer = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "OnWriteBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytesXferred, totalBytesToXfer});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::_WriteEntryData
// Il2CppName: _WriteEntryData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipEntry::_WriteEntryData)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "_WriteEntryData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::SetInputAndFigureFileLength
// Il2CppName: SetInputAndFigureFileLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipEntry::*)(ByRef<::System::IO::Stream*>)>(&Pathfinding::Ionic::Zip::ZipEntry::SetInputAndFigureFileLength)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "SetInputAndFigureFileLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::FinishOutputStream
// Il2CppName: FinishOutputStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*, ::Pathfinding::Ionic::Zip::CountingStream*, ::System::IO::Stream*, ::System::IO::Stream*, ::Pathfinding::Ionic::Crc::CrcCalculatorStream*)>(&Pathfinding::Ionic::Zip::ZipEntry::FinishOutputStream)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* entryCounter = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "CountingStream")->byval_arg;
    static auto* encryptor = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* compressor = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Crc", "CrcCalculatorStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "FinishOutputStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, entryCounter, encryptor, compressor, output});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::PostProcessOutput
// Il2CppName: PostProcessOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipEntry::PostProcessOutput)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "PostProcessOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::SetZip64Flags
// Il2CppName: SetZip64Flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::SetZip64Flags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "SetZip64Flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::PrepOutputStream
// Il2CppName: PrepOutputStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*, int64_t, ByRef<::Pathfinding::Ionic::Zip::CountingStream*>, ByRef<::System::IO::Stream*>, ByRef<::System::IO::Stream*>, ByRef<::Pathfinding::Ionic::Crc::CrcCalculatorStream*>)>(&Pathfinding::Ionic::Zip::ZipEntry::PrepOutputStream)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* streamLength = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* outputCounter = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "CountingStream")->this_arg;
    static auto* encryptor = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->this_arg;
    static auto* compressor = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->this_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Crc", "CrcCalculatorStream")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "PrepOutputStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, streamLength, outputCounter, encryptor, compressor, output});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::MaybeApplyCompression
// Il2CppName: MaybeApplyCompression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*, int64_t)>(&Pathfinding::Ionic::Zip::ZipEntry::MaybeApplyCompression)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* streamLength = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "MaybeApplyCompression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, streamLength});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::MaybeApplyEncryption
// Il2CppName: MaybeApplyEncryption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipEntry::MaybeApplyEncryption)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "MaybeApplyEncryption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::OnZipErrorWhileSaving
// Il2CppName: OnZipErrorWhileSaving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::Exception*)>(&Pathfinding::Ionic::Zip::ZipEntry::OnZipErrorWhileSaving)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "OnZipErrorWhileSaving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipEntry::Write)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::StoreRelativeOffset
// Il2CppName: StoreRelativeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::StoreRelativeOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "StoreRelativeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::NotifySaveComplete
// Il2CppName: NotifySaveComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::NotifySaveComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "NotifySaveComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::WriteSecurityMetadata
// Il2CppName: WriteSecurityMetadata
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipEntry::WriteSecurityMetadata)> {
  static const MethodInfo* get() {
    static auto* outstream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "WriteSecurityMetadata", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outstream});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::CopyThroughOneEntry
// Il2CppName: CopyThroughOneEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipEntry::CopyThroughOneEntry)> {
  static const MethodInfo* get() {
    static auto* outStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "CopyThroughOneEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outStream});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::CopyThroughWithRecompute
// Il2CppName: CopyThroughWithRecompute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipEntry::CopyThroughWithRecompute)> {
  static const MethodInfo* get() {
    static auto* outstream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "CopyThroughWithRecompute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outstream});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::CopyThroughWithNoChange
// Il2CppName: CopyThroughWithNoChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipEntry::CopyThroughWithNoChange)> {
  static const MethodInfo* get() {
    static auto* outstream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "CopyThroughWithNoChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outstream});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_LastModified
// Il2CppName: get_LastModified
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_LastModified)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_LastModified", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_LastModified
// Il2CppName: set_LastModified
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::DateTime)>(&Pathfinding::Ionic::Zip::ZipEntry::set_LastModified)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_LastModified", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_BufferSize
// Il2CppName: get_BufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_BufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_BufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_ModifiedTime
// Il2CppName: set_ModifiedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::DateTime)>(&Pathfinding::Ionic::Zip::ZipEntry::set_ModifiedTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_ModifiedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_AccessedTime
// Il2CppName: set_AccessedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::DateTime)>(&Pathfinding::Ionic::Zip::ZipEntry::set_AccessedTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_AccessedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_CreationTime
// Il2CppName: set_CreationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::DateTime)>(&Pathfinding::Ionic::Zip::ZipEntry::set_CreationTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_CreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::SetEntryTimes
// Il2CppName: SetEntryTimes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::DateTime, ::System::DateTime, ::System::DateTime)>(&Pathfinding::Ionic::Zip::ZipEntry::SetEntryTimes)> {
  static const MethodInfo* get() {
    static auto* created = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* accessed = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* modified = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "SetEntryTimes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{created, accessed, modified});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_EmitTimesInWindowsFormatWhenSaving
// Il2CppName: set_EmitTimesInWindowsFormatWhenSaving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(bool)>(&Pathfinding::Ionic::Zip::ZipEntry::set_EmitTimesInWindowsFormatWhenSaving)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_EmitTimesInWindowsFormatWhenSaving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_EmitTimesInUnixFormatWhenSaving
// Il2CppName: set_EmitTimesInUnixFormatWhenSaving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(bool)>(&Pathfinding::Ionic::Zip::ZipEntry::set_EmitTimesInUnixFormatWhenSaving)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_EmitTimesInUnixFormatWhenSaving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_LocalFileName
// Il2CppName: get_LocalFileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_LocalFileName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_LocalFileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_FileName
// Il2CppName: get_FileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_FileName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_FileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_VersionNeeded
// Il2CppName: get_VersionNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_VersionNeeded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_VersionNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_Comment
// Il2CppName: get_Comment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_Comment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_Comment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_OutputUsedZip64
// Il2CppName: get_OutputUsedZip64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<bool> (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_OutputUsedZip64)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_OutputUsedZip64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_CompressionMethod
// Il2CppName: get_CompressionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::CompressionMethod (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_CompressionMethod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_CompressionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_CompressionMethod
// Il2CppName: set_CompressionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::Pathfinding::Ionic::Zip::CompressionMethod)>(&Pathfinding::Ionic::Zip::ZipEntry::set_CompressionMethod)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "CompressionMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_CompressionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_CompressionLevel
// Il2CppName: get_CompressionLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zlib::CompressionLevel (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_CompressionLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_CompressionLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_CompressionLevel
// Il2CppName: set_CompressionLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::Pathfinding::Ionic::Zlib::CompressionLevel)>(&Pathfinding::Ionic::Zip::ZipEntry::set_CompressionLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zlib", "CompressionLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_CompressionLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_CompressedSize
// Il2CppName: get_CompressedSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_CompressedSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_CompressedSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_UncompressedSize
// Il2CppName: get_UncompressedSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_UncompressedSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_UncompressedSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_IsDirectory
// Il2CppName: get_IsDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_IsDirectory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_IsDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_Encryption
// Il2CppName: get_Encryption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::EncryptionAlgorithm (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_Encryption)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_Encryption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_Encryption
// Il2CppName: set_Encryption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::Pathfinding::Ionic::Zip::EncryptionAlgorithm)>(&Pathfinding::Ionic::Zip::ZipEntry::set_Encryption)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "EncryptionAlgorithm")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_Encryption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_Password
// Il2CppName: set_Password
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::StringW)>(&Pathfinding::Ionic::Zip::ZipEntry::set_Password)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_Password", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_ExtractExistingFile
// Il2CppName: get_ExtractExistingFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ExtractExistingFileAction (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_ExtractExistingFile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_ExtractExistingFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_ExtractExistingFile
// Il2CppName: set_ExtractExistingFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::Pathfinding::Ionic::Zip::ExtractExistingFileAction)>(&Pathfinding::Ionic::Zip::ZipEntry::set_ExtractExistingFile)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ExtractExistingFileAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_ExtractExistingFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_ZipErrorAction
// Il2CppName: get_ZipErrorAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipErrorAction (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_ZipErrorAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_ZipErrorAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_ZipErrorAction
// Il2CppName: set_ZipErrorAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::Pathfinding::Ionic::Zip::ZipErrorAction)>(&Pathfinding::Ionic::Zip::ZipEntry::set_ZipErrorAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipErrorAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_ZipErrorAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_IncludedInMostRecentSave
// Il2CppName: get_IncludedInMostRecentSave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_IncludedInMostRecentSave)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_IncludedInMostRecentSave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_SetCompression
// Il2CppName: get_SetCompression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::SetCompressionCallback* (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_SetCompression)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_SetCompression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_SetCompression
// Il2CppName: set_SetCompression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::Pathfinding::Ionic::Zip::SetCompressionCallback*)>(&Pathfinding::Ionic::Zip::ZipEntry::set_SetCompression)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "SetCompressionCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_SetCompression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_AlternateEncoding
// Il2CppName: get_AlternateEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::Encoding* (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_AlternateEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_AlternateEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_AlternateEncoding
// Il2CppName: set_AlternateEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::System::Text::Encoding*)>(&Pathfinding::Ionic::Zip::ZipEntry::set_AlternateEncoding)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_AlternateEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_AlternateEncodingUsage
// Il2CppName: get_AlternateEncodingUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipOption (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_AlternateEncodingUsage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_AlternateEncodingUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_AlternateEncodingUsage
// Il2CppName: set_AlternateEncodingUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(::Pathfinding::Ionic::Zip::ZipOption)>(&Pathfinding::Ionic::Zip::ZipEntry::set_AlternateEncodingUsage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipOption")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_AlternateEncodingUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::CreateForStream
// Il2CppName: CreateForStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipEntry* (*)(::StringW, ::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipEntry::CreateForStream)> {
  static const MethodInfo* get() {
    static auto* entryName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "CreateForStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entryName, s});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipEntry* (*)(::StringW, ::Pathfinding::Ionic::Zip::ZipEntrySource, ::Il2CppObject*, ::Il2CppObject*)>(&Pathfinding::Ionic::Zip::ZipEntry::Create)> {
  static const MethodInfo* get() {
    static auto* nameInArchive = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntrySource")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameInArchive, source, arg1, arg2});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::MarkAsDirectory
// Il2CppName: MarkAsDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::MarkAsDirectory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "MarkAsDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::set_IsText
// Il2CppName: set_IsText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)(bool)>(&Pathfinding::Ionic::Zip::ZipEntry::set_IsText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "set_IsText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_ArchiveStream
// Il2CppName: get_ArchiveStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_ArchiveStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_ArchiveStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::SetFdpLoh
// Il2CppName: SetFdpLoh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::SetFdpLoh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "SetFdpLoh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::GetLengthOfCryptoHeaderBytes
// Il2CppName: GetLengthOfCryptoHeaderBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Pathfinding::Ionic::Zip::EncryptionAlgorithm)>(&Pathfinding::Ionic::Zip::ZipEntry::GetLengthOfCryptoHeaderBytes)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "EncryptionAlgorithm")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "GetLengthOfCryptoHeaderBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_FileDataPosition
// Il2CppName: get_FileDataPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_FileDataPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_FileDataPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::get_LengthOfHeader
// Il2CppName: get_LengthOfHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::get_LengthOfHeader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "get_LengthOfHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipEntry::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipEntry::*)()>(&Pathfinding::Ionic::Zip::ZipEntry::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipEntry*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
