// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipErrorAction
#include "Pathfinding/Ionic/Zip/ZipErrorAction.hpp"
// Including type: Pathfinding.Ionic.Zlib.CompressionStrategy
#include "Pathfinding/Ionic/Zlib/CompressionStrategy.hpp"
// Including type: Pathfinding.Ionic.Zip.CompressionMethod
#include "Pathfinding/Ionic/Zip/CompressionMethod.hpp"
// Including type: Pathfinding.Ionic.Zip.EncryptionAlgorithm
#include "Pathfinding/Ionic/Zip/EncryptionAlgorithm.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: Pathfinding.Ionic.Zip.ZipOption
#include "Pathfinding/Ionic/Zip/ZipOption.hpp"
// Including type: Pathfinding.Ionic.Zip.Zip64Option
#include "Pathfinding/Ionic/Zip/Zip64Option.hpp"
// Including type: Pathfinding.Ionic.Zlib.CompressionLevel
#include "Pathfinding/Ionic/Zlib/CompressionLevel.hpp"
// Including type: Pathfinding.Ionic.Zip.ExtractExistingFileAction
#include "Pathfinding/Ionic/Zip/ExtractExistingFileAction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Ionic::Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipEntry
  class ZipEntry;
  // Forward declaring type: SaveProgressEventArgs
  class SaveProgressEventArgs;
  // Forward declaring type: ReadProgressEventArgs
  class ReadProgressEventArgs;
  // Forward declaring type: ExtractProgressEventArgs
  class ExtractProgressEventArgs;
  // Forward declaring type: AddProgressEventArgs
  class AddProgressEventArgs;
  // Forward declaring type: ZipErrorEventArgs
  class ZipErrorEventArgs;
  // Forward declaring type: SetCompressionCallback
  class SetCompressionCallback;
  // Forward declaring type: ZipProgressEventType
  struct ZipProgressEventType;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: TextWriter
  class TextWriter;
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: ICollection`1<T>
  template<typename T>
  class ICollection_1;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: Pathfinding::Ionic::Zlib
namespace Pathfinding::Ionic::Zlib {
  // Forward declaring type: ParallelDeflateOutputStream
  class ParallelDeflateOutputStream;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipFile
  class ZipFile;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Ionic::Zip::ZipFile);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Ionic::Zip::ZipFile*, "Pathfinding.Ionic.Zip", "ZipFile");
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // WARNING Size may be invalid!
  // Autogenerated type: Pathfinding.Ionic.Zip.ZipFile
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: ABBD50
  // [ClassInterfaceAttribute] Offset: ABBD50
  // [DefaultMemberAttribute] Offset: ABBD50
  // [GuidAttribute] Offset: ABBD50
  class ZipFile : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerable_1<::Pathfinding::Ionic::Zip::ZipEntry*>, public ::System::IDisposable*/ {
    public:
    // Nested type: ::Pathfinding::Ionic::Zip::ZipFile::$GetEnumerator$c__Iterator0
    class $GetEnumerator$c__Iterator0;
    public:
    // private System.Int64 _lengthOfReadStream
    // Size: 0x8
    // Offset: 0x10
    int64_t lengthOfReadStream;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.IO.TextWriter _StatusMessageTextWriter
    // Size: 0x8
    // Offset: 0x18
    ::System::IO::TextWriter* StatusMessageTextWriter;
    // Field size check
    static_assert(sizeof(::System::IO::TextWriter*) == 0x8);
    // private System.Boolean _CaseSensitiveRetrieval
    // Size: 0x1
    // Offset: 0x20
    bool CaseSensitiveRetrieval;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.IO.Stream _readstream
    // Size: 0x8
    // Offset: 0x28
    ::System::IO::Stream* readstream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.IO.Stream _writestream
    // Size: 0x8
    // Offset: 0x30
    ::System::IO::Stream* writestream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.UInt16 _versionMadeBy
    // Size: 0x2
    // Offset: 0x38
    uint16_t versionMadeBy;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.UInt16 _versionNeededToExtract
    // Size: 0x2
    // Offset: 0x3A
    uint16_t versionNeededToExtract;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.UInt32 _diskNumberWithCd
    // Size: 0x4
    // Offset: 0x3C
    uint diskNumberWithCd;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Int32 _maxOutputSegmentSize
    // Size: 0x4
    // Offset: 0x40
    int maxOutputSegmentSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt32 _numberOfSegmentsForMostRecentSave
    // Size: 0x4
    // Offset: 0x44
    uint numberOfSegmentsForMostRecentSave;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private Pathfinding.Ionic.Zip.ZipErrorAction _zipErrorAction
    // Size: 0x4
    // Offset: 0x48
    ::Pathfinding::Ionic::Zip::ZipErrorAction zipErrorAction;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipErrorAction) == 0x4);
    // private System.Boolean _disposed
    // Size: 0x1
    // Offset: 0x4C
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Collections.Generic.Dictionary`2<System.String,Pathfinding.Ionic.Zip.ZipEntry> _entries
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<::StringW, ::Pathfinding::Ionic::Zip::ZipEntry*>* entries;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::Pathfinding::Ionic::Zip::ZipEntry*>*) == 0x8);
    // private System.Collections.Generic.List`1<Pathfinding.Ionic.Zip.ZipEntry> _zipEntriesAsList
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::Pathfinding::Ionic::Zip::ZipEntry*>* zipEntriesAsList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Pathfinding::Ionic::Zip::ZipEntry*>*) == 0x8);
    // private System.String _name
    // Size: 0x8
    // Offset: 0x60
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _readName
    // Size: 0x8
    // Offset: 0x68
    ::StringW readName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _Comment
    // Size: 0x8
    // Offset: 0x70
    ::StringW Comment;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String _Password
    // Size: 0x8
    // Offset: 0x78
    ::StringW Password;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _emitNtfsTimes
    // Size: 0x1
    // Offset: 0x80
    bool emitNtfsTimes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _emitUnixTimes
    // Size: 0x1
    // Offset: 0x81
    bool emitUnixTimes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Pathfinding.Ionic.Zlib.CompressionStrategy _Strategy
    // Size: 0x4
    // Offset: 0x84
    ::Pathfinding::Ionic::Zlib::CompressionStrategy Strategy;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zlib::CompressionStrategy) == 0x4);
    // private Pathfinding.Ionic.Zip.CompressionMethod _compressionMethod
    // Size: 0x4
    // Offset: 0x88
    ::Pathfinding::Ionic::Zip::CompressionMethod compressionMethod;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::CompressionMethod) == 0x4);
    // private System.Boolean _fileAlreadyExists
    // Size: 0x1
    // Offset: 0x8C
    bool fileAlreadyExists;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.String _temporaryFileName
    // Size: 0x8
    // Offset: 0x90
    ::StringW temporaryFileName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _contentsChanged
    // Size: 0x1
    // Offset: 0x98
    bool contentsChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _hasBeenSaved
    // Size: 0x1
    // Offset: 0x99
    bool hasBeenSaved;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.String _TempFileFolder
    // Size: 0x8
    // Offset: 0xA0
    ::StringW TempFileFolder;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _ReadStreamIsOurs
    // Size: 0x1
    // Offset: 0xA8
    bool ReadStreamIsOurs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Object LOCK
    // Size: 0x8
    // Offset: 0xB0
    ::Il2CppObject* LOCK;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean _saveOperationCanceled
    // Size: 0x1
    // Offset: 0xB8
    bool saveOperationCanceled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _extractOperationCanceled
    // Size: 0x1
    // Offset: 0xB9
    bool extractOperationCanceled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _addOperationCanceled
    // Size: 0x1
    // Offset: 0xBA
    bool addOperationCanceled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Pathfinding.Ionic.Zip.EncryptionAlgorithm _Encryption
    // Size: 0x4
    // Offset: 0xBC
    ::Pathfinding::Ionic::Zip::EncryptionAlgorithm Encryption;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::EncryptionAlgorithm) == 0x4);
    // private System.Boolean _JustSaved
    // Size: 0x1
    // Offset: 0xC0
    bool JustSaved;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int64 _locEndOfCDS
    // Size: 0x8
    // Offset: 0xC8
    int64_t locEndOfCDS;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.UInt32 _OffsetOfCentralDirectory
    // Size: 0x4
    // Offset: 0xD0
    uint OffsetOfCentralDirectory;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Int64 _OffsetOfCentralDirectory64
    // Size: 0x8
    // Offset: 0xD8
    int64_t OffsetOfCentralDirectory64;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Nullable`1<System.Boolean> _OutputUsesZip64
    // Size: 0xFFFFFFFF
    // Offset: 0xE0
    ::System::Nullable_1<bool> OutputUsesZip64;
    // System.Boolean _inExtractAll
    // Size: 0x1
    // Offset: 0xE2
    bool inExtractAll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Text.Encoding _alternateEncoding
    // Size: 0x8
    // Offset: 0xE8
    ::System::Text::Encoding* alternateEncoding;
    // Field size check
    static_assert(sizeof(::System::Text::Encoding*) == 0x8);
    // private Pathfinding.Ionic.Zip.ZipOption _alternateEncodingUsage
    // Size: 0x4
    // Offset: 0xF0
    ::Pathfinding::Ionic::Zip::ZipOption alternateEncodingUsage;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipOption) == 0x4);
    // private System.Int32 _BufferSize
    // Size: 0x4
    // Offset: 0xF4
    int BufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream ParallelDeflater
    // Size: 0x8
    // Offset: 0xF8
    ::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream* ParallelDeflater;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream*) == 0x8);
    // private System.Int64 _ParallelDeflateThreshold
    // Size: 0x8
    // Offset: 0x100
    int64_t ParallelDeflateThreshold;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int32 _maxBufferPairs
    // Size: 0x4
    // Offset: 0x108
    int maxBufferPairs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Pathfinding.Ionic.Zip.Zip64Option _zip64
    // Size: 0x4
    // Offset: 0x10C
    ::Pathfinding::Ionic::Zip::Zip64Option zip64;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::Zip64Option) == 0x4);
    // private System.Boolean _SavingSfx
    // Size: 0x1
    // Offset: 0x110
    bool SavingSfx;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.EventHandler`1<Pathfinding.Ionic.Zip.SaveProgressEventArgs> SaveProgress
    // Size: 0x8
    // Offset: 0x118
    ::System::EventHandler_1<::Pathfinding::Ionic::Zip::SaveProgressEventArgs*>* SaveProgress;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::Pathfinding::Ionic::Zip::SaveProgressEventArgs*>*) == 0x8);
    // private System.EventHandler`1<Pathfinding.Ionic.Zip.ReadProgressEventArgs> ReadProgress
    // Size: 0x8
    // Offset: 0x120
    ::System::EventHandler_1<::Pathfinding::Ionic::Zip::ReadProgressEventArgs*>* ReadProgress;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::Pathfinding::Ionic::Zip::ReadProgressEventArgs*>*) == 0x8);
    // private System.EventHandler`1<Pathfinding.Ionic.Zip.ExtractProgressEventArgs> ExtractProgress
    // Size: 0x8
    // Offset: 0x128
    ::System::EventHandler_1<::Pathfinding::Ionic::Zip::ExtractProgressEventArgs*>* ExtractProgress;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::Pathfinding::Ionic::Zip::ExtractProgressEventArgs*>*) == 0x8);
    // private System.EventHandler`1<Pathfinding.Ionic.Zip.AddProgressEventArgs> AddProgress
    // Size: 0x8
    // Offset: 0x130
    ::System::EventHandler_1<::Pathfinding::Ionic::Zip::AddProgressEventArgs*>* AddProgress;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::Pathfinding::Ionic::Zip::AddProgressEventArgs*>*) == 0x8);
    // private System.EventHandler`1<Pathfinding.Ionic.Zip.ZipErrorEventArgs> ZipError
    // Size: 0x8
    // Offset: 0x138
    ::System::EventHandler_1<::Pathfinding::Ionic::Zip::ZipErrorEventArgs*>* ZipError;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::Pathfinding::Ionic::Zip::ZipErrorEventArgs*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xABBF58
    // private System.Boolean <FullScan>k__BackingField
    // Size: 0x1
    // Offset: 0x140
    bool FullScan;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xABBF68
    // private System.Boolean <SortEntriesBeforeSaving>k__BackingField
    // Size: 0x1
    // Offset: 0x141
    bool SortEntriesBeforeSaving;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xABBF78
    // private System.Boolean <AddDirectoryWillTraverseReparsePoints>k__BackingField
    // Size: 0x1
    // Offset: 0x142
    bool AddDirectoryWillTraverseReparsePoints;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xABBF88
    // private System.Int32 <CodecBufferSize>k__BackingField
    // Size: 0x4
    // Offset: 0x144
    int CodecBufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xABBF98
    // private System.Boolean <FlattenFoldersOnExtract>k__BackingField
    // Size: 0x1
    // Offset: 0x148
    bool FlattenFoldersOnExtract;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xABBFA8
    // private Pathfinding.Ionic.Zlib.CompressionLevel <CompressionLevel>k__BackingField
    // Size: 0x4
    // Offset: 0x14C
    ::Pathfinding::Ionic::Zlib::CompressionLevel CompressionLevel;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zlib::CompressionLevel) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xABBFB8
    // private Pathfinding.Ionic.Zip.ExtractExistingFileAction <ExtractExistingFile>k__BackingField
    // Size: 0x4
    // Offset: 0x150
    ::Pathfinding::Ionic::Zip::ExtractExistingFileAction ExtractExistingFile;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ExtractExistingFileAction) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xABBFC8
    // private Pathfinding.Ionic.Zip.SetCompressionCallback <SetCompression>k__BackingField
    // Size: 0x8
    // Offset: 0x158
    ::Pathfinding::Ionic::Zip::SetCompressionCallback* SetCompression;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::SetCompressionCallback*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::Pathfinding::Ionic::Zip::ZipEntry*>
    operator ::System::Collections::Generic::IEnumerable_1<::Pathfinding::Ionic::Zip::ZipEntry*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::Pathfinding::Ionic::Zip::ZipEntry*>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private System.Text.Encoding _defaultEncoding
    static ::System::Text::Encoding* _get__defaultEncoding();
    // Set static field: static private System.Text.Encoding _defaultEncoding
    static void _set__defaultEncoding(::System::Text::Encoding* value);
    // Get static field: static public readonly System.Int32 BufferSizeDefault
    static int _get_BufferSizeDefault();
    // Set static field: static public readonly System.Int32 BufferSizeDefault
    static void _set_BufferSizeDefault(int value);
    // Get instance field reference: private System.Int64 _lengthOfReadStream
    [[deprecated("Use field access instead!")]] int64_t& dyn__lengthOfReadStream();
    // Get instance field reference: private System.IO.TextWriter _StatusMessageTextWriter
    [[deprecated("Use field access instead!")]] ::System::IO::TextWriter*& dyn__StatusMessageTextWriter();
    // Get instance field reference: private System.Boolean _CaseSensitiveRetrieval
    [[deprecated("Use field access instead!")]] bool& dyn__CaseSensitiveRetrieval();
    // Get instance field reference: private System.IO.Stream _readstream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__readstream();
    // Get instance field reference: private System.IO.Stream _writestream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__writestream();
    // Get instance field reference: private System.UInt16 _versionMadeBy
    [[deprecated("Use field access instead!")]] uint16_t& dyn__versionMadeBy();
    // Get instance field reference: private System.UInt16 _versionNeededToExtract
    [[deprecated("Use field access instead!")]] uint16_t& dyn__versionNeededToExtract();
    // Get instance field reference: private System.UInt32 _diskNumberWithCd
    [[deprecated("Use field access instead!")]] uint& dyn__diskNumberWithCd();
    // Get instance field reference: private System.Int32 _maxOutputSegmentSize
    [[deprecated("Use field access instead!")]] int& dyn__maxOutputSegmentSize();
    // Get instance field reference: private System.UInt32 _numberOfSegmentsForMostRecentSave
    [[deprecated("Use field access instead!")]] uint& dyn__numberOfSegmentsForMostRecentSave();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipErrorAction _zipErrorAction
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipErrorAction& dyn__zipErrorAction();
    // Get instance field reference: private System.Boolean _disposed
    [[deprecated("Use field access instead!")]] bool& dyn__disposed();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,Pathfinding.Ionic.Zip.ZipEntry> _entries
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Pathfinding::Ionic::Zip::ZipEntry*>*& dyn__entries();
    // Get instance field reference: private System.Collections.Generic.List`1<Pathfinding.Ionic.Zip.ZipEntry> _zipEntriesAsList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Pathfinding::Ionic::Zip::ZipEntry*>*& dyn__zipEntriesAsList();
    // Get instance field reference: private System.String _name
    [[deprecated("Use field access instead!")]] ::StringW& dyn__name();
    // Get instance field reference: private System.String _readName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__readName();
    // Get instance field reference: private System.String _Comment
    [[deprecated("Use field access instead!")]] ::StringW& dyn__Comment();
    // Get instance field reference: System.String _Password
    [[deprecated("Use field access instead!")]] ::StringW& dyn__Password();
    // Get instance field reference: private System.Boolean _emitNtfsTimes
    [[deprecated("Use field access instead!")]] bool& dyn__emitNtfsTimes();
    // Get instance field reference: private System.Boolean _emitUnixTimes
    [[deprecated("Use field access instead!")]] bool& dyn__emitUnixTimes();
    // Get instance field reference: private Pathfinding.Ionic.Zlib.CompressionStrategy _Strategy
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionStrategy& dyn__Strategy();
    // Get instance field reference: private Pathfinding.Ionic.Zip.CompressionMethod _compressionMethod
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::CompressionMethod& dyn__compressionMethod();
    // Get instance field reference: private System.Boolean _fileAlreadyExists
    [[deprecated("Use field access instead!")]] bool& dyn__fileAlreadyExists();
    // Get instance field reference: private System.String _temporaryFileName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__temporaryFileName();
    // Get instance field reference: private System.Boolean _contentsChanged
    [[deprecated("Use field access instead!")]] bool& dyn__contentsChanged();
    // Get instance field reference: private System.Boolean _hasBeenSaved
    [[deprecated("Use field access instead!")]] bool& dyn__hasBeenSaved();
    // Get instance field reference: private System.String _TempFileFolder
    [[deprecated("Use field access instead!")]] ::StringW& dyn__TempFileFolder();
    // Get instance field reference: private System.Boolean _ReadStreamIsOurs
    [[deprecated("Use field access instead!")]] bool& dyn__ReadStreamIsOurs();
    // Get instance field reference: private System.Object LOCK
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_LOCK();
    // Get instance field reference: private System.Boolean _saveOperationCanceled
    [[deprecated("Use field access instead!")]] bool& dyn__saveOperationCanceled();
    // Get instance field reference: private System.Boolean _extractOperationCanceled
    [[deprecated("Use field access instead!")]] bool& dyn__extractOperationCanceled();
    // Get instance field reference: private System.Boolean _addOperationCanceled
    [[deprecated("Use field access instead!")]] bool& dyn__addOperationCanceled();
    // Get instance field reference: private Pathfinding.Ionic.Zip.EncryptionAlgorithm _Encryption
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::EncryptionAlgorithm& dyn__Encryption();
    // Get instance field reference: private System.Boolean _JustSaved
    [[deprecated("Use field access instead!")]] bool& dyn__JustSaved();
    // Get instance field reference: private System.Int64 _locEndOfCDS
    [[deprecated("Use field access instead!")]] int64_t& dyn__locEndOfCDS();
    // Get instance field reference: private System.UInt32 _OffsetOfCentralDirectory
    [[deprecated("Use field access instead!")]] uint& dyn__OffsetOfCentralDirectory();
    // Get instance field reference: private System.Int64 _OffsetOfCentralDirectory64
    [[deprecated("Use field access instead!")]] int64_t& dyn__OffsetOfCentralDirectory64();
    // Get instance field reference: private System.Nullable`1<System.Boolean> _OutputUsesZip64
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& dyn__OutputUsesZip64();
    // Get instance field reference: System.Boolean _inExtractAll
    [[deprecated("Use field access instead!")]] bool& dyn__inExtractAll();
    // Get instance field reference: private System.Text.Encoding _alternateEncoding
    [[deprecated("Use field access instead!")]] ::System::Text::Encoding*& dyn__alternateEncoding();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipOption _alternateEncodingUsage
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipOption& dyn__alternateEncodingUsage();
    // Get instance field reference: private System.Int32 _BufferSize
    [[deprecated("Use field access instead!")]] int& dyn__BufferSize();
    // Get instance field reference: Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream ParallelDeflater
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream*& dyn_ParallelDeflater();
    // Get instance field reference: private System.Int64 _ParallelDeflateThreshold
    [[deprecated("Use field access instead!")]] int64_t& dyn__ParallelDeflateThreshold();
    // Get instance field reference: private System.Int32 _maxBufferPairs
    [[deprecated("Use field access instead!")]] int& dyn__maxBufferPairs();
    // Get instance field reference: Pathfinding.Ionic.Zip.Zip64Option _zip64
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::Zip64Option& dyn__zip64();
    // Get instance field reference: private System.Boolean _SavingSfx
    [[deprecated("Use field access instead!")]] bool& dyn__SavingSfx();
    // Get instance field reference: private System.EventHandler`1<Pathfinding.Ionic.Zip.SaveProgressEventArgs> SaveProgress
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::Pathfinding::Ionic::Zip::SaveProgressEventArgs*>*& dyn_SaveProgress();
    // Get instance field reference: private System.EventHandler`1<Pathfinding.Ionic.Zip.ReadProgressEventArgs> ReadProgress
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::Pathfinding::Ionic::Zip::ReadProgressEventArgs*>*& dyn_ReadProgress();
    // Get instance field reference: private System.EventHandler`1<Pathfinding.Ionic.Zip.ExtractProgressEventArgs> ExtractProgress
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::Pathfinding::Ionic::Zip::ExtractProgressEventArgs*>*& dyn_ExtractProgress();
    // Get instance field reference: private System.EventHandler`1<Pathfinding.Ionic.Zip.AddProgressEventArgs> AddProgress
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::Pathfinding::Ionic::Zip::AddProgressEventArgs*>*& dyn_AddProgress();
    // Get instance field reference: private System.EventHandler`1<Pathfinding.Ionic.Zip.ZipErrorEventArgs> ZipError
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::Pathfinding::Ionic::Zip::ZipErrorEventArgs*>*& dyn_ZipError();
    // Get instance field reference: private System.Boolean <FullScan>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$FullScan$k__BackingField();
    // Get instance field reference: private System.Boolean <SortEntriesBeforeSaving>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$SortEntriesBeforeSaving$k__BackingField();
    // Get instance field reference: private System.Boolean <AddDirectoryWillTraverseReparsePoints>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$AddDirectoryWillTraverseReparsePoints$k__BackingField();
    // Get instance field reference: private System.Int32 <CodecBufferSize>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$CodecBufferSize$k__BackingField();
    // Get instance field reference: private System.Boolean <FlattenFoldersOnExtract>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$FlattenFoldersOnExtract$k__BackingField();
    // Get instance field reference: private Pathfinding.Ionic.Zlib.CompressionLevel <CompressionLevel>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionLevel& dyn_$CompressionLevel$k__BackingField();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ExtractExistingFileAction <ExtractExistingFile>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ExtractExistingFileAction& dyn_$ExtractExistingFile$k__BackingField();
    // Get instance field reference: private Pathfinding.Ionic.Zip.SetCompressionCallback <SetCompression>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::SetCompressionCallback*& dyn_$SetCompression$k__BackingField();
    // public System.Void .ctor()
    // Offset: 0x1F5A8A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZipFile* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipFile::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZipFile*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1F5AA88
    static void _cctor();
    // public System.Void add_ReadProgress(System.EventHandler`1<Pathfinding.Ionic.Zip.ReadProgressEventArgs> value)
    // Offset: 0x1F5AAF0
    void add_ReadProgress(::System::EventHandler_1<::Pathfinding::Ionic::Zip::ReadProgressEventArgs*>* value);
    // public System.Void remove_ReadProgress(System.EventHandler`1<Pathfinding.Ionic.Zip.ReadProgressEventArgs> value)
    // Offset: 0x1F5ABEC
    void remove_ReadProgress(::System::EventHandler_1<::Pathfinding::Ionic::Zip::ReadProgressEventArgs*>* value);
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x1F5ACE8
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public Pathfinding.Ionic.Zip.ZipEntry AddEntry(System.String entryName, System.IO.Stream stream)
    // Offset: 0x1F5AD5C
    ::Pathfinding::Ionic::Zip::ZipEntry* AddEntry(::StringW entryName, ::System::IO::Stream* stream);
    // private Pathfinding.Ionic.Zip.ZipEntry _InternalAddEntry(Pathfinding.Ionic.Zip.ZipEntry ze)
    // Offset: 0x1F5AE7C
    ::Pathfinding::Ionic::Zip::ZipEntry* _InternalAddEntry(::Pathfinding::Ionic::Zip::ZipEntry* ze);
    // public Pathfinding.Ionic.Zip.ZipEntry AddEntry(System.String entryName, System.Byte[] byteContent)
    // Offset: 0x1F5B1F8
    ::Pathfinding::Ionic::Zip::ZipEntry* AddEntry(::StringW entryName, ::ArrayW<uint8_t> byteContent);
    // System.Void InternalAddEntry(System.String name, Pathfinding.Ionic.Zip.ZipEntry entry)
    // Offset: 0x1F5B060
    void InternalAddEntry(::StringW name, ::Pathfinding::Ionic::Zip::ZipEntry* entry);
    // private System.String get_ArchiveNameForEvent()
    // Offset: 0x1F5B2C8
    ::StringW get_ArchiveNameForEvent();
    // System.Boolean OnSaveBlock(Pathfinding.Ionic.Zip.ZipEntry entry, System.Int64 bytesXferred, System.Int64 totalBytesToXfer)
    // Offset: 0x1F56958
    bool OnSaveBlock(::Pathfinding::Ionic::Zip::ZipEntry* entry, int64_t bytesXferred, int64_t totalBytesToXfer);
    // private System.Void OnSaveEntry(System.Int32 current, Pathfinding.Ionic.Zip.ZipEntry entry, System.Boolean before)
    // Offset: 0x1F5B320
    void OnSaveEntry(int current, ::Pathfinding::Ionic::Zip::ZipEntry* entry, bool before);
    // private System.Void OnSaveEvent(Pathfinding.Ionic.Zip.ZipProgressEventType eventFlavor)
    // Offset: 0x1F5B460
    void OnSaveEvent(::Pathfinding::Ionic::Zip::ZipProgressEventType eventFlavor);
    // private System.Void OnSaveStarted()
    // Offset: 0x1F5B55C
    void OnSaveStarted();
    // private System.Void OnSaveCompleted()
    // Offset: 0x1F5B630
    void OnSaveCompleted();
    // private System.Void OnReadStarted()
    // Offset: 0x1F5B6E8
    void OnReadStarted();
    // private System.Void OnReadCompleted()
    // Offset: 0x1F5B7A0
    void OnReadCompleted();
    // System.Void OnReadBytes(Pathfinding.Ionic.Zip.ZipEntry entry)
    // Offset: 0x1F52B00
    void OnReadBytes(::Pathfinding::Ionic::Zip::ZipEntry* entry);
    // System.Void OnReadEntry(System.Boolean before, Pathfinding.Ionic.Zip.ZipEntry entry)
    // Offset: 0x1F52E5C
    void OnReadEntry(bool before, ::Pathfinding::Ionic::Zip::ZipEntry* entry);
    // private System.Int64 get_LengthOfReadStream()
    // Offset: 0x1F5B858
    int64_t get_LengthOfReadStream();
    // System.Boolean OnExtractBlock(Pathfinding.Ionic.Zip.ZipEntry entry, System.Int64 bytesWritten, System.Int64 totalBytesToWrite)
    // Offset: 0x1F50320
    bool OnExtractBlock(::Pathfinding::Ionic::Zip::ZipEntry* entry, int64_t bytesWritten, int64_t totalBytesToWrite);
    // System.Boolean OnSingleEntryExtract(Pathfinding.Ionic.Zip.ZipEntry entry, System.String path, System.Boolean before)
    // Offset: 0x1F504BC
    bool OnSingleEntryExtract(::Pathfinding::Ionic::Zip::ZipEntry* entry, ::StringW path, bool before);
    // System.Boolean OnExtractExisting(Pathfinding.Ionic.Zip.ZipEntry entry, System.String path)
    // Offset: 0x1F506DC
    bool OnExtractExisting(::Pathfinding::Ionic::Zip::ZipEntry* entry, ::StringW path);
    // System.Void AfterAddEntry(Pathfinding.Ionic.Zip.ZipEntry entry)
    // Offset: 0x1F5B0E8
    void AfterAddEntry(::Pathfinding::Ionic::Zip::ZipEntry* entry);
    // System.Boolean OnZipErrorSaving(Pathfinding.Ionic.Zip.ZipEntry entry, System.Exception exc)
    // Offset: 0x1F58680
    bool OnZipErrorSaving(::Pathfinding::Ionic::Zip::ZipEntry* entry, ::System::Exception* exc);
    // static public Pathfinding.Ionic.Zip.ZipFile Read(System.IO.Stream zipStream)
    // Offset: 0x1F5B8E4
    static ::Pathfinding::Ionic::Zip::ZipFile* Read(::System::IO::Stream* zipStream);
    // static private Pathfinding.Ionic.Zip.ZipFile Read(System.IO.Stream zipStream, System.IO.TextWriter statusMessageWriter, System.Text.Encoding encoding, System.EventHandler`1<Pathfinding.Ionic.Zip.ReadProgressEventArgs> readProgress)
    // Offset: 0x1F5B954
    static ::Pathfinding::Ionic::Zip::ZipFile* Read(::System::IO::Stream* zipStream, ::System::IO::TextWriter* statusMessageWriter, ::System::Text::Encoding* encoding, ::System::EventHandler_1<::Pathfinding::Ionic::Zip::ReadProgressEventArgs*>* readProgress);
    // static private System.Void ReadIntoInstance(Pathfinding.Ionic.Zip.ZipFile zf)
    // Offset: 0x1F5BAE4
    static void ReadIntoInstance(::Pathfinding::Ionic::Zip::ZipFile* zf);
    // static private System.Void Zip64SeekToCentralDirectory(Pathfinding.Ionic.Zip.ZipFile zf)
    // Offset: 0x1F5C4BC
    static void Zip64SeekToCentralDirectory(::Pathfinding::Ionic::Zip::ZipFile* zf);
    // static private System.UInt32 ReadFirstFourBytes(System.IO.Stream s)
    // Offset: 0x1F5C458
    static uint ReadFirstFourBytes(::System::IO::Stream* s);
    // static private System.Void ReadCentralDirectory(Pathfinding.Ionic.Zip.ZipFile zf)
    // Offset: 0x1F5C7B8
    static void ReadCentralDirectory(::Pathfinding::Ionic::Zip::ZipFile* zf);
    // static private System.Void ReadIntoInstance_Orig(Pathfinding.Ionic.Zip.ZipFile zf)
    // Offset: 0x1F5C030
    static void ReadIntoInstance_Orig(::Pathfinding::Ionic::Zip::ZipFile* zf);
    // static private System.Void ReadCentralDirectoryFooter(Pathfinding.Ionic.Zip.ZipFile zf)
    // Offset: 0x1F5CAB0
    static void ReadCentralDirectoryFooter(::Pathfinding::Ionic::Zip::ZipFile* zf);
    // static private System.Void ReadZipFileComment(Pathfinding.Ionic.Zip.ZipFile zf)
    // Offset: 0x1F5CF90
    static void ReadZipFileComment(::Pathfinding::Ionic::Zip::ZipFile* zf);
    // private System.Void DeleteFileWithRetry(System.String filename)
    // Offset: 0x1F5D160
    void DeleteFileWithRetry(::StringW filename);
    // public System.Void Save()
    // Offset: 0x1F5D290
    void Save();
    // static private System.Void NotifyEntriesSaveComplete(System.Collections.Generic.ICollection`1<Pathfinding.Ionic.Zip.ZipEntry> c)
    // Offset: 0x1F5EBF0
    static void NotifyEntriesSaveComplete(::System::Collections::Generic::ICollection_1<::Pathfinding::Ionic::Zip::ZipEntry*>* c);
    // private System.Void RemoveTempFile()
    // Offset: 0x1F5EF70
    void RemoveTempFile();
    // private System.Void CleanupAfterSaveOperation()
    // Offset: 0x1F5EE90
    void CleanupAfterSaveOperation();
    // public System.Void Save(System.IO.Stream outputStream)
    // Offset: 0x1F5F098
    void Save(::System::IO::Stream* outputStream);
    // public System.Boolean get_FullScan()
    // Offset: 0x1F5F1AC
    bool get_FullScan();
    // public System.Boolean get_SortEntriesBeforeSaving()
    // Offset: 0x1F5DFBC
    bool get_SortEntriesBeforeSaving();
    // public System.Void set_AddDirectoryWillTraverseReparsePoints(System.Boolean value)
    // Offset: 0x1F5F1B4
    void set_AddDirectoryWillTraverseReparsePoints(bool value);
    // public System.Int32 get_BufferSize()
    // Offset: 0x1F4D194
    int get_BufferSize();
    // public System.Int32 get_CodecBufferSize()
    // Offset: 0x1F4D2F0
    int get_CodecBufferSize();
    // public System.Boolean get_FlattenFoldersOnExtract()
    // Offset: 0x1F51D50
    bool get_FlattenFoldersOnExtract();
    // public Pathfinding.Ionic.Zlib.CompressionStrategy get_Strategy()
    // Offset: 0x1F4D340
    ::Pathfinding::Ionic::Zlib::CompressionStrategy get_Strategy();
    // public System.String get_Name()
    // Offset: 0x1F5850C
    ::StringW get_Name();
    // public Pathfinding.Ionic.Zlib.CompressionLevel get_CompressionLevel()
    // Offset: 0x1F5B020
    ::Pathfinding::Ionic::Zlib::CompressionLevel get_CompressionLevel();
    // public System.Void set_CompressionLevel(Pathfinding.Ionic.Zlib.CompressionLevel value)
    // Offset: 0x1F5F1C0
    void set_CompressionLevel(::Pathfinding::Ionic::Zlib::CompressionLevel value);
    // public Pathfinding.Ionic.Zip.CompressionMethod get_CompressionMethod()
    // Offset: 0x1F5B018
    ::Pathfinding::Ionic::Zip::CompressionMethod get_CompressionMethod();
    // public System.String get_Comment()
    // Offset: 0x1F5CF88
    ::StringW get_Comment();
    // public System.Void set_Comment(System.String value)
    // Offset: 0x1F5D150
    void set_Comment(::StringW value);
    // System.Boolean get_Verbose()
    // Offset: 0x1F50898
    bool get_Verbose();
    // public System.Boolean ContainsEntry(System.String name)
    // Offset: 0x1F5F1C8
    bool ContainsEntry(::StringW name);
    // public System.Boolean get_CaseSensitiveRetrieval()
    // Offset: 0x1F5F264
    bool get_CaseSensitiveRetrieval();
    // public Pathfinding.Ionic.Zip.Zip64Option get_UseZip64WhenSaving()
    // Offset: 0x1F4D388
    ::Pathfinding::Ionic::Zip::Zip64Option get_UseZip64WhenSaving();
    // public System.Void set_UseZip64WhenSaving(Pathfinding.Ionic.Zip.Zip64Option value)
    // Offset: 0x1F5CAA8
    void set_UseZip64WhenSaving(::Pathfinding::Ionic::Zip::Zip64Option value);
    // public System.Text.Encoding get_AlternateEncoding()
    // Offset: 0x1F4D3B4
    ::System::Text::Encoding* get_AlternateEncoding();
    // public System.Void set_AlternateEncoding(System.Text.Encoding value)
    // Offset: 0x1F5F26C
    void set_AlternateEncoding(::System::Text::Encoding* value);
    // public Pathfinding.Ionic.Zip.ZipOption get_AlternateEncodingUsage()
    // Offset: 0x1F4D4D8
    ::Pathfinding::Ionic::Zip::ZipOption get_AlternateEncodingUsage();
    // public System.Void set_AlternateEncodingUsage(Pathfinding.Ionic.Zip.ZipOption value)
    // Offset: 0x1F5F274
    void set_AlternateEncodingUsage(::Pathfinding::Ionic::Zip::ZipOption value);
    // static public System.Text.Encoding get_DefaultEncoding()
    // Offset: 0x1F4D44C
    static ::System::Text::Encoding* get_DefaultEncoding();
    // public System.IO.TextWriter get_StatusMessageTextWriter()
    // Offset: 0x1F508A8
    ::System::IO::TextWriter* get_StatusMessageTextWriter();
    // public System.String get_TempFileFolder()
    // Offset: 0x1F5F27C
    ::StringW get_TempFileFolder();
    // public Pathfinding.Ionic.Zip.ExtractExistingFileAction get_ExtractExistingFile()
    // Offset: 0x1F5B028
    ::Pathfinding::Ionic::Zip::ExtractExistingFileAction get_ExtractExistingFile();
    // public Pathfinding.Ionic.Zip.ZipErrorAction get_ZipErrorAction()
    // Offset: 0x1F5B030
    ::Pathfinding::Ionic::Zip::ZipErrorAction get_ZipErrorAction();
    // public Pathfinding.Ionic.Zip.EncryptionAlgorithm get_Encryption()
    // Offset: 0x1F5B058
    ::Pathfinding::Ionic::Zip::EncryptionAlgorithm get_Encryption();
    // public Pathfinding.Ionic.Zip.SetCompressionCallback get_SetCompression()
    // Offset: 0x1F5B050
    ::Pathfinding::Ionic::Zip::SetCompressionCallback* get_SetCompression();
    // public System.Int32 get_MaxOutputSegmentSize()
    // Offset: 0x1F550C0
    int get_MaxOutputSegmentSize();
    // public System.Void set_ParallelDeflateThreshold(System.Int64 value)
    // Offset: 0x1F5F284
    void set_ParallelDeflateThreshold(int64_t value);
    // public System.Int64 get_ParallelDeflateThreshold()
    // Offset: 0x1F4D250
    int64_t get_ParallelDeflateThreshold();
    // public System.Int32 get_ParallelDeflateMaxBufferPairs()
    // Offset: 0x1F4D298
    int get_ParallelDeflateMaxBufferPairs();
    // System.Void NotifyEntryChanged()
    // Offset: 0x1F59E98
    void NotifyEntryChanged();
    // System.IO.Stream StreamForDiskNumber(System.UInt32 diskNumber)
    // Offset: 0x1F5A354
    ::System::IO::Stream* StreamForDiskNumber(uint diskNumber);
    // System.Void Reset(System.Boolean whileSaving)
    // Offset: 0x1F508B0
    void Reset(bool whileSaving);
    // private System.Void _initEntriesDictionary()
    // Offset: 0x1F5F380
    void _initEntriesDictionary();
    // private System.Void _InitInstance(System.String zipFileName, System.IO.TextWriter statusMessageWriter)
    // Offset: 0x1F5A984
    void _InitInstance(::StringW zipFileName, ::System::IO::TextWriter* statusMessageWriter);
    // public Pathfinding.Ionic.Zip.ZipEntry get_Item(System.String fileName)
    // Offset: 0x1F518A0
    ::Pathfinding::Ionic::Zip::ZipEntry* get_Item(::StringW fileName);
    // public System.Collections.Generic.ICollection`1<Pathfinding.Ionic.Zip.ZipEntry> get_Entries()
    // Offset: 0x1F5E298
    ::System::Collections::Generic::ICollection_1<::Pathfinding::Ionic::Zip::ZipEntry*>* get_Entries();
    // public System.Collections.Generic.ICollection`1<Pathfinding.Ionic.Zip.ZipEntry> get_EntriesSorted()
    // Offset: 0x1F5DFC4
    ::System::Collections::Generic::ICollection_1<::Pathfinding::Ionic::Zip::ZipEntry*>* get_EntriesSorted();
    // public System.Void Dispose()
    // Offset: 0x1F5F470
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposeManagedResources)
    // Offset: 0x1F5F4EC
    void Dispose(bool disposeManagedResources);
    // System.IO.Stream get_ReadStream()
    // Offset: 0x1F4D51C
    ::System::IO::Stream* get_ReadStream();
    // private System.IO.Stream get_WriteStream()
    // Offset: 0x1F5DEC8
    ::System::IO::Stream* get_WriteStream();
    // public System.Collections.Generic.IEnumerator`1<Pathfinding.Ionic.Zip.ZipEntry> GetEnumerator()
    // Offset: 0x1F5ACEC
    ::System::Collections::Generic::IEnumerator_1<::Pathfinding::Ionic::Zip::ZipEntry*>* GetEnumerator();
    // public override System.String ToString()
    // Offset: 0x1F5F32C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Pathfinding.Ionic.Zip.ZipFile
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::Ionic::Zip::ZipFile::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::add_ReadProgress
// Il2CppName: add_ReadProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(::System::EventHandler_1<::Pathfinding::Ionic::Zip::ReadProgressEventArgs*>*)>(&Pathfinding::Ionic::Zip::ZipFile::add_ReadProgress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ReadProgressEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "add_ReadProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::remove_ReadProgress
// Il2CppName: remove_ReadProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(::System::EventHandler_1<::Pathfinding::Ionic::Zip::ReadProgressEventArgs*>*)>(&Pathfinding::Ionic::Zip::ZipFile::remove_ReadProgress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ReadProgressEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "remove_ReadProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::AddEntry
// Il2CppName: AddEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipEntry* (Pathfinding::Ionic::Zip::ZipFile::*)(::StringW, ::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipFile::AddEntry)> {
  static const MethodInfo* get() {
    static auto* entryName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "AddEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entryName, stream});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::_InternalAddEntry
// Il2CppName: _InternalAddEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipEntry* (Pathfinding::Ionic::Zip::ZipFile::*)(::Pathfinding::Ionic::Zip::ZipEntry*)>(&Pathfinding::Ionic::Zip::ZipFile::_InternalAddEntry)> {
  static const MethodInfo* get() {
    static auto* ze = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "_InternalAddEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ze});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::AddEntry
// Il2CppName: AddEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipEntry* (Pathfinding::Ionic::Zip::ZipFile::*)(::StringW, ::ArrayW<uint8_t>)>(&Pathfinding::Ionic::Zip::ZipFile::AddEntry)> {
  static const MethodInfo* get() {
    static auto* entryName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* byteContent = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "AddEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entryName, byteContent});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::InternalAddEntry
// Il2CppName: InternalAddEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(::StringW, ::Pathfinding::Ionic::Zip::ZipEntry*)>(&Pathfinding::Ionic::Zip::ZipFile::InternalAddEntry)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* entry = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "InternalAddEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, entry});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_ArchiveNameForEvent
// Il2CppName: get_ArchiveNameForEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_ArchiveNameForEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_ArchiveNameForEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::OnSaveBlock
// Il2CppName: OnSaveBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipFile::*)(::Pathfinding::Ionic::Zip::ZipEntry*, int64_t, int64_t)>(&Pathfinding::Ionic::Zip::ZipFile::OnSaveBlock)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    static auto* bytesXferred = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* totalBytesToXfer = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "OnSaveBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry, bytesXferred, totalBytesToXfer});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::OnSaveEntry
// Il2CppName: OnSaveEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(int, ::Pathfinding::Ionic::Zip::ZipEntry*, bool)>(&Pathfinding::Ionic::Zip::ZipFile::OnSaveEntry)> {
  static const MethodInfo* get() {
    static auto* current = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* entry = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    static auto* before = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "OnSaveEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{current, entry, before});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::OnSaveEvent
// Il2CppName: OnSaveEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(::Pathfinding::Ionic::Zip::ZipProgressEventType)>(&Pathfinding::Ionic::Zip::ZipFile::OnSaveEvent)> {
  static const MethodInfo* get() {
    static auto* eventFlavor = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipProgressEventType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "OnSaveEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventFlavor});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::OnSaveStarted
// Il2CppName: OnSaveStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::OnSaveStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "OnSaveStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::OnSaveCompleted
// Il2CppName: OnSaveCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::OnSaveCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "OnSaveCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::OnReadStarted
// Il2CppName: OnReadStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::OnReadStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "OnReadStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::OnReadCompleted
// Il2CppName: OnReadCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::OnReadCompleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "OnReadCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::OnReadBytes
// Il2CppName: OnReadBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(::Pathfinding::Ionic::Zip::ZipEntry*)>(&Pathfinding::Ionic::Zip::ZipFile::OnReadBytes)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "OnReadBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::OnReadEntry
// Il2CppName: OnReadEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(bool, ::Pathfinding::Ionic::Zip::ZipEntry*)>(&Pathfinding::Ionic::Zip::ZipFile::OnReadEntry)> {
  static const MethodInfo* get() {
    static auto* before = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* entry = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "OnReadEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{before, entry});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_LengthOfReadStream
// Il2CppName: get_LengthOfReadStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_LengthOfReadStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_LengthOfReadStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::OnExtractBlock
// Il2CppName: OnExtractBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipFile::*)(::Pathfinding::Ionic::Zip::ZipEntry*, int64_t, int64_t)>(&Pathfinding::Ionic::Zip::ZipFile::OnExtractBlock)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    static auto* bytesWritten = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* totalBytesToWrite = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "OnExtractBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry, bytesWritten, totalBytesToWrite});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::OnSingleEntryExtract
// Il2CppName: OnSingleEntryExtract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipFile::*)(::Pathfinding::Ionic::Zip::ZipEntry*, ::StringW, bool)>(&Pathfinding::Ionic::Zip::ZipFile::OnSingleEntryExtract)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* before = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "OnSingleEntryExtract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry, path, before});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::OnExtractExisting
// Il2CppName: OnExtractExisting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipFile::*)(::Pathfinding::Ionic::Zip::ZipEntry*, ::StringW)>(&Pathfinding::Ionic::Zip::ZipFile::OnExtractExisting)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "OnExtractExisting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry, path});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::AfterAddEntry
// Il2CppName: AfterAddEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(::Pathfinding::Ionic::Zip::ZipEntry*)>(&Pathfinding::Ionic::Zip::ZipFile::AfterAddEntry)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "AfterAddEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::OnZipErrorSaving
// Il2CppName: OnZipErrorSaving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipFile::*)(::Pathfinding::Ionic::Zip::ZipEntry*, ::System::Exception*)>(&Pathfinding::Ionic::Zip::ZipFile::OnZipErrorSaving)> {
  static const MethodInfo* get() {
    static auto* entry = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")->byval_arg;
    static auto* exc = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "OnZipErrorSaving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entry, exc});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipFile* (*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipFile::Read)> {
  static const MethodInfo* get() {
    static auto* zipStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zipStream});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipFile* (*)(::System::IO::Stream*, ::System::IO::TextWriter*, ::System::Text::Encoding*, ::System::EventHandler_1<::Pathfinding::Ionic::Zip::ReadProgressEventArgs*>*)>(&Pathfinding::Ionic::Zip::ZipFile::Read)> {
  static const MethodInfo* get() {
    static auto* zipStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* statusMessageWriter = &::il2cpp_utils::GetClassFromName("System.IO", "TextWriter")->byval_arg;
    static auto* encoding = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    static auto* readProgress = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ReadProgressEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zipStream, statusMessageWriter, encoding, readProgress});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::ReadIntoInstance
// Il2CppName: ReadIntoInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Ionic::Zip::ZipFile*)>(&Pathfinding::Ionic::Zip::ZipFile::ReadIntoInstance)> {
  static const MethodInfo* get() {
    static auto* zf = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipFile")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "ReadIntoInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zf});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::Zip64SeekToCentralDirectory
// Il2CppName: Zip64SeekToCentralDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Ionic::Zip::ZipFile*)>(&Pathfinding::Ionic::Zip::ZipFile::Zip64SeekToCentralDirectory)> {
  static const MethodInfo* get() {
    static auto* zf = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipFile")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "Zip64SeekToCentralDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zf});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::ReadFirstFourBytes
// Il2CppName: ReadFirstFourBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipFile::ReadFirstFourBytes)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "ReadFirstFourBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::ReadCentralDirectory
// Il2CppName: ReadCentralDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Ionic::Zip::ZipFile*)>(&Pathfinding::Ionic::Zip::ZipFile::ReadCentralDirectory)> {
  static const MethodInfo* get() {
    static auto* zf = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipFile")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "ReadCentralDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zf});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::ReadIntoInstance_Orig
// Il2CppName: ReadIntoInstance_Orig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Ionic::Zip::ZipFile*)>(&Pathfinding::Ionic::Zip::ZipFile::ReadIntoInstance_Orig)> {
  static const MethodInfo* get() {
    static auto* zf = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipFile")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "ReadIntoInstance_Orig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zf});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::ReadCentralDirectoryFooter
// Il2CppName: ReadCentralDirectoryFooter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Ionic::Zip::ZipFile*)>(&Pathfinding::Ionic::Zip::ZipFile::ReadCentralDirectoryFooter)> {
  static const MethodInfo* get() {
    static auto* zf = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipFile")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "ReadCentralDirectoryFooter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zf});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::ReadZipFileComment
// Il2CppName: ReadZipFileComment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Ionic::Zip::ZipFile*)>(&Pathfinding::Ionic::Zip::ZipFile::ReadZipFileComment)> {
  static const MethodInfo* get() {
    static auto* zf = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipFile")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "ReadZipFileComment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zf});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::DeleteFileWithRetry
// Il2CppName: DeleteFileWithRetry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(::StringW)>(&Pathfinding::Ionic::Zip::ZipFile::DeleteFileWithRetry)> {
  static const MethodInfo* get() {
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "DeleteFileWithRetry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filename});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::Save)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::NotifyEntriesSaveComplete
// Il2CppName: NotifyEntriesSaveComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::ICollection_1<::Pathfinding::Ionic::Zip::ZipEntry*>*)>(&Pathfinding::Ionic::Zip::ZipFile::NotifyEntriesSaveComplete)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "ICollection`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipEntry")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "NotifyEntriesSaveComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::RemoveTempFile
// Il2CppName: RemoveTempFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::RemoveTempFile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "RemoveTempFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::CleanupAfterSaveOperation
// Il2CppName: CleanupAfterSaveOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::CleanupAfterSaveOperation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "CleanupAfterSaveOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(::System::IO::Stream*)>(&Pathfinding::Ionic::Zip::ZipFile::Save)> {
  static const MethodInfo* get() {
    static auto* outputStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outputStream});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_FullScan
// Il2CppName: get_FullScan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_FullScan)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_FullScan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_SortEntriesBeforeSaving
// Il2CppName: get_SortEntriesBeforeSaving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_SortEntriesBeforeSaving)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_SortEntriesBeforeSaving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::set_AddDirectoryWillTraverseReparsePoints
// Il2CppName: set_AddDirectoryWillTraverseReparsePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(bool)>(&Pathfinding::Ionic::Zip::ZipFile::set_AddDirectoryWillTraverseReparsePoints)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "set_AddDirectoryWillTraverseReparsePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_BufferSize
// Il2CppName: get_BufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_BufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_BufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_CodecBufferSize
// Il2CppName: get_CodecBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_CodecBufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_CodecBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_FlattenFoldersOnExtract
// Il2CppName: get_FlattenFoldersOnExtract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_FlattenFoldersOnExtract)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_FlattenFoldersOnExtract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_Strategy
// Il2CppName: get_Strategy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zlib::CompressionStrategy (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_Strategy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_Strategy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_CompressionLevel
// Il2CppName: get_CompressionLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zlib::CompressionLevel (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_CompressionLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_CompressionLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::set_CompressionLevel
// Il2CppName: set_CompressionLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(::Pathfinding::Ionic::Zlib::CompressionLevel)>(&Pathfinding::Ionic::Zip::ZipFile::set_CompressionLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zlib", "CompressionLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "set_CompressionLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_CompressionMethod
// Il2CppName: get_CompressionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::CompressionMethod (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_CompressionMethod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_CompressionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_Comment
// Il2CppName: get_Comment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_Comment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_Comment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::set_Comment
// Il2CppName: set_Comment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(::StringW)>(&Pathfinding::Ionic::Zip::ZipFile::set_Comment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "set_Comment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_Verbose
// Il2CppName: get_Verbose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_Verbose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_Verbose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::ContainsEntry
// Il2CppName: ContainsEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipFile::*)(::StringW)>(&Pathfinding::Ionic::Zip::ZipFile::ContainsEntry)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "ContainsEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_CaseSensitiveRetrieval
// Il2CppName: get_CaseSensitiveRetrieval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_CaseSensitiveRetrieval)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_CaseSensitiveRetrieval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_UseZip64WhenSaving
// Il2CppName: get_UseZip64WhenSaving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::Zip64Option (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_UseZip64WhenSaving)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_UseZip64WhenSaving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::set_UseZip64WhenSaving
// Il2CppName: set_UseZip64WhenSaving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(::Pathfinding::Ionic::Zip::Zip64Option)>(&Pathfinding::Ionic::Zip::ZipFile::set_UseZip64WhenSaving)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "Zip64Option")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "set_UseZip64WhenSaving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_AlternateEncoding
// Il2CppName: get_AlternateEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::Encoding* (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_AlternateEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_AlternateEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::set_AlternateEncoding
// Il2CppName: set_AlternateEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(::System::Text::Encoding*)>(&Pathfinding::Ionic::Zip::ZipFile::set_AlternateEncoding)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "set_AlternateEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_AlternateEncodingUsage
// Il2CppName: get_AlternateEncodingUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipOption (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_AlternateEncodingUsage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_AlternateEncodingUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::set_AlternateEncodingUsage
// Il2CppName: set_AlternateEncodingUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(::Pathfinding::Ionic::Zip::ZipOption)>(&Pathfinding::Ionic::Zip::ZipFile::set_AlternateEncodingUsage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zip", "ZipOption")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "set_AlternateEncodingUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_DefaultEncoding
// Il2CppName: get_DefaultEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::Encoding* (*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_DefaultEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_DefaultEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_StatusMessageTextWriter
// Il2CppName: get_StatusMessageTextWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::TextWriter* (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_StatusMessageTextWriter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_StatusMessageTextWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_TempFileFolder
// Il2CppName: get_TempFileFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_TempFileFolder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_TempFileFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_ExtractExistingFile
// Il2CppName: get_ExtractExistingFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ExtractExistingFileAction (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_ExtractExistingFile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_ExtractExistingFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_ZipErrorAction
// Il2CppName: get_ZipErrorAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipErrorAction (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_ZipErrorAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_ZipErrorAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_Encryption
// Il2CppName: get_Encryption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::EncryptionAlgorithm (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_Encryption)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_Encryption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_SetCompression
// Il2CppName: get_SetCompression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::SetCompressionCallback* (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_SetCompression)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_SetCompression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_MaxOutputSegmentSize
// Il2CppName: get_MaxOutputSegmentSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_MaxOutputSegmentSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_MaxOutputSegmentSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::set_ParallelDeflateThreshold
// Il2CppName: set_ParallelDeflateThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(int64_t)>(&Pathfinding::Ionic::Zip::ZipFile::set_ParallelDeflateThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "set_ParallelDeflateThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_ParallelDeflateThreshold
// Il2CppName: get_ParallelDeflateThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_ParallelDeflateThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_ParallelDeflateThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_ParallelDeflateMaxBufferPairs
// Il2CppName: get_ParallelDeflateMaxBufferPairs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_ParallelDeflateMaxBufferPairs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_ParallelDeflateMaxBufferPairs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::NotifyEntryChanged
// Il2CppName: NotifyEntryChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::NotifyEntryChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "NotifyEntryChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::StreamForDiskNumber
// Il2CppName: StreamForDiskNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (Pathfinding::Ionic::Zip::ZipFile::*)(uint)>(&Pathfinding::Ionic::Zip::ZipFile::StreamForDiskNumber)> {
  static const MethodInfo* get() {
    static auto* diskNumber = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "StreamForDiskNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{diskNumber});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(bool)>(&Pathfinding::Ionic::Zip::ZipFile::Reset)> {
  static const MethodInfo* get() {
    static auto* whileSaving = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{whileSaving});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::_initEntriesDictionary
// Il2CppName: _initEntriesDictionary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::_initEntriesDictionary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "_initEntriesDictionary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::_InitInstance
// Il2CppName: _InitInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(::StringW, ::System::IO::TextWriter*)>(&Pathfinding::Ionic::Zip::ZipFile::_InitInstance)> {
  static const MethodInfo* get() {
    static auto* zipFileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* statusMessageWriter = &::il2cpp_utils::GetClassFromName("System.IO", "TextWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "_InitInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zipFileName, statusMessageWriter});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipEntry* (Pathfinding::Ionic::Zip::ZipFile::*)(::StringW)>(&Pathfinding::Ionic::Zip::ZipFile::get_Item)> {
  static const MethodInfo* get() {
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fileName});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_Entries
// Il2CppName: get_Entries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::ICollection_1<::Pathfinding::Ionic::Zip::ZipEntry*>* (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_Entries)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_Entries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_EntriesSorted
// Il2CppName: get_EntriesSorted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::ICollection_1<::Pathfinding::Ionic::Zip::ZipEntry*>* (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_EntriesSorted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_EntriesSorted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipFile::*)(bool)>(&Pathfinding::Ionic::Zip::ZipFile::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposeManagedResources = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposeManagedResources});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_ReadStream
// Il2CppName: get_ReadStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_ReadStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_ReadStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::get_WriteStream
// Il2CppName: get_WriteStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::get_WriteStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "get_WriteStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::Pathfinding::Ionic::Zip::ZipEntry*>* (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipFile::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipFile::*)()>(&Pathfinding::Ionic::Zip::ZipFile::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipFile*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
