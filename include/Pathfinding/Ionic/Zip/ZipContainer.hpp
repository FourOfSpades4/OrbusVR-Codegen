// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Ionic::Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipFile
  class ZipFile;
  // Forward declaring type: ZipOutputStream
  class ZipOutputStream;
  // Forward declaring type: ZipInputStream
  class ZipInputStream;
  // Forward declaring type: Zip64Option
  struct Zip64Option;
  // Forward declaring type: ZipOption
  struct ZipOption;
}
// Forward declaring namespace: Pathfinding::Ionic::Zlib
namespace Pathfinding::Ionic::Zlib {
  // Forward declaring type: ParallelDeflateOutputStream
  class ParallelDeflateOutputStream;
  // Forward declaring type: CompressionStrategy
  struct CompressionStrategy;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Forward declaring type: ZipContainer
  class ZipContainer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Ionic::Zip::ZipContainer);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Ionic::Zip::ZipContainer*, "Pathfinding.Ionic.Zip", "ZipContainer");
// Type namespace: Pathfinding.Ionic.Zip
namespace Pathfinding::Ionic::Zip {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Ionic.Zip.ZipContainer
  // [TokenAttribute] Offset: FFFFFFFF
  class ZipContainer : public ::Il2CppObject {
    public:
    public:
    // private Pathfinding.Ionic.Zip.ZipFile _zf
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::Ionic::Zip::ZipFile* zf;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipFile*) == 0x8);
    // private Pathfinding.Ionic.Zip.ZipOutputStream _zos
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::Ionic::Zip::ZipOutputStream* zos;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipOutputStream*) == 0x8);
    // private Pathfinding.Ionic.Zip.ZipInputStream _zis
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::Ionic::Zip::ZipInputStream* zis;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zip::ZipInputStream*) == 0x8);
    public:
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipFile _zf
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipFile*& dyn__zf();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipOutputStream _zos
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipOutputStream*& dyn__zos();
    // Get instance field reference: private Pathfinding.Ionic.Zip.ZipInputStream _zis
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zip::ZipInputStream*& dyn__zis();
    // public System.Void .ctor(System.Object o)
    // Offset: 0x1F4CED0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZipContainer* New_ctor(::Il2CppObject* o) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zip::ZipContainer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZipContainer*, creationType>(o)));
    }
    // public Pathfinding.Ionic.Zip.ZipFile get_ZipFile()
    // Offset: 0x1F4CFF8
    ::Pathfinding::Ionic::Zip::ZipFile* get_ZipFile();
    // public Pathfinding.Ionic.Zip.ZipOutputStream get_ZipOutputStream()
    // Offset: 0x1F4D000
    ::Pathfinding::Ionic::Zip::ZipOutputStream* get_ZipOutputStream();
    // public System.String get_Password()
    // Offset: 0x1F4D008
    ::StringW get_Password();
    // public Pathfinding.Ionic.Zip.Zip64Option get_Zip64()
    // Offset: 0x1F4D058
    ::Pathfinding::Ionic::Zip::Zip64Option get_Zip64();
    // public System.Int32 get_BufferSize()
    // Offset: 0x1F4D100
    int get_BufferSize();
    // public Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream get_ParallelDeflater()
    // Offset: 0x1F4D19C
    ::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream* get_ParallelDeflater();
    // public System.Void set_ParallelDeflater(Pathfinding.Ionic.Zlib.ParallelDeflateOutputStream value)
    // Offset: 0x1F4D1EC
    void set_ParallelDeflater(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream* value);
    // public System.Int64 get_ParallelDeflateThreshold()
    // Offset: 0x1F4D210
    int64_t get_ParallelDeflateThreshold();
    // public System.Int32 get_ParallelDeflateMaxBufferPairs()
    // Offset: 0x1F4D258
    int get_ParallelDeflateMaxBufferPairs();
    // public System.Int32 get_CodecBufferSize()
    // Offset: 0x1F4D2A0
    int get_CodecBufferSize();
    // public Pathfinding.Ionic.Zlib.CompressionStrategy get_Strategy()
    // Offset: 0x1F4D300
    ::Pathfinding::Ionic::Zlib::CompressionStrategy get_Strategy();
    // public Pathfinding.Ionic.Zip.Zip64Option get_UseZip64WhenSaving()
    // Offset: 0x1F4D348
    ::Pathfinding::Ionic::Zip::Zip64Option get_UseZip64WhenSaving();
    // public System.Text.Encoding get_AlternateEncoding()
    // Offset: 0x1F4D390
    ::System::Text::Encoding* get_AlternateEncoding();
    // public System.Text.Encoding get_DefaultEncoding()
    // Offset: 0x1F4D3BC
    ::System::Text::Encoding* get_DefaultEncoding();
    // public Pathfinding.Ionic.Zip.ZipOption get_AlternateEncodingUsage()
    // Offset: 0x1F4D4B4
    ::Pathfinding::Ionic::Zip::ZipOption get_AlternateEncodingUsage();
    // public System.IO.Stream get_ReadStream()
    // Offset: 0x1F4D4E0
    ::System::IO::Stream* get_ReadStream();
  }; // Pathfinding.Ionic.Zip.ZipContainer
  #pragma pack(pop)
  static check_size<sizeof(ZipContainer), 32 + sizeof(::Pathfinding::Ionic::Zip::ZipInputStream*)> __Pathfinding_Ionic_Zip_ZipContainerSizeCheck;
  static_assert(sizeof(ZipContainer) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::get_ZipFile
// Il2CppName: get_ZipFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipFile* (Pathfinding::Ionic::Zip::ZipContainer::*)()>(&Pathfinding::Ionic::Zip::ZipContainer::get_ZipFile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "get_ZipFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::get_ZipOutputStream
// Il2CppName: get_ZipOutputStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipOutputStream* (Pathfinding::Ionic::Zip::ZipContainer::*)()>(&Pathfinding::Ionic::Zip::ZipContainer::get_ZipOutputStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "get_ZipOutputStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::get_Password
// Il2CppName: get_Password
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zip::ZipContainer::*)()>(&Pathfinding::Ionic::Zip::ZipContainer::get_Password)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "get_Password", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::get_Zip64
// Il2CppName: get_Zip64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::Zip64Option (Pathfinding::Ionic::Zip::ZipContainer::*)()>(&Pathfinding::Ionic::Zip::ZipContainer::get_Zip64)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "get_Zip64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::get_BufferSize
// Il2CppName: get_BufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipContainer::*)()>(&Pathfinding::Ionic::Zip::ZipContainer::get_BufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "get_BufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::get_ParallelDeflater
// Il2CppName: get_ParallelDeflater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream* (Pathfinding::Ionic::Zip::ZipContainer::*)()>(&Pathfinding::Ionic::Zip::ZipContainer::get_ParallelDeflater)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "get_ParallelDeflater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::set_ParallelDeflater
// Il2CppName: set_ParallelDeflater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zip::ZipContainer::*)(::Pathfinding::Ionic::Zlib::ParallelDeflateOutputStream*)>(&Pathfinding::Ionic::Zip::ZipContainer::set_ParallelDeflater)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zlib", "ParallelDeflateOutputStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "set_ParallelDeflater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::get_ParallelDeflateThreshold
// Il2CppName: get_ParallelDeflateThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zip::ZipContainer::*)()>(&Pathfinding::Ionic::Zip::ZipContainer::get_ParallelDeflateThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "get_ParallelDeflateThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::get_ParallelDeflateMaxBufferPairs
// Il2CppName: get_ParallelDeflateMaxBufferPairs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipContainer::*)()>(&Pathfinding::Ionic::Zip::ZipContainer::get_ParallelDeflateMaxBufferPairs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "get_ParallelDeflateMaxBufferPairs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::get_CodecBufferSize
// Il2CppName: get_CodecBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zip::ZipContainer::*)()>(&Pathfinding::Ionic::Zip::ZipContainer::get_CodecBufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "get_CodecBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::get_Strategy
// Il2CppName: get_Strategy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zlib::CompressionStrategy (Pathfinding::Ionic::Zip::ZipContainer::*)()>(&Pathfinding::Ionic::Zip::ZipContainer::get_Strategy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "get_Strategy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::get_UseZip64WhenSaving
// Il2CppName: get_UseZip64WhenSaving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::Zip64Option (Pathfinding::Ionic::Zip::ZipContainer::*)()>(&Pathfinding::Ionic::Zip::ZipContainer::get_UseZip64WhenSaving)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "get_UseZip64WhenSaving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::get_AlternateEncoding
// Il2CppName: get_AlternateEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::Encoding* (Pathfinding::Ionic::Zip::ZipContainer::*)()>(&Pathfinding::Ionic::Zip::ZipContainer::get_AlternateEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "get_AlternateEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::get_DefaultEncoding
// Il2CppName: get_DefaultEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::Encoding* (Pathfinding::Ionic::Zip::ZipContainer::*)()>(&Pathfinding::Ionic::Zip::ZipContainer::get_DefaultEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "get_DefaultEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::get_AlternateEncodingUsage
// Il2CppName: get_AlternateEncodingUsage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zip::ZipOption (Pathfinding::Ionic::Zip::ZipContainer::*)()>(&Pathfinding::Ionic::Zip::ZipContainer::get_AlternateEncodingUsage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "get_AlternateEncodingUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zip::ZipContainer::get_ReadStream
// Il2CppName: get_ReadStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (Pathfinding::Ionic::Zip::ZipContainer::*)()>(&Pathfinding::Ionic::Zip::ZipContainer::get_ReadStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zip::ZipContainer*), "get_ReadStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
