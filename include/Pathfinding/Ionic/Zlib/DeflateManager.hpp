// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Ionic.Zlib.CompressionLevel
#include "Pathfinding/Ionic/Zlib/CompressionLevel.hpp"
// Including type: Pathfinding.Ionic.Zlib.CompressionStrategy
#include "Pathfinding/Ionic/Zlib/CompressionStrategy.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Ionic::Zlib
namespace Pathfinding::Ionic::Zlib {
  // Forward declaring type: ZlibCodec
  class ZlibCodec;
  // Forward declaring type: Tree
  class Tree;
  // Forward declaring type: BlockState
  struct BlockState;
  // Forward declaring type: FlushType
  struct FlushType;
}
// Completed forward declares
// Type namespace: Pathfinding.Ionic.Zlib
namespace Pathfinding::Ionic::Zlib {
  // Forward declaring type: DeflateManager
  class DeflateManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Ionic::Zlib::DeflateManager);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Ionic::Zlib::DeflateManager*, "Pathfinding.Ionic.Zlib", "DeflateManager");
// Type namespace: Pathfinding.Ionic.Zlib
namespace Pathfinding::Ionic::Zlib {
  // Size: 0x132
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.Ionic.Zlib.DeflateManager
  // [TokenAttribute] Offset: FFFFFFFF
  class DeflateManager : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::Ionic::Zlib::DeflateManager::CompressFunc
    class CompressFunc;
    // Nested type: ::Pathfinding::Ionic::Zlib::DeflateManager::Config
    class Config;
    public:
    // private Pathfinding.Ionic.Zlib.DeflateManager/CompressFunc DeflateFunction
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::Ionic::Zlib::DeflateManager::CompressFunc* DeflateFunction;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zlib::DeflateManager::CompressFunc*) == 0x8);
    // Pathfinding.Ionic.Zlib.ZlibCodec _codec
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::Ionic::Zlib::ZlibCodec* codec;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zlib::ZlibCodec*) == 0x8);
    // System.Int32 status
    // Size: 0x4
    // Offset: 0x20
    int status;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: status and: pending
    char __padding2[0x4] = {};
    // System.Byte[] pending
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<uint8_t> pending;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.Int32 nextPending
    // Size: 0x4
    // Offset: 0x30
    int nextPending;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 pendingCount
    // Size: 0x4
    // Offset: 0x34
    int pendingCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.SByte data_type
    // Size: 0x1
    // Offset: 0x38
    int8_t data_type;
    // Field size check
    static_assert(sizeof(int8_t) == 0x1);
    // Padding between fields: data_type and: last_flush
    char __padding6[0x3] = {};
    // System.Int32 last_flush
    // Size: 0x4
    // Offset: 0x3C
    int last_flush;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 w_size
    // Size: 0x4
    // Offset: 0x40
    int w_size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 w_bits
    // Size: 0x4
    // Offset: 0x44
    int w_bits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 w_mask
    // Size: 0x4
    // Offset: 0x48
    int w_mask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: w_mask and: window
    char __padding10[0x4] = {};
    // System.Byte[] window
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<uint8_t> window;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.Int32 window_size
    // Size: 0x4
    // Offset: 0x58
    int window_size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: window_size and: prev
    char __padding12[0x4] = {};
    // System.Int16[] prev
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<int16_t> prev;
    // Field size check
    static_assert(sizeof(::ArrayW<int16_t>) == 0x8);
    // System.Int16[] head
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<int16_t> head;
    // Field size check
    static_assert(sizeof(::ArrayW<int16_t>) == 0x8);
    // System.Int32 ins_h
    // Size: 0x4
    // Offset: 0x70
    int ins_h;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 hash_size
    // Size: 0x4
    // Offset: 0x74
    int hash_size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 hash_bits
    // Size: 0x4
    // Offset: 0x78
    int hash_bits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 hash_mask
    // Size: 0x4
    // Offset: 0x7C
    int hash_mask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 hash_shift
    // Size: 0x4
    // Offset: 0x80
    int hash_shift;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 block_start
    // Size: 0x4
    // Offset: 0x84
    int block_start;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Pathfinding.Ionic.Zlib.DeflateManager/Config config
    // Size: 0x8
    // Offset: 0x88
    ::Pathfinding::Ionic::Zlib::DeflateManager::Config* config;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zlib::DeflateManager::Config*) == 0x8);
    // System.Int32 match_length
    // Size: 0x4
    // Offset: 0x90
    int match_length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 prev_match
    // Size: 0x4
    // Offset: 0x94
    int prev_match;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 match_available
    // Size: 0x4
    // Offset: 0x98
    int match_available;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 strstart
    // Size: 0x4
    // Offset: 0x9C
    int strstart;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 match_start
    // Size: 0x4
    // Offset: 0xA0
    int match_start;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 lookahead
    // Size: 0x4
    // Offset: 0xA4
    int lookahead;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 prev_length
    // Size: 0x4
    // Offset: 0xA8
    int prev_length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Pathfinding.Ionic.Zlib.CompressionLevel compressionLevel
    // Size: 0x4
    // Offset: 0xAC
    ::Pathfinding::Ionic::Zlib::CompressionLevel compressionLevel;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zlib::CompressionLevel) == 0x4);
    // Pathfinding.Ionic.Zlib.CompressionStrategy compressionStrategy
    // Size: 0x4
    // Offset: 0xB0
    ::Pathfinding::Ionic::Zlib::CompressionStrategy compressionStrategy;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zlib::CompressionStrategy) == 0x4);
    // Padding between fields: compressionStrategy and: dyn_ltree
    char __padding30[0x4] = {};
    // System.Int16[] dyn_ltree
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<int16_t> dyn_ltree;
    // Field size check
    static_assert(sizeof(::ArrayW<int16_t>) == 0x8);
    // System.Int16[] dyn_dtree
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<int16_t> dyn_dtree;
    // Field size check
    static_assert(sizeof(::ArrayW<int16_t>) == 0x8);
    // System.Int16[] bl_tree
    // Size: 0x8
    // Offset: 0xC8
    ::ArrayW<int16_t> bl_tree;
    // Field size check
    static_assert(sizeof(::ArrayW<int16_t>) == 0x8);
    // Pathfinding.Ionic.Zlib.Tree treeLiterals
    // Size: 0x8
    // Offset: 0xD0
    ::Pathfinding::Ionic::Zlib::Tree* treeLiterals;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zlib::Tree*) == 0x8);
    // Pathfinding.Ionic.Zlib.Tree treeDistances
    // Size: 0x8
    // Offset: 0xD8
    ::Pathfinding::Ionic::Zlib::Tree* treeDistances;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zlib::Tree*) == 0x8);
    // Pathfinding.Ionic.Zlib.Tree treeBitLengths
    // Size: 0x8
    // Offset: 0xE0
    ::Pathfinding::Ionic::Zlib::Tree* treeBitLengths;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zlib::Tree*) == 0x8);
    // System.Int16[] bl_count
    // Size: 0x8
    // Offset: 0xE8
    ::ArrayW<int16_t> bl_count;
    // Field size check
    static_assert(sizeof(::ArrayW<int16_t>) == 0x8);
    // System.Int32[] heap
    // Size: 0x8
    // Offset: 0xF0
    ::ArrayW<int> heap;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Int32 heap_len
    // Size: 0x4
    // Offset: 0xF8
    int heap_len;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 heap_max
    // Size: 0x4
    // Offset: 0xFC
    int heap_max;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.SByte[] depth
    // Size: 0x8
    // Offset: 0x100
    ::ArrayW<int8_t> depth;
    // Field size check
    static_assert(sizeof(::ArrayW<int8_t>) == 0x8);
    // System.Int32 _lengthOffset
    // Size: 0x4
    // Offset: 0x108
    int lengthOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 lit_bufsize
    // Size: 0x4
    // Offset: 0x10C
    int lit_bufsize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 last_lit
    // Size: 0x4
    // Offset: 0x110
    int last_lit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 _distanceOffset
    // Size: 0x4
    // Offset: 0x114
    int distanceOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 opt_len
    // Size: 0x4
    // Offset: 0x118
    int opt_len;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 static_len
    // Size: 0x4
    // Offset: 0x11C
    int static_len;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 matches
    // Size: 0x4
    // Offset: 0x120
    int matches;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 last_eob_len
    // Size: 0x4
    // Offset: 0x124
    int last_eob_len;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int16 bi_buf
    // Size: 0x2
    // Offset: 0x128
    int16_t bi_buf;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // Padding between fields: bi_buf and: bi_valid
    char __padding50[0x2] = {};
    // System.Int32 bi_valid
    // Size: 0x4
    // Offset: 0x12C
    int bi_valid;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean Rfc1950BytesEmitted
    // Size: 0x1
    // Offset: 0x130
    bool Rfc1950BytesEmitted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _WantRfc1950HeaderBytes
    // Size: 0x1
    // Offset: 0x131
    bool WantRfc1950HeaderBytes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly System.Int32 MEM_LEVEL_MAX
    static int _get_MEM_LEVEL_MAX();
    // Set static field: static private readonly System.Int32 MEM_LEVEL_MAX
    static void _set_MEM_LEVEL_MAX(int value);
    // Get static field: static private readonly System.Int32 MEM_LEVEL_DEFAULT
    static int _get_MEM_LEVEL_DEFAULT();
    // Set static field: static private readonly System.Int32 MEM_LEVEL_DEFAULT
    static void _set_MEM_LEVEL_DEFAULT(int value);
    // Get static field: static private readonly System.String[] _ErrorMessage
    static ::ArrayW<::StringW> _get__ErrorMessage();
    // Set static field: static private readonly System.String[] _ErrorMessage
    static void _set__ErrorMessage(::ArrayW<::StringW> value);
    // Get static field: static private readonly System.Int32 PRESET_DICT
    static int _get_PRESET_DICT();
    // Set static field: static private readonly System.Int32 PRESET_DICT
    static void _set_PRESET_DICT(int value);
    // Get static field: static private readonly System.Int32 INIT_STATE
    static int _get_INIT_STATE();
    // Set static field: static private readonly System.Int32 INIT_STATE
    static void _set_INIT_STATE(int value);
    // Get static field: static private readonly System.Int32 BUSY_STATE
    static int _get_BUSY_STATE();
    // Set static field: static private readonly System.Int32 BUSY_STATE
    static void _set_BUSY_STATE(int value);
    // Get static field: static private readonly System.Int32 FINISH_STATE
    static int _get_FINISH_STATE();
    // Set static field: static private readonly System.Int32 FINISH_STATE
    static void _set_FINISH_STATE(int value);
    // Get static field: static private readonly System.Int32 Z_DEFLATED
    static int _get_Z_DEFLATED();
    // Set static field: static private readonly System.Int32 Z_DEFLATED
    static void _set_Z_DEFLATED(int value);
    // Get static field: static private readonly System.Int32 STORED_BLOCK
    static int _get_STORED_BLOCK();
    // Set static field: static private readonly System.Int32 STORED_BLOCK
    static void _set_STORED_BLOCK(int value);
    // Get static field: static private readonly System.Int32 STATIC_TREES
    static int _get_STATIC_TREES();
    // Set static field: static private readonly System.Int32 STATIC_TREES
    static void _set_STATIC_TREES(int value);
    // Get static field: static private readonly System.Int32 DYN_TREES
    static int _get_DYN_TREES();
    // Set static field: static private readonly System.Int32 DYN_TREES
    static void _set_DYN_TREES(int value);
    // Get static field: static private readonly System.Int32 Z_BINARY
    static int _get_Z_BINARY();
    // Set static field: static private readonly System.Int32 Z_BINARY
    static void _set_Z_BINARY(int value);
    // Get static field: static private readonly System.Int32 Z_ASCII
    static int _get_Z_ASCII();
    // Set static field: static private readonly System.Int32 Z_ASCII
    static void _set_Z_ASCII(int value);
    // Get static field: static private readonly System.Int32 Z_UNKNOWN
    static int _get_Z_UNKNOWN();
    // Set static field: static private readonly System.Int32 Z_UNKNOWN
    static void _set_Z_UNKNOWN(int value);
    // Get static field: static private readonly System.Int32 Buf_size
    static int _get_Buf_size();
    // Set static field: static private readonly System.Int32 Buf_size
    static void _set_Buf_size(int value);
    // Get static field: static private readonly System.Int32 MIN_MATCH
    static int _get_MIN_MATCH();
    // Set static field: static private readonly System.Int32 MIN_MATCH
    static void _set_MIN_MATCH(int value);
    // Get static field: static private readonly System.Int32 MAX_MATCH
    static int _get_MAX_MATCH();
    // Set static field: static private readonly System.Int32 MAX_MATCH
    static void _set_MAX_MATCH(int value);
    // Get static field: static private readonly System.Int32 MIN_LOOKAHEAD
    static int _get_MIN_LOOKAHEAD();
    // Set static field: static private readonly System.Int32 MIN_LOOKAHEAD
    static void _set_MIN_LOOKAHEAD(int value);
    // Get static field: static private readonly System.Int32 HEAP_SIZE
    static int _get_HEAP_SIZE();
    // Set static field: static private readonly System.Int32 HEAP_SIZE
    static void _set_HEAP_SIZE(int value);
    // Get static field: static private readonly System.Int32 END_BLOCK
    static int _get_END_BLOCK();
    // Set static field: static private readonly System.Int32 END_BLOCK
    static void _set_END_BLOCK(int value);
    // Get instance field reference: private Pathfinding.Ionic.Zlib.DeflateManager/CompressFunc DeflateFunction
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::DeflateManager::CompressFunc*& dyn_DeflateFunction();
    // Get instance field reference: Pathfinding.Ionic.Zlib.ZlibCodec _codec
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ZlibCodec*& dyn__codec();
    // Get instance field reference: System.Int32 status
    [[deprecated("Use field access instead!")]] int& dyn_status();
    // Get instance field reference: System.Byte[] pending
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_pending();
    // Get instance field reference: System.Int32 nextPending
    [[deprecated("Use field access instead!")]] int& dyn_nextPending();
    // Get instance field reference: System.Int32 pendingCount
    [[deprecated("Use field access instead!")]] int& dyn_pendingCount();
    // Get instance field reference: System.SByte data_type
    [[deprecated("Use field access instead!")]] int8_t& dyn_data_type();
    // Get instance field reference: System.Int32 last_flush
    [[deprecated("Use field access instead!")]] int& dyn_last_flush();
    // Get instance field reference: System.Int32 w_size
    [[deprecated("Use field access instead!")]] int& dyn_w_size();
    // Get instance field reference: System.Int32 w_bits
    [[deprecated("Use field access instead!")]] int& dyn_w_bits();
    // Get instance field reference: System.Int32 w_mask
    [[deprecated("Use field access instead!")]] int& dyn_w_mask();
    // Get instance field reference: System.Byte[] window
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_window();
    // Get instance field reference: System.Int32 window_size
    [[deprecated("Use field access instead!")]] int& dyn_window_size();
    // Get instance field reference: System.Int16[] prev
    [[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& dyn_prev();
    // Get instance field reference: System.Int16[] head
    [[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& dyn_head();
    // Get instance field reference: System.Int32 ins_h
    [[deprecated("Use field access instead!")]] int& dyn_ins_h();
    // Get instance field reference: System.Int32 hash_size
    [[deprecated("Use field access instead!")]] int& dyn_hash_size();
    // Get instance field reference: System.Int32 hash_bits
    [[deprecated("Use field access instead!")]] int& dyn_hash_bits();
    // Get instance field reference: System.Int32 hash_mask
    [[deprecated("Use field access instead!")]] int& dyn_hash_mask();
    // Get instance field reference: System.Int32 hash_shift
    [[deprecated("Use field access instead!")]] int& dyn_hash_shift();
    // Get instance field reference: System.Int32 block_start
    [[deprecated("Use field access instead!")]] int& dyn_block_start();
    // Get instance field reference: private Pathfinding.Ionic.Zlib.DeflateManager/Config config
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::DeflateManager::Config*& dyn_config();
    // Get instance field reference: System.Int32 match_length
    [[deprecated("Use field access instead!")]] int& dyn_match_length();
    // Get instance field reference: System.Int32 prev_match
    [[deprecated("Use field access instead!")]] int& dyn_prev_match();
    // Get instance field reference: System.Int32 match_available
    [[deprecated("Use field access instead!")]] int& dyn_match_available();
    // Get instance field reference: System.Int32 strstart
    [[deprecated("Use field access instead!")]] int& dyn_strstart();
    // Get instance field reference: System.Int32 match_start
    [[deprecated("Use field access instead!")]] int& dyn_match_start();
    // Get instance field reference: System.Int32 lookahead
    [[deprecated("Use field access instead!")]] int& dyn_lookahead();
    // Get instance field reference: System.Int32 prev_length
    [[deprecated("Use field access instead!")]] int& dyn_prev_length();
    // Get instance field reference: Pathfinding.Ionic.Zlib.CompressionLevel compressionLevel
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionLevel& dyn_compressionLevel();
    // Get instance field reference: Pathfinding.Ionic.Zlib.CompressionStrategy compressionStrategy
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::CompressionStrategy& dyn_compressionStrategy();
    // Get instance field reference: System.Int16[] dyn_ltree
    [[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& dyn_dyn_ltree();
    // Get instance field reference: System.Int16[] dyn_dtree
    [[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& dyn_dyn_dtree();
    // Get instance field reference: System.Int16[] bl_tree
    [[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& dyn_bl_tree();
    // Get instance field reference: Pathfinding.Ionic.Zlib.Tree treeLiterals
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::Tree*& dyn_treeLiterals();
    // Get instance field reference: Pathfinding.Ionic.Zlib.Tree treeDistances
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::Tree*& dyn_treeDistances();
    // Get instance field reference: Pathfinding.Ionic.Zlib.Tree treeBitLengths
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::Tree*& dyn_treeBitLengths();
    // Get instance field reference: System.Int16[] bl_count
    [[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& dyn_bl_count();
    // Get instance field reference: System.Int32[] heap
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_heap();
    // Get instance field reference: System.Int32 heap_len
    [[deprecated("Use field access instead!")]] int& dyn_heap_len();
    // Get instance field reference: System.Int32 heap_max
    [[deprecated("Use field access instead!")]] int& dyn_heap_max();
    // Get instance field reference: System.SByte[] depth
    [[deprecated("Use field access instead!")]] ::ArrayW<int8_t>& dyn_depth();
    // Get instance field reference: System.Int32 _lengthOffset
    [[deprecated("Use field access instead!")]] int& dyn__lengthOffset();
    // Get instance field reference: System.Int32 lit_bufsize
    [[deprecated("Use field access instead!")]] int& dyn_lit_bufsize();
    // Get instance field reference: System.Int32 last_lit
    [[deprecated("Use field access instead!")]] int& dyn_last_lit();
    // Get instance field reference: System.Int32 _distanceOffset
    [[deprecated("Use field access instead!")]] int& dyn__distanceOffset();
    // Get instance field reference: System.Int32 opt_len
    [[deprecated("Use field access instead!")]] int& dyn_opt_len();
    // Get instance field reference: System.Int32 static_len
    [[deprecated("Use field access instead!")]] int& dyn_static_len();
    // Get instance field reference: System.Int32 matches
    [[deprecated("Use field access instead!")]] int& dyn_matches();
    // Get instance field reference: System.Int32 last_eob_len
    [[deprecated("Use field access instead!")]] int& dyn_last_eob_len();
    // Get instance field reference: System.Int16 bi_buf
    [[deprecated("Use field access instead!")]] int16_t& dyn_bi_buf();
    // Get instance field reference: System.Int32 bi_valid
    [[deprecated("Use field access instead!")]] int& dyn_bi_valid();
    // Get instance field reference: private System.Boolean Rfc1950BytesEmitted
    [[deprecated("Use field access instead!")]] bool& dyn_Rfc1950BytesEmitted();
    // Get instance field reference: private System.Boolean _WantRfc1950HeaderBytes
    [[deprecated("Use field access instead!")]] bool& dyn__WantRfc1950HeaderBytes();
    // System.Void .ctor()
    // Offset: 0x25D8674
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DeflateManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::Ionic::Zlib::DeflateManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DeflateManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x25D883C
    static void _cctor();
    // private System.Void _InitializeLazyMatch()
    // Offset: 0x25D8D14
    void _InitializeLazyMatch();
    // private System.Void _InitializeTreeData()
    // Offset: 0x25D8F44
    void _InitializeTreeData();
    // System.Void _InitializeBlocks()
    // Offset: 0x25D9068
    void _InitializeBlocks();
    // System.Void pqdownheap(System.Int16[] tree, System.Int32 k)
    // Offset: 0x25D92A0
    void pqdownheap(::ArrayW<int16_t> tree, int k);
    // static System.Boolean _IsSmaller(System.Int16[] tree, System.Int32 n, System.Int32 m, System.SByte[] depth)
    // Offset: 0x25D9530
    static bool _IsSmaller(::ArrayW<int16_t> tree, int n, int m, ::ArrayW<int8_t> depth);
    // System.Void scan_tree(System.Int16[] tree, System.Int32 max_code)
    // Offset: 0x25D9648
    void scan_tree(::ArrayW<int16_t> tree, int max_code);
    // System.Int32 build_bl_tree()
    // Offset: 0x25D99B4
    int build_bl_tree();
    // System.Void send_all_trees(System.Int32 lcodes, System.Int32 dcodes, System.Int32 blcodes)
    // Offset: 0x25DA390
    void send_all_trees(int lcodes, int dcodes, int blcodes);
    // System.Void send_tree(System.Int16[] tree, System.Int32 max_code)
    // Offset: 0x25DA6A0
    void send_tree(::ArrayW<int16_t> tree, int max_code);
    // private System.Void put_bytes(System.Byte[] p, System.Int32 start, System.Int32 len)
    // Offset: 0x25DA9EC
    void put_bytes(::ArrayW<uint8_t> p, int start, int len);
    // System.Void send_code(System.Int32 c, System.Int16[] tree)
    // Offset: 0x25DA958
    void send_code(int c, ::ArrayW<int16_t> tree);
    // System.Void send_bits(System.Int32 value, System.Int32 length)
    // Offset: 0x25DA508
    void send_bits(int value, int length);
    // System.Void _tr_align()
    // Offset: 0x25DAA38
    void _tr_align();
    // System.Boolean _tr_tally(System.Int32 dist, System.Int32 lc)
    // Offset: 0x25DACCC
    bool _tr_tally(int dist, int lc);
    // System.Void send_compressed_block(System.Int16[] ltree, System.Int16[] dtree)
    // Offset: 0x25DB1A8
    void send_compressed_block(::ArrayW<int16_t> ltree, ::ArrayW<int16_t> dtree);
    // System.Void set_data_type()
    // Offset: 0x25DB5D0
    void set_data_type();
    // System.Void bi_flush()
    // Offset: 0x25DABA0
    void bi_flush();
    // System.Void bi_windup()
    // Offset: 0x25DB7A4
    void bi_windup();
    // System.Void copy_block(System.Int32 buf, System.Int32 len, System.Boolean header)
    // Offset: 0x25DB8B0
    void copy_block(int buf, int len, bool header);
    // System.Void flush_block_only(System.Boolean eof)
    // Offset: 0x25DBA2C
    void flush_block_only(bool eof);
    // Pathfinding.Ionic.Zlib.BlockState DeflateNone(Pathfinding.Ionic.Zlib.FlushType flush)
    // Offset: 0x25DBFF0
    ::Pathfinding::Ionic::Zlib::BlockState DeflateNone(::Pathfinding::Ionic::Zlib::FlushType flush);
    // System.Void _tr_stored_block(System.Int32 buf, System.Int32 stored_len, System.Boolean eof)
    // Offset: 0x25DC55C
    void _tr_stored_block(int buf, int stored_len, bool eof);
    // System.Void _tr_flush_block(System.Int32 buf, System.Int32 stored_len, System.Boolean eof)
    // Offset: 0x25DBAA4
    void _tr_flush_block(int buf, int stored_len, bool eof);
    // private System.Void _fillWindow()
    // Offset: 0x25DC1C0
    void _fillWindow();
    // Pathfinding.Ionic.Zlib.BlockState DeflateFast(Pathfinding.Ionic.Zlib.FlushType flush)
    // Offset: 0x25DC728
    ::Pathfinding::Ionic::Zlib::BlockState DeflateFast(::Pathfinding::Ionic::Zlib::FlushType flush);
    // Pathfinding.Ionic.Zlib.BlockState DeflateSlow(Pathfinding.Ionic.Zlib.FlushType flush)
    // Offset: 0x25DD7C0
    ::Pathfinding::Ionic::Zlib::BlockState DeflateSlow(::Pathfinding::Ionic::Zlib::FlushType flush);
    // System.Int32 longest_match(System.Int32 cur_match)
    // Offset: 0x25DCE1C
    int longest_match(int cur_match);
    // System.Boolean get_WantRfc1950HeaderBytes()
    // Offset: 0x25DDFA8
    bool get_WantRfc1950HeaderBytes();
    // System.Void set_WantRfc1950HeaderBytes(System.Boolean value)
    // Offset: 0x25DDFB0
    void set_WantRfc1950HeaderBytes(bool value);
    // System.Int32 Initialize(Pathfinding.Ionic.Zlib.ZlibCodec codec, Pathfinding.Ionic.Zlib.CompressionLevel level, System.Int32 bits, Pathfinding.Ionic.Zlib.CompressionStrategy compressionStrategy)
    // Offset: 0x25DDFBC
    int Initialize(::Pathfinding::Ionic::Zlib::ZlibCodec* codec, ::Pathfinding::Ionic::Zlib::CompressionLevel level, int bits, ::Pathfinding::Ionic::Zlib::CompressionStrategy compressionStrategy);
    // System.Int32 Initialize(Pathfinding.Ionic.Zlib.ZlibCodec codec, Pathfinding.Ionic.Zlib.CompressionLevel level, System.Int32 windowBits, System.Int32 memLevel, Pathfinding.Ionic.Zlib.CompressionStrategy strategy)
    // Offset: 0x25DE064
    int Initialize(::Pathfinding::Ionic::Zlib::ZlibCodec* codec, ::Pathfinding::Ionic::Zlib::CompressionLevel level, int windowBits, int memLevel, ::Pathfinding::Ionic::Zlib::CompressionStrategy strategy);
    // System.Void Reset()
    // Offset: 0x25DE364
    void Reset();
    // private System.Void SetDeflater()
    // Offset: 0x25D8E98
    void SetDeflater();
    // System.Int32 Deflate(Pathfinding.Ionic.Zlib.FlushType flush)
    // Offset: 0x25DE4CC
    int Deflate(::Pathfinding::Ionic::Zlib::FlushType flush);
  }; // Pathfinding.Ionic.Zlib.DeflateManager
  #pragma pack(pop)
  static check_size<sizeof(DeflateManager), 305 + sizeof(bool)> __Pathfinding_Ionic_Zlib_DeflateManagerSizeCheck;
  static_assert(sizeof(DeflateManager) == 0x132);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::Ionic::Zlib::DeflateManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::_InitializeLazyMatch
// Il2CppName: _InitializeLazyMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)()>(&Pathfinding::Ionic::Zlib::DeflateManager::_InitializeLazyMatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "_InitializeLazyMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::_InitializeTreeData
// Il2CppName: _InitializeTreeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)()>(&Pathfinding::Ionic::Zlib::DeflateManager::_InitializeTreeData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "_InitializeTreeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::_InitializeBlocks
// Il2CppName: _InitializeBlocks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)()>(&Pathfinding::Ionic::Zlib::DeflateManager::_InitializeBlocks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "_InitializeBlocks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::pqdownheap
// Il2CppName: pqdownheap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)(::ArrayW<int16_t>, int)>(&Pathfinding::Ionic::Zlib::DeflateManager::pqdownheap)> {
  static const MethodInfo* get() {
    static auto* tree = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* k = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "pqdownheap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tree, k});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::_IsSmaller
// Il2CppName: _IsSmaller
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<int16_t>, int, int, ::ArrayW<int8_t>)>(&Pathfinding::Ionic::Zlib::DeflateManager::_IsSmaller)> {
  static const MethodInfo* get() {
    static auto* tree = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* m = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depth = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "SByte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "_IsSmaller", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tree, n, m, depth});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::scan_tree
// Il2CppName: scan_tree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)(::ArrayW<int16_t>, int)>(&Pathfinding::Ionic::Zlib::DeflateManager::scan_tree)> {
  static const MethodInfo* get() {
    static auto* tree = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* max_code = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "scan_tree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tree, max_code});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::build_bl_tree
// Il2CppName: build_bl_tree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zlib::DeflateManager::*)()>(&Pathfinding::Ionic::Zlib::DeflateManager::build_bl_tree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "build_bl_tree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::send_all_trees
// Il2CppName: send_all_trees
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)(int, int, int)>(&Pathfinding::Ionic::Zlib::DeflateManager::send_all_trees)> {
  static const MethodInfo* get() {
    static auto* lcodes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* dcodes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blcodes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "send_all_trees", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lcodes, dcodes, blcodes});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::send_tree
// Il2CppName: send_tree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)(::ArrayW<int16_t>, int)>(&Pathfinding::Ionic::Zlib::DeflateManager::send_tree)> {
  static const MethodInfo* get() {
    static auto* tree = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* max_code = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "send_tree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tree, max_code});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::put_bytes
// Il2CppName: put_bytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)(::ArrayW<uint8_t>, int, int)>(&Pathfinding::Ionic::Zlib::DeflateManager::put_bytes)> {
  static const MethodInfo* get() {
    static auto* p = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "put_bytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, start, len});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::send_code
// Il2CppName: send_code
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)(int, ::ArrayW<int16_t>)>(&Pathfinding::Ionic::Zlib::DeflateManager::send_code)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tree = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "send_code", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, tree});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::send_bits
// Il2CppName: send_bits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)(int, int)>(&Pathfinding::Ionic::Zlib::DeflateManager::send_bits)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "send_bits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, length});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::_tr_align
// Il2CppName: _tr_align
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)()>(&Pathfinding::Ionic::Zlib::DeflateManager::_tr_align)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "_tr_align", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::_tr_tally
// Il2CppName: _tr_tally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zlib::DeflateManager::*)(int, int)>(&Pathfinding::Ionic::Zlib::DeflateManager::_tr_tally)> {
  static const MethodInfo* get() {
    static auto* dist = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lc = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "_tr_tally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dist, lc});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::send_compressed_block
// Il2CppName: send_compressed_block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)(::ArrayW<int16_t>, ::ArrayW<int16_t>)>(&Pathfinding::Ionic::Zlib::DeflateManager::send_compressed_block)> {
  static const MethodInfo* get() {
    static auto* ltree = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* dtree = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "send_compressed_block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ltree, dtree});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::set_data_type
// Il2CppName: set_data_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)()>(&Pathfinding::Ionic::Zlib::DeflateManager::set_data_type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "set_data_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::bi_flush
// Il2CppName: bi_flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)()>(&Pathfinding::Ionic::Zlib::DeflateManager::bi_flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "bi_flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::bi_windup
// Il2CppName: bi_windup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)()>(&Pathfinding::Ionic::Zlib::DeflateManager::bi_windup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "bi_windup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::copy_block
// Il2CppName: copy_block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)(int, int, bool)>(&Pathfinding::Ionic::Zlib::DeflateManager::copy_block)> {
  static const MethodInfo* get() {
    static auto* buf = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* header = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "copy_block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, len, header});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::flush_block_only
// Il2CppName: flush_block_only
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)(bool)>(&Pathfinding::Ionic::Zlib::DeflateManager::flush_block_only)> {
  static const MethodInfo* get() {
    static auto* eof = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "flush_block_only", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eof});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::DeflateNone
// Il2CppName: DeflateNone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zlib::BlockState (Pathfinding::Ionic::Zlib::DeflateManager::*)(::Pathfinding::Ionic::Zlib::FlushType)>(&Pathfinding::Ionic::Zlib::DeflateManager::DeflateNone)> {
  static const MethodInfo* get() {
    static auto* flush = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zlib", "FlushType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "DeflateNone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flush});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::_tr_stored_block
// Il2CppName: _tr_stored_block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)(int, int, bool)>(&Pathfinding::Ionic::Zlib::DeflateManager::_tr_stored_block)> {
  static const MethodInfo* get() {
    static auto* buf = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* stored_len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* eof = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "_tr_stored_block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, stored_len, eof});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::_tr_flush_block
// Il2CppName: _tr_flush_block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)(int, int, bool)>(&Pathfinding::Ionic::Zlib::DeflateManager::_tr_flush_block)> {
  static const MethodInfo* get() {
    static auto* buf = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* stored_len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* eof = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "_tr_flush_block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf, stored_len, eof});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::_fillWindow
// Il2CppName: _fillWindow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)()>(&Pathfinding::Ionic::Zlib::DeflateManager::_fillWindow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "_fillWindow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::DeflateFast
// Il2CppName: DeflateFast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zlib::BlockState (Pathfinding::Ionic::Zlib::DeflateManager::*)(::Pathfinding::Ionic::Zlib::FlushType)>(&Pathfinding::Ionic::Zlib::DeflateManager::DeflateFast)> {
  static const MethodInfo* get() {
    static auto* flush = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zlib", "FlushType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "DeflateFast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flush});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::DeflateSlow
// Il2CppName: DeflateSlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Ionic::Zlib::BlockState (Pathfinding::Ionic::Zlib::DeflateManager::*)(::Pathfinding::Ionic::Zlib::FlushType)>(&Pathfinding::Ionic::Zlib::DeflateManager::DeflateSlow)> {
  static const MethodInfo* get() {
    static auto* flush = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zlib", "FlushType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "DeflateSlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flush});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::longest_match
// Il2CppName: longest_match
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zlib::DeflateManager::*)(int)>(&Pathfinding::Ionic::Zlib::DeflateManager::longest_match)> {
  static const MethodInfo* get() {
    static auto* cur_match = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "longest_match", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cur_match});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::get_WantRfc1950HeaderBytes
// Il2CppName: get_WantRfc1950HeaderBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zlib::DeflateManager::*)()>(&Pathfinding::Ionic::Zlib::DeflateManager::get_WantRfc1950HeaderBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "get_WantRfc1950HeaderBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::set_WantRfc1950HeaderBytes
// Il2CppName: set_WantRfc1950HeaderBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)(bool)>(&Pathfinding::Ionic::Zlib::DeflateManager::set_WantRfc1950HeaderBytes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "set_WantRfc1950HeaderBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zlib::DeflateManager::*)(::Pathfinding::Ionic::Zlib::ZlibCodec*, ::Pathfinding::Ionic::Zlib::CompressionLevel, int, ::Pathfinding::Ionic::Zlib::CompressionStrategy)>(&Pathfinding::Ionic::Zlib::DeflateManager::Initialize)> {
  static const MethodInfo* get() {
    static auto* codec = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zlib", "ZlibCodec")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zlib", "CompressionLevel")->byval_arg;
    static auto* bits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* compressionStrategy = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zlib", "CompressionStrategy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{codec, level, bits, compressionStrategy});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zlib::DeflateManager::*)(::Pathfinding::Ionic::Zlib::ZlibCodec*, ::Pathfinding::Ionic::Zlib::CompressionLevel, int, int, ::Pathfinding::Ionic::Zlib::CompressionStrategy)>(&Pathfinding::Ionic::Zlib::DeflateManager::Initialize)> {
  static const MethodInfo* get() {
    static auto* codec = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zlib", "ZlibCodec")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zlib", "CompressionLevel")->byval_arg;
    static auto* windowBits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* memLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* strategy = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zlib", "CompressionStrategy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{codec, level, windowBits, memLevel, strategy});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)()>(&Pathfinding::Ionic::Zlib::DeflateManager::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::SetDeflater
// Il2CppName: SetDeflater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::DeflateManager::*)()>(&Pathfinding::Ionic::Zlib::DeflateManager::SetDeflater)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "SetDeflater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::DeflateManager::Deflate
// Il2CppName: Deflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zlib::DeflateManager::*)(::Pathfinding::Ionic::Zlib::FlushType)>(&Pathfinding::Ionic::Zlib::DeflateManager::Deflate)> {
  static const MethodInfo* get() {
    static auto* flush = &::il2cpp_utils::GetClassFromName("Pathfinding.Ionic.Zlib", "FlushType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::DeflateManager*), "Deflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flush});
  }
};
