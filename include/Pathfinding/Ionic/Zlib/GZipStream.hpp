// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding::Ionic::Zlib
namespace Pathfinding::Ionic::Zlib {
  // Forward declaring type: ZlibBaseStream
  class ZlibBaseStream;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Completed forward declares
// Type namespace: Pathfinding.Ionic.Zlib
namespace Pathfinding::Ionic::Zlib {
  // Forward declaring type: GZipStream
  class GZipStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::Ionic::Zlib::GZipStream);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::Ionic::Zlib::GZipStream*, "Pathfinding.Ionic.Zlib", "GZipStream");
// Type namespace: Pathfinding.Ionic.Zlib
namespace Pathfinding::Ionic::Zlib {
  // WARNING Size may be invalid!
  // Autogenerated type: Pathfinding.Ionic.Zlib.GZipStream
  // [TokenAttribute] Offset: FFFFFFFF
  class GZipStream : public ::System::IO::Stream {
    public:
    public:
    // public System.Nullable`1<System.DateTime> LastModified
    // Size: 0xFFFFFFFF
    // Offset: 0x28
    ::System::Nullable_1<::System::DateTime> LastModified;
    // private System.Int32 _headerByteCount
    // Size: 0x4
    // Offset: 0x38
    int headerByteCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Pathfinding.Ionic.Zlib.ZlibBaseStream _baseStream
    // Size: 0x8
    // Offset: 0x40
    ::Pathfinding::Ionic::Zlib::ZlibBaseStream* baseStream;
    // Field size check
    static_assert(sizeof(::Pathfinding::Ionic::Zlib::ZlibBaseStream*) == 0x8);
    // private System.Boolean _disposed
    // Size: 0x1
    // Offset: 0x48
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _firstReadDone
    // Size: 0x1
    // Offset: 0x49
    bool firstReadDone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.String _FileName
    // Size: 0x8
    // Offset: 0x50
    ::StringW FileName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _Comment
    // Size: 0x8
    // Offset: 0x58
    ::StringW Comment;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 _Crc32
    // Size: 0x4
    // Offset: 0x60
    int Crc32;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static readonly System.DateTime _unixEpoch
    static ::System::DateTime _get__unixEpoch();
    // Set static field: static readonly System.DateTime _unixEpoch
    static void _set__unixEpoch(::System::DateTime value);
    // Get static field: static readonly System.Text.Encoding iso8859dash1
    static ::System::Text::Encoding* _get_iso8859dash1();
    // Set static field: static readonly System.Text.Encoding iso8859dash1
    static void _set_iso8859dash1(::System::Text::Encoding* value);
    // Get instance field reference: public System.Nullable`1<System.DateTime> LastModified
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::System::DateTime>& dyn_LastModified();
    // Get instance field reference: private System.Int32 _headerByteCount
    [[deprecated("Use field access instead!")]] int& dyn__headerByteCount();
    // Get instance field reference: Pathfinding.Ionic.Zlib.ZlibBaseStream _baseStream
    [[deprecated("Use field access instead!")]] ::Pathfinding::Ionic::Zlib::ZlibBaseStream*& dyn__baseStream();
    // Get instance field reference: private System.Boolean _disposed
    [[deprecated("Use field access instead!")]] bool& dyn__disposed();
    // Get instance field reference: private System.Boolean _firstReadDone
    [[deprecated("Use field access instead!")]] bool& dyn__firstReadDone();
    // Get instance field reference: private System.String _FileName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__FileName();
    // Get instance field reference: private System.String _Comment
    [[deprecated("Use field access instead!")]] ::StringW& dyn__Comment();
    // Get instance field reference: private System.Int32 _Crc32
    [[deprecated("Use field access instead!")]] int& dyn__Crc32();
    // static private System.Void .cctor()
    // Offset: 0x25E03B0
    static void _cctor();
    // public System.String get_Comment()
    // Offset: 0x25E0458
    ::StringW get_Comment();
    // public System.Void set_Comment(System.String value)
    // Offset: 0x25E0460
    void set_Comment(::StringW value);
    // public System.String get_FileName()
    // Offset: 0x25E04FC
    ::StringW get_FileName();
    // public System.Void set_FileName(System.String value)
    // Offset: 0x25E0504
    void set_FileName(::StringW value);
    // private System.Int32 EmitHeader()
    // Offset: 0x25E0E8C
    int EmitHeader();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x25E06A8
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override System.Boolean get_CanRead()
    // Offset: 0x25E079C
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanRead()
    bool get_CanRead();
    // public override System.Boolean get_CanSeek()
    // Offset: 0x25E0854
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanSeek()
    bool get_CanSeek();
    // public override System.Boolean get_CanWrite()
    // Offset: 0x25E085C
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanWrite()
    bool get_CanWrite();
    // public override System.Void Flush()
    // Offset: 0x25E0914
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Flush()
    void Flush();
    // public override System.Int64 get_Length()
    // Offset: 0x25E09C0
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Length()
    int64_t get_Length();
    // public override System.Int64 get_Position()
    // Offset: 0x25E0A28
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Position()
    int64_t get_Position();
    // public override System.Void set_Position(System.Int64 value)
    // Offset: 0x25E0AE8
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_Position(System.Int64 value)
    void set_Position(int64_t value);
    // public override System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x25E0B50
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    int Read(::ArrayW<uint8_t> buffer, int offset, int count);
    // public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    // Offset: 0x25E0C78
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    int64_t Seek(int64_t offset, ::System::IO::SeekOrigin origin);
    // public override System.Void SetLength(System.Int64 value)
    // Offset: 0x25E0CE0
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::SetLength(System.Int64 value)
    void SetLength(int64_t value);
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x25E0D48
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    void Write(::ArrayW<uint8_t> buffer, int offset, int count);
  }; // Pathfinding.Ionic.Zlib.GZipStream
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::Ionic::Zlib::GZipStream::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::get_Comment
// Il2CppName: get_Comment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zlib::GZipStream::*)()>(&Pathfinding::Ionic::Zlib::GZipStream::get_Comment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "get_Comment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::set_Comment
// Il2CppName: set_Comment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::GZipStream::*)(::StringW)>(&Pathfinding::Ionic::Zlib::GZipStream::set_Comment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "set_Comment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::get_FileName
// Il2CppName: get_FileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::Ionic::Zlib::GZipStream::*)()>(&Pathfinding::Ionic::Zlib::GZipStream::get_FileName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "get_FileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::set_FileName
// Il2CppName: set_FileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::GZipStream::*)(::StringW)>(&Pathfinding::Ionic::Zlib::GZipStream::set_FileName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "set_FileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::EmitHeader
// Il2CppName: EmitHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zlib::GZipStream::*)()>(&Pathfinding::Ionic::Zlib::GZipStream::EmitHeader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "EmitHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::GZipStream::*)(bool)>(&Pathfinding::Ionic::Zlib::GZipStream::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zlib::GZipStream::*)()>(&Pathfinding::Ionic::Zlib::GZipStream::get_CanRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::get_CanSeek
// Il2CppName: get_CanSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zlib::GZipStream::*)()>(&Pathfinding::Ionic::Zlib::GZipStream::get_CanSeek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "get_CanSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::Ionic::Zlib::GZipStream::*)()>(&Pathfinding::Ionic::Zlib::GZipStream::get_CanWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::GZipStream::*)()>(&Pathfinding::Ionic::Zlib::GZipStream::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zlib::GZipStream::*)()>(&Pathfinding::Ionic::Zlib::GZipStream::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zlib::GZipStream::*)()>(&Pathfinding::Ionic::Zlib::GZipStream::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::GZipStream::*)(int64_t)>(&Pathfinding::Ionic::Zlib::GZipStream::set_Position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::Ionic::Zlib::GZipStream::*)(::ArrayW<uint8_t>, int, int)>(&Pathfinding::Ionic::Zlib::GZipStream::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Pathfinding::Ionic::Zlib::GZipStream::*)(int64_t, ::System::IO::SeekOrigin)>(&Pathfinding::Ionic::Zlib::GZipStream::Seek)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("System.IO", "SeekOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, origin});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::GZipStream::*)(int64_t)>(&Pathfinding::Ionic::Zlib::GZipStream::SetLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::Ionic::Zlib::GZipStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::Ionic::Zlib::GZipStream::*)(::ArrayW<uint8_t>, int, int)>(&Pathfinding::Ionic::Zlib::GZipStream::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::Ionic::Zlib::GZipStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
