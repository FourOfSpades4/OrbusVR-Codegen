// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: ThreadCount
  struct ThreadCount;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::ThreadCount, "Pathfinding", "ThreadCount");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.ThreadCount
  // [TokenAttribute] Offset: FFFFFFFF
  struct ThreadCount/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ThreadCount
    constexpr ThreadCount(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Pathfinding.ThreadCount AutomaticLowLoad
    static constexpr const int AutomaticLowLoad = -1;
    // Get static field: static public Pathfinding.ThreadCount AutomaticLowLoad
    static ::Pathfinding::ThreadCount _get_AutomaticLowLoad();
    // Set static field: static public Pathfinding.ThreadCount AutomaticLowLoad
    static void _set_AutomaticLowLoad(::Pathfinding::ThreadCount value);
    // static field const value: static public Pathfinding.ThreadCount AutomaticHighLoad
    static constexpr const int AutomaticHighLoad = -2;
    // Get static field: static public Pathfinding.ThreadCount AutomaticHighLoad
    static ::Pathfinding::ThreadCount _get_AutomaticHighLoad();
    // Set static field: static public Pathfinding.ThreadCount AutomaticHighLoad
    static void _set_AutomaticHighLoad(::Pathfinding::ThreadCount value);
    // static field const value: static public Pathfinding.ThreadCount None
    static constexpr const int None = 0;
    // Get static field: static public Pathfinding.ThreadCount None
    static ::Pathfinding::ThreadCount _get_None();
    // Set static field: static public Pathfinding.ThreadCount None
    static void _set_None(::Pathfinding::ThreadCount value);
    // static field const value: static public Pathfinding.ThreadCount One
    static constexpr const int One = 1;
    // Get static field: static public Pathfinding.ThreadCount One
    static ::Pathfinding::ThreadCount _get_One();
    // Set static field: static public Pathfinding.ThreadCount One
    static void _set_One(::Pathfinding::ThreadCount value);
    // static field const value: static public Pathfinding.ThreadCount Two
    static constexpr const int Two = 2;
    // Get static field: static public Pathfinding.ThreadCount Two
    static ::Pathfinding::ThreadCount _get_Two();
    // Set static field: static public Pathfinding.ThreadCount Two
    static void _set_Two(::Pathfinding::ThreadCount value);
    // static field const value: static public Pathfinding.ThreadCount Three
    static constexpr const int Three = 3;
    // Get static field: static public Pathfinding.ThreadCount Three
    static ::Pathfinding::ThreadCount _get_Three();
    // Set static field: static public Pathfinding.ThreadCount Three
    static void _set_Three(::Pathfinding::ThreadCount value);
    // static field const value: static public Pathfinding.ThreadCount Four
    static constexpr const int Four = 4;
    // Get static field: static public Pathfinding.ThreadCount Four
    static ::Pathfinding::ThreadCount _get_Four();
    // Set static field: static public Pathfinding.ThreadCount Four
    static void _set_Four(::Pathfinding::ThreadCount value);
    // static field const value: static public Pathfinding.ThreadCount Five
    static constexpr const int Five = 5;
    // Get static field: static public Pathfinding.ThreadCount Five
    static ::Pathfinding::ThreadCount _get_Five();
    // Set static field: static public Pathfinding.ThreadCount Five
    static void _set_Five(::Pathfinding::ThreadCount value);
    // static field const value: static public Pathfinding.ThreadCount Six
    static constexpr const int Six = 6;
    // Get static field: static public Pathfinding.ThreadCount Six
    static ::Pathfinding::ThreadCount _get_Six();
    // Set static field: static public Pathfinding.ThreadCount Six
    static void _set_Six(::Pathfinding::ThreadCount value);
    // static field const value: static public Pathfinding.ThreadCount Seven
    static constexpr const int Seven = 7;
    // Get static field: static public Pathfinding.ThreadCount Seven
    static ::Pathfinding::ThreadCount _get_Seven();
    // Set static field: static public Pathfinding.ThreadCount Seven
    static void _set_Seven(::Pathfinding::ThreadCount value);
    // static field const value: static public Pathfinding.ThreadCount Eight
    static constexpr const int Eight = 8;
    // Get static field: static public Pathfinding.ThreadCount Eight
    static ::Pathfinding::ThreadCount _get_Eight();
    // Set static field: static public Pathfinding.ThreadCount Eight
    static void _set_Eight(::Pathfinding::ThreadCount value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Pathfinding.ThreadCount
  #pragma pack(pop)
  static check_size<sizeof(ThreadCount), 0 + sizeof(int)> __Pathfinding_ThreadCountSizeCheck;
  static_assert(sizeof(ThreadCount) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
