// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.GraphModifier
#include "Pathfinding/GraphModifier.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PointNode
  class PointNode;
  // Forward declaring type: GraphNode
  class GraphNode;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Pathfinding::Serialization
namespace Pathfinding::Serialization {
  // Forward declaring type: GraphSerializationContext
  class GraphSerializationContext;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NodeLink2
  class NodeLink2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::NodeLink2);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::NodeLink2*, "Pathfinding", "NodeLink2");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x79
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.NodeLink2
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: AD80E4
  // [AddComponentMenu] Offset: AD80E4
  class NodeLink2 : public ::Pathfinding::GraphModifier {
    public:
    public:
    // public UnityEngine.Transform end
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* end;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single costFactor
    // Size: 0x4
    // Offset: 0x38
    float costFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean oneWay
    // Size: 0x1
    // Offset: 0x3C
    bool oneWay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: oneWay and: startNode
    char __padding2[0x3] = {};
    // [CompilerGeneratedAttribute] Offset: 0xAE5B84
    // private Pathfinding.PointNode <startNode>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::Pathfinding::PointNode* startNode;
    // Field size check
    static_assert(sizeof(::Pathfinding::PointNode*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAE5B94
    // private Pathfinding.PointNode <endNode>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::Pathfinding::PointNode* endNode;
    // Field size check
    static_assert(sizeof(::Pathfinding::PointNode*) == 0x8);
    // private Pathfinding.GraphNode connectedNode1
    // Size: 0x8
    // Offset: 0x50
    ::Pathfinding::GraphNode* connectedNode1;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    // private Pathfinding.GraphNode connectedNode2
    // Size: 0x8
    // Offset: 0x58
    ::Pathfinding::GraphNode* connectedNode2;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    // private UnityEngine.Vector3 clamped1
    // Size: 0xC
    // Offset: 0x60
    ::UnityEngine::Vector3 clamped1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 clamped2
    // Size: 0xC
    // Offset: 0x6C
    ::UnityEngine::Vector3 clamped2;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean postScanCalled
    // Size: 0x1
    // Offset: 0x78
    bool postScanCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static protected System.Collections.Generic.Dictionary`2<Pathfinding.GraphNode,Pathfinding.NodeLink2> reference
    static ::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, ::Pathfinding::NodeLink2*>* _get_reference();
    // Set static field: static protected System.Collections.Generic.Dictionary`2<Pathfinding.GraphNode,Pathfinding.NodeLink2> reference
    static void _set_reference(::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, ::Pathfinding::NodeLink2*>* value);
    // Get static field: static private readonly UnityEngine.Color GizmosColor
    static ::UnityEngine::Color _get_GizmosColor();
    // Set static field: static private readonly UnityEngine.Color GizmosColor
    static void _set_GizmosColor(::UnityEngine::Color value);
    // Get static field: static private readonly UnityEngine.Color GizmosColorSelected
    static ::UnityEngine::Color _get_GizmosColorSelected();
    // Set static field: static private readonly UnityEngine.Color GizmosColorSelected
    static void _set_GizmosColorSelected(::UnityEngine::Color value);
    // Get instance field reference: public UnityEngine.Transform end
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_end();
    // Get instance field reference: public System.Single costFactor
    [[deprecated("Use field access instead!")]] float& dyn_costFactor();
    // Get instance field reference: public System.Boolean oneWay
    [[deprecated("Use field access instead!")]] bool& dyn_oneWay();
    // Get instance field reference: private Pathfinding.PointNode <startNode>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::PointNode*& dyn_$startNode$k__BackingField();
    // Get instance field reference: private Pathfinding.PointNode <endNode>k__BackingField
    [[deprecated("Use field access instead!")]] ::Pathfinding::PointNode*& dyn_$endNode$k__BackingField();
    // Get instance field reference: private Pathfinding.GraphNode connectedNode1
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_connectedNode1();
    // Get instance field reference: private Pathfinding.GraphNode connectedNode2
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_connectedNode2();
    // Get instance field reference: private UnityEngine.Vector3 clamped1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_clamped1();
    // Get instance field reference: private UnityEngine.Vector3 clamped2
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_clamped2();
    // Get instance field reference: private System.Boolean postScanCalled
    [[deprecated("Use field access instead!")]] bool& dyn_postScanCalled();
    // static public Pathfinding.NodeLink2 GetNodeLink(Pathfinding.GraphNode node)
    // Offset: 0x16A04A0
    static ::Pathfinding::NodeLink2* GetNodeLink(::Pathfinding::GraphNode* node);
    // public UnityEngine.Transform get_StartTransform()
    // Offset: 0x16A0544
    ::UnityEngine::Transform* get_StartTransform();
    // public UnityEngine.Transform get_EndTransform()
    // Offset: 0x16A054C
    ::UnityEngine::Transform* get_EndTransform();
    // public Pathfinding.PointNode get_startNode()
    // Offset: 0x16A0554
    ::Pathfinding::PointNode* get_startNode();
    // private System.Void set_startNode(Pathfinding.PointNode value)
    // Offset: 0x16A055C
    void set_startNode(::Pathfinding::PointNode* value);
    // public Pathfinding.PointNode get_endNode()
    // Offset: 0x16A0564
    ::Pathfinding::PointNode* get_endNode();
    // private System.Void set_endNode(Pathfinding.PointNode value)
    // Offset: 0x16A056C
    void set_endNode(::Pathfinding::PointNode* value);
    // public Pathfinding.GraphNode get_StartNode()
    // Offset: 0x16A0574
    ::Pathfinding::GraphNode* get_StartNode();
    // public Pathfinding.GraphNode get_EndNode()
    // Offset: 0x16A057C
    ::Pathfinding::GraphNode* get_EndNode();
    // public System.Void InternalOnPostScan()
    // Offset: 0x16A0588
    void InternalOnPostScan();
    // private System.Void RemoveConnections(Pathfinding.GraphNode node)
    // Offset: 0x16A1934
    void RemoveConnections(::Pathfinding::GraphNode* node);
    // private System.Void ContextApplyForce()
    // Offset: 0x16A196C
    void ContextApplyForce();
    // public System.Void Apply(System.Boolean forceNewCheck)
    // Offset: 0x16A0B34
    void Apply(bool forceNewCheck);
    // private System.Void DrawCircle(UnityEngine.Vector3 o, System.Single r, System.Int32 detail, UnityEngine.Color col)
    // Offset: 0x16A1A78
    void DrawCircle(::UnityEngine::Vector3 o, float r, int detail, ::UnityEngine::Color col);
    // private System.Void DrawGizmoBezier(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2)
    // Offset: 0x16A1C94
    void DrawGizmoBezier(::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2);
    // public System.Void OnDrawGizmosSelected()
    // Offset: 0x16A1F64
    void OnDrawGizmosSelected();
    // public System.Void OnDrawGizmos()
    // Offset: 0x16A2520
    void OnDrawGizmos();
    // public System.Void OnDrawGizmos(System.Boolean selected)
    // Offset: 0x16A1F6C
    void OnDrawGizmos(bool selected);
    // static System.Void SerializeReferences(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x16A2528
    static void SerializeReferences(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // static System.Void DeserializeReferences(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x16A2924
    static void DeserializeReferences(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public override System.Void OnPostScan()
    // Offset: 0x16A0584
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::OnPostScan()
    void OnPostScan();
    // public override System.Void OnGraphsPostUpdate()
    // Offset: 0x16A144C
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::OnGraphsPostUpdate()
    void OnGraphsPostUpdate();
    // protected override System.Void OnEnable()
    // Offset: 0x16A1538
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x16A172C
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::OnDisable()
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x16A3014
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NodeLink2* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::NodeLink2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NodeLink2*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x16A3084
    // Implemented from: Pathfinding.GraphModifier
    // Base method: System.Void GraphModifier::.cctor()
    static void _cctor();
  }; // Pathfinding.NodeLink2
  #pragma pack(pop)
  static check_size<sizeof(NodeLink2), 120 + sizeof(bool)> __Pathfinding_NodeLink2SizeCheck;
  static_assert(sizeof(NodeLink2) == 0x79);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::NodeLink2::GetNodeLink
// Il2CppName: GetNodeLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NodeLink2* (*)(::Pathfinding::GraphNode*)>(&Pathfinding::NodeLink2::GetNodeLink)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "GetNodeLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::get_StartTransform
// Il2CppName: get_StartTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Pathfinding::NodeLink2::*)()>(&Pathfinding::NodeLink2::get_StartTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "get_StartTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::get_EndTransform
// Il2CppName: get_EndTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Pathfinding::NodeLink2::*)()>(&Pathfinding::NodeLink2::get_EndTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "get_EndTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::get_startNode
// Il2CppName: get_startNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::PointNode* (Pathfinding::NodeLink2::*)()>(&Pathfinding::NodeLink2::get_startNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "get_startNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::set_startNode
// Il2CppName: set_startNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink2::*)(::Pathfinding::PointNode*)>(&Pathfinding::NodeLink2::set_startNode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding", "PointNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "set_startNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::get_endNode
// Il2CppName: get_endNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::PointNode* (Pathfinding::NodeLink2::*)()>(&Pathfinding::NodeLink2::get_endNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "get_endNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::set_endNode
// Il2CppName: set_endNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink2::*)(::Pathfinding::PointNode*)>(&Pathfinding::NodeLink2::set_endNode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding", "PointNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "set_endNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::get_StartNode
// Il2CppName: get_StartNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphNode* (Pathfinding::NodeLink2::*)()>(&Pathfinding::NodeLink2::get_StartNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "get_StartNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::get_EndNode
// Il2CppName: get_EndNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphNode* (Pathfinding::NodeLink2::*)()>(&Pathfinding::NodeLink2::get_EndNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "get_EndNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::InternalOnPostScan
// Il2CppName: InternalOnPostScan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink2::*)()>(&Pathfinding::NodeLink2::InternalOnPostScan)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "InternalOnPostScan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::RemoveConnections
// Il2CppName: RemoveConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink2::*)(::Pathfinding::GraphNode*)>(&Pathfinding::NodeLink2::RemoveConnections)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "RemoveConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::ContextApplyForce
// Il2CppName: ContextApplyForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink2::*)()>(&Pathfinding::NodeLink2::ContextApplyForce)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "ContextApplyForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink2::*)(bool)>(&Pathfinding::NodeLink2::Apply)> {
  static const MethodInfo* get() {
    static auto* forceNewCheck = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forceNewCheck});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::DrawCircle
// Il2CppName: DrawCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink2::*)(::UnityEngine::Vector3, float, int, ::UnityEngine::Color)>(&Pathfinding::NodeLink2::DrawCircle)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* r = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* detail = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* col = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "DrawCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o, r, detail, col});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::DrawGizmoBezier
// Il2CppName: DrawGizmoBezier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink2::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::NodeLink2::DrawGizmoBezier)> {
  static const MethodInfo* get() {
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "DrawGizmoBezier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p1, p2});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink2::*)()>(&Pathfinding::NodeLink2::OnDrawGizmosSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink2::*)()>(&Pathfinding::NodeLink2::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink2::*)(bool)>(&Pathfinding::NodeLink2::OnDrawGizmos)> {
  static const MethodInfo* get() {
    static auto* selected = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selected});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::SerializeReferences
// Il2CppName: SerializeReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::NodeLink2::SerializeReferences)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "SerializeReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::DeserializeReferences
// Il2CppName: DeserializeReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::NodeLink2::DeserializeReferences)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "DeserializeReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::OnPostScan
// Il2CppName: OnPostScan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink2::*)()>(&Pathfinding::NodeLink2::OnPostScan)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "OnPostScan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::OnGraphsPostUpdate
// Il2CppName: OnGraphsPostUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink2::*)()>(&Pathfinding::NodeLink2::OnGraphsPostUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "OnGraphsPostUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink2::*)()>(&Pathfinding::NodeLink2::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NodeLink2::*)()>(&Pathfinding::NodeLink2::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NodeLink2::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::NodeLink2::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::NodeLink2::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NodeLink2*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
