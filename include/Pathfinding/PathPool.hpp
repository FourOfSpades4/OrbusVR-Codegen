// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PathPool
  class PathPool;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::PathPool);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::PathPool*, "Pathfinding", "PathPool");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.PathPool
  // [TokenAttribute] Offset: FFFFFFFF
  class PathPool : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.Stack`1<Pathfinding.Path>> pool
    static ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::Stack_1<::Pathfinding::Path*>*>* _get_pool();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.Stack`1<Pathfinding.Path>> pool
    static void _set_pool(::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::Stack_1<::Pathfinding::Path*>*>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Int32> totalCreated
    static ::System::Collections::Generic::Dictionary_2<::System::Type*, int>* _get_totalCreated();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Int32> totalCreated
    static void _set_totalCreated(::System::Collections::Generic::Dictionary_2<::System::Type*, int>* value);
    // static public System.Void Pool(Pathfinding.Path path)
    // Offset: 0x16AAD98
    static void Pool(::Pathfinding::Path* path);
    // static public System.Int32 GetTotalCreated(System.Type type)
    // Offset: 0x16ACB9C
    static int GetTotalCreated(::System::Type* type);
    // static public System.Int32 GetSize(System.Type type)
    // Offset: 0x16ACC48
    static int GetSize(::System::Type* type);
    // static public T GetPath()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T GetPath() {
      static_assert(std::is_convertible_v<T, ::Pathfinding::Path*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::PathPool::GetPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Pathfinding", "PathPool", "GetPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method);
    }
    // static private System.Void .cctor()
    // Offset: 0x16ACD18
    static void _cctor();
  }; // Pathfinding.PathPool
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::PathPool::Pool
// Il2CppName: Pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::Path*)>(&Pathfinding::PathPool::Pool)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathPool*), "Pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathPool::GetTotalCreated
// Il2CppName: GetTotalCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Type*)>(&Pathfinding::PathPool::GetTotalCreated)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathPool*), "GetTotalCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathPool::GetSize
// Il2CppName: GetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Type*)>(&Pathfinding::PathPool::GetSize)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathPool*), "GetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathPool::GetPath
// Il2CppName: GetPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Pathfinding::PathPool::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::PathPool::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathPool*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
