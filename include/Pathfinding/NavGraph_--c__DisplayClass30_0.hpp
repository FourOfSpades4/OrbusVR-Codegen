// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.NavGraph
#include "Pathfinding/NavGraph.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: PathHandler
  class PathHandler;
  // Forward declaring type: GraphNodeDelegate
  class GraphNodeDelegate;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::NavGraph::$$c__DisplayClass30_0);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::NavGraph::$$c__DisplayClass30_0*, "Pathfinding", "NavGraph/<>c__DisplayClass30_0");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.NavGraph/<>c__DisplayClass30_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: AD831C
  class NavGraph::$$c__DisplayClass30_0 : public ::Il2CppObject {
    public:
    public:
    // public Pathfinding.GraphNode node
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::GraphNode* node;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    // public Pathfinding.NavGraph <>4__this
    // Size: 0x8
    // Offset: 0x18
    ::Pathfinding::NavGraph* $$4__this;
    // Field size check
    static_assert(sizeof(::Pathfinding::NavGraph*) == 0x8);
    // public Pathfinding.PathHandler data
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::PathHandler* data;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathHandler*) == 0x8);
    // public Pathfinding.GraphNodeDelegate drawConnection
    // Size: 0x8
    // Offset: 0x28
    ::Pathfinding::GraphNodeDelegate* drawConnection;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNodeDelegate*) == 0x8);
    public:
    // Get instance field reference: public Pathfinding.GraphNode node
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_node();
    // Get instance field reference: public Pathfinding.NavGraph <>4__this
    [[deprecated("Use field access instead!")]] ::Pathfinding::NavGraph*& dyn_$$4__this();
    // Get instance field reference: public Pathfinding.PathHandler data
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathHandler*& dyn_data();
    // Get instance field reference: public Pathfinding.GraphNodeDelegate drawConnection
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNodeDelegate*& dyn_drawConnection();
    // public System.Void .ctor()
    // Offset: 0x1C1E164
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavGraph::$$c__DisplayClass30_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::NavGraph::$$c__DisplayClass30_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavGraph::$$c__DisplayClass30_0*, creationType>()));
    }
    // System.Void <OnDrawGizmos>b__0(Pathfinding.GraphNode otherNode)
    // Offset: 0x1C1E43C
    void $OnDrawGizmos$b__0(::Pathfinding::GraphNode* otherNode);
    // System.Boolean <OnDrawGizmos>b__1(Pathfinding.GraphNode _node)
    // Offset: 0x1C1E51C
    bool $OnDrawGizmos$b__1(::Pathfinding::GraphNode* _node);
  }; // Pathfinding.NavGraph/<>c__DisplayClass30_0
  #pragma pack(pop)
  static check_size<sizeof(NavGraph::$$c__DisplayClass30_0), 40 + sizeof(::Pathfinding::GraphNodeDelegate*)> __Pathfinding_NavGraph_$$c__DisplayClass30_0SizeCheck;
  static_assert(sizeof(NavGraph::$$c__DisplayClass30_0) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::NavGraph::$$c__DisplayClass30_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::NavGraph::$$c__DisplayClass30_0::$OnDrawGizmos$b__0
// Il2CppName: <OnDrawGizmos>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavGraph::$$c__DisplayClass30_0::*)(::Pathfinding::GraphNode*)>(&Pathfinding::NavGraph::$$c__DisplayClass30_0::$OnDrawGizmos$b__0)> {
  static const MethodInfo* get() {
    static auto* otherNode = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavGraph::$$c__DisplayClass30_0*), "<OnDrawGizmos>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherNode});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavGraph::$$c__DisplayClass30_0::$OnDrawGizmos$b__1
// Il2CppName: <OnDrawGizmos>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::NavGraph::$$c__DisplayClass30_0::*)(::Pathfinding::GraphNode*)>(&Pathfinding::NavGraph::$$c__DisplayClass30_0::$OnDrawGizmos$b__1)> {
  static const MethodInfo* get() {
    static auto* _node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavGraph::$$c__DisplayClass30_0*), "<OnDrawGizmos>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_node});
  }
};
