// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.Path
#include "Pathfinding/Path.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: PathNode
  class PathNode;
  // Forward declaring type: OnPathDelegate
  class OnPathDelegate;
  // Forward declaring type: PathLog
  struct PathLog;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: ABPath
  class ABPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::ABPath);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::ABPath*, "Pathfinding", "ABPath");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x150
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.ABPath
  // [TokenAttribute] Offset: FFFFFFFF
  class ABPath : public ::Pathfinding::Path {
    public:
    public:
    // public System.Boolean recalcStartEndCosts
    // Size: 0x1
    // Offset: 0xD9
    bool recalcStartEndCosts;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: recalcStartEndCosts and: startNode
    char __padding0[0x6] = {};
    // public Pathfinding.GraphNode startNode
    // Size: 0x8
    // Offset: 0xE0
    ::Pathfinding::GraphNode* startNode;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    // public Pathfinding.GraphNode endNode
    // Size: 0x8
    // Offset: 0xE8
    ::Pathfinding::GraphNode* endNode;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    // public Pathfinding.GraphNode startHint
    // Size: 0x8
    // Offset: 0xF0
    ::Pathfinding::GraphNode* startHint;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    // public Pathfinding.GraphNode endHint
    // Size: 0x8
    // Offset: 0xF8
    ::Pathfinding::GraphNode* endHint;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    // public UnityEngine.Vector3 originalStartPoint
    // Size: 0xC
    // Offset: 0x100
    ::UnityEngine::Vector3 originalStartPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 originalEndPoint
    // Size: 0xC
    // Offset: 0x10C
    ::UnityEngine::Vector3 originalEndPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 startPoint
    // Size: 0xC
    // Offset: 0x118
    ::UnityEngine::Vector3 startPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 endPoint
    // Size: 0xC
    // Offset: 0x124
    ::UnityEngine::Vector3 endPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public Pathfinding.Int3 startIntPoint
    // Size: 0xC
    // Offset: 0x130
    ::Pathfinding::Int3 startIntPoint;
    // Field size check
    static_assert(sizeof(::Pathfinding::Int3) == 0xC);
    // public System.Boolean calculatePartial
    // Size: 0x1
    // Offset: 0x13C
    bool calculatePartial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: calculatePartial and: partialBestTarget
    char __padding10[0x3] = {};
    // protected Pathfinding.PathNode partialBestTarget
    // Size: 0x8
    // Offset: 0x140
    ::Pathfinding::PathNode* partialBestTarget;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathNode*) == 0x8);
    // protected System.Int32[] endNodeCosts
    // Size: 0x8
    // Offset: 0x148
    ::ArrayW<int> endNodeCosts;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    public:
    // Get instance field reference: public System.Boolean recalcStartEndCosts
    [[deprecated("Use field access instead!")]] bool& dyn_recalcStartEndCosts();
    // Get instance field reference: public Pathfinding.GraphNode startNode
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_startNode();
    // Get instance field reference: public Pathfinding.GraphNode endNode
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_endNode();
    // Get instance field reference: public Pathfinding.GraphNode startHint
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_startHint();
    // Get instance field reference: public Pathfinding.GraphNode endHint
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_endHint();
    // Get instance field reference: public UnityEngine.Vector3 originalStartPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_originalStartPoint();
    // Get instance field reference: public UnityEngine.Vector3 originalEndPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_originalEndPoint();
    // Get instance field reference: public UnityEngine.Vector3 startPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startPoint();
    // Get instance field reference: public UnityEngine.Vector3 endPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_endPoint();
    // Get instance field reference: public Pathfinding.Int3 startIntPoint
    [[deprecated("Use field access instead!")]] ::Pathfinding::Int3& dyn_startIntPoint();
    // Get instance field reference: public System.Boolean calculatePartial
    [[deprecated("Use field access instead!")]] bool& dyn_calculatePartial();
    // Get instance field reference: protected Pathfinding.PathNode partialBestTarget
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathNode*& dyn_partialBestTarget();
    // Get instance field reference: protected System.Int32[] endNodeCosts
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_endNodeCosts();
    // protected System.Boolean get_hasEndPoint()
    // Offset: 0x102FE48
    bool get_hasEndPoint();
    // static public Pathfinding.ABPath Construct(UnityEngine.Vector3 start, UnityEngine.Vector3 end, Pathfinding.OnPathDelegate callback)
    // Offset: 0x102FEC0
    static ::Pathfinding::ABPath* Construct(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::Pathfinding::OnPathDelegate* callback);
    // protected System.Void Setup(UnityEngine.Vector3 start, UnityEngine.Vector3 end, Pathfinding.OnPathDelegate callbackDelegate)
    // Offset: 0x102FF94
    void Setup(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::Pathfinding::OnPathDelegate* callbackDelegate);
    // protected System.Void UpdateStartEnd(UnityEngine.Vector3 start, UnityEngine.Vector3 end)
    // Offset: 0x102FF9C
    void UpdateStartEnd(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end);
    // protected System.Void CompletePathIfStartIsValidTarget()
    // Offset: 0x1030ADC
    void CompletePathIfStartIsValidTarget();
    // public System.Void ResetCosts(Pathfinding.Path p)
    // Offset: 0x10311F8
    void ResetCosts(::Pathfinding::Path* p);
    // public UnityEngine.Vector3 GetMovementVector(UnityEngine.Vector3 point)
    // Offset: 0x10316EC
    ::UnityEngine::Vector3 GetMovementVector(::UnityEngine::Vector3 point);
    // public System.Void .ctor()
    // Offset: 0x102FE50
    // Implemented from: Pathfinding.Path
    // Base method: System.Void Path::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ABPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::ABPath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ABPath*, creationType>()));
    }
    // public override System.UInt32 GetConnectionSpecialCost(Pathfinding.GraphNode a, Pathfinding.GraphNode b, System.UInt32 currentCost)
    // Offset: 0x1030094
    // Implemented from: Pathfinding.Path
    // Base method: System.UInt32 Path::GetConnectionSpecialCost(Pathfinding.GraphNode a, Pathfinding.GraphNode b, System.UInt32 currentCost)
    uint GetConnectionSpecialCost(::Pathfinding::GraphNode* a, ::Pathfinding::GraphNode* b, uint currentCost);
    // public override System.Void Reset()
    // Offset: 0x10303CC
    // Implemented from: Pathfinding.Path
    // Base method: System.Void Path::Reset()
    void Reset();
    // public override System.Void Prepare()
    // Offset: 0x10304A8
    // Implemented from: Pathfinding.Path
    // Base method: System.Void Path::Prepare()
    void Prepare();
    // public override System.Void Initialize()
    // Offset: 0x1030B7C
    // Implemented from: Pathfinding.Path
    // Base method: System.Void Path::Initialize()
    void Initialize();
    // public override System.Void Cleanup()
    // Offset: 0x1030E40
    // Implemented from: Pathfinding.Path
    // Base method: System.Void Path::Cleanup()
    void Cleanup();
    // public override System.Void CalculateStep(System.Int64 targetTick)
    // Offset: 0x1030F10
    // Implemented from: Pathfinding.Path
    // Base method: System.Void Path::CalculateStep(System.Int64 targetTick)
    void CalculateStep(int64_t targetTick);
    // public override System.String DebugString(Pathfinding.PathLog logMode)
    // Offset: 0x10311FC
    // Implemented from: Pathfinding.Path
    // Base method: System.String Path::DebugString(Pathfinding.PathLog logMode)
    ::StringW DebugString(::Pathfinding::PathLog logMode);
  }; // Pathfinding.ABPath
  #pragma pack(pop)
  static check_size<sizeof(ABPath), 328 + sizeof(::ArrayW<int>)> __Pathfinding_ABPathSizeCheck;
  static_assert(sizeof(ABPath) == 0x150);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::ABPath::get_hasEndPoint
// Il2CppName: get_hasEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::ABPath::*)()>(&Pathfinding::ABPath::get_hasEndPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ABPath*), "get_hasEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ABPath::Construct
// Il2CppName: Construct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::ABPath* (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::ABPath::Construct)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ABPath*), "Construct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, callback});
  }
};
// Writing MetadataGetter for method: Pathfinding::ABPath::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ABPath::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::OnPathDelegate*)>(&Pathfinding::ABPath::Setup)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* callbackDelegate = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnPathDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ABPath*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, callbackDelegate});
  }
};
// Writing MetadataGetter for method: Pathfinding::ABPath::UpdateStartEnd
// Il2CppName: UpdateStartEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ABPath::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::ABPath::UpdateStartEnd)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ABPath*), "UpdateStartEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end});
  }
};
// Writing MetadataGetter for method: Pathfinding::ABPath::CompletePathIfStartIsValidTarget
// Il2CppName: CompletePathIfStartIsValidTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ABPath::*)()>(&Pathfinding::ABPath::CompletePathIfStartIsValidTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ABPath*), "CompletePathIfStartIsValidTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ABPath::ResetCosts
// Il2CppName: ResetCosts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ABPath::*)(::Pathfinding::Path*)>(&Pathfinding::ABPath::ResetCosts)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ABPath*), "ResetCosts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::ABPath::GetMovementVector
// Il2CppName: GetMovementVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::ABPath::*)(::UnityEngine::Vector3)>(&Pathfinding::ABPath::GetMovementVector)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ABPath*), "GetMovementVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Pathfinding::ABPath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::ABPath::GetConnectionSpecialCost
// Il2CppName: GetConnectionSpecialCost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Pathfinding::ABPath::*)(::Pathfinding::GraphNode*, ::Pathfinding::GraphNode*, uint)>(&Pathfinding::ABPath::GetConnectionSpecialCost)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* currentCost = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ABPath*), "GetConnectionSpecialCost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, currentCost});
  }
};
// Writing MetadataGetter for method: Pathfinding::ABPath::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ABPath::*)()>(&Pathfinding::ABPath::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ABPath*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ABPath::Prepare
// Il2CppName: Prepare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ABPath::*)()>(&Pathfinding::ABPath::Prepare)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ABPath*), "Prepare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ABPath::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ABPath::*)()>(&Pathfinding::ABPath::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ABPath*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ABPath::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ABPath::*)()>(&Pathfinding::ABPath::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ABPath*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::ABPath::CalculateStep
// Il2CppName: CalculateStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::ABPath::*)(int64_t)>(&Pathfinding::ABPath::CalculateStep)> {
  static const MethodInfo* get() {
    static auto* targetTick = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ABPath*), "CalculateStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetTick});
  }
};
// Writing MetadataGetter for method: Pathfinding::ABPath::DebugString
// Il2CppName: DebugString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Pathfinding::ABPath::*)(::Pathfinding::PathLog)>(&Pathfinding::ABPath::DebugString)> {
  static const MethodInfo* get() {
    static auto* logMode = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathLog")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::ABPath*), "DebugString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logMode});
  }
};
