// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AIPath
  class AIPath;
  // Forward declaring type: AILerp
  class AILerp;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: TargetMover
  class TargetMover;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::TargetMover);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::TargetMover*, "Pathfinding", "TargetMover");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.TargetMover
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: AD82A4
  class TargetMover : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.LayerMask mask
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::LayerMask mask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: mask and: target
    char __padding0[0x4] = {};
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private AIPath[] ais2
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::AIPath*> ais2;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::AIPath*>) == 0x8);
    // private AILerp[] ais3
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::GlobalNamespace::AILerp*> ais3;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::AILerp*>) == 0x8);
    // public System.Boolean onlyOnDoubleClick
    // Size: 0x1
    // Offset: 0x38
    bool onlyOnDoubleClick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean use2D
    // Size: 0x1
    // Offset: 0x39
    bool use2D;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: use2D and: cam
    char __padding5[0x6] = {};
    // private UnityEngine.Camera cam
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Camera* cam;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.LayerMask mask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_mask();
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // Get instance field reference: private AIPath[] ais2
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::AIPath*>& dyn_ais2();
    // Get instance field reference: private AILerp[] ais3
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::AILerp*>& dyn_ais3();
    // Get instance field reference: public System.Boolean onlyOnDoubleClick
    [[deprecated("Use field access instead!")]] bool& dyn_onlyOnDoubleClick();
    // Get instance field reference: public System.Boolean use2D
    [[deprecated("Use field access instead!")]] bool& dyn_use2D();
    // Get instance field reference: private UnityEngine.Camera cam
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_cam();
    // public System.Void Start()
    // Offset: 0xE3AD00
    void Start();
    // public System.Void OnGUI()
    // Offset: 0xE3ADA0
    void OnGUI();
    // private System.Void Update()
    // Offset: 0xE3B258
    void Update();
    // public System.Void UpdateTargetPosition()
    // Offset: 0xE3AE7C
    void UpdateTargetPosition();
    // public System.Void .ctor()
    // Offset: 0xE3B2E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TargetMover* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::TargetMover::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TargetMover*, creationType>()));
    }
  }; // Pathfinding.TargetMover
  #pragma pack(pop)
  static check_size<sizeof(TargetMover), 64 + sizeof(::UnityEngine::Camera*)> __Pathfinding_TargetMoverSizeCheck;
  static_assert(sizeof(TargetMover) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::TargetMover::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::TargetMover::*)()>(&Pathfinding::TargetMover::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::TargetMover*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::TargetMover::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::TargetMover::*)()>(&Pathfinding::TargetMover::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::TargetMover*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::TargetMover::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::TargetMover::*)()>(&Pathfinding::TargetMover::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::TargetMover*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::TargetMover::UpdateTargetPosition
// Il2CppName: UpdateTargetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::TargetMover::*)()>(&Pathfinding::TargetMover::UpdateTargetPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::TargetMover*), "UpdateTargetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::TargetMover::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
