// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.ColliderType
#include "Pathfinding/ColliderType.hpp"
// Including type: Pathfinding.RayDirection
#include "Pathfinding/RayDirection.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
}
// Forward declaring namespace: Pathfinding::Serialization
namespace Pathfinding::Serialization {
  // Forward declaring type: GraphSerializationContext
  class GraphSerializationContext;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphCollision
  class GraphCollision;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::GraphCollision);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::GraphCollision*, "Pathfinding", "GraphCollision");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.GraphCollision
  // [TokenAttribute] Offset: FFFFFFFF
  class GraphCollision : public ::Il2CppObject {
    public:
    public:
    // public Pathfinding.ColliderType type
    // Size: 0x4
    // Offset: 0x10
    ::Pathfinding::ColliderType type;
    // Field size check
    static_assert(sizeof(::Pathfinding::ColliderType) == 0x4);
    // public System.Single diameter
    // Size: 0x4
    // Offset: 0x14
    float diameter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single height
    // Size: 0x4
    // Offset: 0x18
    float height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single collisionOffset
    // Size: 0x4
    // Offset: 0x1C
    float collisionOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.RayDirection rayDirection
    // Size: 0x4
    // Offset: 0x20
    ::Pathfinding::RayDirection rayDirection;
    // Field size check
    static_assert(sizeof(::Pathfinding::RayDirection) == 0x4);
    // public UnityEngine.LayerMask mask
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::LayerMask mask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public UnityEngine.LayerMask heightMask
    // Size: 0x4
    // Offset: 0x28
    ::UnityEngine::LayerMask heightMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Single fromHeight
    // Size: 0x4
    // Offset: 0x2C
    float fromHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean thickRaycast
    // Size: 0x1
    // Offset: 0x30
    bool thickRaycast;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: thickRaycast and: thickRaycastDiameter
    char __padding8[0x3] = {};
    // public System.Single thickRaycastDiameter
    // Size: 0x4
    // Offset: 0x34
    float thickRaycastDiameter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean unwalkableWhenNoGround
    // Size: 0x1
    // Offset: 0x38
    bool unwalkableWhenNoGround;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean use2D
    // Size: 0x1
    // Offset: 0x39
    bool use2D;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean collisionCheck
    // Size: 0x1
    // Offset: 0x3A
    bool collisionCheck;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean heightCheck
    // Size: 0x1
    // Offset: 0x3B
    bool heightCheck;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public UnityEngine.Vector3 up
    // Size: 0xC
    // Offset: 0x3C
    ::UnityEngine::Vector3 up;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 upheight
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 upheight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single finalRadius
    // Size: 0x4
    // Offset: 0x54
    float finalRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single finalRaycastRadius
    // Size: 0x4
    // Offset: 0x58
    float finalRaycastRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // static field const value: static public System.Single RaycastErrorMargin
    static constexpr const float RaycastErrorMargin = 0.005;
    // Get static field: static public System.Single RaycastErrorMargin
    static float _get_RaycastErrorMargin();
    // Set static field: static public System.Single RaycastErrorMargin
    static void _set_RaycastErrorMargin(float value);
    // Get instance field reference: public Pathfinding.ColliderType type
    [[deprecated("Use field access instead!")]] ::Pathfinding::ColliderType& dyn_type();
    // Get instance field reference: public System.Single diameter
    [[deprecated("Use field access instead!")]] float& dyn_diameter();
    // Get instance field reference: public System.Single height
    [[deprecated("Use field access instead!")]] float& dyn_height();
    // Get instance field reference: public System.Single collisionOffset
    [[deprecated("Use field access instead!")]] float& dyn_collisionOffset();
    // Get instance field reference: public Pathfinding.RayDirection rayDirection
    [[deprecated("Use field access instead!")]] ::Pathfinding::RayDirection& dyn_rayDirection();
    // Get instance field reference: public UnityEngine.LayerMask mask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_mask();
    // Get instance field reference: public UnityEngine.LayerMask heightMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_heightMask();
    // Get instance field reference: public System.Single fromHeight
    [[deprecated("Use field access instead!")]] float& dyn_fromHeight();
    // Get instance field reference: public System.Boolean thickRaycast
    [[deprecated("Use field access instead!")]] bool& dyn_thickRaycast();
    // Get instance field reference: public System.Single thickRaycastDiameter
    [[deprecated("Use field access instead!")]] float& dyn_thickRaycastDiameter();
    // Get instance field reference: public System.Boolean unwalkableWhenNoGround
    [[deprecated("Use field access instead!")]] bool& dyn_unwalkableWhenNoGround();
    // Get instance field reference: public System.Boolean use2D
    [[deprecated("Use field access instead!")]] bool& dyn_use2D();
    // Get instance field reference: public System.Boolean collisionCheck
    [[deprecated("Use field access instead!")]] bool& dyn_collisionCheck();
    // Get instance field reference: public System.Boolean heightCheck
    [[deprecated("Use field access instead!")]] bool& dyn_heightCheck();
    // Get instance field reference: public UnityEngine.Vector3 up
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_up();
    // Get instance field reference: private UnityEngine.Vector3 upheight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_upheight();
    // Get instance field reference: private System.Single finalRadius
    [[deprecated("Use field access instead!")]] float& dyn_finalRadius();
    // Get instance field reference: private System.Single finalRaycastRadius
    [[deprecated("Use field access instead!")]] float& dyn_finalRaycastRadius();
    // public System.Void Initialize(UnityEngine.Matrix4x4 matrix, System.Single scale)
    // Offset: 0x1C07ED0
    void Initialize(::UnityEngine::Matrix4x4 matrix, float scale);
    // public System.Boolean Check(UnityEngine.Vector3 position)
    // Offset: 0x1C07F98
    bool Check(::UnityEngine::Vector3 position);
    // public UnityEngine.Vector3 CheckHeight(UnityEngine.Vector3 position)
    // Offset: 0x1C0843C
    ::UnityEngine::Vector3 CheckHeight(::UnityEngine::Vector3 position);
    // public UnityEngine.Vector3 CheckHeight(UnityEngine.Vector3 position, out UnityEngine.RaycastHit hit, out System.Boolean walkable)
    // Offset: 0x1C08474
    ::UnityEngine::Vector3 CheckHeight(::UnityEngine::Vector3 position, ByRef<::UnityEngine::RaycastHit> hit, ByRef<bool> walkable);
    // public UnityEngine.Vector3 Raycast(UnityEngine.Vector3 origin, out UnityEngine.RaycastHit hit, out System.Boolean walkable)
    // Offset: 0x1C087EC
    ::UnityEngine::Vector3 Raycast(::UnityEngine::Vector3 origin, ByRef<::UnityEngine::RaycastHit> hit, ByRef<bool> walkable);
    // public UnityEngine.RaycastHit[] CheckHeightAll(UnityEngine.Vector3 position)
    // Offset: 0x1C08B30
    ::ArrayW<::UnityEngine::RaycastHit> CheckHeightAll(::UnityEngine::Vector3 position);
    // public System.Void DeserializeSettingsCompatibility(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x1C09194
    void DeserializeSettingsCompatibility(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public System.Void .ctor()
    // Offset: 0x1C09408
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GraphCollision* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::GraphCollision::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GraphCollision*, creationType>()));
    }
  }; // Pathfinding.GraphCollision
  #pragma pack(pop)
  static check_size<sizeof(GraphCollision), 88 + sizeof(float)> __Pathfinding_GraphCollisionSizeCheck;
  static_assert(sizeof(GraphCollision) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::GraphCollision::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphCollision::*)(::UnityEngine::Matrix4x4, float)>(&Pathfinding::GraphCollision::Initialize)> {
  static const MethodInfo* get() {
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphCollision*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix, scale});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphCollision::Check
// Il2CppName: Check
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GraphCollision::*)(::UnityEngine::Vector3)>(&Pathfinding::GraphCollision::Check)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphCollision*), "Check", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphCollision::CheckHeight
// Il2CppName: CheckHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::GraphCollision::*)(::UnityEngine::Vector3)>(&Pathfinding::GraphCollision::CheckHeight)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphCollision*), "CheckHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphCollision::CheckHeight
// Il2CppName: CheckHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::GraphCollision::*)(::UnityEngine::Vector3, ByRef<::UnityEngine::RaycastHit>, ByRef<bool>)>(&Pathfinding::GraphCollision::CheckHeight)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    static auto* walkable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphCollision*), "CheckHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, hit, walkable});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphCollision::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::GraphCollision::*)(::UnityEngine::Vector3, ByRef<::UnityEngine::RaycastHit>, ByRef<bool>)>(&Pathfinding::GraphCollision::Raycast)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    static auto* walkable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphCollision*), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, hit, walkable});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphCollision::CheckHeightAll
// Il2CppName: CheckHeightAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::RaycastHit> (Pathfinding::GraphCollision::*)(::UnityEngine::Vector3)>(&Pathfinding::GraphCollision::CheckHeightAll)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphCollision*), "CheckHeightAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphCollision::DeserializeSettingsCompatibility
// Il2CppName: DeserializeSettingsCompatibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GraphCollision::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::GraphCollision::DeserializeSettingsCompatibility)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GraphCollision*), "DeserializeSettingsCompatibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::GraphCollision::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
