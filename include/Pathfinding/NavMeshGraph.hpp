// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.NavGraph
#include "Pathfinding/NavGraph.hpp"
// Including type: Pathfinding.INavmesh
#include "Pathfinding/INavmesh.hpp"
// Including type: Pathfinding.IUpdatableGraph
#include "Pathfinding/IUpdatableGraph.hpp"
// Including type: Pathfinding.INavmeshHolder
#include "Pathfinding/INavmeshHolder.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Pathfinding.Int3
#include "Pathfinding/Int3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: TriangleMeshNode
  class TriangleMeshNode;
  // Forward declaring type: BBTree
  class BBTree;
  // Forward declaring type: NNInfo
  struct NNInfo;
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: NNConstraint
  class NNConstraint;
  // Forward declaring type: GraphUpdateThreading
  struct GraphUpdateThreading;
  // Forward declaring type: GraphUpdateObject
  class GraphUpdateObject;
  // Forward declaring type: GraphNodeDelegateCancelable
  class GraphNodeDelegateCancelable;
  // Forward declaring type: OnScanStatus
  class OnScanStatus;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Skipping declaration: Matrix4x4 because it is already included!
}
// Forward declaring namespace: Pathfinding::Serialization
namespace Pathfinding::Serialization {
  // Forward declaring type: GraphSerializationContext
  class GraphSerializationContext;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: NavMeshGraph
  class NavMeshGraph;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::NavMeshGraph);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::NavMeshGraph*, "Pathfinding", "NavMeshGraph");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x118
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.NavMeshGraph
  // [TokenAttribute] Offset: FFFFFFFF
  // [JsonOptInAttribute] Offset: FFFFFFFF
  class NavMeshGraph : public ::Pathfinding::NavGraph/*, public ::Pathfinding::INavmesh, public ::Pathfinding::IUpdatableGraph, public ::Pathfinding::INavmeshHolder*/ {
    public:
    // Writing base type padding for base size: 0xC4 to desired offset: 0xC8
    char ___base_padding[0x4] = {};
    // Nested type: ::Pathfinding::NavMeshGraph::$$c__DisplayClass29_0
    class $$c__DisplayClass29_0;
    // Nested type: ::Pathfinding::NavMeshGraph::$$c__DisplayClass33_0
    class $$c__DisplayClass33_0;
    public:
    // public UnityEngine.Mesh sourceMesh
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::Mesh* sourceMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // public UnityEngine.Vector3 offset
    // Size: 0xC
    // Offset: 0xD0
    ::UnityEngine::Vector3 offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 rotation
    // Size: 0xC
    // Offset: 0xDC
    ::UnityEngine::Vector3 rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single scale
    // Size: 0x4
    // Offset: 0xE8
    float scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean accurateNearestNode
    // Size: 0x1
    // Offset: 0xEC
    bool accurateNearestNode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: accurateNearestNode and: nodes
    char __padding4[0x3] = {};
    // public Pathfinding.TriangleMeshNode[] nodes
    // Size: 0x8
    // Offset: 0xF0
    ::ArrayW<::Pathfinding::TriangleMeshNode*> nodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::TriangleMeshNode*>) == 0x8);
    // private Pathfinding.BBTree _bbTree
    // Size: 0x8
    // Offset: 0xF8
    ::Pathfinding::BBTree* bbTree;
    // Field size check
    static_assert(sizeof(::Pathfinding::BBTree*) == 0x8);
    // private Pathfinding.Int3[] _vertices
    // Size: 0x8
    // Offset: 0x100
    ::ArrayW<::Pathfinding::Int3> vertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::Int3>) == 0x8);
    // private UnityEngine.Vector3[] originalVertices
    // Size: 0x8
    // Offset: 0x108
    ::ArrayW<::UnityEngine::Vector3> originalVertices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // public System.Int32[] triangles
    // Size: 0x8
    // Offset: 0x110
    ::ArrayW<int> triangles;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Pathfinding::INavmesh
    operator ::Pathfinding::INavmesh() noexcept {
      return *reinterpret_cast<::Pathfinding::INavmesh*>(this);
    }
    // Creating interface conversion operator: operator ::Pathfinding::IUpdatableGraph
    operator ::Pathfinding::IUpdatableGraph() noexcept {
      return *reinterpret_cast<::Pathfinding::IUpdatableGraph*>(this);
    }
    // Creating interface conversion operator: operator ::Pathfinding::INavmeshHolder
    operator ::Pathfinding::INavmeshHolder() noexcept {
      return *reinterpret_cast<::Pathfinding::INavmeshHolder*>(this);
    }
    // Get instance field reference: public UnityEngine.Mesh sourceMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_sourceMesh();
    // Get instance field reference: public UnityEngine.Vector3 offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_offset();
    // Get instance field reference: public UnityEngine.Vector3 rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rotation();
    // Get instance field reference: public System.Single scale
    [[deprecated("Use field access instead!")]] float& dyn_scale();
    // Get instance field reference: public System.Boolean accurateNearestNode
    [[deprecated("Use field access instead!")]] bool& dyn_accurateNearestNode();
    // Get instance field reference: public Pathfinding.TriangleMeshNode[] nodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::TriangleMeshNode*>& dyn_nodes();
    // Get instance field reference: private Pathfinding.BBTree _bbTree
    [[deprecated("Use field access instead!")]] ::Pathfinding::BBTree*& dyn__bbTree();
    // Get instance field reference: private Pathfinding.Int3[] _vertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::Int3>& dyn__vertices();
    // Get instance field reference: private UnityEngine.Vector3[] originalVertices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_originalVertices();
    // Get instance field reference: public System.Int32[] triangles
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_triangles();
    // public Pathfinding.TriangleMeshNode[] get_TriNodes()
    // Offset: 0x1C1E7B0
    ::ArrayW<::Pathfinding::TriangleMeshNode*> get_TriNodes();
    // public Pathfinding.Int3 GetVertex(System.Int32 index)
    // Offset: 0x1C1E918
    ::Pathfinding::Int3 GetVertex(int index);
    // public System.Int32 GetVertexArrayIndex(System.Int32 index)
    // Offset: 0x1C1E97C
    int GetVertexArrayIndex(int index);
    // public System.Void GetTileCoordinates(System.Int32 tileIndex, out System.Int32 x, out System.Int32 z)
    // Offset: 0x1C1E984
    void GetTileCoordinates(int tileIndex, ByRef<int> x, ByRef<int> z);
    // public Pathfinding.BBTree get_bbTree()
    // Offset: 0x1C1E990
    ::Pathfinding::BBTree* get_bbTree();
    // public System.Void set_bbTree(Pathfinding.BBTree value)
    // Offset: 0x1C1E998
    void set_bbTree(::Pathfinding::BBTree* value);
    // public Pathfinding.Int3[] get_vertices()
    // Offset: 0x1C1E974
    ::ArrayW<::Pathfinding::Int3> get_vertices();
    // public System.Void set_vertices(Pathfinding.Int3[] value)
    // Offset: 0x1C1E9A0
    void set_vertices(::ArrayW<::Pathfinding::Int3> value);
    // public System.Void GenerateMatrix()
    // Offset: 0x1C1E9A8
    void GenerateMatrix();
    // static public Pathfinding.NNInfo GetNearest(Pathfinding.NavMeshGraph graph, Pathfinding.GraphNode[] nodes, UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, System.Boolean accurateNearestNode)
    // Offset: 0x1C1EED4
    static ::Pathfinding::NNInfo GetNearest(::Pathfinding::NavMeshGraph* graph, ::ArrayW<::Pathfinding::GraphNode*> nodes, ::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint, bool accurateNearestNode);
    // static public Pathfinding.NNInfo GetNearestForce(Pathfinding.NavGraph graph, Pathfinding.INavmeshHolder navmesh, UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, System.Boolean accurateNearestNode)
    // Offset: 0x1C1F3A0
    static ::Pathfinding::NNInfo GetNearestForce(::Pathfinding::NavGraph* graph, ::Pathfinding::INavmeshHolder* navmesh, ::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint, bool accurateNearestNode);
    // static public Pathfinding.NNInfo GetNearestForceBoth(Pathfinding.NavGraph graph, Pathfinding.INavmeshHolder navmesh, UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, System.Boolean accurateNearestNode)
    // Offset: 0x1C1EFE4
    static ::Pathfinding::NNInfo GetNearestForceBoth(::Pathfinding::NavGraph* graph, ::Pathfinding::INavmeshHolder* navmesh, ::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint, bool accurateNearestNode);
    // public Pathfinding.GraphUpdateThreading CanUpdateAsync(Pathfinding.GraphUpdateObject o)
    // Offset: 0x1C1F3EC
    ::Pathfinding::GraphUpdateThreading CanUpdateAsync(::Pathfinding::GraphUpdateObject* o);
    // public System.Void UpdateAreaInit(Pathfinding.GraphUpdateObject o)
    // Offset: 0x1C1F3F4
    void UpdateAreaInit(::Pathfinding::GraphUpdateObject* o);
    // public System.Void UpdateArea(Pathfinding.GraphUpdateObject o)
    // Offset: 0x1C1F3F8
    void UpdateArea(::Pathfinding::GraphUpdateObject* o);
    // static public System.Void UpdateArea(Pathfinding.GraphUpdateObject o, Pathfinding.INavmesh graph)
    // Offset: 0x1C1F408
    static void UpdateArea(::Pathfinding::GraphUpdateObject* o, ::Pathfinding::INavmesh* graph);
    // static private UnityEngine.Vector3 ClosestPointOnNode(Pathfinding.TriangleMeshNode node, Pathfinding.Int3[] vertices, UnityEngine.Vector3 pos)
    // Offset: 0x1C1F730
    static ::UnityEngine::Vector3 ClosestPointOnNode(::Pathfinding::TriangleMeshNode* node, ::ArrayW<::Pathfinding::Int3> vertices, ::UnityEngine::Vector3 pos);
    // public System.Boolean ContainsPoint(Pathfinding.TriangleMeshNode node, UnityEngine.Vector3 pos)
    // Offset: 0x1C1F8D8
    bool ContainsPoint(::Pathfinding::TriangleMeshNode* node, ::UnityEngine::Vector3 pos);
    // static public System.Boolean ContainsPoint(Pathfinding.TriangleMeshNode node, UnityEngine.Vector3 pos, Pathfinding.Int3[] vertices)
    // Offset: 0x1C1FC18
    static bool ContainsPoint(::Pathfinding::TriangleMeshNode* node, ::UnityEngine::Vector3 pos, ::ArrayW<::Pathfinding::Int3> vertices);
    // public System.Void ScanInternal(System.String objMeshPath)
    // Offset: 0x1C20058
    void ScanInternal(::StringW objMeshPath);
    // private System.Void GenerateNodes(UnityEngine.Vector3[] vectorVertices, System.Int32[] triangles, out UnityEngine.Vector3[] originalVertices, out Pathfinding.Int3[] vertices)
    // Offset: 0x1C202B8
    void GenerateNodes(::ArrayW<::UnityEngine::Vector3> vectorVertices, ::ArrayW<int> triangles, ByRef<::ArrayW<::UnityEngine::Vector3>> originalVertices, ByRef<::ArrayW<::Pathfinding::Int3>> vertices);
    // static public System.Void RebuildBBTree(Pathfinding.NavMeshGraph graph)
    // Offset: 0x1C1EED0
    static void RebuildBBTree(::Pathfinding::NavMeshGraph* graph);
    // public System.Void PostProcess()
    // Offset: 0x1C21610
    void PostProcess();
    // public override System.Void GetNodes(Pathfinding.GraphNodeDelegateCancelable del)
    // Offset: 0x1C1E7B8
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::GetNodes(Pathfinding.GraphNodeDelegateCancelable del)
    void GetNodes(::Pathfinding::GraphNodeDelegateCancelable* del);
    // public override System.Void OnDestroy()
    // Offset: 0x1C1E86C
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::OnDestroy()
    void OnDestroy();
    // public override System.Void RelocateNodes(UnityEngine.Matrix4x4 oldMatrix, UnityEngine.Matrix4x4 newMatrix)
    // Offset: 0x1C1EB40
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::RelocateNodes(UnityEngine.Matrix4x4 oldMatrix, UnityEngine.Matrix4x4 newMatrix)
    void RelocateNodes(::UnityEngine::Matrix4x4 oldMatrix, ::UnityEngine::Matrix4x4 newMatrix);
    // public override Pathfinding.NNInfo GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, Pathfinding.GraphNode hint)
    // Offset: 0x1C1F33C
    // Implemented from: Pathfinding.NavGraph
    // Base method: Pathfinding.NNInfo NavGraph::GetNearest(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint, Pathfinding.GraphNode hint)
    ::Pathfinding::NNInfo GetNearest(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint, ::Pathfinding::GraphNode* hint);
    // public override Pathfinding.NNInfo GetNearestForce(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint)
    // Offset: 0x1C1F350
    // Implemented from: Pathfinding.NavGraph
    // Base method: Pathfinding.NNInfo NavGraph::GetNearestForce(UnityEngine.Vector3 position, Pathfinding.NNConstraint constraint)
    ::Pathfinding::NNInfo GetNearestForce(::UnityEngine::Vector3 position, ::Pathfinding::NNConstraint* constraint);
    // public override System.Void ScanInternal(Pathfinding.OnScanStatus statusCallback)
    // Offset: 0x1C20164
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::ScanInternal(Pathfinding.OnScanStatus statusCallback)
    void ScanInternal(::Pathfinding::OnScanStatus* statusCallback);
    // public override System.Void OnDrawGizmos(System.Boolean drawNodes)
    // Offset: 0x1C21614
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::OnDrawGizmos(System.Boolean drawNodes)
    void OnDrawGizmos(bool drawNodes);
    // public override System.Void DeserializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x1C21ED4
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::DeserializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    void DeserializeExtraInfo(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public override System.Void SerializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x1C22254
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::SerializeExtraInfo(Pathfinding.Serialization.GraphSerializationContext ctx)
    void SerializeExtraInfo(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public override System.Void DeserializeSettingsCompatibility(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x1C2253C
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::DeserializeSettingsCompatibility(Pathfinding.Serialization.GraphSerializationContext ctx)
    void DeserializeSettingsCompatibility(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public System.Void .ctor()
    // Offset: 0x1C22684
    // Implemented from: Pathfinding.NavGraph
    // Base method: System.Void NavGraph::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavMeshGraph* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::NavMeshGraph::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavMeshGraph*, creationType>()));
    }
  }; // Pathfinding.NavMeshGraph
  #pragma pack(pop)
  static check_size<sizeof(NavMeshGraph), 272 + sizeof(::ArrayW<int>)> __Pathfinding_NavMeshGraphSizeCheck;
  static_assert(sizeof(NavMeshGraph) == 0x118);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::get_TriNodes
// Il2CppName: get_TriNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Pathfinding::TriangleMeshNode*> (Pathfinding::NavMeshGraph::*)()>(&Pathfinding::NavMeshGraph::get_TriNodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "get_TriNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::GetVertex
// Il2CppName: GetVertex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::Int3 (Pathfinding::NavMeshGraph::*)(int)>(&Pathfinding::NavMeshGraph::GetVertex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "GetVertex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::GetVertexArrayIndex
// Il2CppName: GetVertexArrayIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::NavMeshGraph::*)(int)>(&Pathfinding::NavMeshGraph::GetVertexArrayIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "GetVertexArrayIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::GetTileCoordinates
// Il2CppName: GetTileCoordinates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)(int, ByRef<int>, ByRef<int>)>(&Pathfinding::NavMeshGraph::GetTileCoordinates)> {
  static const MethodInfo* get() {
    static auto* tileIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* z = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "GetTileCoordinates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tileIndex, x, z});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::get_bbTree
// Il2CppName: get_bbTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::BBTree* (Pathfinding::NavMeshGraph::*)()>(&Pathfinding::NavMeshGraph::get_bbTree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "get_bbTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::set_bbTree
// Il2CppName: set_bbTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)(::Pathfinding::BBTree*)>(&Pathfinding::NavMeshGraph::set_bbTree)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Pathfinding", "BBTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "set_bbTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::get_vertices
// Il2CppName: get_vertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Pathfinding::Int3> (Pathfinding::NavMeshGraph::*)()>(&Pathfinding::NavMeshGraph::get_vertices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "get_vertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::set_vertices
// Il2CppName: set_vertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)(::ArrayW<::Pathfinding::Int3>)>(&Pathfinding::NavMeshGraph::set_vertices)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "set_vertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::GenerateMatrix
// Il2CppName: GenerateMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)()>(&Pathfinding::NavMeshGraph::GenerateMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "GenerateMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::GetNearest
// Il2CppName: GetNearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfo (*)(::Pathfinding::NavMeshGraph*, ::ArrayW<::Pathfinding::GraphNode*>, ::UnityEngine::Vector3, ::Pathfinding::NNConstraint*, bool)>(&Pathfinding::NavMeshGraph::GetNearest)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavMeshGraph")->byval_arg;
    static auto* nodes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode"), 1)->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* accurateNearestNode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "GetNearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, nodes, position, constraint, accurateNearestNode});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::GetNearestForce
// Il2CppName: GetNearestForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfo (*)(::Pathfinding::NavGraph*, ::Pathfinding::INavmeshHolder*, ::UnityEngine::Vector3, ::Pathfinding::NNConstraint*, bool)>(&Pathfinding::NavMeshGraph::GetNearestForce)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph")->byval_arg;
    static auto* navmesh = &::il2cpp_utils::GetClassFromName("Pathfinding", "INavmeshHolder")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* accurateNearestNode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "GetNearestForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, navmesh, position, constraint, accurateNearestNode});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::GetNearestForceBoth
// Il2CppName: GetNearestForceBoth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfo (*)(::Pathfinding::NavGraph*, ::Pathfinding::INavmeshHolder*, ::UnityEngine::Vector3, ::Pathfinding::NNConstraint*, bool)>(&Pathfinding::NavMeshGraph::GetNearestForceBoth)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavGraph")->byval_arg;
    static auto* navmesh = &::il2cpp_utils::GetClassFromName("Pathfinding", "INavmeshHolder")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* accurateNearestNode = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "GetNearestForceBoth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph, navmesh, position, constraint, accurateNearestNode});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::CanUpdateAsync
// Il2CppName: CanUpdateAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::GraphUpdateThreading (Pathfinding::NavMeshGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::NavMeshGraph::CanUpdateAsync)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "CanUpdateAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::UpdateAreaInit
// Il2CppName: UpdateAreaInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::NavMeshGraph::UpdateAreaInit)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "UpdateAreaInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::UpdateArea
// Il2CppName: UpdateArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)(::Pathfinding::GraphUpdateObject*)>(&Pathfinding::NavMeshGraph::UpdateArea)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "UpdateArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::UpdateArea
// Il2CppName: UpdateArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::GraphUpdateObject*, ::Pathfinding::INavmesh*)>(&Pathfinding::NavMeshGraph::UpdateArea)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphUpdateObject")->byval_arg;
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "INavmesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "UpdateArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o, graph});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::ClosestPointOnNode
// Il2CppName: ClosestPointOnNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::Pathfinding::TriangleMeshNode*, ::ArrayW<::Pathfinding::Int3>, ::UnityEngine::Vector3)>(&Pathfinding::NavMeshGraph::ClosestPointOnNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "TriangleMeshNode")->byval_arg;
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "ClosestPointOnNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, vertices, pos});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::ContainsPoint
// Il2CppName: ContainsPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::NavMeshGraph::*)(::Pathfinding::TriangleMeshNode*, ::UnityEngine::Vector3)>(&Pathfinding::NavMeshGraph::ContainsPoint)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "TriangleMeshNode")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "ContainsPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, pos});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::ContainsPoint
// Il2CppName: ContainsPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::TriangleMeshNode*, ::UnityEngine::Vector3, ::ArrayW<::Pathfinding::Int3>)>(&Pathfinding::NavMeshGraph::ContainsPoint)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "TriangleMeshNode")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "ContainsPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, pos, vertices});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::ScanInternal
// Il2CppName: ScanInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)(::StringW)>(&Pathfinding::NavMeshGraph::ScanInternal)> {
  static const MethodInfo* get() {
    static auto* objMeshPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "ScanInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objMeshPath});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::GenerateNodes
// Il2CppName: GenerateNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<int>, ByRef<::ArrayW<::UnityEngine::Vector3>>, ByRef<::ArrayW<::Pathfinding::Int3>>)>(&Pathfinding::NavMeshGraph::GenerateNodes)> {
  static const MethodInfo* get() {
    static auto* vectorVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* triangles = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* originalVertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->this_arg;
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Pathfinding", "Int3"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "GenerateNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vectorVertices, triangles, originalVertices, vertices});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::RebuildBBTree
// Il2CppName: RebuildBBTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Pathfinding::NavMeshGraph*)>(&Pathfinding::NavMeshGraph::RebuildBBTree)> {
  static const MethodInfo* get() {
    static auto* graph = &::il2cpp_utils::GetClassFromName("Pathfinding", "NavMeshGraph")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "RebuildBBTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{graph});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::PostProcess
// Il2CppName: PostProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)()>(&Pathfinding::NavMeshGraph::PostProcess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "PostProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::GetNodes
// Il2CppName: GetNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)(::Pathfinding::GraphNodeDelegateCancelable*)>(&Pathfinding::NavMeshGraph::GetNodes)> {
  static const MethodInfo* get() {
    static auto* del = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNodeDelegateCancelable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "GetNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{del});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)()>(&Pathfinding::NavMeshGraph::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::RelocateNodes
// Il2CppName: RelocateNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)(::UnityEngine::Matrix4x4, ::UnityEngine::Matrix4x4)>(&Pathfinding::NavMeshGraph::RelocateNodes)> {
  static const MethodInfo* get() {
    static auto* oldMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* newMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "RelocateNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldMatrix, newMatrix});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::GetNearest
// Il2CppName: GetNearest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfo (Pathfinding::NavMeshGraph::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*, ::Pathfinding::GraphNode*)>(&Pathfinding::NavMeshGraph::GetNearest)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "GetNearest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint, hint});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::GetNearestForce
// Il2CppName: GetNearestForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Pathfinding::NNInfo (Pathfinding::NavMeshGraph::*)(::UnityEngine::Vector3, ::Pathfinding::NNConstraint*)>(&Pathfinding::NavMeshGraph::GetNearestForce)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("Pathfinding", "NNConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "GetNearestForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, constraint});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::ScanInternal
// Il2CppName: ScanInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)(::Pathfinding::OnScanStatus*)>(&Pathfinding::NavMeshGraph::ScanInternal)> {
  static const MethodInfo* get() {
    static auto* statusCallback = &::il2cpp_utils::GetClassFromName("Pathfinding", "OnScanStatus")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "ScanInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statusCallback});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)(bool)>(&Pathfinding::NavMeshGraph::OnDrawGizmos)> {
  static const MethodInfo* get() {
    static auto* drawNodes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{drawNodes});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::DeserializeExtraInfo
// Il2CppName: DeserializeExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::NavMeshGraph::DeserializeExtraInfo)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "DeserializeExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::SerializeExtraInfo
// Il2CppName: SerializeExtraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::NavMeshGraph::SerializeExtraInfo)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "SerializeExtraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::DeserializeSettingsCompatibility
// Il2CppName: DeserializeSettingsCompatibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::NavMeshGraph::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::NavMeshGraph::DeserializeSettingsCompatibility)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavMeshGraph*), "DeserializeSettingsCompatibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::NavMeshGraph::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
