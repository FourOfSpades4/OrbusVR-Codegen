// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: AstarSplines
  class AstarSplines;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::AstarSplines);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::AstarSplines*, "Pathfinding", "AstarSplines");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.AstarSplines
  // [TokenAttribute] Offset: FFFFFFFF
  class AstarSplines : public ::Il2CppObject {
    public:
    // static public UnityEngine.Vector3 CatmullRom(UnityEngine.Vector3 previous, UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Vector3 next, System.Single elapsedTime)
    // Offset: 0x1C056D4
    static ::UnityEngine::Vector3 CatmullRom(::UnityEngine::Vector3 previous, ::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::UnityEngine::Vector3 next, float elapsedTime);
    // static public UnityEngine.Vector3 CatmullRomOLD(UnityEngine.Vector3 previous, UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Vector3 next, System.Single elapsedTime)
    // Offset: 0x1C058B4
    static ::UnityEngine::Vector3 CatmullRomOLD(::UnityEngine::Vector3 previous, ::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::UnityEngine::Vector3 next, float elapsedTime);
    // static public UnityEngine.Vector3 CubicBezier(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3, System.Single t)
    // Offset: 0x1C058E0
    static ::UnityEngine::Vector3 CubicBezier(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3, float t);
  }; // Pathfinding.AstarSplines
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::AstarSplines::CatmullRom
// Il2CppName: CatmullRom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Pathfinding::AstarSplines::CatmullRom)> {
  static const MethodInfo* get() {
    static auto* previous = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* next = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* elapsedTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AstarSplines*), "CatmullRom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previous, start, end, next, elapsedTime});
  }
};
// Writing MetadataGetter for method: Pathfinding::AstarSplines::CatmullRomOLD
// Il2CppName: CatmullRomOLD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Pathfinding::AstarSplines::CatmullRomOLD)> {
  static const MethodInfo* get() {
    static auto* previous = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* next = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* elapsedTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AstarSplines*), "CatmullRomOLD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previous, start, end, next, elapsedTime});
  }
};
// Writing MetadataGetter for method: Pathfinding::AstarSplines::CubicBezier
// Il2CppName: CubicBezier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Pathfinding::AstarSplines::CubicBezier)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AstarSplines*), "CubicBezier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, p2, p3, t});
  }
};
