// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.MonoModifier
#include "Pathfinding/MonoModifier.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: Path
  class Path;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Random
  class Random;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: AlternativePath
  class AlternativePath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::AlternativePath);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::AlternativePath*, "Pathfinding", "AlternativePath");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.AlternativePath
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: AD837C
  // [AddComponentMenu] Offset: AD837C
  class AlternativePath : public ::Pathfinding::MonoModifier {
    public:
    public:
    // public System.Int32 penalty
    // Size: 0x4
    // Offset: 0x20
    int penalty;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 randomStep
    // Size: 0x4
    // Offset: 0x24
    int randomStep;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Pathfinding.GraphNode[] prevNodes
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::Pathfinding::GraphNode*> prevNodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::GraphNode*>) == 0x8);
    // private System.Int32 prevSeed
    // Size: 0x4
    // Offset: 0x30
    int prevSeed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 prevPenalty
    // Size: 0x4
    // Offset: 0x34
    int prevPenalty;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean waitingForApply
    // Size: 0x1
    // Offset: 0x38
    bool waitingForApply;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: waitingForApply and: lockObject
    char __padding5[0x7] = {};
    // private readonly System.Object lockObject
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppObject* lockObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Random rnd
    // Size: 0x8
    // Offset: 0x48
    ::System::Random* rnd;
    // Field size check
    static_assert(sizeof(::System::Random*) == 0x8);
    // private readonly System.Random seedGenerator
    // Size: 0x8
    // Offset: 0x50
    ::System::Random* seedGenerator;
    // Field size check
    static_assert(sizeof(::System::Random*) == 0x8);
    // private System.Boolean destroyed
    // Size: 0x1
    // Offset: 0x58
    bool destroyed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: destroyed and: toBeApplied
    char __padding9[0x7] = {};
    // private Pathfinding.GraphNode[] toBeApplied
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::Pathfinding::GraphNode*> toBeApplied;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::GraphNode*>) == 0x8);
    public:
    // Get instance field reference: public System.Int32 penalty
    [[deprecated("Use field access instead!")]] int& dyn_penalty();
    // Get instance field reference: public System.Int32 randomStep
    [[deprecated("Use field access instead!")]] int& dyn_randomStep();
    // Get instance field reference: private Pathfinding.GraphNode[] prevNodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::GraphNode*>& dyn_prevNodes();
    // Get instance field reference: private System.Int32 prevSeed
    [[deprecated("Use field access instead!")]] int& dyn_prevSeed();
    // Get instance field reference: private System.Int32 prevPenalty
    [[deprecated("Use field access instead!")]] int& dyn_prevPenalty();
    // Get instance field reference: private System.Boolean waitingForApply
    [[deprecated("Use field access instead!")]] bool& dyn_waitingForApply();
    // Get instance field reference: private readonly System.Object lockObject
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_lockObject();
    // Get instance field reference: private System.Random rnd
    [[deprecated("Use field access instead!")]] ::System::Random*& dyn_rnd();
    // Get instance field reference: private readonly System.Random seedGenerator
    [[deprecated("Use field access instead!")]] ::System::Random*& dyn_seedGenerator();
    // Get instance field reference: private System.Boolean destroyed
    [[deprecated("Use field access instead!")]] bool& dyn_destroyed();
    // Get instance field reference: private Pathfinding.GraphNode[] toBeApplied
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::GraphNode*>& dyn_toBeApplied();
    // private System.Void ClearOnDestroy(Pathfinding.Path p)
    // Offset: 0x1031DC0
    void ClearOnDestroy(::Pathfinding::Path* p);
    // private System.Void InversePrevious()
    // Offset: 0x1031F70
    void InversePrevious();
    // private System.Void ApplyNow(Pathfinding.Path somePath)
    // Offset: 0x10321EC
    void ApplyNow(::Pathfinding::Path* somePath);
    // public override System.Int32 get_Order()
    // Offset: 0x10319AC
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Int32 MonoModifier::get_Order()
    int get_Order();
    // public override System.Void Apply(Pathfinding.Path p)
    // Offset: 0x10319B4
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Void MonoModifier::Apply(Pathfinding.Path p)
    void Apply(::Pathfinding::Path* p);
    // public System.Void OnDestroy()
    // Offset: 0x1031BEC
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Void MonoModifier::OnDestroy()
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x1032568
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Void MonoModifier::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AlternativePath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::AlternativePath::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AlternativePath*, creationType>()));
    }
  }; // Pathfinding.AlternativePath
  #pragma pack(pop)
  static check_size<sizeof(AlternativePath), 96 + sizeof(::ArrayW<::Pathfinding::GraphNode*>)> __Pathfinding_AlternativePathSizeCheck;
  static_assert(sizeof(AlternativePath) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::AlternativePath::ClearOnDestroy
// Il2CppName: ClearOnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AlternativePath::*)(::Pathfinding::Path*)>(&Pathfinding::AlternativePath::ClearOnDestroy)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AlternativePath*), "ClearOnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::AlternativePath::InversePrevious
// Il2CppName: InversePrevious
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AlternativePath::*)()>(&Pathfinding::AlternativePath::InversePrevious)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AlternativePath*), "InversePrevious", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AlternativePath::ApplyNow
// Il2CppName: ApplyNow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AlternativePath::*)(::Pathfinding::Path*)>(&Pathfinding::AlternativePath::ApplyNow)> {
  static const MethodInfo* get() {
    static auto* somePath = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AlternativePath*), "ApplyNow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{somePath});
  }
};
// Writing MetadataGetter for method: Pathfinding::AlternativePath::get_Order
// Il2CppName: get_Order
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::AlternativePath::*)()>(&Pathfinding::AlternativePath::get_Order)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AlternativePath*), "get_Order", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AlternativePath::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AlternativePath::*)(::Pathfinding::Path*)>(&Pathfinding::AlternativePath::Apply)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AlternativePath*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::AlternativePath::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::AlternativePath::*)()>(&Pathfinding::AlternativePath::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::AlternativePath*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::AlternativePath::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
