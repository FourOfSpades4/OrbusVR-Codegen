// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.MonoModifier
#include "Pathfinding/MonoModifier.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: Path
  class Path;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: SimpleSmoothModifier
  class SimpleSmoothModifier;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::SimpleSmoothModifier);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::SimpleSmoothModifier*, "Pathfinding", "SimpleSmoothModifier");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.SimpleSmoothModifier
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: AD84E8
  // [RequireComponent] Offset: AD84E8
  // [HelpURLAttribute] Offset: AD84E8
  class SimpleSmoothModifier : public ::Pathfinding::MonoModifier {
    public:
    // Nested type: ::Pathfinding::SimpleSmoothModifier::SmoothType
    struct SmoothType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Pathfinding.SimpleSmoothModifier/SmoothType
    // [TokenAttribute] Offset: FFFFFFFF
    struct SmoothType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SmoothType
      constexpr SmoothType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Pathfinding.SimpleSmoothModifier/SmoothType Simple
      static constexpr const int Simple = 0;
      // Get static field: static public Pathfinding.SimpleSmoothModifier/SmoothType Simple
      static ::Pathfinding::SimpleSmoothModifier::SmoothType _get_Simple();
      // Set static field: static public Pathfinding.SimpleSmoothModifier/SmoothType Simple
      static void _set_Simple(::Pathfinding::SimpleSmoothModifier::SmoothType value);
      // static field const value: static public Pathfinding.SimpleSmoothModifier/SmoothType Bezier
      static constexpr const int Bezier = 1;
      // Get static field: static public Pathfinding.SimpleSmoothModifier/SmoothType Bezier
      static ::Pathfinding::SimpleSmoothModifier::SmoothType _get_Bezier();
      // Set static field: static public Pathfinding.SimpleSmoothModifier/SmoothType Bezier
      static void _set_Bezier(::Pathfinding::SimpleSmoothModifier::SmoothType value);
      // static field const value: static public Pathfinding.SimpleSmoothModifier/SmoothType OffsetSimple
      static constexpr const int OffsetSimple = 2;
      // Get static field: static public Pathfinding.SimpleSmoothModifier/SmoothType OffsetSimple
      static ::Pathfinding::SimpleSmoothModifier::SmoothType _get_OffsetSimple();
      // Set static field: static public Pathfinding.SimpleSmoothModifier/SmoothType OffsetSimple
      static void _set_OffsetSimple(::Pathfinding::SimpleSmoothModifier::SmoothType value);
      // static field const value: static public Pathfinding.SimpleSmoothModifier/SmoothType CurvedNonuniform
      static constexpr const int CurvedNonuniform = 3;
      // Get static field: static public Pathfinding.SimpleSmoothModifier/SmoothType CurvedNonuniform
      static ::Pathfinding::SimpleSmoothModifier::SmoothType _get_CurvedNonuniform();
      // Set static field: static public Pathfinding.SimpleSmoothModifier/SmoothType CurvedNonuniform
      static void _set_CurvedNonuniform(::Pathfinding::SimpleSmoothModifier::SmoothType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Pathfinding.SimpleSmoothModifier/SmoothType
    #pragma pack(pop)
    static check_size<sizeof(SimpleSmoothModifier::SmoothType), 0 + sizeof(int)> __Pathfinding_SimpleSmoothModifier_SmoothTypeSizeCheck;
    static_assert(sizeof(SimpleSmoothModifier::SmoothType) == 0x4);
    public:
    // public Pathfinding.SimpleSmoothModifier/SmoothType smoothType
    // Size: 0x4
    // Offset: 0x20
    ::Pathfinding::SimpleSmoothModifier::SmoothType smoothType;
    // Field size check
    static_assert(sizeof(::Pathfinding::SimpleSmoothModifier::SmoothType) == 0x4);
    // [TooltipAttribute] Offset: 0xAE5F44
    // public System.Int32 subdivisions
    // Size: 0x4
    // Offset: 0x24
    int subdivisions;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0xAE5F7C
    // public System.Int32 iterations
    // Size: 0x4
    // Offset: 0x28
    int iterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0xAE5FB4
    // public System.Single strength
    // Size: 0x4
    // Offset: 0x2C
    float strength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAE5FEC
    // public System.Boolean uniformLength
    // Size: 0x1
    // Offset: 0x30
    bool uniformLength;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: uniformLength and: maxSegmentLength
    char __padding4[0x3] = {};
    // [TooltipAttribute] Offset: 0xAE6024
    // public System.Single maxSegmentLength
    // Size: 0x4
    // Offset: 0x34
    float maxSegmentLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAE605C
    // public System.Single bezierTangentLength
    // Size: 0x4
    // Offset: 0x38
    float bezierTangentLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAE6094
    // public System.Single offset
    // Size: 0x4
    // Offset: 0x3C
    float offset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xAE60CC
    // public System.Single factor
    // Size: 0x4
    // Offset: 0x40
    float factor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public Pathfinding.SimpleSmoothModifier/SmoothType smoothType
    [[deprecated("Use field access instead!")]] ::Pathfinding::SimpleSmoothModifier::SmoothType& dyn_smoothType();
    // Get instance field reference: public System.Int32 subdivisions
    [[deprecated("Use field access instead!")]] int& dyn_subdivisions();
    // Get instance field reference: public System.Int32 iterations
    [[deprecated("Use field access instead!")]] int& dyn_iterations();
    // Get instance field reference: public System.Single strength
    [[deprecated("Use field access instead!")]] float& dyn_strength();
    // Get instance field reference: public System.Boolean uniformLength
    [[deprecated("Use field access instead!")]] bool& dyn_uniformLength();
    // Get instance field reference: public System.Single maxSegmentLength
    [[deprecated("Use field access instead!")]] float& dyn_maxSegmentLength();
    // Get instance field reference: public System.Single bezierTangentLength
    [[deprecated("Use field access instead!")]] float& dyn_bezierTangentLength();
    // Get instance field reference: public System.Single offset
    [[deprecated("Use field access instead!")]] float& dyn_offset();
    // Get instance field reference: public System.Single factor
    [[deprecated("Use field access instead!")]] float& dyn_factor();
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> CurvedNonuniform(System.Collections.Generic.List`1<UnityEngine.Vector3> path)
    // Offset: 0xE394C4
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* CurvedNonuniform(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* path);
    // static public UnityEngine.Vector3 GetPointOnCubic(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 tan1, UnityEngine.Vector3 tan2, System.Single t)
    // Offset: 0xE39C74
    static ::UnityEngine::Vector3 GetPointOnCubic(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, ::UnityEngine::Vector3 tan1, ::UnityEngine::Vector3 tan2, float t);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> SmoothOffsetSimple(System.Collections.Generic.List`1<UnityEngine.Vector3> path)
    // Offset: 0xE38AEC
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* SmoothOffsetSimple(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* path);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> SmoothSimple(System.Collections.Generic.List`1<UnityEngine.Vector3> path)
    // Offset: 0xE37E30
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* SmoothSimple(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* path);
    // public System.Collections.Generic.List`1<UnityEngine.Vector3> SmoothBezier(System.Collections.Generic.List`1<UnityEngine.Vector3> path)
    // Offset: 0xE38630
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* SmoothBezier(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* path);
    // public override System.Int32 get_Order()
    // Offset: 0xE37CEC
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Int32 MonoModifier::get_Order()
    int get_Order();
    // public override System.Void Apply(Pathfinding.Path p)
    // Offset: 0xE37CF4
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Void MonoModifier::Apply(Pathfinding.Path p)
    void Apply(::Pathfinding::Path* p);
    // public System.Void .ctor()
    // Offset: 0xE39EC0
    // Implemented from: Pathfinding.MonoModifier
    // Base method: System.Void MonoModifier::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimpleSmoothModifier* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::SimpleSmoothModifier::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimpleSmoothModifier*, creationType>()));
    }
  }; // Pathfinding.SimpleSmoothModifier
  #pragma pack(pop)
  static check_size<sizeof(SimpleSmoothModifier), 64 + sizeof(float)> __Pathfinding_SimpleSmoothModifierSizeCheck;
  static_assert(sizeof(SimpleSmoothModifier) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::SimpleSmoothModifier::SmoothType, "Pathfinding", "SimpleSmoothModifier/SmoothType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::SimpleSmoothModifier::CurvedNonuniform
// Il2CppName: CurvedNonuniform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>* (Pathfinding::SimpleSmoothModifier::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&Pathfinding::SimpleSmoothModifier::CurvedNonuniform)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::SimpleSmoothModifier*), "CurvedNonuniform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::SimpleSmoothModifier::GetPointOnCubic
// Il2CppName: GetPointOnCubic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Pathfinding::SimpleSmoothModifier::GetPointOnCubic)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* tan1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* tan2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::SimpleSmoothModifier*), "GetPointOnCubic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, tan1, tan2, t});
  }
};
// Writing MetadataGetter for method: Pathfinding::SimpleSmoothModifier::SmoothOffsetSimple
// Il2CppName: SmoothOffsetSimple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>* (Pathfinding::SimpleSmoothModifier::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&Pathfinding::SimpleSmoothModifier::SmoothOffsetSimple)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::SimpleSmoothModifier*), "SmoothOffsetSimple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::SimpleSmoothModifier::SmoothSimple
// Il2CppName: SmoothSimple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>* (Pathfinding::SimpleSmoothModifier::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&Pathfinding::SimpleSmoothModifier::SmoothSimple)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::SimpleSmoothModifier*), "SmoothSimple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::SimpleSmoothModifier::SmoothBezier
// Il2CppName: SmoothBezier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>* (Pathfinding::SimpleSmoothModifier::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&Pathfinding::SimpleSmoothModifier::SmoothBezier)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::SimpleSmoothModifier*), "SmoothBezier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Pathfinding::SimpleSmoothModifier::get_Order
// Il2CppName: get_Order
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::SimpleSmoothModifier::*)()>(&Pathfinding::SimpleSmoothModifier::get_Order)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::SimpleSmoothModifier*), "get_Order", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::SimpleSmoothModifier::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::SimpleSmoothModifier::*)(::Pathfinding::Path*)>(&Pathfinding::SimpleSmoothModifier::Apply)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::SimpleSmoothModifier*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Pathfinding::SimpleSmoothModifier::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
