// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: AIPath
#include "GlobalNamespace/AIPath.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animation
  class Animation;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: MineBotAI
  class MineBotAI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::MineBotAI);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::MineBotAI*, "Pathfinding", "MineBotAI");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0xDC
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.MineBotAI
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD821C
  // [HelpURLAttribute] Offset: AD821C
  class MineBotAI : public ::GlobalNamespace::AIPath {
    public:
    // Writing base type padding for base size: 0xB4 to desired offset: 0xB8
    char ___base_padding[0x4] = {};
    public:
    // public UnityEngine.Animation anim
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Animation* anim;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animation*) == 0x8);
    // public System.Single sleepVelocity
    // Size: 0x4
    // Offset: 0xC0
    float sleepVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single animationSpeed
    // Size: 0x4
    // Offset: 0xC4
    float animationSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.GameObject endOfPathEffect
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::GameObject* endOfPathEffect;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // protected UnityEngine.Vector3 lastTarget
    // Size: 0xC
    // Offset: 0xD0
    ::UnityEngine::Vector3 lastTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public UnityEngine.Animation anim
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animation*& dyn_anim();
    // Get instance field reference: public System.Single sleepVelocity
    [[deprecated("Use field access instead!")]] float& dyn_sleepVelocity();
    // Get instance field reference: public System.Single animationSpeed
    [[deprecated("Use field access instead!")]] float& dyn_animationSpeed();
    // Get instance field reference: public UnityEngine.GameObject endOfPathEffect
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_endOfPathEffect();
    // Get instance field reference: protected UnityEngine.Vector3 lastTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastTarget();
    // public System.Void Start()
    // Offset: 0x1C1C768
    // Implemented from: AIPath
    // Base method: System.Void AIPath::Start()
    void Start();
    // public override System.Void OnTargetReached()
    // Offset: 0x1C1C8F8
    // Implemented from: AIPath
    // Base method: System.Void AIPath::OnTargetReached()
    void OnTargetReached();
    // public override UnityEngine.Vector3 GetFeetPosition()
    // Offset: 0x1C1CAD8
    // Implemented from: AIPath
    // Base method: UnityEngine.Vector3 AIPath::GetFeetPosition()
    ::UnityEngine::Vector3 GetFeetPosition();
    // protected System.Void Update()
    // Offset: 0x1C1CB08
    // Implemented from: AIPath
    // Base method: System.Void AIPath::Update()
    void Update();
    // public System.Void .ctor()
    // Offset: 0x1C1CDD8
    // Implemented from: AIPath
    // Base method: System.Void AIPath::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MineBotAI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::MineBotAI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MineBotAI*, creationType>()));
    }
  }; // Pathfinding.MineBotAI
  #pragma pack(pop)
  static check_size<sizeof(MineBotAI), 208 + sizeof(::UnityEngine::Vector3)> __Pathfinding_MineBotAISizeCheck;
  static_assert(sizeof(MineBotAI) == 0xDC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::MineBotAI::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MineBotAI::*)()>(&Pathfinding::MineBotAI::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MineBotAI*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::MineBotAI::OnTargetReached
// Il2CppName: OnTargetReached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MineBotAI::*)()>(&Pathfinding::MineBotAI::OnTargetReached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MineBotAI*), "OnTargetReached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::MineBotAI::GetFeetPosition
// Il2CppName: GetFeetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Pathfinding::MineBotAI::*)()>(&Pathfinding::MineBotAI::GetFeetPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MineBotAI*), "GetFeetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::MineBotAI::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::MineBotAI::*)()>(&Pathfinding::MineBotAI::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::MineBotAI*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::MineBotAI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
