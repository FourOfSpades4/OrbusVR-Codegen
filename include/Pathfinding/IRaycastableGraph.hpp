// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: GraphHitInfo
  struct GraphHitInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: IRaycastableGraph
  class IRaycastableGraph;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::IRaycastableGraph);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::IRaycastableGraph*, "Pathfinding", "IRaycastableGraph");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.IRaycastableGraph
  // [TokenAttribute] Offset: FFFFFFFF
  class IRaycastableGraph {
    public:
    // public System.Boolean Linecast(UnityEngine.Vector3 start, UnityEngine.Vector3 end)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Linecast(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end);
    // public System.Boolean Linecast(UnityEngine.Vector3 start, UnityEngine.Vector3 end, Pathfinding.GraphNode hint)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Linecast(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::Pathfinding::GraphNode* hint);
    // public System.Boolean Linecast(UnityEngine.Vector3 start, UnityEngine.Vector3 end, Pathfinding.GraphNode hint, out Pathfinding.GraphHitInfo hit)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Linecast(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::Pathfinding::GraphNode* hint, ByRef<::Pathfinding::GraphHitInfo> hit);
    // public System.Boolean Linecast(UnityEngine.Vector3 start, UnityEngine.Vector3 end, Pathfinding.GraphNode hint, out Pathfinding.GraphHitInfo hit, System.Collections.Generic.List`1<Pathfinding.GraphNode> trace)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Linecast(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::Pathfinding::GraphNode* hint, ByRef<::Pathfinding::GraphHitInfo> hit, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* trace);
  }; // Pathfinding.IRaycastableGraph
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::IRaycastableGraph::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::IRaycastableGraph::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Pathfinding::IRaycastableGraph::Linecast)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::IRaycastableGraph*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end});
  }
};
// Writing MetadataGetter for method: Pathfinding::IRaycastableGraph::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::IRaycastableGraph::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::GraphNode*)>(&Pathfinding::IRaycastableGraph::Linecast)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::IRaycastableGraph*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, hint});
  }
};
// Writing MetadataGetter for method: Pathfinding::IRaycastableGraph::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::IRaycastableGraph::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::GraphNode*, ByRef<::Pathfinding::GraphHitInfo>)>(&Pathfinding::IRaycastableGraph::Linecast)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphHitInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::IRaycastableGraph*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, hint, hit});
  }
};
// Writing MetadataGetter for method: Pathfinding::IRaycastableGraph::Linecast
// Il2CppName: Linecast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::IRaycastableGraph::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::Pathfinding::GraphNode*, ByRef<::Pathfinding::GraphHitInfo>, ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*)>(&Pathfinding::IRaycastableGraph::Linecast)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* hint = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphHitInfo")->this_arg;
    static auto* trace = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::IRaycastableGraph*), "Linecast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, hint, hit, trace});
  }
};
