// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.NavGraph
#include "Pathfinding/NavGraph.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: NNConstraint
  class NNConstraint;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::NavGraph::$$c__DisplayClass16_0);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::NavGraph::$$c__DisplayClass16_0*, "Pathfinding", "NavGraph/<>c__DisplayClass16_0");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.NavGraph/<>c__DisplayClass16_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: AD82FC
  class NavGraph::$$c__DisplayClass16_0 : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Vector3 position
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single minDist
    // Size: 0x4
    // Offset: 0x1C
    float minDist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.GraphNode minNode
    // Size: 0x8
    // Offset: 0x20
    ::Pathfinding::GraphNode* minNode;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    // public System.Single minConstDist
    // Size: 0x4
    // Offset: 0x28
    float minConstDist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxDistSqr
    // Size: 0x4
    // Offset: 0x2C
    float maxDistSqr;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Pathfinding.NNConstraint constraint
    // Size: 0x8
    // Offset: 0x30
    ::Pathfinding::NNConstraint* constraint;
    // Field size check
    static_assert(sizeof(::Pathfinding::NNConstraint*) == 0x8);
    // public Pathfinding.GraphNode minConstNode
    // Size: 0x8
    // Offset: 0x38
    ::Pathfinding::GraphNode* minConstNode;
    // Field size check
    static_assert(sizeof(::Pathfinding::GraphNode*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Vector3 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
    // Get instance field reference: public System.Single minDist
    [[deprecated("Use field access instead!")]] float& dyn_minDist();
    // Get instance field reference: public Pathfinding.GraphNode minNode
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_minNode();
    // Get instance field reference: public System.Single minConstDist
    [[deprecated("Use field access instead!")]] float& dyn_minConstDist();
    // Get instance field reference: public System.Single maxDistSqr
    [[deprecated("Use field access instead!")]] float& dyn_maxDistSqr();
    // Get instance field reference: public Pathfinding.NNConstraint constraint
    [[deprecated("Use field access instead!")]] ::Pathfinding::NNConstraint*& dyn_constraint();
    // Get instance field reference: public Pathfinding.GraphNode minConstNode
    [[deprecated("Use field access instead!")]] ::Pathfinding::GraphNode*& dyn_minConstNode();
    // public System.Void .ctor()
    // Offset: 0x1C1D88C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavGraph::$$c__DisplayClass16_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::NavGraph::$$c__DisplayClass16_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavGraph::$$c__DisplayClass16_0*, creationType>()));
    }
    // System.Boolean <GetNearest>b__0(Pathfinding.GraphNode node)
    // Offset: 0x1C1E2BC
    bool $GetNearest$b__0(::Pathfinding::GraphNode* node);
  }; // Pathfinding.NavGraph/<>c__DisplayClass16_0
  #pragma pack(pop)
  static check_size<sizeof(NavGraph::$$c__DisplayClass16_0), 56 + sizeof(::Pathfinding::GraphNode*)> __Pathfinding_NavGraph_$$c__DisplayClass16_0SizeCheck;
  static_assert(sizeof(NavGraph::$$c__DisplayClass16_0) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::NavGraph::$$c__DisplayClass16_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::NavGraph::$$c__DisplayClass16_0::$GetNearest$b__0
// Il2CppName: <GetNearest>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::NavGraph::$$c__DisplayClass16_0::*)(::Pathfinding::GraphNode*)>(&Pathfinding::NavGraph::$$c__DisplayClass16_0::$GetNearest$b__0)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::NavGraph::$$c__DisplayClass16_0*), "<GetNearest>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
