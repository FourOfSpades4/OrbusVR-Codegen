// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNode
  class GraphNode;
  // Forward declaring type: IRaycastableGraph
  class IRaycastableGraph;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PathUtilities
  class PathUtilities;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::PathUtilities);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::PathUtilities*, "Pathfinding", "PathUtilities");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.PathUtilities
  // [TokenAttribute] Offset: FFFFFFFF
  class PathUtilities : public ::Il2CppObject {
    public:
    // Nested type: ::Pathfinding::PathUtilities::$$c__DisplayClass3_0
    class $$c__DisplayClass3_0;
    // Nested type: ::Pathfinding::PathUtilities::$$c__DisplayClass6_0
    class $$c__DisplayClass6_0;
    // Get static field: static private System.Collections.Generic.Queue`1<Pathfinding.GraphNode> BFSQueue
    static ::System::Collections::Generic::Queue_1<::Pathfinding::GraphNode*>* _get_BFSQueue();
    // Set static field: static private System.Collections.Generic.Queue`1<Pathfinding.GraphNode> BFSQueue
    static void _set_BFSQueue(::System::Collections::Generic::Queue_1<::Pathfinding::GraphNode*>* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<Pathfinding.GraphNode,System.Int32> BFSMap
    static ::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, int>* _get_BFSMap();
    // Set static field: static private System.Collections.Generic.Dictionary`2<Pathfinding.GraphNode,System.Int32> BFSMap
    static void _set_BFSMap(::System::Collections::Generic::Dictionary_2<::Pathfinding::GraphNode*, int>* value);
    // static public System.Boolean IsPathPossible(Pathfinding.GraphNode n1, Pathfinding.GraphNode n2)
    // Offset: 0x16ACE40
    static bool IsPathPossible(::Pathfinding::GraphNode* n1, ::Pathfinding::GraphNode* n2);
    // static public System.Boolean IsPathPossible(System.Collections.Generic.List`1<Pathfinding.GraphNode> nodes)
    // Offset: 0x16ACED8
    static bool IsPathPossible(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* nodes);
    // static public System.Boolean IsPathPossible(System.Collections.Generic.List`1<Pathfinding.GraphNode> nodes, System.Int32 tagMask)
    // Offset: 0x16AD034
    static bool IsPathPossible(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* nodes, int tagMask);
    // static public System.Collections.Generic.List`1<Pathfinding.GraphNode> GetReachableNodes(Pathfinding.GraphNode seed, System.Int32 tagMask)
    // Offset: 0x16AD1FC
    static ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* GetReachableNodes(::Pathfinding::GraphNode* seed, int tagMask);
    // static public System.Collections.Generic.List`1<Pathfinding.GraphNode> BFS(Pathfinding.GraphNode seed, System.Int32 depth, System.Int32 tagMask)
    // Offset: 0x16AD41C
    static ::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* BFS(::Pathfinding::GraphNode* seed, int depth, int tagMask);
    // static public System.Collections.Generic.List`1<UnityEngine.Vector3> GetSpiralPoints(System.Int32 count, System.Single clearance)
    // Offset: 0x16AD728
    static ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* GetSpiralPoints(int count, float clearance);
    // static private UnityEngine.Vector3 InvoluteOfCircle(System.Single a, System.Single t)
    // Offset: 0x16ADA2C
    static ::UnityEngine::Vector3 InvoluteOfCircle(float a, float t);
    // static public System.Void GetPointsAroundPointWorld(UnityEngine.Vector3 p, Pathfinding.IRaycastableGraph g, System.Collections.Generic.List`1<UnityEngine.Vector3> previousPoints, System.Single radius, System.Single clearanceRadius)
    // Offset: 0x16ADB14
    static void GetPointsAroundPointWorld(::UnityEngine::Vector3 p, ::Pathfinding::IRaycastableGraph* g, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* previousPoints, float radius, float clearanceRadius);
    // static public System.Void GetPointsAroundPoint(UnityEngine.Vector3 p, Pathfinding.IRaycastableGraph g, System.Collections.Generic.List`1<UnityEngine.Vector3> previousPoints, System.Single radius, System.Single clearanceRadius)
    // Offset: 0x16ADE1C
    static void GetPointsAroundPoint(::UnityEngine::Vector3 p, ::Pathfinding::IRaycastableGraph* g, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* previousPoints, float radius, float clearanceRadius);
    // static public System.Collections.Generic.List`1<UnityEngine.Vector3> GetPointsOnNodes(System.Collections.Generic.List`1<Pathfinding.GraphNode> nodes, System.Int32 count, System.Single clearanceRadius)
    // Offset: 0x16AE46C
    static ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* GetPointsOnNodes(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* nodes, int count, float clearanceRadius);
  }; // Pathfinding.PathUtilities
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::PathUtilities::IsPathPossible
// Il2CppName: IsPathPossible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Pathfinding::GraphNode*, ::Pathfinding::GraphNode*)>(&Pathfinding::PathUtilities::IsPathPossible)> {
  static const MethodInfo* get() {
    static auto* n1 = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* n2 = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathUtilities*), "IsPathPossible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n1, n2});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathUtilities::IsPathPossible
// Il2CppName: IsPathPossible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*)>(&Pathfinding::PathUtilities::IsPathPossible)> {
  static const MethodInfo* get() {
    static auto* nodes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathUtilities*), "IsPathPossible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodes});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathUtilities::IsPathPossible
// Il2CppName: IsPathPossible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*, int)>(&Pathfinding::PathUtilities::IsPathPossible)> {
  static const MethodInfo* get() {
    static auto* nodes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    static auto* tagMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathUtilities*), "IsPathPossible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodes, tagMask});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathUtilities::GetReachableNodes
// Il2CppName: GetReachableNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* (*)(::Pathfinding::GraphNode*, int)>(&Pathfinding::PathUtilities::GetReachableNodes)> {
  static const MethodInfo* get() {
    static auto* seed = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* tagMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathUtilities*), "GetReachableNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seed, tagMask});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathUtilities::BFS
// Il2CppName: BFS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>* (*)(::Pathfinding::GraphNode*, int, int)>(&Pathfinding::PathUtilities::BFS)> {
  static const MethodInfo* get() {
    static auto* seed = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tagMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathUtilities*), "BFS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seed, depth, tagMask});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathUtilities::GetSpiralPoints
// Il2CppName: GetSpiralPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>* (*)(int, float)>(&Pathfinding::PathUtilities::GetSpiralPoints)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* clearance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathUtilities*), "GetSpiralPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count, clearance});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathUtilities::InvoluteOfCircle
// Il2CppName: InvoluteOfCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(float, float)>(&Pathfinding::PathUtilities::InvoluteOfCircle)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathUtilities*), "InvoluteOfCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, t});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathUtilities::GetPointsAroundPointWorld
// Il2CppName: GetPointsAroundPointWorld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::Pathfinding::IRaycastableGraph*, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, float, float)>(&Pathfinding::PathUtilities::GetPointsAroundPointWorld)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* g = &::il2cpp_utils::GetClassFromName("Pathfinding", "IRaycastableGraph")->byval_arg;
    static auto* previousPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* clearanceRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathUtilities*), "GetPointsAroundPointWorld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, g, previousPoints, radius, clearanceRadius});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathUtilities::GetPointsAroundPoint
// Il2CppName: GetPointsAroundPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::Pathfinding::IRaycastableGraph*, ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*, float, float)>(&Pathfinding::PathUtilities::GetPointsAroundPoint)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* g = &::il2cpp_utils::GetClassFromName("Pathfinding", "IRaycastableGraph")->byval_arg;
    static auto* previousPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* clearanceRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathUtilities*), "GetPointsAroundPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p, g, previousPoints, radius, clearanceRadius});
  }
};
// Writing MetadataGetter for method: Pathfinding::PathUtilities::GetPointsOnNodes
// Il2CppName: GetPointsOnNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector3>* (*)(::System::Collections::Generic::List_1<::Pathfinding::GraphNode*>*, int, float)>(&Pathfinding::PathUtilities::GetPointsOnNodes)> {
  static const MethodInfo* get() {
    static auto* nodes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* clearanceRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::PathUtilities*), "GetPointsOnNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodes, count, clearanceRadius});
  }
};
