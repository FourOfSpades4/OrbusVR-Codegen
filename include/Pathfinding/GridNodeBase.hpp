// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Pathfinding.GraphNode
#include "Pathfinding/GraphNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AstarPath
  class AstarPath;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GraphNodeDelegate
  class GraphNodeDelegate;
  // Forward declaring type: Path
  class Path;
  // Forward declaring type: PathNode
  class PathNode;
  // Forward declaring type: PathHandler
  class PathHandler;
}
// Forward declaring namespace: Pathfinding::Serialization
namespace Pathfinding::Serialization {
  // Forward declaring type: GraphSerializationContext
  class GraphSerializationContext;
}
// Completed forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: GridNodeBase
  class GridNodeBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Pathfinding::GridNodeBase);
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::GridNodeBase*, "Pathfinding", "GridNodeBase");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Pathfinding.GridNodeBase
  // [TokenAttribute] Offset: FFFFFFFF
  class GridNodeBase : public ::Pathfinding::GraphNode {
    public:
    public:
    // protected System.Int32 nodeInGridIndex
    // Size: 0x4
    // Offset: 0x28
    int nodeInGridIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.UInt16 gridFlags
    // Size: 0x2
    // Offset: 0x2C
    uint16_t gridFlags;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: gridFlags and: connections
    char __padding1[0x2] = {};
    // public Pathfinding.GraphNode[] connections
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::Pathfinding::GraphNode*> connections;
    // Field size check
    static_assert(sizeof(::ArrayW<::Pathfinding::GraphNode*>) == 0x8);
    // public System.UInt32[] connectionCosts
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<uint> connectionCosts;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    public:
    // static field const value: static private System.Int32 GridFlagsWalkableErosionOffset
    static constexpr const int GridFlagsWalkableErosionOffset = 8;
    // Get static field: static private System.Int32 GridFlagsWalkableErosionOffset
    static int _get_GridFlagsWalkableErosionOffset();
    // Set static field: static private System.Int32 GridFlagsWalkableErosionOffset
    static void _set_GridFlagsWalkableErosionOffset(int value);
    // static field const value: static private System.Int32 GridFlagsWalkableErosionMask
    static constexpr const int GridFlagsWalkableErosionMask = 256;
    // Get static field: static private System.Int32 GridFlagsWalkableErosionMask
    static int _get_GridFlagsWalkableErosionMask();
    // Set static field: static private System.Int32 GridFlagsWalkableErosionMask
    static void _set_GridFlagsWalkableErosionMask(int value);
    // static field const value: static private System.Int32 GridFlagsWalkableTmpOffset
    static constexpr const int GridFlagsWalkableTmpOffset = 9;
    // Get static field: static private System.Int32 GridFlagsWalkableTmpOffset
    static int _get_GridFlagsWalkableTmpOffset();
    // Set static field: static private System.Int32 GridFlagsWalkableTmpOffset
    static void _set_GridFlagsWalkableTmpOffset(int value);
    // static field const value: static private System.Int32 GridFlagsWalkableTmpMask
    static constexpr const int GridFlagsWalkableTmpMask = 512;
    // Get static field: static private System.Int32 GridFlagsWalkableTmpMask
    static int _get_GridFlagsWalkableTmpMask();
    // Set static field: static private System.Int32 GridFlagsWalkableTmpMask
    static void _set_GridFlagsWalkableTmpMask(int value);
    // Get static field: static private readonly System.Version VERSION_3_8_3
    static ::System::Version* _get_VERSION_3_8_3();
    // Set static field: static private readonly System.Version VERSION_3_8_3
    static void _set_VERSION_3_8_3(::System::Version* value);
    // Get instance field reference: protected System.Int32 nodeInGridIndex
    [[deprecated("Use field access instead!")]] int& dyn_nodeInGridIndex();
    // Get instance field reference: protected System.UInt16 gridFlags
    [[deprecated("Use field access instead!")]] uint16_t& dyn_gridFlags();
    // Get instance field reference: public Pathfinding.GraphNode[] connections
    [[deprecated("Use field access instead!")]] ::ArrayW<::Pathfinding::GraphNode*>& dyn_connections();
    // Get instance field reference: public System.UInt32[] connectionCosts
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn_connectionCosts();
    // public System.Int32 get_NodeInGridIndex()
    // Offset: 0x1C0EF84
    int get_NodeInGridIndex();
    // public System.Void set_NodeInGridIndex(System.Int32 value)
    // Offset: 0x1C11D70
    void set_NodeInGridIndex(int value);
    // public System.Boolean get_WalkableErosion()
    // Offset: 0x1C15794
    bool get_WalkableErosion();
    // public System.Void set_WalkableErosion(System.Boolean value)
    // Offset: 0x1C12174
    void set_WalkableErosion(bool value);
    // public System.Boolean get_TmpWalkable()
    // Offset: 0x1C15824
    bool get_TmpWalkable();
    // public System.Void set_TmpWalkable(System.Boolean value)
    // Offset: 0x1C157DC
    void set_TmpWalkable(bool value);
    // static private System.Void .cctor()
    // Offset: 0x1C19084
    static void _cctor();
    // protected System.Void .ctor(AstarPath astar)
    // Offset: 0x1C165CC
    // Implemented from: Pathfinding.GraphNode
    // Base method: System.Void GraphNode::.ctor(AstarPath astar)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GridNodeBase* New_ctor(::GlobalNamespace::AstarPath* astar) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Pathfinding::GridNodeBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GridNodeBase*, creationType>(astar)));
    }
    // public override System.Void FloodFill(System.Collections.Generic.Stack`1<Pathfinding.GraphNode> stack, System.UInt32 region)
    // Offset: 0x1C177E0
    // Implemented from: Pathfinding.GraphNode
    // Base method: System.Void GraphNode::FloodFill(System.Collections.Generic.Stack`1<Pathfinding.GraphNode> stack, System.UInt32 region)
    void FloodFill(::System::Collections::Generic::Stack_1<::Pathfinding::GraphNode*>* stack, uint region);
    // public override System.Void ClearConnections(System.Boolean alsoReverse)
    // Offset: 0x1C168D0
    // Implemented from: Pathfinding.GraphNode
    // Base method: System.Void GraphNode::ClearConnections(System.Boolean alsoReverse)
    void ClearConnections(bool alsoReverse);
    // public override System.Boolean ContainsConnection(Pathfinding.GraphNode node)
    // Offset: 0x1C18568
    // Implemented from: Pathfinding.GraphNode
    // Base method: System.Boolean GraphNode::ContainsConnection(Pathfinding.GraphNode node)
    bool ContainsConnection(::Pathfinding::GraphNode* node);
    // public override System.Void GetConnections(Pathfinding.GraphNodeDelegate del)
    // Offset: 0x1C16AF4
    // Implemented from: Pathfinding.GraphNode
    // Base method: System.Void GraphNode::GetConnections(Pathfinding.GraphNodeDelegate del)
    void GetConnections(::Pathfinding::GraphNodeDelegate* del);
    // public override System.Void UpdateRecursiveG(Pathfinding.Path path, Pathfinding.PathNode pathNode, Pathfinding.PathHandler handler)
    // Offset: 0x1C17B28
    // Implemented from: Pathfinding.GraphNode
    // Base method: System.Void GraphNode::UpdateRecursiveG(Pathfinding.Path path, Pathfinding.PathNode pathNode, Pathfinding.PathHandler handler)
    void UpdateRecursiveG(::Pathfinding::Path* path, ::Pathfinding::PathNode* pathNode, ::Pathfinding::PathHandler* handler);
    // public override System.Void Open(Pathfinding.Path path, Pathfinding.PathNode pathNode, Pathfinding.PathHandler handler)
    // Offset: 0x1C18070
    // Implemented from: Pathfinding.GraphNode
    // Base method: System.Void GraphNode::Open(Pathfinding.Path path, Pathfinding.PathNode pathNode, Pathfinding.PathHandler handler)
    void Open(::Pathfinding::Path* path, ::Pathfinding::PathNode* pathNode, ::Pathfinding::PathHandler* handler);
    // public override System.Void AddConnection(Pathfinding.GraphNode node, System.UInt32 cost)
    // Offset: 0x1C18614
    // Implemented from: Pathfinding.GraphNode
    // Base method: System.Void GraphNode::AddConnection(Pathfinding.GraphNode node, System.UInt32 cost)
    void AddConnection(::Pathfinding::GraphNode* node, uint cost);
    // public override System.Void RemoveConnection(Pathfinding.GraphNode node)
    // Offset: 0x1C18964
    // Implemented from: Pathfinding.GraphNode
    // Base method: System.Void GraphNode::RemoveConnection(Pathfinding.GraphNode node)
    void RemoveConnection(::Pathfinding::GraphNode* node);
    // public override System.Void SerializeReferences(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x1C18CD8
    // Implemented from: Pathfinding.GraphNode
    // Base method: System.Void GraphNode::SerializeReferences(Pathfinding.Serialization.GraphSerializationContext ctx)
    void SerializeReferences(::Pathfinding::Serialization::GraphSerializationContext* ctx);
    // public override System.Void DeserializeReferences(Pathfinding.Serialization.GraphSerializationContext ctx)
    // Offset: 0x1C18E58
    // Implemented from: Pathfinding.GraphNode
    // Base method: System.Void GraphNode::DeserializeReferences(Pathfinding.Serialization.GraphSerializationContext ctx)
    void DeserializeReferences(::Pathfinding::Serialization::GraphSerializationContext* ctx);
  }; // Pathfinding.GridNodeBase
  #pragma pack(pop)
  static check_size<sizeof(GridNodeBase), 56 + sizeof(::ArrayW<uint>)> __Pathfinding_GridNodeBaseSizeCheck;
  static_assert(sizeof(GridNodeBase) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::get_NodeInGridIndex
// Il2CppName: get_NodeInGridIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Pathfinding::GridNodeBase::*)()>(&Pathfinding::GridNodeBase::get_NodeInGridIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "get_NodeInGridIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::set_NodeInGridIndex
// Il2CppName: set_NodeInGridIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridNodeBase::*)(int)>(&Pathfinding::GridNodeBase::set_NodeInGridIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "set_NodeInGridIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::get_WalkableErosion
// Il2CppName: get_WalkableErosion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridNodeBase::*)()>(&Pathfinding::GridNodeBase::get_WalkableErosion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "get_WalkableErosion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::set_WalkableErosion
// Il2CppName: set_WalkableErosion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridNodeBase::*)(bool)>(&Pathfinding::GridNodeBase::set_WalkableErosion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "set_WalkableErosion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::get_TmpWalkable
// Il2CppName: get_TmpWalkable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridNodeBase::*)()>(&Pathfinding::GridNodeBase::get_TmpWalkable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "get_TmpWalkable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::set_TmpWalkable
// Il2CppName: set_TmpWalkable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridNodeBase::*)(bool)>(&Pathfinding::GridNodeBase::set_TmpWalkable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "set_TmpWalkable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Pathfinding::GridNodeBase::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::FloodFill
// Il2CppName: FloodFill
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridNodeBase::*)(::System::Collections::Generic::Stack_1<::Pathfinding::GraphNode*>*, uint)>(&Pathfinding::GridNodeBase::FloodFill)> {
  static const MethodInfo* get() {
    static auto* stack = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Stack`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")})->byval_arg;
    static auto* region = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "FloodFill", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stack, region});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::ClearConnections
// Il2CppName: ClearConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridNodeBase::*)(bool)>(&Pathfinding::GridNodeBase::ClearConnections)> {
  static const MethodInfo* get() {
    static auto* alsoReverse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "ClearConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alsoReverse});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::ContainsConnection
// Il2CppName: ContainsConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Pathfinding::GridNodeBase::*)(::Pathfinding::GraphNode*)>(&Pathfinding::GridNodeBase::ContainsConnection)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "ContainsConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::GetConnections
// Il2CppName: GetConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridNodeBase::*)(::Pathfinding::GraphNodeDelegate*)>(&Pathfinding::GridNodeBase::GetConnections)> {
  static const MethodInfo* get() {
    static auto* del = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNodeDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "GetConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{del});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::UpdateRecursiveG
// Il2CppName: UpdateRecursiveG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridNodeBase::*)(::Pathfinding::Path*, ::Pathfinding::PathNode*, ::Pathfinding::PathHandler*)>(&Pathfinding::GridNodeBase::UpdateRecursiveG)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* pathNode = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathNode")->byval_arg;
    static auto* handler = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "UpdateRecursiveG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, pathNode, handler});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridNodeBase::*)(::Pathfinding::Path*, ::Pathfinding::PathNode*, ::Pathfinding::PathHandler*)>(&Pathfinding::GridNodeBase::Open)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("Pathfinding", "Path")->byval_arg;
    static auto* pathNode = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathNode")->byval_arg;
    static auto* handler = &::il2cpp_utils::GetClassFromName("Pathfinding", "PathHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, pathNode, handler});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::AddConnection
// Il2CppName: AddConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridNodeBase::*)(::Pathfinding::GraphNode*, uint)>(&Pathfinding::GridNodeBase::AddConnection)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    static auto* cost = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "AddConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, cost});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::RemoveConnection
// Il2CppName: RemoveConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridNodeBase::*)(::Pathfinding::GraphNode*)>(&Pathfinding::GridNodeBase::RemoveConnection)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Pathfinding", "GraphNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "RemoveConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::SerializeReferences
// Il2CppName: SerializeReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridNodeBase::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::GridNodeBase::SerializeReferences)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "SerializeReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: Pathfinding::GridNodeBase::DeserializeReferences
// Il2CppName: DeserializeReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Pathfinding::GridNodeBase::*)(::Pathfinding::Serialization::GraphSerializationContext*)>(&Pathfinding::GridNodeBase::DeserializeReferences)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("Pathfinding.Serialization", "GraphSerializationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Pathfinding::GridNodeBase*), "DeserializeReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
