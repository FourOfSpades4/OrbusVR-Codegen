// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AstarPath
  class AstarPath;
}
// Forward declaring namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PathHandler
  class PathHandler;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Pathfinding
namespace Pathfinding {
  // Forward declaring type: PathThreadInfo
  struct PathThreadInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Pathfinding::PathThreadInfo, "Pathfinding", "PathThreadInfo");
// Type namespace: Pathfinding
namespace Pathfinding {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Pathfinding.PathThreadInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct PathThreadInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 threadIndex
    // Size: 0x4
    // Offset: 0x0
    int threadIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: threadIndex and: astar
    char __padding0[0x4] = {};
    // public AstarPath astar
    // Size: 0x8
    // Offset: 0x8
    ::GlobalNamespace::AstarPath* astar;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AstarPath*) == 0x8);
    // public Pathfinding.PathHandler runData
    // Size: 0x8
    // Offset: 0x10
    ::Pathfinding::PathHandler* runData;
    // Field size check
    static_assert(sizeof(::Pathfinding::PathHandler*) == 0x8);
    // public readonly System.Object lockObject
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* lockObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Creating value type constructor for type: PathThreadInfo
    constexpr PathThreadInfo(int threadIndex_ = {}, ::GlobalNamespace::AstarPath* astar_ = {}, ::Pathfinding::PathHandler* runData_ = {}, ::Il2CppObject* lockObject_ = {}) noexcept : threadIndex{threadIndex_}, astar{astar_}, runData{runData_}, lockObject{lockObject_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 threadIndex
    [[deprecated("Use field access instead!")]] int& dyn_threadIndex();
    // Get instance field reference: public AstarPath astar
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AstarPath*& dyn_astar();
    // Get instance field reference: public Pathfinding.PathHandler runData
    [[deprecated("Use field access instead!")]] ::Pathfinding::PathHandler*& dyn_runData();
    // Get instance field reference: public readonly System.Object lockObject
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_lockObject();
    // public System.Void .ctor(System.Int32 index, AstarPath astar, Pathfinding.PathHandler runData)
    // Offset: 0xBA2B74
    PathThreadInfo(int index, ::GlobalNamespace::AstarPath* astar, ::Pathfinding::PathHandler* runData);
  }; // Pathfinding.PathThreadInfo
  #pragma pack(pop)
  static check_size<sizeof(PathThreadInfo), 24 + sizeof(::Il2CppObject*)> __Pathfinding_PathThreadInfoSizeCheck;
  static_assert(sizeof(PathThreadInfo) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Pathfinding::PathThreadInfo::PathThreadInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
