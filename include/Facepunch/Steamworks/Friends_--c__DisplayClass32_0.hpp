// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Facepunch.Steamworks.Friends
#include "Facepunch/Steamworks/Friends.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Facepunch::Steamworks
namespace Facepunch::Steamworks {
  // Forward declaring type: SteamFriend
  class SteamFriend;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facepunch::Steamworks::Friends::$$c__DisplayClass32_0);
DEFINE_IL2CPP_ARG_TYPE(::Facepunch::Steamworks::Friends::$$c__DisplayClass32_0*, "Facepunch.Steamworks", "Friends/<>c__DisplayClass32_0");
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Facepunch.Steamworks.Friends/<>c__DisplayClass32_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: AB2BF8
  class Friends::$$c__DisplayClass32_0 : public ::Il2CppObject {
    public:
    public:
    // public System.UInt64 steamid
    // Size: 0x8
    // Offset: 0x10
    uint64_t steamid;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating conversion operator: operator uint64_t
    constexpr operator uint64_t() const noexcept {
      return steamid;
    }
    // Get instance field reference: public System.UInt64 steamid
    [[deprecated("Use field access instead!")]] uint64_t& dyn_steamid();
    // public System.Void .ctor()
    // Offset: 0x2844014
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Friends::$$c__DisplayClass32_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Facepunch::Steamworks::Friends::$$c__DisplayClass32_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Friends::$$c__DisplayClass32_0*, creationType>()));
    }
    // System.Boolean <Get>b__0(Facepunch.Steamworks.SteamFriend x)
    // Offset: 0x28445F8
    bool $Get$b__0(::Facepunch::Steamworks::SteamFriend* x);
  }; // Facepunch.Steamworks.Friends/<>c__DisplayClass32_0
  #pragma pack(pop)
  static check_size<sizeof(Friends::$$c__DisplayClass32_0), 16 + sizeof(uint64_t)> __Facepunch_Steamworks_Friends_$$c__DisplayClass32_0SizeCheck;
  static_assert(sizeof(Friends::$$c__DisplayClass32_0) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facepunch::Steamworks::Friends::$$c__DisplayClass32_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Facepunch::Steamworks::Friends::$$c__DisplayClass32_0::$Get$b__0
// Il2CppName: <Get>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Facepunch::Steamworks::Friends::$$c__DisplayClass32_0::*)(::Facepunch::Steamworks::SteamFriend*)>(&Facepunch::Steamworks::Friends::$$c__DisplayClass32_0::$Get$b__0)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("Facepunch.Steamworks", "SteamFriend")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Friends::$$c__DisplayClass32_0*), "<Get>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
