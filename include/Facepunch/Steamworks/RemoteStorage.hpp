// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Facepunch::Steamworks
namespace Facepunch::Steamworks {
  // Forward declaring type: Client
  class Client;
}
// Forward declaring namespace: SteamNative
namespace SteamNative {
  // Forward declaring type: SteamRemoteStorage
  class SteamRemoteStorage;
}
// Completed forward declares
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Forward declaring type: RemoteStorage
  class RemoteStorage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facepunch::Steamworks::RemoteStorage);
DEFINE_IL2CPP_ARG_TYPE(::Facepunch::Steamworks::RemoteStorage*, "Facepunch.Steamworks", "RemoteStorage");
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Facepunch.Steamworks.RemoteStorage
  // [TokenAttribute] Offset: FFFFFFFF
  class RemoteStorage : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // Facepunch.Steamworks.Client client
    // Size: 0x8
    // Offset: 0x10
    ::Facepunch::Steamworks::Client* client;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::Client*) == 0x8);
    // SteamNative.SteamRemoteStorage native
    // Size: 0x8
    // Offset: 0x18
    ::SteamNative::SteamRemoteStorage* native;
    // Field size check
    static_assert(sizeof(::SteamNative::SteamRemoteStorage*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: Facepunch.Steamworks.Client client
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::Client*& dyn_client();
    // Get instance field reference: SteamNative.SteamRemoteStorage native
    [[deprecated("Use field access instead!")]] ::SteamNative::SteamRemoteStorage*& dyn_native();
    // public System.Void Dispose()
    // Offset: 0x2842180
    void Dispose();
  }; // Facepunch.Steamworks.RemoteStorage
  #pragma pack(pop)
  static check_size<sizeof(RemoteStorage), 24 + sizeof(::SteamNative::SteamRemoteStorage*)> __Facepunch_Steamworks_RemoteStorageSizeCheck;
  static_assert(sizeof(RemoteStorage) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facepunch::Steamworks::RemoteStorage::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::RemoteStorage::*)()>(&Facepunch::Steamworks::RemoteStorage::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::RemoteStorage*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
