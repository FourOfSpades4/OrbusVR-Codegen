// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Facepunch.Steamworks.ServerList
#include "Facepunch/Steamworks/ServerList.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Facepunch::Steamworks
namespace Facepunch::Steamworks {
  // Forward declaring type: SourceServerQuery
  class SourceServerQuery;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facepunch::Steamworks::ServerList::Server);
DEFINE_IL2CPP_ARG_TYPE(::Facepunch::Steamworks::ServerList::Server*, "Facepunch.Steamworks", "ServerList/Server");
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Facepunch.Steamworks.ServerList/Server
  // [TokenAttribute] Offset: FFFFFFFF
  class ServerList::Server : public ::Il2CppObject {
    public:
    public:
    // public System.Action`1<System.Boolean> OnReceivedRules
    // Size: 0x8
    // Offset: 0x10
    ::System::Action_1<bool>* OnReceivedRules;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,System.String> Rules
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* Rules;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // Facepunch.Steamworks.SourceServerQuery RulesRequest
    // Size: 0x8
    // Offset: 0x20
    ::Facepunch::Steamworks::SourceServerQuery* RulesRequest;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::SourceServerQuery*) == 0x8);
    public:
    // Get instance field reference: public System.Action`1<System.Boolean> OnReceivedRules
    [[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& dyn_OnReceivedRules();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.String> Rules
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_Rules();
    // Get instance field reference: Facepunch.Steamworks.SourceServerQuery RulesRequest
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::SourceServerQuery*& dyn_RulesRequest();
    // System.Void OnServerRulesReceiveFinished(System.Collections.Generic.Dictionary`2<System.String,System.String> rules, System.Boolean Success)
    // Offset: 0x28456F4
    void OnServerRulesReceiveFinished(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* rules, bool Success);
  }; // Facepunch.Steamworks.ServerList/Server
  #pragma pack(pop)
  static check_size<sizeof(ServerList::Server), 32 + sizeof(::Facepunch::Steamworks::SourceServerQuery*)> __Facepunch_Steamworks_ServerList_ServerSizeCheck;
  static_assert(sizeof(ServerList::Server) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facepunch::Steamworks::ServerList::Server::OnServerRulesReceiveFinished
// Il2CppName: OnServerRulesReceiveFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::ServerList::Server::*)(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, bool)>(&Facepunch::Steamworks::ServerList::Server::OnServerRulesReceiveFinished)> {
  static const MethodInfo* get() {
    static auto* rules = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* Success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::ServerList::Server*), "OnServerRulesReceiveFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rules, Success});
  }
};
