// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Facepunch.Steamworks.BaseSteamworks
#include "Facepunch/Steamworks/BaseSteamworks.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Facepunch::Steamworks::BaseSteamworks::$$c__DisplayClass41_0_1, "Facepunch.Steamworks", "BaseSteamworks/<>c__DisplayClass41_0`1");
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // WARNING Size may be invalid!
  // Autogenerated type: Facepunch.Steamworks.BaseSteamworks/<>c__DisplayClass41_0`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: AB2BE8
  template<typename T>
  class BaseSteamworks::$$c__DisplayClass41_0_1 : public ::Il2CppObject {
    public:
    public:
    // public System.Action`1<T> func
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_1<T>* func;
    // Field size check
    static_assert(sizeof(::System::Action_1<T>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Action_1<T>*
    constexpr operator ::System::Action_1<T>*() const noexcept {
      return func;
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Action`1<T> func
    [[deprecated("Use field access instead!")]] ::System::Action_1<T>*& dyn_func() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Facepunch::Steamworks::BaseSteamworks::$$c__DisplayClass41_0_1::dyn_func");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "func"))->offset;
      return *reinterpret_cast<::System::Action_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseSteamworks::$$c__DisplayClass41_0_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Facepunch::Steamworks::BaseSteamworks::$$c__DisplayClass41_0_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseSteamworks::$$c__DisplayClass41_0_1<T>*, creationType>()));
    }
    // System.Void <RegisterCallback>b__0(System.Object o)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void $RegisterCallback$b__0(::Il2CppObject* o) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Facepunch::Steamworks::BaseSteamworks::$$c__DisplayClass41_0_1::<RegisterCallback>b__0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterCallback>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, o);
    }
  }; // Facepunch.Steamworks.BaseSteamworks/<>c__DisplayClass41_0`1
  // Could not write size check! Type: Facepunch.Steamworks.BaseSteamworks/<>c__DisplayClass41_0`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
