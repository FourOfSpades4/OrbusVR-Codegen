// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Facepunch::Steamworks
namespace Facepunch::Steamworks {
  // Forward declaring type: Networking
  class Networking;
  // Forward declaring type: Inventory
  class Inventory;
  // Forward declaring type: Workshop
  class Workshop;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: Facepunch::Steamworks::Interop
namespace Facepunch::Steamworks::Interop {
  // Forward declaring type: NativeInterface
  class NativeInterface;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: SteamNative
namespace SteamNative {
  // Forward declaring type: CallbackHandle
  class CallbackHandle;
  // Forward declaring type: CallResult
  class CallResult;
}
// Completed forward declares
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Forward declaring type: BaseSteamworks
  class BaseSteamworks;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facepunch::Steamworks::BaseSteamworks);
DEFINE_IL2CPP_ARG_TYPE(::Facepunch::Steamworks::BaseSteamworks*, "Facepunch.Steamworks", "BaseSteamworks");
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Facepunch.Steamworks.BaseSteamworks
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseSteamworks : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::Facepunch::Steamworks::BaseSteamworks::$$c__DisplayClass41_0_1<T>
    template<typename T>
    class $$c__DisplayClass41_0_1;
    public:
    // [CompilerGeneratedAttribute] Offset: 0xAB2C18
    // private Facepunch.Steamworks.Networking <Networking>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Facepunch::Steamworks::Networking* Networking;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::Networking*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAB2C28
    // private Facepunch.Steamworks.Inventory <Inventory>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::Facepunch::Steamworks::Inventory* Inventory;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::Inventory*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAB2C38
    // private Facepunch.Steamworks.Workshop <Workshop>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::Facepunch::Steamworks::Workshop* Workshop;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::Workshop*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAB2C48
    // private System.Action OnUpdate
    // Size: 0x8
    // Offset: 0x28
    ::System::Action* OnUpdate;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // Facepunch.Steamworks.Interop.NativeInterface native
    // Size: 0x8
    // Offset: 0x30
    ::Facepunch::Steamworks::Interop::NativeInterface* native;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::Interop::NativeInterface*) == 0x8);
    // private System.Collections.Generic.List`1<SteamNative.CallbackHandle> CallbackHandles
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::SteamNative::CallbackHandle*>* CallbackHandles;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::SteamNative::CallbackHandle*>*) == 0x8);
    // private System.Collections.Generic.List`1<SteamNative.CallResult> CallResults
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::SteamNative::CallResult*>* CallResults;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::SteamNative::CallResult*>*) == 0x8);
    // protected System.Boolean disposed
    // Size: 0x1
    // Offset: 0x48
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disposed and: Callbacks
    char __padding7[0x7] = {};
    // private System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.List`1<System.Action`1<System.Object>>> Callbacks
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::System::Action_1<::Il2CppObject*>*>*>* Callbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::System::Action_1<::Il2CppObject*>*>*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private Facepunch.Steamworks.Networking <Networking>k__BackingField
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::Networking*& dyn_$Networking$k__BackingField();
    // Get instance field reference: private Facepunch.Steamworks.Inventory <Inventory>k__BackingField
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::Inventory*& dyn_$Inventory$k__BackingField();
    // Get instance field reference: private Facepunch.Steamworks.Workshop <Workshop>k__BackingField
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::Workshop*& dyn_$Workshop$k__BackingField();
    // Get instance field reference: private System.Action OnUpdate
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnUpdate();
    // Get instance field reference: Facepunch.Steamworks.Interop.NativeInterface native
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::Interop::NativeInterface*& dyn_native();
    // Get instance field reference: private System.Collections.Generic.List`1<SteamNative.CallbackHandle> CallbackHandles
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::SteamNative::CallbackHandle*>*& dyn_CallbackHandles();
    // Get instance field reference: private System.Collections.Generic.List`1<SteamNative.CallResult> CallResults
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::SteamNative::CallResult*>*& dyn_CallResults();
    // Get instance field reference: protected System.Boolean disposed
    [[deprecated("Use field access instead!")]] bool& dyn_disposed();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.List`1<System.Action`1<System.Object>>> Callbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::System::Action_1<::Il2CppObject*>*>*>*& dyn_Callbacks();
    // public Facepunch.Steamworks.Networking get_Networking()
    // Offset: 0x2840A2C
    ::Facepunch::Steamworks::Networking* get_Networking();
    // System.Void set_Networking(Facepunch.Steamworks.Networking value)
    // Offset: 0x2840A34
    void set_Networking(::Facepunch::Steamworks::Networking* value);
    // public Facepunch.Steamworks.Inventory get_Inventory()
    // Offset: 0x2840A3C
    ::Facepunch::Steamworks::Inventory* get_Inventory();
    // System.Void set_Inventory(Facepunch.Steamworks.Inventory value)
    // Offset: 0x2840A44
    void set_Inventory(::Facepunch::Steamworks::Inventory* value);
    // public Facepunch.Steamworks.Workshop get_Workshop()
    // Offset: 0x2840A4C
    ::Facepunch::Steamworks::Workshop* get_Workshop();
    // System.Void set_Workshop(Facepunch.Steamworks.Workshop value)
    // Offset: 0x2840A54
    void set_Workshop(::Facepunch::Steamworks::Workshop* value);
    // public System.Void Dispose()
    // Offset: 0x2840AD8
    void Dispose();
    // public System.Boolean get_IsValid()
    // Offset: 0x28411E4
    bool get_IsValid();
    // System.Void UnregisterCallResult(SteamNative.CallResult handle)
    // Offset: 0x28411F4
    void UnregisterCallResult(::SteamNative::CallResult* handle);
    // public System.Void Update()
    // Offset: 0x2841264
    void Update();
    // public System.Void RunUpdateCallbacks()
    // Offset: 0x284144C
    void RunUpdateCallbacks();
    // System.Collections.Generic.List`1<System.Action`1<System.Object>> CallbackList(System.Type T)
    // Offset: 0x2841720
    ::System::Collections::Generic::List_1<::System::Action_1<::Il2CppObject*>*>* CallbackList(::System::Type* T);
    // System.Void RegisterCallback(System.Action`1<T> func)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void RegisterCallback(::System::Action_1<T>* func) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Facepunch::Steamworks::BaseSteamworks::RegisterCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(func)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, func);
    }
    // protected override System.Void Finalize()
    // Offset: 0x2840A5C
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Facepunch.Steamworks.BaseSteamworks
  #pragma pack(pop)
  static check_size<sizeof(BaseSteamworks), 80 + sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::System::Action_1<::Il2CppObject*>*>*>*)> __Facepunch_Steamworks_BaseSteamworksSizeCheck;
  static_assert(sizeof(BaseSteamworks) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facepunch::Steamworks::BaseSteamworks::get_Networking
// Il2CppName: get_Networking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facepunch::Steamworks::Networking* (Facepunch::Steamworks::BaseSteamworks::*)()>(&Facepunch::Steamworks::BaseSteamworks::get_Networking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::BaseSteamworks*), "get_Networking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::BaseSteamworks::set_Networking
// Il2CppName: set_Networking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::BaseSteamworks::*)(::Facepunch::Steamworks::Networking*)>(&Facepunch::Steamworks::BaseSteamworks::set_Networking)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Facepunch.Steamworks", "Networking")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::BaseSteamworks*), "set_Networking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::BaseSteamworks::get_Inventory
// Il2CppName: get_Inventory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facepunch::Steamworks::Inventory* (Facepunch::Steamworks::BaseSteamworks::*)()>(&Facepunch::Steamworks::BaseSteamworks::get_Inventory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::BaseSteamworks*), "get_Inventory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::BaseSteamworks::set_Inventory
// Il2CppName: set_Inventory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::BaseSteamworks::*)(::Facepunch::Steamworks::Inventory*)>(&Facepunch::Steamworks::BaseSteamworks::set_Inventory)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Facepunch.Steamworks", "Inventory")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::BaseSteamworks*), "set_Inventory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::BaseSteamworks::get_Workshop
// Il2CppName: get_Workshop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facepunch::Steamworks::Workshop* (Facepunch::Steamworks::BaseSteamworks::*)()>(&Facepunch::Steamworks::BaseSteamworks::get_Workshop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::BaseSteamworks*), "get_Workshop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::BaseSteamworks::set_Workshop
// Il2CppName: set_Workshop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::BaseSteamworks::*)(::Facepunch::Steamworks::Workshop*)>(&Facepunch::Steamworks::BaseSteamworks::set_Workshop)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Facepunch.Steamworks", "Workshop")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::BaseSteamworks*), "set_Workshop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::BaseSteamworks::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::BaseSteamworks::*)()>(&Facepunch::Steamworks::BaseSteamworks::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::BaseSteamworks*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::BaseSteamworks::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Facepunch::Steamworks::BaseSteamworks::*)()>(&Facepunch::Steamworks::BaseSteamworks::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::BaseSteamworks*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::BaseSteamworks::UnregisterCallResult
// Il2CppName: UnregisterCallResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::BaseSteamworks::*)(::SteamNative::CallResult*)>(&Facepunch::Steamworks::BaseSteamworks::UnregisterCallResult)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("SteamNative", "CallResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::BaseSteamworks*), "UnregisterCallResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::BaseSteamworks::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::BaseSteamworks::*)()>(&Facepunch::Steamworks::BaseSteamworks::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::BaseSteamworks*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::BaseSteamworks::RunUpdateCallbacks
// Il2CppName: RunUpdateCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::BaseSteamworks::*)()>(&Facepunch::Steamworks::BaseSteamworks::RunUpdateCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::BaseSteamworks*), "RunUpdateCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::BaseSteamworks::CallbackList
// Il2CppName: CallbackList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Action_1<::Il2CppObject*>*>* (Facepunch::Steamworks::BaseSteamworks::*)(::System::Type*)>(&Facepunch::Steamworks::BaseSteamworks::CallbackList)> {
  static const MethodInfo* get() {
    static auto* T = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::BaseSteamworks*), "CallbackList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{T});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::BaseSteamworks::RegisterCallback
// Il2CppName: RegisterCallback
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Facepunch::Steamworks::BaseSteamworks::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::BaseSteamworks::*)()>(&Facepunch::Steamworks::BaseSteamworks::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::BaseSteamworks*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
