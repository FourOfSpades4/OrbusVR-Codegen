// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Facepunch.Steamworks.BaseSteamworks
#include "Facepunch/Steamworks/BaseSteamworks.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Facepunch::Steamworks
namespace Facepunch::Steamworks {
  // Forward declaring type: Voice
  class Voice;
  // Forward declaring type: ServerList
  class ServerList;
  // Forward declaring type: LobbyList
  class LobbyList;
  // Forward declaring type: App
  class App;
  // Forward declaring type: Achievements
  class Achievements;
  // Forward declaring type: Stats
  class Stats;
  // Forward declaring type: MicroTransactions
  class MicroTransactions;
  // Forward declaring type: User
  class User;
  // Forward declaring type: RemoteStorage
  class RemoteStorage;
  // Forward declaring type: Friends
  class Friends;
}
// Completed forward declares
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Forward declaring type: Client
  class Client;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facepunch::Steamworks::Client);
DEFINE_IL2CPP_ARG_TYPE(::Facepunch::Steamworks::Client*, "Facepunch.Steamworks", "Client");
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: Facepunch.Steamworks.Client
  // [TokenAttribute] Offset: FFFFFFFF
  class Client : public ::Facepunch::Steamworks::BaseSteamworks {
    public:
    public:
    // [CompilerGeneratedAttribute] Offset: 0xAB2C68
    // private Facepunch.Steamworks.Voice <Voice>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::Facepunch::Steamworks::Voice* Voice;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::Voice*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAB2C78
    // private Facepunch.Steamworks.ServerList <ServerList>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::Facepunch::Steamworks::ServerList* ServerList;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::ServerList*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAB2C88
    // private Facepunch.Steamworks.LobbyList <LobbyList>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    ::Facepunch::Steamworks::LobbyList* LobbyList;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::LobbyList*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAB2C98
    // private Facepunch.Steamworks.App <App>k__BackingField
    // Size: 0x8
    // Offset: 0x70
    ::Facepunch::Steamworks::App* App;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::App*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAB2CA8
    // private Facepunch.Steamworks.Achievements <Achievements>k__BackingField
    // Size: 0x8
    // Offset: 0x78
    ::Facepunch::Steamworks::Achievements* Achievements;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::Achievements*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAB2CB8
    // private Facepunch.Steamworks.Stats <Stats>k__BackingField
    // Size: 0x8
    // Offset: 0x80
    ::Facepunch::Steamworks::Stats* Stats;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::Stats*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAB2CC8
    // private Facepunch.Steamworks.MicroTransactions <MicroTransactions>k__BackingField
    // Size: 0x8
    // Offset: 0x88
    ::Facepunch::Steamworks::MicroTransactions* MicroTransactions;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::MicroTransactions*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAB2CD8
    // private Facepunch.Steamworks.User <User>k__BackingField
    // Size: 0x8
    // Offset: 0x90
    ::Facepunch::Steamworks::User* User;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::User*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAB2CE8
    // private Facepunch.Steamworks.RemoteStorage <RemoteStorage>k__BackingField
    // Size: 0x8
    // Offset: 0x98
    ::Facepunch::Steamworks::RemoteStorage* RemoteStorage;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::RemoteStorage*) == 0x8);
    // private Facepunch.Steamworks.Friends _friends
    // Size: 0x8
    // Offset: 0xA0
    ::Facepunch::Steamworks::Friends* friends;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::Friends*) == 0x8);
    public:
    // [CompilerGeneratedAttribute] Offset: 0xAB2C58
    // Get static field: static private Facepunch.Steamworks.Client <Instance>k__BackingField
    static ::Facepunch::Steamworks::Client* _get_$Instance$k__BackingField();
    // Set static field: static private Facepunch.Steamworks.Client <Instance>k__BackingField
    static void _set_$Instance$k__BackingField(::Facepunch::Steamworks::Client* value);
    // Get instance field reference: private Facepunch.Steamworks.Voice <Voice>k__BackingField
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::Voice*& dyn_$Voice$k__BackingField();
    // Get instance field reference: private Facepunch.Steamworks.ServerList <ServerList>k__BackingField
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::ServerList*& dyn_$ServerList$k__BackingField();
    // Get instance field reference: private Facepunch.Steamworks.LobbyList <LobbyList>k__BackingField
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::LobbyList*& dyn_$LobbyList$k__BackingField();
    // Get instance field reference: private Facepunch.Steamworks.App <App>k__BackingField
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::App*& dyn_$App$k__BackingField();
    // Get instance field reference: private Facepunch.Steamworks.Achievements <Achievements>k__BackingField
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::Achievements*& dyn_$Achievements$k__BackingField();
    // Get instance field reference: private Facepunch.Steamworks.Stats <Stats>k__BackingField
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::Stats*& dyn_$Stats$k__BackingField();
    // Get instance field reference: private Facepunch.Steamworks.MicroTransactions <MicroTransactions>k__BackingField
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::MicroTransactions*& dyn_$MicroTransactions$k__BackingField();
    // Get instance field reference: private Facepunch.Steamworks.User <User>k__BackingField
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::User*& dyn_$User$k__BackingField();
    // Get instance field reference: private Facepunch.Steamworks.RemoteStorage <RemoteStorage>k__BackingField
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::RemoteStorage*& dyn_$RemoteStorage$k__BackingField();
    // Get instance field reference: private Facepunch.Steamworks.Friends _friends
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::Friends*& dyn__friends();
    // static public Facepunch.Steamworks.Client get_Instance()
    // Offset: 0x28417F8
    static ::Facepunch::Steamworks::Client* get_Instance();
    // static private System.Void set_Instance(Facepunch.Steamworks.Client value)
    // Offset: 0x2841848
    static void set_Instance(::Facepunch::Steamworks::Client* value);
    // public Facepunch.Steamworks.Voice get_Voice()
    // Offset: 0x284189C
    ::Facepunch::Steamworks::Voice* get_Voice();
    // private System.Void set_Voice(Facepunch.Steamworks.Voice value)
    // Offset: 0x28418A4
    void set_Voice(::Facepunch::Steamworks::Voice* value);
    // public Facepunch.Steamworks.ServerList get_ServerList()
    // Offset: 0x28418AC
    ::Facepunch::Steamworks::ServerList* get_ServerList();
    // private System.Void set_ServerList(Facepunch.Steamworks.ServerList value)
    // Offset: 0x28418B4
    void set_ServerList(::Facepunch::Steamworks::ServerList* value);
    // public Facepunch.Steamworks.LobbyList get_LobbyList()
    // Offset: 0x28418BC
    ::Facepunch::Steamworks::LobbyList* get_LobbyList();
    // private System.Void set_LobbyList(Facepunch.Steamworks.LobbyList value)
    // Offset: 0x28418C4
    void set_LobbyList(::Facepunch::Steamworks::LobbyList* value);
    // public Facepunch.Steamworks.App get_App()
    // Offset: 0x28418CC
    ::Facepunch::Steamworks::App* get_App();
    // private System.Void set_App(Facepunch.Steamworks.App value)
    // Offset: 0x28418D4
    void set_App(::Facepunch::Steamworks::App* value);
    // public Facepunch.Steamworks.Achievements get_Achievements()
    // Offset: 0x28418DC
    ::Facepunch::Steamworks::Achievements* get_Achievements();
    // private System.Void set_Achievements(Facepunch.Steamworks.Achievements value)
    // Offset: 0x28418E4
    void set_Achievements(::Facepunch::Steamworks::Achievements* value);
    // public Facepunch.Steamworks.Stats get_Stats()
    // Offset: 0x28418EC
    ::Facepunch::Steamworks::Stats* get_Stats();
    // private System.Void set_Stats(Facepunch.Steamworks.Stats value)
    // Offset: 0x28418F4
    void set_Stats(::Facepunch::Steamworks::Stats* value);
    // public Facepunch.Steamworks.MicroTransactions get_MicroTransactions()
    // Offset: 0x28418FC
    ::Facepunch::Steamworks::MicroTransactions* get_MicroTransactions();
    // private System.Void set_MicroTransactions(Facepunch.Steamworks.MicroTransactions value)
    // Offset: 0x2841904
    void set_MicroTransactions(::Facepunch::Steamworks::MicroTransactions* value);
    // public Facepunch.Steamworks.User get_User()
    // Offset: 0x284190C
    ::Facepunch::Steamworks::User* get_User();
    // private System.Void set_User(Facepunch.Steamworks.User value)
    // Offset: 0x2841914
    void set_User(::Facepunch::Steamworks::User* value);
    // public Facepunch.Steamworks.RemoteStorage get_RemoteStorage()
    // Offset: 0x284191C
    ::Facepunch::Steamworks::RemoteStorage* get_RemoteStorage();
    // private System.Void set_RemoteStorage(Facepunch.Steamworks.RemoteStorage value)
    // Offset: 0x2841924
    void set_RemoteStorage(::Facepunch::Steamworks::RemoteStorage* value);
    // public System.Void RunCallbacks()
    // Offset: 0x2841A10
    void RunCallbacks();
    // public Facepunch.Steamworks.Friends get_Friends()
    // Offset: 0x2841D28
    ::Facepunch::Steamworks::Friends* get_Friends();
    // protected override System.Void Finalize()
    // Offset: 0x284192C
    // Implemented from: Facepunch.Steamworks.BaseSteamworks
    // Base method: System.Void BaseSteamworks::Finalize()
    void Finalize();
    // public override System.Void Update()
    // Offset: 0x28419A0
    // Implemented from: Facepunch.Steamworks.BaseSteamworks
    // Base method: System.Void BaseSteamworks::Update()
    void Update();
    // public override System.Void Dispose()
    // Offset: 0x284201C
    // Implemented from: Facepunch.Steamworks.BaseSteamworks
    // Base method: System.Void BaseSteamworks::Dispose()
    void Dispose();
  }; // Facepunch.Steamworks.Client
  #pragma pack(pop)
  static check_size<sizeof(Client), 160 + sizeof(::Facepunch::Steamworks::Friends*)> __Facepunch_Steamworks_ClientSizeCheck;
  static_assert(sizeof(Client) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facepunch::Steamworks::Client* (*)()>(&Facepunch::Steamworks::Client::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::set_Instance
// Il2CppName: set_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Facepunch::Steamworks::Client*)>(&Facepunch::Steamworks::Client::set_Instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Facepunch.Steamworks", "Client")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "set_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::get_Voice
// Il2CppName: get_Voice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facepunch::Steamworks::Voice* (Facepunch::Steamworks::Client::*)()>(&Facepunch::Steamworks::Client::get_Voice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "get_Voice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::set_Voice
// Il2CppName: set_Voice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Client::*)(::Facepunch::Steamworks::Voice*)>(&Facepunch::Steamworks::Client::set_Voice)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Facepunch.Steamworks", "Voice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "set_Voice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::get_ServerList
// Il2CppName: get_ServerList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facepunch::Steamworks::ServerList* (Facepunch::Steamworks::Client::*)()>(&Facepunch::Steamworks::Client::get_ServerList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "get_ServerList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::set_ServerList
// Il2CppName: set_ServerList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Client::*)(::Facepunch::Steamworks::ServerList*)>(&Facepunch::Steamworks::Client::set_ServerList)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Facepunch.Steamworks", "ServerList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "set_ServerList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::get_LobbyList
// Il2CppName: get_LobbyList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facepunch::Steamworks::LobbyList* (Facepunch::Steamworks::Client::*)()>(&Facepunch::Steamworks::Client::get_LobbyList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "get_LobbyList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::set_LobbyList
// Il2CppName: set_LobbyList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Client::*)(::Facepunch::Steamworks::LobbyList*)>(&Facepunch::Steamworks::Client::set_LobbyList)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Facepunch.Steamworks", "LobbyList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "set_LobbyList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::get_App
// Il2CppName: get_App
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facepunch::Steamworks::App* (Facepunch::Steamworks::Client::*)()>(&Facepunch::Steamworks::Client::get_App)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "get_App", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::set_App
// Il2CppName: set_App
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Client::*)(::Facepunch::Steamworks::App*)>(&Facepunch::Steamworks::Client::set_App)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Facepunch.Steamworks", "App")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "set_App", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::get_Achievements
// Il2CppName: get_Achievements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facepunch::Steamworks::Achievements* (Facepunch::Steamworks::Client::*)()>(&Facepunch::Steamworks::Client::get_Achievements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "get_Achievements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::set_Achievements
// Il2CppName: set_Achievements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Client::*)(::Facepunch::Steamworks::Achievements*)>(&Facepunch::Steamworks::Client::set_Achievements)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Facepunch.Steamworks", "Achievements")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "set_Achievements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::get_Stats
// Il2CppName: get_Stats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facepunch::Steamworks::Stats* (Facepunch::Steamworks::Client::*)()>(&Facepunch::Steamworks::Client::get_Stats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "get_Stats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::set_Stats
// Il2CppName: set_Stats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Client::*)(::Facepunch::Steamworks::Stats*)>(&Facepunch::Steamworks::Client::set_Stats)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Facepunch.Steamworks", "Stats")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "set_Stats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::get_MicroTransactions
// Il2CppName: get_MicroTransactions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facepunch::Steamworks::MicroTransactions* (Facepunch::Steamworks::Client::*)()>(&Facepunch::Steamworks::Client::get_MicroTransactions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "get_MicroTransactions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::set_MicroTransactions
// Il2CppName: set_MicroTransactions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Client::*)(::Facepunch::Steamworks::MicroTransactions*)>(&Facepunch::Steamworks::Client::set_MicroTransactions)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Facepunch.Steamworks", "MicroTransactions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "set_MicroTransactions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::get_User
// Il2CppName: get_User
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facepunch::Steamworks::User* (Facepunch::Steamworks::Client::*)()>(&Facepunch::Steamworks::Client::get_User)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "get_User", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::set_User
// Il2CppName: set_User
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Client::*)(::Facepunch::Steamworks::User*)>(&Facepunch::Steamworks::Client::set_User)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Facepunch.Steamworks", "User")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "set_User", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::get_RemoteStorage
// Il2CppName: get_RemoteStorage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facepunch::Steamworks::RemoteStorage* (Facepunch::Steamworks::Client::*)()>(&Facepunch::Steamworks::Client::get_RemoteStorage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "get_RemoteStorage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::set_RemoteStorage
// Il2CppName: set_RemoteStorage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Client::*)(::Facepunch::Steamworks::RemoteStorage*)>(&Facepunch::Steamworks::Client::set_RemoteStorage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Facepunch.Steamworks", "RemoteStorage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "set_RemoteStorage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::RunCallbacks
// Il2CppName: RunCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Client::*)()>(&Facepunch::Steamworks::Client::RunCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "RunCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::get_Friends
// Il2CppName: get_Friends
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Facepunch::Steamworks::Friends* (Facepunch::Steamworks::Client::*)()>(&Facepunch::Steamworks::Client::get_Friends)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "get_Friends", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Client::*)()>(&Facepunch::Steamworks::Client::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Client::*)()>(&Facepunch::Steamworks::Client::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Client::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Client::*)()>(&Facepunch::Steamworks::Client::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Client*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
