// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Facepunch::Steamworks
namespace Facepunch::Steamworks {
  // Forward declaring type: Client
  class Client;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: Stopwatch
  class Stopwatch;
}
// Completed forward declares
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Forward declaring type: Voice
  class Voice;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facepunch::Steamworks::Voice);
DEFINE_IL2CPP_ARG_TYPE(::Facepunch::Steamworks::Voice*, "Facepunch.Steamworks", "Voice");
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Facepunch.Steamworks.Voice
  // [TokenAttribute] Offset: FFFFFFFF
  class Voice : public ::Il2CppObject {
    public:
    public:
    // Facepunch.Steamworks.Client client
    // Size: 0x8
    // Offset: 0x10
    ::Facepunch::Steamworks::Client* client;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::Client*) == 0x8);
    // System.Byte[] ReadCompressedBuffer
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint8_t> ReadCompressedBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // System.Byte[] ReadUncompressedBuffer
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> ReadUncompressedBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.Action`2<System.Byte[],System.Int32> OnCompressedData
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_2<::ArrayW<uint8_t>, int>* OnCompressedData;
    // Field size check
    static_assert(sizeof(::System::Action_2<::ArrayW<uint8_t>, int>*) == 0x8);
    // public System.Action`2<System.Byte[],System.Int32> OnUncompressedData
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_2<::ArrayW<uint8_t>, int>* OnUncompressedData;
    // Field size check
    static_assert(sizeof(::System::Action_2<::ArrayW<uint8_t>, int>*) == 0x8);
    // private System.Diagnostics.Stopwatch UpdateTimer
    // Size: 0x8
    // Offset: 0x38
    ::System::Diagnostics::Stopwatch* UpdateTimer;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Stopwatch*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAB2DE8
    // private System.DateTime <LastVoiceRecordTime>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::System::DateTime LastVoiceRecordTime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // public System.Boolean IsRecording
    // Size: 0x1
    // Offset: 0x48
    bool IsRecording;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsRecording and: DesiredSampleRate
    char __padding7[0x3] = {};
    // public System.UInt32 DesiredSampleRate
    // Size: 0x4
    // Offset: 0x4C
    uint DesiredSampleRate;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Get instance field reference: Facepunch.Steamworks.Client client
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::Client*& dyn_client();
    // Get instance field reference: System.Byte[] ReadCompressedBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_ReadCompressedBuffer();
    // Get instance field reference: System.Byte[] ReadUncompressedBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_ReadUncompressedBuffer();
    // Get instance field reference: public System.Action`2<System.Byte[],System.Int32> OnCompressedData
    [[deprecated("Use field access instead!")]] ::System::Action_2<::ArrayW<uint8_t>, int>*& dyn_OnCompressedData();
    // Get instance field reference: public System.Action`2<System.Byte[],System.Int32> OnUncompressedData
    [[deprecated("Use field access instead!")]] ::System::Action_2<::ArrayW<uint8_t>, int>*& dyn_OnUncompressedData();
    // Get instance field reference: private System.Diagnostics.Stopwatch UpdateTimer
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Stopwatch*& dyn_UpdateTimer();
    // Get instance field reference: private System.DateTime <LastVoiceRecordTime>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_$LastVoiceRecordTime$k__BackingField();
    // Get instance field reference: public System.Boolean IsRecording
    [[deprecated("Use field access instead!")]] bool& dyn_IsRecording();
    // Get instance field reference: public System.UInt32 DesiredSampleRate
    [[deprecated("Use field access instead!")]] uint& dyn_DesiredSampleRate();
    // public System.UInt32 get_OptimalSampleRate()
    // Offset: 0x2845DB4
    uint get_OptimalSampleRate();
    // private System.Void set_LastVoiceRecordTime(System.DateTime value)
    // Offset: 0x2845EB8
    void set_LastVoiceRecordTime(::System::DateTime value);
    // public System.Void Update()
    // Offset: 0x2841A4C
    void Update();
  }; // Facepunch.Steamworks.Voice
  #pragma pack(pop)
  static check_size<sizeof(Voice), 76 + sizeof(uint)> __Facepunch_Steamworks_VoiceSizeCheck;
  static_assert(sizeof(Voice) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facepunch::Steamworks::Voice::get_OptimalSampleRate
// Il2CppName: get_OptimalSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Facepunch::Steamworks::Voice::*)()>(&Facepunch::Steamworks::Voice::get_OptimalSampleRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Voice*), "get_OptimalSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Voice::set_LastVoiceRecordTime
// Il2CppName: set_LastVoiceRecordTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Voice::*)(::System::DateTime)>(&Facepunch::Steamworks::Voice::set_LastVoiceRecordTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Voice*), "set_LastVoiceRecordTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Voice::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Voice::*)()>(&Facepunch::Steamworks::Voice::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Voice*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
