// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Facepunch.Steamworks.Callbacks.Result
#include "Facepunch/Steamworks/Callbacks/Result.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: SteamNative
namespace SteamNative {
  // Forward declaring type: SteamUGC
  class SteamUGC;
  // Forward declaring type: SteamRemoteStorage
  class SteamRemoteStorage;
}
// Forward declaring namespace: Facepunch::Steamworks
namespace Facepunch::Steamworks {
  // Forward declaring type: Friends
  class Friends;
  // Forward declaring type: BaseSteamworks
  class BaseSteamworks;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Forward declaring type: Workshop
  class Workshop;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facepunch::Steamworks::Workshop);
DEFINE_IL2CPP_ARG_TYPE(::Facepunch::Steamworks::Workshop*, "Facepunch.Steamworks", "Workshop");
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Facepunch.Steamworks.Workshop
  // [TokenAttribute] Offset: FFFFFFFF
  class Workshop : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // SteamNative.SteamUGC ugc
    // Size: 0x8
    // Offset: 0x10
    ::SteamNative::SteamUGC* ugc;
    // Field size check
    static_assert(sizeof(::SteamNative::SteamUGC*) == 0x8);
    // Facepunch.Steamworks.Friends friends
    // Size: 0x8
    // Offset: 0x18
    ::Facepunch::Steamworks::Friends* friends;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::Friends*) == 0x8);
    // Facepunch.Steamworks.BaseSteamworks steamworks
    // Size: 0x8
    // Offset: 0x20
    ::Facepunch::Steamworks::BaseSteamworks* steamworks;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::BaseSteamworks*) == 0x8);
    // SteamNative.SteamRemoteStorage remoteStorage
    // Size: 0x8
    // Offset: 0x28
    ::SteamNative::SteamRemoteStorage* remoteStorage;
    // Field size check
    static_assert(sizeof(::SteamNative::SteamRemoteStorage*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAB2E08
    // private System.Action`2<System.UInt64,Facepunch.Steamworks.Callbacks.Result> OnFileDownloaded
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_2<uint64_t, ::Facepunch::Steamworks::Callbacks::Result>* OnFileDownloaded;
    // Field size check
    static_assert(sizeof(::System::Action_2<uint64_t, ::Facepunch::Steamworks::Callbacks::Result>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAB2E18
    // private System.Action`1<System.UInt64> OnItemInstalled
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_1<uint64_t>* OnItemInstalled;
    // Field size check
    static_assert(sizeof(::System::Action_1<uint64_t>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: SteamNative.SteamUGC ugc
    [[deprecated("Use field access instead!")]] ::SteamNative::SteamUGC*& dyn_ugc();
    // Get instance field reference: Facepunch.Steamworks.Friends friends
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::Friends*& dyn_friends();
    // Get instance field reference: Facepunch.Steamworks.BaseSteamworks steamworks
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::BaseSteamworks*& dyn_steamworks();
    // Get instance field reference: SteamNative.SteamRemoteStorage remoteStorage
    [[deprecated("Use field access instead!")]] ::SteamNative::SteamRemoteStorage*& dyn_remoteStorage();
    // Get instance field reference: private System.Action`2<System.UInt64,Facepunch.Steamworks.Callbacks.Result> OnFileDownloaded
    [[deprecated("Use field access instead!")]] ::System::Action_2<uint64_t, ::Facepunch::Steamworks::Callbacks::Result>*& dyn_OnFileDownloaded();
    // Get instance field reference: private System.Action`1<System.UInt64> OnItemInstalled
    [[deprecated("Use field access instead!")]] ::System::Action_1<uint64_t>*& dyn_OnItemInstalled();
    // static private System.Void .cctor()
    // Offset: 0x28460CC
    static void _cctor();
    // public System.Void Dispose()
    // Offset: 0x2840F18
    void Dispose();
  }; // Facepunch.Steamworks.Workshop
  #pragma pack(pop)
  static check_size<sizeof(Workshop), 56 + sizeof(::System::Action_1<uint64_t>*)> __Facepunch_Steamworks_WorkshopSizeCheck;
  static_assert(sizeof(Workshop) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facepunch::Steamworks::Workshop::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Facepunch::Steamworks::Workshop::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Workshop*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Workshop::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Workshop::*)()>(&Facepunch::Steamworks::Workshop::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Workshop*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
