// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Facepunch::Steamworks
namespace Facepunch::Steamworks {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: Stopwatch
  class Stopwatch;
}
// Forward declaring namespace: SteamNative
namespace SteamNative {
  // Forward declaring type: SteamNetworking
  class SteamNetworking;
}
// Completed forward declares
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Forward declaring type: Networking
  class Networking;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facepunch::Steamworks::Networking);
DEFINE_IL2CPP_ARG_TYPE(::Facepunch::Steamworks::Networking*, "Facepunch.Steamworks", "Networking");
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Facepunch.Steamworks.Networking
  // [TokenAttribute] Offset: FFFFFFFF
  class Networking : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::Facepunch::Steamworks::Networking::OnRecievedP2PData
    class OnRecievedP2PData;
    // Nested type: ::Facepunch::Steamworks::Networking::SessionError
    struct SessionError;
    // Size: 0x1
    #pragma pack(push, 1)
    // Autogenerated type: Facepunch.Steamworks.Networking/SessionError
    // [TokenAttribute] Offset: FFFFFFFF
    struct SessionError/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Byte value__
      // Size: 0x1
      // Offset: 0x0
      uint8_t value;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: SessionError
      constexpr SessionError(uint8_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return value;
      }
      // static field const value: static public Facepunch.Steamworks.Networking/SessionError None
      static constexpr const uint8_t None = 0u;
      // Get static field: static public Facepunch.Steamworks.Networking/SessionError None
      static ::Facepunch::Steamworks::Networking::SessionError _get_None();
      // Set static field: static public Facepunch.Steamworks.Networking/SessionError None
      static void _set_None(::Facepunch::Steamworks::Networking::SessionError value);
      // static field const value: static public Facepunch.Steamworks.Networking/SessionError NotRunningApp
      static constexpr const uint8_t NotRunningApp = 1u;
      // Get static field: static public Facepunch.Steamworks.Networking/SessionError NotRunningApp
      static ::Facepunch::Steamworks::Networking::SessionError _get_NotRunningApp();
      // Set static field: static public Facepunch.Steamworks.Networking/SessionError NotRunningApp
      static void _set_NotRunningApp(::Facepunch::Steamworks::Networking::SessionError value);
      // static field const value: static public Facepunch.Steamworks.Networking/SessionError NoRightsToApp
      static constexpr const uint8_t NoRightsToApp = 2u;
      // Get static field: static public Facepunch.Steamworks.Networking/SessionError NoRightsToApp
      static ::Facepunch::Steamworks::Networking::SessionError _get_NoRightsToApp();
      // Set static field: static public Facepunch.Steamworks.Networking/SessionError NoRightsToApp
      static void _set_NoRightsToApp(::Facepunch::Steamworks::Networking::SessionError value);
      // static field const value: static public Facepunch.Steamworks.Networking/SessionError DestinationNotLoggedIn
      static constexpr const uint8_t DestinationNotLoggedIn = 3u;
      // Get static field: static public Facepunch.Steamworks.Networking/SessionError DestinationNotLoggedIn
      static ::Facepunch::Steamworks::Networking::SessionError _get_DestinationNotLoggedIn();
      // Set static field: static public Facepunch.Steamworks.Networking/SessionError DestinationNotLoggedIn
      static void _set_DestinationNotLoggedIn(::Facepunch::Steamworks::Networking::SessionError value);
      // static field const value: static public Facepunch.Steamworks.Networking/SessionError Timeout
      static constexpr const uint8_t Timeout = 4u;
      // Get static field: static public Facepunch.Steamworks.Networking/SessionError Timeout
      static ::Facepunch::Steamworks::Networking::SessionError _get_Timeout();
      // Set static field: static public Facepunch.Steamworks.Networking/SessionError Timeout
      static void _set_Timeout(::Facepunch::Steamworks::Networking::SessionError value);
      // static field const value: static public Facepunch.Steamworks.Networking/SessionError Max
      static constexpr const uint8_t Max = 5u;
      // Get static field: static public Facepunch.Steamworks.Networking/SessionError Max
      static ::Facepunch::Steamworks::Networking::SessionError _get_Max();
      // Set static field: static public Facepunch.Steamworks.Networking/SessionError Max
      static void _set_Max(::Facepunch::Steamworks::Networking::SessionError value);
      // Get instance field reference: public System.Byte value__
      [[deprecated("Use field access instead!")]] uint8_t& dyn_value__();
    }; // Facepunch.Steamworks.Networking/SessionError
    #pragma pack(pop)
    static check_size<sizeof(Networking::SessionError), 0 + sizeof(uint8_t)> __Facepunch_Steamworks_Networking_SessionErrorSizeCheck;
    static_assert(sizeof(Networking::SessionError) == 0x1);
    public:
    // public Facepunch.Steamworks.Networking/OnRecievedP2PData OnP2PData
    // Size: 0x8
    // Offset: 0x10
    ::Facepunch::Steamworks::Networking::OnRecievedP2PData* OnP2PData;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::Networking::OnRecievedP2PData*) == 0x8);
    // public System.Func`2<System.UInt64,System.Boolean> OnIncomingConnection
    // Size: 0x8
    // Offset: 0x18
    ::System::Func_2<uint64_t, bool>* OnIncomingConnection;
    // Field size check
    static_assert(sizeof(::System::Func_2<uint64_t, bool>*) == 0x8);
    // public System.Action`2<System.UInt64,Facepunch.Steamworks.Networking/SessionError> OnConnectionFailed
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_2<uint64_t, ::Facepunch::Steamworks::Networking::SessionError>* OnConnectionFailed;
    // Field size check
    static_assert(sizeof(::System::Action_2<uint64_t, ::Facepunch::Steamworks::Networking::SessionError>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> ListenChannels
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<int>* ListenChannels;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Diagnostics.Stopwatch UpdateTimer
    // Size: 0x8
    // Offset: 0x30
    ::System::Diagnostics::Stopwatch* UpdateTimer;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Stopwatch*) == 0x8);
    // SteamNative.SteamNetworking networking
    // Size: 0x8
    // Offset: 0x38
    ::SteamNative::SteamNetworking* networking;
    // Field size check
    static_assert(sizeof(::SteamNative::SteamNetworking*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private System.Byte[] ReceiveBuffer
    static ::ArrayW<uint8_t> _get_ReceiveBuffer();
    // Set static field: static private System.Byte[] ReceiveBuffer
    static void _set_ReceiveBuffer(::ArrayW<uint8_t> value);
    // Get instance field reference: public Facepunch.Steamworks.Networking/OnRecievedP2PData OnP2PData
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::Networking::OnRecievedP2PData*& dyn_OnP2PData();
    // Get instance field reference: public System.Func`2<System.UInt64,System.Boolean> OnIncomingConnection
    [[deprecated("Use field access instead!")]] ::System::Func_2<uint64_t, bool>*& dyn_OnIncomingConnection();
    // Get instance field reference: public System.Action`2<System.UInt64,Facepunch.Steamworks.Networking/SessionError> OnConnectionFailed
    [[deprecated("Use field access instead!")]] ::System::Action_2<uint64_t, ::Facepunch::Steamworks::Networking::SessionError>*& dyn_OnConnectionFailed();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> ListenChannels
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_ListenChannels();
    // Get instance field reference: private System.Diagnostics.Stopwatch UpdateTimer
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Stopwatch*& dyn_UpdateTimer();
    // Get instance field reference: SteamNative.SteamNetworking networking
    [[deprecated("Use field access instead!")]] ::SteamNative::SteamNetworking*& dyn_networking();
    // public System.Void Dispose()
    // Offset: 0x2840F84
    void Dispose();
    // public System.Void Update()
    // Offset: 0x284129C
    void Update();
    // private System.Boolean ReadP2PPacket(System.Int32 channel)
    // Offset: 0x2844D14
    bool ReadP2PPacket(int channel);
    // static private System.Void .cctor()
    // Offset: 0x28455A8
    static void _cctor();
  }; // Facepunch.Steamworks.Networking
  #pragma pack(pop)
  static check_size<sizeof(Networking), 56 + sizeof(::SteamNative::SteamNetworking*)> __Facepunch_Steamworks_NetworkingSizeCheck;
  static_assert(sizeof(Networking) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Facepunch::Steamworks::Networking::SessionError, "Facepunch.Steamworks", "Networking/SessionError");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facepunch::Steamworks::Networking::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Networking::*)()>(&Facepunch::Steamworks::Networking::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Networking*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Networking::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Networking::*)()>(&Facepunch::Steamworks::Networking::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Networking*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Networking::ReadP2PPacket
// Il2CppName: ReadP2PPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Facepunch::Steamworks::Networking::*)(int)>(&Facepunch::Steamworks::Networking::ReadP2PPacket)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Networking*), "ReadP2PPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Networking::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Facepunch::Steamworks::Networking::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Networking*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
