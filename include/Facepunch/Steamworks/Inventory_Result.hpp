// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Facepunch.Steamworks.Inventory
#include "Facepunch/Steamworks/Inventory.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: SteamNative.SteamInventoryResult_t
#include "SteamNative/SteamInventoryResult_t.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facepunch::Steamworks::Inventory::Result);
DEFINE_IL2CPP_ARG_TYPE(::Facepunch::Steamworks::Inventory::Result*, "Facepunch.Steamworks", "Inventory/Result");
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Facepunch.Steamworks.Inventory/Result
  // [TokenAttribute] Offset: FFFFFFFF
  class Inventory::Result : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // Facepunch.Steamworks.Inventory inventory
    // Size: 0x8
    // Offset: 0x10
    ::Facepunch::Steamworks::Inventory* inventory;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::Inventory*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAB2DF8
    // private SteamNative.SteamInventoryResult_t <Handle>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    ::SteamNative::SteamInventoryResult_t Handle;
    // Field size check
    static_assert(sizeof(::SteamNative::SteamInventoryResult_t) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static System.Collections.Generic.Dictionary`2<System.Int32,Facepunch.Steamworks.Inventory/Result> Pending
    static ::System::Collections::Generic::Dictionary_2<int, ::Facepunch::Steamworks::Inventory::Result*>* _get_Pending();
    // Set static field: static System.Collections.Generic.Dictionary`2<System.Int32,Facepunch.Steamworks.Inventory/Result> Pending
    static void _set_Pending(::System::Collections::Generic::Dictionary_2<int, ::Facepunch::Steamworks::Inventory::Result*>* value);
    // Get instance field reference: Facepunch.Steamworks.Inventory inventory
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::Inventory*& dyn_inventory();
    // Get instance field reference: private SteamNative.SteamInventoryResult_t <Handle>k__BackingField
    [[deprecated("Use field access instead!")]] ::SteamNative::SteamInventoryResult_t& dyn_$Handle$k__BackingField();
    // private SteamNative.SteamInventoryResult_t get_Handle()
    // Offset: 0x2844BD0
    ::SteamNative::SteamInventoryResult_t get_Handle();
    // private System.Void set_Handle(SteamNative.SteamInventoryResult_t value)
    // Offset: 0x2844BD8
    void set_Handle(::SteamNative::SteamInventoryResult_t value);
    // public System.Void Dispose()
    // Offset: 0x2844BE0
    void Dispose();
  }; // Facepunch.Steamworks.Inventory/Result
  #pragma pack(pop)
  static check_size<sizeof(Inventory::Result), 24 + sizeof(::SteamNative::SteamInventoryResult_t)> __Facepunch_Steamworks_Inventory_ResultSizeCheck;
  static_assert(sizeof(Inventory::Result) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facepunch::Steamworks::Inventory::Result::get_Handle
// Il2CppName: get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::SteamNative::SteamInventoryResult_t (Facepunch::Steamworks::Inventory::Result::*)()>(&Facepunch::Steamworks::Inventory::Result::get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Inventory::Result*), "get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Inventory::Result::set_Handle
// Il2CppName: set_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Inventory::Result::*)(::SteamNative::SteamInventoryResult_t)>(&Facepunch::Steamworks::Inventory::Result::set_Handle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("SteamNative", "SteamInventoryResult_t")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Inventory::Result*), "set_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::Inventory::Result::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::Inventory::Result::*)()>(&Facepunch::Steamworks::Inventory::Result::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::Inventory::Result*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
