// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Facepunch.Steamworks.ServerList
#include "Facepunch/Steamworks/ServerList.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Forward declaring type: SourceServerQuery
  class SourceServerQuery;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Facepunch::Steamworks::SourceServerQuery);
DEFINE_IL2CPP_ARG_TYPE(::Facepunch::Steamworks::SourceServerQuery*, "Facepunch.Steamworks", "SourceServerQuery");
// Type namespace: Facepunch.Steamworks
namespace Facepunch::Steamworks {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Facepunch.Steamworks.SourceServerQuery
  // [TokenAttribute] Offset: FFFFFFFF
  class SourceServerQuery : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // public System.Boolean IsRunning
    // Size: 0x1
    // Offset: 0x10
    bool IsRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean IsSuccessful
    // Size: 0x1
    // Offset: 0x11
    bool IsSuccessful;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsSuccessful and: Server
    char __padding1[0x6] = {};
    // private Facepunch.Steamworks.ServerList/Server Server
    // Size: 0x8
    // Offset: 0x18
    ::Facepunch::Steamworks::ServerList::Server* Server;
    // Field size check
    static_assert(sizeof(::Facepunch::Steamworks::ServerList::Server*) == 0x8);
    // private System.Threading.Thread thread
    // Size: 0x8
    // Offset: 0x20
    ::System::Threading::Thread* thread;
    // Field size check
    static_assert(sizeof(::System::Threading::Thread*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.String> rules
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* rules;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static public System.Collections.Generic.List`1<Facepunch.Steamworks.SourceServerQuery> Current
    static ::System::Collections::Generic::List_1<::Facepunch::Steamworks::SourceServerQuery*>* _get_Current();
    // Set static field: static public System.Collections.Generic.List`1<Facepunch.Steamworks.SourceServerQuery> Current
    static void _set_Current(::System::Collections::Generic::List_1<::Facepunch::Steamworks::SourceServerQuery*>* value);
    // Get static field: static private readonly System.Byte[] A2S_SERVERQUERY_GETCHALLENGE
    static ::ArrayW<uint8_t> _get_A2S_SERVERQUERY_GETCHALLENGE();
    // Set static field: static private readonly System.Byte[] A2S_SERVERQUERY_GETCHALLENGE
    static void _set_A2S_SERVERQUERY_GETCHALLENGE(::ArrayW<uint8_t> value);
    // Get static field: static private readonly System.Byte A2S_RULES
    static uint8_t _get_A2S_RULES();
    // Set static field: static private readonly System.Byte A2S_RULES
    static void _set_A2S_RULES(uint8_t value);
    // Get instance field reference: public System.Boolean IsRunning
    [[deprecated("Use field access instead!")]] bool& dyn_IsRunning();
    // Get instance field reference: public System.Boolean IsSuccessful
    [[deprecated("Use field access instead!")]] bool& dyn_IsSuccessful();
    // Get instance field reference: private Facepunch.Steamworks.ServerList/Server Server
    [[deprecated("Use field access instead!")]] ::Facepunch::Steamworks::ServerList::Server*& dyn_Server();
    // Get instance field reference: private System.Threading.Thread thread
    [[deprecated("Use field access instead!")]] ::System::Threading::Thread*& dyn_thread();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.String> rules
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_rules();
    // static public System.Void Cycle()
    // Offset: 0x28415DC
    static void Cycle();
    // private System.Void Update()
    // Offset: 0x2845778
    void Update();
    // public System.Void Dispose()
    // Offset: 0x2845858
    void Dispose();
    // static private System.Void .cctor()
    // Offset: 0x28458A8
    static void _cctor();
  }; // Facepunch.Steamworks.SourceServerQuery
  #pragma pack(pop)
  static check_size<sizeof(SourceServerQuery), 40 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)> __Facepunch_Steamworks_SourceServerQuerySizeCheck;
  static_assert(sizeof(SourceServerQuery) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Facepunch::Steamworks::SourceServerQuery::Cycle
// Il2CppName: Cycle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Facepunch::Steamworks::SourceServerQuery::Cycle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::SourceServerQuery*), "Cycle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::SourceServerQuery::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::SourceServerQuery::*)()>(&Facepunch::Steamworks::SourceServerQuery::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::SourceServerQuery*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::SourceServerQuery::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Facepunch::Steamworks::SourceServerQuery::*)()>(&Facepunch::Steamworks::SourceServerQuery::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::SourceServerQuery*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Facepunch::Steamworks::SourceServerQuery::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Facepunch::Steamworks::SourceServerQuery::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Facepunch::Steamworks::SourceServerQuery*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
