// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IPlayerClass
#include "GlobalNamespace/IPlayerClass.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: NetEntity
  class NetEntity;
  // Forward declaring type: PlayerClass
  class PlayerClass;
  // Forward declaring type: PlayerAvatar
  class PlayerAvatar;
  // Forward declaring type: PlayerCharacter
  class PlayerCharacter;
  // Forward declaring type: BardUpcomingNote
  class BardUpcomingNote;
  // Forward declaring type: BardDrumstick
  class BardDrumstick;
  // Forward declaring type: BardAvailableInstrument
  class BardAvailableInstrument;
  // Forward declaring type: BardInstrument
  class BardInstrument;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: BoxCollider
  class BoxCollider;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ClickedEventArgs
  struct ClickedEventArgs;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Bard
  class Bard;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::Bard);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::Bard*, "MagicalActual", "Bard");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x2B0
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.Bard
  // [TokenAttribute] Offset: FFFFFFFF
  class Bard : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IPlayerClass*/ {
    public:
    // Nested type: ::MagicalActual::Bard::orbusNetMethodIdx
    struct orbusNetMethodIdx;
    // Nested type: ::MagicalActual::Bard::arrowSpellIdx
    struct arrowSpellIdx;
    // Nested type: ::MagicalActual::Bard::$$c__DisplayClass112_0
    class $$c__DisplayClass112_0;
    // Nested type: ::MagicalActual::Bard::$$c
    class $$c;
    // Nested type: ::MagicalActual::Bard::$$c__DisplayClass135_0
    class $$c__DisplayClass135_0;
    // Nested type: ::MagicalActual::Bard::$$c__DisplayClass138_0
    class $$c__DisplayClass138_0;
    // Nested type: ::MagicalActual::Bard::$$c__DisplayClass138_1
    class $$c__DisplayClass138_1;
    // Nested type: ::MagicalActual::Bard::$$c__DisplayClass139_0
    class $$c__DisplayClass139_0;
    // Nested type: ::MagicalActual::Bard::$$c__DisplayClass142_0
    class $$c__DisplayClass142_0;
    public:
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x18
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private MagicalActual.NetEntity IJJGNKLFGJN
    // Size: 0x8
    // Offset: 0x20
    ::MagicalActual::NetEntity* IJJGNKLFGJN;
    // Field size check
    static_assert(sizeof(::MagicalActual::NetEntity*) == 0x8);
    // private System.Boolean HNFCLAFDJBD
    // Size: 0x1
    // Offset: 0x28
    bool HNFCLAFDJBD;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: HNFCLAFDJBD and: FNINBDEICCD
    char __padding2[0x7] = {};
    // private MagicalActual.PlayerClass FNINBDEICCD
    // Size: 0x8
    // Offset: 0x30
    ::MagicalActual::PlayerClass* FNINBDEICCD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerClass*) == 0x8);
    // private MagicalActual.PlayerAvatar EENJNFDNJBD
    // Size: 0x8
    // Offset: 0x38
    ::MagicalActual::PlayerAvatar* EENJNFDNJBD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerAvatar*) == 0x8);
    // private MagicalActual.PlayerCharacter HCFELEODBLD
    // Size: 0x8
    // Offset: 0x40
    ::MagicalActual::PlayerCharacter* HCFELEODBLD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerCharacter*) == 0x8);
    // private UnityEngine.GameObject CCEMBLKGKLN
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* CCEMBLKGKLN;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject GKJEHAKEABK
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* GKJEHAKEABK;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Int32 KHIKJLICKKF
    // Size: 0x4
    // Offset: 0x58
    int KHIKJLICKKF;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 FJPBNPLIKHA
    // Size: 0x4
    // Offset: 0x5C
    int FJPBNPLIKHA;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.GameObject primaryDrumstick
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* primaryDrumstick;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.BoxCollider primaryHitpoint
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::BoxCollider* primaryHitpoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::BoxCollider*) == 0x8);
    // public UnityEngine.GameObject secondaryDrumstick
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* secondaryDrumstick;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.BoxCollider secondaryHitpoint
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::BoxCollider* secondaryHitpoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::BoxCollider*) == 0x8);
    // public UnityEngine.GameObject superVfx
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::GameObject* superVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject drumstickHitVfx
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::GameObject* drumstickHitVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean GCCMBLOGLBA
    // Size: 0x1
    // Offset: 0x90
    bool GCCMBLOGLBA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean GHBBMIFHKGO
    // Size: 0x1
    // Offset: 0x91
    bool GHBBMIFHKGO;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean HIKIBDCNDAA
    // Size: 0x1
    // Offset: 0x92
    bool HIKIBDCNDAA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean IMNDEEOEOKA
    // Size: 0x1
    // Offset: 0x93
    bool IMNDEEOEOKA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single GNEEOPILHPG
    // Size: 0x4
    // Offset: 0x94
    float GNEEOPILHPG;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single DPKHHNAOFGK
    // Size: 0x4
    // Offset: 0x98
    float DPKHHNAOFGK;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean EJIGLMNDIGP
    // Size: 0x1
    // Offset: 0x9C
    bool EJIGLMNDIGP;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean PHBPMGGLGNG
    // Size: 0x1
    // Offset: 0x9D
    bool PHBPMGGLGNG;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: PHBPMGGLGNG and: JGOGJDHABHN
    char __padding23[0x2] = {};
    // private UnityEngine.Collider[] JGOGJDHABHN
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<::UnityEngine::Collider*> JGOGJDHABHN;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private UnityEngine.GameObject DNCIHIJBHKJ
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::GameObject* DNCIHIJBHKJ;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject CKAOHCBFDNE
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::GameObject* CKAOHCBFDNE;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single BGPBJLKNKOF
    // Size: 0x4
    // Offset: 0xB8
    float BGPBJLKNKOF;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single OBNBKDGGHCH
    // Size: 0x4
    // Offset: 0xBC
    float OBNBKDGGHCH;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single LCFDPJCNOCE
    // Size: 0x4
    // Offset: 0xC0
    float LCFDPJCNOCE;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean LEGOGAPELIM
    // Size: 0x1
    // Offset: 0xC4
    bool LEGOGAPELIM;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean PJCDEEBJDOO
    // Size: 0x1
    // Offset: 0xC5
    bool PJCDEEBJDOO;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: PJCDEEBJDOO and: MHBCOGCKEFA
    char __padding31[0x2] = {};
    // private System.Single MHBCOGCKEFA
    // Size: 0x4
    // Offset: 0xC8
    float MHBCOGCKEFA;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single EKPBFACIOCO
    // Size: 0x4
    // Offset: 0xCC
    float EKPBFACIOCO;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 FDAOFEJNPLG
    // Size: 0xC
    // Offset: 0xD0
    ::UnityEngine::Vector3 FDAOFEJNPLG;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 DBLEPIAFDLK
    // Size: 0xC
    // Offset: 0xDC
    ::UnityEngine::Vector3 DBLEPIAFDLK;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.GameObject FDDKNHICLPC
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::GameObject* FDDKNHICLPC;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject MEKBANNCELE
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::GameObject* MEKBANNCELE;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Material normalMaterial
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Material* normalMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material highlightedMaterial
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::Material* highlightedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.AudioSource metronome
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::AudioSource* metronome;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.GameObject[] instrumentBeltSlots
    // Size: 0x8
    // Offset: 0x110
    ::ArrayW<::UnityEngine::GameObject*> instrumentBeltSlots;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject[] instrumentNotchSlots
    // Size: 0x8
    // Offset: 0x118
    ::ArrayW<::UnityEngine::GameObject*> instrumentNotchSlots;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.AudioClip[] bardNotes
    // Size: 0x8
    // Offset: 0x120
    ::ArrayW<::UnityEngine::AudioClip*> bardNotes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // private System.Collections.Generic.List`1<MagicalActual.BardUpcomingNote> GGIGBCEHDDA
    // Size: 0x8
    // Offset: 0x128
    ::System::Collections::Generic::List_1<::MagicalActual::BardUpcomingNote*>* GGIGBCEHDDA;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::MagicalActual::BardUpcomingNote*>*) == 0x8);
    // private System.Collections.Generic.List`1<MagicalActual.BardUpcomingNote> EMJDBOHFGDB
    // Size: 0x8
    // Offset: 0x130
    ::System::Collections::Generic::List_1<::MagicalActual::BardUpcomingNote*>* EMJDBOHFGDB;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::MagicalActual::BardUpcomingNote*>*) == 0x8);
    // public UnityEngine.GameObject upcomingNotePrefab
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::GameObject* upcomingNotePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject upcomingNoteEmpoweredVfx
    // Size: 0x8
    // Offset: 0x140
    ::UnityEngine::GameObject* upcomingNoteEmpoweredVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject playSheet
    // Size: 0x8
    // Offset: 0x148
    ::UnityEngine::GameObject* playSheet;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject marimbaTarget
    // Size: 0x8
    // Offset: 0x150
    ::UnityEngine::GameObject* marimbaTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject marimba
    // Size: 0x8
    // Offset: 0x158
    ::UnityEngine::GameObject* marimba;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject notesContainer
    // Size: 0x8
    // Offset: 0x160
    ::UnityEngine::GameObject* notesContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.AudioSource instrumentAudio
    // Size: 0x8
    // Offset: 0x168
    ::UnityEngine::AudioSource* instrumentAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.Vector3 HBKOINHBHMO
    // Size: 0xC
    // Offset: 0x170
    ::UnityEngine::Vector3 HBKOINHBHMO;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 JCBHEJGOPMK
    // Size: 0xC
    // Offset: 0x17C
    ::UnityEngine::Vector3 JCBHEJGOPMK;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single LLHPAHEDGJE
    // Size: 0x4
    // Offset: 0x188
    float LLHPAHEDGJE;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single KKCOFOCGMNA
    // Size: 0x4
    // Offset: 0x18C
    float KKCOFOCGMNA;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single MADJGLIBBJD
    // Size: 0x4
    // Offset: 0x190
    float MADJGLIBBJD;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single PLEHPGBMBML
    // Size: 0x4
    // Offset: 0x194
    float PLEHPGBMBML;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 LIMJILMDFAP
    // Size: 0x4
    // Offset: 0x198
    int LIMJILMDFAP;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: LIMJILMDFAP and: AMBLPHONNND
    char __padding59[0x4] = {};
    // private System.Int32[] AMBLPHONNND
    // Size: 0x8
    // Offset: 0x1A0
    ::ArrayW<int> AMBLPHONNND;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> NMDANDPLOAJ
    // Size: 0x8
    // Offset: 0x1A8
    ::System::Collections::Generic::List_1<int>* NMDANDPLOAJ;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private MagicalActual.BardDrumstick JDBHDAOHMHI
    // Size: 0x8
    // Offset: 0x1B0
    ::MagicalActual::BardDrumstick* JDBHDAOHMHI;
    // Field size check
    static_assert(sizeof(::MagicalActual::BardDrumstick*) == 0x8);
    // private MagicalActual.BardDrumstick DLHBABGCAJG
    // Size: 0x8
    // Offset: 0x1B8
    ::MagicalActual::BardDrumstick* DLHBABGCAJG;
    // Field size check
    static_assert(sizeof(::MagicalActual::BardDrumstick*) == 0x8);
    // public UnityEngine.GameObject instrumentBeatVfx
    // Size: 0x8
    // Offset: 0x1C0
    ::UnityEngine::GameObject* instrumentBeatVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject notePlayedVfx
    // Size: 0x8
    // Offset: 0x1C8
    ::UnityEngine::GameObject* notePlayedVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject instrumentPulseVfx
    // Size: 0x8
    // Offset: 0x1D0
    ::UnityEngine::GameObject* instrumentPulseVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject instrumentCrescendoVfx
    // Size: 0x8
    // Offset: 0x1D8
    ::UnityEngine::GameObject* instrumentCrescendoVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject instrumentChargedVfx
    // Size: 0x8
    // Offset: 0x1E0
    ::UnityEngine::GameObject* instrumentChargedVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject HDMKCGKJCLA
    // Size: 0x8
    // Offset: 0x1E8
    ::UnityEngine::GameObject* HDMKCGKJCLA;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private MagicalActual.BardAvailableInstrument[] EFNLPOAHKHE
    // Size: 0x8
    // Offset: 0x1F0
    ::ArrayW<::MagicalActual::BardAvailableInstrument*> EFNLPOAHKHE;
    // Field size check
    static_assert(sizeof(::ArrayW<::MagicalActual::BardAvailableInstrument*>) == 0x8);
    // private System.Byte[] DONEMPDHLCA
    // Size: 0x8
    // Offset: 0x1F8
    ::ArrayW<uint8_t> DONEMPDHLCA;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private UnityEngine.Color[] NHAIGDALOAJ
    // Size: 0x8
    // Offset: 0x200
    ::ArrayW<::UnityEngine::Color> NHAIGDALOAJ;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // private System.Int32 CLMHOPCLBCA
    // Size: 0x4
    // Offset: 0x208
    int CLMHOPCLBCA;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 LFPGIJDBAHK
    // Size: 0x4
    // Offset: 0x20C
    int LFPGIJDBAHK;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single NGIFIEEOMPC
    // Size: 0x4
    // Offset: 0x210
    float NGIFIEEOMPC;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Byte AMEHAHENPCD
    // Size: 0x1
    // Offset: 0x214
    uint8_t AMEHAHENPCD;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte OPOBPKDLAHC
    // Size: 0x1
    // Offset: 0x215
    uint8_t OPOBPKDLAHC;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte OFLDKIABLBN
    // Size: 0x1
    // Offset: 0x216
    uint8_t OFLDKIABLBN;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte LONFMBGCIHF
    // Size: 0x1
    // Offset: 0x217
    uint8_t LONFMBGCIHF;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Single ENDIIBINMIP
    // Size: 0x4
    // Offset: 0x218
    float ENDIIBINMIP;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single OEHCCOFBGCC
    // Size: 0x4
    // Offset: 0x21C
    float OEHCCOFBGCC;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single MCKKMHLEFMB
    // Size: 0x4
    // Offset: 0x220
    float MCKKMHLEFMB;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single ICPOGEBJINM
    // Size: 0x4
    // Offset: 0x224
    float ICPOGEBJINM;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single MIEGKIECICO
    // Size: 0x4
    // Offset: 0x228
    float MIEGKIECICO;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean FMGBDHMKGMC
    // Size: 0x1
    // Offset: 0x22C
    bool FMGBDHMKGMC;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean KJBEENINAEI
    // Size: 0x1
    // Offset: 0x22D
    bool KJBEENINAEI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean LCMOOKALBHK
    // Size: 0x1
    // Offset: 0x22E
    bool LCMOOKALBHK;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean DKGLCBPJFID
    // Size: 0x1
    // Offset: 0x22F
    bool DKGLCBPJFID;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean KEDPADGIDOO
    // Size: 0x1
    // Offset: 0x230
    bool KEDPADGIDOO;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: KEDPADGIDOO and: songsToPlay
    char __padding89[0x3] = {};
    // public System.Int32 songsToPlay
    // Size: 0x4
    // Offset: 0x234
    int songsToPlay;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32[][] NBECOFNMLMP
    // Size: 0x8
    // Offset: 0x238
    ::ArrayW<::ArrayW<int>> NBECOFNMLMP;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<int>>) == 0x8);
    // private System.Int32[][] GAFKOPDCLMP
    // Size: 0x8
    // Offset: 0x240
    ::ArrayW<::ArrayW<int>> GAFKOPDCLMP;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<int>>) == 0x8);
    // private System.Int32[][] JDJNILJLAEC
    // Size: 0x8
    // Offset: 0x248
    ::ArrayW<::ArrayW<int>> JDJNILJLAEC;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<int>>) == 0x8);
    // private System.Int32[][] OBJDPCMMPDB
    // Size: 0x8
    // Offset: 0x250
    ::ArrayW<::ArrayW<int>> OBJDPCMMPDB;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<int>>) == 0x8);
    // private System.Int32[][] BCHPICCGBBK
    // Size: 0x8
    // Offset: 0x258
    ::ArrayW<::ArrayW<int>> BCHPICCGBBK;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<int>>) == 0x8);
    // private System.Int32[][] NOGDBABFEMJ
    // Size: 0x8
    // Offset: 0x260
    ::ArrayW<::ArrayW<int>> NOGDBABFEMJ;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<int>>) == 0x8);
    // private System.Int32[][] ABDMCBCMPFB
    // Size: 0x8
    // Offset: 0x268
    ::ArrayW<::ArrayW<int>> ABDMCBCMPFB;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<int>>) == 0x8);
    // private System.Int32[][] EOLLCBKONOD
    // Size: 0x8
    // Offset: 0x270
    ::ArrayW<::ArrayW<int>> EOLLCBKONOD;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<int>>) == 0x8);
    // private System.Int32[][] KFCGMPFAJAJ
    // Size: 0x8
    // Offset: 0x278
    ::ArrayW<::ArrayW<int>> KFCGMPFAJAJ;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<int>>) == 0x8);
    // private System.Int32[][] AJOJOJDHHDM
    // Size: 0x8
    // Offset: 0x280
    ::ArrayW<::ArrayW<int>> AJOJOJDHHDM;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<int>>) == 0x8);
    // private System.Int32[][] KGLNOIAIKJA
    // Size: 0x8
    // Offset: 0x288
    ::ArrayW<::ArrayW<int>> KGLNOIAIKJA;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<int>>) == 0x8);
    // private System.Int32[][] FOADAJHCHOD
    // Size: 0x8
    // Offset: 0x290
    ::ArrayW<::ArrayW<int>> FOADAJHCHOD;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<int>>) == 0x8);
    // private System.Int32[][][] CABCGFKDCBK
    // Size: 0x8
    // Offset: 0x298
    ::ArrayW<::ArrayW<::ArrayW<int>>> CABCGFKDCBK;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<::ArrayW<int>>>) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> CEAJKGCEAGL
    // Size: 0x8
    // Offset: 0x2A0
    ::System::Collections::Generic::List_1<int>* CEAJKGCEAGL;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Int32[] CIBDAONHMIO
    // Size: 0x8
    // Offset: 0x2A8
    ::ArrayW<int> CIBDAONHMIO;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IPlayerClass
    operator ::GlobalNamespace::IPlayerClass() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IPlayerClass*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: private MagicalActual.NetEntity IJJGNKLFGJN
    [[deprecated("Use field access instead!")]] ::MagicalActual::NetEntity*& dyn_IJJGNKLFGJN();
    // Get instance field reference: private System.Boolean HNFCLAFDJBD
    [[deprecated("Use field access instead!")]] bool& dyn_HNFCLAFDJBD();
    // Get instance field reference: private MagicalActual.PlayerClass FNINBDEICCD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerClass*& dyn_FNINBDEICCD();
    // Get instance field reference: private MagicalActual.PlayerAvatar EENJNFDNJBD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerAvatar*& dyn_EENJNFDNJBD();
    // Get instance field reference: private MagicalActual.PlayerCharacter HCFELEODBLD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerCharacter*& dyn_HCFELEODBLD();
    // Get instance field reference: private UnityEngine.GameObject CCEMBLKGKLN
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_CCEMBLKGKLN();
    // Get instance field reference: private UnityEngine.GameObject GKJEHAKEABK
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_GKJEHAKEABK();
    // Get instance field reference: private System.Int32 KHIKJLICKKF
    [[deprecated("Use field access instead!")]] int& dyn_KHIKJLICKKF();
    // Get instance field reference: private System.Int32 FJPBNPLIKHA
    [[deprecated("Use field access instead!")]] int& dyn_FJPBNPLIKHA();
    // Get instance field reference: public UnityEngine.GameObject primaryDrumstick
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_primaryDrumstick();
    // Get instance field reference: public UnityEngine.BoxCollider primaryHitpoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::BoxCollider*& dyn_primaryHitpoint();
    // Get instance field reference: public UnityEngine.GameObject secondaryDrumstick
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_secondaryDrumstick();
    // Get instance field reference: public UnityEngine.BoxCollider secondaryHitpoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::BoxCollider*& dyn_secondaryHitpoint();
    // Get instance field reference: public UnityEngine.GameObject superVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_superVfx();
    // Get instance field reference: public UnityEngine.GameObject drumstickHitVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_drumstickHitVfx();
    // Get instance field reference: private System.Boolean GCCMBLOGLBA
    [[deprecated("Use field access instead!")]] bool& dyn_GCCMBLOGLBA();
    // Get instance field reference: private System.Boolean GHBBMIFHKGO
    [[deprecated("Use field access instead!")]] bool& dyn_GHBBMIFHKGO();
    // Get instance field reference: private System.Boolean HIKIBDCNDAA
    [[deprecated("Use field access instead!")]] bool& dyn_HIKIBDCNDAA();
    // Get instance field reference: private System.Boolean IMNDEEOEOKA
    [[deprecated("Use field access instead!")]] bool& dyn_IMNDEEOEOKA();
    // Get instance field reference: private System.Single GNEEOPILHPG
    [[deprecated("Use field access instead!")]] float& dyn_GNEEOPILHPG();
    // Get instance field reference: private System.Single DPKHHNAOFGK
    [[deprecated("Use field access instead!")]] float& dyn_DPKHHNAOFGK();
    // Get instance field reference: private System.Boolean EJIGLMNDIGP
    [[deprecated("Use field access instead!")]] bool& dyn_EJIGLMNDIGP();
    // Get instance field reference: private System.Boolean PHBPMGGLGNG
    [[deprecated("Use field access instead!")]] bool& dyn_PHBPMGGLGNG();
    // Get instance field reference: private UnityEngine.Collider[] JGOGJDHABHN
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_JGOGJDHABHN();
    // Get instance field reference: private UnityEngine.GameObject DNCIHIJBHKJ
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_DNCIHIJBHKJ();
    // Get instance field reference: private UnityEngine.GameObject CKAOHCBFDNE
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_CKAOHCBFDNE();
    // Get instance field reference: private System.Single BGPBJLKNKOF
    [[deprecated("Use field access instead!")]] float& dyn_BGPBJLKNKOF();
    // Get instance field reference: private System.Single OBNBKDGGHCH
    [[deprecated("Use field access instead!")]] float& dyn_OBNBKDGGHCH();
    // Get instance field reference: private System.Single LCFDPJCNOCE
    [[deprecated("Use field access instead!")]] float& dyn_LCFDPJCNOCE();
    // Get instance field reference: private System.Boolean LEGOGAPELIM
    [[deprecated("Use field access instead!")]] bool& dyn_LEGOGAPELIM();
    // Get instance field reference: private System.Boolean PJCDEEBJDOO
    [[deprecated("Use field access instead!")]] bool& dyn_PJCDEEBJDOO();
    // Get instance field reference: private System.Single MHBCOGCKEFA
    [[deprecated("Use field access instead!")]] float& dyn_MHBCOGCKEFA();
    // Get instance field reference: private System.Single EKPBFACIOCO
    [[deprecated("Use field access instead!")]] float& dyn_EKPBFACIOCO();
    // Get instance field reference: private UnityEngine.Vector3 FDAOFEJNPLG
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_FDAOFEJNPLG();
    // Get instance field reference: private UnityEngine.Vector3 DBLEPIAFDLK
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_DBLEPIAFDLK();
    // Get instance field reference: private UnityEngine.GameObject FDDKNHICLPC
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_FDDKNHICLPC();
    // Get instance field reference: private UnityEngine.GameObject MEKBANNCELE
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_MEKBANNCELE();
    // Get instance field reference: public UnityEngine.Material normalMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_normalMaterial();
    // Get instance field reference: public UnityEngine.Material highlightedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_highlightedMaterial();
    // Get instance field reference: public UnityEngine.AudioSource metronome
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_metronome();
    // Get instance field reference: public UnityEngine.GameObject[] instrumentBeltSlots
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_instrumentBeltSlots();
    // Get instance field reference: public UnityEngine.GameObject[] instrumentNotchSlots
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_instrumentNotchSlots();
    // Get instance field reference: public UnityEngine.AudioClip[] bardNotes
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_bardNotes();
    // Get instance field reference: private System.Collections.Generic.List`1<MagicalActual.BardUpcomingNote> GGIGBCEHDDA
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::MagicalActual::BardUpcomingNote*>*& dyn_GGIGBCEHDDA();
    // Get instance field reference: private System.Collections.Generic.List`1<MagicalActual.BardUpcomingNote> EMJDBOHFGDB
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::MagicalActual::BardUpcomingNote*>*& dyn_EMJDBOHFGDB();
    // Get instance field reference: public UnityEngine.GameObject upcomingNotePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_upcomingNotePrefab();
    // Get instance field reference: public UnityEngine.GameObject upcomingNoteEmpoweredVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_upcomingNoteEmpoweredVfx();
    // Get instance field reference: public UnityEngine.GameObject playSheet
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_playSheet();
    // Get instance field reference: public UnityEngine.GameObject marimbaTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_marimbaTarget();
    // Get instance field reference: public UnityEngine.GameObject marimba
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_marimba();
    // Get instance field reference: public UnityEngine.GameObject notesContainer
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_notesContainer();
    // Get instance field reference: public UnityEngine.AudioSource instrumentAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_instrumentAudio();
    // Get instance field reference: private UnityEngine.Vector3 HBKOINHBHMO
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_HBKOINHBHMO();
    // Get instance field reference: private UnityEngine.Vector3 JCBHEJGOPMK
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_JCBHEJGOPMK();
    // Get instance field reference: private System.Single LLHPAHEDGJE
    [[deprecated("Use field access instead!")]] float& dyn_LLHPAHEDGJE();
    // Get instance field reference: private System.Single KKCOFOCGMNA
    [[deprecated("Use field access instead!")]] float& dyn_KKCOFOCGMNA();
    // Get instance field reference: private System.Single MADJGLIBBJD
    [[deprecated("Use field access instead!")]] float& dyn_MADJGLIBBJD();
    // Get instance field reference: private System.Single PLEHPGBMBML
    [[deprecated("Use field access instead!")]] float& dyn_PLEHPGBMBML();
    // Get instance field reference: private System.Int32 LIMJILMDFAP
    [[deprecated("Use field access instead!")]] int& dyn_LIMJILMDFAP();
    // Get instance field reference: private System.Int32[] AMBLPHONNND
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_AMBLPHONNND();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> NMDANDPLOAJ
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_NMDANDPLOAJ();
    // Get instance field reference: private MagicalActual.BardDrumstick JDBHDAOHMHI
    [[deprecated("Use field access instead!")]] ::MagicalActual::BardDrumstick*& dyn_JDBHDAOHMHI();
    // Get instance field reference: private MagicalActual.BardDrumstick DLHBABGCAJG
    [[deprecated("Use field access instead!")]] ::MagicalActual::BardDrumstick*& dyn_DLHBABGCAJG();
    // Get instance field reference: public UnityEngine.GameObject instrumentBeatVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_instrumentBeatVfx();
    // Get instance field reference: public UnityEngine.GameObject notePlayedVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_notePlayedVfx();
    // Get instance field reference: public UnityEngine.GameObject instrumentPulseVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_instrumentPulseVfx();
    // Get instance field reference: public UnityEngine.GameObject instrumentCrescendoVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_instrumentCrescendoVfx();
    // Get instance field reference: public UnityEngine.GameObject instrumentChargedVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_instrumentChargedVfx();
    // Get instance field reference: private UnityEngine.GameObject HDMKCGKJCLA
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_HDMKCGKJCLA();
    // Get instance field reference: private MagicalActual.BardAvailableInstrument[] EFNLPOAHKHE
    [[deprecated("Use field access instead!")]] ::ArrayW<::MagicalActual::BardAvailableInstrument*>& dyn_EFNLPOAHKHE();
    // Get instance field reference: private System.Byte[] DONEMPDHLCA
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_DONEMPDHLCA();
    // Get instance field reference: private UnityEngine.Color[] NHAIGDALOAJ
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn_NHAIGDALOAJ();
    // Get instance field reference: private System.Int32 CLMHOPCLBCA
    [[deprecated("Use field access instead!")]] int& dyn_CLMHOPCLBCA();
    // Get instance field reference: private System.Int32 LFPGIJDBAHK
    [[deprecated("Use field access instead!")]] int& dyn_LFPGIJDBAHK();
    // Get instance field reference: private System.Single NGIFIEEOMPC
    [[deprecated("Use field access instead!")]] float& dyn_NGIFIEEOMPC();
    // Get instance field reference: private System.Byte AMEHAHENPCD
    [[deprecated("Use field access instead!")]] uint8_t& dyn_AMEHAHENPCD();
    // Get instance field reference: private System.Byte OPOBPKDLAHC
    [[deprecated("Use field access instead!")]] uint8_t& dyn_OPOBPKDLAHC();
    // Get instance field reference: private System.Byte OFLDKIABLBN
    [[deprecated("Use field access instead!")]] uint8_t& dyn_OFLDKIABLBN();
    // Get instance field reference: private System.Byte LONFMBGCIHF
    [[deprecated("Use field access instead!")]] uint8_t& dyn_LONFMBGCIHF();
    // Get instance field reference: private System.Single ENDIIBINMIP
    [[deprecated("Use field access instead!")]] float& dyn_ENDIIBINMIP();
    // Get instance field reference: private System.Single OEHCCOFBGCC
    [[deprecated("Use field access instead!")]] float& dyn_OEHCCOFBGCC();
    // Get instance field reference: private System.Single MCKKMHLEFMB
    [[deprecated("Use field access instead!")]] float& dyn_MCKKMHLEFMB();
    // Get instance field reference: private System.Single ICPOGEBJINM
    [[deprecated("Use field access instead!")]] float& dyn_ICPOGEBJINM();
    // Get instance field reference: private System.Single MIEGKIECICO
    [[deprecated("Use field access instead!")]] float& dyn_MIEGKIECICO();
    // Get instance field reference: private System.Boolean FMGBDHMKGMC
    [[deprecated("Use field access instead!")]] bool& dyn_FMGBDHMKGMC();
    // Get instance field reference: private System.Boolean KJBEENINAEI
    [[deprecated("Use field access instead!")]] bool& dyn_KJBEENINAEI();
    // Get instance field reference: private System.Boolean LCMOOKALBHK
    [[deprecated("Use field access instead!")]] bool& dyn_LCMOOKALBHK();
    // Get instance field reference: private System.Boolean DKGLCBPJFID
    [[deprecated("Use field access instead!")]] bool& dyn_DKGLCBPJFID();
    // Get instance field reference: private System.Boolean KEDPADGIDOO
    [[deprecated("Use field access instead!")]] bool& dyn_KEDPADGIDOO();
    // Get instance field reference: public System.Int32 songsToPlay
    [[deprecated("Use field access instead!")]] int& dyn_songsToPlay();
    // Get instance field reference: private System.Int32[][] NBECOFNMLMP
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<int>>& dyn_NBECOFNMLMP();
    // Get instance field reference: private System.Int32[][] GAFKOPDCLMP
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<int>>& dyn_GAFKOPDCLMP();
    // Get instance field reference: private System.Int32[][] JDJNILJLAEC
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<int>>& dyn_JDJNILJLAEC();
    // Get instance field reference: private System.Int32[][] OBJDPCMMPDB
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<int>>& dyn_OBJDPCMMPDB();
    // Get instance field reference: private System.Int32[][] BCHPICCGBBK
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<int>>& dyn_BCHPICCGBBK();
    // Get instance field reference: private System.Int32[][] NOGDBABFEMJ
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<int>>& dyn_NOGDBABFEMJ();
    // Get instance field reference: private System.Int32[][] ABDMCBCMPFB
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<int>>& dyn_ABDMCBCMPFB();
    // Get instance field reference: private System.Int32[][] EOLLCBKONOD
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<int>>& dyn_EOLLCBKONOD();
    // Get instance field reference: private System.Int32[][] KFCGMPFAJAJ
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<int>>& dyn_KFCGMPFAJAJ();
    // Get instance field reference: private System.Int32[][] AJOJOJDHHDM
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<int>>& dyn_AJOJOJDHHDM();
    // Get instance field reference: private System.Int32[][] KGLNOIAIKJA
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<int>>& dyn_KGLNOIAIKJA();
    // Get instance field reference: private System.Int32[][] FOADAJHCHOD
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<int>>& dyn_FOADAJHCHOD();
    // Get instance field reference: private System.Int32[][][] CABCGFKDCBK
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<::ArrayW<int>>>& dyn_CABCGFKDCBK();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> CEAJKGCEAGL
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_CEAJKGCEAGL();
    // Get instance field reference: private System.Int32[] CIBDAONHMIO
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_CIBDAONHMIO();
    // public System.Void RegisterNoteHit(System.Int32 BKNPEIFMMED, UnityEngine.GameObject FAGNENKIBBE)
    // Offset: 0x10E1A0C
    void RegisterNoteHit(int BKNPEIFMMED, ::UnityEngine::GameObject* FAGNENKIBBE);
    // public System.Void CHIJJJNKGGA()
    // Offset: 0x10E1CC4
    void CHIJJJNKGGA();
    // public System.Void HitEnemyWithDrumstick(UnityEngine.GameObject GBAIPIDNCFN)
    // Offset: 0x10E1E7C
    void HitEnemyWithDrumstick(::UnityEngine::GameObject* GBAIPIDNCFN);
    // private System.Void EnablePrimaryWeapon()
    // Offset: 0x10E1FD4
    void EnablePrimaryWeapon();
    // private System.Void SwitchWeaponHand(System.Byte DBJMBLGLHIH)
    // Offset: 0x10E2078
    void SwitchWeaponHand(uint8_t DBJMBLGLHIH);
    // public UnityEngine.GameObject GetWeaponSkin()
    // Offset: 0x10E2218
    ::UnityEngine::GameObject* GetWeaponSkin();
    // private System.Void HOBOFHOGGJM(System.Object OMLPNCLFFMJ)
    // Offset: 0x10E2390
    void HOBOFHOGGJM(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void NAPFPPAKHEK(System.Byte DBJMBLGLHIH)
    // Offset: 0x10E2C9C
    void NAPFPPAKHEK(uint8_t DBJMBLGLHIH);
    // private System.Void JNPKHCMCLLE(System.Object OMLPNCLFFMJ)
    // Offset: 0x10E2E24
    void JNPKHCMCLLE(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void MEDKNCDPBLB()
    // Offset: 0x10E3590
    void MEDKNCDPBLB();
    // private System.Void DisablePrimaryWeapon()
    // Offset: 0x10E3748
    void DisablePrimaryWeapon();
    // private System.Void DAGNFKCMALJ()
    // Offset: 0x10E37E0
    void DAGNFKCMALJ();
    // public System.Void EEACFLELIJO()
    // Offset: 0x10E3888
    void EEACFLELIJO();
    // private System.Void MMMCAOPFDCC()
    // Offset: 0x10E3C40
    void MMMCAOPFDCC();
    // public System.Void BLBKOOGJNBB(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x10E3D4C
    void BLBKOOGJNBB(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void GOHMGMBJFJF()
    // Offset: 0x10E4234
    void GOHMGMBJFJF();
    // public System.Void LFLAPMEDCOA()
    // Offset: 0x10E4238
    void LFLAPMEDCOA();
    // public System.Void WeaponAdjusted()
    // Offset: 0x10E45E8
    void WeaponAdjusted();
    // private System.Void Update()
    // Offset: 0x10E45EC
    void Update();
    // private System.Void IBLPNGBFOKH(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x10E55FC
    void IBLPNGBFOKH(::System::Collections::ArrayList* HPEANAHIBAH);
    // public System.Void EKKGDAADPOD()
    // Offset: 0x10E58E4
    void EKKGDAADPOD();
    // private System.Void JFGPDACIMEE(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x10E63DC
    void JFGPDACIMEE(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void AKGFEENGKJD()
    // Offset: 0x10E659C
    void AKGFEENGKJD();
    // private System.Void OnDisable()
    // Offset: 0x10E69A0
    void OnDisable();
    // private System.Void GBCHLGNALEH(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x10E6AC8
    void GBCHLGNALEH(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // public System.Void orbusNetCleanup(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x10E6C84
    void orbusNetCleanup(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void NOILMDCNNNB(System.Object OMLPNCLFFMJ)
    // Offset: 0x10E6CBC
    void NOILMDCNNNB(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void JENLPKILHLL()
    // Offset: 0x10E7404
    void JENLPKILHLL();
    // public System.Void NotchArrow(System.Byte HGIGDEMGOOD, System.Byte ABLOIPMGEJL)
    // Offset: 0x10E7408
    void NotchArrow(uint8_t HGIGDEMGOOD, uint8_t ABLOIPMGEJL);
    // public System.Void UpdateClassBar()
    // Offset: 0x10E76D0
    void UpdateClassBar();
    // private System.Void JOPNMLLACLJ(System.Int32 ILGFBCKCOIC)
    // Offset: 0x10E787C
    void JOPNMLLACLJ(int ILGFBCKCOIC);
    // private MagicalActual.BardUpcomingNote FCPBNLIIMHG(System.Int32 ENJLGOOCDBP, System.Int32 LOLMICKDKOI)
    // Offset: 0x10E508C
    ::MagicalActual::BardUpcomingNote* FCPBNLIIMHG(int ENJLGOOCDBP, int LOLMICKDKOI);
    // public System.Void ClassDisabled()
    // Offset: 0x10E7AE4
    void ClassDisabled();
    // private System.Void CLHDPAHNKLE()
    // Offset: 0x10E7AE8
    void CLHDPAHNKLE();
    // private System.Void PMIBPDFLKJG(System.Object OMLPNCLFFMJ)
    // Offset: 0x10E7B94
    void PMIBPDFLKJG(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Boolean CIBDJNJGODA()
    // Offset: 0x10E7C00
    bool CIBDJNJGODA();
    // private System.Void DisableSecondaryWeapon()
    // Offset: 0x10E6A30
    void DisableSecondaryWeapon();
    // private System.Void BJBBOFANGHC(System.Object OMLPNCLFFMJ)
    // Offset: 0x10E7D4C
    void BJBBOFANGHC(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void KACCJNANDNG(System.Object OMLPNCLFFMJ)
    // Offset: 0x10E7DB8
    void KACCJNANDNG(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void SuperStatusChange(System.Boolean AALBHOKGIOD)
    // Offset: 0x10E7E24
    void SuperStatusChange(bool AALBHOKGIOD);
    // private System.Void HGKNGMNBLKI(MagicalActual.BardInstrument HFKFJOFFDEI)
    // Offset: 0x10E7E90
    void HGKNGMNBLKI(::MagicalActual::BardInstrument* HFKFJOFFDEI);
    // public System.Void ToggleAdjustWeapon()
    // Offset: 0x10E851C
    void ToggleAdjustWeapon();
    // private System.Void GKIOLADOCOK()
    // Offset: 0x10E88CC
    void GKIOLADOCOK();
    // private System.Void CCBFJODGEMO(System.Object OMLPNCLFFMJ)
    // Offset: 0x10E8CD0
    void CCBFJODGEMO(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void MKLBHNFDNAP(System.Object OMLPNCLFFMJ)
    // Offset: 0x10E8FE8
    void MKLBHNFDNAP(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void ClassEnabled()
    // Offset: 0x10E9054
    void ClassEnabled();
    // private System.Void FixedUpdate()
    // Offset: 0x10E91A8
    void FixedUpdate();
    // private System.Void BHBFEEJHKIH()
    // Offset: 0x10EA4E0
    void BHBFEEJHKIH();
    // private System.Void JGLFFCLEJGL(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x10EBAE8
    void JGLFFCLEJGL(::System::Collections::ArrayList* HPEANAHIBAH);
    // public System.Void KJKLNIHLPCE(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x10EBDC0
    void KJKLNIHLPCE(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void JICAGFOCJEK(System.Object OMLPNCLFFMJ)
    // Offset: 0x10EBDF8
    void JICAGFOCJEK(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void OnDestroy()
    // Offset: 0x10EBE64
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x10EBF30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Bard* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::Bard::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Bard*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x10F0060
    void Awake();
    // public UnityEngine.GameObject GetWeaponObject()
    // Offset: 0x10E3C38
    ::UnityEngine::GameObject* GetWeaponObject();
    // private System.Void ABAEJCLJNKH()
    // Offset: 0x10E23FC
    void ABAEJCLJNKH();
    // private System.Void ENIGECPOHND(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x10F0AC4
    void ENIGECPOHND(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void AIAHOBKFOEF(MagicalActual.BardInstrument HFKFJOFFDEI)
    // Offset: 0x10EB7F4
    void AIAHOBKFOEF(::MagicalActual::BardInstrument* HFKFJOFFDEI);
    // private System.Void DNFJMGOPGHO(System.Object OMLPNCLFFMJ)
    // Offset: 0x10F0DD4
    void DNFJMGOPGHO(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void OIKPPCNHGFD()
    // Offset: 0x10F0E40
    void OIKPPCNHGFD();
    // public System.Void HLAAJOHNFMN()
    // Offset: 0x10F0E44
    void HLAAJOHNFMN();
    // public System.Void IPGENFAMKPJ()
    // Offset: 0x10F0F10
    void IPGENFAMKPJ();
    // private System.Void IEAKMOHIBDD()
    // Offset: 0x10E7C40
    void IEAKMOHIBDD();
    // private System.Void EDCJCJMPHKB(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x10F1064
    void EDCJCJMPHKB(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void PIBJEJOFODE(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x10F1200
    void PIBJEJOFODE(::System::Collections::ArrayList* HPEANAHIBAH);
    // public System.Void PKBGMHHGHGM()
    // Offset: 0x10F134C
    void PKBGMHHGHGM();
    // private System.Void DAONAMDOIDK()
    // Offset: 0x10F14A0
    void DAONAMDOIDK();
    // private System.Void AEMOOHBIDOE()
    // Offset: 0x10E5D34
    void AEMOOHBIDOE();
    // private System.Void GPCIJNEHADK()
    // Offset: 0x10F0404
    void GPCIJNEHADK();
    // public System.Void HMOLDKPHLJI()
    // Offset: 0x10F1538
    void HMOLDKPHLJI();
    // private System.Void APGLAGFHADF()
    // Offset: 0x10F153C
    void APGLAGFHADF();
    // public System.Void AvatarEquipmentChanged()
    // Offset: 0x10F15D8
    void AvatarEquipmentChanged();
    // public System.Void orbusNetInit(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x10F19FC
    void orbusNetInit(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void Start()
    // Offset: 0x10F1EB4
    void Start();
    // private System.Void DMFLKOPHBIE(System.Int32 GBHMFJAKAIK)
    // Offset: 0x10E8518
    void DMFLKOPHBIE(int GBHMFJAKAIK);
    // private System.Void HLADAFPELPM(System.Object OMLPNCLFFMJ)
    // Offset: 0x10F22B0
    void HLADAFPELPM(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void KHHKDNFNGNN(System.Object OMLPNCLFFMJ)
    // Offset: 0x10F2334
    void KHHKDNFNGNN(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void EnableSecondaryWeapon()
    // Offset: 0x10F23A0
    void EnableSecondaryWeapon();
    // private System.Void DHHLILCLKDC(System.Object OMLPNCLFFMJ)
    // Offset: 0x10F2444
    void DHHLILCLKDC(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void FAMCDCBPGNG()
    // Offset: 0x10F2760
    void FAMCDCBPGNG();
  }; // MagicalActual.Bard
  #pragma pack(pop)
  static check_size<sizeof(Bard), 680 + sizeof(::ArrayW<int>)> __MagicalActual_BardSizeCheck;
  static_assert(sizeof(Bard) == 0x2B0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::Bard::RegisterNoteHit
// Il2CppName: RegisterNoteHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(int, ::UnityEngine::GameObject*)>(&MagicalActual::Bard::RegisterNoteHit)> {
  static const MethodInfo* get() {
    static auto* BKNPEIFMMED = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* FAGNENKIBBE = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "RegisterNoteHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BKNPEIFMMED, FAGNENKIBBE});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::CHIJJJNKGGA
// Il2CppName: CHIJJJNKGGA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::CHIJJJNKGGA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "CHIJJJNKGGA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::HitEnemyWithDrumstick
// Il2CppName: HitEnemyWithDrumstick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::UnityEngine::GameObject*)>(&MagicalActual::Bard::HitEnemyWithDrumstick)> {
  static const MethodInfo* get() {
    static auto* GBAIPIDNCFN = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "HitEnemyWithDrumstick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GBAIPIDNCFN});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::EnablePrimaryWeapon
// Il2CppName: EnablePrimaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::EnablePrimaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "EnablePrimaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::SwitchWeaponHand
// Il2CppName: SwitchWeaponHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(uint8_t)>(&MagicalActual::Bard::SwitchWeaponHand)> {
  static const MethodInfo* get() {
    static auto* DBJMBLGLHIH = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "SwitchWeaponHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{DBJMBLGLHIH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::GetWeaponSkin
// Il2CppName: GetWeaponSkin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Bard::*)()>(&MagicalActual::Bard::GetWeaponSkin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "GetWeaponSkin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::HOBOFHOGGJM
// Il2CppName: HOBOFHOGGJM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*)>(&MagicalActual::Bard::HOBOFHOGGJM)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "HOBOFHOGGJM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::NAPFPPAKHEK
// Il2CppName: NAPFPPAKHEK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(uint8_t)>(&MagicalActual::Bard::NAPFPPAKHEK)> {
  static const MethodInfo* get() {
    static auto* DBJMBLGLHIH = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "NAPFPPAKHEK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{DBJMBLGLHIH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::JNPKHCMCLLE
// Il2CppName: JNPKHCMCLLE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*)>(&MagicalActual::Bard::JNPKHCMCLLE)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "JNPKHCMCLLE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::MEDKNCDPBLB
// Il2CppName: MEDKNCDPBLB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::MEDKNCDPBLB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "MEDKNCDPBLB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::DisablePrimaryWeapon
// Il2CppName: DisablePrimaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::DisablePrimaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "DisablePrimaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::DAGNFKCMALJ
// Il2CppName: DAGNFKCMALJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::DAGNFKCMALJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "DAGNFKCMALJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::EEACFLELIJO
// Il2CppName: EEACFLELIJO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::EEACFLELIJO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "EEACFLELIJO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::MMMCAOPFDCC
// Il2CppName: MMMCAOPFDCC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::MMMCAOPFDCC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "MMMCAOPFDCC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::BLBKOOGJNBB
// Il2CppName: BLBKOOGJNBB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Bard::BLBKOOGJNBB)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "BLBKOOGJNBB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::GOHMGMBJFJF
// Il2CppName: GOHMGMBJFJF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::GOHMGMBJFJF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "GOHMGMBJFJF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::LFLAPMEDCOA
// Il2CppName: LFLAPMEDCOA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::LFLAPMEDCOA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "LFLAPMEDCOA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::WeaponAdjusted
// Il2CppName: WeaponAdjusted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::WeaponAdjusted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "WeaponAdjusted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::IBLPNGBFOKH
// Il2CppName: IBLPNGBFOKH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::System::Collections::ArrayList*)>(&MagicalActual::Bard::IBLPNGBFOKH)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "IBLPNGBFOKH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::EKKGDAADPOD
// Il2CppName: EKKGDAADPOD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::EKKGDAADPOD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "EKKGDAADPOD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::JFGPDACIMEE
// Il2CppName: JFGPDACIMEE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Bard::JFGPDACIMEE)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "JFGPDACIMEE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::AKGFEENGKJD
// Il2CppName: AKGFEENGKJD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::AKGFEENGKJD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "AKGFEENGKJD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::GBCHLGNALEH
// Il2CppName: GBCHLGNALEH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Bard::GBCHLGNALEH)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "GBCHLGNALEH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::orbusNetCleanup
// Il2CppName: orbusNetCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Bard::orbusNetCleanup)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "orbusNetCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::NOILMDCNNNB
// Il2CppName: NOILMDCNNNB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*)>(&MagicalActual::Bard::NOILMDCNNNB)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "NOILMDCNNNB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::JENLPKILHLL
// Il2CppName: JENLPKILHLL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::JENLPKILHLL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "JENLPKILHLL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::NotchArrow
// Il2CppName: NotchArrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(uint8_t, uint8_t)>(&MagicalActual::Bard::NotchArrow)> {
  static const MethodInfo* get() {
    static auto* HGIGDEMGOOD = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* ABLOIPMGEJL = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "NotchArrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HGIGDEMGOOD, ABLOIPMGEJL});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::UpdateClassBar
// Il2CppName: UpdateClassBar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::UpdateClassBar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "UpdateClassBar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::JOPNMLLACLJ
// Il2CppName: JOPNMLLACLJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(int)>(&MagicalActual::Bard::JOPNMLLACLJ)> {
  static const MethodInfo* get() {
    static auto* ILGFBCKCOIC = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "JOPNMLLACLJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ILGFBCKCOIC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::FCPBNLIIMHG
// Il2CppName: FCPBNLIIMHG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::BardUpcomingNote* (MagicalActual::Bard::*)(int, int)>(&MagicalActual::Bard::FCPBNLIIMHG)> {
  static const MethodInfo* get() {
    static auto* ENJLGOOCDBP = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* LOLMICKDKOI = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "FCPBNLIIMHG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ENJLGOOCDBP, LOLMICKDKOI});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::ClassDisabled
// Il2CppName: ClassDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::ClassDisabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "ClassDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::CLHDPAHNKLE
// Il2CppName: CLHDPAHNKLE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::CLHDPAHNKLE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "CLHDPAHNKLE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::PMIBPDFLKJG
// Il2CppName: PMIBPDFLKJG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*)>(&MagicalActual::Bard::PMIBPDFLKJG)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "PMIBPDFLKJG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::CIBDJNJGODA
// Il2CppName: CIBDJNJGODA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Bard::*)()>(&MagicalActual::Bard::CIBDJNJGODA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "CIBDJNJGODA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::DisableSecondaryWeapon
// Il2CppName: DisableSecondaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::DisableSecondaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "DisableSecondaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::BJBBOFANGHC
// Il2CppName: BJBBOFANGHC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*)>(&MagicalActual::Bard::BJBBOFANGHC)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "BJBBOFANGHC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::KACCJNANDNG
// Il2CppName: KACCJNANDNG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*)>(&MagicalActual::Bard::KACCJNANDNG)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "KACCJNANDNG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::SuperStatusChange
// Il2CppName: SuperStatusChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(bool)>(&MagicalActual::Bard::SuperStatusChange)> {
  static const MethodInfo* get() {
    static auto* AALBHOKGIOD = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "SuperStatusChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AALBHOKGIOD});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::HGKNGMNBLKI
// Il2CppName: HGKNGMNBLKI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::MagicalActual::BardInstrument*)>(&MagicalActual::Bard::HGKNGMNBLKI)> {
  static const MethodInfo* get() {
    static auto* HFKFJOFFDEI = &::il2cpp_utils::GetClassFromName("MagicalActual", "BardInstrument")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "HGKNGMNBLKI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HFKFJOFFDEI});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::ToggleAdjustWeapon
// Il2CppName: ToggleAdjustWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::ToggleAdjustWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "ToggleAdjustWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::GKIOLADOCOK
// Il2CppName: GKIOLADOCOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::GKIOLADOCOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "GKIOLADOCOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::CCBFJODGEMO
// Il2CppName: CCBFJODGEMO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*)>(&MagicalActual::Bard::CCBFJODGEMO)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "CCBFJODGEMO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::MKLBHNFDNAP
// Il2CppName: MKLBHNFDNAP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*)>(&MagicalActual::Bard::MKLBHNFDNAP)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "MKLBHNFDNAP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::ClassEnabled
// Il2CppName: ClassEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::ClassEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "ClassEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::BHBFEEJHKIH
// Il2CppName: BHBFEEJHKIH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::BHBFEEJHKIH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "BHBFEEJHKIH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::JGLFFCLEJGL
// Il2CppName: JGLFFCLEJGL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::System::Collections::ArrayList*)>(&MagicalActual::Bard::JGLFFCLEJGL)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "JGLFFCLEJGL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::KJKLNIHLPCE
// Il2CppName: KJKLNIHLPCE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Bard::KJKLNIHLPCE)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "KJKLNIHLPCE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::JICAGFOCJEK
// Il2CppName: JICAGFOCJEK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*)>(&MagicalActual::Bard::JICAGFOCJEK)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "JICAGFOCJEK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::Bard::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::GetWeaponObject
// Il2CppName: GetWeaponObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Bard::*)()>(&MagicalActual::Bard::GetWeaponObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "GetWeaponObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::ABAEJCLJNKH
// Il2CppName: ABAEJCLJNKH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::ABAEJCLJNKH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "ABAEJCLJNKH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::ENIGECPOHND
// Il2CppName: ENIGECPOHND
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Bard::ENIGECPOHND)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "ENIGECPOHND", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::AIAHOBKFOEF
// Il2CppName: AIAHOBKFOEF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::MagicalActual::BardInstrument*)>(&MagicalActual::Bard::AIAHOBKFOEF)> {
  static const MethodInfo* get() {
    static auto* HFKFJOFFDEI = &::il2cpp_utils::GetClassFromName("MagicalActual", "BardInstrument")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "AIAHOBKFOEF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HFKFJOFFDEI});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::DNFJMGOPGHO
// Il2CppName: DNFJMGOPGHO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*)>(&MagicalActual::Bard::DNFJMGOPGHO)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "DNFJMGOPGHO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::OIKPPCNHGFD
// Il2CppName: OIKPPCNHGFD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::OIKPPCNHGFD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "OIKPPCNHGFD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::HLAAJOHNFMN
// Il2CppName: HLAAJOHNFMN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::HLAAJOHNFMN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "HLAAJOHNFMN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::IPGENFAMKPJ
// Il2CppName: IPGENFAMKPJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::IPGENFAMKPJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "IPGENFAMKPJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::IEAKMOHIBDD
// Il2CppName: IEAKMOHIBDD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::IEAKMOHIBDD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "IEAKMOHIBDD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::EDCJCJMPHKB
// Il2CppName: EDCJCJMPHKB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::System::Collections::ArrayList*)>(&MagicalActual::Bard::EDCJCJMPHKB)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "EDCJCJMPHKB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::PIBJEJOFODE
// Il2CppName: PIBJEJOFODE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::System::Collections::ArrayList*)>(&MagicalActual::Bard::PIBJEJOFODE)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "PIBJEJOFODE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::PKBGMHHGHGM
// Il2CppName: PKBGMHHGHGM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::PKBGMHHGHGM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "PKBGMHHGHGM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::DAONAMDOIDK
// Il2CppName: DAONAMDOIDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::DAONAMDOIDK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "DAONAMDOIDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::AEMOOHBIDOE
// Il2CppName: AEMOOHBIDOE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::AEMOOHBIDOE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "AEMOOHBIDOE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::GPCIJNEHADK
// Il2CppName: GPCIJNEHADK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::GPCIJNEHADK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "GPCIJNEHADK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::HMOLDKPHLJI
// Il2CppName: HMOLDKPHLJI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::HMOLDKPHLJI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "HMOLDKPHLJI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::APGLAGFHADF
// Il2CppName: APGLAGFHADF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::APGLAGFHADF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "APGLAGFHADF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::AvatarEquipmentChanged
// Il2CppName: AvatarEquipmentChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::AvatarEquipmentChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "AvatarEquipmentChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::orbusNetInit
// Il2CppName: orbusNetInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Bard::orbusNetInit)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "orbusNetInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::DMFLKOPHBIE
// Il2CppName: DMFLKOPHBIE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(int)>(&MagicalActual::Bard::DMFLKOPHBIE)> {
  static const MethodInfo* get() {
    static auto* GBHMFJAKAIK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "DMFLKOPHBIE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GBHMFJAKAIK});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::HLADAFPELPM
// Il2CppName: HLADAFPELPM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*)>(&MagicalActual::Bard::HLADAFPELPM)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "HLADAFPELPM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::KHHKDNFNGNN
// Il2CppName: KHHKDNFNGNN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*)>(&MagicalActual::Bard::KHHKDNFNGNN)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "KHHKDNFNGNN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::EnableSecondaryWeapon
// Il2CppName: EnableSecondaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::EnableSecondaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "EnableSecondaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::DHHLILCLKDC
// Il2CppName: DHHLILCLKDC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)(::Il2CppObject*)>(&MagicalActual::Bard::DHHLILCLKDC)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "DHHLILCLKDC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Bard::FAMCDCBPGNG
// Il2CppName: FAMCDCBPGNG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Bard::*)()>(&MagicalActual::Bard::FAMCDCBPGNG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Bard*), "FAMCDCBPGNG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
