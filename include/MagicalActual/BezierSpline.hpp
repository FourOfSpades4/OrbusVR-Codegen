// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BezierControlPointMode
#include "GlobalNamespace/BezierControlPointMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LTBezierPath
  class LTBezierPath;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: BezierSpline
  class BezierSpline;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::BezierSpline);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::BezierSpline*, "MagicalActual", "BezierSpline");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.BezierSpline
  // [TokenAttribute] Offset: FFFFFFFF
  class BezierSpline : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Boolean loop
    // Size: 0x1
    // Offset: 0x18
    bool loop;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: loop and: points
    char __padding0[0x7] = {};
    // private UnityEngine.Vector3[] points
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Vector3> points;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private BezierControlPointMode[] modes
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::BezierControlPointMode> modes;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::BezierControlPointMode>) == 0x8);
    // private LTBezierPath OOKDKGKHION
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::LTBezierPath* OOKDKGKHION;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LTBezierPath*) == 0x8);
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean loop
    [[deprecated("Use field access instead!")]] bool& dyn_loop();
    // Get instance field reference: private UnityEngine.Vector3[] points
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_points();
    // Get instance field reference: private BezierControlPointMode[] modes
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BezierControlPointMode>& dyn_modes();
    // Get instance field reference: private LTBezierPath OOKDKGKHION
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LTBezierPath*& dyn_OOKDKGKHION();
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // public System.Boolean get_Loop()
    // Offset: 0x1CA9DBC
    bool get_Loop();
    // private System.Void KLIFJKHODFL(System.Int32 FEHDKJKGNCE)
    // Offset: 0x1CA9DC4
    void KLIFJKHODFL(int FEHDKJKGNCE);
    // public UnityEngine.Vector3 NENHAHHOBNG(System.Single FFNMEJOKJID)
    // Offset: 0x1CAA468
    ::UnityEngine::Vector3 NENHAHHOBNG(float FFNMEJOKJID);
    // public System.Int32 MMJIIOINHHK()
    // Offset: 0x1CAA7D4
    int MMJIIOINHHK();
    // public LTBezierPath GetLTBezierPath()
    // Offset: 0x1CAA800
    ::GlobalNamespace::LTBezierPath* GetLTBezierPath();
    // public System.Void NHJOEDDDLDF()
    // Offset: 0x1CAAC34
    void NHJOEDDDLDF();
    // public System.Void FFLHIDNIAFO()
    // Offset: 0x1CAAE24
    void FFLHIDNIAFO();
    // private System.Void CALEKEANINO(System.Int32 FEHDKJKGNCE)
    // Offset: 0x1CAB018
    void CALEKEANINO(int FEHDKJKGNCE);
    // private System.Void FGJDPFAAKOM()
    // Offset: 0x1CAB214
    void FGJDPFAAKOM();
    // public System.Boolean HFPNHNDEFHE()
    // Offset: 0x1CAB378
    bool HFPNHNDEFHE();
    // public System.Void PLCMCCHIMMF()
    // Offset: 0x1CAB380
    void PLCMCCHIMMF();
    // public UnityEngine.Vector3 OIPKPGEHPGA(System.Single FFNMEJOKJID)
    // Offset: 0x1CAB578
    ::UnityEngine::Vector3 OIPKPGEHPGA(float FFNMEJOKJID);
    // public UnityEngine.Vector3 CKDFPLBIKNI(System.Single FFNMEJOKJID)
    // Offset: 0x1CAB8D0
    ::UnityEngine::Vector3 CKDFPLBIKNI(float FFNMEJOKJID);
    // private System.Void FEBDFIGNLOL(System.Int32 FEHDKJKGNCE)
    // Offset: 0x1CABBC8
    void FEBDFIGNLOL(int FEHDKJKGNCE);
    // public System.Void HGNHDMGDMGH()
    // Offset: 0x1CABEB8
    void HGNHDMGDMGH();
    // public System.Int32 ADMPIIFFNDB()
    // Offset: 0x1CAC930
    int ADMPIIFFNDB();
    // public System.Void PHFKDPKCDCP(System.Int32 FEHDKJKGNCE, UnityEngine.Vector3 EENBBLBIKAL)
    // Offset: 0x1CAC96C
    void PHFKDPKCDCP(int FEHDKJKGNCE, ::UnityEngine::Vector3 EENBBLBIKAL);
    // public System.Boolean LCPAABCDBGM()
    // Offset: 0x1CACF44
    bool LCPAABCDBGM();
    // public System.Void set_Loop(System.Boolean MMMEIONJJFJ)
    // Offset: 0x1CACF4C
    void set_Loop(bool MMMEIONJJFJ);
    // public UnityEngine.Vector3 NFACJIJGCEG(System.Single FFNMEJOKJID)
    // Offset: 0x1CAD630
    ::UnityEngine::Vector3 NFACJIJGCEG(float FFNMEJOKJID);
    // public UnityEngine.Vector3 GetVelocity(System.Single FFNMEJOKJID)
    // Offset: 0x1CAB5A8
    ::UnityEngine::Vector3 GetVelocity(float FFNMEJOKJID);
    // public System.Boolean JGIKCGCBMLD()
    // Offset: 0x1CAD8DC
    bool JGIKCGCBMLD();
    // private System.Void HEGFGHKOINN()
    // Offset: 0x1CAA824
    void HEGFGHKOINN();
    // private System.Void Update()
    // Offset: 0x1CAD8E4
    void Update();
    // public System.Void Reset()
    // Offset: 0x1CADA48
    void Reset();
    // public UnityEngine.Vector3 GetControlPoint(System.Int32 FEHDKJKGNCE)
    // Offset: 0x1CADC0C
    ::UnityEngine::Vector3 GetControlPoint(int FEHDKJKGNCE);
    // public UnityEngine.Vector3 NGNDMJIEDKK(System.Single FFNMEJOKJID)
    // Offset: 0x1CADC68
    ::UnityEngine::Vector3 NGNDMJIEDKK(float FFNMEJOKJID);
    // private System.Void MJKAGCAKHHO()
    // Offset: 0x1CADC98
    void MJKAGCAKHHO();
    // public BezierControlPointMode GetControlPointMode(System.Int32 FEHDKJKGNCE)
    // Offset: 0x1CADDFC
    ::GlobalNamespace::BezierControlPointMode GetControlPointMode(int FEHDKJKGNCE);
    // public BezierControlPointMode EKPADKLEMJL(System.Int32 FEHDKJKGNCE)
    // Offset: 0x1CADE6C
    ::GlobalNamespace::BezierControlPointMode EKPADKLEMJL(int FEHDKJKGNCE);
    // public System.Int32 get_CurveCount()
    // Offset: 0x1CABB80
    int get_CurveCount();
    // public System.Int32 KPAADGLGEAM()
    // Offset: 0x1CAA794
    int KPAADGLGEAM();
    // public System.Void IBBDHJMDIFN(System.Int32 FEHDKJKGNCE, UnityEngine.Vector3 EENBBLBIKAL)
    // Offset: 0x1CADEB0
    void IBBDHJMDIFN(int FEHDKJKGNCE, ::UnityEngine::Vector3 EENBBLBIKAL);
    // public LTBezierPath NPMFBLMHLMO()
    // Offset: 0x1CAE4A4
    ::GlobalNamespace::LTBezierPath* NPMFBLMHLMO();
    // private System.Void PKLDGKBPOAP()
    // Offset: 0x1CAE4C8
    void PKLDGKBPOAP();
    // public System.Void SetControlPoint(System.Int32 FEHDKJKGNCE, UnityEngine.Vector3 EENBBLBIKAL)
    // Offset: 0x1CAD03C
    void SetControlPoint(int FEHDKJKGNCE, ::UnityEngine::Vector3 EENBBLBIKAL);
    // public UnityEngine.Vector3 GetPoint(System.Single FFNMEJOKJID)
    // Offset: 0x1CAE61C
    ::UnityEngine::Vector3 GetPoint(float FFNMEJOKJID);
    // public System.Boolean CAOOKMPPLII()
    // Offset: 0x1CAE8C0
    bool CAOOKMPPLII();
    // public UnityEngine.Vector3 MAPLDBHGBLG(System.Single FFNMEJOKJID)
    // Offset: 0x1CAE8C8
    ::UnityEngine::Vector3 MAPLDBHGBLG(float FFNMEJOKJID);
    // public UnityEngine.Vector3 GetDirection(System.Single FFNMEJOKJID)
    // Offset: 0x1CAEB74
    ::UnityEngine::Vector3 GetDirection(float FFNMEJOKJID);
    // public System.Boolean CIBAFIABCFJ()
    // Offset: 0x1CAEBA4
    bool CIBAFIABCFJ();
    // public System.Void DPLBHHOJFJN(System.Int32 FEHDKJKGNCE, BezierControlPointMode GFAHKBFCGKK)
    // Offset: 0x1CAEBAC
    void DPLBHHOJFJN(int FEHDKJKGNCE, ::GlobalNamespace::BezierControlPointMode GFAHKBFCGKK);
    // public LTBezierPath EABDPIOJCMN()
    // Offset: 0x1CAECDC
    ::GlobalNamespace::LTBezierPath* EABDPIOJCMN();
    // public System.Void CHCNFFMBLBH()
    // Offset: 0x1CAED00
    void CHCNFFMBLBH();
    // public System.Void .ctor()
    // Offset: 0x1CAEEF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BezierSpline* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::BezierSpline::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BezierSpline*, creationType>()));
    }
    // public LTBezierPath PMKFNBJDEMO()
    // Offset: 0x1CAEEFC
    ::GlobalNamespace::LTBezierPath* PMKFNBJDEMO();
    // private System.Void FIFJOKHJHHL(System.Int32 FEHDKJKGNCE)
    // Offset: 0x1CAC558
    void FIFJOKHJHHL(int FEHDKJKGNCE);
    // private System.Void KKIMMIKDCOB()
    // Offset: 0x1CAA0A4
    void KKIMMIKDCOB();
    // public UnityEngine.Vector3 IFFGKJIMMPJ(System.Int32 FEHDKJKGNCE)
    // Offset: 0x1CAEF20
    ::UnityEngine::Vector3 IFFGKJIMMPJ(int FEHDKJKGNCE);
    // public System.Int32 get_ControlPointCount()
    // Offset: 0x1CAEF7C
    int get_ControlPointCount();
    // private System.Void LJOGIPIJIPF()
    // Offset: 0x1CAEFA8
    void LJOGIPIJIPF();
    // public UnityEngine.Vector3 DOPODAMEGDN(System.Int32 FEHDKJKGNCE)
    // Offset: 0x1CAF0FC
    ::UnityEngine::Vector3 DOPODAMEGDN(int FEHDKJKGNCE);
    // public UnityEngine.Vector3 LHHNOCNJGGH(System.Single FFNMEJOKJID)
    // Offset: 0x1CAF158
    ::UnityEngine::Vector3 LHHNOCNJGGH(float FFNMEJOKJID);
    // public System.Int32 NCNGJBMIPEO()
    // Offset: 0x1CAF188
    int NCNGJBMIPEO();
    // public System.Void AddCurve()
    // Offset: 0x1CAF1B4
    void AddCurve();
    // public System.Void SetControlPointMode(System.Int32 FEHDKJKGNCE, BezierControlPointMode GFAHKBFCGKK)
    // Offset: 0x1CAF59C
    void SetControlPointMode(int FEHDKJKGNCE, ::GlobalNamespace::BezierControlPointMode GFAHKBFCGKK);
    // private System.Void HOMCOGDAGBB(System.Int32 FEHDKJKGNCE)
    // Offset: 0x1CAC268
    void HOMCOGDAGBB(int FEHDKJKGNCE);
    // public BezierControlPointMode ANGMPNALHIO(System.Int32 FEHDKJKGNCE)
    // Offset: 0x1CAF6D0
    ::GlobalNamespace::BezierControlPointMode ANGMPNALHIO(int FEHDKJKGNCE);
  }; // MagicalActual.BezierSpline
  #pragma pack(pop)
  static check_size<sizeof(BezierSpline), 56 + sizeof(::UnityEngine::Transform*)> __MagicalActual_BezierSplineSizeCheck;
  static_assert(sizeof(BezierSpline) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::BezierSpline::get_Loop
// Il2CppName: get_Loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::get_Loop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "get_Loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::KLIFJKHODFL
// Il2CppName: KLIFJKHODFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)(int)>(&MagicalActual::BezierSpline::KLIFJKHODFL)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "KLIFJKHODFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::NENHAHHOBNG
// Il2CppName: NENHAHHOBNG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MagicalActual::BezierSpline::*)(float)>(&MagicalActual::BezierSpline::NENHAHHOBNG)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "NENHAHHOBNG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::MMJIIOINHHK
// Il2CppName: MMJIIOINHHK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::MMJIIOINHHK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "MMJIIOINHHK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::GetLTBezierPath
// Il2CppName: GetLTBezierPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTBezierPath* (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::GetLTBezierPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "GetLTBezierPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::NHJOEDDDLDF
// Il2CppName: NHJOEDDDLDF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::NHJOEDDDLDF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "NHJOEDDDLDF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::FFLHIDNIAFO
// Il2CppName: FFLHIDNIAFO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::FFLHIDNIAFO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "FFLHIDNIAFO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::CALEKEANINO
// Il2CppName: CALEKEANINO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)(int)>(&MagicalActual::BezierSpline::CALEKEANINO)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "CALEKEANINO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::FGJDPFAAKOM
// Il2CppName: FGJDPFAAKOM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::FGJDPFAAKOM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "FGJDPFAAKOM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::HFPNHNDEFHE
// Il2CppName: HFPNHNDEFHE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::HFPNHNDEFHE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "HFPNHNDEFHE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::PLCMCCHIMMF
// Il2CppName: PLCMCCHIMMF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::PLCMCCHIMMF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "PLCMCCHIMMF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::OIPKPGEHPGA
// Il2CppName: OIPKPGEHPGA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MagicalActual::BezierSpline::*)(float)>(&MagicalActual::BezierSpline::OIPKPGEHPGA)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "OIPKPGEHPGA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::CKDFPLBIKNI
// Il2CppName: CKDFPLBIKNI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MagicalActual::BezierSpline::*)(float)>(&MagicalActual::BezierSpline::CKDFPLBIKNI)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "CKDFPLBIKNI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::FEBDFIGNLOL
// Il2CppName: FEBDFIGNLOL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)(int)>(&MagicalActual::BezierSpline::FEBDFIGNLOL)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "FEBDFIGNLOL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::HGNHDMGDMGH
// Il2CppName: HGNHDMGDMGH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::HGNHDMGDMGH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "HGNHDMGDMGH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::ADMPIIFFNDB
// Il2CppName: ADMPIIFFNDB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::ADMPIIFFNDB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "ADMPIIFFNDB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::PHFKDPKCDCP
// Il2CppName: PHFKDPKCDCP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)(int, ::UnityEngine::Vector3)>(&MagicalActual::BezierSpline::PHFKDPKCDCP)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* EENBBLBIKAL = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "PHFKDPKCDCP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE, EENBBLBIKAL});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::LCPAABCDBGM
// Il2CppName: LCPAABCDBGM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::LCPAABCDBGM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "LCPAABCDBGM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::set_Loop
// Il2CppName: set_Loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)(bool)>(&MagicalActual::BezierSpline::set_Loop)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "set_Loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::NFACJIJGCEG
// Il2CppName: NFACJIJGCEG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MagicalActual::BezierSpline::*)(float)>(&MagicalActual::BezierSpline::NFACJIJGCEG)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "NFACJIJGCEG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::GetVelocity
// Il2CppName: GetVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MagicalActual::BezierSpline::*)(float)>(&MagicalActual::BezierSpline::GetVelocity)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "GetVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::JGIKCGCBMLD
// Il2CppName: JGIKCGCBMLD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::JGIKCGCBMLD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "JGIKCGCBMLD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::HEGFGHKOINN
// Il2CppName: HEGFGHKOINN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::HEGFGHKOINN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "HEGFGHKOINN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::GetControlPoint
// Il2CppName: GetControlPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MagicalActual::BezierSpline::*)(int)>(&MagicalActual::BezierSpline::GetControlPoint)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "GetControlPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::NGNDMJIEDKK
// Il2CppName: NGNDMJIEDKK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MagicalActual::BezierSpline::*)(float)>(&MagicalActual::BezierSpline::NGNDMJIEDKK)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "NGNDMJIEDKK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::MJKAGCAKHHO
// Il2CppName: MJKAGCAKHHO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::MJKAGCAKHHO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "MJKAGCAKHHO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::GetControlPointMode
// Il2CppName: GetControlPointMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BezierControlPointMode (MagicalActual::BezierSpline::*)(int)>(&MagicalActual::BezierSpline::GetControlPointMode)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "GetControlPointMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::EKPADKLEMJL
// Il2CppName: EKPADKLEMJL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BezierControlPointMode (MagicalActual::BezierSpline::*)(int)>(&MagicalActual::BezierSpline::EKPADKLEMJL)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "EKPADKLEMJL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::get_CurveCount
// Il2CppName: get_CurveCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::get_CurveCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "get_CurveCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::KPAADGLGEAM
// Il2CppName: KPAADGLGEAM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::KPAADGLGEAM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "KPAADGLGEAM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::IBBDHJMDIFN
// Il2CppName: IBBDHJMDIFN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)(int, ::UnityEngine::Vector3)>(&MagicalActual::BezierSpline::IBBDHJMDIFN)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* EENBBLBIKAL = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "IBBDHJMDIFN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE, EENBBLBIKAL});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::NPMFBLMHLMO
// Il2CppName: NPMFBLMHLMO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTBezierPath* (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::NPMFBLMHLMO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "NPMFBLMHLMO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::PKLDGKBPOAP
// Il2CppName: PKLDGKBPOAP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::PKLDGKBPOAP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "PKLDGKBPOAP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::SetControlPoint
// Il2CppName: SetControlPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)(int, ::UnityEngine::Vector3)>(&MagicalActual::BezierSpline::SetControlPoint)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* EENBBLBIKAL = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "SetControlPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE, EENBBLBIKAL});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MagicalActual::BezierSpline::*)(float)>(&MagicalActual::BezierSpline::GetPoint)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::CAOOKMPPLII
// Il2CppName: CAOOKMPPLII
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::CAOOKMPPLII)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "CAOOKMPPLII", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::MAPLDBHGBLG
// Il2CppName: MAPLDBHGBLG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MagicalActual::BezierSpline::*)(float)>(&MagicalActual::BezierSpline::MAPLDBHGBLG)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "MAPLDBHGBLG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::GetDirection
// Il2CppName: GetDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MagicalActual::BezierSpline::*)(float)>(&MagicalActual::BezierSpline::GetDirection)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "GetDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::CIBAFIABCFJ
// Il2CppName: CIBAFIABCFJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::CIBAFIABCFJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "CIBAFIABCFJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::DPLBHHOJFJN
// Il2CppName: DPLBHHOJFJN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)(int, ::GlobalNamespace::BezierControlPointMode)>(&MagicalActual::BezierSpline::DPLBHHOJFJN)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* GFAHKBFCGKK = &::il2cpp_utils::GetClassFromName("", "BezierControlPointMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "DPLBHHOJFJN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE, GFAHKBFCGKK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::EABDPIOJCMN
// Il2CppName: EABDPIOJCMN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTBezierPath* (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::EABDPIOJCMN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "EABDPIOJCMN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::CHCNFFMBLBH
// Il2CppName: CHCNFFMBLBH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::CHCNFFMBLBH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "CHCNFFMBLBH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::BezierSpline::PMKFNBJDEMO
// Il2CppName: PMKFNBJDEMO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LTBezierPath* (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::PMKFNBJDEMO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "PMKFNBJDEMO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::FIFJOKHJHHL
// Il2CppName: FIFJOKHJHHL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)(int)>(&MagicalActual::BezierSpline::FIFJOKHJHHL)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "FIFJOKHJHHL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::KKIMMIKDCOB
// Il2CppName: KKIMMIKDCOB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::KKIMMIKDCOB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "KKIMMIKDCOB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::IFFGKJIMMPJ
// Il2CppName: IFFGKJIMMPJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MagicalActual::BezierSpline::*)(int)>(&MagicalActual::BezierSpline::IFFGKJIMMPJ)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "IFFGKJIMMPJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::get_ControlPointCount
// Il2CppName: get_ControlPointCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::get_ControlPointCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "get_ControlPointCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::LJOGIPIJIPF
// Il2CppName: LJOGIPIJIPF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::LJOGIPIJIPF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "LJOGIPIJIPF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::DOPODAMEGDN
// Il2CppName: DOPODAMEGDN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MagicalActual::BezierSpline::*)(int)>(&MagicalActual::BezierSpline::DOPODAMEGDN)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "DOPODAMEGDN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::LHHNOCNJGGH
// Il2CppName: LHHNOCNJGGH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MagicalActual::BezierSpline::*)(float)>(&MagicalActual::BezierSpline::LHHNOCNJGGH)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "LHHNOCNJGGH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::NCNGJBMIPEO
// Il2CppName: NCNGJBMIPEO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::NCNGJBMIPEO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "NCNGJBMIPEO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::AddCurve
// Il2CppName: AddCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)()>(&MagicalActual::BezierSpline::AddCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "AddCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::SetControlPointMode
// Il2CppName: SetControlPointMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)(int, ::GlobalNamespace::BezierControlPointMode)>(&MagicalActual::BezierSpline::SetControlPointMode)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* GFAHKBFCGKK = &::il2cpp_utils::GetClassFromName("", "BezierControlPointMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "SetControlPointMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE, GFAHKBFCGKK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::HOMCOGDAGBB
// Il2CppName: HOMCOGDAGBB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSpline::*)(int)>(&MagicalActual::BezierSpline::HOMCOGDAGBB)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "HOMCOGDAGBB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSpline::ANGMPNALHIO
// Il2CppName: ANGMPNALHIO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BezierControlPointMode (MagicalActual::BezierSpline::*)(int)>(&MagicalActual::BezierSpline::ANGMPNALHIO)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSpline*), "ANGMPNALHIO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE});
  }
};
