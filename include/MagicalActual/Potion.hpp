// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: CodeStage.AntiCheat.ObscuredTypes.ObFlt
#include "CodeStage/AntiCheat/ObscuredTypes/ObFlt.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: PlayerTool
  class PlayerTool;
  // Forward declaring type: Grabber
  class Grabber;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Potion
  class Potion;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::Potion);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::Potion*, "MagicalActual", "Potion");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.Potion
  // [TokenAttribute] Offset: FFFFFFFF
  class Potion : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MagicalActual.PlayerTool FKJHGIFOJKD
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::PlayerTool* FKJHGIFOJKD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerTool*) == 0x8);
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt IDDEBCMAEKE
    // Size: 0x19
    // Offset: 0x20
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt IDDEBCMAEKE;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: IDDEBCMAEKE and: BKFKLPFALOK
    char __padding1[0x7] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt BKFKLPFALOK
    // Size: 0x19
    // Offset: 0x40
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt BKFKLPFALOK;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: BKFKLPFALOK and: IMAFJMEOHIF
    char __padding2[0x7] = {};
    // private System.Boolean IMAFJMEOHIF
    // Size: 0x1
    // Offset: 0x60
    bool IMAFJMEOHIF;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IMAFJMEOHIF and: GHPLEIOBCOD
    char __padding3[0x7] = {};
    // private UnityEngine.AudioSource GHPLEIOBCOD
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AudioSource* GHPLEIOBCOD;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.Transform MGIJGHBFFOO
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* MGIJGHBFFOO;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform MCMMBMHCCNL
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Transform* MCMMBMHCCNL;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.ParticleSystem stream
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::ParticleSystem* stream;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MagicalActual.PlayerTool FKJHGIFOJKD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerTool*& dyn_FKJHGIFOJKD();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt IDDEBCMAEKE
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_IDDEBCMAEKE();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt BKFKLPFALOK
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_BKFKLPFALOK();
    // Get instance field reference: private System.Boolean IMAFJMEOHIF
    [[deprecated("Use field access instead!")]] bool& dyn_IMAFJMEOHIF();
    // Get instance field reference: private UnityEngine.AudioSource GHPLEIOBCOD
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_GHPLEIOBCOD();
    // Get instance field reference: private UnityEngine.Transform MGIJGHBFFOO
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_MGIJGHBFFOO();
    // Get instance field reference: private UnityEngine.Transform MCMMBMHCCNL
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_MCMMBMHCCNL();
    // Get instance field reference: public UnityEngine.ParticleSystem stream
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_stream();
    // private System.Void FGGKEEKHDHN()
    // Offset: 0x1B08134
    void FGGKEEKHDHN();
    // private System.Void DDJINHIPKCE()
    // Offset: 0x1B0872C
    void DDJINHIPKCE();
    // private System.Void HDMHEDEGDFD()
    // Offset: 0x1B08D24
    void HDMHEDEGDFD();
    // private System.Void AMIPIMKIJMO()
    // Offset: 0x1B08D7C
    void AMIPIMKIJMO();
    // private System.Void ICEGDGKAIIB()
    // Offset: 0x1B09374
    void ICEGDGKAIIB();
    // private System.Void PhysicsInteractableGrip(MagicalActual.Grabber FOIEAOKBGLM)
    // Offset: 0x1B09970
    void PhysicsInteractableGrip(::MagicalActual::Grabber* FOIEAOKBGLM);
    // private System.Void EMPNNPKBHFO(MagicalActual.Grabber FOIEAOKBGLM)
    // Offset: 0x1B09A28
    void EMPNNPKBHFO(::MagicalActual::Grabber* FOIEAOKBGLM);
    // private System.Void BIICHFIBGEK()
    // Offset: 0x1B09AE0
    void BIICHFIBGEK();
    // private System.Void Start()
    // Offset: 0x1B09D0C
    void Start();
    // private System.Void EIIKFEMCNKM()
    // Offset: 0x1B09E58
    void EIIKFEMCNKM();
    // private System.Void GGPFEOEOBPH(MagicalActual.Grabber FOIEAOKBGLM)
    // Offset: 0x1B09FA4
    void GGPFEOEOBPH(::MagicalActual::Grabber* FOIEAOKBGLM);
    // private System.Void JPHNAIDIBKL()
    // Offset: 0x1B0A05C
    void JPHNAIDIBKL();
    // public System.Void .ctor()
    // Offset: 0x1B0A658
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Potion* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::Potion::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Potion*, creationType>()));
    }
    // private System.Void BIMCNDAFFJC()
    // Offset: 0x1B0A718
    void BIMCNDAFFJC();
    // private System.Void JCOEAIILOND()
    // Offset: 0x1B0AD14
    void JCOEAIILOND();
    // private System.Void EIFLPHNNCPC(MagicalActual.Grabber FOIEAOKBGLM)
    // Offset: 0x1B0B308
    void EIFLPHNNCPC(::MagicalActual::Grabber* FOIEAOKBGLM);
    // private System.Void NLFOPEAGLDJ()
    // Offset: 0x1B0B3C0
    void NLFOPEAGLDJ();
    // private System.Void PFKPOGPEBJP(MagicalActual.Grabber FOIEAOKBGLM)
    // Offset: 0x1B0B9B8
    void PFKPOGPEBJP(::MagicalActual::Grabber* FOIEAOKBGLM);
    // private System.Void PhysicsInteractableUngrip(MagicalActual.Grabber FOIEAOKBGLM)
    // Offset: 0x1B0BA70
    void PhysicsInteractableUngrip(::MagicalActual::Grabber* FOIEAOKBGLM);
    // private System.Void IPIFMKAGODD()
    // Offset: 0x1B0BB28
    void IPIFMKAGODD();
    // private System.Void FixedUpdate()
    // Offset: 0x1B0BC74
    void FixedUpdate();
    // private System.Void Drink()
    // Offset: 0x1B0C258
    void Drink();
    // private System.Void Awake()
    // Offset: 0x1B0C478
    void Awake();
    // private System.Void DIFLEMCKKEJ(MagicalActual.Grabber FOIEAOKBGLM)
    // Offset: 0x1B0C4D0
    void DIFLEMCKKEJ(::MagicalActual::Grabber* FOIEAOKBGLM);
    // private System.Void ABONCNLHCMP(MagicalActual.Grabber FOIEAOKBGLM)
    // Offset: 0x1B0C588
    void ABONCNLHCMP(::MagicalActual::Grabber* FOIEAOKBGLM);
    // private System.Void AGOBDBDGJKD()
    // Offset: 0x1B0C640
    void AGOBDBDGJKD();
    // private System.Void GPFBGGFPINB()
    // Offset: 0x1B0CC3C
    void GPFBGGFPINB();
  }; // MagicalActual.Potion
  #pragma pack(pop)
  static check_size<sizeof(Potion), 128 + sizeof(::UnityEngine::ParticleSystem*)> __MagicalActual_PotionSizeCheck;
  static_assert(sizeof(Potion) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::Potion::FGGKEEKHDHN
// Il2CppName: FGGKEEKHDHN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::FGGKEEKHDHN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "FGGKEEKHDHN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::DDJINHIPKCE
// Il2CppName: DDJINHIPKCE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::DDJINHIPKCE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "DDJINHIPKCE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::HDMHEDEGDFD
// Il2CppName: HDMHEDEGDFD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::HDMHEDEGDFD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "HDMHEDEGDFD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::AMIPIMKIJMO
// Il2CppName: AMIPIMKIJMO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::AMIPIMKIJMO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "AMIPIMKIJMO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::ICEGDGKAIIB
// Il2CppName: ICEGDGKAIIB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::ICEGDGKAIIB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "ICEGDGKAIIB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::PhysicsInteractableGrip
// Il2CppName: PhysicsInteractableGrip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)(::MagicalActual::Grabber*)>(&MagicalActual::Potion::PhysicsInteractableGrip)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "PhysicsInteractableGrip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::EMPNNPKBHFO
// Il2CppName: EMPNNPKBHFO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)(::MagicalActual::Grabber*)>(&MagicalActual::Potion::EMPNNPKBHFO)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "EMPNNPKBHFO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::BIICHFIBGEK
// Il2CppName: BIICHFIBGEK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::BIICHFIBGEK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "BIICHFIBGEK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::EIIKFEMCNKM
// Il2CppName: EIIKFEMCNKM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::EIIKFEMCNKM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "EIIKFEMCNKM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::GGPFEOEOBPH
// Il2CppName: GGPFEOEOBPH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)(::MagicalActual::Grabber*)>(&MagicalActual::Potion::GGPFEOEOBPH)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "GGPFEOEOBPH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::JPHNAIDIBKL
// Il2CppName: JPHNAIDIBKL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::JPHNAIDIBKL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "JPHNAIDIBKL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::Potion::BIMCNDAFFJC
// Il2CppName: BIMCNDAFFJC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::BIMCNDAFFJC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "BIMCNDAFFJC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::JCOEAIILOND
// Il2CppName: JCOEAIILOND
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::JCOEAIILOND)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "JCOEAIILOND", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::EIFLPHNNCPC
// Il2CppName: EIFLPHNNCPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)(::MagicalActual::Grabber*)>(&MagicalActual::Potion::EIFLPHNNCPC)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "EIFLPHNNCPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::NLFOPEAGLDJ
// Il2CppName: NLFOPEAGLDJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::NLFOPEAGLDJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "NLFOPEAGLDJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::PFKPOGPEBJP
// Il2CppName: PFKPOGPEBJP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)(::MagicalActual::Grabber*)>(&MagicalActual::Potion::PFKPOGPEBJP)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "PFKPOGPEBJP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::PhysicsInteractableUngrip
// Il2CppName: PhysicsInteractableUngrip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)(::MagicalActual::Grabber*)>(&MagicalActual::Potion::PhysicsInteractableUngrip)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "PhysicsInteractableUngrip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::IPIFMKAGODD
// Il2CppName: IPIFMKAGODD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::IPIFMKAGODD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "IPIFMKAGODD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::Drink
// Il2CppName: Drink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::Drink)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "Drink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::DIFLEMCKKEJ
// Il2CppName: DIFLEMCKKEJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)(::MagicalActual::Grabber*)>(&MagicalActual::Potion::DIFLEMCKKEJ)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "DIFLEMCKKEJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::ABONCNLHCMP
// Il2CppName: ABONCNLHCMP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)(::MagicalActual::Grabber*)>(&MagicalActual::Potion::ABONCNLHCMP)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "ABONCNLHCMP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::AGOBDBDGJKD
// Il2CppName: AGOBDBDGJKD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::AGOBDBDGJKD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "AGOBDBDGJKD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Potion::GPFBGGFPINB
// Il2CppName: GPFBGGFPINB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Potion::*)()>(&MagicalActual::Potion::GPFBGGFPINB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Potion*), "GPFBGGFPINB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
