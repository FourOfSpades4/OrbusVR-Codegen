// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: PlayerTool
  class PlayerTool;
  // Forward declaring type: ToolController
  class ToolController;
  // Forward declaring type: DynamicPlayerMap
  class DynamicPlayerMap;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: NetGun
  class NetGun;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::NetGun);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::NetGun*, "MagicalActual", "NetGun");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.NetGun
  // [TokenAttribute] Offset: FFFFFFFF
  class NetGun : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MagicalActual.PlayerTool FKJHGIFOJKD
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::PlayerTool* FKJHGIFOJKD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerTool*) == 0x8);
    // private UnityEngine.GameObject netAsset
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* netAsset;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject hornEffectAsset
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* hornEffectAsset;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private MagicalActual.ToolController controllerOverride
    // Size: 0x8
    // Offset: 0x30
    ::MagicalActual::ToolController* controllerOverride;
    // Field size check
    static_assert(sizeof(::MagicalActual::ToolController*) == 0x8);
    // private UnityEngine.Transform firePoint
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* firePoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.AudioSource fireAudio
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AudioSource* fireAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.Transform horn
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* horn;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single NDDFHGIAMMB
    // Size: 0x4
    // Offset: 0x50
    float NDDFHGIAMMB;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: NDDFHGIAMMB and: OOAIOOMLGHB
    char __padding7[0x4] = {};
    // private MagicalActual.DynamicPlayerMap OOAIOOMLGHB
    // Size: 0x8
    // Offset: 0x58
    ::MagicalActual::DynamicPlayerMap* OOAIOOMLGHB;
    // Field size check
    static_assert(sizeof(::MagicalActual::DynamicPlayerMap*) == 0x8);
    // private System.Boolean DMPLJDFFIIK
    // Size: 0x1
    // Offset: 0x60
    bool DMPLJDFFIIK;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MagicalActual.PlayerTool FKJHGIFOJKD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerTool*& dyn_FKJHGIFOJKD();
    // Get instance field reference: private UnityEngine.GameObject netAsset
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_netAsset();
    // Get instance field reference: private UnityEngine.GameObject hornEffectAsset
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_hornEffectAsset();
    // Get instance field reference: private MagicalActual.ToolController controllerOverride
    [[deprecated("Use field access instead!")]] ::MagicalActual::ToolController*& dyn_controllerOverride();
    // Get instance field reference: private UnityEngine.Transform firePoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_firePoint();
    // Get instance field reference: private UnityEngine.AudioSource fireAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_fireAudio();
    // Get instance field reference: private UnityEngine.Transform horn
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_horn();
    // Get instance field reference: private System.Single NDDFHGIAMMB
    [[deprecated("Use field access instead!")]] float& dyn_NDDFHGIAMMB();
    // Get instance field reference: private MagicalActual.DynamicPlayerMap OOAIOOMLGHB
    [[deprecated("Use field access instead!")]] ::MagicalActual::DynamicPlayerMap*& dyn_OOAIOOMLGHB();
    // Get instance field reference: private System.Boolean DMPLJDFFIIK
    [[deprecated("Use field access instead!")]] bool& dyn_DMPLJDFFIIK();
    // private System.Void ABBNBBPDILC(System.Byte KLIPNGBEELK)
    // Offset: 0x1953854
    void ABBNBBPDILC(uint8_t KLIPNGBEELK);
    // private System.Void SignalReceived(System.Byte KLIPNGBEELK)
    // Offset: 0x1953B9C
    void SignalReceived(uint8_t KLIPNGBEELK);
    // public System.Void GGAEIIGNAIP()
    // Offset: 0x1954048
    void GGAEIIGNAIP();
    // private System.Void MHHFAOGFAPO()
    // Offset: 0x19541D0
    void MHHFAOGFAPO();
    // public System.Void ANMCDPKJDOP()
    // Offset: 0x195444C
    void ANMCDPKJDOP();
    // public System.Void LAJFGOMIMAG()
    // Offset: 0x1954480
    void LAJFGOMIMAG();
    // private System.Void GKIOLADOCOK()
    // Offset: 0x19544B4
    void GKIOLADOCOK();
    // private System.Void EENPJGOEBNB(System.Byte KLIPNGBEELK)
    // Offset: 0x1954548
    void EENPJGOEBNB(uint8_t KLIPNGBEELK);
    // public System.Void GIPKFDANCPN()
    // Offset: 0x19549F8
    void GIPKFDANCPN();
    // private System.Void EBNFNLMHNGE()
    // Offset: 0x1954A2C
    void EBNFNLMHNGE();
    // public System.Void FJEHAKONAGB()
    // Offset: 0x1954B20
    void FJEHAKONAGB();
    // private System.Void Update()
    // Offset: 0x1954CA8
    void Update();
    // public System.Void GPGECANBCKA()
    // Offset: 0x19542C4
    void GPGECANBCKA();
    // public System.Void FireNetGun()
    // Offset: 0x1954F18
    void FireNetGun();
    // private System.Void BPEFOMJJHKO()
    // Offset: 0x1954F4C
    void BPEFOMJJHKO();
    // private System.Void CAPGFLFKCLN(System.Byte KLIPNGBEELK)
    // Offset: 0x195503C
    void CAPGFLFKCLN(uint8_t KLIPNGBEELK);
    // public System.Void HIGNAIDIOAE()
    // Offset: 0x19554E8
    void HIGNAIDIOAE();
    // private System.Void OPJFCPJDKOC(System.Byte KLIPNGBEELK)
    // Offset: 0x1955670
    void OPJFCPJDKOC(uint8_t KLIPNGBEELK);
    // private System.Void PFABJJGAOMM()
    // Offset: 0x1955B1C
    void PFABJJGAOMM();
    // public System.Void HandleGripChange()
    // Offset: 0x1954D90
    void HandleGripChange();
    // private System.Void LJOGIPIJIPF()
    // Offset: 0x1955BB0
    void LJOGIPIJIPF();
    // private System.Void KCEPMBHOMCD()
    // Offset: 0x1955CA4
    void KCEPMBHOMCD();
    // public System.Void .ctor()
    // Offset: 0x1955D98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetGun* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::NetGun::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetGun*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x1955DA0
    void Start();
    // private System.Void HMLPEKMDCDI(System.Byte KLIPNGBEELK)
    // Offset: 0x1955E34
    void HMLPEKMDCDI(uint8_t KLIPNGBEELK);
    // private System.Void FMCFFLJCCCP()
    // Offset: 0x19562E0
    void FMCFFLJCCCP();
    // public System.Void FGHBBFEGFEG()
    // Offset: 0x19563D4
    void FGHBBFEGFEG();
    // public System.Void AGHABHFMLCI()
    // Offset: 0x195655C
    void AGHABHFMLCI();
    // private System.Void NHGKENEFKKC(System.Byte KLIPNGBEELK)
    // Offset: 0x19566E4
    void NHGKENEFKKC(uint8_t KLIPNGBEELK);
  }; // MagicalActual.NetGun
  #pragma pack(pop)
  static check_size<sizeof(NetGun), 96 + sizeof(bool)> __MagicalActual_NetGunSizeCheck;
  static_assert(sizeof(NetGun) == 0x61);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::NetGun::ABBNBBPDILC
// Il2CppName: ABBNBBPDILC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)(uint8_t)>(&MagicalActual::NetGun::ABBNBBPDILC)> {
  static const MethodInfo* get() {
    static auto* KLIPNGBEELK = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "ABBNBBPDILC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KLIPNGBEELK});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::SignalReceived
// Il2CppName: SignalReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)(uint8_t)>(&MagicalActual::NetGun::SignalReceived)> {
  static const MethodInfo* get() {
    static auto* KLIPNGBEELK = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "SignalReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KLIPNGBEELK});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::GGAEIIGNAIP
// Il2CppName: GGAEIIGNAIP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::GGAEIIGNAIP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "GGAEIIGNAIP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::MHHFAOGFAPO
// Il2CppName: MHHFAOGFAPO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::MHHFAOGFAPO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "MHHFAOGFAPO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::ANMCDPKJDOP
// Il2CppName: ANMCDPKJDOP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::ANMCDPKJDOP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "ANMCDPKJDOP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::LAJFGOMIMAG
// Il2CppName: LAJFGOMIMAG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::LAJFGOMIMAG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "LAJFGOMIMAG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::GKIOLADOCOK
// Il2CppName: GKIOLADOCOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::GKIOLADOCOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "GKIOLADOCOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::EENPJGOEBNB
// Il2CppName: EENPJGOEBNB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)(uint8_t)>(&MagicalActual::NetGun::EENPJGOEBNB)> {
  static const MethodInfo* get() {
    static auto* KLIPNGBEELK = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "EENPJGOEBNB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KLIPNGBEELK});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::GIPKFDANCPN
// Il2CppName: GIPKFDANCPN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::GIPKFDANCPN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "GIPKFDANCPN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::EBNFNLMHNGE
// Il2CppName: EBNFNLMHNGE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::EBNFNLMHNGE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "EBNFNLMHNGE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::FJEHAKONAGB
// Il2CppName: FJEHAKONAGB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::FJEHAKONAGB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "FJEHAKONAGB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::GPGECANBCKA
// Il2CppName: GPGECANBCKA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::GPGECANBCKA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "GPGECANBCKA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::FireNetGun
// Il2CppName: FireNetGun
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::FireNetGun)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "FireNetGun", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::BPEFOMJJHKO
// Il2CppName: BPEFOMJJHKO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::BPEFOMJJHKO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "BPEFOMJJHKO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::CAPGFLFKCLN
// Il2CppName: CAPGFLFKCLN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)(uint8_t)>(&MagicalActual::NetGun::CAPGFLFKCLN)> {
  static const MethodInfo* get() {
    static auto* KLIPNGBEELK = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "CAPGFLFKCLN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KLIPNGBEELK});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::HIGNAIDIOAE
// Il2CppName: HIGNAIDIOAE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::HIGNAIDIOAE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "HIGNAIDIOAE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::OPJFCPJDKOC
// Il2CppName: OPJFCPJDKOC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)(uint8_t)>(&MagicalActual::NetGun::OPJFCPJDKOC)> {
  static const MethodInfo* get() {
    static auto* KLIPNGBEELK = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "OPJFCPJDKOC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KLIPNGBEELK});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::PFABJJGAOMM
// Il2CppName: PFABJJGAOMM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::PFABJJGAOMM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "PFABJJGAOMM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::HandleGripChange
// Il2CppName: HandleGripChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::HandleGripChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "HandleGripChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::LJOGIPIJIPF
// Il2CppName: LJOGIPIJIPF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::LJOGIPIJIPF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "LJOGIPIJIPF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::KCEPMBHOMCD
// Il2CppName: KCEPMBHOMCD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::KCEPMBHOMCD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "KCEPMBHOMCD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::NetGun::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::HMLPEKMDCDI
// Il2CppName: HMLPEKMDCDI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)(uint8_t)>(&MagicalActual::NetGun::HMLPEKMDCDI)> {
  static const MethodInfo* get() {
    static auto* KLIPNGBEELK = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "HMLPEKMDCDI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KLIPNGBEELK});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::FMCFFLJCCCP
// Il2CppName: FMCFFLJCCCP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::FMCFFLJCCCP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "FMCFFLJCCCP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::FGHBBFEGFEG
// Il2CppName: FGHBBFEGFEG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::FGHBBFEGFEG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "FGHBBFEGFEG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::AGHABHFMLCI
// Il2CppName: AGHABHFMLCI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)()>(&MagicalActual::NetGun::AGHABHFMLCI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "AGHABHFMLCI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetGun::NHGKENEFKKC
// Il2CppName: NHGKENEFKKC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetGun::*)(uint8_t)>(&MagicalActual::NetGun::NHGKENEFKKC)> {
  static const MethodInfo* get() {
    static auto* KLIPNGBEELK = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetGun*), "NHGKENEFKKC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KLIPNGBEELK});
  }
};
