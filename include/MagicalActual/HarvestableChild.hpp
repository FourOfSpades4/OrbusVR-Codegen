// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: NetEntity
  class NetEntity;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: HarvestableChild
  class HarvestableChild;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::HarvestableChild);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::HarvestableChild*, "MagicalActual", "HarvestableChild");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.HarvestableChild
  // [TokenAttribute] Offset: FFFFFFFF
  class HarvestableChild : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.ParticleSystem damageTakeEffect
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::ParticleSystem* damageTakeEffect;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private MagicalActual.NetEntity IJJGNKLFGJN
    // Size: 0x8
    // Offset: 0x20
    ::MagicalActual::NetEntity* IJJGNKLFGJN;
    // Field size check
    static_assert(sizeof(::MagicalActual::NetEntity*) == 0x8);
    // private System.Int32 MEGHNDLEFMM
    // Size: 0x4
    // Offset: 0x28
    int MEGHNDLEFMM;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.ParticleSystem damageTakeEffect
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_damageTakeEffect();
    // Get instance field reference: private MagicalActual.NetEntity IJJGNKLFGJN
    [[deprecated("Use field access instead!")]] ::MagicalActual::NetEntity*& dyn_IJJGNKLFGJN();
    // Get instance field reference: private System.Int32 MEGHNDLEFMM
    [[deprecated("Use field access instead!")]] int& dyn_MEGHNDLEFMM();
    // public System.Void HKINNMLBMMG()
    // Offset: 0x1884ED8
    void HKINNMLBMMG();
    // public System.Void EKDDAFGOHEF(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x1884F78
    void EKDDAFGOHEF(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void DLLELCHFDLJ(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x18850E0
    void DLLELCHFDLJ(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void Start()
    // Offset: 0x1885248
    void Start();
    // public System.Void OnTriggerEnter(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x18852E8
    void OnTriggerEnter(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void GHLPBOJJHNG()
    // Offset: 0x1885458
    void GHLPBOJJHNG();
    // public System.Void MIGKNCENLJE(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x18854F8
    void MIGKNCENLJE(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void GPFBGGFPINB()
    // Offset: 0x1885660
    void GPFBGGFPINB();
    // public System.Void NPBBCLGBCKI(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x1885700
    void NPBBCLGBCKI(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void IINEOMHMKCH(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x188586C
    void IINEOMHMKCH(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void ABIHCGOKNCL()
    // Offset: 0x18859DC
    void ABIHCGOKNCL();
    // public System.Void LOIHAFAGMPJ(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x1885A7C
    void LOIHAFAGMPJ(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void GECHLDPLPCC()
    // Offset: 0x1885BEC
    void GECHLDPLPCC();
    // public System.Void EAFJCDAPOOO(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x1885C8C
    void EAFJCDAPOOO(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void HOOMCFNEPIG(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x1885DF8
    void HOOMCFNEPIG(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void IIENFHBHBJJ(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x1885F60
    void IIENFHBHBJJ(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void BDEDGNGMHMN()
    // Offset: 0x18860CC
    void BDEDGNGMHMN();
    // public System.Void HBMKPPIDMIO(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x188616C
    void HBMKPPIDMIO(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void CBMDGNKFPIO()
    // Offset: 0x18862E0
    void CBMDGNKFPIO();
    // public System.Void PBEMGGBBDCK()
    // Offset: 0x1886380
    void PBEMGGBBDCK();
    // public System.Void NNDKJCJFIAK()
    // Offset: 0x1886420
    void NNDKJCJFIAK();
    // public System.Void EPBEAEOMMKB(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x18864C0
    void EPBEAEOMMKB(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void GKNCFKGBFCL(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x188662C
    void GKNCFKGBFCL(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void LLGCEEKDNPC(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x1886798
    void LLGCEEKDNPC(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void GAAODDCPLLK(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x188690C
    void GAAODDCPLLK(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void AKGFEENGKJD()
    // Offset: 0x1886A78
    void AKGFEENGKJD();
    // public System.Void AFIACGLCIPB()
    // Offset: 0x1886B18
    void AFIACGLCIPB();
    // public System.Void GLNKPGBHPDE(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x1886BB8
    void GLNKPGBHPDE(::UnityEngine::Collider* GMCJEAMJJEP);
    // public System.Void .ctor()
    // Offset: 0x1886D2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HarvestableChild* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::HarvestableChild::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HarvestableChild*, creationType>()));
    }
    // public System.Void IDOCJGNLNFL()
    // Offset: 0x1886D3C
    void IDOCJGNLNFL();
    // public System.Void OMOEIJMJHGA(UnityEngine.Collider GMCJEAMJJEP)
    // Offset: 0x1886DDC
    void OMOEIJMJHGA(::UnityEngine::Collider* GMCJEAMJJEP);
  }; // MagicalActual.HarvestableChild
  #pragma pack(pop)
  static check_size<sizeof(HarvestableChild), 40 + sizeof(int)> __MagicalActual_HarvestableChildSizeCheck;
  static_assert(sizeof(HarvestableChild) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::HKINNMLBMMG
// Il2CppName: HKINNMLBMMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)()>(&MagicalActual::HarvestableChild::HKINNMLBMMG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "HKINNMLBMMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::EKDDAFGOHEF
// Il2CppName: EKDDAFGOHEF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::EKDDAFGOHEF)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "EKDDAFGOHEF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::DLLELCHFDLJ
// Il2CppName: DLLELCHFDLJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::DLLELCHFDLJ)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "DLLELCHFDLJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)()>(&MagicalActual::HarvestableChild::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::GHLPBOJJHNG
// Il2CppName: GHLPBOJJHNG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)()>(&MagicalActual::HarvestableChild::GHLPBOJJHNG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "GHLPBOJJHNG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::MIGKNCENLJE
// Il2CppName: MIGKNCENLJE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::MIGKNCENLJE)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "MIGKNCENLJE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::GPFBGGFPINB
// Il2CppName: GPFBGGFPINB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)()>(&MagicalActual::HarvestableChild::GPFBGGFPINB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "GPFBGGFPINB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::NPBBCLGBCKI
// Il2CppName: NPBBCLGBCKI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::NPBBCLGBCKI)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "NPBBCLGBCKI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::IINEOMHMKCH
// Il2CppName: IINEOMHMKCH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::IINEOMHMKCH)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "IINEOMHMKCH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::ABIHCGOKNCL
// Il2CppName: ABIHCGOKNCL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)()>(&MagicalActual::HarvestableChild::ABIHCGOKNCL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "ABIHCGOKNCL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::LOIHAFAGMPJ
// Il2CppName: LOIHAFAGMPJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::LOIHAFAGMPJ)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "LOIHAFAGMPJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::GECHLDPLPCC
// Il2CppName: GECHLDPLPCC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)()>(&MagicalActual::HarvestableChild::GECHLDPLPCC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "GECHLDPLPCC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::EAFJCDAPOOO
// Il2CppName: EAFJCDAPOOO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::EAFJCDAPOOO)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "EAFJCDAPOOO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::HOOMCFNEPIG
// Il2CppName: HOOMCFNEPIG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::HOOMCFNEPIG)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "HOOMCFNEPIG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::IIENFHBHBJJ
// Il2CppName: IIENFHBHBJJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::IIENFHBHBJJ)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "IIENFHBHBJJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::BDEDGNGMHMN
// Il2CppName: BDEDGNGMHMN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)()>(&MagicalActual::HarvestableChild::BDEDGNGMHMN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "BDEDGNGMHMN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::HBMKPPIDMIO
// Il2CppName: HBMKPPIDMIO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::HBMKPPIDMIO)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "HBMKPPIDMIO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::CBMDGNKFPIO
// Il2CppName: CBMDGNKFPIO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)()>(&MagicalActual::HarvestableChild::CBMDGNKFPIO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "CBMDGNKFPIO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::PBEMGGBBDCK
// Il2CppName: PBEMGGBBDCK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)()>(&MagicalActual::HarvestableChild::PBEMGGBBDCK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "PBEMGGBBDCK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::NNDKJCJFIAK
// Il2CppName: NNDKJCJFIAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)()>(&MagicalActual::HarvestableChild::NNDKJCJFIAK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "NNDKJCJFIAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::EPBEAEOMMKB
// Il2CppName: EPBEAEOMMKB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::EPBEAEOMMKB)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "EPBEAEOMMKB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::GKNCFKGBFCL
// Il2CppName: GKNCFKGBFCL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::GKNCFKGBFCL)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "GKNCFKGBFCL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::LLGCEEKDNPC
// Il2CppName: LLGCEEKDNPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::LLGCEEKDNPC)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "LLGCEEKDNPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::GAAODDCPLLK
// Il2CppName: GAAODDCPLLK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::GAAODDCPLLK)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "GAAODDCPLLK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::AKGFEENGKJD
// Il2CppName: AKGFEENGKJD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)()>(&MagicalActual::HarvestableChild::AKGFEENGKJD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "AKGFEENGKJD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::AFIACGLCIPB
// Il2CppName: AFIACGLCIPB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)()>(&MagicalActual::HarvestableChild::AFIACGLCIPB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "AFIACGLCIPB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::GLNKPGBHPDE
// Il2CppName: GLNKPGBHPDE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::GLNKPGBHPDE)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "GLNKPGBHPDE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::IDOCJGNLNFL
// Il2CppName: IDOCJGNLNFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)()>(&MagicalActual::HarvestableChild::IDOCJGNLNFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "IDOCJGNLNFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HarvestableChild::OMOEIJMJHGA
// Il2CppName: OMOEIJMJHGA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HarvestableChild::*)(::UnityEngine::Collider*)>(&MagicalActual::HarvestableChild::OMOEIJMJHGA)> {
  static const MethodInfo* get() {
    static auto* GMCJEAMJJEP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HarvestableChild*), "OMOEIJMJHGA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GMCJEAMJJEP});
  }
};
