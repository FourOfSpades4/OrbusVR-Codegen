// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Ray
#include "UnityEngine/Ray.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Sprite
  class Sprite;
  // Forward declaring type: SpriteRenderer
  class SpriteRenderer;
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: LineRenderer
  class LineRenderer;
  // Forward declaring type: BoxCollider
  class BoxCollider;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OrbusTrackedController
  class OrbusTrackedController;
  // Forward declaring type: ClickedEventHandler
  class ClickedEventHandler;
  // Forward declaring type: ClickedEventArgs
  struct ClickedEventArgs;
}
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Monster
  class Monster;
  // Forward declaring type: PlayerTool
  class PlayerTool;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Tagger
  class Tagger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::Tagger);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::Tagger*, "MagicalActual", "Tagger");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x120
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.Tagger
  // [TokenAttribute] Offset: FFFFFFFF
  class Tagger : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform shootingPoint
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* shootingPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single shootingDistance
    // Size: 0x4
    // Offset: 0x20
    float shootingDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Byte targetType
    // Size: 0x1
    // Offset: 0x24
    uint8_t targetType;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: targetType and: highlightColor
    char __padding2[0x3] = {};
    // private UnityEngine.Color highlightColor
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Color highlightColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Transform nobGripTransform
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* nobGripTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single spriteDistance
    // Size: 0x4
    // Offset: 0x40
    float spriteDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single spriteHeightOffset
    // Size: 0x4
    // Offset: 0x44
    float spriteHeightOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Transform nobTransform
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* nobTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Sprite[] sprites
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::Sprite*> sprites;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Sprite*>) == 0x8);
    // private UnityEngine.Vector3 CCAMEFGEBBE
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 CCAMEFGEBBE;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: CCAMEFGEBBE and: spriteRenderer
    char __padding9[0x4] = {};
    // private UnityEngine.SpriteRenderer spriteRenderer
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::SpriteRenderer* spriteRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::SpriteRenderer*) == 0x8);
    // private UnityEngine.Animator spriteAnimator
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Animator* spriteAnimator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // private UnityEngine.AudioSource nobAudio
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::AudioSource* nobAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioSource fireAudio
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::AudioSource* fireAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.Transform CLHENPKKKKD
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Transform* CLHENPKKKKD;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Ray MLJGHGOBIJE
    // Size: 0x18
    // Offset: 0x90
    ::UnityEngine::Ray MLJGHGOBIJE;
    // Field size check
    static_assert(sizeof(::UnityEngine::Ray) == 0x18);
    // private System.Int32 HFKELBOMOCO
    // Size: 0x4
    // Offset: 0xA8
    int HFKELBOMOCO;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean PGMFIFINKIH
    // Size: 0x1
    // Offset: 0xAC
    bool PGMFIFINKIH;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean CIGMJJBLKBM
    // Size: 0x1
    // Offset: 0xAD
    bool CIGMJJBLKBM;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean ADMHDHJNACN
    // Size: 0x1
    // Offset: 0xAE
    bool ADMHDHJNACN;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ADMHDHJNACN and: JJHPPCDPBNJ
    char __padding19[0x1] = {};
    // private System.Single JJHPPCDPBNJ
    // Size: 0x4
    // Offset: 0xB0
    float JJHPPCDPBNJ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single EIJBECJKGOE
    // Size: 0x4
    // Offset: 0xB4
    float EIJBECJKGOE;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.LineRenderer ILOMBBPAAPF
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::LineRenderer* ILOMBBPAAPF;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // private OrbusTrackedController MLFAOLPJNIF
    // Size: 0x8
    // Offset: 0xC0
    ::GlobalNamespace::OrbusTrackedController* MLFAOLPJNIF;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OrbusTrackedController*) == 0x8);
    // private OrbusTrackedController GNJHALGCEHE
    // Size: 0x8
    // Offset: 0xC8
    ::GlobalNamespace::OrbusTrackedController* GNJHALGCEHE;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OrbusTrackedController*) == 0x8);
    // private UnityEngine.Transform LKCGHPCDEML
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::Transform* LKCGHPCDEML;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.BoxCollider MLDFAPMCOMG
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::BoxCollider* MLDFAPMCOMG;
    // Field size check
    static_assert(sizeof(::UnityEngine::BoxCollider*) == 0x8);
    // private MagicalActual.Monster JNHNONMLIIG
    // Size: 0x8
    // Offset: 0xE0
    ::MagicalActual::Monster* JNHNONMLIIG;
    // Field size check
    static_assert(sizeof(::MagicalActual::Monster*) == 0x8);
    // private UnityEngine.RaycastHit[] BOPNDNCHJHM
    // Size: 0x8
    // Offset: 0xE8
    ::ArrayW<::UnityEngine::RaycastHit> BOPNDNCHJHM;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private UnityEngine.Collider[] AIGEPDPMBKD
    // Size: 0x8
    // Offset: 0xF0
    ::ArrayW<::UnityEngine::Collider*> AIGEPDPMBKD;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private ClickedEventHandler MOHACFAMFIF
    // Size: 0x8
    // Offset: 0xF8
    ::GlobalNamespace::ClickedEventHandler* MOHACFAMFIF;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // private ClickedEventHandler DOHCOGANKCE
    // Size: 0x8
    // Offset: 0x100
    ::GlobalNamespace::ClickedEventHandler* DOHCOGANKCE;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // private ClickedEventHandler JHBPFFCEFAE
    // Size: 0x8
    // Offset: 0x108
    ::GlobalNamespace::ClickedEventHandler* JHBPFFCEFAE;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // private ClickedEventHandler JPFBCLBJHCF
    // Size: 0x8
    // Offset: 0x110
    ::GlobalNamespace::ClickedEventHandler* JPFBCLBJHCF;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAE57F0
    // private MagicalActual.PlayerTool <DGACPEMHNJJ>k__BackingField
    // Size: 0x8
    // Offset: 0x118
    ::MagicalActual::PlayerTool* DGACPEMHNJJ;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerTool*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Transform shootingPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_shootingPoint();
    // Get instance field reference: private System.Single shootingDistance
    [[deprecated("Use field access instead!")]] float& dyn_shootingDistance();
    // Get instance field reference: private System.Byte targetType
    [[deprecated("Use field access instead!")]] uint8_t& dyn_targetType();
    // Get instance field reference: private UnityEngine.Color highlightColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_highlightColor();
    // Get instance field reference: private UnityEngine.Transform nobGripTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_nobGripTransform();
    // Get instance field reference: private System.Single spriteDistance
    [[deprecated("Use field access instead!")]] float& dyn_spriteDistance();
    // Get instance field reference: private System.Single spriteHeightOffset
    [[deprecated("Use field access instead!")]] float& dyn_spriteHeightOffset();
    // Get instance field reference: private UnityEngine.Transform nobTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_nobTransform();
    // Get instance field reference: private UnityEngine.Sprite[] sprites
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Sprite*>& dyn_sprites();
    // Get instance field reference: private UnityEngine.Vector3 CCAMEFGEBBE
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_CCAMEFGEBBE();
    // Get instance field reference: private UnityEngine.SpriteRenderer spriteRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& dyn_spriteRenderer();
    // Get instance field reference: private UnityEngine.Animator spriteAnimator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_spriteAnimator();
    // Get instance field reference: private UnityEngine.AudioSource nobAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_nobAudio();
    // Get instance field reference: private UnityEngine.AudioSource fireAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_fireAudio();
    // Get instance field reference: private UnityEngine.Transform CLHENPKKKKD
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_CLHENPKKKKD();
    // Get instance field reference: private UnityEngine.Ray MLJGHGOBIJE
    [[deprecated("Use field access instead!")]] ::UnityEngine::Ray& dyn_MLJGHGOBIJE();
    // Get instance field reference: private System.Int32 HFKELBOMOCO
    [[deprecated("Use field access instead!")]] int& dyn_HFKELBOMOCO();
    // Get instance field reference: private System.Boolean PGMFIFINKIH
    [[deprecated("Use field access instead!")]] bool& dyn_PGMFIFINKIH();
    // Get instance field reference: private System.Boolean CIGMJJBLKBM
    [[deprecated("Use field access instead!")]] bool& dyn_CIGMJJBLKBM();
    // Get instance field reference: private System.Boolean ADMHDHJNACN
    [[deprecated("Use field access instead!")]] bool& dyn_ADMHDHJNACN();
    // Get instance field reference: private System.Single JJHPPCDPBNJ
    [[deprecated("Use field access instead!")]] float& dyn_JJHPPCDPBNJ();
    // Get instance field reference: private System.Single EIJBECJKGOE
    [[deprecated("Use field access instead!")]] float& dyn_EIJBECJKGOE();
    // Get instance field reference: private UnityEngine.LineRenderer ILOMBBPAAPF
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn_ILOMBBPAAPF();
    // Get instance field reference: private OrbusTrackedController MLFAOLPJNIF
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OrbusTrackedController*& dyn_MLFAOLPJNIF();
    // Get instance field reference: private OrbusTrackedController GNJHALGCEHE
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OrbusTrackedController*& dyn_GNJHALGCEHE();
    // Get instance field reference: private UnityEngine.Transform LKCGHPCDEML
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_LKCGHPCDEML();
    // Get instance field reference: private UnityEngine.BoxCollider MLDFAPMCOMG
    [[deprecated("Use field access instead!")]] ::UnityEngine::BoxCollider*& dyn_MLDFAPMCOMG();
    // Get instance field reference: private MagicalActual.Monster JNHNONMLIIG
    [[deprecated("Use field access instead!")]] ::MagicalActual::Monster*& dyn_JNHNONMLIIG();
    // Get instance field reference: private UnityEngine.RaycastHit[] BOPNDNCHJHM
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_BOPNDNCHJHM();
    // Get instance field reference: private UnityEngine.Collider[] AIGEPDPMBKD
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_AIGEPDPMBKD();
    // Get instance field reference: private ClickedEventHandler MOHACFAMFIF
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_MOHACFAMFIF();
    // Get instance field reference: private ClickedEventHandler DOHCOGANKCE
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_DOHCOGANKCE();
    // Get instance field reference: private ClickedEventHandler JHBPFFCEFAE
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_JHBPFFCEFAE();
    // Get instance field reference: private ClickedEventHandler JPFBCLBJHCF
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_JPFBCLBJHCF();
    // Get instance field reference: private MagicalActual.PlayerTool <DGACPEMHNJJ>k__BackingField
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerTool*& dyn_$DGACPEMHNJJ$k__BackingField();
    // private System.Void LPNNHLBEEMM(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x1667BFC
    void LPNNHLBEEMM(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void IJKCOLACBNL(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x1668034
    void IJKCOLACBNL(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void FBPAGFHOFIO()
    // Offset: 0x1668464
    void FBPAGFHOFIO();
    // public MagicalActual.PlayerTool IDGGGIOOPOJ()
    // Offset: 0x16688E8
    ::MagicalActual::PlayerTool* IDGGGIOOPOJ();
    // private System.Void COCJGOOAIAK(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x16688F0
    void COCJGOOAIAK(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // public System.Void .ctor()
    // Offset: 0x16689F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Tagger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::Tagger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Tagger*, creationType>()));
    }
    // private MagicalActual.Monster GPBOIGPMAJE()
    // Offset: 0x1668A30
    ::MagicalActual::Monster* GPBOIGPMAJE();
    // private System.Void ENIGECPOHND(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x1668D2C
    void ENIGECPOHND(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void OBFIOEGKDEA()
    // Offset: 0x1668DD0
    void OBFIOEGKDEA();
    // private System.Void BEPOENDGCMC(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x1669100
    void BEPOENDGCMC(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void DGELIHGGOKB()
    // Offset: 0x166920C
    void DGELIHGGOKB();
    // private System.Void LHJKDEFKAGI(MagicalActual.PlayerTool MMMEIONJJFJ)
    // Offset: 0x16692DC
    void LHJKDEFKAGI(::MagicalActual::PlayerTool* MMMEIONJJFJ);
    // private System.Void PDMMGNBJPBP(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x16692E4
    void PDMMGNBJPBP(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // public MagicalActual.PlayerTool HMBAMODBGGM()
    // Offset: 0x1669414
    ::MagicalActual::PlayerTool* HMBAMODBGGM();
    // public MagicalActual.PlayerTool get_myTool()
    // Offset: 0x166941C
    ::MagicalActual::PlayerTool* get_myTool();
    // private System.Void FEBAPIOECGC(MagicalActual.PlayerTool MMMEIONJJFJ)
    // Offset: 0x1669424
    void FEBAPIOECGC(::MagicalActual::PlayerTool* MMMEIONJJFJ);
    // private System.Void DMKGEEDIDFJ()
    // Offset: 0x166942C
    void DMKGEEDIDFJ();
    // private System.Void PKJMGNIFBCI()
    // Offset: 0x16695B8
    void PKJMGNIFBCI();
    // private System.Void DDKBOJDCIAK(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x1669744
    void DDKBOJDCIAK(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void Awake()
    // Offset: 0x1669874
    void Awake();
    // private System.Void ONMCLKNPJGI(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x1669944
    void ONMCLKNPJGI(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void ABEDFENBNHM()
    // Offset: 0x1669A50
    void ABEDFENBNHM();
    // private System.Void MEHMCHILAJO(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x1669D7C
    void MEHMCHILAJO(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void KEBOKGFLFJA()
    // Offset: 0x1669E84
    void KEBOKGFLFJA();
    // private System.Void GBCHLGNALEH(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x166ACB4
    void GBCHLGNALEH(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void OANDBKDDNBD()
    // Offset: 0x1667D04
    void OANDBKDDNBD();
    // private System.Void BFPJEDPJAHB(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x166AE70
    void BFPJEDPJAHB(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void JLEKPBMDGEA(MagicalActual.PlayerTool MMMEIONJJFJ)
    // Offset: 0x166AFA0
    void JLEKPBMDGEA(::MagicalActual::PlayerTool* MMMEIONJJFJ);
    // private System.Void ABAFDCDIIML(MagicalActual.PlayerTool MMMEIONJJFJ)
    // Offset: 0x166AFA8
    void ABAFDCDIIML(::MagicalActual::PlayerTool* MMMEIONJJFJ);
    // private System.Void HDMHEDEGDFD()
    // Offset: 0x166AFB0
    void HDMHEDEGDFD();
    // private System.Void HGKGEHNEGMD(MagicalActual.PlayerTool MMMEIONJJFJ)
    // Offset: 0x166993C
    void HGKGEHNEGMD(::MagicalActual::PlayerTool* MMMEIONJJFJ);
    // private System.Void ENDMACJKGJJ(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x166A968
    void ENDMACJKGJJ(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private MagicalActual.Monster PJCENIEBIBF()
    // Offset: 0x16685F0
    ::MagicalActual::Monster* PJCENIEBIBF();
    // private System.Void OMMDOPOANHH(MagicalActual.PlayerTool MMMEIONJJFJ)
    // Offset: 0x16692D4
    void OMMDOPOANHH(::MagicalActual::PlayerTool* MMMEIONJJFJ);
    // private System.Void JGBMNGBBMLH(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x166B078
    void JGBMNGBBMLH(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void BEKJFIOAMHB(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x166B234
    void BEKJFIOAMHB(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void LMNDNEGAJNP(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x166B364
    void LMNDNEGAJNP(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void OEBDIADNPDB(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x166B490
    void OEBDIADNPDB(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void BDAMGJMBEOC()
    // Offset: 0x166813C
    void BDAMGJMBEOC();
    // private System.Void Update()
    // Offset: 0x166B5C0
    void Update();
    // private System.Void Start()
    // Offset: 0x166C094
    void Start();
    // private System.Void KDJHEMNNMOA()
    // Offset: 0x166AB28
    void KDJHEMNNMOA();
  }; // MagicalActual.Tagger
  #pragma pack(pop)
  static check_size<sizeof(Tagger), 280 + sizeof(::MagicalActual::PlayerTool*)> __MagicalActual_TaggerSizeCheck;
  static_assert(sizeof(Tagger) == 0x120);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::Tagger::LPNNHLBEEMM
// Il2CppName: LPNNHLBEEMM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::LPNNHLBEEMM)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "LPNNHLBEEMM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::IJKCOLACBNL
// Il2CppName: IJKCOLACBNL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::IJKCOLACBNL)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "IJKCOLACBNL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::FBPAGFHOFIO
// Il2CppName: FBPAGFHOFIO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::FBPAGFHOFIO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "FBPAGFHOFIO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::IDGGGIOOPOJ
// Il2CppName: IDGGGIOOPOJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::PlayerTool* (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::IDGGGIOOPOJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "IDGGGIOOPOJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::COCJGOOAIAK
// Il2CppName: COCJGOOAIAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::COCJGOOAIAK)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "COCJGOOAIAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::Tagger::GPBOIGPMAJE
// Il2CppName: GPBOIGPMAJE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::Monster* (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::GPBOIGPMAJE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "GPBOIGPMAJE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::ENIGECPOHND
// Il2CppName: ENIGECPOHND
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::ENIGECPOHND)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "ENIGECPOHND", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::OBFIOEGKDEA
// Il2CppName: OBFIOEGKDEA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::OBFIOEGKDEA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "OBFIOEGKDEA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::BEPOENDGCMC
// Il2CppName: BEPOENDGCMC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::BEPOENDGCMC)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "BEPOENDGCMC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::DGELIHGGOKB
// Il2CppName: DGELIHGGOKB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::DGELIHGGOKB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "DGELIHGGOKB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::LHJKDEFKAGI
// Il2CppName: LHJKDEFKAGI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::MagicalActual::PlayerTool*)>(&MagicalActual::Tagger::LHJKDEFKAGI)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("MagicalActual", "PlayerTool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "LHJKDEFKAGI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::PDMMGNBJPBP
// Il2CppName: PDMMGNBJPBP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::PDMMGNBJPBP)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "PDMMGNBJPBP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::HMBAMODBGGM
// Il2CppName: HMBAMODBGGM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::PlayerTool* (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::HMBAMODBGGM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "HMBAMODBGGM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::get_myTool
// Il2CppName: get_myTool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::PlayerTool* (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::get_myTool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "get_myTool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::FEBAPIOECGC
// Il2CppName: FEBAPIOECGC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::MagicalActual::PlayerTool*)>(&MagicalActual::Tagger::FEBAPIOECGC)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("MagicalActual", "PlayerTool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "FEBAPIOECGC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::DMKGEEDIDFJ
// Il2CppName: DMKGEEDIDFJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::DMKGEEDIDFJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "DMKGEEDIDFJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::PKJMGNIFBCI
// Il2CppName: PKJMGNIFBCI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::PKJMGNIFBCI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "PKJMGNIFBCI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::DDKBOJDCIAK
// Il2CppName: DDKBOJDCIAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::DDKBOJDCIAK)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "DDKBOJDCIAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::ONMCLKNPJGI
// Il2CppName: ONMCLKNPJGI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::ONMCLKNPJGI)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "ONMCLKNPJGI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::ABEDFENBNHM
// Il2CppName: ABEDFENBNHM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::ABEDFENBNHM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "ABEDFENBNHM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::MEHMCHILAJO
// Il2CppName: MEHMCHILAJO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::MEHMCHILAJO)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "MEHMCHILAJO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::KEBOKGFLFJA
// Il2CppName: KEBOKGFLFJA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::KEBOKGFLFJA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "KEBOKGFLFJA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::GBCHLGNALEH
// Il2CppName: GBCHLGNALEH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::GBCHLGNALEH)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "GBCHLGNALEH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::OANDBKDDNBD
// Il2CppName: OANDBKDDNBD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::OANDBKDDNBD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "OANDBKDDNBD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::BFPJEDPJAHB
// Il2CppName: BFPJEDPJAHB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::BFPJEDPJAHB)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "BFPJEDPJAHB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::JLEKPBMDGEA
// Il2CppName: JLEKPBMDGEA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::MagicalActual::PlayerTool*)>(&MagicalActual::Tagger::JLEKPBMDGEA)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("MagicalActual", "PlayerTool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "JLEKPBMDGEA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::ABAFDCDIIML
// Il2CppName: ABAFDCDIIML
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::MagicalActual::PlayerTool*)>(&MagicalActual::Tagger::ABAFDCDIIML)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("MagicalActual", "PlayerTool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "ABAFDCDIIML", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::HDMHEDEGDFD
// Il2CppName: HDMHEDEGDFD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::HDMHEDEGDFD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "HDMHEDEGDFD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::HGKGEHNEGMD
// Il2CppName: HGKGEHNEGMD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::MagicalActual::PlayerTool*)>(&MagicalActual::Tagger::HGKGEHNEGMD)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("MagicalActual", "PlayerTool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "HGKGEHNEGMD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::ENDMACJKGJJ
// Il2CppName: ENDMACJKGJJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::ENDMACJKGJJ)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "ENDMACJKGJJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::PJCENIEBIBF
// Il2CppName: PJCENIEBIBF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::Monster* (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::PJCENIEBIBF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "PJCENIEBIBF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::OMMDOPOANHH
// Il2CppName: OMMDOPOANHH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::MagicalActual::PlayerTool*)>(&MagicalActual::Tagger::OMMDOPOANHH)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("MagicalActual", "PlayerTool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "OMMDOPOANHH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::JGBMNGBBMLH
// Il2CppName: JGBMNGBBMLH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::JGBMNGBBMLH)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "JGBMNGBBMLH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::BEKJFIOAMHB
// Il2CppName: BEKJFIOAMHB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::BEKJFIOAMHB)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "BEKJFIOAMHB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::LMNDNEGAJNP
// Il2CppName: LMNDNEGAJNP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::LMNDNEGAJNP)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "LMNDNEGAJNP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::OEBDIADNPDB
// Il2CppName: OEBDIADNPDB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Tagger::OEBDIADNPDB)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "OEBDIADNPDB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::BDAMGJMBEOC
// Il2CppName: BDAMGJMBEOC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::BDAMGJMBEOC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "BDAMGJMBEOC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Tagger::KDJHEMNNMOA
// Il2CppName: KDJHEMNNMOA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Tagger::*)()>(&MagicalActual::Tagger::KDJHEMNNMOA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Tagger*), "KDJHEMNNMOA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
