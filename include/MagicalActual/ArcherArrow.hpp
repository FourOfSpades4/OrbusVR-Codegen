// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Archer
  class Archer;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: ArcherArrow
  class ArcherArrow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::ArcherArrow);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::ArcherArrow*, "MagicalActual", "ArcherArrow");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.ArcherArrow
  // [TokenAttribute] Offset: FFFFFFFF
  class ArcherArrow : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean fired
    // Size: 0x1
    // Offset: 0x18
    bool fired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fired and: arrowFireDirection
    char __padding0[0x3] = {};
    // public UnityEngine.Vector3 arrowFireDirection
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 arrowFireDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single firePower
    // Size: 0x4
    // Offset: 0x28
    float firePower;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single ENPHHEMGIML
    // Size: 0x4
    // Offset: 0x2C
    float ENPHHEMGIML;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single KNPCNCAKAIO
    // Size: 0x4
    // Offset: 0x30
    float KNPCNCAKAIO;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single ANDDIBNAPMK
    // Size: 0x4
    // Offset: 0x34
    float ANDDIBNAPMK;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single JOENIMFPMHO
    // Size: 0x4
    // Offset: 0x38
    float JOENIMFPMHO;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: JOENIMFPMHO and: EJOPLGBIFOE
    char __padding6[0x4] = {};
    // private UnityEngine.GameObject EJOPLGBIFOE
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* EJOPLGBIFOE;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject NKIBFFHGJFD
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* NKIBFFHGJFD;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public MagicalActual.Archer myArcher
    // Size: 0x8
    // Offset: 0x50
    ::MagicalActual::Archer* myArcher;
    // Field size check
    static_assert(sizeof(::MagicalActual::Archer*) == 0x8);
    // private UnityEngine.RaycastHit[] JGOGJDHABHN
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::RaycastHit> JGOGJDHABHN;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // public System.Int32 arrowId
    // Size: 0x4
    // Offset: 0x60
    int arrowId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 JCDFLLLGDLH
    // Size: 0xC
    // Offset: 0x64
    ::UnityEngine::Vector3 JCDFLLLGDLH;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean fired
    [[deprecated("Use field access instead!")]] bool& dyn_fired();
    // Get instance field reference: public UnityEngine.Vector3 arrowFireDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_arrowFireDirection();
    // Get instance field reference: public System.Single firePower
    [[deprecated("Use field access instead!")]] float& dyn_firePower();
    // Get instance field reference: private System.Single ENPHHEMGIML
    [[deprecated("Use field access instead!")]] float& dyn_ENPHHEMGIML();
    // Get instance field reference: private System.Single KNPCNCAKAIO
    [[deprecated("Use field access instead!")]] float& dyn_KNPCNCAKAIO();
    // Get instance field reference: private System.Single ANDDIBNAPMK
    [[deprecated("Use field access instead!")]] float& dyn_ANDDIBNAPMK();
    // Get instance field reference: private System.Single JOENIMFPMHO
    [[deprecated("Use field access instead!")]] float& dyn_JOENIMFPMHO();
    // Get instance field reference: private UnityEngine.GameObject EJOPLGBIFOE
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_EJOPLGBIFOE();
    // Get instance field reference: private UnityEngine.GameObject NKIBFFHGJFD
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_NKIBFFHGJFD();
    // Get instance field reference: public MagicalActual.Archer myArcher
    [[deprecated("Use field access instead!")]] ::MagicalActual::Archer*& dyn_myArcher();
    // Get instance field reference: private UnityEngine.RaycastHit[] JGOGJDHABHN
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_JGOGJDHABHN();
    // Get instance field reference: public System.Int32 arrowId
    [[deprecated("Use field access instead!")]] int& dyn_arrowId();
    // Get instance field reference: private UnityEngine.Vector3 JCDFLLLGDLH
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_JCDFLLLGDLH();
    // private System.Void FixedUpdate()
    // Offset: 0x198D300
    void FixedUpdate();
    // private System.Void DDJINHIPKCE()
    // Offset: 0x198E118
    void DDJINHIPKCE();
    // private System.Void BIMCNDAFFJC()
    // Offset: 0x198EF50
    void BIMCNDAFFJC();
    // private System.Void JNELNIGPBIM()
    // Offset: 0x198FD94
    void JNELNIGPBIM();
    // private System.Void Awake()
    // Offset: 0x198FEA0
    void Awake();
    // public System.Void MMGEIOEPNJH()
    // Offset: 0x198FFAC
    void MMGEIOEPNJH();
    // public System.Void BMGIKBEKAFG()
    // Offset: 0x198FFE0
    void BMGIKBEKAFG();
    // public System.Void NPFPCHMEJLN()
    // Offset: 0x1990014
    void NPFPCHMEJLN();
    // public System.Void FDJNGDFDHHE()
    // Offset: 0x1990048
    void FDJNGDFDHHE();
    // public System.Void HAFANKILBPK()
    // Offset: 0x199007C
    void HAFANKILBPK();
    // private System.Void JEDINCAJKLC()
    // Offset: 0x19900B0
    void JEDINCAJKLC();
    // public System.Void MJMJIFKMJLI()
    // Offset: 0x1990EF0
    void MJMJIFKMJLI();
    // public System.Void JLPGAJGOAFL()
    // Offset: 0x1990F24
    void JLPGAJGOAFL();
    // public System.Void LJJDEMKAAHA()
    // Offset: 0x1990F58
    void LJJDEMKAAHA();
    // private System.Void JDJILFHNOGP()
    // Offset: 0x1990F8C
    void JDJILFHNOGP();
    // private System.Void ANKCGGIBCAI()
    // Offset: 0x1991098
    void ANKCGGIBCAI();
    // public System.Void JBCCGBMJJGC()
    // Offset: 0x1991ED8
    void JBCCGBMJJGC();
    // public System.Void FIJDEAGMCGC()
    // Offset: 0x1991F0C
    void FIJDEAGMCGC();
    // public System.Void KDNCBEHDCEO()
    // Offset: 0x1991F40
    void KDNCBEHDCEO();
    // public System.Void LCHIECDMJKD()
    // Offset: 0x1991F74
    void LCHIECDMJKD();
    // public System.Void StartTail()
    // Offset: 0x1991FA8
    void StartTail();
    // public System.Void PowerShotActive()
    // Offset: 0x1991FDC
    void PowerShotActive();
    // private System.Void AFMOIOAGKLM()
    // Offset: 0x1992010
    void AFMOIOAGKLM();
    // private System.Void IGIJBKHAMJH()
    // Offset: 0x199211C
    void IGIJBKHAMJH();
    // public System.Void .ctor()
    // Offset: 0x1992228
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ArcherArrow* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::ArcherArrow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ArcherArrow*, creationType>()));
    }
    // private System.Void AIKBLNGPOON()
    // Offset: 0x1992248
    void AIKBLNGPOON();
    // public System.Void NNCCHLLMGIM()
    // Offset: 0x1992354
    void NNCCHLLMGIM();
    // private System.Void FEJNAOBCKJK()
    // Offset: 0x1992388
    void FEJNAOBCKJK();
    // private System.Void PJOIJIEDPMP()
    // Offset: 0x1992494
    void PJOIJIEDPMP();
    // public System.Void HGGEFHCOHIC()
    // Offset: 0x19932C0
    void HGGEFHCOHIC();
    // private System.Void NLOFBPNEFKD()
    // Offset: 0x19932F4
    void NLOFBPNEFKD();
    // private System.Void NDAOHLAOCDE()
    // Offset: 0x1993400
    void NDAOHLAOCDE();
  }; // MagicalActual.ArcherArrow
  #pragma pack(pop)
  static check_size<sizeof(ArcherArrow), 100 + sizeof(::UnityEngine::Vector3)> __MagicalActual_ArcherArrowSizeCheck;
  static_assert(sizeof(ArcherArrow) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::DDJINHIPKCE
// Il2CppName: DDJINHIPKCE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::DDJINHIPKCE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "DDJINHIPKCE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::BIMCNDAFFJC
// Il2CppName: BIMCNDAFFJC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::BIMCNDAFFJC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "BIMCNDAFFJC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::JNELNIGPBIM
// Il2CppName: JNELNIGPBIM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::JNELNIGPBIM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "JNELNIGPBIM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::MMGEIOEPNJH
// Il2CppName: MMGEIOEPNJH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::MMGEIOEPNJH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "MMGEIOEPNJH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::BMGIKBEKAFG
// Il2CppName: BMGIKBEKAFG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::BMGIKBEKAFG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "BMGIKBEKAFG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::NPFPCHMEJLN
// Il2CppName: NPFPCHMEJLN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::NPFPCHMEJLN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "NPFPCHMEJLN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::FDJNGDFDHHE
// Il2CppName: FDJNGDFDHHE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::FDJNGDFDHHE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "FDJNGDFDHHE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::HAFANKILBPK
// Il2CppName: HAFANKILBPK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::HAFANKILBPK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "HAFANKILBPK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::JEDINCAJKLC
// Il2CppName: JEDINCAJKLC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::JEDINCAJKLC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "JEDINCAJKLC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::MJMJIFKMJLI
// Il2CppName: MJMJIFKMJLI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::MJMJIFKMJLI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "MJMJIFKMJLI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::JLPGAJGOAFL
// Il2CppName: JLPGAJGOAFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::JLPGAJGOAFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "JLPGAJGOAFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::LJJDEMKAAHA
// Il2CppName: LJJDEMKAAHA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::LJJDEMKAAHA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "LJJDEMKAAHA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::JDJILFHNOGP
// Il2CppName: JDJILFHNOGP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::JDJILFHNOGP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "JDJILFHNOGP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::ANKCGGIBCAI
// Il2CppName: ANKCGGIBCAI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::ANKCGGIBCAI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "ANKCGGIBCAI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::JBCCGBMJJGC
// Il2CppName: JBCCGBMJJGC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::JBCCGBMJJGC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "JBCCGBMJJGC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::FIJDEAGMCGC
// Il2CppName: FIJDEAGMCGC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::FIJDEAGMCGC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "FIJDEAGMCGC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::KDNCBEHDCEO
// Il2CppName: KDNCBEHDCEO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::KDNCBEHDCEO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "KDNCBEHDCEO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::LCHIECDMJKD
// Il2CppName: LCHIECDMJKD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::LCHIECDMJKD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "LCHIECDMJKD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::StartTail
// Il2CppName: StartTail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::StartTail)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "StartTail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::PowerShotActive
// Il2CppName: PowerShotActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::PowerShotActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "PowerShotActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::AFMOIOAGKLM
// Il2CppName: AFMOIOAGKLM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::AFMOIOAGKLM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "AFMOIOAGKLM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::IGIJBKHAMJH
// Il2CppName: IGIJBKHAMJH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::IGIJBKHAMJH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "IGIJBKHAMJH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::AIKBLNGPOON
// Il2CppName: AIKBLNGPOON
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::AIKBLNGPOON)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "AIKBLNGPOON", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::NNCCHLLMGIM
// Il2CppName: NNCCHLLMGIM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::NNCCHLLMGIM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "NNCCHLLMGIM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::FEJNAOBCKJK
// Il2CppName: FEJNAOBCKJK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::FEJNAOBCKJK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "FEJNAOBCKJK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::PJOIJIEDPMP
// Il2CppName: PJOIJIEDPMP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::PJOIJIEDPMP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "PJOIJIEDPMP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::HGGEFHCOHIC
// Il2CppName: HGGEFHCOHIC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::HGGEFHCOHIC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "HGGEFHCOHIC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::NLOFBPNEFKD
// Il2CppName: NLOFBPNEFKD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::NLOFBPNEFKD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "NLOFBPNEFKD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ArcherArrow::NDAOHLAOCDE
// Il2CppName: NDAOHLAOCDE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ArcherArrow::*)()>(&MagicalActual::ArcherArrow::NDAOHLAOCDE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ArcherArrow*), "NDAOHLAOCDE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
