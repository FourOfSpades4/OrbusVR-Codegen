// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: BardInstrument
  class BardInstrument;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: BardAvailableInstrument
  class BardAvailableInstrument;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::BardAvailableInstrument);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::BardAvailableInstrument*, "MagicalActual", "BardAvailableInstrument");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.BardAvailableInstrument
  // [TokenAttribute] Offset: FFFFFFFF
  class BardAvailableInstrument : public ::Il2CppObject {
    public:
    public:
    // public MagicalActual.BardInstrument PIGNFGNEIIE
    // Size: 0x8
    // Offset: 0x10
    ::MagicalActual::BardInstrument* PIGNFGNEIIE;
    // Field size check
    static_assert(sizeof(::MagicalActual::BardInstrument*) == 0x8);
    // public System.Byte NEAHMCJKPFI
    // Size: 0x1
    // Offset: 0x18
    uint8_t NEAHMCJKPFI;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: NEAHMCJKPFI and: KCLCAOMCLHC
    char __padding1[0x3] = {};
    // public System.Single KCLCAOMCLHC
    // Size: 0x4
    // Offset: 0x1C
    float KCLCAOMCLHC;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.GameObject BDLGDCCPCGC
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* BDLGDCCPCGC;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Single NJCIDJLNEJL
    // Size: 0x4
    // Offset: 0x28
    float NJCIDJLNEJL;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public MagicalActual.BardInstrument PIGNFGNEIIE
    [[deprecated("Use field access instead!")]] ::MagicalActual::BardInstrument*& dyn_PIGNFGNEIIE();
    // Get instance field reference: public System.Byte NEAHMCJKPFI
    [[deprecated("Use field access instead!")]] uint8_t& dyn_NEAHMCJKPFI();
    // Get instance field reference: public System.Single KCLCAOMCLHC
    [[deprecated("Use field access instead!")]] float& dyn_KCLCAOMCLHC();
    // Get instance field reference: public UnityEngine.GameObject BDLGDCCPCGC
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_BDLGDCCPCGC();
    // Get instance field reference: public System.Single NJCIDJLNEJL
    [[deprecated("Use field access instead!")]] float& dyn_NJCIDJLNEJL();
    // public System.Void .ctor()
    // Offset: 0x1C9C3E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BardAvailableInstrument* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::BardAvailableInstrument::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BardAvailableInstrument*, creationType>()));
    }
  }; // MagicalActual.BardAvailableInstrument
  #pragma pack(pop)
  static check_size<sizeof(BardAvailableInstrument), 40 + sizeof(float)> __MagicalActual_BardAvailableInstrumentSizeCheck;
  static_assert(sizeof(BardAvailableInstrument) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::BardAvailableInstrument::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
