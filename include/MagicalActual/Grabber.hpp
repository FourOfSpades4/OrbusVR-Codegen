// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: PlayerCharacter
  class PlayerCharacter;
  // Forward declaring type: PlayerAvatar
  class PlayerAvatar;
  // Forward declaring type: DynamicPlayerMap
  class DynamicPlayerMap;
  // Forward declaring type: ObjectHighlighter
  class ObjectHighlighter;
  // Forward declaring type: LaserPointer
  class LaserPointer;
  // Forward declaring type: ScrollableContent
  class ScrollableContent;
  // Forward declaring type: Teleporter
  class Teleporter;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Joint
  class Joint;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PhysicsInteractable
  class PhysicsInteractable;
  // Forward declaring type: OrbusTrackedController
  class OrbusTrackedController;
  // Forward declaring type: HandStateExample
  class HandStateExample;
  // Forward declaring type: ClickedEventArgs
  struct ClickedEventArgs;
}
// Forward declaring namespace: Wacki
namespace Wacki {
  // Forward declaring type: ViveUILaserPointer
  class ViveUILaserPointer;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Grabber
  class Grabber;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::Grabber);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::Grabber*, "MagicalActual", "Grabber");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x1B8
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.Grabber
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD42EC
  class Grabber : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public MagicalActual.PlayerCharacter myPlayer
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::PlayerCharacter* myPlayer;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerCharacter*) == 0x8);
    // private MagicalActual.PlayerAvatar EENJNFDNJBD
    // Size: 0x8
    // Offset: 0x20
    ::MagicalActual::PlayerAvatar* EENJNFDNJBD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerAvatar*) == 0x8);
    // private UnityEngine.Rigidbody AELLKEKMOBG
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Rigidbody* AELLKEKMOBG;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAE45C8
    // private UnityEngine.GameObject <NODJCBIAPIJ>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* NODJCBIAPIJ;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Vector3 DMLIFGJBPPO
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 DMLIFGJBPPO;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: DMLIFGJBPPO and: AKEBLHKHKKJ
    char __padding4[0x4] = {};
    // private UnityEngine.Joint AKEBLHKHKKJ
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Joint* AKEBLHKHKKJ;
    // Field size check
    static_assert(sizeof(::UnityEngine::Joint*) == 0x8);
    // private UnityEngine.Collider[] JGOGJDHABHN
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::Collider*> JGOGJDHABHN;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private UnityEngine.RaycastHit[] EPPIPLHANGD
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::RaycastHit> EPPIPLHANGD;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private PhysicsInteractable DNJJJIADIMO
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::PhysicsInteractable* DNJJJIADIMO;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PhysicsInteractable*) == 0x8);
    // private UnityEngine.GameObject NOGBECPGMJD
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* NOGBECPGMJD;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject IFOOKACPBFJ
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* IFOOKACPBFJ;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single EIJBECJKGOE
    // Size: 0x4
    // Offset: 0x78
    float EIJBECJKGOE;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single HLGKCFLDEJA
    // Size: 0x4
    // Offset: 0x7C
    float HLGKCFLDEJA;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.GameObject PGFDHLNBEJA
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::GameObject* PGFDHLNBEJA;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.SkinnedMeshRenderer AIECMEBGGLF
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::SkinnedMeshRenderer* AIECMEBGGLF;
    // Field size check
    static_assert(sizeof(::UnityEngine::SkinnedMeshRenderer*) == 0x8);
    // private MagicalActual.DynamicPlayerMap OOAIOOMLGHB
    // Size: 0x8
    // Offset: 0x90
    ::MagicalActual::DynamicPlayerMap* OOAIOOMLGHB;
    // Field size check
    static_assert(sizeof(::MagicalActual::DynamicPlayerMap*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAE45D8
    // private OrbusTrackedController <KGFAIGMNEEO>k__BackingField
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::OrbusTrackedController* KGFAIGMNEEO;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OrbusTrackedController*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAE45E8
    // private UnityEngine.Animator <ELMDALDBDHI>k__BackingField
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Animator* ELMDALDBDHI;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAE45F8
    // private UnityEngine.GameObject <CENFJGLHKIG>k__BackingField
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::GameObject* CENFJGLHKIG;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean HKNJOCPFNLJ
    // Size: 0x1
    // Offset: 0xB0
    bool HKNJOCPFNLJ;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xAE4608
    // private System.Boolean <JMFCFKAKKAE>k__BackingField
    // Size: 0x1
    // Offset: 0xB1
    bool JMFCFKAKKAE;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean OENBJMHADOG
    // Size: 0x1
    // Offset: 0xB2
    bool OENBJMHADOG;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean CDNAMHDHPMB
    // Size: 0x1
    // Offset: 0xB3
    bool CDNAMHDHPMB;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: CDNAMHDHPMB and: FCAHOAJICIN
    char __padding22[0x4] = {};
    // private UnityEngine.GameObject FCAHOAJICIN
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::GameObject* FCAHOAJICIN;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single FJGFKHPDFME
    // Size: 0x4
    // Offset: 0xC0
    float FJGFKHPDFME;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single EAGOHEPMIBO
    // Size: 0x4
    // Offset: 0xC4
    float EAGOHEPMIBO;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private MagicalActual.ObjectHighlighter LEKLDADMNJL
    // Size: 0x8
    // Offset: 0xC8
    ::MagicalActual::ObjectHighlighter* LEKLDADMNJL;
    // Field size check
    static_assert(sizeof(::MagicalActual::ObjectHighlighter*) == 0x8);
    // private UnityEngine.RaycastHit EIEFDCNCGKG
    // Size: 0x2C
    // Offset: 0xD0
    ::UnityEngine::RaycastHit EIEFDCNCGKG;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // private UnityEngine.RaycastHit NCOBDMAHGHP
    // Size: 0x2C
    // Offset: 0xFC
    ::UnityEngine::RaycastHit NCOBDMAHGHP;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // private PhysicsInteractable CJLHOHLDMLF
    // Size: 0x8
    // Offset: 0x128
    ::GlobalNamespace::PhysicsInteractable* CJLHOHLDMLF;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PhysicsInteractable*) == 0x8);
    // private System.Boolean LEAFBKGGCGA
    // Size: 0x1
    // Offset: 0x130
    bool LEAFBKGGCGA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean IBOHKKNCLPP
    // Size: 0x1
    // Offset: 0x131
    bool IBOHKKNCLPP;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IBOHKKNCLPP and: LIANHDNBHAA
    char __padding31[0x6] = {};
    // private MagicalActual.LaserPointer LIANHDNBHAA
    // Size: 0x8
    // Offset: 0x138
    ::MagicalActual::LaserPointer* LIANHDNBHAA;
    // Field size check
    static_assert(sizeof(::MagicalActual::LaserPointer*) == 0x8);
    // private System.Boolean EOCNFKLKEGP
    // Size: 0x1
    // Offset: 0x140
    bool EOCNFKLKEGP;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: EOCNFKLKEGP and: climbStartPosition
    char __padding33[0x3] = {};
    // public UnityEngine.Vector3 climbStartPosition
    // Size: 0xC
    // Offset: 0x144
    ::UnityEngine::Vector3 climbStartPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 LKNADBOKHDN
    // Size: 0xC
    // Offset: 0x150
    ::UnityEngine::Vector3 LKNADBOKHDN;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 NLALIPPOFMM
    // Size: 0xC
    // Offset: 0x15C
    ::UnityEngine::Vector3 NLALIPPOFMM;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single HCKHGIHLAJN
    // Size: 0x4
    // Offset: 0x168
    float HCKHGIHLAJN;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single BAGPJPCPDND
    // Size: 0x4
    // Offset: 0x16C
    float BAGPJPCPDND;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xAE4628
    // private Wacki.ViveUILaserPointer <IKIOMGPLICB>k__BackingField
    // Size: 0x8
    // Offset: 0x170
    ::Wacki::ViveUILaserPointer* IKIOMGPLICB;
    // Field size check
    static_assert(sizeof(::Wacki::ViveUILaserPointer*) == 0x8);
    // private System.Boolean GDMPJACINGF
    // Size: 0x1
    // Offset: 0x178
    bool GDMPJACINGF;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean POIBNEFJEJO
    // Size: 0x1
    // Offset: 0x179
    bool POIBNEFJEJO;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isHandHidden
    // Size: 0x1
    // Offset: 0x17A
    bool isHandHidden;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isHandHidden and: meshToHideWhenHandHidden
    char __padding42[0x5] = {};
    // public UnityEngine.Renderer[] meshToHideWhenHandHidden
    // Size: 0x8
    // Offset: 0x180
    ::ArrayW<::UnityEngine::Renderer*> meshToHideWhenHandHidden;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Renderer*>) == 0x8);
    // public OrbusTrackedController OrbusController
    // Size: 0x8
    // Offset: 0x188
    ::GlobalNamespace::OrbusTrackedController* OrbusController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OrbusTrackedController*) == 0x8);
    // private UnityEngine.GameObject HILPMDCOFFK
    // Size: 0x8
    // Offset: 0x190
    ::UnityEngine::GameObject* HILPMDCOFFK;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private MagicalActual.ScrollableContent EMBCFKPENFC
    // Size: 0x8
    // Offset: 0x198
    ::MagicalActual::ScrollableContent* EMBCFKPENFC;
    // Field size check
    static_assert(sizeof(::MagicalActual::ScrollableContent*) == 0x8);
    // private MagicalActual.Teleporter OCEICGAHAAG
    // Size: 0x8
    // Offset: 0x1A0
    ::MagicalActual::Teleporter* OCEICGAHAAG;
    // Field size check
    static_assert(sizeof(::MagicalActual::Teleporter*) == 0x8);
    // private System.Single NPLKLBJMFJB
    // Size: 0x4
    // Offset: 0x1A8
    float NPLKLBJMFJB;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single KKNFBMNOJII
    // Size: 0x4
    // Offset: 0x1AC
    float KKNFBMNOJII;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public HandStateExample myHandStateManager
    // Size: 0x8
    // Offset: 0x1B0
    ::GlobalNamespace::HandStateExample* myHandStateManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HandStateExample*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public MagicalActual.PlayerCharacter myPlayer
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerCharacter*& dyn_myPlayer();
    // Get instance field reference: private MagicalActual.PlayerAvatar EENJNFDNJBD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerAvatar*& dyn_EENJNFDNJBD();
    // Get instance field reference: private UnityEngine.Rigidbody AELLKEKMOBG
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_AELLKEKMOBG();
    // Get instance field reference: private UnityEngine.GameObject <NODJCBIAPIJ>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$NODJCBIAPIJ$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 DMLIFGJBPPO
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_DMLIFGJBPPO();
    // Get instance field reference: private UnityEngine.Joint AKEBLHKHKKJ
    [[deprecated("Use field access instead!")]] ::UnityEngine::Joint*& dyn_AKEBLHKHKKJ();
    // Get instance field reference: private UnityEngine.Collider[] JGOGJDHABHN
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_JGOGJDHABHN();
    // Get instance field reference: private UnityEngine.RaycastHit[] EPPIPLHANGD
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_EPPIPLHANGD();
    // Get instance field reference: private PhysicsInteractable DNJJJIADIMO
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PhysicsInteractable*& dyn_DNJJJIADIMO();
    // Get instance field reference: private UnityEngine.GameObject NOGBECPGMJD
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_NOGBECPGMJD();
    // Get instance field reference: private UnityEngine.GameObject IFOOKACPBFJ
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_IFOOKACPBFJ();
    // Get instance field reference: private System.Single EIJBECJKGOE
    [[deprecated("Use field access instead!")]] float& dyn_EIJBECJKGOE();
    // Get instance field reference: private System.Single HLGKCFLDEJA
    [[deprecated("Use field access instead!")]] float& dyn_HLGKCFLDEJA();
    // Get instance field reference: private UnityEngine.GameObject PGFDHLNBEJA
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_PGFDHLNBEJA();
    // Get instance field reference: private UnityEngine.SkinnedMeshRenderer AIECMEBGGLF
    [[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& dyn_AIECMEBGGLF();
    // Get instance field reference: private MagicalActual.DynamicPlayerMap OOAIOOMLGHB
    [[deprecated("Use field access instead!")]] ::MagicalActual::DynamicPlayerMap*& dyn_OOAIOOMLGHB();
    // Get instance field reference: private OrbusTrackedController <KGFAIGMNEEO>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OrbusTrackedController*& dyn_$KGFAIGMNEEO$k__BackingField();
    // Get instance field reference: private UnityEngine.Animator <ELMDALDBDHI>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_$ELMDALDBDHI$k__BackingField();
    // Get instance field reference: private UnityEngine.GameObject <CENFJGLHKIG>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$CENFJGLHKIG$k__BackingField();
    // Get instance field reference: private System.Boolean HKNJOCPFNLJ
    [[deprecated("Use field access instead!")]] bool& dyn_HKNJOCPFNLJ();
    // Get instance field reference: private System.Boolean <JMFCFKAKKAE>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$JMFCFKAKKAE$k__BackingField();
    // Get instance field reference: private System.Boolean OENBJMHADOG
    [[deprecated("Use field access instead!")]] bool& dyn_OENBJMHADOG();
    // Get instance field reference: private System.Boolean CDNAMHDHPMB
    [[deprecated("Use field access instead!")]] bool& dyn_CDNAMHDHPMB();
    // Get instance field reference: private UnityEngine.GameObject FCAHOAJICIN
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_FCAHOAJICIN();
    // Get instance field reference: private System.Single FJGFKHPDFME
    [[deprecated("Use field access instead!")]] float& dyn_FJGFKHPDFME();
    // Get instance field reference: private System.Single EAGOHEPMIBO
    [[deprecated("Use field access instead!")]] float& dyn_EAGOHEPMIBO();
    // Get instance field reference: private MagicalActual.ObjectHighlighter LEKLDADMNJL
    [[deprecated("Use field access instead!")]] ::MagicalActual::ObjectHighlighter*& dyn_LEKLDADMNJL();
    // Get instance field reference: private UnityEngine.RaycastHit EIEFDCNCGKG
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_EIEFDCNCGKG();
    // Get instance field reference: private UnityEngine.RaycastHit NCOBDMAHGHP
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_NCOBDMAHGHP();
    // Get instance field reference: private PhysicsInteractable CJLHOHLDMLF
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PhysicsInteractable*& dyn_CJLHOHLDMLF();
    // Get instance field reference: private System.Boolean LEAFBKGGCGA
    [[deprecated("Use field access instead!")]] bool& dyn_LEAFBKGGCGA();
    // Get instance field reference: private System.Boolean IBOHKKNCLPP
    [[deprecated("Use field access instead!")]] bool& dyn_IBOHKKNCLPP();
    // Get instance field reference: private MagicalActual.LaserPointer LIANHDNBHAA
    [[deprecated("Use field access instead!")]] ::MagicalActual::LaserPointer*& dyn_LIANHDNBHAA();
    // Get instance field reference: private System.Boolean EOCNFKLKEGP
    [[deprecated("Use field access instead!")]] bool& dyn_EOCNFKLKEGP();
    // Get instance field reference: public UnityEngine.Vector3 climbStartPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_climbStartPosition();
    // Get instance field reference: private UnityEngine.Vector3 LKNADBOKHDN
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_LKNADBOKHDN();
    // Get instance field reference: private UnityEngine.Vector3 NLALIPPOFMM
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_NLALIPPOFMM();
    // Get instance field reference: private System.Single HCKHGIHLAJN
    [[deprecated("Use field access instead!")]] float& dyn_HCKHGIHLAJN();
    // Get instance field reference: private System.Single BAGPJPCPDND
    [[deprecated("Use field access instead!")]] float& dyn_BAGPJPCPDND();
    // Get instance field reference: private Wacki.ViveUILaserPointer <IKIOMGPLICB>k__BackingField
    [[deprecated("Use field access instead!")]] ::Wacki::ViveUILaserPointer*& dyn_$IKIOMGPLICB$k__BackingField();
    // Get instance field reference: private System.Boolean GDMPJACINGF
    [[deprecated("Use field access instead!")]] bool& dyn_GDMPJACINGF();
    // Get instance field reference: private System.Boolean POIBNEFJEJO
    [[deprecated("Use field access instead!")]] bool& dyn_POIBNEFJEJO();
    // Get instance field reference: public System.Boolean isHandHidden
    [[deprecated("Use field access instead!")]] bool& dyn_isHandHidden();
    // Get instance field reference: public UnityEngine.Renderer[] meshToHideWhenHandHidden
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Renderer*>& dyn_meshToHideWhenHandHidden();
    // Get instance field reference: public OrbusTrackedController OrbusController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OrbusTrackedController*& dyn_OrbusController();
    // Get instance field reference: private UnityEngine.GameObject HILPMDCOFFK
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_HILPMDCOFFK();
    // Get instance field reference: private MagicalActual.ScrollableContent EMBCFKPENFC
    [[deprecated("Use field access instead!")]] ::MagicalActual::ScrollableContent*& dyn_EMBCFKPENFC();
    // Get instance field reference: private MagicalActual.Teleporter OCEICGAHAAG
    [[deprecated("Use field access instead!")]] ::MagicalActual::Teleporter*& dyn_OCEICGAHAAG();
    // Get instance field reference: private System.Single NPLKLBJMFJB
    [[deprecated("Use field access instead!")]] float& dyn_NPLKLBJMFJB();
    // Get instance field reference: private System.Single KKNFBMNOJII
    [[deprecated("Use field access instead!")]] float& dyn_KKNFBMNOJII();
    // Get instance field reference: public HandStateExample myHandStateManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HandStateExample*& dyn_myHandStateManager();
    // public System.Void KPKNJGEHGNI(UnityEngine.GameObject IDGLFBDIGIE, System.Boolean NAJCNBBPJAG, UnityEngine.Vector3 GMFDJFKOHAP, UnityEngine.Vector3 ENMBKEBJCAO, System.Boolean BHJJBCHNIPN)
    // Offset: 0x159D958
    void KPKNJGEHGNI(::UnityEngine::GameObject* IDGLFBDIGIE, bool NAJCNBBPJAG, ::UnityEngine::Vector3 GMFDJFKOHAP, ::UnityEngine::Vector3 ENMBKEBJCAO, bool BHJJBCHNIPN);
    // private System.Void Awake()
    // Offset: 0x159DC04
    void Awake();
    // private System.Void PEAHGFNKAGF(UnityEngine.GameObject MMMEIONJJFJ)
    // Offset: 0x159DFBC
    void PEAHGFNKAGF(::UnityEngine::GameObject* MMMEIONJJFJ);
    // private System.Void PMMPKBLNMIK()
    // Offset: 0x159DFC4
    void PMMPKBLNMIK();
    // public System.Boolean hasInteractionTarget()
    // Offset: 0x159E28C
    bool hasInteractionTarget();
    // private System.Void JKCHPJJANLH()
    // Offset: 0x159E2FC
    void JKCHPJJANLH();
    // public System.Void .ctor()
    // Offset: 0x159E52C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Grabber* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::Grabber::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Grabber*, creationType>()));
    }
    // public System.Void UpdateSize()
    // Offset: 0x159E54C
    void UpdateSize();
    // private System.Void JNJFLPMOMAG(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x159E754
    void JNJFLPMOMAG(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // public UnityEngine.GameObject FGNLBAPHIOP()
    // Offset: 0x159EA38
    ::UnityEngine::GameObject* FGNLBAPHIOP();
    // private System.Void HDBIFNFGGDO(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x159EA40
    void HDBIFNFGGDO(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void IAMHAELCKHH()
    // Offset: 0x159EB40
    void IAMHAELCKHH();
    // private System.Void DEEEBOPFNDC()
    // Offset: 0x159EED8
    void DEEEBOPFNDC();
    // public UnityEngine.GameObject BDHIIHAGOII()
    // Offset: 0x159EB30
    ::UnityEngine::GameObject* BDHIIHAGOII();
    // public System.Void ForceOffHighlight()
    // Offset: 0x159F1C0
    void ForceOffHighlight();
    // private System.Void NLPFIBEHIKL(UnityEngine.Animator MMMEIONJJFJ)
    // Offset: 0x159F1F0
    void NLPFIBEHIKL(::UnityEngine::Animator* MMMEIONJJFJ);
    // private System.Void Start()
    // Offset: 0x159F1F8
    void Start();
    // public System.Void EPFDLDJCDMB(UnityEngine.GameObject IDGLFBDIGIE, System.Boolean EMFMOAOMFOC)
    // Offset: 0x159F4EC
    void EPFDLDJCDMB(::UnityEngine::GameObject* IDGLFBDIGIE, bool EMFMOAOMFOC);
    // public System.Boolean isHoldingSomething()
    // Offset: 0x159FDDC
    bool isHoldingSomething();
    // private System.Void ENIGECPOHND(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x159FE4C
    void ENIGECPOHND(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void KBIAGFNHDLJ(OrbusTrackedController MMMEIONJJFJ)
    // Offset: 0x159DF9C
    void KBIAGFNHDLJ(::GlobalNamespace::OrbusTrackedController* MMMEIONJJFJ);
    // private System.Void KGCMHEAFJBG(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x159FF7C
    void KGCMHEAFJBG(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void GBCHLGNALEH(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x15A04E0
    void GBCHLGNALEH(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void IMBEEEBPBBL(System.Boolean MMMEIONJJFJ)
    // Offset: 0x15A04D4
    void IMBEEEBPBBL(bool MMMEIONJJFJ);
    // public UnityEngine.GameObject get_currentGrabbedObject()
    // Offset: 0x159EB38
    ::UnityEngine::GameObject* get_currentGrabbedObject();
    // public System.Void UnGrabObject(UnityEngine.GameObject IDGLFBDIGIE, System.Boolean EMFMOAOMFOC)
    // Offset: 0x15A05CC
    void UnGrabObject(::UnityEngine::GameObject* IDGLFBDIGIE, bool EMFMOAOMFOC);
    // public System.Void AttachJointToObject(UnityEngine.GameObject AHEELFEFBHD, UnityEngine.Vector3 FPAIDALEHJD, System.String EDGJBEIIJFJ)
    // Offset: 0x15A0EA4
    void AttachJointToObject(::UnityEngine::GameObject* AHEELFEFBHD, ::UnityEngine::Vector3 FPAIDALEHJD, ::StringW EDGJBEIIJFJ);
    // public System.Void SoftReleaseCurrentObject()
    // Offset: 0x15A10DC
    void SoftReleaseCurrentObject();
    // public Wacki.ViveUILaserPointer LCPNLBIOGLA()
    // Offset: 0x15A1274
    ::Wacki::ViveUILaserPointer* LCPNLBIOGLA();
    // public System.Int32 UpdateHandServerState(System.Int32 PJPJPPPBLGC)
    // Offset: 0x15A127C
    int UpdateHandServerState(int PJPJPPPBLGC);
    // private System.Void PGNJCHGOEME(UnityEngine.GameObject MMMEIONJJFJ)
    // Offset: 0x15A12E4
    void PGNJCHGOEME(::UnityEngine::GameObject* MMMEIONJJFJ);
    // private System.Void OKEPAGJPPEB()
    // Offset: 0x15A12EC
    void OKEPAGJPPEB();
    // public OrbusTrackedController get_myController()
    // Offset: 0x159DFA4
    ::GlobalNamespace::OrbusTrackedController* get_myController();
    // private System.Void OnDisable()
    // Offset: 0x15A15D0
    void OnDisable();
    // private System.Void Update()
    // Offset: 0x15A1608
    void Update();
    // private System.Void CFKIPBFPJHG(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x15A1C6C
    void CFKIPBFPJHG(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // public System.Void LOAKAPJHEMG(System.Boolean EMFMOAOMFOC)
    // Offset: 0x159F5F0
    void LOAKAPJHEMG(bool EMFMOAOMFOC);
    // private System.Void FixedUpdate()
    // Offset: 0x15A1F44
    void FixedUpdate();
    // public System.Boolean CNDNBIPCDKP()
    // Offset: 0x15A3300
    bool CNDNBIPCDKP();
    // private System.Void OJCDPOLNHJF(UnityEngine.Animator MMMEIONJJFJ)
    // Offset: 0x159EED0
    void OJCDPOLNHJF(::UnityEngine::Animator* MMMEIONJJFJ);
    // public System.Void IFEHINJBJMI()
    // Offset: 0x15A3370
    void IFEHINJBJMI();
    // public System.Boolean get_isGrabbing()
    // Offset: 0x15A1600
    bool get_isGrabbing();
    // public System.Void ForceCurrentInteractionTarget(UnityEngine.GameObject AHEELFEFBHD)
    // Offset: 0x15A3434
    void ForceCurrentInteractionTarget(::UnityEngine::GameObject* AHEELFEFBHD);
    // private System.Void MKLHONOGDHH(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x15A343C
    void MKLHONOGDHH(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // public System.Void DetachCurrentObject(System.Boolean EMFMOAOMFOC)
    // Offset: 0x15A06D0
    void DetachCurrentObject(bool EMFMOAOMFOC);
    // public System.Void ReleaseAnyCurrentObject()
    // Offset: 0x15991D4
    void ReleaseAnyCurrentObject();
    // public System.Boolean AONLNGDAPBA()
    // Offset: 0x15A3528
    bool AONLNGDAPBA();
    // private System.Void PAKKDHIJFAC()
    // Offset: 0x15A3598
    void PAKKDHIJFAC();
    // public System.Int32 MIIOCLHGFDO(System.Int32 PJPJPPPBLGC)
    // Offset: 0x15A3880
    int MIIOCLHGFDO(int PJPJPPPBLGC);
    // private System.Void MDJPNCBJCOB(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x15A38E8
    void MDJPNCBJCOB(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // public UnityEngine.GameObject get_holdPoint()
    // Offset: 0x159DBFC
    ::UnityEngine::GameObject* get_holdPoint();
    // private System.Void DKBKKOOBJOA(System.Boolean FNNPHLLDLJG)
    // Offset: 0x15A3E3C
    void DKBKKOOBJOA(bool FNNPHLLDLJG);
    // public System.Void GrabObject(UnityEngine.GameObject IDGLFBDIGIE, System.Boolean NAJCNBBPJAG, UnityEngine.Vector3 GMFDJFKOHAP, UnityEngine.Vector3 ENMBKEBJCAO, System.Boolean BHJJBCHNIPN)
    // Offset: 0x15A4110
    void GrabObject(::UnityEngine::GameObject* IDGLFBDIGIE, bool NAJCNBBPJAG, ::UnityEngine::Vector3 GMFDJFKOHAP, ::UnityEngine::Vector3 ENMBKEBJCAO, bool BHJJBCHNIPN);
    // public UnityEngine.Animator KLBMOAJCDDG()
    // Offset: 0x15A43A4
    ::UnityEngine::Animator* KLBMOAJCDDG();
    // public System.Void AFDBDOEIJGB(UnityEngine.GameObject IDGLFBDIGIE, System.Boolean NAJCNBBPJAG, UnityEngine.Vector3 GMFDJFKOHAP, UnityEngine.Vector3 ENMBKEBJCAO, System.Boolean BHJJBCHNIPN)
    // Offset: 0x15A43AC
    void AFDBDOEIJGB(::UnityEngine::GameObject* IDGLFBDIGIE, bool NAJCNBBPJAG, ::UnityEngine::Vector3 GMFDJFKOHAP, ::UnityEngine::Vector3 ENMBKEBJCAO, bool BHJJBCHNIPN);
    // public UnityEngine.Vector3 getLocalRelativePosition(UnityEngine.Vector3 EIJFPEAIJGM, UnityEngine.Vector3 NHFBFBMNPFC)
    // Offset: 0x15A4640
    ::UnityEngine::Vector3 getLocalRelativePosition(::UnityEngine::Vector3 EIJFPEAIJGM, ::UnityEngine::Vector3 NHFBFBMNPFC);
    // private System.Void CBJDFAEGDIO()
    // Offset: 0x15A47D8
    void CBJDFAEGDIO();
    // public System.Void KCKLHAPPJGN()
    // Offset: 0x15A480C
    void KCKLHAPPJGN();
    // private System.Void OAIMMOGHEBJ()
    // Offset: 0x15A2908
    void OAIMMOGHEBJ();
    // private System.Void OKHMFGMPECJ(UnityEngine.GameObject MMMEIONJJFJ)
    // Offset: 0x159DBF4
    void OKHMFGMPECJ(::UnityEngine::GameObject* MMMEIONJJFJ);
    // private System.Void KHNIOILLFCB(UnityEngine.GameObject MMMEIONJJFJ)
    // Offset: 0x159F4E4
    void KHNIOILLFCB(::UnityEngine::GameObject* MMMEIONJJFJ);
    // private System.Void JMCILNABMLJ()
    // Offset: 0x15A2280
    void JMCILNABMLJ();
    // public System.Void MKHGNMKFFJP(UnityEngine.GameObject IDGLFBDIGIE, System.Boolean NAJCNBBPJAG, UnityEngine.Vector3 GMFDJFKOHAP, UnityEngine.Vector3 ENMBKEBJCAO, System.Boolean BHJJBCHNIPN)
    // Offset: 0x15A48B4
    void MKHGNMKFFJP(::UnityEngine::GameObject* IDGLFBDIGIE, bool NAJCNBBPJAG, ::UnityEngine::Vector3 GMFDJFKOHAP, ::UnityEngine::Vector3 ENMBKEBJCAO, bool BHJJBCHNIPN);
    // public System.Void HideHand()
    // Offset: 0x15A4B48
    void HideHand();
    // public System.Void NMCGDMDCLMP(UnityEngine.GameObject AHEELFEFBHD)
    // Offset: 0x15A4C3C
    void NMCGDMDCLMP(::UnityEngine::GameObject* AHEELFEFBHD);
    // public UnityEngine.Animator get_myAnimator()
    // Offset: 0x15A4C44
    ::UnityEngine::Animator* get_myAnimator();
    // public System.Boolean PPMPFLGGFAN()
    // Offset: 0x15A4C4C
    bool PPMPFLGGFAN();
    // private System.Void AIGLNPBJIPM(Wacki.ViveUILaserPointer MMMEIONJJFJ)
    // Offset: 0x159DFAC
    void AIGLNPBJIPM(::Wacki::ViveUILaserPointer* MMMEIONJJFJ);
    // public System.Void JCJICAANFCB()
    // Offset: 0x15A4C54
    void JCJICAANFCB();
    // public UnityEngine.GameObject KIOHNGFHAHF()
    // Offset: 0x159DBEC
    ::UnityEngine::GameObject* KIOHNGFHAHF();
    // private System.Void KNMJJHJPLFG(UnityEngine.Animator MMMEIONJJFJ)
    // Offset: 0x159DF94
    void KNMJJHJPLFG(::UnityEngine::Animator* MMMEIONJJFJ);
    // public System.Void DONLGIPNIBP()
    // Offset: 0x15A4D14
    void DONLGIPNIBP();
    // private System.Void NCFEAHEIPGK(System.Boolean FNNPHLLDLJG)
    // Offset: 0x159E75C
    void NCFEAHEIPGK(bool FNNPHLLDLJG);
    // public UnityEngine.Vector3 getRelativePosition(UnityEngine.Transform EIJFPEAIJGM, UnityEngine.Vector3 NHFBFBMNPFC)
    // Offset: 0x15A4DBC
    ::UnityEngine::Vector3 getRelativePosition(::UnityEngine::Transform* EIJFPEAIJGM, ::UnityEngine::Vector3 NHFBFBMNPFC);
    // public System.Void ShowHand()
    // Offset: 0x15A1184
    void ShowHand();
    // public System.Void MBBEIJDCBNP(UnityEngine.GameObject AHEELFEFBHD)
    // Offset: 0x15A4FA0
    void MBBEIJDCBNP(::UnityEngine::GameObject* AHEELFEFBHD);
    // public Wacki.ViveUILaserPointer get_myUILaser()
    // Offset: 0x159DFB4
    ::Wacki::ViveUILaserPointer* get_myUILaser();
    // private System.Void JIFLDJGCLMF(System.Boolean FNNPHLLDLJG)
    // Offset: 0x15A1C74
    void JIFLDJGCLMF(bool FNNPHLLDLJG);
  }; // MagicalActual.Grabber
  #pragma pack(pop)
  static check_size<sizeof(Grabber), 432 + sizeof(::GlobalNamespace::HandStateExample*)> __MagicalActual_GrabberSizeCheck;
  static_assert(sizeof(Grabber) == 0x1B8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::Grabber::KPKNJGEHGNI
// Il2CppName: KPKNJGEHGNI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::GameObject*, bool, ::UnityEngine::Vector3, ::UnityEngine::Vector3, bool)>(&MagicalActual::Grabber::KPKNJGEHGNI)> {
  static const MethodInfo* get() {
    static auto* IDGLFBDIGIE = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* NAJCNBBPJAG = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* GMFDJFKOHAP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* ENMBKEBJCAO = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* BHJJBCHNIPN = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "KPKNJGEHGNI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{IDGLFBDIGIE, NAJCNBBPJAG, GMFDJFKOHAP, ENMBKEBJCAO, BHJJBCHNIPN});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::PEAHGFNKAGF
// Il2CppName: PEAHGFNKAGF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::GameObject*)>(&MagicalActual::Grabber::PEAHGFNKAGF)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "PEAHGFNKAGF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::PMMPKBLNMIK
// Il2CppName: PMMPKBLNMIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::PMMPKBLNMIK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "PMMPKBLNMIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::hasInteractionTarget
// Il2CppName: hasInteractionTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::hasInteractionTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "hasInteractionTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::JKCHPJJANLH
// Il2CppName: JKCHPJJANLH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::JKCHPJJANLH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "JKCHPJJANLH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::Grabber::UpdateSize
// Il2CppName: UpdateSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::UpdateSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "UpdateSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::JNJFLPMOMAG
// Il2CppName: JNJFLPMOMAG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Grabber::JNJFLPMOMAG)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "JNJFLPMOMAG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::FGNLBAPHIOP
// Il2CppName: FGNLBAPHIOP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::FGNLBAPHIOP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "FGNLBAPHIOP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::HDBIFNFGGDO
// Il2CppName: HDBIFNFGGDO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Grabber::HDBIFNFGGDO)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "HDBIFNFGGDO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::IAMHAELCKHH
// Il2CppName: IAMHAELCKHH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::IAMHAELCKHH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "IAMHAELCKHH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::DEEEBOPFNDC
// Il2CppName: DEEEBOPFNDC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::DEEEBOPFNDC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "DEEEBOPFNDC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::BDHIIHAGOII
// Il2CppName: BDHIIHAGOII
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::BDHIIHAGOII)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "BDHIIHAGOII", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::ForceOffHighlight
// Il2CppName: ForceOffHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::ForceOffHighlight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "ForceOffHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::NLPFIBEHIKL
// Il2CppName: NLPFIBEHIKL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::Animator*)>(&MagicalActual::Grabber::NLPFIBEHIKL)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("UnityEngine", "Animator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "NLPFIBEHIKL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::EPFDLDJCDMB
// Il2CppName: EPFDLDJCDMB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::GameObject*, bool)>(&MagicalActual::Grabber::EPFDLDJCDMB)> {
  static const MethodInfo* get() {
    static auto* IDGLFBDIGIE = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* EMFMOAOMFOC = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "EPFDLDJCDMB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{IDGLFBDIGIE, EMFMOAOMFOC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::isHoldingSomething
// Il2CppName: isHoldingSomething
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::isHoldingSomething)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "isHoldingSomething", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::ENIGECPOHND
// Il2CppName: ENIGECPOHND
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Grabber::ENIGECPOHND)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "ENIGECPOHND", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::KBIAGFNHDLJ
// Il2CppName: KBIAGFNHDLJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::GlobalNamespace::OrbusTrackedController*)>(&MagicalActual::Grabber::KBIAGFNHDLJ)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("", "OrbusTrackedController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "KBIAGFNHDLJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::KGCMHEAFJBG
// Il2CppName: KGCMHEAFJBG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Grabber::KGCMHEAFJBG)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "KGCMHEAFJBG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::GBCHLGNALEH
// Il2CppName: GBCHLGNALEH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Grabber::GBCHLGNALEH)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "GBCHLGNALEH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::IMBEEEBPBBL
// Il2CppName: IMBEEEBPBBL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(bool)>(&MagicalActual::Grabber::IMBEEEBPBBL)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "IMBEEEBPBBL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::get_currentGrabbedObject
// Il2CppName: get_currentGrabbedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::get_currentGrabbedObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "get_currentGrabbedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::UnGrabObject
// Il2CppName: UnGrabObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::GameObject*, bool)>(&MagicalActual::Grabber::UnGrabObject)> {
  static const MethodInfo* get() {
    static auto* IDGLFBDIGIE = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* EMFMOAOMFOC = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "UnGrabObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{IDGLFBDIGIE, EMFMOAOMFOC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::AttachJointToObject
// Il2CppName: AttachJointToObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::GameObject*, ::UnityEngine::Vector3, ::StringW)>(&MagicalActual::Grabber::AttachJointToObject)> {
  static const MethodInfo* get() {
    static auto* AHEELFEFBHD = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* FPAIDALEHJD = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* EDGJBEIIJFJ = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "AttachJointToObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AHEELFEFBHD, FPAIDALEHJD, EDGJBEIIJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::SoftReleaseCurrentObject
// Il2CppName: SoftReleaseCurrentObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::SoftReleaseCurrentObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "SoftReleaseCurrentObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::LCPNLBIOGLA
// Il2CppName: LCPNLBIOGLA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wacki::ViveUILaserPointer* (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::LCPNLBIOGLA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "LCPNLBIOGLA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::UpdateHandServerState
// Il2CppName: UpdateHandServerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MagicalActual::Grabber::*)(int)>(&MagicalActual::Grabber::UpdateHandServerState)> {
  static const MethodInfo* get() {
    static auto* PJPJPPPBLGC = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "UpdateHandServerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{PJPJPPPBLGC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::PGNJCHGOEME
// Il2CppName: PGNJCHGOEME
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::GameObject*)>(&MagicalActual::Grabber::PGNJCHGOEME)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "PGNJCHGOEME", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::OKEPAGJPPEB
// Il2CppName: OKEPAGJPPEB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::OKEPAGJPPEB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "OKEPAGJPPEB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::get_myController
// Il2CppName: get_myController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OrbusTrackedController* (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::get_myController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "get_myController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::CFKIPBFPJHG
// Il2CppName: CFKIPBFPJHG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Grabber::CFKIPBFPJHG)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "CFKIPBFPJHG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::LOAKAPJHEMG
// Il2CppName: LOAKAPJHEMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(bool)>(&MagicalActual::Grabber::LOAKAPJHEMG)> {
  static const MethodInfo* get() {
    static auto* EMFMOAOMFOC = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "LOAKAPJHEMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{EMFMOAOMFOC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::CNDNBIPCDKP
// Il2CppName: CNDNBIPCDKP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::CNDNBIPCDKP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "CNDNBIPCDKP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::OJCDPOLNHJF
// Il2CppName: OJCDPOLNHJF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::Animator*)>(&MagicalActual::Grabber::OJCDPOLNHJF)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("UnityEngine", "Animator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "OJCDPOLNHJF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::IFEHINJBJMI
// Il2CppName: IFEHINJBJMI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::IFEHINJBJMI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "IFEHINJBJMI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::get_isGrabbing
// Il2CppName: get_isGrabbing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::get_isGrabbing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "get_isGrabbing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::ForceCurrentInteractionTarget
// Il2CppName: ForceCurrentInteractionTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::GameObject*)>(&MagicalActual::Grabber::ForceCurrentInteractionTarget)> {
  static const MethodInfo* get() {
    static auto* AHEELFEFBHD = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "ForceCurrentInteractionTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AHEELFEFBHD});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::MKLHONOGDHH
// Il2CppName: MKLHONOGDHH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Grabber::MKLHONOGDHH)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "MKLHONOGDHH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::DetachCurrentObject
// Il2CppName: DetachCurrentObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(bool)>(&MagicalActual::Grabber::DetachCurrentObject)> {
  static const MethodInfo* get() {
    static auto* EMFMOAOMFOC = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "DetachCurrentObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{EMFMOAOMFOC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::ReleaseAnyCurrentObject
// Il2CppName: ReleaseAnyCurrentObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::ReleaseAnyCurrentObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "ReleaseAnyCurrentObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::AONLNGDAPBA
// Il2CppName: AONLNGDAPBA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::AONLNGDAPBA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "AONLNGDAPBA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::PAKKDHIJFAC
// Il2CppName: PAKKDHIJFAC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::PAKKDHIJFAC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "PAKKDHIJFAC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::MIIOCLHGFDO
// Il2CppName: MIIOCLHGFDO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MagicalActual::Grabber::*)(int)>(&MagicalActual::Grabber::MIIOCLHGFDO)> {
  static const MethodInfo* get() {
    static auto* PJPJPPPBLGC = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "MIIOCLHGFDO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{PJPJPPPBLGC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::MDJPNCBJCOB
// Il2CppName: MDJPNCBJCOB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Grabber::MDJPNCBJCOB)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "MDJPNCBJCOB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::get_holdPoint
// Il2CppName: get_holdPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::get_holdPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "get_holdPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::DKBKKOOBJOA
// Il2CppName: DKBKKOOBJOA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(bool)>(&MagicalActual::Grabber::DKBKKOOBJOA)> {
  static const MethodInfo* get() {
    static auto* FNNPHLLDLJG = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "DKBKKOOBJOA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FNNPHLLDLJG});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::GrabObject
// Il2CppName: GrabObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::GameObject*, bool, ::UnityEngine::Vector3, ::UnityEngine::Vector3, bool)>(&MagicalActual::Grabber::GrabObject)> {
  static const MethodInfo* get() {
    static auto* IDGLFBDIGIE = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* NAJCNBBPJAG = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* GMFDJFKOHAP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* ENMBKEBJCAO = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* BHJJBCHNIPN = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "GrabObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{IDGLFBDIGIE, NAJCNBBPJAG, GMFDJFKOHAP, ENMBKEBJCAO, BHJJBCHNIPN});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::KLBMOAJCDDG
// Il2CppName: KLBMOAJCDDG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animator* (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::KLBMOAJCDDG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "KLBMOAJCDDG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::AFDBDOEIJGB
// Il2CppName: AFDBDOEIJGB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::GameObject*, bool, ::UnityEngine::Vector3, ::UnityEngine::Vector3, bool)>(&MagicalActual::Grabber::AFDBDOEIJGB)> {
  static const MethodInfo* get() {
    static auto* IDGLFBDIGIE = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* NAJCNBBPJAG = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* GMFDJFKOHAP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* ENMBKEBJCAO = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* BHJJBCHNIPN = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "AFDBDOEIJGB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{IDGLFBDIGIE, NAJCNBBPJAG, GMFDJFKOHAP, ENMBKEBJCAO, BHJJBCHNIPN});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::getLocalRelativePosition
// Il2CppName: getLocalRelativePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MagicalActual::Grabber::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&MagicalActual::Grabber::getLocalRelativePosition)> {
  static const MethodInfo* get() {
    static auto* EIJFPEAIJGM = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* NHFBFBMNPFC = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "getLocalRelativePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{EIJFPEAIJGM, NHFBFBMNPFC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::CBJDFAEGDIO
// Il2CppName: CBJDFAEGDIO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::CBJDFAEGDIO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "CBJDFAEGDIO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::KCKLHAPPJGN
// Il2CppName: KCKLHAPPJGN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::KCKLHAPPJGN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "KCKLHAPPJGN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::OAIMMOGHEBJ
// Il2CppName: OAIMMOGHEBJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::OAIMMOGHEBJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "OAIMMOGHEBJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::OKHMFGMPECJ
// Il2CppName: OKHMFGMPECJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::GameObject*)>(&MagicalActual::Grabber::OKHMFGMPECJ)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "OKHMFGMPECJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::KHNIOILLFCB
// Il2CppName: KHNIOILLFCB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::GameObject*)>(&MagicalActual::Grabber::KHNIOILLFCB)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "KHNIOILLFCB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::JMCILNABMLJ
// Il2CppName: JMCILNABMLJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::JMCILNABMLJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "JMCILNABMLJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::MKHGNMKFFJP
// Il2CppName: MKHGNMKFFJP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::GameObject*, bool, ::UnityEngine::Vector3, ::UnityEngine::Vector3, bool)>(&MagicalActual::Grabber::MKHGNMKFFJP)> {
  static const MethodInfo* get() {
    static auto* IDGLFBDIGIE = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* NAJCNBBPJAG = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* GMFDJFKOHAP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* ENMBKEBJCAO = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* BHJJBCHNIPN = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "MKHGNMKFFJP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{IDGLFBDIGIE, NAJCNBBPJAG, GMFDJFKOHAP, ENMBKEBJCAO, BHJJBCHNIPN});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::HideHand
// Il2CppName: HideHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::HideHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "HideHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::NMCGDMDCLMP
// Il2CppName: NMCGDMDCLMP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::GameObject*)>(&MagicalActual::Grabber::NMCGDMDCLMP)> {
  static const MethodInfo* get() {
    static auto* AHEELFEFBHD = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "NMCGDMDCLMP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AHEELFEFBHD});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::get_myAnimator
// Il2CppName: get_myAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animator* (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::get_myAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "get_myAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::PPMPFLGGFAN
// Il2CppName: PPMPFLGGFAN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::PPMPFLGGFAN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "PPMPFLGGFAN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::AIGLNPBJIPM
// Il2CppName: AIGLNPBJIPM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::Wacki::ViveUILaserPointer*)>(&MagicalActual::Grabber::AIGLNPBJIPM)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("Wacki", "ViveUILaserPointer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "AIGLNPBJIPM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::JCJICAANFCB
// Il2CppName: JCJICAANFCB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::JCJICAANFCB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "JCJICAANFCB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::KIOHNGFHAHF
// Il2CppName: KIOHNGFHAHF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::KIOHNGFHAHF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "KIOHNGFHAHF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::KNMJJHJPLFG
// Il2CppName: KNMJJHJPLFG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::Animator*)>(&MagicalActual::Grabber::KNMJJHJPLFG)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("UnityEngine", "Animator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "KNMJJHJPLFG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::DONLGIPNIBP
// Il2CppName: DONLGIPNIBP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::DONLGIPNIBP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "DONLGIPNIBP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::NCFEAHEIPGK
// Il2CppName: NCFEAHEIPGK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(bool)>(&MagicalActual::Grabber::NCFEAHEIPGK)> {
  static const MethodInfo* get() {
    static auto* FNNPHLLDLJG = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "NCFEAHEIPGK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FNNPHLLDLJG});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::getRelativePosition
// Il2CppName: getRelativePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (MagicalActual::Grabber::*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&MagicalActual::Grabber::getRelativePosition)> {
  static const MethodInfo* get() {
    static auto* EIJFPEAIJGM = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* NHFBFBMNPFC = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "getRelativePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{EIJFPEAIJGM, NHFBFBMNPFC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::ShowHand
// Il2CppName: ShowHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::ShowHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "ShowHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::MBBEIJDCBNP
// Il2CppName: MBBEIJDCBNP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(::UnityEngine::GameObject*)>(&MagicalActual::Grabber::MBBEIJDCBNP)> {
  static const MethodInfo* get() {
    static auto* AHEELFEFBHD = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "MBBEIJDCBNP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AHEELFEFBHD});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::get_myUILaser
// Il2CppName: get_myUILaser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Wacki::ViveUILaserPointer* (MagicalActual::Grabber::*)()>(&MagicalActual::Grabber::get_myUILaser)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "get_myUILaser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Grabber::JIFLDJGCLMF
// Il2CppName: JIFLDJGCLMF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Grabber::*)(bool)>(&MagicalActual::Grabber::JIFLDJGCLMF)> {
  static const MethodInfo* get() {
    static auto* FNNPHLLDLJG = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Grabber*), "JIFLDJGCLMF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FNNPHLLDLJG});
  }
};
