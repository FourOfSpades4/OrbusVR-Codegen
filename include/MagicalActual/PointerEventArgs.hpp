// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: PointerEventArgs
  struct PointerEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::PointerEventArgs, "MagicalActual", "PointerEventArgs");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: MagicalActual.PointerEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  struct PointerEventArgs/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt32 LFKNCLBFEHB
    // Size: 0x4
    // Offset: 0x0
    uint LFKNCLBFEHB;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 OANJPPDFFGF
    // Size: 0x4
    // Offset: 0x4
    uint OANJPPDFFGF;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Single NJHACKHOOBD
    // Size: 0x4
    // Offset: 0x8
    float NJHACKHOOBD;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: NJHACKHOOBD and: AHEELFEFBHD
    char __padding2[0x4] = {};
    // public UnityEngine.Transform AHEELFEFBHD
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Transform* AHEELFEFBHD;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Creating value type constructor for type: PointerEventArgs
    constexpr PointerEventArgs(uint LFKNCLBFEHB_ = {}, uint OANJPPDFFGF_ = {}, float NJHACKHOOBD_ = {}, ::UnityEngine::Transform* AHEELFEFBHD_ = {}) noexcept : LFKNCLBFEHB{LFKNCLBFEHB_}, OANJPPDFFGF{OANJPPDFFGF_}, NJHACKHOOBD{NJHACKHOOBD_}, AHEELFEFBHD{AHEELFEFBHD_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt32 LFKNCLBFEHB
    [[deprecated("Use field access instead!")]] uint& dyn_LFKNCLBFEHB();
    // Get instance field reference: public System.UInt32 OANJPPDFFGF
    [[deprecated("Use field access instead!")]] uint& dyn_OANJPPDFFGF();
    // Get instance field reference: public System.Single NJHACKHOOBD
    [[deprecated("Use field access instead!")]] float& dyn_NJHACKHOOBD();
    // Get instance field reference: public UnityEngine.Transform AHEELFEFBHD
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_AHEELFEFBHD();
  }; // MagicalActual.PointerEventArgs
  #pragma pack(pop)
  static check_size<sizeof(PointerEventArgs), 16 + sizeof(::UnityEngine::Transform*)> __MagicalActual_PointerEventArgsSizeCheck;
  static_assert(sizeof(PointerEventArgs) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
