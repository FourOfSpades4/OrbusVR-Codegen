// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: TinkerablePiece
  class TinkerablePiece;
  // Forward declaring type: WorldMenu
  class WorldMenu;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: TinkerableObject
  class TinkerableObject;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::TinkerableObject);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::TinkerableObject*, "MagicalActual", "TinkerableObject");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.TinkerableObject
  // [TokenAttribute] Offset: FFFFFFFF
  class TinkerableObject : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Collections.Generic.List`1<MagicalActual.TinkerablePiece> previewPieces
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::MagicalActual::TinkerablePiece*>* previewPieces;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::MagicalActual::TinkerablePiece*>*) == 0x8);
    // public System.Collections.Generic.List`1<MagicalActual.TinkerablePiece> interactablePieces
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::MagicalActual::TinkerablePiece*>* interactablePieces;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::MagicalActual::TinkerablePiece*>*) == 0x8);
    // public UnityEngine.Transform previewPieceParent
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* previewPieceParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Animator myAnimatorController
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Animator* myAnimatorController;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // public UnityEngine.GameObject menuPoint
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* menuPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public MagicalActual.TinkerablePiece currentlyGrabbedPiece
    // Size: 0x8
    // Offset: 0x40
    ::MagicalActual::TinkerablePiece* currentlyGrabbedPiece;
    // Field size check
    static_assert(sizeof(::MagicalActual::TinkerablePiece*) == 0x8);
    // private MagicalActual.WorldMenu KNCKPELAKBH
    // Size: 0x8
    // Offset: 0x48
    ::MagicalActual::WorldMenu* KNCKPELAKBH;
    // Field size check
    static_assert(sizeof(::MagicalActual::WorldMenu*) == 0x8);
    // public System.Boolean completed
    // Size: 0x1
    // Offset: 0x50
    bool completed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean GENIHKGIFIB
    // Size: 0x1
    // Offset: 0x51
    bool GENIHKGIFIB;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean IKLMMIHJMHN
    // Size: 0x1
    // Offset: 0x52
    bool IKLMMIHJMHN;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IKLMMIHJMHN and: HKAICPOJEEA
    char __padding9[0x1] = {};
    // private System.Int32 HKAICPOJEEA
    // Size: 0x4
    // Offset: 0x54
    int HKAICPOJEEA;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 CAPKEKNBPJC
    // Size: 0x4
    // Offset: 0x58
    int CAPKEKNBPJC;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 LKOGACFAMIF
    // Size: 0x4
    // Offset: 0x5C
    int LKOGACFAMIF;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Collections.Generic.List`1<MagicalActual.TinkerablePiece> previewPieces
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::MagicalActual::TinkerablePiece*>*& dyn_previewPieces();
    // Get instance field reference: public System.Collections.Generic.List`1<MagicalActual.TinkerablePiece> interactablePieces
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::MagicalActual::TinkerablePiece*>*& dyn_interactablePieces();
    // Get instance field reference: public UnityEngine.Transform previewPieceParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_previewPieceParent();
    // Get instance field reference: private UnityEngine.Animator myAnimatorController
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_myAnimatorController();
    // Get instance field reference: public UnityEngine.GameObject menuPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_menuPoint();
    // Get instance field reference: public MagicalActual.TinkerablePiece currentlyGrabbedPiece
    [[deprecated("Use field access instead!")]] ::MagicalActual::TinkerablePiece*& dyn_currentlyGrabbedPiece();
    // Get instance field reference: private MagicalActual.WorldMenu KNCKPELAKBH
    [[deprecated("Use field access instead!")]] ::MagicalActual::WorldMenu*& dyn_KNCKPELAKBH();
    // Get instance field reference: public System.Boolean completed
    [[deprecated("Use field access instead!")]] bool& dyn_completed();
    // Get instance field reference: private System.Boolean GENIHKGIFIB
    [[deprecated("Use field access instead!")]] bool& dyn_GENIHKGIFIB();
    // Get instance field reference: private System.Boolean IKLMMIHJMHN
    [[deprecated("Use field access instead!")]] bool& dyn_IKLMMIHJMHN();
    // Get instance field reference: private System.Int32 HKAICPOJEEA
    [[deprecated("Use field access instead!")]] int& dyn_HKAICPOJEEA();
    // Get instance field reference: private System.Int32 CAPKEKNBPJC
    [[deprecated("Use field access instead!")]] int& dyn_CAPKEKNBPJC();
    // Get instance field reference: private System.Int32 LKOGACFAMIF
    [[deprecated("Use field access instead!")]] int& dyn_LKOGACFAMIF();
    // private System.Void Update()
    // Offset: 0x13A8EC4
    void Update();
    // public System.Void TinkerComplete()
    // Offset: 0x13A9750
    void TinkerComplete();
    // public System.Void PIIIMNOLBFL()
    // Offset: 0x13A975C
    void PIIIMNOLBFL();
    // private System.Void FGIFGGNGKPK()
    // Offset: 0x13A9764
    void FGIFGGNGKPK();
    // private System.Void IDOCJGNLNFL()
    // Offset: 0x13A97CC
    void IDOCJGNLNFL();
    // public System.Void .ctor()
    // Offset: 0x13A9834
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TinkerableObject* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::TinkerableObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TinkerableObject*, creationType>()));
    }
    // private System.Void FEIGDJNEHBG()
    // Offset: 0x13A9844
    void FEIGDJNEHBG();
    // private System.Void NHADFEMILCC()
    // Offset: 0x13AA0D4
    void NHADFEMILCC();
    // private System.Void MHHFAOGFAPO()
    // Offset: 0x13AA13C
    void MHHFAOGFAPO();
    // private System.Void CEGEBCFNLFC()
    // Offset: 0x13AA9CC
    void CEGEBCFNLFC();
    // private System.Void INJNMDOBFOI()
    // Offset: 0x13AB278
    void INJNMDOBFOI();
    // public System.Void FBMKENGCPDH()
    // Offset: 0x13ABB1C
    void FBMKENGCPDH();
    // private System.Void GKIOLADOCOK()
    // Offset: 0x13ABB24
    void GKIOLADOCOK();
    // public System.Void MIGJMHJLMBO()
    // Offset: 0x13ABB8C
    void MIGJMHJLMBO();
    // private System.Void EIIKFEMCNKM()
    // Offset: 0x13ABB98
    void EIIKFEMCNKM();
    // private System.Void LBIKOKCCILF()
    // Offset: 0x13ABC00
    void LBIKOKCCILF();
    // private System.Void DMNMEKAJBNA()
    // Offset: 0x13ABC68
    void DMNMEKAJBNA();
    // private System.Void Start()
    // Offset: 0x13AC4F8
    void Start();
    // public System.Void JFMLIAIHBKO()
    // Offset: 0x13AC560
    void JFMLIAIHBKO();
    // private System.Void NNDKJCJFIAK()
    // Offset: 0x13AC56C
    void NNDKJCJFIAK();
    // private System.Void GHBOEBHBEEJ()
    // Offset: 0x13AC5D4
    void GHBOEBHBEEJ();
    // public System.Void BAKKFEPBDGD()
    // Offset: 0x13ACE70
    void BAKKFEPBDGD();
    // private System.Void FNGLOIECKDG()
    // Offset: 0x13ACE78
    void FNGLOIECKDG();
    // private System.Void FMCFFLJCCCP()
    // Offset: 0x13ACEE0
    void FMCFFLJCCCP();
    // public System.Void MLOACJPJLPI()
    // Offset: 0x13AD78C
    void MLOACJPJLPI();
    // private System.Void EFLLEILOGJN()
    // Offset: 0x13AD798
    void EFLLEILOGJN();
    // private System.Void DPDDNOBAFIP()
    // Offset: 0x13AE03C
    void DPDDNOBAFIP();
  }; // MagicalActual.TinkerableObject
  #pragma pack(pop)
  static check_size<sizeof(TinkerableObject), 92 + sizeof(int)> __MagicalActual_TinkerableObjectSizeCheck;
  static_assert(sizeof(TinkerableObject) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::TinkerComplete
// Il2CppName: TinkerComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::TinkerComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "TinkerComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::PIIIMNOLBFL
// Il2CppName: PIIIMNOLBFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::PIIIMNOLBFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "PIIIMNOLBFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::FGIFGGNGKPK
// Il2CppName: FGIFGGNGKPK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::FGIFGGNGKPK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "FGIFGGNGKPK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::IDOCJGNLNFL
// Il2CppName: IDOCJGNLNFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::IDOCJGNLNFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "IDOCJGNLNFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::FEIGDJNEHBG
// Il2CppName: FEIGDJNEHBG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::FEIGDJNEHBG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "FEIGDJNEHBG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::NHADFEMILCC
// Il2CppName: NHADFEMILCC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::NHADFEMILCC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "NHADFEMILCC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::MHHFAOGFAPO
// Il2CppName: MHHFAOGFAPO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::MHHFAOGFAPO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "MHHFAOGFAPO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::CEGEBCFNLFC
// Il2CppName: CEGEBCFNLFC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::CEGEBCFNLFC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "CEGEBCFNLFC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::INJNMDOBFOI
// Il2CppName: INJNMDOBFOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::INJNMDOBFOI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "INJNMDOBFOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::FBMKENGCPDH
// Il2CppName: FBMKENGCPDH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::FBMKENGCPDH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "FBMKENGCPDH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::GKIOLADOCOK
// Il2CppName: GKIOLADOCOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::GKIOLADOCOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "GKIOLADOCOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::MIGJMHJLMBO
// Il2CppName: MIGJMHJLMBO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::MIGJMHJLMBO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "MIGJMHJLMBO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::EIIKFEMCNKM
// Il2CppName: EIIKFEMCNKM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::EIIKFEMCNKM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "EIIKFEMCNKM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::LBIKOKCCILF
// Il2CppName: LBIKOKCCILF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::LBIKOKCCILF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "LBIKOKCCILF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::DMNMEKAJBNA
// Il2CppName: DMNMEKAJBNA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::DMNMEKAJBNA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "DMNMEKAJBNA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::JFMLIAIHBKO
// Il2CppName: JFMLIAIHBKO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::JFMLIAIHBKO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "JFMLIAIHBKO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::NNDKJCJFIAK
// Il2CppName: NNDKJCJFIAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::NNDKJCJFIAK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "NNDKJCJFIAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::GHBOEBHBEEJ
// Il2CppName: GHBOEBHBEEJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::GHBOEBHBEEJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "GHBOEBHBEEJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::BAKKFEPBDGD
// Il2CppName: BAKKFEPBDGD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::BAKKFEPBDGD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "BAKKFEPBDGD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::FNGLOIECKDG
// Il2CppName: FNGLOIECKDG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::FNGLOIECKDG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "FNGLOIECKDG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::FMCFFLJCCCP
// Il2CppName: FMCFFLJCCCP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::FMCFFLJCCCP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "FMCFFLJCCCP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::MLOACJPJLPI
// Il2CppName: MLOACJPJLPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::MLOACJPJLPI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "MLOACJPJLPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::EFLLEILOGJN
// Il2CppName: EFLLEILOGJN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::EFLLEILOGJN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "EFLLEILOGJN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::TinkerableObject::DPDDNOBAFIP
// Il2CppName: DPDDNOBAFIP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::TinkerableObject::*)()>(&MagicalActual::TinkerableObject::DPDDNOBAFIP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::TinkerableObject*), "DPDDNOBAFIP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
