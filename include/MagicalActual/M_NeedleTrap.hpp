// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: NetEntity
  class NetEntity;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animation
  class Animation;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: M_NeedleTrap
  class M_NeedleTrap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::M_NeedleTrap);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::M_NeedleTrap*, "MagicalActual", "M_NeedleTrap");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.M_NeedleTrap
  // [TokenAttribute] Offset: FFFFFFFF
  class M_NeedleTrap : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x18
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private MagicalActual.NetEntity IJJGNKLFGJN
    // Size: 0x8
    // Offset: 0x20
    ::MagicalActual::NetEntity* IJJGNKLFGJN;
    // Field size check
    static_assert(sizeof(::MagicalActual::NetEntity*) == 0x8);
    // private UnityEngine.Animation BPGMIJIJEIP
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Animation* BPGMIJIJEIP;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animation*) == 0x8);
    // private System.Boolean FOMIAJMOHKL
    // Size: 0x1
    // Offset: 0x30
    bool FOMIAJMOHKL;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: private MagicalActual.NetEntity IJJGNKLFGJN
    [[deprecated("Use field access instead!")]] ::MagicalActual::NetEntity*& dyn_IJJGNKLFGJN();
    // Get instance field reference: private UnityEngine.Animation BPGMIJIJEIP
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animation*& dyn_BPGMIJIJEIP();
    // Get instance field reference: private System.Boolean FOMIAJMOHKL
    [[deprecated("Use field access instead!")]] bool& dyn_FOMIAJMOHKL();
    // private System.Void EDJIILEFNPD()
    // Offset: 0x26FCF78
    void EDJIILEFNPD();
    // public System.Void IKDGLCBOCJG(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x26FCFD0
    void IKDGLCBOCJG(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void Awake()
    // Offset: 0x26FD084
    void Awake();
    // private System.Void NLONELDLCFL()
    // Offset: 0x26FD0DC
    void NLONELDLCFL();
    // private System.Void GPFBGGFPINB()
    // Offset: 0x26FD158
    void GPFBGGFPINB();
    // private System.Void KBDGAPMJGLG()
    // Offset: 0x26FD1D8
    void KBDGAPMJGLG();
    // public System.Void KEGEKFNLCJD(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x26FD258
    void KEGEKFNLCJD(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void BDEDGNGMHMN()
    // Offset: 0x26FD30C
    void BDEDGNGMHMN();
    // public System.Void JOGPGAPOBBK(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x26FD38C
    void JOGPGAPOBBK(::MagicalActual::NetEntity* CMLIHJCOINC);
    // public System.Void JJEJNGMIMOI(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x26FD440
    void JJEJNGMIMOI(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void CFPPIKGJNMG()
    // Offset: 0x26FD4F4
    void CFPPIKGJNMG();
    // public System.Void orbusNetInit(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x26FD570
    void orbusNetInit(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void JEFGKMEOAOG()
    // Offset: 0x26FD624
    void JEFGKMEOAOG();
    // private System.Void CLNMKBPKGDN(System.Object OMLPNCLFFMJ)
    // Offset: 0x26FD6A0
    void CLNMKBPKGDN(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void PLFIKFNPKDI(System.Object OMLPNCLFFMJ)
    // Offset: 0x26FD70C
    void PLFIKFNPKDI(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void EPKPFPGJCBD(System.Object OMLPNCLFFMJ)
    // Offset: 0x26FD778
    void EPKPFPGJCBD(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void .ctor()
    // Offset: 0x26FD860
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static M_NeedleTrap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::M_NeedleTrap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<M_NeedleTrap*, creationType>()));
    }
    // private System.Void FGIFGGNGKPK()
    // Offset: 0x26FD8B8
    void FGIFGGNGKPK();
    // private System.Void OMKBHCIAMGM()
    // Offset: 0x26FD310
    void OMKBHCIAMGM();
    // private System.Void FEDODKBPOGJ()
    // Offset: 0x26FD8BC
    void FEDODKBPOGJ();
    // private System.Void APDHKAGFGIP()
    // Offset: 0x26FD1DC
    void APDHKAGFGIP();
    // private System.Void NBNKDMCCNJE(System.Object OMLPNCLFFMJ)
    // Offset: 0x26FD938
    void NBNKDMCCNJE(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void Start()
    // Offset: 0x26FD9A4
    void Start();
    // public System.Void KMPPLBBIMGJ(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x26FD9A8
    void KMPPLBBIMGJ(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void IDOCJGNLNFL()
    // Offset: 0x26FDA5C
    void IDOCJGNLNFL();
    // private System.Void MLGMCOBPGEO()
    // Offset: 0x26FD15C
    void MLGMCOBPGEO();
    // private System.Void LAMFDIHEELE()
    // Offset: 0x26FD7E4
    void LAMFDIHEELE();
    // private System.Void DKJFPDMDIAA(System.Object OMLPNCLFFMJ)
    // Offset: 0x26FDA60
    void DKJFPDMDIAA(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void JOCIAJOCGNM(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x26FDACC
    void JOCIAJOCGNM(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void KIPDPKEIOEO()
    // Offset: 0x26FDB80
    void KIPDPKEIOEO();
  }; // MagicalActual.M_NeedleTrap
  #pragma pack(pop)
  static check_size<sizeof(M_NeedleTrap), 48 + sizeof(bool)> __MagicalActual_M_NeedleTrapSizeCheck;
  static_assert(sizeof(M_NeedleTrap) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::EDJIILEFNPD
// Il2CppName: EDJIILEFNPD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::EDJIILEFNPD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "EDJIILEFNPD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::IKDGLCBOCJG
// Il2CppName: IKDGLCBOCJG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_NeedleTrap::IKDGLCBOCJG)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "IKDGLCBOCJG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::NLONELDLCFL
// Il2CppName: NLONELDLCFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::NLONELDLCFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "NLONELDLCFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::GPFBGGFPINB
// Il2CppName: GPFBGGFPINB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::GPFBGGFPINB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "GPFBGGFPINB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::KBDGAPMJGLG
// Il2CppName: KBDGAPMJGLG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::KBDGAPMJGLG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "KBDGAPMJGLG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::KEGEKFNLCJD
// Il2CppName: KEGEKFNLCJD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_NeedleTrap::KEGEKFNLCJD)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "KEGEKFNLCJD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::BDEDGNGMHMN
// Il2CppName: BDEDGNGMHMN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::BDEDGNGMHMN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "BDEDGNGMHMN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::JOGPGAPOBBK
// Il2CppName: JOGPGAPOBBK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_NeedleTrap::JOGPGAPOBBK)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "JOGPGAPOBBK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::JJEJNGMIMOI
// Il2CppName: JJEJNGMIMOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_NeedleTrap::JJEJNGMIMOI)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "JJEJNGMIMOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::CFPPIKGJNMG
// Il2CppName: CFPPIKGJNMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::CFPPIKGJNMG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "CFPPIKGJNMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::orbusNetInit
// Il2CppName: orbusNetInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_NeedleTrap::orbusNetInit)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "orbusNetInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::JEFGKMEOAOG
// Il2CppName: JEFGKMEOAOG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::JEFGKMEOAOG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "JEFGKMEOAOG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::CLNMKBPKGDN
// Il2CppName: CLNMKBPKGDN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)(::Il2CppObject*)>(&MagicalActual::M_NeedleTrap::CLNMKBPKGDN)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "CLNMKBPKGDN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::PLFIKFNPKDI
// Il2CppName: PLFIKFNPKDI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)(::Il2CppObject*)>(&MagicalActual::M_NeedleTrap::PLFIKFNPKDI)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "PLFIKFNPKDI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::EPKPFPGJCBD
// Il2CppName: EPKPFPGJCBD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)(::Il2CppObject*)>(&MagicalActual::M_NeedleTrap::EPKPFPGJCBD)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "EPKPFPGJCBD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::FGIFGGNGKPK
// Il2CppName: FGIFGGNGKPK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::FGIFGGNGKPK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "FGIFGGNGKPK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::OMKBHCIAMGM
// Il2CppName: OMKBHCIAMGM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::OMKBHCIAMGM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "OMKBHCIAMGM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::FEDODKBPOGJ
// Il2CppName: FEDODKBPOGJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::FEDODKBPOGJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "FEDODKBPOGJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::APDHKAGFGIP
// Il2CppName: APDHKAGFGIP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::APDHKAGFGIP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "APDHKAGFGIP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::NBNKDMCCNJE
// Il2CppName: NBNKDMCCNJE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)(::Il2CppObject*)>(&MagicalActual::M_NeedleTrap::NBNKDMCCNJE)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "NBNKDMCCNJE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::KMPPLBBIMGJ
// Il2CppName: KMPPLBBIMGJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_NeedleTrap::KMPPLBBIMGJ)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "KMPPLBBIMGJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::IDOCJGNLNFL
// Il2CppName: IDOCJGNLNFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::IDOCJGNLNFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "IDOCJGNLNFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::MLGMCOBPGEO
// Il2CppName: MLGMCOBPGEO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::MLGMCOBPGEO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "MLGMCOBPGEO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::LAMFDIHEELE
// Il2CppName: LAMFDIHEELE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::LAMFDIHEELE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "LAMFDIHEELE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::DKJFPDMDIAA
// Il2CppName: DKJFPDMDIAA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)(::Il2CppObject*)>(&MagicalActual::M_NeedleTrap::DKJFPDMDIAA)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "DKJFPDMDIAA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::JOCIAJOCGNM
// Il2CppName: JOCIAJOCGNM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_NeedleTrap::JOCIAJOCGNM)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "JOCIAJOCGNM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NeedleTrap::KIPDPKEIOEO
// Il2CppName: KIPDPKEIOEO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NeedleTrap::*)()>(&MagicalActual::M_NeedleTrap::KIPDPKEIOEO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NeedleTrap*), "KIPDPKEIOEO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
