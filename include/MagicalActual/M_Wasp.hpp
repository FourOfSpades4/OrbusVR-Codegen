// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Monster
  class Monster;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: M_Wasp
  class M_Wasp;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::M_Wasp);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::M_Wasp*, "MagicalActual", "M_Wasp");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.M_Wasp
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD7540
  class M_Wasp : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MagicalActual.Monster BIIBEOELIHH
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::Monster* BIIBEOELIHH;
    // Field size check
    static_assert(sizeof(::MagicalActual::Monster*) == 0x8);
    // public UnityEngine.GameObject vfxSlash
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* vfxSlash;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxPoison
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* vfxPoison;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x30
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MagicalActual.Monster BIIBEOELIHH
    [[deprecated("Use field access instead!")]] ::MagicalActual::Monster*& dyn_BIIBEOELIHH();
    // Get instance field reference: public UnityEngine.GameObject vfxSlash
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxSlash();
    // Get instance field reference: public UnityEngine.GameObject vfxPoison
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxPoison();
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // private System.Void FGIFGGNGKPK()
    // Offset: 0x2766C44
    void FGIFGGNGKPK();
    // public System.Void PNLNOOIGCBK()
    // Offset: 0x2766C9C
    void PNLNOOIGCBK();
    // public System.Void BOBNEJFKFMN()
    // Offset: 0x2766EC0
    void BOBNEJFKFMN();
    // public System.Void JLLGMBNJFOC()
    // Offset: 0x2766EF4
    void JLLGMBNJFOC();
    // public System.Void PKINMLEHJFB()
    // Offset: 0x2766F28
    void PKINMLEHJFB();
    // private System.Void JENOIOBAEPG()
    // Offset: 0x276714C
    void JENOIOBAEPG();
    // public System.Void PoisonStop()
    // Offset: 0x27671A4
    void PoisonStop();
    // public System.Void .ctor()
    // Offset: 0x27671D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static M_Wasp* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::M_Wasp::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<M_Wasp*, creationType>()));
    }
    // public System.Void AOKCCDJHKCM()
    // Offset: 0x2767230
    void AOKCCDJHKCM();
    // public System.Void GHHAMAIIFFG()
    // Offset: 0x2767264
    void GHHAMAIIFFG();
    // public System.Void Slash()
    // Offset: 0x2767488
    void Slash();
    // public System.Void CPDJFKMEGIL()
    // Offset: 0x27676A0
    void CPDJFKMEGIL();
    // public System.Void JMPBEJDKDGJ()
    // Offset: 0x27676D4
    void JMPBEJDKDGJ();
    // public System.Void JFBOMHHGFDN()
    // Offset: 0x27678F4
    void JFBOMHHGFDN();
    // public System.Void GLJFFHNKKPI()
    // Offset: 0x2767B18
    void GLJFFHNKKPI();
    // public System.Void JFKKFKNHPFI()
    // Offset: 0x2767D3C
    void JFKKFKNHPFI();
    // public System.Void CEPPICBNJOI()
    // Offset: 0x2767F60
    void CEPPICBNJOI();
    // public System.Void OANMEDDNGPO()
    // Offset: 0x2768184
    void OANMEDDNGPO();
    // public System.Void CKBEEFGDPBA()
    // Offset: 0x27681B8
    void CKBEEFGDPBA();
    // private System.Void Start()
    // Offset: 0x27681EC
    void Start();
    // public System.Void HNGHFCFIAOH()
    // Offset: 0x2768244
    void HNGHFCFIAOH();
    // private System.Void BDEDGNGMHMN()
    // Offset: 0x2768278
    void BDEDGNGMHMN();
    // public System.Void PoisonStart()
    // Offset: 0x27682D0
    void PoisonStart();
    // public System.Void PFJFNFPCMFK()
    // Offset: 0x2768304
    void PFJFNFPCMFK();
    // public System.Void DPALBGPMPFM()
    // Offset: 0x2768338
    void DPALBGPMPFM();
  }; // MagicalActual.M_Wasp
  #pragma pack(pop)
  static check_size<sizeof(M_Wasp), 48 + sizeof(::StringW)> __MagicalActual_M_WaspSizeCheck;
  static_assert(sizeof(M_Wasp) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::M_Wasp::FGIFGGNGKPK
// Il2CppName: FGIFGGNGKPK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::FGIFGGNGKPK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "FGIFGGNGKPK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::PNLNOOIGCBK
// Il2CppName: PNLNOOIGCBK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::PNLNOOIGCBK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "PNLNOOIGCBK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::BOBNEJFKFMN
// Il2CppName: BOBNEJFKFMN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::BOBNEJFKFMN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "BOBNEJFKFMN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::JLLGMBNJFOC
// Il2CppName: JLLGMBNJFOC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::JLLGMBNJFOC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "JLLGMBNJFOC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::PKINMLEHJFB
// Il2CppName: PKINMLEHJFB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::PKINMLEHJFB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "PKINMLEHJFB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::JENOIOBAEPG
// Il2CppName: JENOIOBAEPG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::JENOIOBAEPG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "JENOIOBAEPG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::PoisonStop
// Il2CppName: PoisonStop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::PoisonStop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "PoisonStop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::M_Wasp::AOKCCDJHKCM
// Il2CppName: AOKCCDJHKCM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::AOKCCDJHKCM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "AOKCCDJHKCM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::GHHAMAIIFFG
// Il2CppName: GHHAMAIIFFG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::GHHAMAIIFFG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "GHHAMAIIFFG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::Slash
// Il2CppName: Slash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::Slash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "Slash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::CPDJFKMEGIL
// Il2CppName: CPDJFKMEGIL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::CPDJFKMEGIL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "CPDJFKMEGIL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::JMPBEJDKDGJ
// Il2CppName: JMPBEJDKDGJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::JMPBEJDKDGJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "JMPBEJDKDGJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::JFBOMHHGFDN
// Il2CppName: JFBOMHHGFDN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::JFBOMHHGFDN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "JFBOMHHGFDN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::GLJFFHNKKPI
// Il2CppName: GLJFFHNKKPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::GLJFFHNKKPI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "GLJFFHNKKPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::JFKKFKNHPFI
// Il2CppName: JFKKFKNHPFI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::JFKKFKNHPFI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "JFKKFKNHPFI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::CEPPICBNJOI
// Il2CppName: CEPPICBNJOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::CEPPICBNJOI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "CEPPICBNJOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::OANMEDDNGPO
// Il2CppName: OANMEDDNGPO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::OANMEDDNGPO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "OANMEDDNGPO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::CKBEEFGDPBA
// Il2CppName: CKBEEFGDPBA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::CKBEEFGDPBA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "CKBEEFGDPBA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::HNGHFCFIAOH
// Il2CppName: HNGHFCFIAOH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::HNGHFCFIAOH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "HNGHFCFIAOH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::BDEDGNGMHMN
// Il2CppName: BDEDGNGMHMN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::BDEDGNGMHMN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "BDEDGNGMHMN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::PoisonStart
// Il2CppName: PoisonStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::PoisonStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "PoisonStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::PFJFNFPCMFK
// Il2CppName: PFJFNFPCMFK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::PFJFNFPCMFK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "PFJFNFPCMFK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Wasp::DPALBGPMPFM
// Il2CppName: DPALBGPMPFM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Wasp::*)()>(&MagicalActual::M_Wasp::DPALBGPMPFM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Wasp*), "DPALBGPMPFM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
