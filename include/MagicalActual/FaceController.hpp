// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: Vectrosity
namespace Vectrosity {
  // Forward declaring type: VectorLine
  class VectorLine;
}
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Monster
  class Monster;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: FaceController
  class FaceController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::FaceController);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::FaceController*, "MagicalActual", "FaceController");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x158
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.FaceController
  // [TokenAttribute] Offset: FFFFFFFF
  class FaceController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject eyePlane
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* eyePlane;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Material HEOAKNNMCAM
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* HEOAKNNMCAM;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.GameObject mouthPlane
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* mouthPlane;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Material DOIEOJLKNJK
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* DOIEOJLKNJK;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.MeshRenderer EEJDPDNHEIP
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::MeshRenderer* EEJDPDNHEIP;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.GameObject eyePlaneLod1
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* eyePlaneLod1;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject mouthPlaneLod1
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* mouthPlaneLod1;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Vector2 OGEEDBLCNHI
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Vector2 OGEEDBLCNHI;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 FDGJNCLDIMJ
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Vector2 FDGJNCLDIMJ;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Animator NBNKFBECLJG
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Animator* NBNKFBECLJG;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // private System.Single ABLCMIJABMB
    // Size: 0x4
    // Offset: 0x68
    float ABLCMIJABMB;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector4 OAHAIPJJMME
    // Size: 0x10
    // Offset: 0x6C
    ::UnityEngine::Vector4 OAHAIPJJMME;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private UnityEngine.Vector4 GAPIGMCLOIA
    // Size: 0x10
    // Offset: 0x7C
    ::UnityEngine::Vector4 GAPIGMCLOIA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private UnityEngine.Vector4 PLKEDOLMCBP
    // Size: 0x10
    // Offset: 0x8C
    ::UnityEngine::Vector4 PLKEDOLMCBP;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private UnityEngine.Vector4 LIPDOCHLBHF
    // Size: 0x10
    // Offset: 0x9C
    ::UnityEngine::Vector4 LIPDOCHLBHF;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private UnityEngine.Vector4 IDNEILOHGAD
    // Size: 0x10
    // Offset: 0xAC
    ::UnityEngine::Vector4 IDNEILOHGAD;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private UnityEngine.Vector4 CFFLOLDIFLB
    // Size: 0x10
    // Offset: 0xBC
    ::UnityEngine::Vector4 CFFLOLDIFLB;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private System.Single KDBHEEHFIAA
    // Size: 0x4
    // Offset: 0xCC
    float KDBHEEHFIAA;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single JIMKPMCKGKE
    // Size: 0x4
    // Offset: 0xD0
    float JIMKPMCKGKE;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single CDHNGJBLGJA
    // Size: 0x4
    // Offset: 0xD4
    float CDHNGJBLGJA;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single HBIKKNNPPJC
    // Size: 0x4
    // Offset: 0xD8
    float HBIKKNNPPJC;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean EHEDAOKFDEF
    // Size: 0x1
    // Offset: 0xDC
    bool EHEDAOKFDEF;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: EHEDAOKFDEF and: HGPLPFCONLJ
    char __padding21[0x3] = {};
    // private System.Int32 HGPLPFCONLJ
    // Size: 0x4
    // Offset: 0xE0
    int HGPLPFCONLJ;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 DIPFAEIFIFG
    // Size: 0x4
    // Offset: 0xE4
    int DIPFAEIFIFG;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single OMBOIBJCBAH
    // Size: 0x4
    // Offset: 0xE8
    float OMBOIBJCBAH;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single PKLGJIGAEIK
    // Size: 0x4
    // Offset: 0xEC
    float PKLGJIGAEIK;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Vectrosity.VectorLine FCMPAELLPAG
    // Size: 0x8
    // Offset: 0xF0
    ::Vectrosity::VectorLine* FCMPAELLPAG;
    // Field size check
    static_assert(sizeof(::Vectrosity::VectorLine*) == 0x8);
    // private UnityEngine.GameObject MLNMDKHIHPD
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::GameObject* MLNMDKHIHPD;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean OLAHKNGNEOE
    // Size: 0x1
    // Offset: 0x100
    bool OLAHKNGNEOE;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean NFANAHMAOCA
    // Size: 0x1
    // Offset: 0x101
    bool NFANAHMAOCA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean ABBAFALCGEJ
    // Size: 0x1
    // Offset: 0x102
    bool ABBAFALCGEJ;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean useCommonEyeAndMouthSets
    // Size: 0x1
    // Offset: 0x103
    bool useCommonEyeAndMouthSets;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Int32 faceSet
    // Size: 0x4
    // Offset: 0x104
    int faceSet;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 eyeSet
    // Size: 0x4
    // Offset: 0x108
    int eyeSet;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Color eyebrowColor
    // Size: 0x10
    // Offset: 0x10C
    ::UnityEngine::Color eyebrowColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color eyeColor
    // Size: 0x10
    // Offset: 0x11C
    ::UnityEngine::Color eyeColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // Padding between fields: eyeColor and: MIBPECCLLLD
    char __padding35[0x4] = {};
    // private UnityEngine.Material[] MIBPECCLLLD
    // Size: 0x8
    // Offset: 0x130
    ::ArrayW<::UnityEngine::Material*> MIBPECCLLLD;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // private UnityEngine.Material[] BPIIANEONKB
    // Size: 0x8
    // Offset: 0x138
    ::ArrayW<::UnityEngine::Material*> BPIIANEONKB;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // public System.Boolean isFemaleVoice
    // Size: 0x1
    // Offset: 0x140
    bool isFemaleVoice;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isFemaleVoice and: voiceSet
    char __padding38[0x3] = {};
    // public System.Int32 voiceSet
    // Size: 0x4
    // Offset: 0x144
    int voiceSet;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private MagicalActual.Monster BIIBEOELIHH
    // Size: 0x8
    // Offset: 0x148
    ::MagicalActual::Monster* BIIBEOELIHH;
    // Field size check
    static_assert(sizeof(::MagicalActual::Monster*) == 0x8);
    // private UnityEngine.AudioClip[] KLICLEHPDLC
    // Size: 0x8
    // Offset: 0x150
    ::ArrayW<::UnityEngine::AudioClip*> KLICLEHPDLC;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject eyePlane
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_eyePlane();
    // Get instance field reference: private UnityEngine.Material HEOAKNNMCAM
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_HEOAKNNMCAM();
    // Get instance field reference: public UnityEngine.GameObject mouthPlane
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_mouthPlane();
    // Get instance field reference: private UnityEngine.Material DOIEOJLKNJK
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_DOIEOJLKNJK();
    // Get instance field reference: private UnityEngine.MeshRenderer EEJDPDNHEIP
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_EEJDPDNHEIP();
    // Get instance field reference: public UnityEngine.GameObject eyePlaneLod1
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_eyePlaneLod1();
    // Get instance field reference: public UnityEngine.GameObject mouthPlaneLod1
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_mouthPlaneLod1();
    // Get instance field reference: private UnityEngine.Vector2 OGEEDBLCNHI
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_OGEEDBLCNHI();
    // Get instance field reference: private UnityEngine.Vector2 FDGJNCLDIMJ
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_FDGJNCLDIMJ();
    // Get instance field reference: private UnityEngine.Animator NBNKFBECLJG
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_NBNKFBECLJG();
    // Get instance field reference: private System.Single ABLCMIJABMB
    [[deprecated("Use field access instead!")]] float& dyn_ABLCMIJABMB();
    // Get instance field reference: private UnityEngine.Vector4 OAHAIPJJMME
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_OAHAIPJJMME();
    // Get instance field reference: private UnityEngine.Vector4 GAPIGMCLOIA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_GAPIGMCLOIA();
    // Get instance field reference: private UnityEngine.Vector4 PLKEDOLMCBP
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_PLKEDOLMCBP();
    // Get instance field reference: private UnityEngine.Vector4 LIPDOCHLBHF
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_LIPDOCHLBHF();
    // Get instance field reference: private UnityEngine.Vector4 IDNEILOHGAD
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_IDNEILOHGAD();
    // Get instance field reference: private UnityEngine.Vector4 CFFLOLDIFLB
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_CFFLOLDIFLB();
    // Get instance field reference: private System.Single KDBHEEHFIAA
    [[deprecated("Use field access instead!")]] float& dyn_KDBHEEHFIAA();
    // Get instance field reference: private System.Single JIMKPMCKGKE
    [[deprecated("Use field access instead!")]] float& dyn_JIMKPMCKGKE();
    // Get instance field reference: private System.Single CDHNGJBLGJA
    [[deprecated("Use field access instead!")]] float& dyn_CDHNGJBLGJA();
    // Get instance field reference: private System.Single HBIKKNNPPJC
    [[deprecated("Use field access instead!")]] float& dyn_HBIKKNNPPJC();
    // Get instance field reference: private System.Boolean EHEDAOKFDEF
    [[deprecated("Use field access instead!")]] bool& dyn_EHEDAOKFDEF();
    // Get instance field reference: private System.Int32 HGPLPFCONLJ
    [[deprecated("Use field access instead!")]] int& dyn_HGPLPFCONLJ();
    // Get instance field reference: private System.Int32 DIPFAEIFIFG
    [[deprecated("Use field access instead!")]] int& dyn_DIPFAEIFIFG();
    // Get instance field reference: private System.Single OMBOIBJCBAH
    [[deprecated("Use field access instead!")]] float& dyn_OMBOIBJCBAH();
    // Get instance field reference: private System.Single PKLGJIGAEIK
    [[deprecated("Use field access instead!")]] float& dyn_PKLGJIGAEIK();
    // Get instance field reference: private Vectrosity.VectorLine FCMPAELLPAG
    [[deprecated("Use field access instead!")]] ::Vectrosity::VectorLine*& dyn_FCMPAELLPAG();
    // Get instance field reference: private UnityEngine.GameObject MLNMDKHIHPD
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_MLNMDKHIHPD();
    // Get instance field reference: private System.Boolean OLAHKNGNEOE
    [[deprecated("Use field access instead!")]] bool& dyn_OLAHKNGNEOE();
    // Get instance field reference: private System.Boolean NFANAHMAOCA
    [[deprecated("Use field access instead!")]] bool& dyn_NFANAHMAOCA();
    // Get instance field reference: private System.Boolean ABBAFALCGEJ
    [[deprecated("Use field access instead!")]] bool& dyn_ABBAFALCGEJ();
    // Get instance field reference: public System.Boolean useCommonEyeAndMouthSets
    [[deprecated("Use field access instead!")]] bool& dyn_useCommonEyeAndMouthSets();
    // Get instance field reference: public System.Int32 faceSet
    [[deprecated("Use field access instead!")]] int& dyn_faceSet();
    // Get instance field reference: public System.Int32 eyeSet
    [[deprecated("Use field access instead!")]] int& dyn_eyeSet();
    // Get instance field reference: public UnityEngine.Color eyebrowColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_eyebrowColor();
    // Get instance field reference: public UnityEngine.Color eyeColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_eyeColor();
    // Get instance field reference: private UnityEngine.Material[] MIBPECCLLLD
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_MIBPECCLLLD();
    // Get instance field reference: private UnityEngine.Material[] BPIIANEONKB
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_BPIIANEONKB();
    // Get instance field reference: public System.Boolean isFemaleVoice
    [[deprecated("Use field access instead!")]] bool& dyn_isFemaleVoice();
    // Get instance field reference: public System.Int32 voiceSet
    [[deprecated("Use field access instead!")]] int& dyn_voiceSet();
    // Get instance field reference: private MagicalActual.Monster BIIBEOELIHH
    [[deprecated("Use field access instead!")]] ::MagicalActual::Monster*& dyn_BIIBEOELIHH();
    // Get instance field reference: private UnityEngine.AudioClip[] KLICLEHPDLC
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_KLICLEHPDLC();
    // private System.Void PCAAELJIJDI(System.String BJKMJOINAAD)
    // Offset: 0x1102B04
    void PCAAELJIJDI(::StringW BJKMJOINAAD);
    // private System.Void IPLLDBAOPJC()
    // Offset: 0x1102BB4
    void IPLLDBAOPJC();
    // private System.Void Start()
    // Offset: 0x1102DC0
    void Start();
    // private System.Void Update()
    // Offset: 0x1104AF0
    void Update();
    // public System.Void EEHDHEFKCDB()
    // Offset: 0x1104FEC
    void EEHDHEFKCDB();
    // public System.Void AECDBIDIFLO()
    // Offset: 0x1105110
    void AECDBIDIFLO();
    // public System.Void ExpressionHmph()
    // Offset: 0x1105920
    void ExpressionHmph();
    // private System.Void CKJFINNOOFK()
    // Offset: 0x1105DD8
    void CKJFINNOOFK();
    // private System.Void FBONHOOJHBG()
    // Offset: 0x1105EF8
    void FBONHOOJHBG();
    // public System.Void UpdateFaceOrEyeSet()
    // Offset: 0x1104568
    void UpdateFaceOrEyeSet();
    // private System.Void CMAFACKCBDM()
    // Offset: 0x11076D8
    void CMAFACKCBDM();
    // public System.Void ILNOCOKFBMD()
    // Offset: 0x11076E4
    void ILNOCOKFBMD();
    // private System.Void ClearIdleEvent()
    // Offset: 0x1107AE4
    void ClearIdleEvent();
    // private System.Void IPIOOLAFBIF()
    // Offset: 0x1107AEC
    void IPIOOLAFBIF();
    // public System.Void LAOCLCAHMNI()
    // Offset: 0x1107F1C
    void LAOCLCAHMNI();
    // private System.Void ABIHCGOKNCL()
    // Offset: 0x1108040
    void ABIHCGOKNCL();
    // public System.Void ExpressionSurprise()
    // Offset: 0x1109DB4
    void ExpressionSurprise();
    // private System.Void AMOGMOIIMIA()
    // Offset: 0x1109E10
    void AMOGMOIIMIA();
    // private System.Void MKNHOGPLKHL()
    // Offset: 0x110A234
    void MKNHOGPLKHL();
    // public System.Void ExpressionCheer()
    // Offset: 0x110A23C
    void ExpressionCheer();
    // private System.Void NPCPJGPCMDD(System.String AICILKLBLKA)
    // Offset: 0x11055A0
    void NPCPJGPCMDD(::StringW AICILKLBLKA);
    // private System.Void OnValidate()
    // Offset: 0x110A2B4
    void OnValidate();
    // public System.Void ExpressionAfraid()
    // Offset: 0x110A33C
    void ExpressionAfraid();
    // public System.Void KOMMCFJDMJA()
    // Offset: 0x110A3A4
    void KOMMCFJDMJA();
    // private System.Void HMAMICJPMJL()
    // Offset: 0x110A41C
    void HMAMICJPMJL();
    // private System.Void MBPGBOGJKOO()
    // Offset: 0x110A84C
    void MBPGBOGJKOO();
    // private System.Void FGBAKBLPFFK()
    // Offset: 0x1104B0C
    void FGBAKBLPFFK();
    // public System.Void ExpressionAgree()
    // Offset: 0x110AC78
    void ExpressionAgree();
    // public System.Void FaceEmoteIdle()
    // Offset: 0x1105DDC
    void FaceEmoteIdle();
    // public System.Void FaceEmote(System.String BJKMJOINAAD)
    // Offset: 0x1105174
    void FaceEmote(::StringW BJKMJOINAAD);
    // public System.Void AMALLBNMEEJ()
    // Offset: 0x110ACD4
    void AMALLBNMEEJ();
    // private System.Void KPOICPAOALL(System.String AICILKLBLKA)
    // Offset: 0x1105990
    void KPOICPAOALL(::StringW AICILKLBLKA);
    // public System.Void LEJCLCEDOAK()
    // Offset: 0x110AD4C
    void LEJCLCEDOAK();
    // private System.Void EHIJMIELDOF()
    // Offset: 0x110ADC4
    void EHIJMIELDOF();
    // public System.Void EIFBIBIGEBO()
    // Offset: 0x1102C9C
    void EIFBIBIGEBO();
    // private System.Void AFIACGLCIPB()
    // Offset: 0x110AE4C
    void AFIACGLCIPB();
    // private System.Void JJNHCABMBIH()
    // Offset: 0x110C614
    void JJNHCABMBIH();
    // public System.Void OJGNFEDDBPO()
    // Offset: 0x110C71C
    void OJGNFEDDBPO();
    // private System.Void LMOLFOPEIOI()
    // Offset: 0x110C788
    void LMOLFOPEIOI();
    // private System.Void PHJINMONDLE(System.String AICILKLBLKA)
    // Offset: 0x110775C
    void PHJINMONDLE(::StringW AICILKLBLKA);
    // private System.Void BKEEPDNAIEN()
    // Offset: 0x1104F08
    void BKEEPDNAIEN();
    // private System.Void EFGJFMENOAL()
    // Offset: 0x110CBB4
    void EFGJFMENOAL();
    // public System.Void ExpressionAnger()
    // Offset: 0x110CBD0
    void ExpressionAnger();
    // public System.Void MJIHBHMBNMI()
    // Offset: 0x110CC48
    void MJIHBHMBNMI();
    // private System.Void ILHGAIPOMAM()
    // Offset: 0x110CD6C
    void ILHGAIPOMAM();
    // public System.Void .ctor()
    // Offset: 0x110CD78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FaceController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::FaceController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FaceController*, creationType>()));
    }
    // private System.Void MBJJOCHBCBC(System.String BJKMJOINAAD)
    // Offset: 0x1105D28
    void MBJJOCHBCBC(::StringW BJKMJOINAAD);
    // private System.Void FixedUpdate()
    // Offset: 0x110CF54
    void FixedUpdate();
    // public System.Void UpdateLipSync(System.Single DGMOKHAIMKB)
    // Offset: 0x110D04C
    void UpdateLipSync(float DGMOKHAIMKB);
    // public System.Void OLJPKKBLLAO()
    // Offset: 0x11097F4
    void OLJPKKBLLAO();
    // private System.Void PKJBCGNIAPD()
    // Offset: 0x110D43C
    void PKJBCGNIAPD();
    // private System.Void HLJPPGKFOJO(System.String BJKMJOINAAD)
    // Offset: 0x110D4C4
    void HLJPPGKFOJO(::StringW BJKMJOINAAD);
    // private System.Void NAPGGGFOEKO()
    // Offset: 0x110D574
    void NAPGGGFOEKO();
    // private System.Void FFOGBGBBENG()
    // Offset: 0x110C630
    void FFOGBGBBENG();
    // public System.Void GDJAKJCHNMF()
    // Offset: 0x110D674
    void GDJAKJCHNMF();
    // private System.Void OEHAOIKJCIE()
    // Offset: 0x110D6EC
    void OEHAOIKJCIE();
    // public System.Void ExpressionExplain()
    // Offset: 0x110DB1C
    void ExpressionExplain();
    // public System.Void ExpressionGreeting()
    // Offset: 0x110DB8C
    void ExpressionGreeting();
    // private System.Void BAFOOPFBHMG()
    // Offset: 0x110DBF0
    void BAFOOPFBHMG();
    // private System.Void DOHAEMBJKPL()
    // Offset: 0x110DC00
    void DOHAEMBJKPL();
  }; // MagicalActual.FaceController
  #pragma pack(pop)
  static check_size<sizeof(FaceController), 336 + sizeof(::ArrayW<::UnityEngine::AudioClip*>)> __MagicalActual_FaceControllerSizeCheck;
  static_assert(sizeof(FaceController) == 0x158);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::FaceController::PCAAELJIJDI
// Il2CppName: PCAAELJIJDI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)(::StringW)>(&MagicalActual::FaceController::PCAAELJIJDI)> {
  static const MethodInfo* get() {
    static auto* BJKMJOINAAD = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "PCAAELJIJDI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BJKMJOINAAD});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::IPLLDBAOPJC
// Il2CppName: IPLLDBAOPJC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::IPLLDBAOPJC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "IPLLDBAOPJC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::EEHDHEFKCDB
// Il2CppName: EEHDHEFKCDB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::EEHDHEFKCDB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "EEHDHEFKCDB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::AECDBIDIFLO
// Il2CppName: AECDBIDIFLO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::AECDBIDIFLO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "AECDBIDIFLO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::ExpressionHmph
// Il2CppName: ExpressionHmph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::ExpressionHmph)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "ExpressionHmph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::CKJFINNOOFK
// Il2CppName: CKJFINNOOFK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::CKJFINNOOFK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "CKJFINNOOFK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::FBONHOOJHBG
// Il2CppName: FBONHOOJHBG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::FBONHOOJHBG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "FBONHOOJHBG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::UpdateFaceOrEyeSet
// Il2CppName: UpdateFaceOrEyeSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::UpdateFaceOrEyeSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "UpdateFaceOrEyeSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::CMAFACKCBDM
// Il2CppName: CMAFACKCBDM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::CMAFACKCBDM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "CMAFACKCBDM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::ILNOCOKFBMD
// Il2CppName: ILNOCOKFBMD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::ILNOCOKFBMD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "ILNOCOKFBMD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::ClearIdleEvent
// Il2CppName: ClearIdleEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::ClearIdleEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "ClearIdleEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::IPIOOLAFBIF
// Il2CppName: IPIOOLAFBIF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::IPIOOLAFBIF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "IPIOOLAFBIF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::LAOCLCAHMNI
// Il2CppName: LAOCLCAHMNI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::LAOCLCAHMNI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "LAOCLCAHMNI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::ABIHCGOKNCL
// Il2CppName: ABIHCGOKNCL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::ABIHCGOKNCL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "ABIHCGOKNCL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::ExpressionSurprise
// Il2CppName: ExpressionSurprise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::ExpressionSurprise)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "ExpressionSurprise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::AMOGMOIIMIA
// Il2CppName: AMOGMOIIMIA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::AMOGMOIIMIA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "AMOGMOIIMIA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::MKNHOGPLKHL
// Il2CppName: MKNHOGPLKHL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::MKNHOGPLKHL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "MKNHOGPLKHL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::ExpressionCheer
// Il2CppName: ExpressionCheer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::ExpressionCheer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "ExpressionCheer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::NPCPJGPCMDD
// Il2CppName: NPCPJGPCMDD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)(::StringW)>(&MagicalActual::FaceController::NPCPJGPCMDD)> {
  static const MethodInfo* get() {
    static auto* AICILKLBLKA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "NPCPJGPCMDD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AICILKLBLKA});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::ExpressionAfraid
// Il2CppName: ExpressionAfraid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::ExpressionAfraid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "ExpressionAfraid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::KOMMCFJDMJA
// Il2CppName: KOMMCFJDMJA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::KOMMCFJDMJA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "KOMMCFJDMJA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::HMAMICJPMJL
// Il2CppName: HMAMICJPMJL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::HMAMICJPMJL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "HMAMICJPMJL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::MBPGBOGJKOO
// Il2CppName: MBPGBOGJKOO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::MBPGBOGJKOO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "MBPGBOGJKOO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::FGBAKBLPFFK
// Il2CppName: FGBAKBLPFFK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::FGBAKBLPFFK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "FGBAKBLPFFK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::ExpressionAgree
// Il2CppName: ExpressionAgree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::ExpressionAgree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "ExpressionAgree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::FaceEmoteIdle
// Il2CppName: FaceEmoteIdle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::FaceEmoteIdle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "FaceEmoteIdle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::FaceEmote
// Il2CppName: FaceEmote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)(::StringW)>(&MagicalActual::FaceController::FaceEmote)> {
  static const MethodInfo* get() {
    static auto* BJKMJOINAAD = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "FaceEmote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BJKMJOINAAD});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::AMALLBNMEEJ
// Il2CppName: AMALLBNMEEJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::AMALLBNMEEJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "AMALLBNMEEJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::KPOICPAOALL
// Il2CppName: KPOICPAOALL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)(::StringW)>(&MagicalActual::FaceController::KPOICPAOALL)> {
  static const MethodInfo* get() {
    static auto* AICILKLBLKA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "KPOICPAOALL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AICILKLBLKA});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::LEJCLCEDOAK
// Il2CppName: LEJCLCEDOAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::LEJCLCEDOAK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "LEJCLCEDOAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::EHIJMIELDOF
// Il2CppName: EHIJMIELDOF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::EHIJMIELDOF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "EHIJMIELDOF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::EIFBIBIGEBO
// Il2CppName: EIFBIBIGEBO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::EIFBIBIGEBO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "EIFBIBIGEBO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::AFIACGLCIPB
// Il2CppName: AFIACGLCIPB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::AFIACGLCIPB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "AFIACGLCIPB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::JJNHCABMBIH
// Il2CppName: JJNHCABMBIH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::JJNHCABMBIH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "JJNHCABMBIH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::OJGNFEDDBPO
// Il2CppName: OJGNFEDDBPO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::OJGNFEDDBPO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "OJGNFEDDBPO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::LMOLFOPEIOI
// Il2CppName: LMOLFOPEIOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::LMOLFOPEIOI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "LMOLFOPEIOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::PHJINMONDLE
// Il2CppName: PHJINMONDLE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)(::StringW)>(&MagicalActual::FaceController::PHJINMONDLE)> {
  static const MethodInfo* get() {
    static auto* AICILKLBLKA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "PHJINMONDLE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AICILKLBLKA});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::BKEEPDNAIEN
// Il2CppName: BKEEPDNAIEN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::BKEEPDNAIEN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "BKEEPDNAIEN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::EFGJFMENOAL
// Il2CppName: EFGJFMENOAL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::EFGJFMENOAL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "EFGJFMENOAL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::ExpressionAnger
// Il2CppName: ExpressionAnger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::ExpressionAnger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "ExpressionAnger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::MJIHBHMBNMI
// Il2CppName: MJIHBHMBNMI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::MJIHBHMBNMI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "MJIHBHMBNMI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::ILHGAIPOMAM
// Il2CppName: ILHGAIPOMAM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::ILHGAIPOMAM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "ILHGAIPOMAM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::FaceController::MBJJOCHBCBC
// Il2CppName: MBJJOCHBCBC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)(::StringW)>(&MagicalActual::FaceController::MBJJOCHBCBC)> {
  static const MethodInfo* get() {
    static auto* BJKMJOINAAD = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "MBJJOCHBCBC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BJKMJOINAAD});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::UpdateLipSync
// Il2CppName: UpdateLipSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)(float)>(&MagicalActual::FaceController::UpdateLipSync)> {
  static const MethodInfo* get() {
    static auto* DGMOKHAIMKB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "UpdateLipSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{DGMOKHAIMKB});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::OLJPKKBLLAO
// Il2CppName: OLJPKKBLLAO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::OLJPKKBLLAO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "OLJPKKBLLAO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::PKJBCGNIAPD
// Il2CppName: PKJBCGNIAPD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::PKJBCGNIAPD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "PKJBCGNIAPD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::HLJPPGKFOJO
// Il2CppName: HLJPPGKFOJO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)(::StringW)>(&MagicalActual::FaceController::HLJPPGKFOJO)> {
  static const MethodInfo* get() {
    static auto* BJKMJOINAAD = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "HLJPPGKFOJO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BJKMJOINAAD});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::NAPGGGFOEKO
// Il2CppName: NAPGGGFOEKO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::NAPGGGFOEKO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "NAPGGGFOEKO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::FFOGBGBBENG
// Il2CppName: FFOGBGBBENG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::FFOGBGBBENG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "FFOGBGBBENG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::GDJAKJCHNMF
// Il2CppName: GDJAKJCHNMF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::GDJAKJCHNMF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "GDJAKJCHNMF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::OEHAOIKJCIE
// Il2CppName: OEHAOIKJCIE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::OEHAOIKJCIE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "OEHAOIKJCIE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::ExpressionExplain
// Il2CppName: ExpressionExplain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::ExpressionExplain)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "ExpressionExplain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::ExpressionGreeting
// Il2CppName: ExpressionGreeting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::ExpressionGreeting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "ExpressionGreeting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::BAFOOPFBHMG
// Il2CppName: BAFOOPFBHMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::BAFOOPFBHMG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "BAFOOPFBHMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::FaceController::DOHAEMBJKPL
// Il2CppName: DOHAEMBJKPL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::FaceController::*)()>(&MagicalActual::FaceController::DOHAEMBJKPL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::FaceController*), "DOHAEMBJKPL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
