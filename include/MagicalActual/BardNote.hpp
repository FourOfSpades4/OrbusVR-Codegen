// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: BoxCollider
  class BoxCollider;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Bard
  class Bard;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: BardNote
  class BardNote;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::BardNote);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::BardNote*, "MagicalActual", "BardNote");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.BardNote
  // [TokenAttribute] Offset: FFFFFFFF
  class BardNote : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Int32 noteIndex
    // Size: 0x4
    // Offset: 0x18
    int noteIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: noteIndex and: mySource
    char __padding0[0x4] = {};
    // public UnityEngine.AudioSource mySource
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioSource* mySource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.BoxCollider BBOMOHLELBB
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::BoxCollider* BBOMOHLELBB;
    // Field size check
    static_assert(sizeof(::UnityEngine::BoxCollider*) == 0x8);
    // private UnityEngine.Collider[] JGOGJDHABHN
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Collider*> JGOGJDHABHN;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private UnityEngine.MeshRenderer HCMCDILAJCJ
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::MeshRenderer* HCMCDILAJCJ;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private System.String KIIABHJFLKP
    // Size: 0x8
    // Offset: 0x40
    ::StringW KIIABHJFLKP;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Vector3 IKINBFHAFCI
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 IKINBFHAFCI;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 JKJKBAOIKCO
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 JKJKBAOIKCO;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 noteIndex
    [[deprecated("Use field access instead!")]] int& dyn_noteIndex();
    // Get instance field reference: public UnityEngine.AudioSource mySource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_mySource();
    // Get instance field reference: private UnityEngine.BoxCollider BBOMOHLELBB
    [[deprecated("Use field access instead!")]] ::UnityEngine::BoxCollider*& dyn_BBOMOHLELBB();
    // Get instance field reference: private UnityEngine.Collider[] JGOGJDHABHN
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_JGOGJDHABHN();
    // Get instance field reference: private UnityEngine.MeshRenderer HCMCDILAJCJ
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_HCMCDILAJCJ();
    // Get instance field reference: private System.String KIIABHJFLKP
    [[deprecated("Use field access instead!")]] ::StringW& dyn_KIIABHJFLKP();
    // Get instance field reference: private UnityEngine.Vector3 IKINBFHAFCI
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_IKINBFHAFCI();
    // Get instance field reference: private UnityEngine.Vector3 JKJKBAOIKCO
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_JKJKBAOIKCO();
    // private System.Void PFABJJGAOMM()
    // Offset: 0x1CA2690
    void PFABJJGAOMM();
    // public System.Boolean KGPFFJFBLDP(MagicalActual.Bard CFFNKEMJHGK)
    // Offset: 0x1CA2A6C
    bool KGPFFJFBLDP(::MagicalActual::Bard* CFFNKEMJHGK);
    // public System.Boolean INFEHHIMHLE(MagicalActual.Bard CFFNKEMJHGK)
    // Offset: 0x1CA2CBC
    bool INFEHHIMHLE(::MagicalActual::Bard* CFFNKEMJHGK);
    // public System.Boolean CBHOMHAHMMJ(MagicalActual.Bard CFFNKEMJHGK)
    // Offset: 0x1CA2F0C
    bool CBHOMHAHMMJ(::MagicalActual::Bard* CFFNKEMJHGK);
    // public System.Boolean AGEKIAGPHLN(MagicalActual.Bard CFFNKEMJHGK)
    // Offset: 0x1CA318C
    bool AGEKIAGPHLN(::MagicalActual::Bard* CFFNKEMJHGK);
    // public System.Boolean JJFHFKKEOFM(MagicalActual.Bard CFFNKEMJHGK)
    // Offset: 0x1CA3410
    bool JJFHFKKEOFM(::MagicalActual::Bard* CFFNKEMJHGK);
    // public System.Void .ctor()
    // Offset: 0x1CA3668
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BardNote* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::BardNote::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BardNote*, creationType>()));
    }
    // public System.Boolean JBBCHIINNCE(MagicalActual.Bard CFFNKEMJHGK)
    // Offset: 0x1CA36D8
    bool JBBCHIINNCE(::MagicalActual::Bard* CFFNKEMJHGK);
    // public System.Boolean MKECPNNFOJP(MagicalActual.Bard CFFNKEMJHGK)
    // Offset: 0x1CA395C
    bool MKECPNNFOJP(::MagicalActual::Bard* CFFNKEMJHGK);
    // private System.Void Start()
    // Offset: 0x1CA3BE0
    void Start();
    // private System.Void MLGBKBMHHLE()
    // Offset: 0x1CA3FB8
    void MLGBKBMHHLE();
    // private System.Void PBEMGGBBDCK()
    // Offset: 0x1CA4394
    void PBEMGGBBDCK();
    // public System.Boolean EBGPMEMJJJN(MagicalActual.Bard CFFNKEMJHGK)
    // Offset: 0x1CA4770
    bool EBGPMEMJJJN(::MagicalActual::Bard* CFFNKEMJHGK);
    // public System.Boolean JDMAFHJLAJM(MagicalActual.Bard CFFNKEMJHGK)
    // Offset: 0x1CA49B8
    bool JDMAFHJLAJM(::MagicalActual::Bard* CFFNKEMJHGK);
    // public System.Boolean POGAICBKLKO(MagicalActual.Bard CFFNKEMJHGK)
    // Offset: 0x1CA4C3C
    bool POGAICBKLKO(::MagicalActual::Bard* CFFNKEMJHGK);
    // private System.Void EIIKFEMCNKM()
    // Offset: 0x1CA4E8C
    void EIIKFEMCNKM();
    // private System.Void GPFBGGFPINB()
    // Offset: 0x1CA5268
    void GPFBGGFPINB();
    // private System.Void GHLPBOJJHNG()
    // Offset: 0x1CA5644
    void GHLPBOJJHNG();
    // public System.Boolean HHFGLPKOLOP(MagicalActual.Bard CFFNKEMJHGK)
    // Offset: 0x1CA5A20
    bool HHFGLPKOLOP(::MagicalActual::Bard* CFFNKEMJHGK);
    // public System.Boolean GOBLFFKEFEE(MagicalActual.Bard CFFNKEMJHGK)
    // Offset: 0x1CA5CA4
    bool GOBLFFKEFEE(::MagicalActual::Bard* CFFNKEMJHGK);
    // private System.Void FNGLOIECKDG()
    // Offset: 0x1CA5F24
    void FNGLOIECKDG();
    // private System.Void HKINNMLBMMG()
    // Offset: 0x1CA6300
    void HKINNMLBMMG();
    // private System.Void GKIOLADOCOK()
    // Offset: 0x1CA66DC
    void GKIOLADOCOK();
    // private System.Void IPIFMKAGODD()
    // Offset: 0x1CA6AB8
    void IPIFMKAGODD();
    // public System.Boolean NIDAEBHNPAF(MagicalActual.Bard CFFNKEMJHGK)
    // Offset: 0x1CA6E94
    bool NIDAEBHNPAF(::MagicalActual::Bard* CFFNKEMJHGK);
    // public System.Boolean JNKJFECHMCE(MagicalActual.Bard CFFNKEMJHGK)
    // Offset: 0x1CA7114
    bool JNKJFECHMCE(::MagicalActual::Bard* CFFNKEMJHGK);
    // private System.Void FGIFGGNGKPK()
    // Offset: 0x1CA7394
    void FGIFGGNGKPK();
    // public System.Boolean LookForHitUpcomingNotes(MagicalActual.Bard CFFNKEMJHGK)
    // Offset: 0x1CA7770
    bool LookForHitUpcomingNotes(::MagicalActual::Bard* CFFNKEMJHGK);
    // private System.Void DGJGAFKDIDK()
    // Offset: 0x1CA79F4
    void DGJGAFKDIDK();
    // private System.Void NHADFEMILCC()
    // Offset: 0x1CA7DD0
    void NHADFEMILCC();
  }; // MagicalActual.BardNote
  #pragma pack(pop)
  static check_size<sizeof(BardNote), 84 + sizeof(::UnityEngine::Vector3)> __MagicalActual_BardNoteSizeCheck;
  static_assert(sizeof(BardNote) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::BardNote::PFABJJGAOMM
// Il2CppName: PFABJJGAOMM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardNote::*)()>(&MagicalActual::BardNote::PFABJJGAOMM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "PFABJJGAOMM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::KGPFFJFBLDP
// Il2CppName: KGPFFJFBLDP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BardNote::*)(::MagicalActual::Bard*)>(&MagicalActual::BardNote::KGPFFJFBLDP)> {
  static const MethodInfo* get() {
    static auto* CFFNKEMJHGK = &::il2cpp_utils::GetClassFromName("MagicalActual", "Bard")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "KGPFFJFBLDP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFFNKEMJHGK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::INFEHHIMHLE
// Il2CppName: INFEHHIMHLE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BardNote::*)(::MagicalActual::Bard*)>(&MagicalActual::BardNote::INFEHHIMHLE)> {
  static const MethodInfo* get() {
    static auto* CFFNKEMJHGK = &::il2cpp_utils::GetClassFromName("MagicalActual", "Bard")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "INFEHHIMHLE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFFNKEMJHGK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::CBHOMHAHMMJ
// Il2CppName: CBHOMHAHMMJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BardNote::*)(::MagicalActual::Bard*)>(&MagicalActual::BardNote::CBHOMHAHMMJ)> {
  static const MethodInfo* get() {
    static auto* CFFNKEMJHGK = &::il2cpp_utils::GetClassFromName("MagicalActual", "Bard")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "CBHOMHAHMMJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFFNKEMJHGK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::AGEKIAGPHLN
// Il2CppName: AGEKIAGPHLN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BardNote::*)(::MagicalActual::Bard*)>(&MagicalActual::BardNote::AGEKIAGPHLN)> {
  static const MethodInfo* get() {
    static auto* CFFNKEMJHGK = &::il2cpp_utils::GetClassFromName("MagicalActual", "Bard")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "AGEKIAGPHLN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFFNKEMJHGK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::JJFHFKKEOFM
// Il2CppName: JJFHFKKEOFM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BardNote::*)(::MagicalActual::Bard*)>(&MagicalActual::BardNote::JJFHFKKEOFM)> {
  static const MethodInfo* get() {
    static auto* CFFNKEMJHGK = &::il2cpp_utils::GetClassFromName("MagicalActual", "Bard")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "JJFHFKKEOFM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFFNKEMJHGK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::BardNote::JBBCHIINNCE
// Il2CppName: JBBCHIINNCE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BardNote::*)(::MagicalActual::Bard*)>(&MagicalActual::BardNote::JBBCHIINNCE)> {
  static const MethodInfo* get() {
    static auto* CFFNKEMJHGK = &::il2cpp_utils::GetClassFromName("MagicalActual", "Bard")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "JBBCHIINNCE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFFNKEMJHGK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::MKECPNNFOJP
// Il2CppName: MKECPNNFOJP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BardNote::*)(::MagicalActual::Bard*)>(&MagicalActual::BardNote::MKECPNNFOJP)> {
  static const MethodInfo* get() {
    static auto* CFFNKEMJHGK = &::il2cpp_utils::GetClassFromName("MagicalActual", "Bard")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "MKECPNNFOJP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFFNKEMJHGK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardNote::*)()>(&MagicalActual::BardNote::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::MLGBKBMHHLE
// Il2CppName: MLGBKBMHHLE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardNote::*)()>(&MagicalActual::BardNote::MLGBKBMHHLE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "MLGBKBMHHLE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::PBEMGGBBDCK
// Il2CppName: PBEMGGBBDCK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardNote::*)()>(&MagicalActual::BardNote::PBEMGGBBDCK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "PBEMGGBBDCK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::EBGPMEMJJJN
// Il2CppName: EBGPMEMJJJN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BardNote::*)(::MagicalActual::Bard*)>(&MagicalActual::BardNote::EBGPMEMJJJN)> {
  static const MethodInfo* get() {
    static auto* CFFNKEMJHGK = &::il2cpp_utils::GetClassFromName("MagicalActual", "Bard")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "EBGPMEMJJJN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFFNKEMJHGK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::JDMAFHJLAJM
// Il2CppName: JDMAFHJLAJM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BardNote::*)(::MagicalActual::Bard*)>(&MagicalActual::BardNote::JDMAFHJLAJM)> {
  static const MethodInfo* get() {
    static auto* CFFNKEMJHGK = &::il2cpp_utils::GetClassFromName("MagicalActual", "Bard")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "JDMAFHJLAJM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFFNKEMJHGK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::POGAICBKLKO
// Il2CppName: POGAICBKLKO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BardNote::*)(::MagicalActual::Bard*)>(&MagicalActual::BardNote::POGAICBKLKO)> {
  static const MethodInfo* get() {
    static auto* CFFNKEMJHGK = &::il2cpp_utils::GetClassFromName("MagicalActual", "Bard")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "POGAICBKLKO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFFNKEMJHGK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::EIIKFEMCNKM
// Il2CppName: EIIKFEMCNKM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardNote::*)()>(&MagicalActual::BardNote::EIIKFEMCNKM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "EIIKFEMCNKM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::GPFBGGFPINB
// Il2CppName: GPFBGGFPINB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardNote::*)()>(&MagicalActual::BardNote::GPFBGGFPINB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "GPFBGGFPINB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::GHLPBOJJHNG
// Il2CppName: GHLPBOJJHNG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardNote::*)()>(&MagicalActual::BardNote::GHLPBOJJHNG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "GHLPBOJJHNG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::HHFGLPKOLOP
// Il2CppName: HHFGLPKOLOP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BardNote::*)(::MagicalActual::Bard*)>(&MagicalActual::BardNote::HHFGLPKOLOP)> {
  static const MethodInfo* get() {
    static auto* CFFNKEMJHGK = &::il2cpp_utils::GetClassFromName("MagicalActual", "Bard")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "HHFGLPKOLOP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFFNKEMJHGK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::GOBLFFKEFEE
// Il2CppName: GOBLFFKEFEE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BardNote::*)(::MagicalActual::Bard*)>(&MagicalActual::BardNote::GOBLFFKEFEE)> {
  static const MethodInfo* get() {
    static auto* CFFNKEMJHGK = &::il2cpp_utils::GetClassFromName("MagicalActual", "Bard")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "GOBLFFKEFEE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFFNKEMJHGK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::FNGLOIECKDG
// Il2CppName: FNGLOIECKDG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardNote::*)()>(&MagicalActual::BardNote::FNGLOIECKDG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "FNGLOIECKDG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::HKINNMLBMMG
// Il2CppName: HKINNMLBMMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardNote::*)()>(&MagicalActual::BardNote::HKINNMLBMMG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "HKINNMLBMMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::GKIOLADOCOK
// Il2CppName: GKIOLADOCOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardNote::*)()>(&MagicalActual::BardNote::GKIOLADOCOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "GKIOLADOCOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::IPIFMKAGODD
// Il2CppName: IPIFMKAGODD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardNote::*)()>(&MagicalActual::BardNote::IPIFMKAGODD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "IPIFMKAGODD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::NIDAEBHNPAF
// Il2CppName: NIDAEBHNPAF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BardNote::*)(::MagicalActual::Bard*)>(&MagicalActual::BardNote::NIDAEBHNPAF)> {
  static const MethodInfo* get() {
    static auto* CFFNKEMJHGK = &::il2cpp_utils::GetClassFromName("MagicalActual", "Bard")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "NIDAEBHNPAF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFFNKEMJHGK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::JNKJFECHMCE
// Il2CppName: JNKJFECHMCE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BardNote::*)(::MagicalActual::Bard*)>(&MagicalActual::BardNote::JNKJFECHMCE)> {
  static const MethodInfo* get() {
    static auto* CFFNKEMJHGK = &::il2cpp_utils::GetClassFromName("MagicalActual", "Bard")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "JNKJFECHMCE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFFNKEMJHGK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::FGIFGGNGKPK
// Il2CppName: FGIFGGNGKPK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardNote::*)()>(&MagicalActual::BardNote::FGIFGGNGKPK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "FGIFGGNGKPK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::LookForHitUpcomingNotes
// Il2CppName: LookForHitUpcomingNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::BardNote::*)(::MagicalActual::Bard*)>(&MagicalActual::BardNote::LookForHitUpcomingNotes)> {
  static const MethodInfo* get() {
    static auto* CFFNKEMJHGK = &::il2cpp_utils::GetClassFromName("MagicalActual", "Bard")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "LookForHitUpcomingNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFFNKEMJHGK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::DGJGAFKDIDK
// Il2CppName: DGJGAFKDIDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardNote::*)()>(&MagicalActual::BardNote::DGJGAFKDIDK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "DGJGAFKDIDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardNote::NHADFEMILCC
// Il2CppName: NHADFEMILCC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardNote::*)()>(&MagicalActual::BardNote::NHADFEMILCC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardNote*), "NHADFEMILCC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
