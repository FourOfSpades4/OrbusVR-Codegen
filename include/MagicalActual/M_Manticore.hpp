// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Monster
  class Monster;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: M_Manticore
  class M_Manticore;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::M_Manticore);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::M_Manticore*, "MagicalActual", "M_Manticore");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.M_Manticore
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD55A0
  class M_Manticore : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MagicalActual.Monster BIIBEOELIHH
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::Monster* BIIBEOELIHH;
    // Field size check
    static_assert(sizeof(::MagicalActual::Monster*) == 0x8);
    // public UnityEngine.GameObject vfxSlash
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* vfxSlash;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxBreath
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* vfxBreath;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x30
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MagicalActual.Monster BIIBEOELIHH
    [[deprecated("Use field access instead!")]] ::MagicalActual::Monster*& dyn_BIIBEOELIHH();
    // Get instance field reference: public UnityEngine.GameObject vfxSlash
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxSlash();
    // Get instance field reference: public UnityEngine.GameObject vfxBreath
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxBreath();
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // public System.Void BreathStop()
    // Offset: 0x244A7E8
    void BreathStop();
    // public System.Void DIAJFPILADK()
    // Offset: 0x244A880
    void DIAJFPILADK();
    // private System.Void JENOIOBAEPG()
    // Offset: 0x244A96C
    void JENOIOBAEPG();
    // public System.Void GPMIANPCCHM()
    // Offset: 0x244A9C4
    void GPMIANPCCHM();
    // public System.Void .ctor()
    // Offset: 0x244AAB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static M_Manticore* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::M_Manticore::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<M_Manticore*, creationType>()));
    }
    // public System.Void MKAECMFKIEN()
    // Offset: 0x244AB08
    void MKAECMFKIEN();
    // private System.Void FGIFGGNGKPK()
    // Offset: 0x244AD2C
    void FGIFGGNGKPK();
    // public System.Void BreathStart()
    // Offset: 0x244AD84
    void BreathStart();
    // public System.Void Slash()
    // Offset: 0x244ADB8
    void Slash();
    // public System.Void BreathFinish()
    // Offset: 0x244AFD0
    void BreathFinish();
    // public System.Void PKINMLEHJFB()
    // Offset: 0x244B0BC
    void PKINMLEHJFB();
    // private System.Void IDOCJGNLNFL()
    // Offset: 0x244B2E0
    void IDOCJGNLNFL();
    // public System.Void FCLJFAGPPEJ()
    // Offset: 0x244B338
    void FCLJFAGPPEJ();
    // private System.Void BDEDGNGMHMN()
    // Offset: 0x244B3D4
    void BDEDGNGMHMN();
    // public System.Void DEIPJAPLCGM()
    // Offset: 0x244B42C
    void DEIPJAPLCGM();
    // public System.Void NMNBKAALEIL()
    // Offset: 0x244B460
    void NMNBKAALEIL();
    // private System.Void Start()
    // Offset: 0x244B494
    void Start();
    // public System.Void GHHAMAIIFFG()
    // Offset: 0x244B4EC
    void GHHAMAIIFFG();
    // public System.Void JFBOMHHGFDN()
    // Offset: 0x244B710
    void JFBOMHHGFDN();
    // public System.Void BIIPJEPNIBH()
    // Offset: 0x244B934
    void BIIPJEPNIBH();
    // public System.Void ECDMAAAMPCD()
    // Offset: 0x244BB58
    void ECDMAAAMPCD();
    // public System.Void IBMKENLAMGB()
    // Offset: 0x244BB8C
    void IBMKENLAMGB();
    // public System.Void JCCHENNHAMF()
    // Offset: 0x244BDB0
    void JCCHENNHAMF();
    // public System.Void GHKBNNMHGBP()
    // Offset: 0x244BDE4
    void GHKBNNMHGBP();
    // public System.Void OFIEBLCNJKE()
    // Offset: 0x244BE18
    void OFIEBLCNJKE();
    // public System.Void OAOOAHLJPHM()
    // Offset: 0x244BEB4
    void OAOOAHLJPHM();
  }; // MagicalActual.M_Manticore
  #pragma pack(pop)
  static check_size<sizeof(M_Manticore), 48 + sizeof(::StringW)> __MagicalActual_M_ManticoreSizeCheck;
  static_assert(sizeof(M_Manticore) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::M_Manticore::BreathStop
// Il2CppName: BreathStop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::BreathStop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "BreathStop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::DIAJFPILADK
// Il2CppName: DIAJFPILADK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::DIAJFPILADK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "DIAJFPILADK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::JENOIOBAEPG
// Il2CppName: JENOIOBAEPG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::JENOIOBAEPG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "JENOIOBAEPG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::GPMIANPCCHM
// Il2CppName: GPMIANPCCHM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::GPMIANPCCHM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "GPMIANPCCHM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::M_Manticore::MKAECMFKIEN
// Il2CppName: MKAECMFKIEN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::MKAECMFKIEN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "MKAECMFKIEN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::FGIFGGNGKPK
// Il2CppName: FGIFGGNGKPK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::FGIFGGNGKPK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "FGIFGGNGKPK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::BreathStart
// Il2CppName: BreathStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::BreathStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "BreathStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::Slash
// Il2CppName: Slash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::Slash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "Slash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::BreathFinish
// Il2CppName: BreathFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::BreathFinish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "BreathFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::PKINMLEHJFB
// Il2CppName: PKINMLEHJFB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::PKINMLEHJFB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "PKINMLEHJFB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::IDOCJGNLNFL
// Il2CppName: IDOCJGNLNFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::IDOCJGNLNFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "IDOCJGNLNFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::FCLJFAGPPEJ
// Il2CppName: FCLJFAGPPEJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::FCLJFAGPPEJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "FCLJFAGPPEJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::BDEDGNGMHMN
// Il2CppName: BDEDGNGMHMN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::BDEDGNGMHMN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "BDEDGNGMHMN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::DEIPJAPLCGM
// Il2CppName: DEIPJAPLCGM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::DEIPJAPLCGM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "DEIPJAPLCGM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::NMNBKAALEIL
// Il2CppName: NMNBKAALEIL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::NMNBKAALEIL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "NMNBKAALEIL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::GHHAMAIIFFG
// Il2CppName: GHHAMAIIFFG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::GHHAMAIIFFG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "GHHAMAIIFFG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::JFBOMHHGFDN
// Il2CppName: JFBOMHHGFDN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::JFBOMHHGFDN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "JFBOMHHGFDN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::BIIPJEPNIBH
// Il2CppName: BIIPJEPNIBH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::BIIPJEPNIBH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "BIIPJEPNIBH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::ECDMAAAMPCD
// Il2CppName: ECDMAAAMPCD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::ECDMAAAMPCD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "ECDMAAAMPCD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::IBMKENLAMGB
// Il2CppName: IBMKENLAMGB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::IBMKENLAMGB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "IBMKENLAMGB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::JCCHENNHAMF
// Il2CppName: JCCHENNHAMF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::JCCHENNHAMF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "JCCHENNHAMF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::GHKBNNMHGBP
// Il2CppName: GHKBNNMHGBP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::GHKBNNMHGBP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "GHKBNNMHGBP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::OFIEBLCNJKE
// Il2CppName: OFIEBLCNJKE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::OFIEBLCNJKE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "OFIEBLCNJKE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Manticore::OAOOAHLJPHM
// Il2CppName: OAOOAHLJPHM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Manticore::*)()>(&MagicalActual::M_Manticore::OAOOAHLJPHM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Manticore*), "OAOOAHLJPHM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
