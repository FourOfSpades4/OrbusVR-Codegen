// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: NetGunGameNode
  class NetGunGameNode;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: BoxCollider
  class BoxCollider;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: CreatureController
  class CreatureController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::CreatureController);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::CreatureController*, "MagicalActual", "CreatureController");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.CreatureController
  // [TokenAttribute] Offset: FFFFFFFF
  class CreatureController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::MagicalActual::CreatureController::$ShowCreature$d__8
    class $ShowCreature$d__8;
    public:
    // public System.Single speed
    // Size: 0x4
    // Offset: 0x18
    float speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: speed and: myCollider
    char __padding0[0x4] = {};
    // protected UnityEngine.BoxCollider myCollider
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::BoxCollider* myCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::BoxCollider*) == 0x8);
    // public System.Boolean isRare
    // Size: 0x1
    // Offset: 0x28
    bool isRare;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isRare and: Node
    char __padding2[0x7] = {};
    // public MagicalActual.NetGunGameNode Node
    // Size: 0x8
    // Offset: 0x30
    ::MagicalActual::NetGunGameNode* Node;
    // Field size check
    static_assert(sizeof(::MagicalActual::NetGunGameNode*) == 0x8);
    // protected UnityEngine.Transform DMNHBEIHGMA
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* DMNHBEIHGMA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // protected UnityEngine.Vector3 GCLKDLJHJEI
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 GCLKDLJHJEI;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single speed
    [[deprecated("Use field access instead!")]] float& dyn_speed();
    // Get instance field reference: protected UnityEngine.BoxCollider myCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::BoxCollider*& dyn_myCollider();
    // Get instance field reference: public System.Boolean isRare
    [[deprecated("Use field access instead!")]] bool& dyn_isRare();
    // Get instance field reference: public MagicalActual.NetGunGameNode Node
    [[deprecated("Use field access instead!")]] ::MagicalActual::NetGunGameNode*& dyn_Node();
    // Get instance field reference: protected UnityEngine.Transform DMNHBEIHGMA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_DMNHBEIHGMA();
    // Get instance field reference: protected UnityEngine.Vector3 GCLKDLJHJEI
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_GCLKDLJHJEI();
    // protected System.Void Awake()
    // Offset: 0x199FC40
    void Awake();
    // protected System.Void Start()
    // Offset: 0x199FD30
    void Start();
    // protected System.Collections.IEnumerator IHPHPLBGMGI()
    // Offset: 0x199FE40
    ::System::Collections::IEnumerator* IHPHPLBGMGI();
    // protected System.Collections.IEnumerator PKBMEHCLJPD()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* PKBMEHCLJPD();
    // protected System.Void .ctor()
    // Offset: 0x199FEE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CreatureController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::CreatureController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CreatureController*, creationType>()));
    }
  }; // MagicalActual.CreatureController
  #pragma pack(pop)
  static check_size<sizeof(CreatureController), 64 + sizeof(::UnityEngine::Vector3)> __MagicalActual_CreatureControllerSizeCheck;
  static_assert(sizeof(CreatureController) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::CreatureController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CreatureController::*)()>(&MagicalActual::CreatureController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CreatureController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CreatureController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CreatureController::*)()>(&MagicalActual::CreatureController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CreatureController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CreatureController::IHPHPLBGMGI
// Il2CppName: IHPHPLBGMGI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::CreatureController::*)()>(&MagicalActual::CreatureController::IHPHPLBGMGI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CreatureController*), "IHPHPLBGMGI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CreatureController::PKBMEHCLJPD
// Il2CppName: PKBMEHCLJPD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::CreatureController::*)()>(&MagicalActual::CreatureController::PKBMEHCLJPD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CreatureController*), "PKBMEHCLJPD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CreatureController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
