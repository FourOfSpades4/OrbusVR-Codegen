// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: AvatarAppearance
  class AvatarAppearance;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::AvatarAppearance);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::AvatarAppearance*, "MagicalActual", "AvatarAppearance");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.AvatarAppearance
  // [TokenAttribute] Offset: FFFFFFFF
  class AvatarAppearance : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 mouthset
    // Size: 0x4
    // Offset: 0x10
    int mouthset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 eyeset
    // Size: 0x4
    // Offset: 0x14
    int eyeset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 haircolor
    // Size: 0x4
    // Offset: 0x18
    int haircolor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 hairstyle
    // Size: 0x4
    // Offset: 0x1C
    int hairstyle;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 nosestyle
    // Size: 0x4
    // Offset: 0x20
    int nosestyle;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 earstyle
    // Size: 0x4
    // Offset: 0x24
    int earstyle;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 eyecolor
    // Size: 0x4
    // Offset: 0x28
    int eyecolor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single cheekBones
    // Size: 0x4
    // Offset: 0x2C
    float cheekBones;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single cheeks
    // Size: 0x4
    // Offset: 0x30
    float cheeks;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single breasts
    // Size: 0x4
    // Offset: 0x34
    float breasts;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single waist
    // Size: 0x4
    // Offset: 0x38
    float waist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single hips
    // Size: 0x4
    // Offset: 0x3C
    float hips;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single chest
    // Size: 0x4
    // Offset: 0x40
    float chest;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single neck
    // Size: 0x4
    // Offset: 0x44
    float neck;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single shoulders
    // Size: 0x4
    // Offset: 0x48
    float shoulders;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single forehead
    // Size: 0x4
    // Offset: 0x4C
    float forehead;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single chin
    // Size: 0x4
    // Offset: 0x50
    float chin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single faceDepth
    // Size: 0x4
    // Offset: 0x54
    float faceDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Int32 mouthset
    [[deprecated("Use field access instead!")]] int& dyn_mouthset();
    // Get instance field reference: public System.Int32 eyeset
    [[deprecated("Use field access instead!")]] int& dyn_eyeset();
    // Get instance field reference: public System.Int32 haircolor
    [[deprecated("Use field access instead!")]] int& dyn_haircolor();
    // Get instance field reference: public System.Int32 hairstyle
    [[deprecated("Use field access instead!")]] int& dyn_hairstyle();
    // Get instance field reference: public System.Int32 nosestyle
    [[deprecated("Use field access instead!")]] int& dyn_nosestyle();
    // Get instance field reference: public System.Int32 earstyle
    [[deprecated("Use field access instead!")]] int& dyn_earstyle();
    // Get instance field reference: public System.Int32 eyecolor
    [[deprecated("Use field access instead!")]] int& dyn_eyecolor();
    // Get instance field reference: public System.Single cheekBones
    [[deprecated("Use field access instead!")]] float& dyn_cheekBones();
    // Get instance field reference: public System.Single cheeks
    [[deprecated("Use field access instead!")]] float& dyn_cheeks();
    // Get instance field reference: public System.Single breasts
    [[deprecated("Use field access instead!")]] float& dyn_breasts();
    // Get instance field reference: public System.Single waist
    [[deprecated("Use field access instead!")]] float& dyn_waist();
    // Get instance field reference: public System.Single hips
    [[deprecated("Use field access instead!")]] float& dyn_hips();
    // Get instance field reference: public System.Single chest
    [[deprecated("Use field access instead!")]] float& dyn_chest();
    // Get instance field reference: public System.Single neck
    [[deprecated("Use field access instead!")]] float& dyn_neck();
    // Get instance field reference: public System.Single shoulders
    [[deprecated("Use field access instead!")]] float& dyn_shoulders();
    // Get instance field reference: public System.Single forehead
    [[deprecated("Use field access instead!")]] float& dyn_forehead();
    // Get instance field reference: public System.Single chin
    [[deprecated("Use field access instead!")]] float& dyn_chin();
    // Get instance field reference: public System.Single faceDepth
    [[deprecated("Use field access instead!")]] float& dyn_faceDepth();
    // public System.Void .ctor()
    // Offset: 0x10D005C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AvatarAppearance* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::AvatarAppearance::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AvatarAppearance*, creationType>()));
    }
  }; // MagicalActual.AvatarAppearance
  #pragma pack(pop)
  static check_size<sizeof(AvatarAppearance), 84 + sizeof(float)> __MagicalActual_AvatarAppearanceSizeCheck;
  static_assert(sizeof(AvatarAppearance) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::AvatarAppearance::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
