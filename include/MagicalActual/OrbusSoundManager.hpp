// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: FMOD.Studio.EventInstance
#include "FMOD/Studio/EventInstance.hpp"
// Including type: FMOD.Studio.VCA
#include "FMOD/Studio/VCA.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: PlayerCharacter
  class PlayerCharacter;
  // Forward declaring type: OrbusMusicArea
  class OrbusMusicArea;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: UnityEngine::Audio
namespace UnityEngine::Audio {
  // Forward declaring type: AudioMixerGroup
  class AudioMixerGroup;
  // Forward declaring type: AudioMixer
  class AudioMixer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: OrbusSoundManager
  class OrbusSoundManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::OrbusSoundManager);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::OrbusSoundManager*, "MagicalActual", "OrbusSoundManager");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0xC1
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.OrbusSoundManager
  // [TokenAttribute] Offset: FFFFFFFF
  class OrbusSoundManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::MagicalActual::OrbusSoundManager::$$c__DisplayClass45_0
    class $$c__DisplayClass45_0;
    public:
    // public UnityEngine.AudioClip backgroundMusic
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AudioClip* backgroundMusic;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip combatMusic
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioClip* combatMusic;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.Audio.AudioMixerGroup outputGroup
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Audio::AudioMixerGroup* outputGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::Audio::AudioMixerGroup*) == 0x8);
    // public UnityEngine.Audio.AudioMixerGroup sfxGroup
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Audio::AudioMixerGroup* sfxGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::Audio::AudioMixerGroup*) == 0x8);
    // public UnityEngine.Audio.AudioMixer masterMixer
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Audio::AudioMixer* masterMixer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Audio::AudioMixer*) == 0x8);
    // public UnityEngine.AudioClip[] guiSfx
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::AudioClip*> guiSfx;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // private UnityEngine.AudioSource PCBCOLMLIDF
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AudioSource* PCBCOLMLIDF;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioSource OHEOCNOJBLJ
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AudioSource* OHEOCNOJBLJ;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private MagicalActual.PlayerCharacter HCFELEODBLD
    // Size: 0x8
    // Offset: 0x58
    ::MagicalActual::PlayerCharacter* HCFELEODBLD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerCharacter*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAE4B48
    // private MagicalActual.OrbusMusicArea <LCOIBFMKBPB>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::MagicalActual::OrbusMusicArea* LCOIBFMKBPB;
    // Field size check
    static_assert(sizeof(::MagicalActual::OrbusMusicArea*) == 0x8);
    // private System.Single JHPOONONPAC
    // Size: 0x4
    // Offset: 0x68
    float JHPOONONPAC;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single OCJKNBLCKIO
    // Size: 0x4
    // Offset: 0x6C
    float OCJKNBLCKIO;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single CJOAFPBOEMF
    // Size: 0x4
    // Offset: 0x70
    float CJOAFPBOEMF;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single CGDKBPLHOMO
    // Size: 0x4
    // Offset: 0x74
    float CGDKBPLHOMO;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 KDLEKLCAOJD
    // Size: 0x4
    // Offset: 0x78
    int KDLEKLCAOJD;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 KJOLKHGEKBH
    // Size: 0x4
    // Offset: 0x7C
    int KJOLKHGEKBH;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 JBKIKEMKMBK
    // Size: 0x4
    // Offset: 0x80
    int JBKIKEMKMBK;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single AAMIOFNLBKB
    // Size: 0x4
    // Offset: 0x84
    float AAMIOFNLBKB;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single OACBAHMFACM
    // Size: 0x4
    // Offset: 0x88
    float OACBAHMFACM;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single CBGDPBIEGBL
    // Size: 0x4
    // Offset: 0x8C
    float CBGDPBIEGBL;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single BMAMHDCGKGI
    // Size: 0x4
    // Offset: 0x90
    float BMAMHDCGKGI;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single CGBGHDJMHOP
    // Size: 0x4
    // Offset: 0x94
    float CGBGHDJMHOP;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean OELFIAAIHBL
    // Size: 0x1
    // Offset: 0x98
    bool OELFIAAIHBL;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean OACKABMGABI
    // Size: 0x1
    // Offset: 0x99
    bool OACKABMGABI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean ALOEBOBEEDP
    // Size: 0x1
    // Offset: 0x9A
    bool ALOEBOBEEDP;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean LBIDOICPAHE
    // Size: 0x1
    // Offset: 0x9B
    bool LBIDOICPAHE;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: LBIDOICPAHE and: LILAGOEGEOJ
    char __padding25[0x4] = {};
    // private FMOD.Studio.EventInstance LILAGOEGEOJ
    // Size: 0x8
    // Offset: 0xA0
    ::FMOD::Studio::EventInstance LILAGOEGEOJ;
    // Field size check
    static_assert(sizeof(::FMOD::Studio::EventInstance) == 0x8);
    // private FMOD.Studio.VCA LKOKDPFPHAA
    // Size: 0x8
    // Offset: 0xA8
    ::FMOD::Studio::VCA LKOKDPFPHAA;
    // Field size check
    static_assert(sizeof(::FMOD::Studio::VCA) == 0x8);
    // private FMOD.Studio.VCA FFJFPGLOJAO
    // Size: 0x8
    // Offset: 0xB0
    ::FMOD::Studio::VCA FFJFPGLOJAO;
    // Field size check
    static_assert(sizeof(::FMOD::Studio::VCA) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,System.Single> currentVolumePercents
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::Dictionary_2<::StringW, float>* currentVolumePercents;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, float>*) == 0x8);
    // private System.Boolean HALFLBGNCGA
    // Size: 0x1
    // Offset: 0xC0
    bool HALFLBGNCGA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private MagicalActual.OrbusSoundManager MMECOAJKONB
    static ::MagicalActual::OrbusSoundManager* _get_MMECOAJKONB();
    // Set static field: static private MagicalActual.OrbusSoundManager MMECOAJKONB
    static void _set_MMECOAJKONB(::MagicalActual::OrbusSoundManager* value);
    // Get instance field reference: public UnityEngine.AudioClip backgroundMusic
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_backgroundMusic();
    // Get instance field reference: public UnityEngine.AudioClip combatMusic
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_combatMusic();
    // Get instance field reference: public UnityEngine.Audio.AudioMixerGroup outputGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::Audio::AudioMixerGroup*& dyn_outputGroup();
    // Get instance field reference: public UnityEngine.Audio.AudioMixerGroup sfxGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::Audio::AudioMixerGroup*& dyn_sfxGroup();
    // Get instance field reference: public UnityEngine.Audio.AudioMixer masterMixer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Audio::AudioMixer*& dyn_masterMixer();
    // Get instance field reference: public UnityEngine.AudioClip[] guiSfx
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_guiSfx();
    // Get instance field reference: private UnityEngine.AudioSource PCBCOLMLIDF
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_PCBCOLMLIDF();
    // Get instance field reference: private UnityEngine.AudioSource OHEOCNOJBLJ
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_OHEOCNOJBLJ();
    // Get instance field reference: private MagicalActual.PlayerCharacter HCFELEODBLD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerCharacter*& dyn_HCFELEODBLD();
    // Get instance field reference: private MagicalActual.OrbusMusicArea <LCOIBFMKBPB>k__BackingField
    [[deprecated("Use field access instead!")]] ::MagicalActual::OrbusMusicArea*& dyn_$LCOIBFMKBPB$k__BackingField();
    // Get instance field reference: private System.Single JHPOONONPAC
    [[deprecated("Use field access instead!")]] float& dyn_JHPOONONPAC();
    // Get instance field reference: private System.Single OCJKNBLCKIO
    [[deprecated("Use field access instead!")]] float& dyn_OCJKNBLCKIO();
    // Get instance field reference: private System.Single CJOAFPBOEMF
    [[deprecated("Use field access instead!")]] float& dyn_CJOAFPBOEMF();
    // Get instance field reference: private System.Single CGDKBPLHOMO
    [[deprecated("Use field access instead!")]] float& dyn_CGDKBPLHOMO();
    // Get instance field reference: private System.Int32 KDLEKLCAOJD
    [[deprecated("Use field access instead!")]] int& dyn_KDLEKLCAOJD();
    // Get instance field reference: private System.Int32 KJOLKHGEKBH
    [[deprecated("Use field access instead!")]] int& dyn_KJOLKHGEKBH();
    // Get instance field reference: private System.Int32 JBKIKEMKMBK
    [[deprecated("Use field access instead!")]] int& dyn_JBKIKEMKMBK();
    // Get instance field reference: private System.Single AAMIOFNLBKB
    [[deprecated("Use field access instead!")]] float& dyn_AAMIOFNLBKB();
    // Get instance field reference: private System.Single OACBAHMFACM
    [[deprecated("Use field access instead!")]] float& dyn_OACBAHMFACM();
    // Get instance field reference: private System.Single CBGDPBIEGBL
    [[deprecated("Use field access instead!")]] float& dyn_CBGDPBIEGBL();
    // Get instance field reference: private System.Single BMAMHDCGKGI
    [[deprecated("Use field access instead!")]] float& dyn_BMAMHDCGKGI();
    // Get instance field reference: private System.Single CGBGHDJMHOP
    [[deprecated("Use field access instead!")]] float& dyn_CGBGHDJMHOP();
    // Get instance field reference: private System.Boolean OELFIAAIHBL
    [[deprecated("Use field access instead!")]] bool& dyn_OELFIAAIHBL();
    // Get instance field reference: private System.Boolean OACKABMGABI
    [[deprecated("Use field access instead!")]] bool& dyn_OACKABMGABI();
    // Get instance field reference: private System.Boolean ALOEBOBEEDP
    [[deprecated("Use field access instead!")]] bool& dyn_ALOEBOBEEDP();
    // Get instance field reference: private System.Boolean LBIDOICPAHE
    [[deprecated("Use field access instead!")]] bool& dyn_LBIDOICPAHE();
    // Get instance field reference: private FMOD.Studio.EventInstance LILAGOEGEOJ
    [[deprecated("Use field access instead!")]] ::FMOD::Studio::EventInstance& dyn_LILAGOEGEOJ();
    // Get instance field reference: private FMOD.Studio.VCA LKOKDPFPHAA
    [[deprecated("Use field access instead!")]] ::FMOD::Studio::VCA& dyn_LKOKDPFPHAA();
    // Get instance field reference: private FMOD.Studio.VCA FFJFPGLOJAO
    [[deprecated("Use field access instead!")]] ::FMOD::Studio::VCA& dyn_FFJFPGLOJAO();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.Single> currentVolumePercents
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, float>*& dyn_currentVolumePercents();
    // Get instance field reference: private System.Boolean HALFLBGNCGA
    [[deprecated("Use field access instead!")]] bool& dyn_HALFLBGNCGA();
    // static public MagicalActual.OrbusSoundManager get_Instance()
    // Offset: 0xFC5ADC
    static ::MagicalActual::OrbusSoundManager* get_Instance();
    // public System.Void NFEGEEDKGMN(System.String HACLJDHIHML, UnityEngine.Vector3 NHFBFBMNPFC)
    // Offset: 0xFC5B2C
    void NFEGEEDKGMN(::StringW HACLJDHIHML, ::UnityEngine::Vector3 NHFBFBMNPFC);
    // public System.Void ActivateMusicArea(MagicalActual.OrbusMusicArea KGDKAIEKFAE)
    // Offset: 0xFC5BDC
    void ActivateMusicArea(::MagicalActual::OrbusMusicArea* KGDKAIEKFAE);
    // private System.Void CNMFNLCBGAB(System.Single KAFBBPCFKBB)
    // Offset: 0xFC5DE8
    void CNMFNLCBGAB(float KAFBBPCFKBB);
    // private System.Void FixedUpdate()
    // Offset: 0xFC5ECC
    void FixedUpdate();
    // public System.Void ABBFCAJABJL(System.Int32 FEHDKJKGNCE, System.Single NOGJKMLEEDM)
    // Offset: 0xFC5F1C
    void ABBFCAJABJL(int FEHDKJKGNCE, float NOGJKMLEEDM);
    // private System.Void MGLLMDGECAC(System.Single KAFBBPCFKBB)
    // Offset: 0xFC5FBC
    void MGLLMDGECAC(float KAFBBPCFKBB);
    // private System.Void ENGNDOOAJLE(System.Single KAFBBPCFKBB)
    // Offset: 0xFC60A0
    void ENGNDOOAJLE(float KAFBBPCFKBB);
    // public System.Void OAOFFPGGMPH()
    // Offset: 0xFC61A8
    void OAOFFPGGMPH();
    // private System.Void NNBODOLEAFK()
    // Offset: 0xFC62B0
    void NNBODOLEAFK();
    // private System.Void AKONOOIDPDA()
    // Offset: 0xFC6300
    void AKONOOIDPDA();
    // private System.Void FEJMEGIGEFI()
    // Offset: 0xFC6404
    void FEJMEGIGEFI();
    // private System.Void Start()
    // Offset: 0xFC6408
    void Start();
    // public System.Void PlayGuiSound(System.Int32 FEHDKJKGNCE, System.Single NOGJKMLEEDM)
    // Offset: 0xFC67E0
    void PlayGuiSound(int FEHDKJKGNCE, float NOGJKMLEEDM);
    // public System.Void startCombat()
    // Offset: 0xFC6880
    void startCombat();
    // private System.Void LMIMNBKKLFA(MagicalActual.OrbusMusicArea MMMEIONJJFJ)
    // Offset: 0xFC5DE0
    void LMIMNBKKLFA(::MagicalActual::OrbusMusicArea* MMMEIONJJFJ);
    // private System.Void JMPPPHNKAFG()
    // Offset: 0xFC697C
    void JMPPPHNKAFG();
    // public System.Void CGADCLGNBHM(System.Int32 FEHDKJKGNCE, System.Single NOGJKMLEEDM)
    // Offset: 0xFC6A80
    void CGADCLGNBHM(int FEHDKJKGNCE, float NOGJKMLEEDM);
    // private System.Void FFGNCABMAPD(System.Single KAFBBPCFKBB)
    // Offset: 0xFC6B20
    void FFGNCABMAPD(float KAFBBPCFKBB);
    // private System.Void EJDOKPAFPKM()
    // Offset: 0xFC5F18
    void EJDOKPAFPKM();
    // private System.Void IFDFPAHLJKN(System.Single KAFBBPCFKBB)
    // Offset: 0xFC6C30
    void IFDFPAHLJKN(float KAFBBPCFKBB);
    // private System.Void KFHKANBGGIO(System.Single KAFBBPCFKBB)
    // Offset: 0xFC6D50
    void KFHKANBGGIO(float KAFBBPCFKBB);
    // public System.Void GOOEGAIHHOB(MagicalActual.OrbusMusicArea KGDKAIEKFAE)
    // Offset: 0xFC6E7C
    void GOOEGAIHHOB(::MagicalActual::OrbusMusicArea* KGDKAIEKFAE);
    // static public MagicalActual.OrbusSoundManager AECFCFFOCBG()
    // Offset: 0xFC7078
    static ::MagicalActual::OrbusSoundManager* AECFCFFOCBG();
    // private System.Void NIGOCBKLOFH()
    // Offset: 0xFC70C8
    void NIGOCBKLOFH();
    // public System.Void NOLCEEHMDNO(MagicalActual.OrbusMusicArea KGDKAIEKFAE)
    // Offset: 0xFC7114
    void NOLCEEHMDNO(::MagicalActual::OrbusMusicArea* KGDKAIEKFAE);
    // private System.Void FFPFJKIBBPL(System.Single KAFBBPCFKBB)
    // Offset: 0xFC7318
    void FFPFJKIBBPL(float KAFBBPCFKBB);
    // private System.Void CHEMMHEMDCB()
    // Offset: 0xFC73F0
    void CHEMMHEMDCB();
    // static public MagicalActual.OrbusSoundManager KEGEDNLOCND()
    // Offset: 0xFC743C
    static ::MagicalActual::OrbusSoundManager* KEGEDNLOCND();
    // public MagicalActual.OrbusMusicArea NNPHJFNLMOJ()
    // Offset: 0xFC748C
    ::MagicalActual::OrbusMusicArea* NNPHJFNLMOJ();
    // public System.Void CJEEMIPGJCJ(System.String HACLJDHIHML, UnityEngine.Vector3 NHFBFBMNPFC)
    // Offset: 0xFC7494
    void CJEEMIPGJCJ(::StringW HACLJDHIHML, ::UnityEngine::Vector3 NHFBFBMNPFC);
    // private System.Void NNLIEAPHDOJ()
    // Offset: 0xFC62FC
    void NNLIEAPHDOJ();
    // public System.Void AANBDPEJFNI(System.String HACLJDHIHML, UnityEngine.Vector3 NHFBFBMNPFC)
    // Offset: 0xFC7544
    void AANBDPEJFNI(::StringW HACLJDHIHML, ::UnityEngine::Vector3 NHFBFBMNPFC);
    // public System.Void EMDDOEBNJBI(System.String HACLJDHIHML, UnityEngine.Vector3 NHFBFBMNPFC)
    // Offset: 0xFC75F4
    void EMDDOEBNJBI(::StringW HACLJDHIHML, ::UnityEngine::Vector3 NHFBFBMNPFC);
    // public System.Void JDGIHPDNBDH()
    // Offset: 0xFC76A4
    void JDGIHPDNBDH();
    // public MagicalActual.OrbusMusicArea get_activeMusicArea()
    // Offset: 0xFC5DD8
    ::MagicalActual::OrbusMusicArea* get_activeMusicArea();
    // public System.Void AGPAPFEHHEI()
    // Offset: 0xFC77AC
    void AGPAPFEHHEI();
    // private System.Void Awake()
    // Offset: 0xFC78B4
    void Awake();
    // private System.Void LMBHFGONKDA(System.Single KAFBBPCFKBB)
    // Offset: 0xFC79B8
    void LMBHFGONKDA(float KAFBBPCFKBB);
    // public System.Void FAMDBIEOJOI()
    // Offset: 0xFC7A9C
    void FAMDBIEOJOI();
    // public System.Void endCombat()
    // Offset: 0xFC7BA4
    void endCombat();
    // public MagicalActual.OrbusMusicArea HFEOMAKIPIB()
    // Offset: 0xFC7310
    ::MagicalActual::OrbusMusicArea* HFEOMAKIPIB();
    // public System.Void .ctor()
    // Offset: 0xFC7CA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OrbusSoundManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::OrbusSoundManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OrbusSoundManager*, creationType>()));
    }
    // private System.Void KDMCLEADFHC(System.Single KAFBBPCFKBB)
    // Offset: 0xFC7CC8
    void KDMCLEADFHC(float KAFBBPCFKBB);
    // public System.Void LPBBOFIEKKN(MagicalActual.OrbusMusicArea KGDKAIEKFAE)
    // Offset: 0xFC7DD8
    void LPBBOFIEKKN(::MagicalActual::OrbusMusicArea* KGDKAIEKFAE);
    // private System.Void GABPHAKOIMA(System.Single KAFBBPCFKBB)
    // Offset: 0xFC7FD4
    void GABPHAKOIMA(float KAFBBPCFKBB);
    // private System.Void GPFBGGFPINB()
    // Offset: 0xFC80AC
    void GPFBGGFPINB();
    // public System.Void PlayFmodEvent(System.String HACLJDHIHML, UnityEngine.Vector3 NHFBFBMNPFC)
    // Offset: 0xFC848C
    void PlayFmodEvent(::StringW HACLJDHIHML, ::UnityEngine::Vector3 NHFBFBMNPFC);
  }; // MagicalActual.OrbusSoundManager
  #pragma pack(pop)
  static check_size<sizeof(OrbusSoundManager), 192 + sizeof(bool)> __MagicalActual_OrbusSoundManagerSizeCheck;
  static_assert(sizeof(OrbusSoundManager) == 0xC1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::OrbusSoundManager* (*)()>(&MagicalActual::OrbusSoundManager::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::NFEGEEDKGMN
// Il2CppName: NFEGEEDKGMN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(::StringW, ::UnityEngine::Vector3)>(&MagicalActual::OrbusSoundManager::NFEGEEDKGMN)> {
  static const MethodInfo* get() {
    static auto* HACLJDHIHML = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* NHFBFBMNPFC = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "NFEGEEDKGMN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HACLJDHIHML, NHFBFBMNPFC});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::ActivateMusicArea
// Il2CppName: ActivateMusicArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(::MagicalActual::OrbusMusicArea*)>(&MagicalActual::OrbusSoundManager::ActivateMusicArea)> {
  static const MethodInfo* get() {
    static auto* KGDKAIEKFAE = &::il2cpp_utils::GetClassFromName("MagicalActual", "OrbusMusicArea")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "ActivateMusicArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KGDKAIEKFAE});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::CNMFNLCBGAB
// Il2CppName: CNMFNLCBGAB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(float)>(&MagicalActual::OrbusSoundManager::CNMFNLCBGAB)> {
  static const MethodInfo* get() {
    static auto* KAFBBPCFKBB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "CNMFNLCBGAB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KAFBBPCFKBB});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::ABBFCAJABJL
// Il2CppName: ABBFCAJABJL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(int, float)>(&MagicalActual::OrbusSoundManager::ABBFCAJABJL)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* NOGJKMLEEDM = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "ABBFCAJABJL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE, NOGJKMLEEDM});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::MGLLMDGECAC
// Il2CppName: MGLLMDGECAC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(float)>(&MagicalActual::OrbusSoundManager::MGLLMDGECAC)> {
  static const MethodInfo* get() {
    static auto* KAFBBPCFKBB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "MGLLMDGECAC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KAFBBPCFKBB});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::ENGNDOOAJLE
// Il2CppName: ENGNDOOAJLE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(float)>(&MagicalActual::OrbusSoundManager::ENGNDOOAJLE)> {
  static const MethodInfo* get() {
    static auto* KAFBBPCFKBB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "ENGNDOOAJLE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KAFBBPCFKBB});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::OAOFFPGGMPH
// Il2CppName: OAOFFPGGMPH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::OAOFFPGGMPH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "OAOFFPGGMPH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::NNBODOLEAFK
// Il2CppName: NNBODOLEAFK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::NNBODOLEAFK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "NNBODOLEAFK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::AKONOOIDPDA
// Il2CppName: AKONOOIDPDA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::AKONOOIDPDA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "AKONOOIDPDA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::FEJMEGIGEFI
// Il2CppName: FEJMEGIGEFI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::FEJMEGIGEFI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "FEJMEGIGEFI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::PlayGuiSound
// Il2CppName: PlayGuiSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(int, float)>(&MagicalActual::OrbusSoundManager::PlayGuiSound)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* NOGJKMLEEDM = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "PlayGuiSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE, NOGJKMLEEDM});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::startCombat
// Il2CppName: startCombat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::startCombat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "startCombat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::LMIMNBKKLFA
// Il2CppName: LMIMNBKKLFA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(::MagicalActual::OrbusMusicArea*)>(&MagicalActual::OrbusSoundManager::LMIMNBKKLFA)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("MagicalActual", "OrbusMusicArea")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "LMIMNBKKLFA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::JMPPPHNKAFG
// Il2CppName: JMPPPHNKAFG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::JMPPPHNKAFG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "JMPPPHNKAFG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::CGADCLGNBHM
// Il2CppName: CGADCLGNBHM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(int, float)>(&MagicalActual::OrbusSoundManager::CGADCLGNBHM)> {
  static const MethodInfo* get() {
    static auto* FEHDKJKGNCE = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* NOGJKMLEEDM = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "CGADCLGNBHM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FEHDKJKGNCE, NOGJKMLEEDM});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::FFGNCABMAPD
// Il2CppName: FFGNCABMAPD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(float)>(&MagicalActual::OrbusSoundManager::FFGNCABMAPD)> {
  static const MethodInfo* get() {
    static auto* KAFBBPCFKBB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "FFGNCABMAPD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KAFBBPCFKBB});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::EJDOKPAFPKM
// Il2CppName: EJDOKPAFPKM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::EJDOKPAFPKM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "EJDOKPAFPKM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::IFDFPAHLJKN
// Il2CppName: IFDFPAHLJKN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(float)>(&MagicalActual::OrbusSoundManager::IFDFPAHLJKN)> {
  static const MethodInfo* get() {
    static auto* KAFBBPCFKBB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "IFDFPAHLJKN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KAFBBPCFKBB});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::KFHKANBGGIO
// Il2CppName: KFHKANBGGIO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(float)>(&MagicalActual::OrbusSoundManager::KFHKANBGGIO)> {
  static const MethodInfo* get() {
    static auto* KAFBBPCFKBB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "KFHKANBGGIO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KAFBBPCFKBB});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::GOOEGAIHHOB
// Il2CppName: GOOEGAIHHOB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(::MagicalActual::OrbusMusicArea*)>(&MagicalActual::OrbusSoundManager::GOOEGAIHHOB)> {
  static const MethodInfo* get() {
    static auto* KGDKAIEKFAE = &::il2cpp_utils::GetClassFromName("MagicalActual", "OrbusMusicArea")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "GOOEGAIHHOB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KGDKAIEKFAE});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::AECFCFFOCBG
// Il2CppName: AECFCFFOCBG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::OrbusSoundManager* (*)()>(&MagicalActual::OrbusSoundManager::AECFCFFOCBG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "AECFCFFOCBG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::NIGOCBKLOFH
// Il2CppName: NIGOCBKLOFH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::NIGOCBKLOFH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "NIGOCBKLOFH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::NOLCEEHMDNO
// Il2CppName: NOLCEEHMDNO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(::MagicalActual::OrbusMusicArea*)>(&MagicalActual::OrbusSoundManager::NOLCEEHMDNO)> {
  static const MethodInfo* get() {
    static auto* KGDKAIEKFAE = &::il2cpp_utils::GetClassFromName("MagicalActual", "OrbusMusicArea")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "NOLCEEHMDNO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KGDKAIEKFAE});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::FFPFJKIBBPL
// Il2CppName: FFPFJKIBBPL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(float)>(&MagicalActual::OrbusSoundManager::FFPFJKIBBPL)> {
  static const MethodInfo* get() {
    static auto* KAFBBPCFKBB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "FFPFJKIBBPL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KAFBBPCFKBB});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::CHEMMHEMDCB
// Il2CppName: CHEMMHEMDCB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::CHEMMHEMDCB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "CHEMMHEMDCB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::KEGEDNLOCND
// Il2CppName: KEGEDNLOCND
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::OrbusSoundManager* (*)()>(&MagicalActual::OrbusSoundManager::KEGEDNLOCND)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "KEGEDNLOCND", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::NNPHJFNLMOJ
// Il2CppName: NNPHJFNLMOJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::OrbusMusicArea* (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::NNPHJFNLMOJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "NNPHJFNLMOJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::CJEEMIPGJCJ
// Il2CppName: CJEEMIPGJCJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(::StringW, ::UnityEngine::Vector3)>(&MagicalActual::OrbusSoundManager::CJEEMIPGJCJ)> {
  static const MethodInfo* get() {
    static auto* HACLJDHIHML = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* NHFBFBMNPFC = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "CJEEMIPGJCJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HACLJDHIHML, NHFBFBMNPFC});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::NNLIEAPHDOJ
// Il2CppName: NNLIEAPHDOJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::NNLIEAPHDOJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "NNLIEAPHDOJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::AANBDPEJFNI
// Il2CppName: AANBDPEJFNI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(::StringW, ::UnityEngine::Vector3)>(&MagicalActual::OrbusSoundManager::AANBDPEJFNI)> {
  static const MethodInfo* get() {
    static auto* HACLJDHIHML = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* NHFBFBMNPFC = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "AANBDPEJFNI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HACLJDHIHML, NHFBFBMNPFC});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::EMDDOEBNJBI
// Il2CppName: EMDDOEBNJBI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(::StringW, ::UnityEngine::Vector3)>(&MagicalActual::OrbusSoundManager::EMDDOEBNJBI)> {
  static const MethodInfo* get() {
    static auto* HACLJDHIHML = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* NHFBFBMNPFC = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "EMDDOEBNJBI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HACLJDHIHML, NHFBFBMNPFC});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::JDGIHPDNBDH
// Il2CppName: JDGIHPDNBDH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::JDGIHPDNBDH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "JDGIHPDNBDH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::get_activeMusicArea
// Il2CppName: get_activeMusicArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::OrbusMusicArea* (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::get_activeMusicArea)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "get_activeMusicArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::AGPAPFEHHEI
// Il2CppName: AGPAPFEHHEI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::AGPAPFEHHEI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "AGPAPFEHHEI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::LMBHFGONKDA
// Il2CppName: LMBHFGONKDA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(float)>(&MagicalActual::OrbusSoundManager::LMBHFGONKDA)> {
  static const MethodInfo* get() {
    static auto* KAFBBPCFKBB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "LMBHFGONKDA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KAFBBPCFKBB});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::FAMDBIEOJOI
// Il2CppName: FAMDBIEOJOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::FAMDBIEOJOI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "FAMDBIEOJOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::endCombat
// Il2CppName: endCombat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::endCombat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "endCombat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::HFEOMAKIPIB
// Il2CppName: HFEOMAKIPIB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::OrbusMusicArea* (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::HFEOMAKIPIB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "HFEOMAKIPIB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::KDMCLEADFHC
// Il2CppName: KDMCLEADFHC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(float)>(&MagicalActual::OrbusSoundManager::KDMCLEADFHC)> {
  static const MethodInfo* get() {
    static auto* KAFBBPCFKBB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "KDMCLEADFHC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KAFBBPCFKBB});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::LPBBOFIEKKN
// Il2CppName: LPBBOFIEKKN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(::MagicalActual::OrbusMusicArea*)>(&MagicalActual::OrbusSoundManager::LPBBOFIEKKN)> {
  static const MethodInfo* get() {
    static auto* KGDKAIEKFAE = &::il2cpp_utils::GetClassFromName("MagicalActual", "OrbusMusicArea")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "LPBBOFIEKKN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KGDKAIEKFAE});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::GABPHAKOIMA
// Il2CppName: GABPHAKOIMA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(float)>(&MagicalActual::OrbusSoundManager::GABPHAKOIMA)> {
  static const MethodInfo* get() {
    static auto* KAFBBPCFKBB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "GABPHAKOIMA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KAFBBPCFKBB});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::GPFBGGFPINB
// Il2CppName: GPFBGGFPINB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)()>(&MagicalActual::OrbusSoundManager::GPFBGGFPINB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "GPFBGGFPINB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::OrbusSoundManager::PlayFmodEvent
// Il2CppName: PlayFmodEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::OrbusSoundManager::*)(::StringW, ::UnityEngine::Vector3)>(&MagicalActual::OrbusSoundManager::PlayFmodEvent)> {
  static const MethodInfo* get() {
    static auto* HACLJDHIHML = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* NHFBFBMNPFC = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::OrbusSoundManager*), "PlayFmodEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HACLJDHIHML, NHFBFBMNPFC});
  }
};
