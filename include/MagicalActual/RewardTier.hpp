// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Reward
  class Reward;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: RewardTier
  class RewardTier;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::RewardTier);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::RewardTier*, "MagicalActual", "RewardTier");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.RewardTier
  // [TokenAttribute] Offset: FFFFFFFF
  class RewardTier : public ::Il2CppObject {
    public:
    public:
    // public System.Single requirement
    // Size: 0x4
    // Offset: 0x10
    float requirement;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: requirement and: reward
    char __padding0[0x4] = {};
    // public MagicalActual.Reward reward
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::Reward* reward;
    // Field size check
    static_assert(sizeof(::MagicalActual::Reward*) == 0x8);
    // public System.String nameOfRewardTier
    // Size: 0x8
    // Offset: 0x20
    ::StringW nameOfRewardTier;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single progressValue
    // Size: 0x4
    // Offset: 0x28
    float progressValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single requirement
    [[deprecated("Use field access instead!")]] float& dyn_requirement();
    // Get instance field reference: public MagicalActual.Reward reward
    [[deprecated("Use field access instead!")]] ::MagicalActual::Reward*& dyn_reward();
    // Get instance field reference: public System.String nameOfRewardTier
    [[deprecated("Use field access instead!")]] ::StringW& dyn_nameOfRewardTier();
    // Get instance field reference: public System.Single progressValue
    [[deprecated("Use field access instead!")]] float& dyn_progressValue();
    // public System.Void .ctor()
    // Offset: 0x15C03A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RewardTier* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::RewardTier::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RewardTier*, creationType>()));
    }
  }; // MagicalActual.RewardTier
  #pragma pack(pop)
  static check_size<sizeof(RewardTier), 40 + sizeof(float)> __MagicalActual_RewardTierSizeCheck;
  static_assert(sizeof(RewardTier) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::RewardTier::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
