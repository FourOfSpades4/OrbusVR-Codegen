// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: SummonMountEvent
  class SummonMountEvent;
  // Forward declaring type: PlayerCharacter
  class PlayerCharacter;
  // Forward declaring type: PlayerAvatar
  class PlayerAvatar;
  // Forward declaring type: BezierSpline
  class BezierSpline;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: PlayerMount
  class PlayerMount;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::PlayerMount);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::PlayerMount*, "MagicalActual", "PlayerMount");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.PlayerMount
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayerMount : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean adjustToGround
    // Size: 0x1
    // Offset: 0x18
    bool adjustToGround;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: adjustToGround and: StartMountSummon
    char __padding0[0x7] = {};
    // public UnityEngine.Events.UnityEvent StartMountSummon
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Events::UnityEvent* StartMountSummon;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public MagicalActual.SummonMountEvent MountSummonProgress
    // Size: 0x8
    // Offset: 0x28
    ::MagicalActual::SummonMountEvent* MountSummonProgress;
    // Field size check
    static_assert(sizeof(::MagicalActual::SummonMountEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent MountSummoned
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Events::UnityEvent* MountSummoned;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private System.Single AEGLLMECHMP
    // Size: 0x4
    // Offset: 0x38
    float AEGLLMECHMP;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single LDDLELPALNO
    // Size: 0x4
    // Offset: 0x3C
    float LDDLELPALNO;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isGrabbed
    // Size: 0x1
    // Offset: 0x40
    bool isGrabbed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean doSummonAnimation
    // Size: 0x1
    // Offset: 0x41
    bool doSummonAnimation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: doSummonAnimation and: player
    char __padding7[0x6] = {};
    // public MagicalActual.PlayerCharacter player
    // Size: 0x8
    // Offset: 0x48
    ::MagicalActual::PlayerCharacter* player;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerCharacter*) == 0x8);
    // public MagicalActual.PlayerAvatar avatar
    // Size: 0x8
    // Offset: 0x50
    ::MagicalActual::PlayerAvatar* avatar;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerAvatar*) == 0x8);
    // private UnityEngine.Transform HGJEPGIFODM
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* HGJEPGIFODM;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform NFEILHAKLEA
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* NFEILHAKLEA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform EONBAMDIPEJ
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* EONBAMDIPEJ;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform ANMELKBIAHA
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* ANMELKBIAHA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform DMNHBEIHGMA
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Transform* DMNHBEIHGMA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean FBPHOOIBEAE
    // Size: 0x1
    // Offset: 0x80
    bool FBPHOOIBEAE;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: FBPHOOIBEAE and: groundOffset
    char __padding15[0x3] = {};
    // public System.Single groundOffset
    // Size: 0x4
    // Offset: 0x84
    float groundOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean adjustToGround
    [[deprecated("Use field access instead!")]] bool& dyn_adjustToGround();
    // Get instance field reference: public UnityEngine.Events.UnityEvent StartMountSummon
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_StartMountSummon();
    // Get instance field reference: public MagicalActual.SummonMountEvent MountSummonProgress
    [[deprecated("Use field access instead!")]] ::MagicalActual::SummonMountEvent*& dyn_MountSummonProgress();
    // Get instance field reference: public UnityEngine.Events.UnityEvent MountSummoned
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_MountSummoned();
    // Get instance field reference: private System.Single AEGLLMECHMP
    [[deprecated("Use field access instead!")]] float& dyn_AEGLLMECHMP();
    // Get instance field reference: private System.Single LDDLELPALNO
    [[deprecated("Use field access instead!")]] float& dyn_LDDLELPALNO();
    // Get instance field reference: public System.Boolean isGrabbed
    [[deprecated("Use field access instead!")]] bool& dyn_isGrabbed();
    // Get instance field reference: public System.Boolean doSummonAnimation
    [[deprecated("Use field access instead!")]] bool& dyn_doSummonAnimation();
    // Get instance field reference: public MagicalActual.PlayerCharacter player
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerCharacter*& dyn_player();
    // Get instance field reference: public MagicalActual.PlayerAvatar avatar
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerAvatar*& dyn_avatar();
    // Get instance field reference: private UnityEngine.Transform HGJEPGIFODM
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_HGJEPGIFODM();
    // Get instance field reference: private UnityEngine.Transform NFEILHAKLEA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_NFEILHAKLEA();
    // Get instance field reference: private UnityEngine.Transform EONBAMDIPEJ
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_EONBAMDIPEJ();
    // Get instance field reference: private UnityEngine.Transform ANMELKBIAHA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_ANMELKBIAHA();
    // Get instance field reference: private UnityEngine.Transform DMNHBEIHGMA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_DMNHBEIHGMA();
    // Get instance field reference: private System.Boolean FBPHOOIBEAE
    [[deprecated("Use field access instead!")]] bool& dyn_FBPHOOIBEAE();
    // Get instance field reference: public System.Single groundOffset
    [[deprecated("Use field access instead!")]] float& dyn_groundOffset();
    // public System.Void IHKKGCHILDO(MagicalActual.BezierSpline EOOPEHBAJCL)
    // Offset: 0x11ABAC0
    void IHKKGCHILDO(::MagicalActual::BezierSpline* EOOPEHBAJCL);
    // private System.Void LateUpdate()
    // Offset: 0x11ABAF0
    void LateUpdate();
    // private System.Void NGNBHBMIGHO()
    // Offset: 0x11AC310
    void NGNBHBMIGHO();
    // private System.Void MIMNADHOKEE()
    // Offset: 0x11ACB80
    void MIMNADHOKEE();
    // private System.Void GECHLDPLPCC()
    // Offset: 0x11AD3EC
    void GECHLDPLPCC();
    // public System.Void SetIsAnimating(System.Boolean LMPIIAPPFNN)
    // Offset: 0x11AD5F8
    void SetIsAnimating(bool LMPIIAPPFNN);
    // public System.Void LEBNPGOONDI(MagicalActual.BezierSpline EOOPEHBAJCL)
    // Offset: 0x11AD604
    void LEBNPGOONDI(::MagicalActual::BezierSpline* EOOPEHBAJCL);
    // private System.Void HKINNMLBMMG()
    // Offset: 0x11AD808
    void HKINNMLBMMG();
    // public System.Void LevelOutMount(System.Single FFNMEJOKJID)
    // Offset: 0x11ADA14
    void LevelOutMount(float FFNMEJOKJID);
    // public System.Void SetSplinePositionAndRotation(MagicalActual.BezierSpline EOOPEHBAJCL)
    // Offset: 0x11ADB48
    void SetSplinePositionAndRotation(::MagicalActual::BezierSpline* EOOPEHBAJCL);
    // private System.Void BKBJHBFNLKE()
    // Offset: 0x11ADD40
    void BKBJHBFNLKE();
    // public System.Void EICGGDKCBFK(MagicalActual.BezierSpline EOOPEHBAJCL)
    // Offset: 0x11AE5AC
    void EICGGDKCBFK(::MagicalActual::BezierSpline* EOOPEHBAJCL);
    // public System.Void KKLJOCIGHGM(MagicalActual.BezierSpline EOOPEHBAJCL)
    // Offset: 0x11AE7B4
    void KKLJOCIGHGM(::MagicalActual::BezierSpline* EOOPEHBAJCL);
    // private System.Void DPIDPEOHMLG()
    // Offset: 0x11AE9BC
    void DPIDPEOHMLG();
    // public System.Void .ctor()
    // Offset: 0x11AF228
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerMount* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::PlayerMount::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerMount*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x11AF248
    void Start();
    // public System.Void MCEKLBDAGCG(MagicalActual.BezierSpline EOOPEHBAJCL)
    // Offset: 0x11AF448
    void MCEKLBDAGCG(::MagicalActual::BezierSpline* EOOPEHBAJCL);
    // private System.Void ACBBDGEGFIJ()
    // Offset: 0x11AF650
    void ACBBDGEGFIJ();
    // private System.Void ADCDIAGAGAK()
    // Offset: 0x11AFEB8
    void ADCDIAGAGAK();
    // private System.Void KBDGAPMJGLG()
    // Offset: 0x11B0724
    void KBDGAPMJGLG();
    // public System.Void SetPlayerFeetAsTargetEndPoint(MagicalActual.BezierSpline EOOPEHBAJCL)
    // Offset: 0x11B0930
    void SetPlayerFeetAsTargetEndPoint(::MagicalActual::BezierSpline* EOOPEHBAJCL);
    // public System.Void NDADBFNGKJD(MagicalActual.BezierSpline EOOPEHBAJCL)
    // Offset: 0x11B0960
    void NDADBFNGKJD(::MagicalActual::BezierSpline* EOOPEHBAJCL);
    // public System.Void BPJHBICMGMD(MagicalActual.BezierSpline EOOPEHBAJCL)
    // Offset: 0x11B0990
    void BPJHBICMGMD(::MagicalActual::BezierSpline* EOOPEHBAJCL);
    // private System.Void FNGLOIECKDG()
    // Offset: 0x11B09C0
    void FNGLOIECKDG();
    // public System.Void OJLLOCIBHHL(MagicalActual.BezierSpline EOOPEHBAJCL)
    // Offset: 0x11B0BCC
    void OJLLOCIBHHL(::MagicalActual::BezierSpline* EOOPEHBAJCL);
    // public System.Void AKDPMCKFCPI(System.Single FFNMEJOKJID)
    // Offset: 0x11B0DD4
    void AKDPMCKFCPI(float FFNMEJOKJID);
    // public System.Void JMADNKLHNFL(MagicalActual.BezierSpline EOOPEHBAJCL)
    // Offset: 0x11B0F10
    void JMADNKLHNFL(::MagicalActual::BezierSpline* EOOPEHBAJCL);
    // public System.Void BPHPFNBNLDJ(System.Single FFNMEJOKJID)
    // Offset: 0x11B0F40
    void BPHPFNBNLDJ(float FFNMEJOKJID);
    // public System.Void ANEMPNJCLKM(System.Boolean LMPIIAPPFNN)
    // Offset: 0x11B107C
    void ANEMPNJCLKM(bool LMPIIAPPFNN);
  }; // MagicalActual.PlayerMount
  #pragma pack(pop)
  static check_size<sizeof(PlayerMount), 132 + sizeof(float)> __MagicalActual_PlayerMountSizeCheck;
  static_assert(sizeof(PlayerMount) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::PlayerMount::IHKKGCHILDO
// Il2CppName: IHKKGCHILDO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(::MagicalActual::BezierSpline*)>(&MagicalActual::PlayerMount::IHKKGCHILDO)> {
  static const MethodInfo* get() {
    static auto* EOOPEHBAJCL = &::il2cpp_utils::GetClassFromName("MagicalActual", "BezierSpline")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "IHKKGCHILDO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{EOOPEHBAJCL});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)()>(&MagicalActual::PlayerMount::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::NGNBHBMIGHO
// Il2CppName: NGNBHBMIGHO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)()>(&MagicalActual::PlayerMount::NGNBHBMIGHO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "NGNBHBMIGHO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::MIMNADHOKEE
// Il2CppName: MIMNADHOKEE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)()>(&MagicalActual::PlayerMount::MIMNADHOKEE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "MIMNADHOKEE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::GECHLDPLPCC
// Il2CppName: GECHLDPLPCC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)()>(&MagicalActual::PlayerMount::GECHLDPLPCC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "GECHLDPLPCC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::SetIsAnimating
// Il2CppName: SetIsAnimating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(bool)>(&MagicalActual::PlayerMount::SetIsAnimating)> {
  static const MethodInfo* get() {
    static auto* LMPIIAPPFNN = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "SetIsAnimating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{LMPIIAPPFNN});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::LEBNPGOONDI
// Il2CppName: LEBNPGOONDI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(::MagicalActual::BezierSpline*)>(&MagicalActual::PlayerMount::LEBNPGOONDI)> {
  static const MethodInfo* get() {
    static auto* EOOPEHBAJCL = &::il2cpp_utils::GetClassFromName("MagicalActual", "BezierSpline")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "LEBNPGOONDI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{EOOPEHBAJCL});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::HKINNMLBMMG
// Il2CppName: HKINNMLBMMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)()>(&MagicalActual::PlayerMount::HKINNMLBMMG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "HKINNMLBMMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::LevelOutMount
// Il2CppName: LevelOutMount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(float)>(&MagicalActual::PlayerMount::LevelOutMount)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "LevelOutMount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::SetSplinePositionAndRotation
// Il2CppName: SetSplinePositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(::MagicalActual::BezierSpline*)>(&MagicalActual::PlayerMount::SetSplinePositionAndRotation)> {
  static const MethodInfo* get() {
    static auto* EOOPEHBAJCL = &::il2cpp_utils::GetClassFromName("MagicalActual", "BezierSpline")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "SetSplinePositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{EOOPEHBAJCL});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::BKBJHBFNLKE
// Il2CppName: BKBJHBFNLKE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)()>(&MagicalActual::PlayerMount::BKBJHBFNLKE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "BKBJHBFNLKE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::EICGGDKCBFK
// Il2CppName: EICGGDKCBFK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(::MagicalActual::BezierSpline*)>(&MagicalActual::PlayerMount::EICGGDKCBFK)> {
  static const MethodInfo* get() {
    static auto* EOOPEHBAJCL = &::il2cpp_utils::GetClassFromName("MagicalActual", "BezierSpline")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "EICGGDKCBFK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{EOOPEHBAJCL});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::KKLJOCIGHGM
// Il2CppName: KKLJOCIGHGM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(::MagicalActual::BezierSpline*)>(&MagicalActual::PlayerMount::KKLJOCIGHGM)> {
  static const MethodInfo* get() {
    static auto* EOOPEHBAJCL = &::il2cpp_utils::GetClassFromName("MagicalActual", "BezierSpline")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "KKLJOCIGHGM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{EOOPEHBAJCL});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::DPIDPEOHMLG
// Il2CppName: DPIDPEOHMLG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)()>(&MagicalActual::PlayerMount::DPIDPEOHMLG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "DPIDPEOHMLG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::PlayerMount::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)()>(&MagicalActual::PlayerMount::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::MCEKLBDAGCG
// Il2CppName: MCEKLBDAGCG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(::MagicalActual::BezierSpline*)>(&MagicalActual::PlayerMount::MCEKLBDAGCG)> {
  static const MethodInfo* get() {
    static auto* EOOPEHBAJCL = &::il2cpp_utils::GetClassFromName("MagicalActual", "BezierSpline")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "MCEKLBDAGCG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{EOOPEHBAJCL});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::ACBBDGEGFIJ
// Il2CppName: ACBBDGEGFIJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)()>(&MagicalActual::PlayerMount::ACBBDGEGFIJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "ACBBDGEGFIJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::ADCDIAGAGAK
// Il2CppName: ADCDIAGAGAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)()>(&MagicalActual::PlayerMount::ADCDIAGAGAK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "ADCDIAGAGAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::KBDGAPMJGLG
// Il2CppName: KBDGAPMJGLG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)()>(&MagicalActual::PlayerMount::KBDGAPMJGLG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "KBDGAPMJGLG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::SetPlayerFeetAsTargetEndPoint
// Il2CppName: SetPlayerFeetAsTargetEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(::MagicalActual::BezierSpline*)>(&MagicalActual::PlayerMount::SetPlayerFeetAsTargetEndPoint)> {
  static const MethodInfo* get() {
    static auto* EOOPEHBAJCL = &::il2cpp_utils::GetClassFromName("MagicalActual", "BezierSpline")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "SetPlayerFeetAsTargetEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{EOOPEHBAJCL});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::NDADBFNGKJD
// Il2CppName: NDADBFNGKJD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(::MagicalActual::BezierSpline*)>(&MagicalActual::PlayerMount::NDADBFNGKJD)> {
  static const MethodInfo* get() {
    static auto* EOOPEHBAJCL = &::il2cpp_utils::GetClassFromName("MagicalActual", "BezierSpline")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "NDADBFNGKJD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{EOOPEHBAJCL});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::BPJHBICMGMD
// Il2CppName: BPJHBICMGMD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(::MagicalActual::BezierSpline*)>(&MagicalActual::PlayerMount::BPJHBICMGMD)> {
  static const MethodInfo* get() {
    static auto* EOOPEHBAJCL = &::il2cpp_utils::GetClassFromName("MagicalActual", "BezierSpline")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "BPJHBICMGMD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{EOOPEHBAJCL});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::FNGLOIECKDG
// Il2CppName: FNGLOIECKDG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)()>(&MagicalActual::PlayerMount::FNGLOIECKDG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "FNGLOIECKDG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::OJLLOCIBHHL
// Il2CppName: OJLLOCIBHHL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(::MagicalActual::BezierSpline*)>(&MagicalActual::PlayerMount::OJLLOCIBHHL)> {
  static const MethodInfo* get() {
    static auto* EOOPEHBAJCL = &::il2cpp_utils::GetClassFromName("MagicalActual", "BezierSpline")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "OJLLOCIBHHL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{EOOPEHBAJCL});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::AKDPMCKFCPI
// Il2CppName: AKDPMCKFCPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(float)>(&MagicalActual::PlayerMount::AKDPMCKFCPI)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "AKDPMCKFCPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::JMADNKLHNFL
// Il2CppName: JMADNKLHNFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(::MagicalActual::BezierSpline*)>(&MagicalActual::PlayerMount::JMADNKLHNFL)> {
  static const MethodInfo* get() {
    static auto* EOOPEHBAJCL = &::il2cpp_utils::GetClassFromName("MagicalActual", "BezierSpline")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "JMADNKLHNFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{EOOPEHBAJCL});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::BPHPFNBNLDJ
// Il2CppName: BPHPFNBNLDJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(float)>(&MagicalActual::PlayerMount::BPHPFNBNLDJ)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "BPHPFNBNLDJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerMount::ANEMPNJCLKM
// Il2CppName: ANEMPNJCLKM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerMount::*)(bool)>(&MagicalActual::PlayerMount::ANEMPNJCLKM)> {
  static const MethodInfo* get() {
    static auto* LMPIIAPPFNN = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerMount*), "ANEMPNJCLKM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{LMPIIAPPFNN});
  }
};
