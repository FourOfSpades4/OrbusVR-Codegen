// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Video
namespace UnityEngine::Video {
  // Forward declaring type: VideoClip
  class VideoClip;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: CinematicManager
  class CinematicManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::CinematicManager);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::CinematicManager*, "MagicalActual", "CinematicManager");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.CinematicManager
  // [TokenAttribute] Offset: FFFFFFFF
  class CinematicManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Video.VideoClip[] clips
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Video::VideoClip*> clips;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Video::VideoClip*>) == 0x8);
    // public UnityEngine.GameObject[] overlays
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::GameObject*> overlays;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.Camera myCamera
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Camera* myCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private System.Action IPLFAMAFDNM
    // Size: 0x8
    // Offset: 0x30
    ::System::Action* IPLFAMAFDNM;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Boolean OFPHJBOEGHO
    // Size: 0x1
    // Offset: 0x38
    bool OFPHJBOEGHO;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Video.VideoClip[] clips
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Video::VideoClip*>& dyn_clips();
    // Get instance field reference: public UnityEngine.GameObject[] overlays
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_overlays();
    // Get instance field reference: public UnityEngine.Camera myCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_myCamera();
    // Get instance field reference: private System.Action IPLFAMAFDNM
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_IPLFAMAFDNM();
    // Get instance field reference: private System.Boolean OFPHJBOEGHO
    [[deprecated("Use field access instead!")]] bool& dyn_OFPHJBOEGHO();
    // private System.Void NLOFBPNEFKD()
    // Offset: 0x1AE0B74
    void NLOFBPNEFKD();
    // private System.Void Start()
    // Offset: 0x1AE0B78
    void Start();
    // private System.Void CKGJBGBMIPN()
    // Offset: 0x1AE0B7C
    void CKGJBGBMIPN();
    // private System.Void HCBKMHLGFAJ()
    // Offset: 0x1AE0CBC
    void HCBKMHLGFAJ();
    // private System.Void IAMHAELCKHH()
    // Offset: 0x1AE0E20
    void IAMHAELCKHH();
    // public System.Void PlayVideo(System.Int32 GBHMFJAKAIK, System.Action OOMLAOPBDDP)
    // Offset: 0x1AE0E24
    void PlayVideo(int GBHMFJAKAIK, ::System::Action* OOMLAOPBDDP);
    // public System.Void ADAIGPJJGDN(System.Int32 GBHMFJAKAIK, System.Action OOMLAOPBDDP)
    // Offset: 0x1AE14B4
    void ADAIGPJJGDN(int GBHMFJAKAIK, ::System::Action* OOMLAOPBDDP);
    // private System.Void Awake()
    // Offset: 0x1AE1B40
    void Awake();
    // private System.Void IDOCJGNLNFL()
    // Offset: 0x1AE1B44
    void IDOCJGNLNFL();
    // public System.Void OPLKFNOPGNP(System.Int32 GBHMFJAKAIK, System.Action OOMLAOPBDDP)
    // Offset: 0x1AE1B48
    void OPLKFNOPGNP(int GBHMFJAKAIK, ::System::Action* OOMLAOPBDDP);
    // private System.Void KBHNOAKAOMB()
    // Offset: 0x1AE21DC
    void KBHNOAKAOMB();
    // private System.Void DPIAPBMDOKJ()
    // Offset: 0x1AE231C
    void DPIAPBMDOKJ();
    // private System.Void NNDKJCJFIAK()
    // Offset: 0x1AE245C
    void NNDKJCJFIAK();
    // private System.Void MFCLLPMEDDO()
    // Offset: 0x1AE2460
    void MFCLLPMEDDO();
    // private System.Void JENOIOBAEPG()
    // Offset: 0x1AE25C4
    void JENOIOBAEPG();
    // public System.Void NotifyOfMenuButtonPress()
    // Offset: 0x1AE25C8
    void NotifyOfMenuButtonPress();
    // public System.Void MACDGAKJJAH(System.Int32 GBHMFJAKAIK, System.Action OOMLAOPBDDP)
    // Offset: 0x1AE25D8
    void MACDGAKJJAH(int GBHMFJAKAIK, ::System::Action* OOMLAOPBDDP);
    // private System.Void CBMDGNKFPIO()
    // Offset: 0x1AE2C3C
    void CBMDGNKFPIO();
    // private System.Void HKINNMLBMMG()
    // Offset: 0x1AE2C40
    void HKINNMLBMMG();
    // public System.Void OMJEIJNHAPH()
    // Offset: 0x1AE2C44
    void OMJEIJNHAPH();
    // private System.Void JDJILFHNOGP()
    // Offset: 0x1AE2C54
    void JDJILFHNOGP();
    // public System.Void PKPJFAPEJOI()
    // Offset: 0x1AE2C58
    void PKPJFAPEJOI();
    // public System.Void .ctor()
    // Offset: 0x1AE2DCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinematicManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::CinematicManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinematicManager*, creationType>()));
    }
    // private System.Void DJIGIJKOPDC()
    // Offset: 0x1AE2DD4
    void DJIGIJKOPDC();
    // public System.Void ECEGDEMCMBD()
    // Offset: 0x1AE2DD8
    void ECEGDEMCMBD();
    // private System.Void CCJCEMELLFF()
    // Offset: 0x1AE2C68
    void CCJCEMELLFF();
  }; // MagicalActual.CinematicManager
  #pragma pack(pop)
  static check_size<sizeof(CinematicManager), 56 + sizeof(bool)> __MagicalActual_CinematicManagerSizeCheck;
  static_assert(sizeof(CinematicManager) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::CinematicManager::NLOFBPNEFKD
// Il2CppName: NLOFBPNEFKD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::NLOFBPNEFKD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "NLOFBPNEFKD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::CKGJBGBMIPN
// Il2CppName: CKGJBGBMIPN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::CKGJBGBMIPN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "CKGJBGBMIPN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::HCBKMHLGFAJ
// Il2CppName: HCBKMHLGFAJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::HCBKMHLGFAJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "HCBKMHLGFAJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::IAMHAELCKHH
// Il2CppName: IAMHAELCKHH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::IAMHAELCKHH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "IAMHAELCKHH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::PlayVideo
// Il2CppName: PlayVideo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)(int, ::System::Action*)>(&MagicalActual::CinematicManager::PlayVideo)> {
  static const MethodInfo* get() {
    static auto* GBHMFJAKAIK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* OOMLAOPBDDP = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "PlayVideo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GBHMFJAKAIK, OOMLAOPBDDP});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::ADAIGPJJGDN
// Il2CppName: ADAIGPJJGDN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)(int, ::System::Action*)>(&MagicalActual::CinematicManager::ADAIGPJJGDN)> {
  static const MethodInfo* get() {
    static auto* GBHMFJAKAIK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* OOMLAOPBDDP = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "ADAIGPJJGDN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GBHMFJAKAIK, OOMLAOPBDDP});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::IDOCJGNLNFL
// Il2CppName: IDOCJGNLNFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::IDOCJGNLNFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "IDOCJGNLNFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::OPLKFNOPGNP
// Il2CppName: OPLKFNOPGNP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)(int, ::System::Action*)>(&MagicalActual::CinematicManager::OPLKFNOPGNP)> {
  static const MethodInfo* get() {
    static auto* GBHMFJAKAIK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* OOMLAOPBDDP = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "OPLKFNOPGNP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GBHMFJAKAIK, OOMLAOPBDDP});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::KBHNOAKAOMB
// Il2CppName: KBHNOAKAOMB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::KBHNOAKAOMB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "KBHNOAKAOMB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::DPIAPBMDOKJ
// Il2CppName: DPIAPBMDOKJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::DPIAPBMDOKJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "DPIAPBMDOKJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::NNDKJCJFIAK
// Il2CppName: NNDKJCJFIAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::NNDKJCJFIAK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "NNDKJCJFIAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::MFCLLPMEDDO
// Il2CppName: MFCLLPMEDDO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::MFCLLPMEDDO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "MFCLLPMEDDO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::JENOIOBAEPG
// Il2CppName: JENOIOBAEPG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::JENOIOBAEPG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "JENOIOBAEPG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::NotifyOfMenuButtonPress
// Il2CppName: NotifyOfMenuButtonPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::NotifyOfMenuButtonPress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "NotifyOfMenuButtonPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::MACDGAKJJAH
// Il2CppName: MACDGAKJJAH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)(int, ::System::Action*)>(&MagicalActual::CinematicManager::MACDGAKJJAH)> {
  static const MethodInfo* get() {
    static auto* GBHMFJAKAIK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* OOMLAOPBDDP = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "MACDGAKJJAH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GBHMFJAKAIK, OOMLAOPBDDP});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::CBMDGNKFPIO
// Il2CppName: CBMDGNKFPIO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::CBMDGNKFPIO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "CBMDGNKFPIO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::HKINNMLBMMG
// Il2CppName: HKINNMLBMMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::HKINNMLBMMG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "HKINNMLBMMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::OMJEIJNHAPH
// Il2CppName: OMJEIJNHAPH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::OMJEIJNHAPH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "OMJEIJNHAPH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::JDJILFHNOGP
// Il2CppName: JDJILFHNOGP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::JDJILFHNOGP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "JDJILFHNOGP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::PKPJFAPEJOI
// Il2CppName: PKPJFAPEJOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::PKPJFAPEJOI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "PKPJFAPEJOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::CinematicManager::DJIGIJKOPDC
// Il2CppName: DJIGIJKOPDC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::DJIGIJKOPDC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "DJIGIJKOPDC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::ECEGDEMCMBD
// Il2CppName: ECEGDEMCMBD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::ECEGDEMCMBD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "ECEGDEMCMBD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CinematicManager::CCJCEMELLFF
// Il2CppName: CCJCEMELLFF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CinematicManager::*)()>(&MagicalActual::CinematicManager::CCJCEMELLFF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CinematicManager*), "CCJCEMELLFF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
