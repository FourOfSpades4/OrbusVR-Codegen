// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: CodeStage.AntiCheat.ObscuredTypes.ObFlt
#include "CodeStage/AntiCheat/ObscuredTypes/ObFlt.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: SphereCollider
  class SphereCollider;
  // Forward declaring type: LineRenderer
  class LineRenderer;
}
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: FisherReel
  class FisherReel;
  // Forward declaring type: FishingRod
  class FishingRod;
  // Forward declaring type: PlayerCharacter
  class PlayerCharacter;
  // Forward declaring type: PlayerAvatar
  class PlayerAvatar;
  // Forward declaring type: FishingLure
  class FishingLure;
  // Forward declaring type: Catenary
  class Catenary;
  // Forward declaring type: NetEntity
  class NetEntity;
  // Forward declaring type: Grabber
  class Grabber;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OrbusTrackedController
  class OrbusTrackedController;
  // Forward declaring type: LTDescr
  class LTDescr;
  // Forward declaring type: SuperTextMesh
  class SuperTextMesh;
  // Forward declaring type: ClickedEventHandler
  class ClickedEventHandler;
  // Forward declaring type: ClickedEventArgs
  struct ClickedEventArgs;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: BinaryWriter
  class BinaryWriter;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Fisher
  class Fisher;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::Fisher);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::Fisher*, "MagicalActual", "Fisher");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x208
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.Fisher
  // [TokenAttribute] Offset: FFFFFFFF
  class Fisher : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::MagicalActual::Fisher::FishingPoleState
    struct FishingPoleState;
    // Nested type: ::MagicalActual::Fisher::$WaitForEquimentUpdate$d__83
    class $WaitForEquimentUpdate$d__83;
    // Nested type: ::MagicalActual::Fisher::$$c__DisplayClass93_0
    class $$c__DisplayClass93_0;
    // Nested type: ::MagicalActual::Fisher::$$c
    class $$c;
    // Nested type: ::MagicalActual::Fisher::$$c__DisplayClass106_0
    class $$c__DisplayClass106_0;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MagicalActual.Fisher/FishingPoleState
    // [TokenAttribute] Offset: FFFFFFFF
    struct FishingPoleState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: FishingPoleState
      constexpr FishingPoleState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MagicalActual.Fisher/FishingPoleState FNCIFCNLJBM
      static constexpr const int FNCIFCNLJBM = 0;
      // Get static field: static public MagicalActual.Fisher/FishingPoleState FNCIFCNLJBM
      static ::MagicalActual::Fisher::FishingPoleState _get_FNCIFCNLJBM();
      // Set static field: static public MagicalActual.Fisher/FishingPoleState FNCIFCNLJBM
      static void _set_FNCIFCNLJBM(::MagicalActual::Fisher::FishingPoleState value);
      // static field const value: static public MagicalActual.Fisher/FishingPoleState ALCNEPGOEOA
      static constexpr const int ALCNEPGOEOA = 1;
      // Get static field: static public MagicalActual.Fisher/FishingPoleState ALCNEPGOEOA
      static ::MagicalActual::Fisher::FishingPoleState _get_ALCNEPGOEOA();
      // Set static field: static public MagicalActual.Fisher/FishingPoleState ALCNEPGOEOA
      static void _set_ALCNEPGOEOA(::MagicalActual::Fisher::FishingPoleState value);
      // static field const value: static public MagicalActual.Fisher/FishingPoleState CFNALLKJIAO
      static constexpr const int CFNALLKJIAO = 2;
      // Get static field: static public MagicalActual.Fisher/FishingPoleState CFNALLKJIAO
      static ::MagicalActual::Fisher::FishingPoleState _get_CFNALLKJIAO();
      // Set static field: static public MagicalActual.Fisher/FishingPoleState CFNALLKJIAO
      static void _set_CFNALLKJIAO(::MagicalActual::Fisher::FishingPoleState value);
      // static field const value: static public MagicalActual.Fisher/FishingPoleState LBEPIFGAANM
      static constexpr const int LBEPIFGAANM = 4;
      // Get static field: static public MagicalActual.Fisher/FishingPoleState LBEPIFGAANM
      static ::MagicalActual::Fisher::FishingPoleState _get_LBEPIFGAANM();
      // Set static field: static public MagicalActual.Fisher/FishingPoleState LBEPIFGAANM
      static void _set_LBEPIFGAANM(::MagicalActual::Fisher::FishingPoleState value);
      // static field const value: static public MagicalActual.Fisher/FishingPoleState OIIANPCAKGD
      static constexpr const int OIIANPCAKGD = 8;
      // Get static field: static public MagicalActual.Fisher/FishingPoleState OIIANPCAKGD
      static ::MagicalActual::Fisher::FishingPoleState _get_OIIANPCAKGD();
      // Set static field: static public MagicalActual.Fisher/FishingPoleState OIIANPCAKGD
      static void _set_OIIANPCAKGD(::MagicalActual::Fisher::FishingPoleState value);
      // static field const value: static public MagicalActual.Fisher/FishingPoleState HAFHPFKBAIJ
      static constexpr const int HAFHPFKBAIJ = 16;
      // Get static field: static public MagicalActual.Fisher/FishingPoleState HAFHPFKBAIJ
      static ::MagicalActual::Fisher::FishingPoleState _get_HAFHPFKBAIJ();
      // Set static field: static public MagicalActual.Fisher/FishingPoleState HAFHPFKBAIJ
      static void _set_HAFHPFKBAIJ(::MagicalActual::Fisher::FishingPoleState value);
      // static field const value: static public MagicalActual.Fisher/FishingPoleState IOBMAJKPGJG
      static constexpr const int IOBMAJKPGJG = 32;
      // Get static field: static public MagicalActual.Fisher/FishingPoleState IOBMAJKPGJG
      static ::MagicalActual::Fisher::FishingPoleState _get_IOBMAJKPGJG();
      // Set static field: static public MagicalActual.Fisher/FishingPoleState IOBMAJKPGJG
      static void _set_IOBMAJKPGJG(::MagicalActual::Fisher::FishingPoleState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // MagicalActual.Fisher/FishingPoleState
    #pragma pack(pop)
    static check_size<sizeof(Fisher::FishingPoleState), 0 + sizeof(int)> __MagicalActual_Fisher_FishingPoleStateSizeCheck;
    static_assert(sizeof(Fisher::FishingPoleState) == 0x4);
    public:
    // public MagicalActual.Fisher/FishingPoleState currentState
    // Size: 0x4
    // Offset: 0x18
    ::MagicalActual::Fisher::FishingPoleState currentState;
    // Field size check
    static_assert(sizeof(::MagicalActual::Fisher::FishingPoleState) == 0x4);
    // Padding between fields: currentState and: fishingPole
    char __padding0[0x4] = {};
    // public UnityEngine.GameObject fishingPole
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* fishingPole;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject fishingLurePrefab
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* fishingLurePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private MagicalActual.FisherReel MHEMPMANJGK
    // Size: 0x8
    // Offset: 0x30
    ::MagicalActual::FisherReel* MHEMPMANJGK;
    // Field size check
    static_assert(sizeof(::MagicalActual::FisherReel*) == 0x8);
    // private MagicalActual.FishingRod LMDOLLFMAEG
    // Size: 0x8
    // Offset: 0x38
    ::MagicalActual::FishingRod* LMDOLLFMAEG;
    // Field size check
    static_assert(sizeof(::MagicalActual::FishingRod*) == 0x8);
    // private MagicalActual.PlayerCharacter HCFELEODBLD
    // Size: 0x8
    // Offset: 0x40
    ::MagicalActual::PlayerCharacter* HCFELEODBLD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerCharacter*) == 0x8);
    // private MagicalActual.PlayerAvatar EENJNFDNJBD
    // Size: 0x8
    // Offset: 0x48
    ::MagicalActual::PlayerAvatar* EENJNFDNJBD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerAvatar*) == 0x8);
    // private OrbusTrackedController DFCJLOAJNBF
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::OrbusTrackedController* DFCJLOAJNBF;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OrbusTrackedController*) == 0x8);
    // public UnityEngine.GameObject vfxBobberSplash
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* vfxBobberSplash;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject poleTip
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* poleTip;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject bobberPrefab
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* bobberPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Material lineRendererMaterial
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Material* lineRendererMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public MagicalActual.FishingLure myLure
    // Size: 0x8
    // Offset: 0x78
    ::MagicalActual::FishingLure* myLure;
    // Field size check
    static_assert(sizeof(::MagicalActual::FishingLure*) == 0x8);
    // private System.Boolean HIKIBDCNDAA
    // Size: 0x1
    // Offset: 0x80
    bool HIKIBDCNDAA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean IMNDEEOEOKA
    // Size: 0x1
    // Offset: 0x81
    bool IMNDEEOEOKA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IMNDEEOEOKA and: currentBobber
    char __padding14[0x6] = {};
    // public UnityEngine.GameObject currentBobber
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::GameObject* currentBobber;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject bobberHook
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::GameObject* bobberHook;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.SphereCollider DKAKFGLNMJO
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::SphereCollider* DKAKFGLNMJO;
    // Field size check
    static_assert(sizeof(::UnityEngine::SphereCollider*) == 0x8);
    // private System.UInt16 FHNLNPJECIJ
    // Size: 0x2
    // Offset: 0xA0
    uint16_t FHNLNPJECIJ;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: FHNLNPJECIJ and: BLBCOEFNBGC
    char __padding18[0x2] = {};
    // private System.Int32 BLBCOEFNBGC
    // Size: 0x4
    // Offset: 0xA4
    int BLBCOEFNBGC;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single AHHJNJGIBHO
    // Size: 0x4
    // Offset: 0xA8
    float AHHJNJGIBHO;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single DMJHMPDIOMG
    // Size: 0x4
    // Offset: 0xAC
    float DMJHMPDIOMG;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single MDBFGANEIMG
    // Size: 0x4
    // Offset: 0xB0
    float MDBFGANEIMG;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single HHMKAJMMBIA
    // Size: 0x4
    // Offset: 0xB4
    float HHMKAJMMBIA;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 DFECNPDIIIF
    // Size: 0xC
    // Offset: 0xB8
    ::UnityEngine::Vector3 DFECNPDIIIF;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single FEJJMKDFFMB
    // Size: 0x4
    // Offset: 0xC4
    float FEJJMKDFFMB;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single ODBIGPONDOI
    // Size: 0x4
    // Offset: 0xC8
    float ODBIGPONDOI;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single DPMOBAHKICI
    // Size: 0x4
    // Offset: 0xCC
    float DPMOBAHKICI;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single HIOPPBIDJKI
    // Size: 0x4
    // Offset: 0xD0
    float HIOPPBIDJKI;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single OBNFFGGOPKL
    // Size: 0x4
    // Offset: 0xD4
    float OBNFFGGOPKL;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt HFOEIFGCKLH
    // Size: 0x19
    // Offset: 0xD8
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt HFOEIFGCKLH;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: HFOEIFGCKLH and: CGGGOGJLHBI
    char __padding30[0x7] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt CGGGOGJLHBI
    // Size: 0x19
    // Offset: 0xF8
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt CGGGOGJLHBI;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: CGGGOGJLHBI and: NFGMKIOJBKC
    char __padding31[0x7] = {};
    // private System.Boolean NFGMKIOJBKC
    // Size: 0x1
    // Offset: 0x118
    bool NFGMKIOJBKC;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: NFGMKIOJBKC and: EFHINJKJIOK
    char __padding32[0x3] = {};
    // private System.Single EFHINJKJIOK
    // Size: 0x4
    // Offset: 0x11C
    float EFHINJKJIOK;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single MOABAHBDHKD
    // Size: 0x4
    // Offset: 0x120
    float MOABAHBDHKD;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: MOABAHBDHKD and: KKGJPMDJOMJ
    char __padding34[0x4] = {};
    // private UnityEngine.Vector3[] KKGJPMDJOMJ
    // Size: 0x8
    // Offset: 0x128
    ::ArrayW<::UnityEngine::Vector3> KKGJPMDJOMJ;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.LineRenderer ADMMPKAAILI
    // Size: 0x8
    // Offset: 0x130
    ::UnityEngine::LineRenderer* ADMMPKAAILI;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // public UnityEngine.GameObject teleportLineHolder
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::GameObject* teleportLineHolder;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private MagicalActual.Catenary GKAGLCILGBD
    // Size: 0x8
    // Offset: 0x140
    ::MagicalActual::Catenary* GKAGLCILGBD;
    // Field size check
    static_assert(sizeof(::MagicalActual::Catenary*) == 0x8);
    // private System.Single EGOGPGKIELK
    // Size: 0x4
    // Offset: 0x148
    float EGOGPGKIELK;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single MEKAJJADOCO
    // Size: 0x4
    // Offset: 0x14C
    float MEKAJJADOCO;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single ADHBAFBEBHF
    // Size: 0x4
    // Offset: 0x150
    float ADHBAFBEBHF;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 CFMENBDECDM
    // Size: 0xC
    // Offset: 0x154
    ::UnityEngine::Vector3 CFMENBDECDM;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 PCHEPFCPKJF
    // Size: 0xC
    // Offset: 0x160
    ::UnityEngine::Vector3 PCHEPFCPKJF;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single MGPPKAPDKMI
    // Size: 0x4
    // Offset: 0x16C
    float MGPPKAPDKMI;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single HIGCJMLLCNC
    // Size: 0x4
    // Offset: 0x170
    float HIGCJMLLCNC;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single KHIAEEEGBEH
    // Size: 0x4
    // Offset: 0x174
    float KHIAEEEGBEH;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single OAPAOPJMKKO
    // Size: 0x4
    // Offset: 0x178
    float OAPAOPJMKKO;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single BEEEDGANDCL
    // Size: 0x4
    // Offset: 0x17C
    float BEEEDGANDCL;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single HMCFPMPIDCG
    // Size: 0x4
    // Offset: 0x180
    float HMCFPMPIDCG;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single MFENOKCCEPP
    // Size: 0x4
    // Offset: 0x184
    float MFENOKCCEPP;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single OJLFDAEHOEP
    // Size: 0x4
    // Offset: 0x188
    float OJLFDAEHOEP;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single IKAAIBELCFM
    // Size: 0x4
    // Offset: 0x18C
    float IKAAIBELCFM;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single HHPOEDJMBKD
    // Size: 0x4
    // Offset: 0x190
    float HHPOEDJMBKD;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single JMEAOGNBKJK
    // Size: 0x4
    // Offset: 0x194
    float JMEAOGNBKJK;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single JKFBEOKJGHB
    // Size: 0x4
    // Offset: 0x198
    float JKFBEOKJGHB;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: JKFBEOKJGHB and: fishToCatch
    char __padding55[0x4] = {};
    // public UnityEngine.GameObject fishToCatch
    // Size: 0x8
    // Offset: 0x1A0
    ::UnityEngine::GameObject* fishToCatch;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject EBBNPLJEFEA
    // Size: 0x8
    // Offset: 0x1A8
    ::UnityEngine::GameObject* EBBNPLJEFEA;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private LTDescr HMGLOPFFNPP
    // Size: 0x8
    // Offset: 0x1B0
    ::GlobalNamespace::LTDescr* HMGLOPFFNPP;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LTDescr*) == 0x8);
    // public System.Boolean isLocallyControlled
    // Size: 0x1
    // Offset: 0x1B8
    bool isLocallyControlled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isLocallyControlled and: poleStatusText
    char __padding59[0x7] = {};
    // public SuperTextMesh poleStatusText
    // Size: 0x8
    // Offset: 0x1C0
    ::GlobalNamespace::SuperTextMesh* poleStatusText;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh*) == 0x8);
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x1C8
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private MagicalActual.NetEntity IJJGNKLFGJN
    // Size: 0x8
    // Offset: 0x1D0
    ::MagicalActual::NetEntity* IJJGNKLFGJN;
    // Field size check
    static_assert(sizeof(::MagicalActual::NetEntity*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAE33C0
    // private UnityEngine.GameObject <FFOEPKJAFFC>k__BackingField
    // Size: 0x8
    // Offset: 0x1D8
    ::UnityEngine::GameObject* FFOEPKJAFFC;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xAE33D0
    // private UnityEngine.GameObject <LIGKEMHOHLC>k__BackingField
    // Size: 0x8
    // Offset: 0x1E0
    ::UnityEngine::GameObject* LIGKEMHOHLC;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private OrbusTrackedController IKCANGJCBED
    // Size: 0x8
    // Offset: 0x1E8
    ::GlobalNamespace::OrbusTrackedController* IKCANGJCBED;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OrbusTrackedController*) == 0x8);
    // private OrbusTrackedController HKFGNKJKLPH
    // Size: 0x8
    // Offset: 0x1F0
    ::GlobalNamespace::OrbusTrackedController* HKFGNKJKLPH;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OrbusTrackedController*) == 0x8);
    // private ClickedEventHandler AACCFGBENDD
    // Size: 0x8
    // Offset: 0x1F8
    ::GlobalNamespace::ClickedEventHandler* AACCFGBENDD;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // private ClickedEventHandler HPCILNMEOPH
    // Size: 0x8
    // Offset: 0x200
    ::GlobalNamespace::ClickedEventHandler* HPCILNMEOPH;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public MagicalActual.Fisher/FishingPoleState currentState
    [[deprecated("Use field access instead!")]] ::MagicalActual::Fisher::FishingPoleState& dyn_currentState();
    // Get instance field reference: public UnityEngine.GameObject fishingPole
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_fishingPole();
    // Get instance field reference: public UnityEngine.GameObject fishingLurePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_fishingLurePrefab();
    // Get instance field reference: private MagicalActual.FisherReel MHEMPMANJGK
    [[deprecated("Use field access instead!")]] ::MagicalActual::FisherReel*& dyn_MHEMPMANJGK();
    // Get instance field reference: private MagicalActual.FishingRod LMDOLLFMAEG
    [[deprecated("Use field access instead!")]] ::MagicalActual::FishingRod*& dyn_LMDOLLFMAEG();
    // Get instance field reference: private MagicalActual.PlayerCharacter HCFELEODBLD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerCharacter*& dyn_HCFELEODBLD();
    // Get instance field reference: private MagicalActual.PlayerAvatar EENJNFDNJBD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerAvatar*& dyn_EENJNFDNJBD();
    // Get instance field reference: private OrbusTrackedController DFCJLOAJNBF
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OrbusTrackedController*& dyn_DFCJLOAJNBF();
    // Get instance field reference: public UnityEngine.GameObject vfxBobberSplash
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxBobberSplash();
    // Get instance field reference: public UnityEngine.GameObject poleTip
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_poleTip();
    // Get instance field reference: public UnityEngine.GameObject bobberPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_bobberPrefab();
    // Get instance field reference: public UnityEngine.Material lineRendererMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_lineRendererMaterial();
    // Get instance field reference: public MagicalActual.FishingLure myLure
    [[deprecated("Use field access instead!")]] ::MagicalActual::FishingLure*& dyn_myLure();
    // Get instance field reference: private System.Boolean HIKIBDCNDAA
    [[deprecated("Use field access instead!")]] bool& dyn_HIKIBDCNDAA();
    // Get instance field reference: private System.Boolean IMNDEEOEOKA
    [[deprecated("Use field access instead!")]] bool& dyn_IMNDEEOEOKA();
    // Get instance field reference: public UnityEngine.GameObject currentBobber
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_currentBobber();
    // Get instance field reference: public UnityEngine.GameObject bobberHook
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_bobberHook();
    // Get instance field reference: private UnityEngine.SphereCollider DKAKFGLNMJO
    [[deprecated("Use field access instead!")]] ::UnityEngine::SphereCollider*& dyn_DKAKFGLNMJO();
    // Get instance field reference: private System.UInt16 FHNLNPJECIJ
    [[deprecated("Use field access instead!")]] uint16_t& dyn_FHNLNPJECIJ();
    // Get instance field reference: private System.Int32 BLBCOEFNBGC
    [[deprecated("Use field access instead!")]] int& dyn_BLBCOEFNBGC();
    // Get instance field reference: private System.Single AHHJNJGIBHO
    [[deprecated("Use field access instead!")]] float& dyn_AHHJNJGIBHO();
    // Get instance field reference: private System.Single DMJHMPDIOMG
    [[deprecated("Use field access instead!")]] float& dyn_DMJHMPDIOMG();
    // Get instance field reference: private System.Single MDBFGANEIMG
    [[deprecated("Use field access instead!")]] float& dyn_MDBFGANEIMG();
    // Get instance field reference: private System.Single HHMKAJMMBIA
    [[deprecated("Use field access instead!")]] float& dyn_HHMKAJMMBIA();
    // Get instance field reference: private UnityEngine.Vector3 DFECNPDIIIF
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_DFECNPDIIIF();
    // Get instance field reference: private System.Single FEJJMKDFFMB
    [[deprecated("Use field access instead!")]] float& dyn_FEJJMKDFFMB();
    // Get instance field reference: private System.Single ODBIGPONDOI
    [[deprecated("Use field access instead!")]] float& dyn_ODBIGPONDOI();
    // Get instance field reference: private System.Single DPMOBAHKICI
    [[deprecated("Use field access instead!")]] float& dyn_DPMOBAHKICI();
    // Get instance field reference: private System.Single HIOPPBIDJKI
    [[deprecated("Use field access instead!")]] float& dyn_HIOPPBIDJKI();
    // Get instance field reference: private System.Single OBNFFGGOPKL
    [[deprecated("Use field access instead!")]] float& dyn_OBNFFGGOPKL();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt HFOEIFGCKLH
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_HFOEIFGCKLH();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt CGGGOGJLHBI
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_CGGGOGJLHBI();
    // Get instance field reference: private System.Boolean NFGMKIOJBKC
    [[deprecated("Use field access instead!")]] bool& dyn_NFGMKIOJBKC();
    // Get instance field reference: private System.Single EFHINJKJIOK
    [[deprecated("Use field access instead!")]] float& dyn_EFHINJKJIOK();
    // Get instance field reference: private System.Single MOABAHBDHKD
    [[deprecated("Use field access instead!")]] float& dyn_MOABAHBDHKD();
    // Get instance field reference: private UnityEngine.Vector3[] KKGJPMDJOMJ
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_KKGJPMDJOMJ();
    // Get instance field reference: private UnityEngine.LineRenderer ADMMPKAAILI
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn_ADMMPKAAILI();
    // Get instance field reference: public UnityEngine.GameObject teleportLineHolder
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_teleportLineHolder();
    // Get instance field reference: private MagicalActual.Catenary GKAGLCILGBD
    [[deprecated("Use field access instead!")]] ::MagicalActual::Catenary*& dyn_GKAGLCILGBD();
    // Get instance field reference: private System.Single EGOGPGKIELK
    [[deprecated("Use field access instead!")]] float& dyn_EGOGPGKIELK();
    // Get instance field reference: private System.Single MEKAJJADOCO
    [[deprecated("Use field access instead!")]] float& dyn_MEKAJJADOCO();
    // Get instance field reference: private System.Single ADHBAFBEBHF
    [[deprecated("Use field access instead!")]] float& dyn_ADHBAFBEBHF();
    // Get instance field reference: private UnityEngine.Vector3 CFMENBDECDM
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_CFMENBDECDM();
    // Get instance field reference: private UnityEngine.Vector3 PCHEPFCPKJF
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_PCHEPFCPKJF();
    // Get instance field reference: private System.Single MGPPKAPDKMI
    [[deprecated("Use field access instead!")]] float& dyn_MGPPKAPDKMI();
    // Get instance field reference: private System.Single HIGCJMLLCNC
    [[deprecated("Use field access instead!")]] float& dyn_HIGCJMLLCNC();
    // Get instance field reference: private System.Single KHIAEEEGBEH
    [[deprecated("Use field access instead!")]] float& dyn_KHIAEEEGBEH();
    // Get instance field reference: private System.Single OAPAOPJMKKO
    [[deprecated("Use field access instead!")]] float& dyn_OAPAOPJMKKO();
    // Get instance field reference: private System.Single BEEEDGANDCL
    [[deprecated("Use field access instead!")]] float& dyn_BEEEDGANDCL();
    // Get instance field reference: private System.Single HMCFPMPIDCG
    [[deprecated("Use field access instead!")]] float& dyn_HMCFPMPIDCG();
    // Get instance field reference: private System.Single MFENOKCCEPP
    [[deprecated("Use field access instead!")]] float& dyn_MFENOKCCEPP();
    // Get instance field reference: private System.Single OJLFDAEHOEP
    [[deprecated("Use field access instead!")]] float& dyn_OJLFDAEHOEP();
    // Get instance field reference: private System.Single IKAAIBELCFM
    [[deprecated("Use field access instead!")]] float& dyn_IKAAIBELCFM();
    // Get instance field reference: private System.Single HHPOEDJMBKD
    [[deprecated("Use field access instead!")]] float& dyn_HHPOEDJMBKD();
    // Get instance field reference: private System.Single JMEAOGNBKJK
    [[deprecated("Use field access instead!")]] float& dyn_JMEAOGNBKJK();
    // Get instance field reference: private System.Single JKFBEOKJGHB
    [[deprecated("Use field access instead!")]] float& dyn_JKFBEOKJGHB();
    // Get instance field reference: public UnityEngine.GameObject fishToCatch
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_fishToCatch();
    // Get instance field reference: private UnityEngine.GameObject EBBNPLJEFEA
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_EBBNPLJEFEA();
    // Get instance field reference: private LTDescr HMGLOPFFNPP
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LTDescr*& dyn_HMGLOPFFNPP();
    // Get instance field reference: public System.Boolean isLocallyControlled
    [[deprecated("Use field access instead!")]] bool& dyn_isLocallyControlled();
    // Get instance field reference: public SuperTextMesh poleStatusText
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh*& dyn_poleStatusText();
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: private MagicalActual.NetEntity IJJGNKLFGJN
    [[deprecated("Use field access instead!")]] ::MagicalActual::NetEntity*& dyn_IJJGNKLFGJN();
    // Get instance field reference: private UnityEngine.GameObject <FFOEPKJAFFC>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$FFOEPKJAFFC$k__BackingField();
    // Get instance field reference: private UnityEngine.GameObject <LIGKEMHOHLC>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$LIGKEMHOHLC$k__BackingField();
    // Get instance field reference: private OrbusTrackedController IKCANGJCBED
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OrbusTrackedController*& dyn_IKCANGJCBED();
    // Get instance field reference: private OrbusTrackedController HKFGNKJKLPH
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OrbusTrackedController*& dyn_HKFGNKJKLPH();
    // Get instance field reference: private ClickedEventHandler AACCFGBENDD
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_AACCFGBENDD();
    // Get instance field reference: private ClickedEventHandler HPCILNMEOPH
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_HPCILNMEOPH();
    // private System.Void BIMDGBOPPIF()
    // Offset: 0x14EC500
    void BIMDGBOPPIF();
    // private System.Void PMOADKNMHNC()
    // Offset: 0x14EC660
    void PMOADKNMHNC();
    // private System.Void Start()
    // Offset: 0x14EC954
    void Start();
    // private System.Void AMHKOKAHMJM()
    // Offset: 0x14ECE30
    void AMHKOKAHMJM();
    // private System.Void DHCCHMKIDMJ(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x14ECE90
    void DHCCHMKIDMJ(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void EGMPMKDJLEH()
    // Offset: 0x14ED9EC
    void EGMPMKDJLEH();
    // private System.Void OHMJMJJNBGP(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x14EDA74
    void OHMJMJJNBGP(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void KEJHILAGFKO()
    // Offset: 0x14ECB44
    void KEJHILAGFKO();
    // private System.Void NDNDGPDHDNN()
    // Offset: 0x14EDDF0
    void NDNDGPDHDNN();
    // private System.Void NPBHLBFNLHF(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x14EE008
    void NPBHLBFNLHF(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void HHPHNPBIGFP(System.String CGHALDIMACI)
    // Offset: 0x14EE308
    void HHPHNPBIGFP(::StringW CGHALDIMACI);
    // private System.Void KPHNOAPCPMN(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x14EE4A0
    void KPHNOAPCPMN(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void LateUpdate()
    // Offset: 0x14EE4A4
    void LateUpdate();
    // private System.Void OnDisable()
    // Offset: 0x14EF5C8
    void OnDisable();
    // private System.Void JBAHCAFOGDG()
    // Offset: 0x14EF728
    void JBAHCAFOGDG();
    // private System.Void AssignCurrentBobber()
    // Offset: 0x14EFB10
    void AssignCurrentBobber();
    // private System.Void OPANDBMLKBD()
    // Offset: 0x14EFCD0
    void OPANDBMLKBD();
    // private System.Void OGIKKPNCFEB()
    // Offset: 0x14F00B4
    void OGIKKPNCFEB();
    // private System.Void BOGAJONCPOP(System.IO.BinaryWriter FFJEENIEPJH)
    // Offset: 0x14F01C4
    void BOGAJONCPOP(::System::IO::BinaryWriter* FFJEENIEPJH);
    // private System.Void BCEJOCBPNBO(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x14F020C
    void BCEJOCBPNBO(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void ONLEIFBNEPD(System.UInt16 JFDPJGCKDJL, System.Single MKMDLPGMJKH, System.Boolean LNAEIJMGJAG)
    // Offset: 0x14ECF68
    void ONLEIFBNEPD(uint16_t JFDPJGCKDJL, float MKMDLPGMJKH, bool LNAEIJMGJAG);
    // public UnityEngine.GameObject KFAPHMBLCGI()
    // Offset: 0x14F0264
    ::UnityEngine::GameObject* KFAPHMBLCGI();
    // private System.Void FCGKOGKPEOG(System.UInt16 JFDPJGCKDJL, System.Single MKMDLPGMJKH, System.Boolean LNAEIJMGJAG)
    // Offset: 0x14F026C
    void FCGKOGKPEOG(uint16_t JFDPJGCKDJL, float MKMDLPGMJKH, bool LNAEIJMGJAG);
    // public System.Void orbusNetInit(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x14F0CF8
    void orbusNetInit(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void AHMLIMDJCJO()
    // Offset: 0x14F109C
    void AHMLIMDJCJO();
    // private System.Void PADEENGNPED()
    // Offset: 0x14EDA78
    void PADEENGNPED();
    // public System.Void .ctor()
    // Offset: 0x14F1DE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Fisher* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::Fisher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Fisher*, creationType>()));
    }
    // private System.Void EDPDGDDGFMF(UnityEngine.GameObject MMMEIONJJFJ)
    // Offset: 0x14F1F10
    void EDPDGDDGFMF(::UnityEngine::GameObject* MMMEIONJJFJ);
    // private System.Void ADJLBEAAPEM()
    // Offset: 0x14F1F18
    void ADJLBEAAPEM();
    // private System.Void OACMJADNNJG(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x14F1FE4
    void OACMJADNNJG(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void GOOELHOGPNO(System.Object OMLPNCLFFMJ)
    // Offset: 0x14F2250
    void GOOELHOGPNO(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void JKPMBFCHNHO(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x14F2254
    void JKPMBFCHNHO(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // public System.Void PhysicsInteractableGrip(MagicalActual.Grabber FOIEAOKBGLM)
    // Offset: 0x14F23FC
    void PhysicsInteractableGrip(::MagicalActual::Grabber* FOIEAOKBGLM);
    // public UnityEngine.GameObject KMINEBBMPPD()
    // Offset: 0x14F25C0
    ::UnityEngine::GameObject* KMINEBBMPPD();
    // public System.Void OnDestroy()
    // Offset: 0x14F25C8
    void OnDestroy();
    // private System.Void Awake()
    // Offset: 0x14F2674
    void Awake();
    // private System.Void PPGNGPCANGI(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x14F2A38
    void PPGNGPCANGI(::System::Collections::ArrayList* HPEANAHIBAH);
    // public System.Void MDIOEDPLFMB(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x14F2A64
    void MDIOEDPLFMB(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void FDILPFPJCCK()
    // Offset: 0x14F2A9C
    void FDILPFPJCCK();
    // private System.Void CINCHBBNMJD()
    // Offset: 0x14F2E60
    void CINCHBBNMJD();
    // private System.Void MDMGBILHGLA(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x14F3524
    void MDMGBILHGLA(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void ICGLPGEPMJN()
    // Offset: 0x14F3790
    void ICGLPGEPMJN();
    // public UnityEngine.GameObject get_secondaryController()
    // Offset: 0x14F3A7C
    ::UnityEngine::GameObject* get_secondaryController();
    // private System.Void MCDMBOIBABN(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x14F3A84
    void MCDMBOIBABN(::System::Collections::ArrayList* HPEANAHIBAH);
    // public System.Void reelGripChanged(System.Boolean CBAMALDADNC)
    // Offset: 0x14F3B5C
    void reelGripChanged(bool CBAMALDADNC);
    // private System.Void BFCNAMHNGKN()
    // Offset: 0x14F3C38
    void BFCNAMHNGKN();
    // private System.Void HJFPENKHBFM()
    // Offset: 0x14EEE64
    void HJFPENKHBFM();
    // private System.Void ResetSelf()
    // Offset: 0x14F3F68
    void ResetSelf();
    // private System.Void NPNMMPPHOKL(System.IO.BinaryWriter FFJEENIEPJH)
    // Offset: 0x14F3F94
    void NPNMMPPHOKL(::System::IO::BinaryWriter* FFJEENIEPJH);
    // private System.Void MDHACCEEMLL()
    // Offset: 0x14EE888
    void MDHACCEEMLL();
    // private System.Void NLPMGKJCJFL()
    // Offset: 0x14EECC8
    void NLPMGKJCJFL();
    // private System.Void AFIACGLCIPB()
    // Offset: 0x14F3FDC
    void AFIACGLCIPB();
    // private System.Void IGLBENIAEJG()
    // Offset: 0x14ECE64
    void IGLBENIAEJG();
    // public System.Void DICPOOMKKKB(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x14F41CC
    void DICPOOMKKKB(::MagicalActual::NetEntity* CMLIHJCOINC);
    // public System.Void orbusNetCleanup(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x14F4570
    void orbusNetCleanup(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void CINGBLEIBFB(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x14F45A8
    void CINGBLEIBFB(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void CALEJNBJIKO(UnityEngine.GameObject MMMEIONJJFJ)
    // Offset: 0x14F25B8
    void CALEJNBJIKO(::UnityEngine::GameObject* MMMEIONJJFJ);
    // private System.Void NIPLADHOCOG(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x14F4814
    void NIPLADHOCOG(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void ResetPole()
    // Offset: 0x14F0238
    void ResetPole();
    // private System.Void AvatarEquipmentChanged()
    // Offset: 0x14F48A4
    void AvatarEquipmentChanged();
    // private System.Void GANCBGAMPAD()
    // Offset: 0x14F3DD4
    void GANCBGAMPAD();
    // private System.Void IKKALMLAAKH()
    // Offset: 0x14F49A0
    void IKKALMLAAKH();
    // private System.Void CDODLNGLJKC()
    // Offset: 0x14F4A28
    void CDODLNGLJKC();
    // private System.Void ONHMGPCBHAD(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x14F4E7C
    void ONHMGPCBHAD(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Collections.IEnumerator COOCPDIKNOM()
    // Offset: 0x14F492C
    ::System::Collections::IEnumerator* COOCPDIKNOM();
    // private System.Void ANLBLPHMMOF()
    // Offset: 0x14F4ED4
    void ANLBLPHMMOF();
    // public System.Void PhysicsInteractableUngrip(MagicalActual.Grabber FOIEAOKBGLM)
    // Offset: 0x14F52B4
    void PhysicsInteractableUngrip(::MagicalActual::Grabber* FOIEAOKBGLM);
    // public System.Void SnapLine()
    // Offset: 0x14F1C78
    void SnapLine();
    // public System.Void PABPOCMFEJK(MagicalActual.Grabber FOIEAOKBGLM)
    // Offset: 0x14F5330
    void PABPOCMFEJK(::MagicalActual::Grabber* FOIEAOKBGLM);
    // public System.Void FGLIKGAFPHL(System.Boolean CBAMALDADNC)
    // Offset: 0x14F54F4
    void FGLIKGAFPHL(bool CBAMALDADNC);
    // private System.Void HOHIHJMILHJ()
    // Offset: 0x14EE27C
    void HOHIHJMILHJ();
    // public UnityEngine.GameObject get_primaryController()
    // Offset: 0x14EE274
    ::UnityEngine::GameObject* get_primaryController();
    // private System.Void PHJOPEEPPCJ(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x14F55C8
    void PHJOPEEPPCJ(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void JMPHKNBPJJF()
    // Offset: 0x14EFC1C
    void JMPHKNBPJJF();
    // private System.Void DGNLPFLIKAI(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x14F5770
    void DGNLPFLIKAI(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void GCHMPKNPDLM(UnityEngine.GameObject MMMEIONJJFJ)
    // Offset: 0x14F54EC
    void GCHMPKNPDLM(::UnityEngine::GameObject* MMMEIONJJFJ);
    // private System.Void FixedUpdate()
    // Offset: 0x14F59DC
    void FixedUpdate();
  }; // MagicalActual.Fisher
  #pragma pack(pop)
  static check_size<sizeof(Fisher), 512 + sizeof(::GlobalNamespace::ClickedEventHandler*)> __MagicalActual_FisherSizeCheck;
  static_assert(sizeof(Fisher) == 0x208);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::Fisher::FishingPoleState, "MagicalActual", "Fisher/FishingPoleState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::Fisher::BIMDGBOPPIF
// Il2CppName: BIMDGBOPPIF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::BIMDGBOPPIF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "BIMDGBOPPIF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::PMOADKNMHNC
// Il2CppName: PMOADKNMHNC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::PMOADKNMHNC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "PMOADKNMHNC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::AMHKOKAHMJM
// Il2CppName: AMHKOKAHMJM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::AMHKOKAHMJM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "AMHKOKAHMJM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::DHCCHMKIDMJ
// Il2CppName: DHCCHMKIDMJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::System::Collections::ArrayList*)>(&MagicalActual::Fisher::DHCCHMKIDMJ)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "DHCCHMKIDMJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::EGMPMKDJLEH
// Il2CppName: EGMPMKDJLEH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::EGMPMKDJLEH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "EGMPMKDJLEH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::OHMJMJJNBGP
// Il2CppName: OHMJMJJNBGP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::System::Collections::ArrayList*)>(&MagicalActual::Fisher::OHMJMJJNBGP)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "OHMJMJJNBGP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::KEJHILAGFKO
// Il2CppName: KEJHILAGFKO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::KEJHILAGFKO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "KEJHILAGFKO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::NDNDGPDHDNN
// Il2CppName: NDNDGPDHDNN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::NDNDGPDHDNN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "NDNDGPDHDNN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::NPBHLBFNLHF
// Il2CppName: NPBHLBFNLHF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Fisher::NPBHLBFNLHF)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "NPBHLBFNLHF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::HHPHNPBIGFP
// Il2CppName: HHPHNPBIGFP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::StringW)>(&MagicalActual::Fisher::HHPHNPBIGFP)> {
  static const MethodInfo* get() {
    static auto* CGHALDIMACI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "HHPHNPBIGFP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CGHALDIMACI});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::KPHNOAPCPMN
// Il2CppName: KPHNOAPCPMN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::System::Collections::ArrayList*)>(&MagicalActual::Fisher::KPHNOAPCPMN)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "KPHNOAPCPMN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::JBAHCAFOGDG
// Il2CppName: JBAHCAFOGDG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::JBAHCAFOGDG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "JBAHCAFOGDG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::AssignCurrentBobber
// Il2CppName: AssignCurrentBobber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::AssignCurrentBobber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "AssignCurrentBobber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::OPANDBMLKBD
// Il2CppName: OPANDBMLKBD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::OPANDBMLKBD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "OPANDBMLKBD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::OGIKKPNCFEB
// Il2CppName: OGIKKPNCFEB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::OGIKKPNCFEB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "OGIKKPNCFEB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::BOGAJONCPOP
// Il2CppName: BOGAJONCPOP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::System::IO::BinaryWriter*)>(&MagicalActual::Fisher::BOGAJONCPOP)> {
  static const MethodInfo* get() {
    static auto* FFJEENIEPJH = &::il2cpp_utils::GetClassFromName("System.IO", "BinaryWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "BOGAJONCPOP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFJEENIEPJH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::BCEJOCBPNBO
// Il2CppName: BCEJOCBPNBO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::System::Collections::ArrayList*)>(&MagicalActual::Fisher::BCEJOCBPNBO)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "BCEJOCBPNBO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::ONLEIFBNEPD
// Il2CppName: ONLEIFBNEPD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(uint16_t, float, bool)>(&MagicalActual::Fisher::ONLEIFBNEPD)> {
  static const MethodInfo* get() {
    static auto* JFDPJGCKDJL = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* MKMDLPGMJKH = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* LNAEIJMGJAG = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "ONLEIFBNEPD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{JFDPJGCKDJL, MKMDLPGMJKH, LNAEIJMGJAG});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::KFAPHMBLCGI
// Il2CppName: KFAPHMBLCGI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::KFAPHMBLCGI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "KFAPHMBLCGI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::FCGKOGKPEOG
// Il2CppName: FCGKOGKPEOG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(uint16_t, float, bool)>(&MagicalActual::Fisher::FCGKOGKPEOG)> {
  static const MethodInfo* get() {
    static auto* JFDPJGCKDJL = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    static auto* MKMDLPGMJKH = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* LNAEIJMGJAG = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "FCGKOGKPEOG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{JFDPJGCKDJL, MKMDLPGMJKH, LNAEIJMGJAG});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::orbusNetInit
// Il2CppName: orbusNetInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Fisher::orbusNetInit)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "orbusNetInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::AHMLIMDJCJO
// Il2CppName: AHMLIMDJCJO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::AHMLIMDJCJO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "AHMLIMDJCJO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::PADEENGNPED
// Il2CppName: PADEENGNPED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::PADEENGNPED)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "PADEENGNPED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::Fisher::EDPDGDDGFMF
// Il2CppName: EDPDGDDGFMF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::UnityEngine::GameObject*)>(&MagicalActual::Fisher::EDPDGDDGFMF)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "EDPDGDDGFMF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::ADJLBEAAPEM
// Il2CppName: ADJLBEAAPEM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::ADJLBEAAPEM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "ADJLBEAAPEM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::OACMJADNNJG
// Il2CppName: OACMJADNNJG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Fisher::OACMJADNNJG)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "OACMJADNNJG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::GOOELHOGPNO
// Il2CppName: GOOELHOGPNO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::Il2CppObject*)>(&MagicalActual::Fisher::GOOELHOGPNO)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "GOOELHOGPNO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::JKPMBFCHNHO
// Il2CppName: JKPMBFCHNHO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Fisher::JKPMBFCHNHO)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "JKPMBFCHNHO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::PhysicsInteractableGrip
// Il2CppName: PhysicsInteractableGrip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::MagicalActual::Grabber*)>(&MagicalActual::Fisher::PhysicsInteractableGrip)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "PhysicsInteractableGrip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::KMINEBBMPPD
// Il2CppName: KMINEBBMPPD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::KMINEBBMPPD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "KMINEBBMPPD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::PPGNGPCANGI
// Il2CppName: PPGNGPCANGI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::System::Collections::ArrayList*)>(&MagicalActual::Fisher::PPGNGPCANGI)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "PPGNGPCANGI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::MDIOEDPLFMB
// Il2CppName: MDIOEDPLFMB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Fisher::MDIOEDPLFMB)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "MDIOEDPLFMB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::FDILPFPJCCK
// Il2CppName: FDILPFPJCCK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::FDILPFPJCCK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "FDILPFPJCCK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::CINCHBBNMJD
// Il2CppName: CINCHBBNMJD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::CINCHBBNMJD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "CINCHBBNMJD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::MDMGBILHGLA
// Il2CppName: MDMGBILHGLA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Fisher::MDMGBILHGLA)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "MDMGBILHGLA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::ICGLPGEPMJN
// Il2CppName: ICGLPGEPMJN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::ICGLPGEPMJN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "ICGLPGEPMJN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::get_secondaryController
// Il2CppName: get_secondaryController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::get_secondaryController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "get_secondaryController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::MCDMBOIBABN
// Il2CppName: MCDMBOIBABN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::System::Collections::ArrayList*)>(&MagicalActual::Fisher::MCDMBOIBABN)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "MCDMBOIBABN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::reelGripChanged
// Il2CppName: reelGripChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(bool)>(&MagicalActual::Fisher::reelGripChanged)> {
  static const MethodInfo* get() {
    static auto* CBAMALDADNC = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "reelGripChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CBAMALDADNC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::BFCNAMHNGKN
// Il2CppName: BFCNAMHNGKN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::BFCNAMHNGKN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "BFCNAMHNGKN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::HJFPENKHBFM
// Il2CppName: HJFPENKHBFM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::HJFPENKHBFM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "HJFPENKHBFM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::ResetSelf
// Il2CppName: ResetSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::ResetSelf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "ResetSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::NPNMMPPHOKL
// Il2CppName: NPNMMPPHOKL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::System::IO::BinaryWriter*)>(&MagicalActual::Fisher::NPNMMPPHOKL)> {
  static const MethodInfo* get() {
    static auto* FFJEENIEPJH = &::il2cpp_utils::GetClassFromName("System.IO", "BinaryWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "NPNMMPPHOKL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFJEENIEPJH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::MDHACCEEMLL
// Il2CppName: MDHACCEEMLL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::MDHACCEEMLL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "MDHACCEEMLL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::NLPMGKJCJFL
// Il2CppName: NLPMGKJCJFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::NLPMGKJCJFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "NLPMGKJCJFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::AFIACGLCIPB
// Il2CppName: AFIACGLCIPB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::AFIACGLCIPB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "AFIACGLCIPB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::IGLBENIAEJG
// Il2CppName: IGLBENIAEJG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::IGLBENIAEJG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "IGLBENIAEJG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::DICPOOMKKKB
// Il2CppName: DICPOOMKKKB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Fisher::DICPOOMKKKB)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "DICPOOMKKKB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::orbusNetCleanup
// Il2CppName: orbusNetCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Fisher::orbusNetCleanup)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "orbusNetCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::CINGBLEIBFB
// Il2CppName: CINGBLEIBFB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Fisher::CINGBLEIBFB)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "CINGBLEIBFB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::CALEJNBJIKO
// Il2CppName: CALEJNBJIKO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::UnityEngine::GameObject*)>(&MagicalActual::Fisher::CALEJNBJIKO)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "CALEJNBJIKO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::NIPLADHOCOG
// Il2CppName: NIPLADHOCOG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::System::Collections::ArrayList*)>(&MagicalActual::Fisher::NIPLADHOCOG)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "NIPLADHOCOG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::ResetPole
// Il2CppName: ResetPole
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::ResetPole)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "ResetPole", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::AvatarEquipmentChanged
// Il2CppName: AvatarEquipmentChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::AvatarEquipmentChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "AvatarEquipmentChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::GANCBGAMPAD
// Il2CppName: GANCBGAMPAD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::GANCBGAMPAD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "GANCBGAMPAD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::IKKALMLAAKH
// Il2CppName: IKKALMLAAKH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::IKKALMLAAKH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "IKKALMLAAKH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::CDODLNGLJKC
// Il2CppName: CDODLNGLJKC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::CDODLNGLJKC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "CDODLNGLJKC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::ONHMGPCBHAD
// Il2CppName: ONHMGPCBHAD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::System::Collections::ArrayList*)>(&MagicalActual::Fisher::ONHMGPCBHAD)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "ONHMGPCBHAD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::COOCPDIKNOM
// Il2CppName: COOCPDIKNOM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::COOCPDIKNOM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "COOCPDIKNOM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::ANLBLPHMMOF
// Il2CppName: ANLBLPHMMOF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::ANLBLPHMMOF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "ANLBLPHMMOF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::PhysicsInteractableUngrip
// Il2CppName: PhysicsInteractableUngrip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::MagicalActual::Grabber*)>(&MagicalActual::Fisher::PhysicsInteractableUngrip)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "PhysicsInteractableUngrip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::SnapLine
// Il2CppName: SnapLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::SnapLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "SnapLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::PABPOCMFEJK
// Il2CppName: PABPOCMFEJK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::MagicalActual::Grabber*)>(&MagicalActual::Fisher::PABPOCMFEJK)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "PABPOCMFEJK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::FGLIKGAFPHL
// Il2CppName: FGLIKGAFPHL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(bool)>(&MagicalActual::Fisher::FGLIKGAFPHL)> {
  static const MethodInfo* get() {
    static auto* CBAMALDADNC = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "FGLIKGAFPHL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CBAMALDADNC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::HOHIHJMILHJ
// Il2CppName: HOHIHJMILHJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::HOHIHJMILHJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "HOHIHJMILHJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::get_primaryController
// Il2CppName: get_primaryController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::get_primaryController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "get_primaryController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::PHJOPEEPPCJ
// Il2CppName: PHJOPEEPPCJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Fisher::PHJOPEEPPCJ)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "PHJOPEEPPCJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::JMPHKNBPJJF
// Il2CppName: JMPHKNBPJJF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::JMPHKNBPJJF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "JMPHKNBPJJF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::DGNLPFLIKAI
// Il2CppName: DGNLPFLIKAI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Fisher::DGNLPFLIKAI)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "DGNLPFLIKAI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::GCHMPKNPDLM
// Il2CppName: GCHMPKNPDLM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)(::UnityEngine::GameObject*)>(&MagicalActual::Fisher::GCHMPKNPDLM)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "GCHMPKNPDLM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Fisher::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Fisher::*)()>(&MagicalActual::Fisher::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Fisher*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
