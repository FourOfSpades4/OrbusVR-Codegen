// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: JournalPage
  class JournalPage;
  // Forward declaring type: Grabber
  class Grabber;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PageCurl
  class PageCurl;
  // Forward declaring type: PhysicsInteractable
  class PhysicsInteractable;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: LODGroup
  class LODGroup;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: ReadableBook
  class ReadableBook;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::ReadableBook);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::ReadableBook*, "MagicalActual", "ReadableBook");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x110
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.ReadableBook
  // [TokenAttribute] Offset: FFFFFFFF
  class ReadableBook : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::MagicalActual::ReadableBook::$FlipToPageIdx$d__47
    class $FlipToPageIdx$d__47;
    public:
    // private PageCurl OELCNEHKCNI
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::PageCurl* OELCNEHKCNI;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PageCurl*) == 0x8);
    // private PageCurl LMAJHLLHBKP
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::PageCurl* LMAJHLLHBKP;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PageCurl*) == 0x8);
    // private System.Boolean DNNOHKCMIMC
    // Size: 0x1
    // Offset: 0x28
    bool DNNOHKCMIMC;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: DNNOHKCMIMC and: EGINMDGJGPB
    char __padding2[0x7] = {};
    // private UnityEngine.GameObject EGINMDGJGPB
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* EGINMDGJGPB;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject bookFrontCover
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* bookFrontCover;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject bookBackCover
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* bookBackCover;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.AudioSource GHPLEIOBCOD
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AudioSource* GHPLEIOBCOD;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioClip bookOpenSfx
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AudioClip* bookOpenSfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioClip pageTurnSfx
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AudioClip* pageTurnSfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Int32 KHIJICBNJBC
    // Size: 0x4
    // Offset: 0x60
    int KHIJICBNJBC;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: KHIJICBNJBC and: OACOBKMNPAK
    char __padding9[0x4] = {};
    // private System.Collections.Generic.List`1<PageCurl> OACOBKMNPAK
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::GlobalNamespace::PageCurl*>* OACOBKMNPAK;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::PageCurl*>*) == 0x8);
    // private System.Collections.Generic.List`1<PageCurl> COINNKFIBAC
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::GlobalNamespace::PageCurl*>* COINNKFIBAC;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::PageCurl*>*) == 0x8);
    // private UnityEngine.Texture2D[] NAKKCNMFGMD
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::UnityEngine::Texture2D*> NAKKCNMFGMD;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Texture2D*>) == 0x8);
    // private System.Single IOPBDHFNAJG
    // Size: 0x4
    // Offset: 0x80
    float IOPBDHFNAJG;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: IOPBDHFNAJG and: KKAIAAEEHGK
    char __padding13[0x4] = {};
    // [CompilerGeneratedAttribute] Offset: 0xAE4DE0
    // private System.Collections.Generic.List`1<MagicalActual.JournalPage> <KKAIAAEEHGK>k__BackingField
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::List_1<::MagicalActual::JournalPage*>* KKAIAAEEHGK;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::MagicalActual::JournalPage*>*) == 0x8);
    // private System.Int32 GLOKLPOAFGJ
    // Size: 0x4
    // Offset: 0x90
    int GLOKLPOAFGJ;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 IIODPKPCIOC
    // Size: 0x4
    // Offset: 0x94
    int IIODPKPCIOC;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean GBOEBPEHGOA
    // Size: 0x1
    // Offset: 0x98
    bool GBOEBPEHGOA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: GBOEBPEHGOA and: ABGIGCCOIND
    char __padding17[0x3] = {};
    // private System.Single ABGIGCCOIND
    // Size: 0x4
    // Offset: 0x9C
    float ABGIGCCOIND;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 FEMADPFCMND
    // Size: 0x4
    // Offset: 0xA0
    int FEMADPFCMND;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 ACACHKIIBGC
    // Size: 0xC
    // Offset: 0xA4
    ::UnityEngine::Vector3 ACACHKIIBGC;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 BPIGECHIBHK
    // Size: 0xC
    // Offset: 0xB0
    ::UnityEngine::Vector3 BPIGECHIBHK;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 FIJNBFPPNAA
    // Size: 0xC
    // Offset: 0xBC
    ::UnityEngine::Vector3 FIJNBFPPNAA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 EOLJDBILNJJ
    // Size: 0xC
    // Offset: 0xC8
    ::UnityEngine::Vector3 EOLJDBILNJJ;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean closeWhenDropped
    // Size: 0x1
    // Offset: 0xD4
    bool closeWhenDropped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: closeWhenDropped and: EIPMBKLODIJ
    char __padding24[0x3] = {};
    // private UnityEngine.Rigidbody EIPMBKLODIJ
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::Rigidbody* EIPMBKLODIJ;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private PhysicsInteractable NENLBJKDCFP
    // Size: 0x8
    // Offset: 0xE0
    ::GlobalNamespace::PhysicsInteractable* NENLBJKDCFP;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PhysicsInteractable*) == 0x8);
    // private UnityEngine.Vector3 FKKFPPDHEBJ
    // Size: 0xC
    // Offset: 0xE8
    ::UnityEngine::Vector3 FKKFPPDHEBJ;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion BAHHCAAFOIP
    // Size: 0x10
    // Offset: 0xF4
    ::UnityEngine::Quaternion BAHHCAAFOIP;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // Padding between fields: BAHHCAAFOIP and: OEEIAGLNEPK
    char __padding28[0x4] = {};
    // private UnityEngine.LODGroup OEEIAGLNEPK
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::LODGroup* OEEIAGLNEPK;
    // Field size check
    static_assert(sizeof(::UnityEngine::LODGroup*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private PageCurl OELCNEHKCNI
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PageCurl*& dyn_OELCNEHKCNI();
    // Get instance field reference: private PageCurl LMAJHLLHBKP
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PageCurl*& dyn_LMAJHLLHBKP();
    // Get instance field reference: private System.Boolean DNNOHKCMIMC
    [[deprecated("Use field access instead!")]] bool& dyn_DNNOHKCMIMC();
    // Get instance field reference: private UnityEngine.GameObject EGINMDGJGPB
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_EGINMDGJGPB();
    // Get instance field reference: public UnityEngine.GameObject bookFrontCover
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_bookFrontCover();
    // Get instance field reference: public UnityEngine.GameObject bookBackCover
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_bookBackCover();
    // Get instance field reference: private UnityEngine.AudioSource GHPLEIOBCOD
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_GHPLEIOBCOD();
    // Get instance field reference: public UnityEngine.AudioClip bookOpenSfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_bookOpenSfx();
    // Get instance field reference: public UnityEngine.AudioClip pageTurnSfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_pageTurnSfx();
    // Get instance field reference: private System.Int32 KHIJICBNJBC
    [[deprecated("Use field access instead!")]] int& dyn_KHIJICBNJBC();
    // Get instance field reference: private System.Collections.Generic.List`1<PageCurl> OACOBKMNPAK
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::PageCurl*>*& dyn_OACOBKMNPAK();
    // Get instance field reference: private System.Collections.Generic.List`1<PageCurl> COINNKFIBAC
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::PageCurl*>*& dyn_COINNKFIBAC();
    // Get instance field reference: private UnityEngine.Texture2D[] NAKKCNMFGMD
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Texture2D*>& dyn_NAKKCNMFGMD();
    // Get instance field reference: private System.Single IOPBDHFNAJG
    [[deprecated("Use field access instead!")]] float& dyn_IOPBDHFNAJG();
    // Get instance field reference: private System.Collections.Generic.List`1<MagicalActual.JournalPage> <KKAIAAEEHGK>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::MagicalActual::JournalPage*>*& dyn_$KKAIAAEEHGK$k__BackingField();
    // Get instance field reference: private System.Int32 GLOKLPOAFGJ
    [[deprecated("Use field access instead!")]] int& dyn_GLOKLPOAFGJ();
    // Get instance field reference: private System.Int32 IIODPKPCIOC
    [[deprecated("Use field access instead!")]] int& dyn_IIODPKPCIOC();
    // Get instance field reference: private System.Boolean GBOEBPEHGOA
    [[deprecated("Use field access instead!")]] bool& dyn_GBOEBPEHGOA();
    // Get instance field reference: private System.Single ABGIGCCOIND
    [[deprecated("Use field access instead!")]] float& dyn_ABGIGCCOIND();
    // Get instance field reference: private System.Int32 FEMADPFCMND
    [[deprecated("Use field access instead!")]] int& dyn_FEMADPFCMND();
    // Get instance field reference: private UnityEngine.Vector3 ACACHKIIBGC
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_ACACHKIIBGC();
    // Get instance field reference: private UnityEngine.Vector3 BPIGECHIBHK
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_BPIGECHIBHK();
    // Get instance field reference: private UnityEngine.Vector3 FIJNBFPPNAA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_FIJNBFPPNAA();
    // Get instance field reference: private UnityEngine.Vector3 EOLJDBILNJJ
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_EOLJDBILNJJ();
    // Get instance field reference: public System.Boolean closeWhenDropped
    [[deprecated("Use field access instead!")]] bool& dyn_closeWhenDropped();
    // Get instance field reference: private UnityEngine.Rigidbody EIPMBKLODIJ
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_EIPMBKLODIJ();
    // Get instance field reference: private PhysicsInteractable NENLBJKDCFP
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PhysicsInteractable*& dyn_NENLBJKDCFP();
    // Get instance field reference: private UnityEngine.Vector3 FKKFPPDHEBJ
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_FKKFPPDHEBJ();
    // Get instance field reference: private UnityEngine.Quaternion BAHHCAAFOIP
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_BAHHCAAFOIP();
    // Get instance field reference: private UnityEngine.LODGroup OEEIAGLNEPK
    [[deprecated("Use field access instead!")]] ::UnityEngine::LODGroup*& dyn_OEEIAGLNEPK();
    // public System.Void CBONHKCFIKN(System.String OLDADHJFBMC)
    // Offset: 0x15B6B18
    void CBONHKCFIKN(::StringW OLDADHJFBMC);
    // public System.Boolean DMBBOHKLFJE(System.Single OEPJEJGCAFB)
    // Offset: 0x15B6BBC
    bool DMBBOHKLFJE(float OEPJEJGCAFB);
    // public System.Boolean ClosePagePercent(System.Single OEPJEJGCAFB)
    // Offset: 0x15B77B0
    bool ClosePagePercent(float OEPJEJGCAFB);
    // private System.Void HKINNMLBMMG()
    // Offset: 0x15B7A44
    void HKINNMLBMMG();
    // public System.Single GANKOEOPIAK()
    // Offset: 0x15B7C48
    float GANKOEOPIAK();
    // private System.Void DLEFGIAPPCK()
    // Offset: 0x15B7C50
    void DLEFGIAPPCK();
    // public System.Boolean HJKELPJGKLP(System.Single OEPJEJGCAFB)
    // Offset: 0x15B7F6C
    bool HJKELPJGKLP(float OEPJEJGCAFB);
    // public System.Void PhysicsInteractableGrip(MagicalActual.Grabber FOIEAOKBGLM)
    // Offset: 0x15B81EC
    void PhysicsInteractableGrip(::MagicalActual::Grabber* FOIEAOKBGLM);
    // public System.Void PPJBGLDHCBI()
    // Offset: 0x15B8288
    void PPJBGLDHCBI();
    // public System.Int32 KKLOPGMPGFO(System.Boolean OLKDFGFEPHD)
    // Offset: 0x15B8340
    int KKLOPGMPGFO(bool OLKDFGFEPHD);
    // private System.Void FAGMFJOHGLJ()
    // Offset: 0x15B8544
    void FAGMFJOHGLJ();
    // public System.Void CloseBook()
    // Offset: 0x15B88D0
    void CloseBook();
    // public System.Void EIFLPHNNCPC(MagicalActual.Grabber FOIEAOKBGLM)
    // Offset: 0x15B8A24
    void EIFLPHNNCPC(::MagicalActual::Grabber* FOIEAOKBGLM);
    // public System.Void BHIIBJENPCG()
    // Offset: 0x15B8FE8
    void BHIIBJENPCG();
    // public System.Collections.Generic.List`1<MagicalActual.JournalPage> LBMMFKJICFK()
    // Offset: 0x15B6BB4
    ::System::Collections::Generic::List_1<::MagicalActual::JournalPage*>* LBMMFKJICFK();
    // private System.Void SnapBack()
    // Offset: 0x15B920C
    void SnapBack();
    // public System.Void FlipToPage(System.Int32 FIMIPCAGCNN)
    // Offset: 0x15B7CEC
    void FlipToPage(int FIMIPCAGCNN);
    // public System.Int32 ResetPages()
    // Offset: 0x15B9360
    int ResetPages();
    // public System.Void OpenBook()
    // Offset: 0x15B8DC8
    void OpenBook();
    // public System.Collections.Generic.List`1<MagicalActual.JournalPage> get_pageTexts()
    // Offset: 0x15B93D0
    ::System::Collections::Generic::List_1<::MagicalActual::JournalPage*>* get_pageTexts();
    // public System.Collections.IEnumerator PKKFKHENMII(System.Int32 MBLJAOCDGFK)
    // Offset: 0x15B93D8
    ::System::Collections::IEnumerator* PKKFKHENMII(int MBLJAOCDGFK);
    // private System.Void PDKHMBOOFEA(System.Single HFAIGGNKONJ)
    // Offset: 0x15B94A0
    void PDKHMBOOFEA(float HFAIGGNKONJ);
    // public System.Void PhysicsInteractableUngrip(MagicalActual.Grabber FOIEAOKBGLM)
    // Offset: 0x15B94A4
    void PhysicsInteractableUngrip(::MagicalActual::Grabber* FOIEAOKBGLM);
    // public System.Void AddPage(MagicalActual.JournalPage KPLDFMNPDCM)
    // Offset: 0x15B983C
    void AddPage(::MagicalActual::JournalPage* KPLDFMNPDCM);
    // public System.Void QuickCloseToPrevPage()
    // Offset: 0x15B98AC
    void QuickCloseToPrevPage();
    // private System.Void DAABJLDBHOL(System.Single HFAIGGNKONJ)
    // Offset: 0x15B99F4
    void DAABJLDBHOL(float HFAIGGNKONJ);
    // public System.Void EMEFKDKEBNA(MagicalActual.Grabber FOIEAOKBGLM)
    // Offset: 0x15B99F8
    void EMEFKDKEBNA(::MagicalActual::Grabber* FOIEAOKBGLM);
    // private System.Void FKJGINEKDKN()
    // Offset: 0x15B9D98
    void FKJGINEKDKN();
    // public System.Void EKCPGOGAEJK(System.Int32 FIMIPCAGCNN)
    // Offset: 0x15B9DD8
    void EKCPGOGAEJK(int FIMIPCAGCNN);
    // private System.Void CLFHGLKDCNP()
    // Offset: 0x15BA058
    void CLFHGLKDCNP();
    // private System.Void ALCEEALMABI(System.Collections.Generic.List`1<MagicalActual.JournalPage> MMMEIONJJFJ)
    // Offset: 0x15BA13C
    void ALCEEALMABI(::System::Collections::Generic::List_1<::MagicalActual::JournalPage*>* MMMEIONJJFJ);
    // private System.Void PGMLGLNIKIC()
    // Offset: 0x15BA144
    void PGMLGLNIKIC();
    // public System.Void CMDKDDGAMAF()
    // Offset: 0x15BA5A4
    void CMDKDDGAMAF();
    // private System.Void FFMOGJNIFGM(System.Int32 GDDDMANKKID)
    // Offset: 0x15B6E44
    void FFMOGJNIFGM(int GDDDMANKKID);
    // public System.Boolean OIJDECPNOKB(System.Single OEPJEJGCAFB)
    // Offset: 0x15BA7C8
    bool OIJDECPNOKB(float OEPJEJGCAFB);
    // public System.Void InitializePages()
    // Offset: 0x15BAA30
    void InitializePages();
    // private System.Void FEKBFCNJMAA()
    // Offset: 0x15BAADC
    void FEKBFCNJMAA();
    // private System.Void CBLNLBIKLBN()
    // Offset: 0x15BAC40
    void CBLNLBIKLBN();
    // public System.Collections.IEnumerator FlipToPageIdx(System.Int32 MBLJAOCDGFK)
    // Offset: 0x15B92C8
    ::System::Collections::IEnumerator* FlipToPageIdx(int MBLJAOCDGFK);
    // public System.Void .ctor()
    // Offset: 0x15BAFF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReadableBook* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::ReadableBook::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReadableBook*, creationType>()));
    }
    // public System.Void PIOAGAAKOPI()
    // Offset: 0x15BB100
    void PIOAGAAKOPI();
    // public System.Void set_bookOpenPercentage(System.Single MMMEIONJJFJ)
    // Offset: 0x15B7ACC
    void set_bookOpenPercentage(float MMMEIONJJFJ);
    // public System.Boolean OpenPagePercent(System.Single OEPJEJGCAFB)
    // Offset: 0x15BB324
    bool OpenPagePercent(float OEPJEJGCAFB);
    // private System.Void DHOJEPCGFOP()
    // Offset: 0x15BB598
    void DHOJEPCGFOP();
    // private System.Void Awake()
    // Offset: 0x15BB654
    void Awake();
    // public System.Void NPDGOHKCFDP()
    // Offset: 0x15BB7E4
    void NPDGOHKCFDP();
    // public System.Int32 BookClosed(System.Boolean OLKDFGFEPHD)
    // Offset: 0x15BBA08
    int BookClosed(bool OLKDFGFEPHD);
    // private System.Void CJBCGPHKMJH()
    // Offset: 0x15BBA3C
    void CJBCGPHKMJH();
    // private System.Void CJOELALIGPH()
    // Offset: 0x15BBA44
    void CJOELALIGPH();
    // public System.Boolean ODIOFKFLAMF(System.Single OEPJEJGCAFB)
    // Offset: 0x15BBA4C
    bool ODIOFKFLAMF(float OEPJEJGCAFB);
    // private System.Void FlipToRandomPage()
    // Offset: 0x15BBCD0
    void FlipToRandomPage();
    // private System.Void InstantTurnCurrentTarget()
    // Offset: 0x15BBD68
    void InstantTurnCurrentTarget();
    // private System.Void Start()
    // Offset: 0x15BBD70
    void Start();
    // private System.Void HIOFCMIMFKK()
    // Offset: 0x15BBDF4
    void HIOFCMIMFKK();
    // public System.Void QuickOpenToNextPage()
    // Offset: 0x15BBE34
    void QuickOpenToNextPage();
    // public System.Void InstantTurnToPageIdx(System.Int32 MBLJAOCDGFK)
    // Offset: 0x15B8374
    void InstantTurnToPageIdx(int MBLJAOCDGFK);
    // public System.Void AddPageWithText(System.String OLDADHJFBMC)
    // Offset: 0x15BBF7C
    void AddPageWithText(::StringW OLDADHJFBMC);
    // private System.Void CPGLBPIACFI(System.Single HFAIGGNKONJ)
    // Offset: 0x15BC018
    void CPGLBPIACFI(float HFAIGGNKONJ);
    // public System.Void CloseBookImmediately()
    // Offset: 0x15BC01C
    void CloseBookImmediately();
    // private System.Void MPGFIELFNHD()
    // Offset: 0x15BC024
    void MPGFIELFNHD();
    // private System.Void GBFCOJJALDO()
    // Offset: 0x15B74F8
    void GBFCOJJALDO();
    // public System.Single get_bookOpenPercentage()
    // Offset: 0x15BC488
    float get_bookOpenPercentage();
  }; // MagicalActual.ReadableBook
  #pragma pack(pop)
  static check_size<sizeof(ReadableBook), 264 + sizeof(::UnityEngine::LODGroup*)> __MagicalActual_ReadableBookSizeCheck;
  static_assert(sizeof(ReadableBook) == 0x110);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::ReadableBook::CBONHKCFIKN
// Il2CppName: CBONHKCFIKN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(::StringW)>(&MagicalActual::ReadableBook::CBONHKCFIKN)> {
  static const MethodInfo* get() {
    static auto* OLDADHJFBMC = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "CBONHKCFIKN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OLDADHJFBMC});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::DMBBOHKLFJE
// Il2CppName: DMBBOHKLFJE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::ReadableBook::*)(float)>(&MagicalActual::ReadableBook::DMBBOHKLFJE)> {
  static const MethodInfo* get() {
    static auto* OEPJEJGCAFB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "DMBBOHKLFJE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OEPJEJGCAFB});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::ClosePagePercent
// Il2CppName: ClosePagePercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::ReadableBook::*)(float)>(&MagicalActual::ReadableBook::ClosePagePercent)> {
  static const MethodInfo* get() {
    static auto* OEPJEJGCAFB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "ClosePagePercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OEPJEJGCAFB});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::HKINNMLBMMG
// Il2CppName: HKINNMLBMMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::HKINNMLBMMG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "HKINNMLBMMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::GANKOEOPIAK
// Il2CppName: GANKOEOPIAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::GANKOEOPIAK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "GANKOEOPIAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::DLEFGIAPPCK
// Il2CppName: DLEFGIAPPCK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::DLEFGIAPPCK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "DLEFGIAPPCK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::HJKELPJGKLP
// Il2CppName: HJKELPJGKLP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::ReadableBook::*)(float)>(&MagicalActual::ReadableBook::HJKELPJGKLP)> {
  static const MethodInfo* get() {
    static auto* OEPJEJGCAFB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "HJKELPJGKLP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OEPJEJGCAFB});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::PhysicsInteractableGrip
// Il2CppName: PhysicsInteractableGrip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(::MagicalActual::Grabber*)>(&MagicalActual::ReadableBook::PhysicsInteractableGrip)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "PhysicsInteractableGrip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::PPJBGLDHCBI
// Il2CppName: PPJBGLDHCBI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::PPJBGLDHCBI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "PPJBGLDHCBI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::KKLOPGMPGFO
// Il2CppName: KKLOPGMPGFO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MagicalActual::ReadableBook::*)(bool)>(&MagicalActual::ReadableBook::KKLOPGMPGFO)> {
  static const MethodInfo* get() {
    static auto* OLKDFGFEPHD = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "KKLOPGMPGFO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OLKDFGFEPHD});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::FAGMFJOHGLJ
// Il2CppName: FAGMFJOHGLJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::FAGMFJOHGLJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "FAGMFJOHGLJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::CloseBook
// Il2CppName: CloseBook
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::CloseBook)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "CloseBook", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::EIFLPHNNCPC
// Il2CppName: EIFLPHNNCPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(::MagicalActual::Grabber*)>(&MagicalActual::ReadableBook::EIFLPHNNCPC)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "EIFLPHNNCPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::BHIIBJENPCG
// Il2CppName: BHIIBJENPCG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::BHIIBJENPCG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "BHIIBJENPCG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::LBMMFKJICFK
// Il2CppName: LBMMFKJICFK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::MagicalActual::JournalPage*>* (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::LBMMFKJICFK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "LBMMFKJICFK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::SnapBack
// Il2CppName: SnapBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::SnapBack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "SnapBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::FlipToPage
// Il2CppName: FlipToPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(int)>(&MagicalActual::ReadableBook::FlipToPage)> {
  static const MethodInfo* get() {
    static auto* FIMIPCAGCNN = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "FlipToPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FIMIPCAGCNN});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::ResetPages
// Il2CppName: ResetPages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::ResetPages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "ResetPages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::OpenBook
// Il2CppName: OpenBook
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::OpenBook)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "OpenBook", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::get_pageTexts
// Il2CppName: get_pageTexts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::MagicalActual::JournalPage*>* (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::get_pageTexts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "get_pageTexts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::PKKFKHENMII
// Il2CppName: PKKFKHENMII
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::ReadableBook::*)(int)>(&MagicalActual::ReadableBook::PKKFKHENMII)> {
  static const MethodInfo* get() {
    static auto* MBLJAOCDGFK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "PKKFKHENMII", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MBLJAOCDGFK});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::PDKHMBOOFEA
// Il2CppName: PDKHMBOOFEA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(float)>(&MagicalActual::ReadableBook::PDKHMBOOFEA)> {
  static const MethodInfo* get() {
    static auto* HFAIGGNKONJ = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "PDKHMBOOFEA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HFAIGGNKONJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::PhysicsInteractableUngrip
// Il2CppName: PhysicsInteractableUngrip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(::MagicalActual::Grabber*)>(&MagicalActual::ReadableBook::PhysicsInteractableUngrip)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "PhysicsInteractableUngrip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::AddPage
// Il2CppName: AddPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(::MagicalActual::JournalPage*)>(&MagicalActual::ReadableBook::AddPage)> {
  static const MethodInfo* get() {
    static auto* KPLDFMNPDCM = &::il2cpp_utils::GetClassFromName("MagicalActual", "JournalPage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "AddPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KPLDFMNPDCM});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::QuickCloseToPrevPage
// Il2CppName: QuickCloseToPrevPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::QuickCloseToPrevPage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "QuickCloseToPrevPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::DAABJLDBHOL
// Il2CppName: DAABJLDBHOL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(float)>(&MagicalActual::ReadableBook::DAABJLDBHOL)> {
  static const MethodInfo* get() {
    static auto* HFAIGGNKONJ = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "DAABJLDBHOL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HFAIGGNKONJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::EMEFKDKEBNA
// Il2CppName: EMEFKDKEBNA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(::MagicalActual::Grabber*)>(&MagicalActual::ReadableBook::EMEFKDKEBNA)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "EMEFKDKEBNA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::FKJGINEKDKN
// Il2CppName: FKJGINEKDKN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::FKJGINEKDKN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "FKJGINEKDKN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::EKCPGOGAEJK
// Il2CppName: EKCPGOGAEJK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(int)>(&MagicalActual::ReadableBook::EKCPGOGAEJK)> {
  static const MethodInfo* get() {
    static auto* FIMIPCAGCNN = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "EKCPGOGAEJK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FIMIPCAGCNN});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::CLFHGLKDCNP
// Il2CppName: CLFHGLKDCNP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::CLFHGLKDCNP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "CLFHGLKDCNP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::ALCEEALMABI
// Il2CppName: ALCEEALMABI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(::System::Collections::Generic::List_1<::MagicalActual::JournalPage*>*)>(&MagicalActual::ReadableBook::ALCEEALMABI)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("MagicalActual", "JournalPage")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "ALCEEALMABI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::PGMLGLNIKIC
// Il2CppName: PGMLGLNIKIC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::PGMLGLNIKIC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "PGMLGLNIKIC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::CMDKDDGAMAF
// Il2CppName: CMDKDDGAMAF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::CMDKDDGAMAF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "CMDKDDGAMAF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::FFMOGJNIFGM
// Il2CppName: FFMOGJNIFGM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(int)>(&MagicalActual::ReadableBook::FFMOGJNIFGM)> {
  static const MethodInfo* get() {
    static auto* GDDDMANKKID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "FFMOGJNIFGM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GDDDMANKKID});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::OIJDECPNOKB
// Il2CppName: OIJDECPNOKB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::ReadableBook::*)(float)>(&MagicalActual::ReadableBook::OIJDECPNOKB)> {
  static const MethodInfo* get() {
    static auto* OEPJEJGCAFB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "OIJDECPNOKB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OEPJEJGCAFB});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::InitializePages
// Il2CppName: InitializePages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::InitializePages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "InitializePages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::FEKBFCNJMAA
// Il2CppName: FEKBFCNJMAA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::FEKBFCNJMAA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "FEKBFCNJMAA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::CBLNLBIKLBN
// Il2CppName: CBLNLBIKLBN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::CBLNLBIKLBN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "CBLNLBIKLBN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::FlipToPageIdx
// Il2CppName: FlipToPageIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::ReadableBook::*)(int)>(&MagicalActual::ReadableBook::FlipToPageIdx)> {
  static const MethodInfo* get() {
    static auto* MBLJAOCDGFK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "FlipToPageIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MBLJAOCDGFK});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::ReadableBook::PIOAGAAKOPI
// Il2CppName: PIOAGAAKOPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::PIOAGAAKOPI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "PIOAGAAKOPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::set_bookOpenPercentage
// Il2CppName: set_bookOpenPercentage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(float)>(&MagicalActual::ReadableBook::set_bookOpenPercentage)> {
  static const MethodInfo* get() {
    static auto* MMMEIONJJFJ = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "set_bookOpenPercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MMMEIONJJFJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::OpenPagePercent
// Il2CppName: OpenPagePercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::ReadableBook::*)(float)>(&MagicalActual::ReadableBook::OpenPagePercent)> {
  static const MethodInfo* get() {
    static auto* OEPJEJGCAFB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "OpenPagePercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OEPJEJGCAFB});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::DHOJEPCGFOP
// Il2CppName: DHOJEPCGFOP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::DHOJEPCGFOP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "DHOJEPCGFOP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::NPDGOHKCFDP
// Il2CppName: NPDGOHKCFDP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::NPDGOHKCFDP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "NPDGOHKCFDP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::BookClosed
// Il2CppName: BookClosed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MagicalActual::ReadableBook::*)(bool)>(&MagicalActual::ReadableBook::BookClosed)> {
  static const MethodInfo* get() {
    static auto* OLKDFGFEPHD = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "BookClosed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OLKDFGFEPHD});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::CJBCGPHKMJH
// Il2CppName: CJBCGPHKMJH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::CJBCGPHKMJH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "CJBCGPHKMJH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::CJOELALIGPH
// Il2CppName: CJOELALIGPH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::CJOELALIGPH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "CJOELALIGPH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::ODIOFKFLAMF
// Il2CppName: ODIOFKFLAMF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::ReadableBook::*)(float)>(&MagicalActual::ReadableBook::ODIOFKFLAMF)> {
  static const MethodInfo* get() {
    static auto* OEPJEJGCAFB = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "ODIOFKFLAMF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OEPJEJGCAFB});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::FlipToRandomPage
// Il2CppName: FlipToRandomPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::FlipToRandomPage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "FlipToRandomPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::InstantTurnCurrentTarget
// Il2CppName: InstantTurnCurrentTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::InstantTurnCurrentTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "InstantTurnCurrentTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::HIOFCMIMFKK
// Il2CppName: HIOFCMIMFKK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::HIOFCMIMFKK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "HIOFCMIMFKK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::QuickOpenToNextPage
// Il2CppName: QuickOpenToNextPage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::QuickOpenToNextPage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "QuickOpenToNextPage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::InstantTurnToPageIdx
// Il2CppName: InstantTurnToPageIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(int)>(&MagicalActual::ReadableBook::InstantTurnToPageIdx)> {
  static const MethodInfo* get() {
    static auto* MBLJAOCDGFK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "InstantTurnToPageIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{MBLJAOCDGFK});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::AddPageWithText
// Il2CppName: AddPageWithText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(::StringW)>(&MagicalActual::ReadableBook::AddPageWithText)> {
  static const MethodInfo* get() {
    static auto* OLDADHJFBMC = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "AddPageWithText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OLDADHJFBMC});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::CPGLBPIACFI
// Il2CppName: CPGLBPIACFI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)(float)>(&MagicalActual::ReadableBook::CPGLBPIACFI)> {
  static const MethodInfo* get() {
    static auto* HFAIGGNKONJ = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "CPGLBPIACFI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HFAIGGNKONJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::CloseBookImmediately
// Il2CppName: CloseBookImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::CloseBookImmediately)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "CloseBookImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::MPGFIELFNHD
// Il2CppName: MPGFIELFNHD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::MPGFIELFNHD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "MPGFIELFNHD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::GBFCOJJALDO
// Il2CppName: GBFCOJJALDO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::GBFCOJJALDO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "GBFCOJJALDO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ReadableBook::get_bookOpenPercentage
// Il2CppName: get_bookOpenPercentage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MagicalActual::ReadableBook::*)()>(&MagicalActual::ReadableBook::get_bookOpenPercentage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ReadableBook*), "get_bookOpenPercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
