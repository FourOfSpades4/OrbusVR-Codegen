// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IPlayerClass
#include "GlobalNamespace/IPlayerClass.hpp"
// Including type: CodeStage.AntiCheat.ObscuredTypes.ObFlt
#include "CodeStage/AntiCheat/ObscuredTypes/ObFlt.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: CodeStage.AntiCheat.ObscuredTypes.ObInt
#include "CodeStage/AntiCheat/ObscuredTypes/ObInt.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: NetEntity
  class NetEntity;
  // Forward declaring type: PlayerClass
  class PlayerClass;
  // Forward declaring type: PlayerAvatar
  class PlayerAvatar;
  // Forward declaring type: PlayerCharacter
  class PlayerCharacter;
  // Forward declaring type: Grabber
  class Grabber;
  // Forward declaring type: GamblerDeck
  class GamblerDeck;
  // Forward declaring type: GamblerDrawnCard
  class GamblerDrawnCard;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Sprite
  class Sprite;
  // Forward declaring type: SpriteRenderer
  class SpriteRenderer;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OrbusTrackedController
  class OrbusTrackedController;
  // Forward declaring type: SuperTextMesh
  class SuperTextMesh;
  // Forward declaring type: ClickedEventHandler
  class ClickedEventHandler;
  // Forward declaring type: ClickedEventArgs
  struct ClickedEventArgs;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Gambler
  class Gambler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::Gambler);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::Gambler*, "MagicalActual", "Gambler");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x2B5
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.Gambler
  // [TokenAttribute] Offset: FFFFFFFF
  class Gambler : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IPlayerClass*/ {
    public:
    // Nested type: ::MagicalActual::Gambler::orbusNetMethodIdx
    struct orbusNetMethodIdx;
    // Nested type: ::MagicalActual::Gambler::orbusIncomingMethodIdx
    struct orbusIncomingMethodIdx;
    // Nested type: ::MagicalActual::Gambler::$$c__DisplayClass74_0
    class $$c__DisplayClass74_0;
    // Nested type: ::MagicalActual::Gambler::$$c__DisplayClass86_0
    class $$c__DisplayClass86_0;
    // Nested type: ::MagicalActual::Gambler::$$c
    class $$c;
    // Nested type: ::MagicalActual::Gambler::$$c__DisplayClass100_0
    class $$c__DisplayClass100_0;
    // Nested type: ::MagicalActual::Gambler::$$c__DisplayClass101_0
    class $$c__DisplayClass101_0;
    // Nested type: ::MagicalActual::Gambler::$$c__DisplayClass106_0
    class $$c__DisplayClass106_0;
    public:
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x18
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private MagicalActual.NetEntity IJJGNKLFGJN
    // Size: 0x8
    // Offset: 0x20
    ::MagicalActual::NetEntity* IJJGNKLFGJN;
    // Field size check
    static_assert(sizeof(::MagicalActual::NetEntity*) == 0x8);
    // private System.Boolean HNFCLAFDJBD
    // Size: 0x1
    // Offset: 0x28
    bool HNFCLAFDJBD;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: HNFCLAFDJBD and: FNINBDEICCD
    char __padding2[0x7] = {};
    // private MagicalActual.PlayerClass FNINBDEICCD
    // Size: 0x8
    // Offset: 0x30
    ::MagicalActual::PlayerClass* FNINBDEICCD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerClass*) == 0x8);
    // private MagicalActual.PlayerAvatar EENJNFDNJBD
    // Size: 0x8
    // Offset: 0x38
    ::MagicalActual::PlayerAvatar* EENJNFDNJBD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerAvatar*) == 0x8);
    // private MagicalActual.PlayerCharacter HCFELEODBLD
    // Size: 0x8
    // Offset: 0x40
    ::MagicalActual::PlayerCharacter* HCFELEODBLD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerCharacter*) == 0x8);
    // private UnityEngine.GameObject CCEMBLKGKLN
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* CCEMBLKGKLN;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject GKJEHAKEABK
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* GKJEHAKEABK;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private OrbusTrackedController NAFKPBDAGKG
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::OrbusTrackedController* NAFKPBDAGKG;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OrbusTrackedController*) == 0x8);
    // private MagicalActual.Grabber KENJKDFDJHA
    // Size: 0x8
    // Offset: 0x60
    ::MagicalActual::Grabber* KENJKDFDJHA;
    // Field size check
    static_assert(sizeof(::MagicalActual::Grabber*) == 0x8);
    // private System.Int32 KHIKJLICKKF
    // Size: 0x4
    // Offset: 0x68
    int KHIKJLICKKF;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 FJPBNPLIKHA
    // Size: 0x4
    // Offset: 0x6C
    int FJPBNPLIKHA;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.GameObject gun
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* gun;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject bowFirePoint
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::GameObject* bowFirePoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject HDMKCGKJCLA
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::GameObject* HDMKCGKJCLA;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject superVfx
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::GameObject* superVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject bulletPrefab
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::GameObject* bulletPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject bulletTrail
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::GameObject* bulletTrail;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.AudioClip gunFireSfx
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::AudioClip* gunFireSfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.GameObject gunFireVfx
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::GameObject* gunFireVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.AudioSource BPFOFPNPABM
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::AudioSource* BPFOFPNPABM;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.GameObject vfxBlood
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::GameObject* vfxBlood;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxCardHit
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::GameObject* vfxCardHit;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject chamber
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::GameObject* chamber;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public MagicalActual.GamblerDeck myDeck
    // Size: 0x8
    // Offset: 0xD0
    ::MagicalActual::GamblerDeck* myDeck;
    // Field size check
    static_assert(sizeof(::MagicalActual::GamblerDeck*) == 0x8);
    // private UnityEngine.GameObject JAJMGECJGGA
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::GameObject* JAJMGECJGGA;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Int32 GJJDIJAFLGA
    // Size: 0x4
    // Offset: 0xE0
    int GJJDIJAFLGA;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean BNFNNGFCKBK
    // Size: 0x1
    // Offset: 0xE4
    bool BNFNNGFCKBK;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean GCCMBLOGLBA
    // Size: 0x1
    // Offset: 0xE5
    bool GCCMBLOGLBA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean GHBBMIFHKGO
    // Size: 0x1
    // Offset: 0xE6
    bool GHBBMIFHKGO;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean HIKIBDCNDAA
    // Size: 0x1
    // Offset: 0xE7
    bool HIKIBDCNDAA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean IMNDEEOEOKA
    // Size: 0x1
    // Offset: 0xE8
    bool IMNDEEOEOKA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IMNDEEOEOKA and: IAIBPCPKDJE
    char __padding31[0x7] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt IAIBPCPKDJE
    // Size: 0x19
    // Offset: 0xF0
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt IAIBPCPKDJE;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: IAIBPCPKDJE and: FABKFLBCALA
    char __padding32[0x7] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt FABKFLBCALA
    // Size: 0x19
    // Offset: 0x110
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt FABKFLBCALA;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: FABKFLBCALA and: DFNIAPKNIDI
    char __padding33[0x7] = {};
    // private System.Boolean DFNIAPKNIDI
    // Size: 0x1
    // Offset: 0x130
    bool DFNIAPKNIDI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: DFNIAPKNIDI and: drawnCardPrototype
    char __padding34[0x7] = {};
    // public MagicalActual.GamblerDrawnCard drawnCardPrototype
    // Size: 0x8
    // Offset: 0x138
    ::MagicalActual::GamblerDrawnCard* drawnCardPrototype;
    // Field size check
    static_assert(sizeof(::MagicalActual::GamblerDrawnCard*) == 0x8);
    // public UnityEngine.Sprite[] cardTypes
    // Size: 0x8
    // Offset: 0x140
    ::ArrayW<::UnityEngine::Sprite*> cardTypes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Sprite*>) == 0x8);
    // private MagicalActual.GamblerDrawnCard MJCEMDFFHGH
    // Size: 0x8
    // Offset: 0x148
    ::MagicalActual::GamblerDrawnCard* MJCEMDFFHGH;
    // Field size check
    static_assert(sizeof(::MagicalActual::GamblerDrawnCard*) == 0x8);
    // public UnityEngine.UI.Image cardsLeftIndicator
    // Size: 0x8
    // Offset: 0x150
    ::UnityEngine::UI::Image* cardsLeftIndicator;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public SuperTextMesh cardsLeftNumber
    // Size: 0x8
    // Offset: 0x158
    ::GlobalNamespace::SuperTextMesh* cardsLeftNumber;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh*) == 0x8);
    // public UnityEngine.GameObject[] pendingEmpowerments
    // Size: 0x8
    // Offset: 0x160
    ::ArrayW<::UnityEngine::GameObject*> pendingEmpowerments;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.SpriteRenderer pendingCardSprite
    // Size: 0x8
    // Offset: 0x168
    ::UnityEngine::SpriteRenderer* pendingCardSprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::SpriteRenderer*) == 0x8);
    // public UnityEngine.GameObject cardBurnVfx
    // Size: 0x8
    // Offset: 0x170
    ::UnityEngine::GameObject* cardBurnVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public SuperTextMesh gamblerShotRatingPrefab
    // Size: 0x8
    // Offset: 0x178
    ::GlobalNamespace::SuperTextMesh* gamblerShotRatingPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SuperTextMesh*) == 0x8);
    // public UnityEngine.GameObject cardHolder
    // Size: 0x8
    // Offset: 0x180
    ::UnityEngine::GameObject* cardHolder;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.RaycastHit[] EHLLMIKFMJG
    // Size: 0x8
    // Offset: 0x188
    ::ArrayW<::UnityEngine::RaycastHit> EHLLMIKFMJG;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private CodeStage.AntiCheat.ObscuredTypes.ObInt PLNKNIDGBAG
    // Size: 0x11
    // Offset: 0x190
    ::CodeStage::AntiCheat::ObscuredTypes::ObInt PLNKNIDGBAG;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObInt) == 0x11);
    // Padding between fields: PLNKNIDGBAG and: FDPKCHPKNIG
    char __padding46[0x3] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObInt FDPKCHPKNIG
    // Size: 0x11
    // Offset: 0x1A4
    ::CodeStage::AntiCheat::ObscuredTypes::ObInt FDPKCHPKNIG;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObInt) == 0x11);
    // Padding between fields: FDPKCHPKNIG and: BDAOHHGGFDJ
    char __padding47[0x3] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt BDAOHHGGFDJ
    // Size: 0x19
    // Offset: 0x1B8
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt BDAOHHGGFDJ;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: BDAOHHGGFDJ and: EEIPIJAHOEB
    char __padding48[0x7] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt EEIPIJAHOEB
    // Size: 0x19
    // Offset: 0x1D8
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt EEIPIJAHOEB;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: EEIPIJAHOEB and: CBMBPFKNJPE
    char __padding49[0x7] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt CBMBPFKNJPE
    // Size: 0x19
    // Offset: 0x1F8
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt CBMBPFKNJPE;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: CBMBPFKNJPE and: HDFPINPAIHK
    char __padding50[0x7] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt HDFPINPAIHK
    // Size: 0x19
    // Offset: 0x218
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt HDFPINPAIHK;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: HDFPINPAIHK and: DFNHAODJMDD
    char __padding51[0x7] = {};
    // private System.Single DFNHAODJMDD
    // Size: 0x4
    // Offset: 0x238
    float DFNHAODJMDD;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single IOGAAAHCPGM
    // Size: 0x4
    // Offset: 0x23C
    float IOGAAAHCPGM;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private CodeStage.AntiCheat.ObscuredTypes.ObInt BMMJKBEFLCA
    // Size: 0x11
    // Offset: 0x240
    ::CodeStage::AntiCheat::ObscuredTypes::ObInt BMMJKBEFLCA;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObInt) == 0x11);
    // Padding between fields: BMMJKBEFLCA and: EMPPOAILJNM
    char __padding54[0x3] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObInt EMPPOAILJNM
    // Size: 0x11
    // Offset: 0x254
    ::CodeStage::AntiCheat::ObscuredTypes::ObInt EMPPOAILJNM;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObInt) == 0x11);
    // Padding between fields: EMPPOAILJNM and: chargeUpVFX
    char __padding55[0x3] = {};
    // private UnityEngine.GameObject chargeUpVFX
    // Size: 0x8
    // Offset: 0x268
    ::UnityEngine::GameObject* chargeUpVFX;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Vector3 CKKFDCEMMKE
    // Size: 0xC
    // Offset: 0x270
    ::UnityEngine::Vector3 CKKFDCEMMKE;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: CKKFDCEMMKE and: HBOOKAFBIEP
    char __padding57[0x4] = {};
    // private ClickedEventHandler HBOOKAFBIEP
    // Size: 0x8
    // Offset: 0x280
    ::GlobalNamespace::ClickedEventHandler* HBOOKAFBIEP;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // private ClickedEventHandler CNLIOBNKIEO
    // Size: 0x8
    // Offset: 0x288
    ::GlobalNamespace::ClickedEventHandler* CNLIOBNKIEO;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // private ClickedEventHandler HCJEOHLOMGB
    // Size: 0x8
    // Offset: 0x290
    ::GlobalNamespace::ClickedEventHandler* HCJEOHLOMGB;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // private ClickedEventHandler BMPJOEDPLCH
    // Size: 0x8
    // Offset: 0x298
    ::GlobalNamespace::ClickedEventHandler* BMPJOEDPLCH;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // private ClickedEventHandler BHLDGAKLBLB
    // Size: 0x8
    // Offset: 0x2A0
    ::GlobalNamespace::ClickedEventHandler* BHLDGAKLBLB;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // private ClickedEventHandler MDEBIKPCABE
    // Size: 0x8
    // Offset: 0x2A8
    ::GlobalNamespace::ClickedEventHandler* MDEBIKPCABE;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ClickedEventHandler*) == 0x8);
    // private System.Byte BFJNJBICBND
    // Size: 0x1
    // Offset: 0x2B0
    uint8_t BFJNJBICBND;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte JNHGILGMIOM
    // Size: 0x1
    // Offset: 0x2B1
    uint8_t JNHGILGMIOM;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte IPKMHOFLDJN
    // Size: 0x1
    // Offset: 0x2B2
    uint8_t IPKMHOFLDJN;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte AFIIKPFAKLG
    // Size: 0x1
    // Offset: 0x2B3
    uint8_t AFIIKPFAKLG;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Boolean EOGGPPBNCMM
    // Size: 0x1
    // Offset: 0x2B4
    bool EOGGPPBNCMM;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IPlayerClass
    operator ::GlobalNamespace::IPlayerClass() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IPlayerClass*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: private MagicalActual.NetEntity IJJGNKLFGJN
    [[deprecated("Use field access instead!")]] ::MagicalActual::NetEntity*& dyn_IJJGNKLFGJN();
    // Get instance field reference: private System.Boolean HNFCLAFDJBD
    [[deprecated("Use field access instead!")]] bool& dyn_HNFCLAFDJBD();
    // Get instance field reference: private MagicalActual.PlayerClass FNINBDEICCD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerClass*& dyn_FNINBDEICCD();
    // Get instance field reference: private MagicalActual.PlayerAvatar EENJNFDNJBD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerAvatar*& dyn_EENJNFDNJBD();
    // Get instance field reference: private MagicalActual.PlayerCharacter HCFELEODBLD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerCharacter*& dyn_HCFELEODBLD();
    // Get instance field reference: private UnityEngine.GameObject CCEMBLKGKLN
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_CCEMBLKGKLN();
    // Get instance field reference: private UnityEngine.GameObject GKJEHAKEABK
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_GKJEHAKEABK();
    // Get instance field reference: private OrbusTrackedController NAFKPBDAGKG
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OrbusTrackedController*& dyn_NAFKPBDAGKG();
    // Get instance field reference: private MagicalActual.Grabber KENJKDFDJHA
    [[deprecated("Use field access instead!")]] ::MagicalActual::Grabber*& dyn_KENJKDFDJHA();
    // Get instance field reference: private System.Int32 KHIKJLICKKF
    [[deprecated("Use field access instead!")]] int& dyn_KHIKJLICKKF();
    // Get instance field reference: private System.Int32 FJPBNPLIKHA
    [[deprecated("Use field access instead!")]] int& dyn_FJPBNPLIKHA();
    // Get instance field reference: public UnityEngine.GameObject gun
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_gun();
    // Get instance field reference: public UnityEngine.GameObject bowFirePoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_bowFirePoint();
    // Get instance field reference: private UnityEngine.GameObject HDMKCGKJCLA
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_HDMKCGKJCLA();
    // Get instance field reference: public UnityEngine.GameObject superVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_superVfx();
    // Get instance field reference: public UnityEngine.GameObject bulletPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_bulletPrefab();
    // Get instance field reference: public UnityEngine.GameObject bulletTrail
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_bulletTrail();
    // Get instance field reference: public UnityEngine.AudioClip gunFireSfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_gunFireSfx();
    // Get instance field reference: public UnityEngine.GameObject gunFireVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_gunFireVfx();
    // Get instance field reference: private UnityEngine.AudioSource BPFOFPNPABM
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_BPFOFPNPABM();
    // Get instance field reference: public UnityEngine.GameObject vfxBlood
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxBlood();
    // Get instance field reference: public UnityEngine.GameObject vfxCardHit
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxCardHit();
    // Get instance field reference: public UnityEngine.GameObject chamber
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_chamber();
    // Get instance field reference: public MagicalActual.GamblerDeck myDeck
    [[deprecated("Use field access instead!")]] ::MagicalActual::GamblerDeck*& dyn_myDeck();
    // Get instance field reference: private UnityEngine.GameObject JAJMGECJGGA
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_JAJMGECJGGA();
    // Get instance field reference: private System.Int32 GJJDIJAFLGA
    [[deprecated("Use field access instead!")]] int& dyn_GJJDIJAFLGA();
    // Get instance field reference: private System.Boolean BNFNNGFCKBK
    [[deprecated("Use field access instead!")]] bool& dyn_BNFNNGFCKBK();
    // Get instance field reference: private System.Boolean GCCMBLOGLBA
    [[deprecated("Use field access instead!")]] bool& dyn_GCCMBLOGLBA();
    // Get instance field reference: private System.Boolean GHBBMIFHKGO
    [[deprecated("Use field access instead!")]] bool& dyn_GHBBMIFHKGO();
    // Get instance field reference: private System.Boolean HIKIBDCNDAA
    [[deprecated("Use field access instead!")]] bool& dyn_HIKIBDCNDAA();
    // Get instance field reference: private System.Boolean IMNDEEOEOKA
    [[deprecated("Use field access instead!")]] bool& dyn_IMNDEEOEOKA();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt IAIBPCPKDJE
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_IAIBPCPKDJE();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt FABKFLBCALA
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_FABKFLBCALA();
    // Get instance field reference: private System.Boolean DFNIAPKNIDI
    [[deprecated("Use field access instead!")]] bool& dyn_DFNIAPKNIDI();
    // Get instance field reference: public MagicalActual.GamblerDrawnCard drawnCardPrototype
    [[deprecated("Use field access instead!")]] ::MagicalActual::GamblerDrawnCard*& dyn_drawnCardPrototype();
    // Get instance field reference: public UnityEngine.Sprite[] cardTypes
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Sprite*>& dyn_cardTypes();
    // Get instance field reference: private MagicalActual.GamblerDrawnCard MJCEMDFFHGH
    [[deprecated("Use field access instead!")]] ::MagicalActual::GamblerDrawnCard*& dyn_MJCEMDFFHGH();
    // Get instance field reference: public UnityEngine.UI.Image cardsLeftIndicator
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_cardsLeftIndicator();
    // Get instance field reference: public SuperTextMesh cardsLeftNumber
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh*& dyn_cardsLeftNumber();
    // Get instance field reference: public UnityEngine.GameObject[] pendingEmpowerments
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_pendingEmpowerments();
    // Get instance field reference: public UnityEngine.SpriteRenderer pendingCardSprite
    [[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& dyn_pendingCardSprite();
    // Get instance field reference: public UnityEngine.GameObject cardBurnVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_cardBurnVfx();
    // Get instance field reference: public SuperTextMesh gamblerShotRatingPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SuperTextMesh*& dyn_gamblerShotRatingPrefab();
    // Get instance field reference: public UnityEngine.GameObject cardHolder
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_cardHolder();
    // Get instance field reference: private UnityEngine.RaycastHit[] EHLLMIKFMJG
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_EHLLMIKFMJG();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObInt PLNKNIDGBAG
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObInt& dyn_PLNKNIDGBAG();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObInt FDPKCHPKNIG
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObInt& dyn_FDPKCHPKNIG();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt BDAOHHGGFDJ
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_BDAOHHGGFDJ();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt EEIPIJAHOEB
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_EEIPIJAHOEB();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt CBMBPFKNJPE
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_CBMBPFKNJPE();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt HDFPINPAIHK
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_HDFPINPAIHK();
    // Get instance field reference: private System.Single DFNHAODJMDD
    [[deprecated("Use field access instead!")]] float& dyn_DFNHAODJMDD();
    // Get instance field reference: private System.Single IOGAAAHCPGM
    [[deprecated("Use field access instead!")]] float& dyn_IOGAAAHCPGM();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObInt BMMJKBEFLCA
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObInt& dyn_BMMJKBEFLCA();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObInt EMPPOAILJNM
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObInt& dyn_EMPPOAILJNM();
    // Get instance field reference: private UnityEngine.GameObject chargeUpVFX
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_chargeUpVFX();
    // Get instance field reference: private UnityEngine.Vector3 CKKFDCEMMKE
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_CKKFDCEMMKE();
    // Get instance field reference: private ClickedEventHandler HBOOKAFBIEP
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_HBOOKAFBIEP();
    // Get instance field reference: private ClickedEventHandler CNLIOBNKIEO
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_CNLIOBNKIEO();
    // Get instance field reference: private ClickedEventHandler HCJEOHLOMGB
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_HCJEOHLOMGB();
    // Get instance field reference: private ClickedEventHandler BMPJOEDPLCH
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_BMPJOEDPLCH();
    // Get instance field reference: private ClickedEventHandler BHLDGAKLBLB
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_BHLDGAKLBLB();
    // Get instance field reference: private ClickedEventHandler MDEBIKPCABE
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ClickedEventHandler*& dyn_MDEBIKPCABE();
    // Get instance field reference: private System.Byte BFJNJBICBND
    [[deprecated("Use field access instead!")]] uint8_t& dyn_BFJNJBICBND();
    // Get instance field reference: private System.Byte JNHGILGMIOM
    [[deprecated("Use field access instead!")]] uint8_t& dyn_JNHGILGMIOM();
    // Get instance field reference: private System.Byte IPKMHOFLDJN
    [[deprecated("Use field access instead!")]] uint8_t& dyn_IPKMHOFLDJN();
    // Get instance field reference: private System.Byte AFIIKPFAKLG
    [[deprecated("Use field access instead!")]] uint8_t& dyn_AFIIKPFAKLG();
    // Get instance field reference: private System.Boolean EOGGPPBNCMM
    [[deprecated("Use field access instead!")]] bool& dyn_EOGGPPBNCMM();
    // public UnityEngine.GameObject GetWeaponObject()
    // Offset: 0x1221078
    ::UnityEngine::GameObject* GetWeaponObject();
    // private System.Void POJJMOMDIJB(System.Object OMLPNCLFFMJ)
    // Offset: 0x1221080
    void POJJMOMDIJB(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void ClassDisabled()
    // Offset: 0x12212AC
    void ClassDisabled();
    // private System.Void FLNGGEPCPLL(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x1221408
    void FLNGGEPCPLL(::System::Collections::ArrayList* HPEANAHIBAH);
    // public System.Void ShowArrowHit(UnityEngine.Vector3 NHFBFBMNPFC)
    // Offset: 0x1221788
    void ShowArrowHit(::UnityEngine::Vector3 NHFBFBMNPFC);
    // public System.Void WeaponAdjusted()
    // Offset: 0x1221884
    void WeaponAdjusted();
    // private System.Void BBEKFFKECFL()
    // Offset: 0x1221888
    void BBEKFFKECFL();
    // public System.Void MPAODMEDCFB()
    // Offset: 0x12219A4
    void MPAODMEDCFB();
    // public System.Void orbusNetCleanup(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1221ECC
    void orbusNetCleanup(::MagicalActual::NetEntity* CMLIHJCOINC);
    // public System.Void SuperStatusChange(System.Boolean AALBHOKGIOD)
    // Offset: 0x1221F04
    void SuperStatusChange(bool AALBHOKGIOD);
    // private System.Void SwitchWeaponHand(System.Byte DBJMBLGLHIH)
    // Offset: 0x1221F90
    void SwitchWeaponHand(uint8_t DBJMBLGLHIH);
    // public System.Void AKEEGHHHCKK(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1222350
    void AKEEGHHHCKK(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Boolean JCHMBEHPEGD()
    // Offset: 0x12227D8
    bool JCHMBEHPEGD();
    // public UnityEngine.GameObject GJJFMIFEKCO()
    // Offset: 0x1221D54
    ::UnityEngine::GameObject* GJJFMIFEKCO();
    // public System.Void DSLDPFAADD(MagicalActual.NetEntity AHEELFEFBHD, UnityEngine.Vector3 DLLPCCKKJGD, System.Single HDIHLAGOHJM, System.Int32 EMPPOAILJNM, System.Boolean BBJGCOEFPCO)
    // Offset: 0x1222984
    void DSLDPFAADD(::MagicalActual::NetEntity* AHEELFEFBHD, ::UnityEngine::Vector3 DLLPCCKKJGD, float HDIHLAGOHJM, int EMPPOAILJNM, bool BBJGCOEFPCO);
    // private System.Void DisablePrimaryWeapon()
    // Offset: 0x1221338
    void DisablePrimaryWeapon();
    // public System.Void ClassEnabled()
    // Offset: 0x1222AEC
    void ClassEnabled();
    // public System.Void PBIFAKMCEOE()
    // Offset: 0x1222E5C
    void PBIFAKMCEOE();
    // public System.Void DLSDFADFDS(System.Byte DJNNNKCBLFE, System.Byte AAICMGLCANM, System.Boolean EBNPENMPIPB)
    // Offset: 0x1222E60
    void DLSDFADFDS(uint8_t DJNNNKCBLFE, uint8_t AAICMGLCANM, bool EBNPENMPIPB);
    // private System.Void AADBALKKOEA()
    // Offset: 0x1222FBC
    void AADBALKKOEA();
    // private System.Void LDHPDCFNCPE()
    // Offset: 0x1223A08
    void LDHPDCFNCPE();
    // private System.Void PNBDNFMFDEF(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x1223F90
    void PNBDNFMFDEF(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void FAELIAHGFCO(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x122408C
    void FAELIAHGFCO(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Boolean NJECLKPLPPK()
    // Offset: 0x1224244
    bool NJECLKPLPPK();
    // private System.Void GMJGBHIFIBO()
    // Offset: 0x12242E4
    void GMJGBHIFIBO();
    // private System.Void KGCMHEAFJBG(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x1224408
    void KGCMHEAFJBG(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // public System.Void UpdateClassBar()
    // Offset: 0x1222C40
    void UpdateClassBar();
    // private System.Boolean CIBDJNJGODA()
    // Offset: 0x122465C
    bool CIBDJNJGODA();
    // public System.Void ToggleAdjustWeapon()
    // Offset: 0x12246FC
    void ToggleAdjustWeapon();
    // private System.Void NGHHHGHEGEA(System.Object OMLPNCLFFMJ)
    // Offset: 0x1224C24
    void NGHHHGHEGEA(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void NEMKNLGDEAK(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1224CC8
    void NEMKNLGDEAK(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void KAGGNKGFLBB()
    // Offset: 0x1225150
    void KAGGNKGFLBB();
    // public System.Void LMGJADIMGHC()
    // Offset: 0x1225620
    void LMGJADIMGHC();
    // private System.Void KEGCEFDMKJD(System.Object OMLPNCLFFMJ)
    // Offset: 0x1225850
    void KEGCEFDMKJD(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void .ctor()
    // Offset: 0x1225990
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Gambler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::Gambler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Gambler*, creationType>()));
    }
    // public System.Void HBPNPCKBIBC()
    // Offset: 0x1225BF8
    void HBPNPCKBIBC();
    // private System.Void ENIGECPOHND(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x1225C84
    void ENIGECPOHND(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void BMDOEKFOCHD()
    // Offset: 0x1226030
    void BMDOEKFOCHD();
    // private System.Void IEAKMOHIBDD()
    // Offset: 0x1222878
    void IEAKMOHIBDD();
    // private System.Void EnablePrimaryWeapon()
    // Offset: 0x12265C0
    void EnablePrimaryWeapon();
    // public System.Void OnDestroy()
    // Offset: 0x1226678
    void OnDestroy();
    // private System.Void KDDEBJFALPO(System.Object OMLPNCLFFMJ)
    // Offset: 0x12268A8
    void KDDEBJFALPO(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void GBCHLGNALEH(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x1226ABC
    void GBCHLGNALEH(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // public System.Void orbusNetInit(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1226DD0
    void orbusNetInit(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void EnableSecondaryWeapon()
    // Offset: 0x1227228
    void EnableSecondaryWeapon();
    // private System.Void JCEOHIIBEOM(UnityEngine.Vector3 NHFBFBMNPFC, UnityEngine.Vector3 NKJBILNNJNP, UnityEngine.Vector3 DNGMEFPPBDA, System.Int32 EMPPOAILJNM, System.Boolean MKAGIGANADO)
    // Offset: 0x1223550
    void JCEOHIIBEOM(::UnityEngine::Vector3 NHFBFBMNPFC, ::UnityEngine::Vector3 NKJBILNNJNP, ::UnityEngine::Vector3 DNGMEFPPBDA, int EMPPOAILJNM, bool MKAGIGANADO);
    // private System.Void FixedUpdate()
    // Offset: 0x12274D4
    void FixedUpdate();
    // private System.Void Start()
    // Offset: 0x1227BE0
    void Start();
    // private System.Void OLFPEAIKDNO()
    // Offset: 0x1227F88
    void OLFPEAIKDNO();
    // private System.Void NEAMGPIBLPN(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x1228444
    void NEAMGPIBLPN(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void Awake()
    // Offset: 0x1228540
    void Awake();
    // private System.Void AHLIELPMEFB()
    // Offset: 0x12285F8
    void AHLIELPMEFB();
    // public UnityEngine.GameObject GetWeaponSkin()
    // Offset: 0x1224AAC
    ::UnityEngine::GameObject* GetWeaponSkin();
    // public System.Void LFPBMDBOCHK()
    // Offset: 0x1228788
    void LFPBMDBOCHK();
    // private System.Void DisableSecondaryWeapon()
    // Offset: 0x12213F8
    void DisableSecondaryWeapon();
    // private System.Void FIFIELEIHAM()
    // Offset: 0x1226914
    void FIFIELEIHAM();
    // private System.Void PIJFJICGOBI(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x1228814
    void PIJFJICGOBI(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void ODPOOCLJODC()
    // Offset: 0x122734C
    void ODPOOCLJODC();
    // private System.Void IJEIBJOPLCI(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x1228B2C
    void IJEIBJOPLCI(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void NACMFGIOBMK()
    // Offset: 0x12245C0
    void NACMFGIOBMK();
    // public System.Void AKMNLILDOIJ(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1228E9C
    void AKMNLILDOIJ(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void BMJDKMDCIOJ(System.Object OMLPNCLFFMJ)
    // Offset: 0x1228ED4
    void BMJDKMDCIOJ(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void DBLMOEPKDPG(System.Object OMLPNCLFFMJ)
    // Offset: 0x1228F78
    void DBLMOEPKDPG(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void LEMNJFHAAHK()
    // Offset: 0x12210EC
    void LEMNJFHAAHK();
    // public System.Void ReleaseSecondaryGrabber()
    // Offset: 0x12290BC
    void ReleaseSecondaryGrabber();
    // public System.Void AvatarEquipmentChanged()
    // Offset: 0x1229174
    void AvatarEquipmentChanged();
    // private System.Void IBLANGHOIGF(System.Object OMLPNCLFFMJ)
    // Offset: 0x1229444
    void IBLANGHOIGF(::Il2CppObject* OMLPNCLFFMJ);
  }; // MagicalActual.Gambler
  #pragma pack(pop)
  static check_size<sizeof(Gambler), 692 + sizeof(bool)> __MagicalActual_GamblerSizeCheck;
  static_assert(sizeof(Gambler) == 0x2B5);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::Gambler::GetWeaponObject
// Il2CppName: GetWeaponObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::GetWeaponObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "GetWeaponObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::POJJMOMDIJB
// Il2CppName: POJJMOMDIJB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::Il2CppObject*)>(&MagicalActual::Gambler::POJJMOMDIJB)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "POJJMOMDIJB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::ClassDisabled
// Il2CppName: ClassDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::ClassDisabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "ClassDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::FLNGGEPCPLL
// Il2CppName: FLNGGEPCPLL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::System::Collections::ArrayList*)>(&MagicalActual::Gambler::FLNGGEPCPLL)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "FLNGGEPCPLL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::ShowArrowHit
// Il2CppName: ShowArrowHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::UnityEngine::Vector3)>(&MagicalActual::Gambler::ShowArrowHit)> {
  static const MethodInfo* get() {
    static auto* NHFBFBMNPFC = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "ShowArrowHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{NHFBFBMNPFC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::WeaponAdjusted
// Il2CppName: WeaponAdjusted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::WeaponAdjusted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "WeaponAdjusted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::BBEKFFKECFL
// Il2CppName: BBEKFFKECFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::BBEKFFKECFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "BBEKFFKECFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::MPAODMEDCFB
// Il2CppName: MPAODMEDCFB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::MPAODMEDCFB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "MPAODMEDCFB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::orbusNetCleanup
// Il2CppName: orbusNetCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Gambler::orbusNetCleanup)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "orbusNetCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::SuperStatusChange
// Il2CppName: SuperStatusChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(bool)>(&MagicalActual::Gambler::SuperStatusChange)> {
  static const MethodInfo* get() {
    static auto* AALBHOKGIOD = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "SuperStatusChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AALBHOKGIOD});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::SwitchWeaponHand
// Il2CppName: SwitchWeaponHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(uint8_t)>(&MagicalActual::Gambler::SwitchWeaponHand)> {
  static const MethodInfo* get() {
    static auto* DBJMBLGLHIH = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "SwitchWeaponHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{DBJMBLGLHIH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::AKEEGHHHCKK
// Il2CppName: AKEEGHHHCKK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Gambler::AKEEGHHHCKK)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "AKEEGHHHCKK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::JCHMBEHPEGD
// Il2CppName: JCHMBEHPEGD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::JCHMBEHPEGD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "JCHMBEHPEGD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::GJJFMIFEKCO
// Il2CppName: GJJFMIFEKCO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::GJJFMIFEKCO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "GJJFMIFEKCO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::DSLDPFAADD
// Il2CppName: DSLDPFAADD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::MagicalActual::NetEntity*, ::UnityEngine::Vector3, float, int, bool)>(&MagicalActual::Gambler::DSLDPFAADD)> {
  static const MethodInfo* get() {
    static auto* AHEELFEFBHD = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    static auto* DLLPCCKKJGD = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* HDIHLAGOHJM = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* EMPPOAILJNM = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* BBJGCOEFPCO = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "DSLDPFAADD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AHEELFEFBHD, DLLPCCKKJGD, HDIHLAGOHJM, EMPPOAILJNM, BBJGCOEFPCO});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::DisablePrimaryWeapon
// Il2CppName: DisablePrimaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::DisablePrimaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "DisablePrimaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::ClassEnabled
// Il2CppName: ClassEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::ClassEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "ClassEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::PBIFAKMCEOE
// Il2CppName: PBIFAKMCEOE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::PBIFAKMCEOE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "PBIFAKMCEOE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::DLSDFADFDS
// Il2CppName: DLSDFADFDS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(uint8_t, uint8_t, bool)>(&MagicalActual::Gambler::DLSDFADFDS)> {
  static const MethodInfo* get() {
    static auto* DJNNNKCBLFE = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* AAICMGLCANM = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* EBNPENMPIPB = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "DLSDFADFDS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{DJNNNKCBLFE, AAICMGLCANM, EBNPENMPIPB});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::AADBALKKOEA
// Il2CppName: AADBALKKOEA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::AADBALKKOEA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "AADBALKKOEA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::LDHPDCFNCPE
// Il2CppName: LDHPDCFNCPE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::LDHPDCFNCPE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "LDHPDCFNCPE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::PNBDNFMFDEF
// Il2CppName: PNBDNFMFDEF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::System::Collections::ArrayList*)>(&MagicalActual::Gambler::PNBDNFMFDEF)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "PNBDNFMFDEF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::FAELIAHGFCO
// Il2CppName: FAELIAHGFCO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::System::Collections::ArrayList*)>(&MagicalActual::Gambler::FAELIAHGFCO)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "FAELIAHGFCO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::NJECLKPLPPK
// Il2CppName: NJECLKPLPPK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::NJECLKPLPPK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "NJECLKPLPPK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::GMJGBHIFIBO
// Il2CppName: GMJGBHIFIBO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::GMJGBHIFIBO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "GMJGBHIFIBO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::KGCMHEAFJBG
// Il2CppName: KGCMHEAFJBG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Gambler::KGCMHEAFJBG)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "KGCMHEAFJBG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::UpdateClassBar
// Il2CppName: UpdateClassBar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::UpdateClassBar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "UpdateClassBar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::CIBDJNJGODA
// Il2CppName: CIBDJNJGODA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::CIBDJNJGODA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "CIBDJNJGODA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::ToggleAdjustWeapon
// Il2CppName: ToggleAdjustWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::ToggleAdjustWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "ToggleAdjustWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::NGHHHGHEGEA
// Il2CppName: NGHHHGHEGEA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::Il2CppObject*)>(&MagicalActual::Gambler::NGHHHGHEGEA)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "NGHHHGHEGEA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::NEMKNLGDEAK
// Il2CppName: NEMKNLGDEAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Gambler::NEMKNLGDEAK)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "NEMKNLGDEAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::KAGGNKGFLBB
// Il2CppName: KAGGNKGFLBB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::KAGGNKGFLBB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "KAGGNKGFLBB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::LMGJADIMGHC
// Il2CppName: LMGJADIMGHC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::LMGJADIMGHC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "LMGJADIMGHC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::KEGCEFDMKJD
// Il2CppName: KEGCEFDMKJD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::Il2CppObject*)>(&MagicalActual::Gambler::KEGCEFDMKJD)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "KEGCEFDMKJD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::Gambler::HBPNPCKBIBC
// Il2CppName: HBPNPCKBIBC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::HBPNPCKBIBC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "HBPNPCKBIBC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::ENIGECPOHND
// Il2CppName: ENIGECPOHND
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Gambler::ENIGECPOHND)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "ENIGECPOHND", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::BMDOEKFOCHD
// Il2CppName: BMDOEKFOCHD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::BMDOEKFOCHD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "BMDOEKFOCHD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::IEAKMOHIBDD
// Il2CppName: IEAKMOHIBDD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::IEAKMOHIBDD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "IEAKMOHIBDD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::EnablePrimaryWeapon
// Il2CppName: EnablePrimaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::EnablePrimaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "EnablePrimaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::KDDEBJFALPO
// Il2CppName: KDDEBJFALPO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::Il2CppObject*)>(&MagicalActual::Gambler::KDDEBJFALPO)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "KDDEBJFALPO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::GBCHLGNALEH
// Il2CppName: GBCHLGNALEH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Gambler::GBCHLGNALEH)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "GBCHLGNALEH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::orbusNetInit
// Il2CppName: orbusNetInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Gambler::orbusNetInit)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "orbusNetInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::EnableSecondaryWeapon
// Il2CppName: EnableSecondaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::EnableSecondaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "EnableSecondaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::JCEOHIIBEOM
// Il2CppName: JCEOHIIBEOM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, int, bool)>(&MagicalActual::Gambler::JCEOHIIBEOM)> {
  static const MethodInfo* get() {
    static auto* NHFBFBMNPFC = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* NKJBILNNJNP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* DNGMEFPPBDA = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* EMPPOAILJNM = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* MKAGIGANADO = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "JCEOHIIBEOM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{NHFBFBMNPFC, NKJBILNNJNP, DNGMEFPPBDA, EMPPOAILJNM, MKAGIGANADO});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::OLFPEAIKDNO
// Il2CppName: OLFPEAIKDNO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::OLFPEAIKDNO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "OLFPEAIKDNO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::NEAMGPIBLPN
// Il2CppName: NEAMGPIBLPN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::System::Collections::ArrayList*)>(&MagicalActual::Gambler::NEAMGPIBLPN)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "NEAMGPIBLPN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::AHLIELPMEFB
// Il2CppName: AHLIELPMEFB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::AHLIELPMEFB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "AHLIELPMEFB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::GetWeaponSkin
// Il2CppName: GetWeaponSkin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::GetWeaponSkin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "GetWeaponSkin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::LFPBMDBOCHK
// Il2CppName: LFPBMDBOCHK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::LFPBMDBOCHK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "LFPBMDBOCHK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::DisableSecondaryWeapon
// Il2CppName: DisableSecondaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::DisableSecondaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "DisableSecondaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::FIFIELEIHAM
// Il2CppName: FIFIELEIHAM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::FIFIELEIHAM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "FIFIELEIHAM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::PIJFJICGOBI
// Il2CppName: PIJFJICGOBI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Gambler::PIJFJICGOBI)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "PIJFJICGOBI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::ODPOOCLJODC
// Il2CppName: ODPOOCLJODC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::ODPOOCLJODC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "ODPOOCLJODC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::IJEIBJOPLCI
// Il2CppName: IJEIBJOPLCI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::System::Collections::ArrayList*)>(&MagicalActual::Gambler::IJEIBJOPLCI)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "IJEIBJOPLCI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::NACMFGIOBMK
// Il2CppName: NACMFGIOBMK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::NACMFGIOBMK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "NACMFGIOBMK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::AKMNLILDOIJ
// Il2CppName: AKMNLILDOIJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Gambler::AKMNLILDOIJ)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "AKMNLILDOIJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::BMJDKMDCIOJ
// Il2CppName: BMJDKMDCIOJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::Il2CppObject*)>(&MagicalActual::Gambler::BMJDKMDCIOJ)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "BMJDKMDCIOJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::DBLMOEPKDPG
// Il2CppName: DBLMOEPKDPG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::Il2CppObject*)>(&MagicalActual::Gambler::DBLMOEPKDPG)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "DBLMOEPKDPG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::LEMNJFHAAHK
// Il2CppName: LEMNJFHAAHK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::LEMNJFHAAHK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "LEMNJFHAAHK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::ReleaseSecondaryGrabber
// Il2CppName: ReleaseSecondaryGrabber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::ReleaseSecondaryGrabber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "ReleaseSecondaryGrabber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::AvatarEquipmentChanged
// Il2CppName: AvatarEquipmentChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)()>(&MagicalActual::Gambler::AvatarEquipmentChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "AvatarEquipmentChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Gambler::IBLANGHOIGF
// Il2CppName: IBLANGHOIGF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Gambler::*)(::Il2CppObject*)>(&MagicalActual::Gambler::IBLANGHOIGF)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Gambler*), "IBLANGHOIGF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
