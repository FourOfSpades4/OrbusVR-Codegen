// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IPlayerClass
#include "GlobalNamespace/IPlayerClass.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: UnityEngine.Ray
#include "UnityEngine/Ray.hpp"
// Including type: CodeStage.AntiCheat.ObscuredTypes.ObFlt
#include "CodeStage/AntiCheat/ObscuredTypes/ObFlt.hpp"
// Including type: CodeStage.AntiCheat.ObscuredTypes.ObInt
#include "CodeStage/AntiCheat/ObscuredTypes/ObInt.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: NetEntity
  class NetEntity;
  // Forward declaring type: PlayerClass
  class PlayerClass;
  // Forward declaring type: PlayerAvatar
  class PlayerAvatar;
  // Forward declaring type: PlayerCharacter
  class PlayerCharacter;
  // Forward declaring type: AttackVfxController
  class AttackVfxController;
  // Forward declaring type: SwordHit
  class SwordHit;
  // Forward declaring type: ShieldHit
  class ShieldHit;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: BoxCollider
  class BoxCollider;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: TrailRenderer
  class TrailRenderer;
  // Forward declaring type: Gradient
  class Gradient;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OrbusTrackedController
  class OrbusTrackedController;
  // Forward declaring type: ClickedEventArgs
  struct ClickedEventArgs;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: BinaryWriter
  class BinaryWriter;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Swordboard
  class Swordboard;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::Swordboard);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::Swordboard*, "MagicalActual", "Swordboard");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x590
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.Swordboard
  // [TokenAttribute] Offset: FFFFFFFF
  class Swordboard : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IPlayerClass*/ {
    public:
    // Nested type: ::MagicalActual::Swordboard::$$c__DisplayClass151_0
    class $$c__DisplayClass151_0;
    // Nested type: ::MagicalActual::Swordboard::$$c__DisplayClass151_1
    class $$c__DisplayClass151_1;
    // Nested type: ::MagicalActual::Swordboard::$$c__DisplayClass151_2
    class $$c__DisplayClass151_2;
    // Nested type: ::MagicalActual::Swordboard::$$c__DisplayClass151_3
    class $$c__DisplayClass151_3;
    // Nested type: ::MagicalActual::Swordboard::$$c
    class $$c;
    // Nested type: ::MagicalActual::Swordboard::$$c__DisplayClass159_0
    class $$c__DisplayClass159_0;
    public:
    // private System.Single LEGNJPIEHKE
    // Size: 0x4
    // Offset: 0x18
    float LEGNJPIEHKE;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single PMGMDMHOPMP
    // Size: 0x4
    // Offset: 0x1C
    float PMGMDMHOPMP;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 HFGIDHPFBLD
    // Size: 0x4
    // Offset: 0x20
    int HFGIDHPFBLD;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single HitBoxX
    // Size: 0x4
    // Offset: 0x24
    float HitBoxX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single HitBoxY
    // Size: 0x4
    // Offset: 0x28
    float HitBoxY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single HitBoxZ
    // Size: 0x4
    // Offset: 0x2C
    float HitBoxZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x30
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private MagicalActual.NetEntity IJJGNKLFGJN
    // Size: 0x8
    // Offset: 0x38
    ::MagicalActual::NetEntity* IJJGNKLFGJN;
    // Field size check
    static_assert(sizeof(::MagicalActual::NetEntity*) == 0x8);
    // private System.Boolean HNFCLAFDJBD
    // Size: 0x1
    // Offset: 0x40
    bool HNFCLAFDJBD;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: HNFCLAFDJBD and: FNINBDEICCD
    char __padding8[0x7] = {};
    // private MagicalActual.PlayerClass FNINBDEICCD
    // Size: 0x8
    // Offset: 0x48
    ::MagicalActual::PlayerClass* FNINBDEICCD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerClass*) == 0x8);
    // private MagicalActual.PlayerAvatar EENJNFDNJBD
    // Size: 0x8
    // Offset: 0x50
    ::MagicalActual::PlayerAvatar* EENJNFDNJBD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerAvatar*) == 0x8);
    // private MagicalActual.PlayerCharacter HCFELEODBLD
    // Size: 0x8
    // Offset: 0x58
    ::MagicalActual::PlayerCharacter* HCFELEODBLD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerCharacter*) == 0x8);
    // public UnityEngine.GameObject shield
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* shield;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.BoxCollider IKKIMNOLKPP
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::BoxCollider* IKKIMNOLKPP;
    // Field size check
    static_assert(sizeof(::UnityEngine::BoxCollider*) == 0x8);
    // public UnityEngine.GameObject sword
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* sword;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject KAJIJDJAAKK
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::GameObject* KAJIJDJAAKK;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Transform JJDMDLCCPDD
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Transform* JJDMDLCCPDD;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single focusDistance
    // Size: 0x4
    // Offset: 0x88
    float focusDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 HEFAPBNPAPK
    // Size: 0x4
    // Offset: 0x8C
    int HEFAPBNPAPK;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 HFKELBOMOCO
    // Size: 0x4
    // Offset: 0x90
    int HFKELBOMOCO;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: HFKELBOMOCO and: JEJAAPDDFCH
    char __padding19[0x4] = {};
    // private UnityEngine.RaycastHit[] JEJAAPDDFCH
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::UnityEngine::RaycastHit> JEJAAPDDFCH;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private UnityEngine.Ray CFJNLPEPFNH
    // Size: 0x18
    // Offset: 0xA0
    ::UnityEngine::Ray CFJNLPEPFNH;
    // Field size check
    static_assert(sizeof(::UnityEngine::Ray) == 0x18);
    // private System.Boolean LHCGGEJOAMF
    // Size: 0x1
    // Offset: 0xB8
    bool LHCGGEJOAMF;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean PDOGIKMODPI
    // Size: 0x1
    // Offset: 0xB9
    bool PDOGIKMODPI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean CILLHAJIDIB
    // Size: 0x1
    // Offset: 0xBA
    bool CILLHAJIDIB;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: CILLHAJIDIB and: focusTarget
    char __padding24[0x5] = {};
    // public UnityEngine.GameObject focusTarget
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::GameObject* focusTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxHit
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::GameObject* vfxHit;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject[] vfxBlood
    // Size: 0x8
    // Offset: 0xD0
    ::ArrayW<::UnityEngine::GameObject*> vfxBlood;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject[] vfxSlash
    // Size: 0x8
    // Offset: 0xD8
    ::ArrayW<::UnityEngine::GameObject*> vfxSlash;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject vfxComboAggro
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::GameObject* vfxComboAggro;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxComboDamage
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::GameObject* vfxComboDamage;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxComboHamstring
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::GameObject* vfxComboHamstring;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxComboCleave
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::GameObject* vfxComboCleave;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxTaunt
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::GameObject* vfxTaunt;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxStun
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::GameObject* vfxStun;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxBlock
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::GameObject* vfxBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject superVfx
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::GameObject* superVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject collisionBoxPrefab
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::GameObject* collisionBoxPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxHeman
    // Size: 0x8
    // Offset: 0x128
    ::UnityEngine::GameObject* vfxHeman;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxHemanReady
    // Size: 0x8
    // Offset: 0x130
    ::UnityEngine::GameObject* vfxHemanReady;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject PPJCBODBHOH
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::GameObject* PPJCBODBHOH;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject HDMKCGKJCLA
    // Size: 0x8
    // Offset: 0x140
    ::UnityEngine::GameObject* HDMKCGKJCLA;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private MagicalActual.AttackVfxController[] ACNMJOJPLMB
    // Size: 0x8
    // Offset: 0x148
    ::ArrayW<::MagicalActual::AttackVfxController*> ACNMJOJPLMB;
    // Field size check
    static_assert(sizeof(::ArrayW<::MagicalActual::AttackVfxController*>) == 0x8);
    // private MagicalActual.AttackVfxController FLAMDFGHEJH
    // Size: 0x8
    // Offset: 0x150
    ::MagicalActual::AttackVfxController* FLAMDFGHEJH;
    // Field size check
    static_assert(sizeof(::MagicalActual::AttackVfxController*) == 0x8);
    // public UnityEngine.GameObject tauntHorn
    // Size: 0x8
    // Offset: 0x158
    ::UnityEngine::GameObject* tauntHorn;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Material shieldEnabledMaterial
    // Size: 0x8
    // Offset: 0x160
    ::UnityEngine::Material* shieldEnabledMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material shieldDisabledMaterial
    // Size: 0x8
    // Offset: 0x168
    ::UnityEngine::Material* shieldDisabledMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private OrbusTrackedController IKCANGJCBED
    // Size: 0x8
    // Offset: 0x170
    ::GlobalNamespace::OrbusTrackedController* IKCANGJCBED;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OrbusTrackedController*) == 0x8);
    // private OrbusTrackedController HKFGNKJKLPH
    // Size: 0x8
    // Offset: 0x178
    ::GlobalNamespace::OrbusTrackedController* HKFGNKJKLPH;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OrbusTrackedController*) == 0x8);
    // private UnityEngine.GameObject CCEMBLKGKLN
    // Size: 0x8
    // Offset: 0x180
    ::UnityEngine::GameObject* CCEMBLKGKLN;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject GKJEHAKEABK
    // Size: 0x8
    // Offset: 0x188
    ::UnityEngine::GameObject* GKJEHAKEABK;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject BGFIJNGFMFO
    // Size: 0x8
    // Offset: 0x190
    ::UnityEngine::GameObject* BGFIJNGFMFO;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean GCCMBLOGLBA
    // Size: 0x1
    // Offset: 0x198
    bool GCCMBLOGLBA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean GHBBMIFHKGO
    // Size: 0x1
    // Offset: 0x199
    bool GHBBMIFHKGO;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean HIKIBDCNDAA
    // Size: 0x1
    // Offset: 0x19A
    bool HIKIBDCNDAA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean IMNDEEOEOKA
    // Size: 0x1
    // Offset: 0x19B
    bool IMNDEEOEOKA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 KHIKJLICKKF
    // Size: 0x4
    // Offset: 0x19C
    int KHIKJLICKKF;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 FJPBNPLIKHA
    // Size: 0x4
    // Offset: 0x1A0
    int FJPBNPLIKHA;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: FJPBNPLIKHA and: DKBAJEHLDMP
    char __padding57[0x4] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt DKBAJEHLDMP
    // Size: 0x19
    // Offset: 0x1A8
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt DKBAJEHLDMP;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: DKBAJEHLDMP and: OJHGBHCKPCB
    char __padding58[0x7] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt OJHGBHCKPCB
    // Size: 0x19
    // Offset: 0x1C8
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt OJHGBHCKPCB;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: OJHGBHCKPCB and: EKMNMNLFENN
    char __padding59[0x7] = {};
    // private System.Boolean EKMNMNLFENN
    // Size: 0x1
    // Offset: 0x1E8
    bool EKMNMNLFENN;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: EKMNMNLFENN and: KBFBPJGLNMA
    char __padding60[0x7] = {};
    // private UnityEngine.GameObject KBFBPJGLNMA
    // Size: 0x8
    // Offset: 0x1F0
    ::UnityEngine::GameObject* KBFBPJGLNMA;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single OKGLIFFGAGE
    // Size: 0x4
    // Offset: 0x1F8
    float OKGLIFFGAGE;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 KCAHPJFPBAH
    // Size: 0xC
    // Offset: 0x1FC
    ::UnityEngine::Vector3 KCAHPJFPBAH;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 GAEJBDLAPEK
    // Size: 0xC
    // Offset: 0x208
    ::UnityEngine::Vector3 GAEJBDLAPEK;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 DGOMGJKIHLK
    // Size: 0xC
    // Offset: 0x214
    ::UnityEngine::Vector3 DGOMGJKIHLK;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 AIKDIMABMDG
    // Size: 0xC
    // Offset: 0x220
    ::UnityEngine::Vector3 AIKDIMABMDG;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 FAIGECBHGJK
    // Size: 0xC
    // Offset: 0x22C
    ::UnityEngine::Vector3 FAIGECBHGJK;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 OPLJCKCEAOP
    // Size: 0xC
    // Offset: 0x238
    ::UnityEngine::Vector3 OPLJCKCEAOP;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 LABLJCLAGAH
    // Size: 0xC
    // Offset: 0x244
    ::UnityEngine::Vector3 LABLJCLAGAH;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 IBKIPLACFPI
    // Size: 0xC
    // Offset: 0x250
    ::UnityEngine::Vector3 IBKIPLACFPI;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 LAJKIBBOMMH
    // Size: 0xC
    // Offset: 0x25C
    ::UnityEngine::Vector3 LAJKIBBOMMH;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 GKNJLGMHGCH
    // Size: 0xC
    // Offset: 0x268
    ::UnityEngine::Vector3 GKNJLGMHGCH;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 OGPCFHFCNBK
    // Size: 0xC
    // Offset: 0x274
    ::UnityEngine::Vector3 OGPCFHFCNBK;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 OJDNMNLHGAN
    // Size: 0xC
    // Offset: 0x280
    ::UnityEngine::Vector3 OJDNMNLHGAN;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: OJDNMNLHGAN and: NDFMINDFCND
    char __padding74[0x4] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt NDFMINDFCND
    // Size: 0x19
    // Offset: 0x290
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt NDFMINDFCND;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: NDFMINDFCND and: IOGGBIPFCFC
    char __padding75[0x7] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt IOGGBIPFCFC
    // Size: 0x19
    // Offset: 0x2B0
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt IOGGBIPFCFC;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: IOGGBIPFCFC and: ABMKILKCODB
    char __padding76[0x7] = {};
    // private System.Boolean ABMKILKCODB
    // Size: 0x1
    // Offset: 0x2D0
    bool ABMKILKCODB;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ABMKILKCODB and: LCNIHHAOGOK
    char __padding77[0x7] = {};
    // private System.Collections.Generic.List`1<MagicalActual.SwordHit> LCNIHHAOGOK
    // Size: 0x8
    // Offset: 0x2D8
    ::System::Collections::Generic::List_1<::MagicalActual::SwordHit*>* LCNIHHAOGOK;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::MagicalActual::SwordHit*>*) == 0x8);
    // private System.Boolean NGOOKDNMCNG
    // Size: 0x1
    // Offset: 0x2E0
    bool NGOOKDNMCNG;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: NGOOKDNMCNG and: KPMHJKHFAFG
    char __padding79[0x7] = {};
    // private System.Collections.Generic.List`1<MagicalActual.ShieldHit> KPMHJKHFAFG
    // Size: 0x8
    // Offset: 0x2E8
    ::System::Collections::Generic::List_1<::MagicalActual::ShieldHit*>* KPMHJKHFAFG;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::MagicalActual::ShieldHit*>*) == 0x8);
    // private System.Int32 LJOIIEHFLPB
    // Size: 0x4
    // Offset: 0x2F0
    int LJOIIEHFLPB;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: LJOIIEHFLPB and: LNFJGOLBGBB
    char __padding81[0x4] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt LNFJGOLBGBB
    // Size: 0x19
    // Offset: 0x2F8
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt LNFJGOLBGBB;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: LNFJGOLBGBB and: FOHNMMBGCOL
    char __padding82[0x7] = {};
    // private System.Boolean FOHNMMBGCOL
    // Size: 0x1
    // Offset: 0x318
    bool FOHNMMBGCOL;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean GJGDPJMMHEC
    // Size: 0x1
    // Offset: 0x319
    bool GJGDPJMMHEC;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: GJGDPJMMHEC and: JGOFCLGJBAA
    char __padding84[0x6] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt JGOFCLGJBAA
    // Size: 0x19
    // Offset: 0x320
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt JGOFCLGJBAA;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: JGOFCLGJBAA and: MIAPIDLBHID
    char __padding85[0x7] = {};
    // private System.Byte MIAPIDLBHID
    // Size: 0x1
    // Offset: 0x340
    uint8_t MIAPIDLBHID;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Boolean OMMPLPMLPAP
    // Size: 0x1
    // Offset: 0x341
    bool OMMPLPMLPAP;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: OMMPLPMLPAP and: trailRenderer
    char __padding87[0x6] = {};
    // private UnityEngine.TrailRenderer trailRenderer
    // Size: 0x8
    // Offset: 0x348
    ::UnityEngine::TrailRenderer* trailRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::TrailRenderer*) == 0x8);
    // private UnityEngine.Gradient damageColor
    // Size: 0x8
    // Offset: 0x350
    ::UnityEngine::Gradient* damageColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private UnityEngine.Gradient cleaveColor
    // Size: 0x8
    // Offset: 0x358
    ::UnityEngine::Gradient* cleaveColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private UnityEngine.Gradient provokeColor
    // Size: 0x8
    // Offset: 0x360
    ::UnityEngine::Gradient* provokeColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private UnityEngine.Gradient hamstringColor
    // Size: 0x8
    // Offset: 0x368
    ::UnityEngine::Gradient* hamstringColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private UnityEngine.Gradient IFPBJIALLDM
    // Size: 0x8
    // Offset: 0x370
    ::UnityEngine::Gradient* IFPBJIALLDM;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private UnityEngine.AudioSource chargedSound
    // Size: 0x8
    // Offset: 0x378
    ::UnityEngine::AudioSource* chargedSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioSource chargingSound
    // Size: 0x8
    // Offset: 0x380
    ::UnityEngine::AudioSource* chargingSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt AOLJBMLMFMB
    // Size: 0x19
    // Offset: 0x388
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt AOLJBMLMFMB;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: AOLJBMLMFMB and: LNCEKCNBMFH
    char __padding96[0x7] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt LNCEKCNBMFH
    // Size: 0x19
    // Offset: 0x3A8
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt LNCEKCNBMFH;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: LNCEKCNBMFH and: shieldPlantIcon
    char __padding97[0x7] = {};
    // public UnityEngine.UI.Image shieldPlantIcon
    // Size: 0x8
    // Offset: 0x3C8
    ::UnityEngine::UI::Image* shieldPlantIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt COODJJNCBFE
    // Size: 0x19
    // Offset: 0x3D0
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt COODJJNCBFE;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: COODJJNCBFE and: HDLEEPKBAAA
    char __padding99[0x7] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt HDLEEPKBAAA
    // Size: 0x19
    // Offset: 0x3F0
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt HDLEEPKBAAA;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: HDLEEPKBAAA and: stunIcon
    char __padding100[0x7] = {};
    // public UnityEngine.UI.Image stunIcon
    // Size: 0x8
    // Offset: 0x410
    ::UnityEngine::UI::Image* stunIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt MNAFHEKDOEM
    // Size: 0x19
    // Offset: 0x418
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt MNAFHEKDOEM;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: MNAFHEKDOEM and: GJHPDBEPBKN
    char __padding102[0x7] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt GJHPDBEPBKN
    // Size: 0x19
    // Offset: 0x438
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt GJHPDBEPBKN;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: GJHPDBEPBKN and: NDFEKEDKBNK
    char __padding103[0x7] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObInt NDFEKEDKBNK
    // Size: 0x11
    // Offset: 0x458
    ::CodeStage::AntiCheat::ObscuredTypes::ObInt NDFEKEDKBNK;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObInt) == 0x11);
    // Padding between fields: NDFEKEDKBNK and: teleportIcon
    char __padding104[0x7] = {};
    // public UnityEngine.UI.Image teleportIcon
    // Size: 0x8
    // Offset: 0x470
    ::UnityEngine::UI::Image* teleportIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.UI.Image rush1On
    // Size: 0x8
    // Offset: 0x478
    ::UnityEngine::UI::Image* rush1On;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.UI.Image rush1Off
    // Size: 0x8
    // Offset: 0x480
    ::UnityEngine::UI::Image* rush1Off;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.UI.Image rush2On
    // Size: 0x8
    // Offset: 0x488
    ::UnityEngine::UI::Image* rush2On;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.UI.Image rush2Off
    // Size: 0x8
    // Offset: 0x490
    ::UnityEngine::UI::Image* rush2Off;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // private UnityEngine.Vector3 HACCECAIEBG
    // Size: 0xC
    // Offset: 0x498
    ::UnityEngine::Vector3 HACCECAIEBG;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean DLIKANCFGGN
    // Size: 0x1
    // Offset: 0x4A4
    bool DLIKANCFGGN;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: DLIKANCFGGN and: EPPIPLHANGD
    char __padding111[0x3] = {};
    // private UnityEngine.RaycastHit[] EPPIPLHANGD
    // Size: 0x8
    // Offset: 0x4A8
    ::ArrayW<::UnityEngine::RaycastHit> EPPIPLHANGD;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private UnityEngine.GameObject EEJLAGDKGFM
    // Size: 0x8
    // Offset: 0x4B0
    ::UnityEngine::GameObject* EEJLAGDKGFM;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> DLOHFFHLDGF
    // Size: 0x8
    // Offset: 0x4B8
    ::System::Collections::Generic::List_1<::UnityEngine::Vector3>* DLOHFFHLDGF;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*) == 0x8);
    // private UnityEngine.Collider[] NPJAMHKBLLM
    // Size: 0x8
    // Offset: 0x4C0
    ::ArrayW<::UnityEngine::Collider*> NPJAMHKBLLM;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt CEGIEONPEBG
    // Size: 0x19
    // Offset: 0x4C8
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt CEGIEONPEBG;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: CEGIEONPEBG and: EBFEFPEEDDI
    char __padding116[0x7] = {};
    // private CodeStage.AntiCheat.ObscuredTypes.ObFlt EBFEFPEEDDI
    // Size: 0x19
    // Offset: 0x4E8
    ::CodeStage::AntiCheat::ObscuredTypes::ObFlt EBFEFPEEDDI;
    // Field size check
    static_assert(sizeof(::CodeStage::AntiCheat::ObscuredTypes::ObFlt) == 0x19);
    // Padding between fields: EBFEFPEEDDI and: GBHKPAEJMNN
    char __padding117[0x7] = {};
    // private System.Boolean GBHKPAEJMNN
    // Size: 0x1
    // Offset: 0x508
    bool GBHKPAEJMNN;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean KCCOPEFIBBJ
    // Size: 0x1
    // Offset: 0x509
    bool KCCOPEFIBBJ;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: KCCOPEFIBBJ and: BFCJHLPFNAM
    char __padding119[0x2] = {};
    // private System.Int32 BFCJHLPFNAM
    // Size: 0x4
    // Offset: 0x50C
    int BFCJHLPFNAM;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 GBPFNHBJEME
    // Size: 0x4
    // Offset: 0x510
    int GBPFNHBJEME;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean CHGIKGLFLJB
    // Size: 0x1
    // Offset: 0x514
    bool CHGIKGLFLJB;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean AHFDBJLDKCO
    // Size: 0x1
    // Offset: 0x515
    bool AHFDBJLDKCO;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean IICBIEPKJII
    // Size: 0x1
    // Offset: 0x516
    bool IICBIEPKJII;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IICBIEPKJII and: JGOGJDHABHN
    char __padding124[0x1] = {};
    // private UnityEngine.Collider[] JGOGJDHABHN
    // Size: 0x8
    // Offset: 0x518
    ::ArrayW<::UnityEngine::Collider*> JGOGJDHABHN;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private UnityEngine.Collider[] NLPMPHDHCHK
    // Size: 0x8
    // Offset: 0x520
    ::ArrayW<::UnityEngine::Collider*> NLPMPHDHCHK;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private UnityEngine.RaycastHit[] EHLLMIKFMJG
    // Size: 0x8
    // Offset: 0x528
    ::ArrayW<::UnityEngine::RaycastHit> EHLLMIKFMJG;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private UnityEngine.Transform AABJEILHKDE
    // Size: 0x8
    // Offset: 0x530
    ::UnityEngine::Transform* AABJEILHKDE;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform ADKPNHFAGFF
    // Size: 0x8
    // Offset: 0x538
    ::UnityEngine::Transform* ADKPNHFAGFF;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform CNDOFMMMACK
    // Size: 0x8
    // Offset: 0x540
    ::UnityEngine::Transform* CNDOFMMMACK;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform IFLDMGKNCEK
    // Size: 0x8
    // Offset: 0x548
    ::UnityEngine::Transform* IFLDMGKNCEK;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform NJPCCEMDCNA
    // Size: 0x8
    // Offset: 0x550
    ::UnityEngine::Transform* NJPCCEMDCNA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform DMNHBEIHGMA
    // Size: 0x8
    // Offset: 0x558
    ::UnityEngine::Transform* DMNHBEIHGMA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 ICEMBFHMBPG
    // Size: 0xC
    // Offset: 0x560
    ::UnityEngine::Vector3 ICEMBFHMBPG;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 CNDANAGGNGA
    // Size: 0xC
    // Offset: 0x56C
    ::UnityEngine::Vector3 CNDANAGGNGA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 BNNHHDKILGL
    // Size: 0xC
    // Offset: 0x578
    ::UnityEngine::Vector3 BNNHHDKILGL;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 EJAJCBNCPLD
    // Size: 0xC
    // Offset: 0x584
    ::UnityEngine::Vector3 EJAJCBNCPLD;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IPlayerClass
    operator ::GlobalNamespace::IPlayerClass() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IPlayerClass*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single LEGNJPIEHKE
    [[deprecated("Use field access instead!")]] float& dyn_LEGNJPIEHKE();
    // Get instance field reference: private System.Single PMGMDMHOPMP
    [[deprecated("Use field access instead!")]] float& dyn_PMGMDMHOPMP();
    // Get instance field reference: private System.Int32 HFGIDHPFBLD
    [[deprecated("Use field access instead!")]] int& dyn_HFGIDHPFBLD();
    // Get instance field reference: public System.Single HitBoxX
    [[deprecated("Use field access instead!")]] float& dyn_HitBoxX();
    // Get instance field reference: public System.Single HitBoxY
    [[deprecated("Use field access instead!")]] float& dyn_HitBoxY();
    // Get instance field reference: public System.Single HitBoxZ
    [[deprecated("Use field access instead!")]] float& dyn_HitBoxZ();
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: private MagicalActual.NetEntity IJJGNKLFGJN
    [[deprecated("Use field access instead!")]] ::MagicalActual::NetEntity*& dyn_IJJGNKLFGJN();
    // Get instance field reference: private System.Boolean HNFCLAFDJBD
    [[deprecated("Use field access instead!")]] bool& dyn_HNFCLAFDJBD();
    // Get instance field reference: private MagicalActual.PlayerClass FNINBDEICCD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerClass*& dyn_FNINBDEICCD();
    // Get instance field reference: private MagicalActual.PlayerAvatar EENJNFDNJBD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerAvatar*& dyn_EENJNFDNJBD();
    // Get instance field reference: private MagicalActual.PlayerCharacter HCFELEODBLD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerCharacter*& dyn_HCFELEODBLD();
    // Get instance field reference: public UnityEngine.GameObject shield
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_shield();
    // Get instance field reference: private UnityEngine.BoxCollider IKKIMNOLKPP
    [[deprecated("Use field access instead!")]] ::UnityEngine::BoxCollider*& dyn_IKKIMNOLKPP();
    // Get instance field reference: public UnityEngine.GameObject sword
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_sword();
    // Get instance field reference: private UnityEngine.GameObject KAJIJDJAAKK
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_KAJIJDJAAKK();
    // Get instance field reference: private UnityEngine.Transform JJDMDLCCPDD
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_JJDMDLCCPDD();
    // Get instance field reference: private System.Single focusDistance
    [[deprecated("Use field access instead!")]] float& dyn_focusDistance();
    // Get instance field reference: private System.Int32 HEFAPBNPAPK
    [[deprecated("Use field access instead!")]] int& dyn_HEFAPBNPAPK();
    // Get instance field reference: private System.Int32 HFKELBOMOCO
    [[deprecated("Use field access instead!")]] int& dyn_HFKELBOMOCO();
    // Get instance field reference: private UnityEngine.RaycastHit[] JEJAAPDDFCH
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_JEJAAPDDFCH();
    // Get instance field reference: private UnityEngine.Ray CFJNLPEPFNH
    [[deprecated("Use field access instead!")]] ::UnityEngine::Ray& dyn_CFJNLPEPFNH();
    // Get instance field reference: private System.Boolean LHCGGEJOAMF
    [[deprecated("Use field access instead!")]] bool& dyn_LHCGGEJOAMF();
    // Get instance field reference: private System.Boolean PDOGIKMODPI
    [[deprecated("Use field access instead!")]] bool& dyn_PDOGIKMODPI();
    // Get instance field reference: private System.Boolean CILLHAJIDIB
    [[deprecated("Use field access instead!")]] bool& dyn_CILLHAJIDIB();
    // Get instance field reference: public UnityEngine.GameObject focusTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_focusTarget();
    // Get instance field reference: public UnityEngine.GameObject vfxHit
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxHit();
    // Get instance field reference: public UnityEngine.GameObject[] vfxBlood
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_vfxBlood();
    // Get instance field reference: public UnityEngine.GameObject[] vfxSlash
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_vfxSlash();
    // Get instance field reference: public UnityEngine.GameObject vfxComboAggro
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxComboAggro();
    // Get instance field reference: public UnityEngine.GameObject vfxComboDamage
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxComboDamage();
    // Get instance field reference: public UnityEngine.GameObject vfxComboHamstring
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxComboHamstring();
    // Get instance field reference: public UnityEngine.GameObject vfxComboCleave
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxComboCleave();
    // Get instance field reference: public UnityEngine.GameObject vfxTaunt
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxTaunt();
    // Get instance field reference: public UnityEngine.GameObject vfxStun
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxStun();
    // Get instance field reference: public UnityEngine.GameObject vfxBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxBlock();
    // Get instance field reference: public UnityEngine.GameObject superVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_superVfx();
    // Get instance field reference: public UnityEngine.GameObject collisionBoxPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_collisionBoxPrefab();
    // Get instance field reference: public UnityEngine.GameObject vfxHeman
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxHeman();
    // Get instance field reference: public UnityEngine.GameObject vfxHemanReady
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxHemanReady();
    // Get instance field reference: private UnityEngine.GameObject PPJCBODBHOH
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_PPJCBODBHOH();
    // Get instance field reference: private UnityEngine.GameObject HDMKCGKJCLA
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_HDMKCGKJCLA();
    // Get instance field reference: private MagicalActual.AttackVfxController[] ACNMJOJPLMB
    [[deprecated("Use field access instead!")]] ::ArrayW<::MagicalActual::AttackVfxController*>& dyn_ACNMJOJPLMB();
    // Get instance field reference: private MagicalActual.AttackVfxController FLAMDFGHEJH
    [[deprecated("Use field access instead!")]] ::MagicalActual::AttackVfxController*& dyn_FLAMDFGHEJH();
    // Get instance field reference: public UnityEngine.GameObject tauntHorn
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_tauntHorn();
    // Get instance field reference: public UnityEngine.Material shieldEnabledMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_shieldEnabledMaterial();
    // Get instance field reference: public UnityEngine.Material shieldDisabledMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_shieldDisabledMaterial();
    // Get instance field reference: private OrbusTrackedController IKCANGJCBED
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OrbusTrackedController*& dyn_IKCANGJCBED();
    // Get instance field reference: private OrbusTrackedController HKFGNKJKLPH
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OrbusTrackedController*& dyn_HKFGNKJKLPH();
    // Get instance field reference: private UnityEngine.GameObject CCEMBLKGKLN
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_CCEMBLKGKLN();
    // Get instance field reference: private UnityEngine.GameObject GKJEHAKEABK
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_GKJEHAKEABK();
    // Get instance field reference: private UnityEngine.GameObject BGFIJNGFMFO
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_BGFIJNGFMFO();
    // Get instance field reference: private System.Boolean GCCMBLOGLBA
    [[deprecated("Use field access instead!")]] bool& dyn_GCCMBLOGLBA();
    // Get instance field reference: private System.Boolean GHBBMIFHKGO
    [[deprecated("Use field access instead!")]] bool& dyn_GHBBMIFHKGO();
    // Get instance field reference: private System.Boolean HIKIBDCNDAA
    [[deprecated("Use field access instead!")]] bool& dyn_HIKIBDCNDAA();
    // Get instance field reference: private System.Boolean IMNDEEOEOKA
    [[deprecated("Use field access instead!")]] bool& dyn_IMNDEEOEOKA();
    // Get instance field reference: private System.Int32 KHIKJLICKKF
    [[deprecated("Use field access instead!")]] int& dyn_KHIKJLICKKF();
    // Get instance field reference: private System.Int32 FJPBNPLIKHA
    [[deprecated("Use field access instead!")]] int& dyn_FJPBNPLIKHA();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt DKBAJEHLDMP
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_DKBAJEHLDMP();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt OJHGBHCKPCB
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_OJHGBHCKPCB();
    // Get instance field reference: private System.Boolean EKMNMNLFENN
    [[deprecated("Use field access instead!")]] bool& dyn_EKMNMNLFENN();
    // Get instance field reference: private UnityEngine.GameObject KBFBPJGLNMA
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_KBFBPJGLNMA();
    // Get instance field reference: private System.Single OKGLIFFGAGE
    [[deprecated("Use field access instead!")]] float& dyn_OKGLIFFGAGE();
    // Get instance field reference: private UnityEngine.Vector3 KCAHPJFPBAH
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_KCAHPJFPBAH();
    // Get instance field reference: private UnityEngine.Vector3 GAEJBDLAPEK
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_GAEJBDLAPEK();
    // Get instance field reference: private UnityEngine.Vector3 DGOMGJKIHLK
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_DGOMGJKIHLK();
    // Get instance field reference: private UnityEngine.Vector3 AIKDIMABMDG
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_AIKDIMABMDG();
    // Get instance field reference: private UnityEngine.Vector3 FAIGECBHGJK
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_FAIGECBHGJK();
    // Get instance field reference: private UnityEngine.Vector3 OPLJCKCEAOP
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_OPLJCKCEAOP();
    // Get instance field reference: private UnityEngine.Vector3 LABLJCLAGAH
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_LABLJCLAGAH();
    // Get instance field reference: private UnityEngine.Vector3 IBKIPLACFPI
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_IBKIPLACFPI();
    // Get instance field reference: private UnityEngine.Vector3 LAJKIBBOMMH
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_LAJKIBBOMMH();
    // Get instance field reference: private UnityEngine.Vector3 GKNJLGMHGCH
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_GKNJLGMHGCH();
    // Get instance field reference: private UnityEngine.Vector3 OGPCFHFCNBK
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_OGPCFHFCNBK();
    // Get instance field reference: private UnityEngine.Vector3 OJDNMNLHGAN
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_OJDNMNLHGAN();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt NDFMINDFCND
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_NDFMINDFCND();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt IOGGBIPFCFC
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_IOGGBIPFCFC();
    // Get instance field reference: private System.Boolean ABMKILKCODB
    [[deprecated("Use field access instead!")]] bool& dyn_ABMKILKCODB();
    // Get instance field reference: private System.Collections.Generic.List`1<MagicalActual.SwordHit> LCNIHHAOGOK
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::MagicalActual::SwordHit*>*& dyn_LCNIHHAOGOK();
    // Get instance field reference: private System.Boolean NGOOKDNMCNG
    [[deprecated("Use field access instead!")]] bool& dyn_NGOOKDNMCNG();
    // Get instance field reference: private System.Collections.Generic.List`1<MagicalActual.ShieldHit> KPMHJKHFAFG
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::MagicalActual::ShieldHit*>*& dyn_KPMHJKHFAFG();
    // Get instance field reference: private System.Int32 LJOIIEHFLPB
    [[deprecated("Use field access instead!")]] int& dyn_LJOIIEHFLPB();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt LNFJGOLBGBB
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_LNFJGOLBGBB();
    // Get instance field reference: private System.Boolean FOHNMMBGCOL
    [[deprecated("Use field access instead!")]] bool& dyn_FOHNMMBGCOL();
    // Get instance field reference: private System.Boolean GJGDPJMMHEC
    [[deprecated("Use field access instead!")]] bool& dyn_GJGDPJMMHEC();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt JGOFCLGJBAA
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_JGOFCLGJBAA();
    // Get instance field reference: private System.Byte MIAPIDLBHID
    [[deprecated("Use field access instead!")]] uint8_t& dyn_MIAPIDLBHID();
    // Get instance field reference: private System.Boolean OMMPLPMLPAP
    [[deprecated("Use field access instead!")]] bool& dyn_OMMPLPMLPAP();
    // Get instance field reference: private UnityEngine.TrailRenderer trailRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::TrailRenderer*& dyn_trailRenderer();
    // Get instance field reference: private UnityEngine.Gradient damageColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn_damageColor();
    // Get instance field reference: private UnityEngine.Gradient cleaveColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn_cleaveColor();
    // Get instance field reference: private UnityEngine.Gradient provokeColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn_provokeColor();
    // Get instance field reference: private UnityEngine.Gradient hamstringColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn_hamstringColor();
    // Get instance field reference: private UnityEngine.Gradient IFPBJIALLDM
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn_IFPBJIALLDM();
    // Get instance field reference: private UnityEngine.AudioSource chargedSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_chargedSound();
    // Get instance field reference: private UnityEngine.AudioSource chargingSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_chargingSound();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt AOLJBMLMFMB
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_AOLJBMLMFMB();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt LNCEKCNBMFH
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_LNCEKCNBMFH();
    // Get instance field reference: public UnityEngine.UI.Image shieldPlantIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_shieldPlantIcon();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt COODJJNCBFE
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_COODJJNCBFE();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt HDLEEPKBAAA
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_HDLEEPKBAAA();
    // Get instance field reference: public UnityEngine.UI.Image stunIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_stunIcon();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt MNAFHEKDOEM
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_MNAFHEKDOEM();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt GJHPDBEPBKN
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_GJHPDBEPBKN();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObInt NDFEKEDKBNK
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObInt& dyn_NDFEKEDKBNK();
    // Get instance field reference: public UnityEngine.UI.Image teleportIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_teleportIcon();
    // Get instance field reference: public UnityEngine.UI.Image rush1On
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_rush1On();
    // Get instance field reference: public UnityEngine.UI.Image rush1Off
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_rush1Off();
    // Get instance field reference: public UnityEngine.UI.Image rush2On
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_rush2On();
    // Get instance field reference: public UnityEngine.UI.Image rush2Off
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_rush2Off();
    // Get instance field reference: private UnityEngine.Vector3 HACCECAIEBG
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_HACCECAIEBG();
    // Get instance field reference: private System.Boolean DLIKANCFGGN
    [[deprecated("Use field access instead!")]] bool& dyn_DLIKANCFGGN();
    // Get instance field reference: private UnityEngine.RaycastHit[] EPPIPLHANGD
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_EPPIPLHANGD();
    // Get instance field reference: private UnityEngine.GameObject EEJLAGDKGFM
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_EEJLAGDKGFM();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector3> DLOHFFHLDGF
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector3>*& dyn_DLOHFFHLDGF();
    // Get instance field reference: private UnityEngine.Collider[] NPJAMHKBLLM
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_NPJAMHKBLLM();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt CEGIEONPEBG
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_CEGIEONPEBG();
    // Get instance field reference: private CodeStage.AntiCheat.ObscuredTypes.ObFlt EBFEFPEEDDI
    [[deprecated("Use field access instead!")]] ::CodeStage::AntiCheat::ObscuredTypes::ObFlt& dyn_EBFEFPEEDDI();
    // Get instance field reference: private System.Boolean GBHKPAEJMNN
    [[deprecated("Use field access instead!")]] bool& dyn_GBHKPAEJMNN();
    // Get instance field reference: private System.Boolean KCCOPEFIBBJ
    [[deprecated("Use field access instead!")]] bool& dyn_KCCOPEFIBBJ();
    // Get instance field reference: private System.Int32 BFCJHLPFNAM
    [[deprecated("Use field access instead!")]] int& dyn_BFCJHLPFNAM();
    // Get instance field reference: private System.Int32 GBPFNHBJEME
    [[deprecated("Use field access instead!")]] int& dyn_GBPFNHBJEME();
    // Get instance field reference: private System.Boolean CHGIKGLFLJB
    [[deprecated("Use field access instead!")]] bool& dyn_CHGIKGLFLJB();
    // Get instance field reference: private System.Boolean AHFDBJLDKCO
    [[deprecated("Use field access instead!")]] bool& dyn_AHFDBJLDKCO();
    // Get instance field reference: private System.Boolean IICBIEPKJII
    [[deprecated("Use field access instead!")]] bool& dyn_IICBIEPKJII();
    // Get instance field reference: private UnityEngine.Collider[] JGOGJDHABHN
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_JGOGJDHABHN();
    // Get instance field reference: private UnityEngine.Collider[] NLPMPHDHCHK
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_NLPMPHDHCHK();
    // Get instance field reference: private UnityEngine.RaycastHit[] EHLLMIKFMJG
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_EHLLMIKFMJG();
    // Get instance field reference: private UnityEngine.Transform AABJEILHKDE
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_AABJEILHKDE();
    // Get instance field reference: private UnityEngine.Transform ADKPNHFAGFF
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_ADKPNHFAGFF();
    // Get instance field reference: private UnityEngine.Transform CNDOFMMMACK
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_CNDOFMMMACK();
    // Get instance field reference: private UnityEngine.Transform IFLDMGKNCEK
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_IFLDMGKNCEK();
    // Get instance field reference: private UnityEngine.Transform NJPCCEMDCNA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_NJPCCEMDCNA();
    // Get instance field reference: private UnityEngine.Transform DMNHBEIHGMA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_DMNHBEIHGMA();
    // Get instance field reference: private UnityEngine.Vector3 ICEMBFHMBPG
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_ICEMBFHMBPG();
    // Get instance field reference: private UnityEngine.Vector3 CNDANAGGNGA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_CNDANAGGNGA();
    // Get instance field reference: private UnityEngine.Vector3 BNNHHDKILGL
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_BNNHHDKILGL();
    // Get instance field reference: private UnityEngine.Vector3 EJAJCBNCPLD
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_EJAJCBNCPLD();
    // private System.Void Update()
    // Offset: 0x168CD24
    void Update();
    // private System.Void ENIGECPOHND(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x1690894
    void ENIGECPOHND(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void FPINKEAGILD(System.Object OMLPNCLFFMJ)
    // Offset: 0x1690C0C
    void FPINKEAGILD(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void orbusNetInit(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1690E34
    void orbusNetInit(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void LNPFOBMABPF(UnityEngine.Vector3 DFENKCABNKH)
    // Offset: 0x1691380
    void LNPFOBMABPF(::UnityEngine::Vector3 DFENKCABNKH);
    // public System.Void SuperStatusChange(System.Boolean AALBHOKGIOD)
    // Offset: 0x1691F10
    void SuperStatusChange(bool AALBHOKGIOD);
    // private System.Void CCGFOICBBAJ()
    // Offset: 0x1692194
    void CCGFOICBBAJ();
    // private System.Void FMCFFLJCCCP()
    // Offset: 0x1692334
    void FMCFFLJCCCP();
    // private System.Void DisablePrimaryWeapon()
    // Offset: 0x169589C
    void DisablePrimaryWeapon();
    // private System.Void PMAJCHIHCLF(System.Object OMLPNCLFFMJ)
    // Offset: 0x1695904
    void PMAJCHIHCLF(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void GBCHLGNALEH(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x169596C
    void GBCHLGNALEH(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // public System.Void AvatarEquipmentChanged()
    // Offset: 0x1695CE8
    void AvatarEquipmentChanged();
    // public UnityEngine.GameObject GetWeaponObject()
    // Offset: 0x16960D8
    ::UnityEngine::GameObject* GetWeaponObject();
    // private System.Void EHNMOFMANJO()
    // Offset: 0x1690BF8
    void EHNMOFMANJO();
    // private System.Void LPLGKBGLPOK()
    // Offset: 0x16960E0
    void LPLGKBGLPOK();
    // private System.Void IEAKMOHIBDD()
    // Offset: 0x16968B0
    void IEAKMOHIBDD();
    // private System.Void FNEDKLBINNG(System.Object OMLPNCLFFMJ)
    // Offset: 0x16969BC
    void FNEDKLBINNG(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Int32 JIKKBOMLJHA(MagicalActual.SwordHit LAHMKNGDJMH)
    // Offset: 0x1695274
    int JIKKBOMLJHA(::MagicalActual::SwordHit* LAHMKNGDJMH);
    // private System.Void KEJPJCOBMBK()
    // Offset: 0x1695170
    void KEJPJCOBMBK();
    // private System.Void EJALCNLOHIE(System.IO.BinaryWriter FFJEENIEPJH)
    // Offset: 0x1696BE4
    void EJALCNLOHIE(::System::IO::BinaryWriter* FFJEENIEPJH);
    // private System.Boolean FABMPHDPGGN(UnityEngine.Vector3 LJDGBBFPMCN)
    // Offset: 0x1696C74
    bool FABMPHDPGGN(::UnityEngine::Vector3 LJDGBBFPMCN);
    // public UnityEngine.GameObject OHLCKCNOEII()
    // Offset: 0x1696DC4
    ::UnityEngine::GameObject* OHLCKCNOEII();
    // public UnityEngine.GameObject OHBJLIIBMDA()
    // Offset: 0x1696F3C
    ::UnityEngine::GameObject* OHBJLIIBMDA();
    // public System.Void .ctor()
    // Offset: 0x16970B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Swordboard* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::Swordboard::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Swordboard*, creationType>()));
    }
    // private System.Boolean BAOKAONFGBB(UnityEngine.Vector3 LJDGBBFPMCN)
    // Offset: 0x16973AC
    bool BAOKAONFGBB(::UnityEngine::Vector3 LJDGBBFPMCN);
    // public System.Boolean TriggerTaunt()
    // Offset: 0x16974FC
    bool TriggerTaunt();
    // public System.Void WeaponAdjusted()
    // Offset: 0x16976E4
    void WeaponAdjusted();
    // private System.Void HHEFALNINKP(System.Object OMLPNCLFFMJ)
    // Offset: 0x16976E8
    void HHEFALNINKP(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void DEDOCNFGBEB()
    // Offset: 0x1697754
    void DEDOCNFGBEB();
    // private System.Void KPOAAAHLGLA()
    // Offset: 0x1697758
    void KPOAAAHLGLA();
    // public UnityEngine.GameObject GetWeaponSkin()
    // Offset: 0x1697A6C
    ::UnityEngine::GameObject* GetWeaponSkin();
    // private System.Boolean CIBDJNJGODA()
    // Offset: 0x1690BB8
    bool CIBDJNJGODA();
    // private System.Void CHMCEGMCENL()
    // Offset: 0x1697BE4
    void CHMCEGMCENL();
    // public System.Void orbusNetCleanup(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x169AA50
    void orbusNetCleanup(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void DIKLDNJJJPF(UnityEngine.Vector3 DFENKCABNKH)
    // Offset: 0x169AA88
    void DIKLDNJJJPF(::UnityEngine::Vector3 DFENKCABNKH);
    // private System.Void SwitchWeaponHand(System.Byte DBJMBLGLHIH)
    // Offset: 0x169B6BC
    void SwitchWeaponHand(uint8_t DBJMBLGLHIH);
    // private System.Int32 BJOJJDDABPN(MagicalActual.SwordHit LAHMKNGDJMH)
    // Offset: 0x168FF28
    int BJOJJDDABPN(::MagicalActual::SwordHit* LAHMKNGDJMH);
    // public System.Void OnDestroy()
    // Offset: 0x169BA18
    void OnDestroy();
    // public System.Void ClassEnabled()
    // Offset: 0x169BB44
    void ClassEnabled();
    // public System.Void FAHDGOAALEM()
    // Offset: 0x169BC98
    void FAHDGOAALEM();
    // private System.Void FNAJKEBPBLN(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x169BDC8
    void FNAJKEBPBLN(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void EnablePrimaryWeapon()
    // Offset: 0x169CDA4
    void EnablePrimaryWeapon();
    // public System.Void ClassDisabled()
    // Offset: 0x169CDFC
    void ClassDisabled();
    // private System.Void DFDIJPOCHEK()
    // Offset: 0x169CE00
    void DFDIJPOCHEK();
    // private System.Void Awake()
    // Offset: 0x169CFA4
    void Awake();
    // public System.Void ToggleAdjustWeapon()
    // Offset: 0x169D24C
    void ToggleAdjustWeapon();
    // private System.Void IMDNHPMDPKJ(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x169D5FC
    void IMDNHPMDPKJ(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void PMIDLGNJJFP(System.Byte GAHJCGMDIGE)
    // Offset: 0x16907FC
    void PMIDLGNJJFP(uint8_t GAHJCGMDIGE);
    // private System.Int32 HHPBHAHNIMD(UnityEngine.Vector3 FGCMFDEJJAD, UnityEngine.Vector3 DBJGLOFGDJE)
    // Offset: 0x1690548
    int HHPBHAHNIMD(::UnityEngine::Vector3 FGCMFDEJJAD, ::UnityEngine::Vector3 DBJGLOFGDJE);
    // private System.Void DEBEAMFLFNE(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x169D6F8
    void DEBEAMFLFNE(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void KMHCMFBHEOG(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x169DB3C
    void KMHCMFBHEOG(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void OPICOGHBNCI(System.Object OMLPNCLFFMJ)
    // Offset: 0x169DC3C
    void OPICOGHBNCI(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Boolean ADNBMJMFKGP()
    // Offset: 0x169DCA8
    bool ADNBMJMFKGP();
    // private System.Void DBLLGNGEAPK(System.Object OMLPNCLFFMJ)
    // Offset: 0x169DE8C
    void DBLLGNGEAPK(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void FGEDHGFPPOI(System.Byte DBJMBLGLHIH)
    // Offset: 0x16963F4
    void FGEDHGFPPOI(uint8_t DBJMBLGLHIH);
    // private System.Void OnDisable()
    // Offset: 0x169DEF8
    void OnDisable();
    // private System.Void HOHCCCDEGCK()
    // Offset: 0x168FB2C
    void HOHCCCDEGCK();
    // private System.Void EnableSecondaryWeapon()
    // Offset: 0x169E068
    void EnableSecondaryWeapon();
    // private System.Void DKGDCKHJCMC(System.IO.BinaryWriter FFJEENIEPJH)
    // Offset: 0x169E1B0
    void DKGDCKHJCMC(::System::IO::BinaryWriter* FFJEENIEPJH);
    // public System.Void DAAJLDCOCNO(System.Boolean AALBHOKGIOD)
    // Offset: 0x169E240
    void DAAJLDCOCNO(bool AALBHOKGIOD);
    // private System.Void OIGPGKILNAK(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x169E4D0
    void OIGPGKILNAK(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void PPPDKFOEGNA(System.Object OMLPNCLFFMJ)
    // Offset: 0x169E5CC
    void PPPDKFOEGNA(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void DisableSecondaryWeapon()
    // Offset: 0x169DF88
    void DisableSecondaryWeapon();
    // private System.Void AOBOIGDDJLC()
    // Offset: 0x168FE20
    void AOBOIGDDJLC();
    // private System.Void Start()
    // Offset: 0x169E9D4
    void Start();
    // public System.Void IIKADGDEMJG()
    // Offset: 0x169ECE8
    void IIKADGDEMJG();
    // private System.Void GAGGPMMNJNF()
    // Offset: 0x1695B30
    void GAGGPMMNJNF();
    // public System.Void EAKOGLIINMO()
    // Offset: 0x1696A28
    void EAKOGLIINMO();
    // public System.Void UpdateShieldAvailable()
    // Offset: 0x169675C
    void UpdateShieldAvailable();
    // private System.Void OHHBOJJOECE(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x169EE3C
    void OHHBOJJOECE(::System::Collections::ArrayList* HPEANAHIBAH);
    // public System.Void UpdateClassBar()
    // Offset: 0x1690C78
    void UpdateClassBar();
    // private System.Void BOLNNNEDFDO(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x169EF84
    void BOLNNNEDFDO(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void AGMDKBHMDPN()
    // Offset: 0x169D984
    void AGMDKBHMDPN();
  }; // MagicalActual.Swordboard
  #pragma pack(pop)
  static check_size<sizeof(Swordboard), 1412 + sizeof(::UnityEngine::Vector3)> __MagicalActual_SwordboardSizeCheck;
  static_assert(sizeof(Swordboard) == 0x590);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::Swordboard::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::ENIGECPOHND
// Il2CppName: ENIGECPOHND
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Swordboard::ENIGECPOHND)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "ENIGECPOHND", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::FPINKEAGILD
// Il2CppName: FPINKEAGILD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::Il2CppObject*)>(&MagicalActual::Swordboard::FPINKEAGILD)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "FPINKEAGILD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::orbusNetInit
// Il2CppName: orbusNetInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Swordboard::orbusNetInit)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "orbusNetInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::LNPFOBMABPF
// Il2CppName: LNPFOBMABPF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::UnityEngine::Vector3)>(&MagicalActual::Swordboard::LNPFOBMABPF)> {
  static const MethodInfo* get() {
    static auto* DFENKCABNKH = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "LNPFOBMABPF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{DFENKCABNKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::SuperStatusChange
// Il2CppName: SuperStatusChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(bool)>(&MagicalActual::Swordboard::SuperStatusChange)> {
  static const MethodInfo* get() {
    static auto* AALBHOKGIOD = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "SuperStatusChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AALBHOKGIOD});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::CCGFOICBBAJ
// Il2CppName: CCGFOICBBAJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::CCGFOICBBAJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "CCGFOICBBAJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::FMCFFLJCCCP
// Il2CppName: FMCFFLJCCCP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::FMCFFLJCCCP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "FMCFFLJCCCP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::DisablePrimaryWeapon
// Il2CppName: DisablePrimaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::DisablePrimaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "DisablePrimaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::PMAJCHIHCLF
// Il2CppName: PMAJCHIHCLF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::Il2CppObject*)>(&MagicalActual::Swordboard::PMAJCHIHCLF)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "PMAJCHIHCLF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::GBCHLGNALEH
// Il2CppName: GBCHLGNALEH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Swordboard::GBCHLGNALEH)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "GBCHLGNALEH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::AvatarEquipmentChanged
// Il2CppName: AvatarEquipmentChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::AvatarEquipmentChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "AvatarEquipmentChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::GetWeaponObject
// Il2CppName: GetWeaponObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::GetWeaponObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "GetWeaponObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::EHNMOFMANJO
// Il2CppName: EHNMOFMANJO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::EHNMOFMANJO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "EHNMOFMANJO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::LPLGKBGLPOK
// Il2CppName: LPLGKBGLPOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::LPLGKBGLPOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "LPLGKBGLPOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::IEAKMOHIBDD
// Il2CppName: IEAKMOHIBDD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::IEAKMOHIBDD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "IEAKMOHIBDD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::FNEDKLBINNG
// Il2CppName: FNEDKLBINNG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::Il2CppObject*)>(&MagicalActual::Swordboard::FNEDKLBINNG)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "FNEDKLBINNG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::JIKKBOMLJHA
// Il2CppName: JIKKBOMLJHA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MagicalActual::Swordboard::*)(::MagicalActual::SwordHit*)>(&MagicalActual::Swordboard::JIKKBOMLJHA)> {
  static const MethodInfo* get() {
    static auto* LAHMKNGDJMH = &::il2cpp_utils::GetClassFromName("MagicalActual", "SwordHit")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "JIKKBOMLJHA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{LAHMKNGDJMH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::KEJPJCOBMBK
// Il2CppName: KEJPJCOBMBK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::KEJPJCOBMBK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "KEJPJCOBMBK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::EJALCNLOHIE
// Il2CppName: EJALCNLOHIE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::System::IO::BinaryWriter*)>(&MagicalActual::Swordboard::EJALCNLOHIE)> {
  static const MethodInfo* get() {
    static auto* FFJEENIEPJH = &::il2cpp_utils::GetClassFromName("System.IO", "BinaryWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "EJALCNLOHIE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFJEENIEPJH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::FABMPHDPGGN
// Il2CppName: FABMPHDPGGN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Swordboard::*)(::UnityEngine::Vector3)>(&MagicalActual::Swordboard::FABMPHDPGGN)> {
  static const MethodInfo* get() {
    static auto* LJDGBBFPMCN = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "FABMPHDPGGN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{LJDGBBFPMCN});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::OHLCKCNOEII
// Il2CppName: OHLCKCNOEII
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::OHLCKCNOEII)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "OHLCKCNOEII", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::OHBJLIIBMDA
// Il2CppName: OHBJLIIBMDA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::OHBJLIIBMDA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "OHBJLIIBMDA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::Swordboard::BAOKAONFGBB
// Il2CppName: BAOKAONFGBB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Swordboard::*)(::UnityEngine::Vector3)>(&MagicalActual::Swordboard::BAOKAONFGBB)> {
  static const MethodInfo* get() {
    static auto* LJDGBBFPMCN = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "BAOKAONFGBB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{LJDGBBFPMCN});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::TriggerTaunt
// Il2CppName: TriggerTaunt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::TriggerTaunt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "TriggerTaunt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::WeaponAdjusted
// Il2CppName: WeaponAdjusted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::WeaponAdjusted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "WeaponAdjusted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::HHEFALNINKP
// Il2CppName: HHEFALNINKP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::Il2CppObject*)>(&MagicalActual::Swordboard::HHEFALNINKP)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "HHEFALNINKP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::DEDOCNFGBEB
// Il2CppName: DEDOCNFGBEB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::DEDOCNFGBEB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "DEDOCNFGBEB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::KPOAAAHLGLA
// Il2CppName: KPOAAAHLGLA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::KPOAAAHLGLA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "KPOAAAHLGLA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::GetWeaponSkin
// Il2CppName: GetWeaponSkin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::GetWeaponSkin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "GetWeaponSkin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::CIBDJNJGODA
// Il2CppName: CIBDJNJGODA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::CIBDJNJGODA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "CIBDJNJGODA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::CHMCEGMCENL
// Il2CppName: CHMCEGMCENL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::CHMCEGMCENL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "CHMCEGMCENL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::orbusNetCleanup
// Il2CppName: orbusNetCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Swordboard::orbusNetCleanup)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "orbusNetCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::DIKLDNJJJPF
// Il2CppName: DIKLDNJJJPF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::UnityEngine::Vector3)>(&MagicalActual::Swordboard::DIKLDNJJJPF)> {
  static const MethodInfo* get() {
    static auto* DFENKCABNKH = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "DIKLDNJJJPF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{DFENKCABNKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::SwitchWeaponHand
// Il2CppName: SwitchWeaponHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(uint8_t)>(&MagicalActual::Swordboard::SwitchWeaponHand)> {
  static const MethodInfo* get() {
    static auto* DBJMBLGLHIH = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "SwitchWeaponHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{DBJMBLGLHIH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::BJOJJDDABPN
// Il2CppName: BJOJJDDABPN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MagicalActual::Swordboard::*)(::MagicalActual::SwordHit*)>(&MagicalActual::Swordboard::BJOJJDDABPN)> {
  static const MethodInfo* get() {
    static auto* LAHMKNGDJMH = &::il2cpp_utils::GetClassFromName("MagicalActual", "SwordHit")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "BJOJJDDABPN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{LAHMKNGDJMH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::ClassEnabled
// Il2CppName: ClassEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::ClassEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "ClassEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::FAHDGOAALEM
// Il2CppName: FAHDGOAALEM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::FAHDGOAALEM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "FAHDGOAALEM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::FNAJKEBPBLN
// Il2CppName: FNAJKEBPBLN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::System::Collections::ArrayList*)>(&MagicalActual::Swordboard::FNAJKEBPBLN)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "FNAJKEBPBLN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::EnablePrimaryWeapon
// Il2CppName: EnablePrimaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::EnablePrimaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "EnablePrimaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::ClassDisabled
// Il2CppName: ClassDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::ClassDisabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "ClassDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::DFDIJPOCHEK
// Il2CppName: DFDIJPOCHEK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::DFDIJPOCHEK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "DFDIJPOCHEK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::ToggleAdjustWeapon
// Il2CppName: ToggleAdjustWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::ToggleAdjustWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "ToggleAdjustWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::IMDNHPMDPKJ
// Il2CppName: IMDNHPMDPKJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::System::Collections::ArrayList*)>(&MagicalActual::Swordboard::IMDNHPMDPKJ)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "IMDNHPMDPKJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::PMIDLGNJJFP
// Il2CppName: PMIDLGNJJFP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(uint8_t)>(&MagicalActual::Swordboard::PMIDLGNJJFP)> {
  static const MethodInfo* get() {
    static auto* GAHJCGMDIGE = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "PMIDLGNJJFP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{GAHJCGMDIGE});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::HHPBHAHNIMD
// Il2CppName: HHPBHAHNIMD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MagicalActual::Swordboard::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&MagicalActual::Swordboard::HHPBHAHNIMD)> {
  static const MethodInfo* get() {
    static auto* FGCMFDEJJAD = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* DBJGLOFGDJE = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "HHPBHAHNIMD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FGCMFDEJJAD, DBJGLOFGDJE});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::DEBEAMFLFNE
// Il2CppName: DEBEAMFLFNE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::System::Collections::ArrayList*)>(&MagicalActual::Swordboard::DEBEAMFLFNE)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "DEBEAMFLFNE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::KMHCMFBHEOG
// Il2CppName: KMHCMFBHEOG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::System::Collections::ArrayList*)>(&MagicalActual::Swordboard::KMHCMFBHEOG)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "KMHCMFBHEOG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::OPICOGHBNCI
// Il2CppName: OPICOGHBNCI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::Il2CppObject*)>(&MagicalActual::Swordboard::OPICOGHBNCI)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "OPICOGHBNCI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::ADNBMJMFKGP
// Il2CppName: ADNBMJMFKGP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::ADNBMJMFKGP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "ADNBMJMFKGP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::DBLLGNGEAPK
// Il2CppName: DBLLGNGEAPK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::Il2CppObject*)>(&MagicalActual::Swordboard::DBLLGNGEAPK)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "DBLLGNGEAPK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::FGEDHGFPPOI
// Il2CppName: FGEDHGFPPOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(uint8_t)>(&MagicalActual::Swordboard::FGEDHGFPPOI)> {
  static const MethodInfo* get() {
    static auto* DBJMBLGLHIH = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "FGEDHGFPPOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{DBJMBLGLHIH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::HOHCCCDEGCK
// Il2CppName: HOHCCCDEGCK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::HOHCCCDEGCK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "HOHCCCDEGCK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::EnableSecondaryWeapon
// Il2CppName: EnableSecondaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::EnableSecondaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "EnableSecondaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::DKGDCKHJCMC
// Il2CppName: DKGDCKHJCMC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::System::IO::BinaryWriter*)>(&MagicalActual::Swordboard::DKGDCKHJCMC)> {
  static const MethodInfo* get() {
    static auto* FFJEENIEPJH = &::il2cpp_utils::GetClassFromName("System.IO", "BinaryWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "DKGDCKHJCMC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFJEENIEPJH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::DAAJLDCOCNO
// Il2CppName: DAAJLDCOCNO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(bool)>(&MagicalActual::Swordboard::DAAJLDCOCNO)> {
  static const MethodInfo* get() {
    static auto* AALBHOKGIOD = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "DAAJLDCOCNO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AALBHOKGIOD});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::OIGPGKILNAK
// Il2CppName: OIGPGKILNAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::System::Collections::ArrayList*)>(&MagicalActual::Swordboard::OIGPGKILNAK)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "OIGPGKILNAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::PPPDKFOEGNA
// Il2CppName: PPPDKFOEGNA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::Il2CppObject*)>(&MagicalActual::Swordboard::PPPDKFOEGNA)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "PPPDKFOEGNA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::DisableSecondaryWeapon
// Il2CppName: DisableSecondaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::DisableSecondaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "DisableSecondaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::AOBOIGDDJLC
// Il2CppName: AOBOIGDDJLC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::AOBOIGDDJLC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "AOBOIGDDJLC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::IIKADGDEMJG
// Il2CppName: IIKADGDEMJG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::IIKADGDEMJG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "IIKADGDEMJG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::GAGGPMMNJNF
// Il2CppName: GAGGPMMNJNF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::GAGGPMMNJNF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "GAGGPMMNJNF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::EAKOGLIINMO
// Il2CppName: EAKOGLIINMO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::EAKOGLIINMO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "EAKOGLIINMO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::UpdateShieldAvailable
// Il2CppName: UpdateShieldAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::UpdateShieldAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "UpdateShieldAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::OHHBOJJOECE
// Il2CppName: OHHBOJJOECE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::System::Collections::ArrayList*)>(&MagicalActual::Swordboard::OHHBOJJOECE)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "OHHBOJJOECE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::UpdateClassBar
// Il2CppName: UpdateClassBar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::UpdateClassBar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "UpdateClassBar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::BOLNNNEDFDO
// Il2CppName: BOLNNNEDFDO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)(::System::Collections::ArrayList*)>(&MagicalActual::Swordboard::BOLNNNEDFDO)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "BOLNNNEDFDO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Swordboard::AGMDKBHMDPN
// Il2CppName: AGMDKBHMDPN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Swordboard::*)()>(&MagicalActual::Swordboard::AGMDKBHMDPN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Swordboard*), "AGMDKBHMDPN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
