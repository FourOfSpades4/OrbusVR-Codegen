// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Bard
  class Bard;
  // Forward declaring type: AutoSnapBack
  class AutoSnapBack;
  // Forward declaring type: Grabber
  class Grabber;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: BardInstrument
  class BardInstrument;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::BardInstrument);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::BardInstrument*, "MagicalActual", "BardInstrument");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.BardInstrument
  // [TokenAttribute] Offset: FFFFFFFF
  class BardInstrument : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Byte spellId
    // Size: 0x1
    // Offset: 0x18
    uint8_t spellId;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Boolean isThrown
    // Size: 0x1
    // Offset: 0x19
    bool isThrown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isThrown and: myBard
    char __padding1[0x6] = {};
    // public MagicalActual.Bard myBard
    // Size: 0x8
    // Offset: 0x20
    ::MagicalActual::Bard* myBard;
    // Field size check
    static_assert(sizeof(::MagicalActual::Bard*) == 0x8);
    // private UnityEngine.Collider[] JGOGJDHABHN
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Collider*> JGOGJDHABHN;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private MagicalActual.AutoSnapBack EEFMBCMFLBM
    // Size: 0x8
    // Offset: 0x30
    ::MagicalActual::AutoSnapBack* EEFMBCMFLBM;
    // Field size check
    static_assert(sizeof(::MagicalActual::AutoSnapBack*) == 0x8);
    // public UnityEngine.MeshRenderer myRenderer
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::MeshRenderer* myRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.GameObject mySpirit
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* mySpirit;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Byte spellId
    [[deprecated("Use field access instead!")]] uint8_t& dyn_spellId();
    // Get instance field reference: public System.Boolean isThrown
    [[deprecated("Use field access instead!")]] bool& dyn_isThrown();
    // Get instance field reference: public MagicalActual.Bard myBard
    [[deprecated("Use field access instead!")]] ::MagicalActual::Bard*& dyn_myBard();
    // Get instance field reference: private UnityEngine.Collider[] JGOGJDHABHN
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_JGOGJDHABHN();
    // Get instance field reference: private MagicalActual.AutoSnapBack EEFMBCMFLBM
    [[deprecated("Use field access instead!")]] ::MagicalActual::AutoSnapBack*& dyn_EEFMBCMFLBM();
    // Get instance field reference: public UnityEngine.MeshRenderer myRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_myRenderer();
    // Get instance field reference: public UnityEngine.GameObject mySpirit
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_mySpirit();
    // private System.Void JCJCMKPOAKK()
    // Offset: 0x1CA210C
    void JCJCMKPOAKK();
    // public System.Void SetVolume(System.Single FMEDPJOLPAG)
    // Offset: 0x1CA21C0
    void SetVolume(float FMEDPJOLPAG);
    // private System.Void HDMHEDEGDFD()
    // Offset: 0x1CA21C4
    void HDMHEDEGDFD();
    // private System.Void AGNOEHOKDFG(MagicalActual.Grabber BALIAOKIHIC)
    // Offset: 0x1CA2278
    void AGNOEHOKDFG(::MagicalActual::Grabber* BALIAOKIHIC);
    // public System.Void SyncedStart(System.Single ACNLCMIIIGM)
    // Offset: 0x1CA2284
    void SyncedStart(float ACNLCMIIIGM);
    // private System.Void JCJHGOJBHOK()
    // Offset: 0x1CA2288
    void JCJHGOJBHOK();
    // private System.Void IJABAEGHLBP()
    // Offset: 0x1CA2290
    void IJABAEGHLBP();
    // public System.Void OEDMDHOEBLB(System.Single CBAMALDADNC)
    // Offset: 0x1CA229C
    void OEDMDHOEBLB(float CBAMALDADNC);
    // public System.Void HGBLCMKNJCO(System.Single CBAMALDADNC)
    // Offset: 0x1CA22A0
    void HGBLCMKNJCO(float CBAMALDADNC);
    // private System.Void DGELIHGGOKB()
    // Offset: 0x1CA22A4
    void DGELIHGGOKB();
    // private System.Void LKHHHCDFENN()
    // Offset: 0x1CA2358
    void LKHHHCDFENN();
    // public System.Void .ctor()
    // Offset: 0x1CA2360
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BardInstrument* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::BardInstrument::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BardInstrument*, creationType>()));
    }
    // private System.Void JMPPPHNKAFG()
    // Offset: 0x1CA23C8
    void JMPPPHNKAFG();
    // public System.Void BHHPHDFLCEO(System.Single CBAMALDADNC)
    // Offset: 0x1CA247C
    void BHHPHDFLCEO(float CBAMALDADNC);
    // private System.Void Awake()
    // Offset: 0x1CA2480
    void Awake();
    // public System.Void AMBFOPBEFKC(System.Single ACNLCMIIIGM)
    // Offset: 0x1CA2534
    void AMBFOPBEFKC(float ACNLCMIIIGM);
    // private System.Void PhysicsInteractableUngrip(MagicalActual.Grabber BALIAOKIHIC)
    // Offset: 0x1CA2538
    void PhysicsInteractableUngrip(::MagicalActual::Grabber* BALIAOKIHIC);
    // private System.Void SnappedBack()
    // Offset: 0x1CA2544
    void SnappedBack();
    // public System.Void CIACKOKIECF(System.Single CBAMALDADNC)
    // Offset: 0x1CA254C
    void CIACKOKIECF(float CBAMALDADNC);
    // private System.Void OHBGDJCGEJG()
    // Offset: 0x1CA2550
    void OHBGDJCGEJG();
    // public System.Void HHLPFLEKOFD(System.Single CBAMALDADNC)
    // Offset: 0x1CA2558
    void HHLPFLEKOFD(float CBAMALDADNC);
    // private System.Void NLOFBPNEFKD()
    // Offset: 0x1CA255C
    void NLOFBPNEFKD();
    // public System.Void KIEFCFGIFOH(System.Single FMEDPJOLPAG)
    // Offset: 0x1CA2610
    void KIEFCFGIFOH(float FMEDPJOLPAG);
    // private System.Void IPAMOJGFOGI()
    // Offset: 0x1CA2614
    void IPAMOJGFOGI();
    // public System.Void GFMAAHEBPNF(System.Single ACNLCMIIIGM)
    // Offset: 0x1CA261C
    void GFMAAHEBPNF(float ACNLCMIIIGM);
    // private System.Void BIGPBECDCII()
    // Offset: 0x1CA2620
    void BIGPBECDCII();
    // public System.Void SetVolumeAbsolute(System.Single CBAMALDADNC)
    // Offset: 0x1CA262C
    void SetVolumeAbsolute(float CBAMALDADNC);
  }; // MagicalActual.BardInstrument
  #pragma pack(pop)
  static check_size<sizeof(BardInstrument), 64 + sizeof(::UnityEngine::GameObject*)> __MagicalActual_BardInstrumentSizeCheck;
  static_assert(sizeof(BardInstrument) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::BardInstrument::JCJCMKPOAKK
// Il2CppName: JCJCMKPOAKK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)()>(&MagicalActual::BardInstrument::JCJCMKPOAKK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "JCJCMKPOAKK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::SetVolume
// Il2CppName: SetVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)(float)>(&MagicalActual::BardInstrument::SetVolume)> {
  static const MethodInfo* get() {
    static auto* FMEDPJOLPAG = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "SetVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FMEDPJOLPAG});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::HDMHEDEGDFD
// Il2CppName: HDMHEDEGDFD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)()>(&MagicalActual::BardInstrument::HDMHEDEGDFD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "HDMHEDEGDFD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::AGNOEHOKDFG
// Il2CppName: AGNOEHOKDFG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)(::MagicalActual::Grabber*)>(&MagicalActual::BardInstrument::AGNOEHOKDFG)> {
  static const MethodInfo* get() {
    static auto* BALIAOKIHIC = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "AGNOEHOKDFG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BALIAOKIHIC});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::SyncedStart
// Il2CppName: SyncedStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)(float)>(&MagicalActual::BardInstrument::SyncedStart)> {
  static const MethodInfo* get() {
    static auto* ACNLCMIIIGM = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "SyncedStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ACNLCMIIIGM});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::JCJHGOJBHOK
// Il2CppName: JCJHGOJBHOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)()>(&MagicalActual::BardInstrument::JCJHGOJBHOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "JCJHGOJBHOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::IJABAEGHLBP
// Il2CppName: IJABAEGHLBP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)()>(&MagicalActual::BardInstrument::IJABAEGHLBP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "IJABAEGHLBP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::OEDMDHOEBLB
// Il2CppName: OEDMDHOEBLB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)(float)>(&MagicalActual::BardInstrument::OEDMDHOEBLB)> {
  static const MethodInfo* get() {
    static auto* CBAMALDADNC = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "OEDMDHOEBLB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CBAMALDADNC});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::HGBLCMKNJCO
// Il2CppName: HGBLCMKNJCO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)(float)>(&MagicalActual::BardInstrument::HGBLCMKNJCO)> {
  static const MethodInfo* get() {
    static auto* CBAMALDADNC = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "HGBLCMKNJCO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CBAMALDADNC});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::DGELIHGGOKB
// Il2CppName: DGELIHGGOKB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)()>(&MagicalActual::BardInstrument::DGELIHGGOKB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "DGELIHGGOKB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::LKHHHCDFENN
// Il2CppName: LKHHHCDFENN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)()>(&MagicalActual::BardInstrument::LKHHHCDFENN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "LKHHHCDFENN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::BardInstrument::JMPPPHNKAFG
// Il2CppName: JMPPPHNKAFG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)()>(&MagicalActual::BardInstrument::JMPPPHNKAFG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "JMPPPHNKAFG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::BHHPHDFLCEO
// Il2CppName: BHHPHDFLCEO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)(float)>(&MagicalActual::BardInstrument::BHHPHDFLCEO)> {
  static const MethodInfo* get() {
    static auto* CBAMALDADNC = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "BHHPHDFLCEO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CBAMALDADNC});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)()>(&MagicalActual::BardInstrument::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::AMBFOPBEFKC
// Il2CppName: AMBFOPBEFKC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)(float)>(&MagicalActual::BardInstrument::AMBFOPBEFKC)> {
  static const MethodInfo* get() {
    static auto* ACNLCMIIIGM = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "AMBFOPBEFKC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ACNLCMIIIGM});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::PhysicsInteractableUngrip
// Il2CppName: PhysicsInteractableUngrip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)(::MagicalActual::Grabber*)>(&MagicalActual::BardInstrument::PhysicsInteractableUngrip)> {
  static const MethodInfo* get() {
    static auto* BALIAOKIHIC = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "PhysicsInteractableUngrip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BALIAOKIHIC});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::SnappedBack
// Il2CppName: SnappedBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)()>(&MagicalActual::BardInstrument::SnappedBack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "SnappedBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::CIACKOKIECF
// Il2CppName: CIACKOKIECF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)(float)>(&MagicalActual::BardInstrument::CIACKOKIECF)> {
  static const MethodInfo* get() {
    static auto* CBAMALDADNC = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "CIACKOKIECF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CBAMALDADNC});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::OHBGDJCGEJG
// Il2CppName: OHBGDJCGEJG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)()>(&MagicalActual::BardInstrument::OHBGDJCGEJG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "OHBGDJCGEJG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::HHLPFLEKOFD
// Il2CppName: HHLPFLEKOFD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)(float)>(&MagicalActual::BardInstrument::HHLPFLEKOFD)> {
  static const MethodInfo* get() {
    static auto* CBAMALDADNC = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "HHLPFLEKOFD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CBAMALDADNC});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::NLOFBPNEFKD
// Il2CppName: NLOFBPNEFKD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)()>(&MagicalActual::BardInstrument::NLOFBPNEFKD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "NLOFBPNEFKD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::KIEFCFGIFOH
// Il2CppName: KIEFCFGIFOH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)(float)>(&MagicalActual::BardInstrument::KIEFCFGIFOH)> {
  static const MethodInfo* get() {
    static auto* FMEDPJOLPAG = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "KIEFCFGIFOH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FMEDPJOLPAG});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::IPAMOJGFOGI
// Il2CppName: IPAMOJGFOGI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)()>(&MagicalActual::BardInstrument::IPAMOJGFOGI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "IPAMOJGFOGI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::GFMAAHEBPNF
// Il2CppName: GFMAAHEBPNF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)(float)>(&MagicalActual::BardInstrument::GFMAAHEBPNF)> {
  static const MethodInfo* get() {
    static auto* ACNLCMIIIGM = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "GFMAAHEBPNF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ACNLCMIIIGM});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::BIGPBECDCII
// Il2CppName: BIGPBECDCII
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)()>(&MagicalActual::BardInstrument::BIGPBECDCII)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "BIGPBECDCII", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BardInstrument::SetVolumeAbsolute
// Il2CppName: SetVolumeAbsolute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BardInstrument::*)(float)>(&MagicalActual::BardInstrument::SetVolumeAbsolute)> {
  static const MethodInfo* get() {
    static auto* CBAMALDADNC = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BardInstrument*), "SetVolumeAbsolute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CBAMALDADNC});
  }
};
