// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Canvas
  class Canvas;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: MeshFilter
  class MeshFilter;
}
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: PointOfInterest
  class PointOfInterest;
  // Forward declaring type: Grabber
  class Grabber;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: PlayerCompass
  class PlayerCompass;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::PlayerCompass);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::PlayerCompass*, "MagicalActual", "PlayerCompass");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x140
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.PlayerCompass
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayerCompass : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject interestIconPrefab
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* interestIconPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public MagicalActual.PointOfInterest[] interestPoints
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::MagicalActual::PointOfInterest*> interestPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::MagicalActual::PointOfInterest*>) == 0x8);
    // private UnityEngine.GameObject[] ILLFCNHBIKG
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::GameObject*> ILLFCNHBIKG;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private UnityEngine.GameObject[] OMJCBKBMDCE
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::GameObject*> OMJCBKBMDCE;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private UnityEngine.GameObject[] FBHPEBCOIPB
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::GameObject*> FBHPEBCOIPB;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private UnityEngine.Vector3[] ALGOLICMILN
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Vector3> ALGOLICMILN;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.String MIAOHMKMKCC
    // Size: 0x8
    // Offset: 0x48
    ::StringW MIAOHMKMKCC;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.UI.Text headingText
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UI::Text* headingText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.Canvas headingCanvas
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Canvas* headingCanvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::Canvas*) == 0x8);
    // private UnityEngine.RaycastHit EIEFDCNCGKG
    // Size: 0x2C
    // Offset: 0x60
    ::UnityEngine::RaycastHit EIEFDCNCGKG;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // Padding between fields: EIEFDCNCGKG and: EMCGJCFHFJI
    char __padding9[0x4] = {};
    // private System.String EMCGJCFHFJI
    // Size: 0x8
    // Offset: 0x90
    ::StringW EMCGJCFHFJI;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.GameObject DDLBKIGHGOB
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::GameObject* DDLBKIGHGOB;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean ILGPCBIMPEN
    // Size: 0x1
    // Offset: 0xA0
    bool ILGPCBIMPEN;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ILGPCBIMPEN and: journalNotification
    char __padding12[0x7] = {};
    // public UnityEngine.GameObject journalNotification
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::GameObject* journalNotification;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject journalNotificationOnBody
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::GameObject* journalNotificationOnBody;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean showJournalNotification
    // Size: 0x1
    // Offset: 0xB8
    bool showJournalNotification;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showJournalNotification and: ONANMANNPAN
    char __padding15[0x7] = {};
    // private UnityEngine.Transform ONANMANNPAN
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Transform* ONANMANNPAN;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 JBAJFMHBCMD
    // Size: 0xC
    // Offset: 0xC8
    ::UnityEngine::Vector3 JBAJFMHBCMD;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion IDFEBFFILHO
    // Size: 0x10
    // Offset: 0xD4
    ::UnityEngine::Quaternion IDFEBFFILHO;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // Padding between fields: IDFEBFFILHO and: EIPMBKLODIJ
    char __padding18[0x4] = {};
    // private UnityEngine.Rigidbody EIPMBKLODIJ
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Rigidbody* EIPMBKLODIJ;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private UnityEngine.Color BFNNPEJHIMA
    // Size: 0x10
    // Offset: 0xF0
    ::UnityEngine::Color BFNNPEJHIMA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.MeshRenderer HCMCDILAJCJ
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::MeshRenderer* HCMCDILAJCJ;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private MagicalActual.Grabber CJFDOLCPAJO
    // Size: 0x8
    // Offset: 0x108
    ::MagicalActual::Grabber* CJFDOLCPAJO;
    // Field size check
    static_assert(sizeof(::MagicalActual::Grabber*) == 0x8);
    // private System.Int32 IGOPFAFMIIP
    // Size: 0x4
    // Offset: 0x110
    int IGOPFAFMIIP;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 BKHJIJOKPLF
    // Size: 0x4
    // Offset: 0x114
    int BKHJIJOKPLF;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single MFEENEOGJGH
    // Size: 0x4
    // Offset: 0x118
    float MFEENEOGJGH;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single IDAFGBNBFDN
    // Size: 0x4
    // Offset: 0x11C
    float IDAFGBNBFDN;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean AGBIINGAONI
    // Size: 0x1
    // Offset: 0x120
    bool AGBIINGAONI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: AGBIINGAONI and: typeMeshes
    char __padding27[0x7] = {};
    // public UnityEngine.Mesh[] typeMeshes
    // Size: 0x8
    // Offset: 0x128
    ::ArrayW<::UnityEngine::Mesh*> typeMeshes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Mesh*>) == 0x8);
    // private UnityEngine.MeshFilter LDNPJGPFLBN
    // Size: 0x8
    // Offset: 0x130
    ::UnityEngine::MeshFilter* LDNPJGPFLBN;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // public UnityEngine.GameObject[] switchVfx
    // Size: 0x8
    // Offset: 0x138
    ::ArrayW<::UnityEngine::GameObject*> switchVfx;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject interestIconPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_interestIconPrefab();
    // Get instance field reference: public MagicalActual.PointOfInterest[] interestPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::MagicalActual::PointOfInterest*>& dyn_interestPoints();
    // Get instance field reference: private UnityEngine.GameObject[] ILLFCNHBIKG
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_ILLFCNHBIKG();
    // Get instance field reference: private UnityEngine.GameObject[] OMJCBKBMDCE
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_OMJCBKBMDCE();
    // Get instance field reference: private UnityEngine.GameObject[] FBHPEBCOIPB
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_FBHPEBCOIPB();
    // Get instance field reference: private UnityEngine.Vector3[] ALGOLICMILN
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_ALGOLICMILN();
    // Get instance field reference: private System.String MIAOHMKMKCC
    [[deprecated("Use field access instead!")]] ::StringW& dyn_MIAOHMKMKCC();
    // Get instance field reference: public UnityEngine.UI.Text headingText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_headingText();
    // Get instance field reference: public UnityEngine.Canvas headingCanvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::Canvas*& dyn_headingCanvas();
    // Get instance field reference: private UnityEngine.RaycastHit EIEFDCNCGKG
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_EIEFDCNCGKG();
    // Get instance field reference: private System.String EMCGJCFHFJI
    [[deprecated("Use field access instead!")]] ::StringW& dyn_EMCGJCFHFJI();
    // Get instance field reference: private UnityEngine.GameObject DDLBKIGHGOB
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_DDLBKIGHGOB();
    // Get instance field reference: private System.Boolean ILGPCBIMPEN
    [[deprecated("Use field access instead!")]] bool& dyn_ILGPCBIMPEN();
    // Get instance field reference: public UnityEngine.GameObject journalNotification
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_journalNotification();
    // Get instance field reference: public UnityEngine.GameObject journalNotificationOnBody
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_journalNotificationOnBody();
    // Get instance field reference: public System.Boolean showJournalNotification
    [[deprecated("Use field access instead!")]] bool& dyn_showJournalNotification();
    // Get instance field reference: private UnityEngine.Transform ONANMANNPAN
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_ONANMANNPAN();
    // Get instance field reference: private UnityEngine.Vector3 JBAJFMHBCMD
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_JBAJFMHBCMD();
    // Get instance field reference: private UnityEngine.Quaternion IDFEBFFILHO
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_IDFEBFFILHO();
    // Get instance field reference: private UnityEngine.Rigidbody EIPMBKLODIJ
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_EIPMBKLODIJ();
    // Get instance field reference: private UnityEngine.Color BFNNPEJHIMA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_BFNNPEJHIMA();
    // Get instance field reference: private UnityEngine.MeshRenderer HCMCDILAJCJ
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_HCMCDILAJCJ();
    // Get instance field reference: private MagicalActual.Grabber CJFDOLCPAJO
    [[deprecated("Use field access instead!")]] ::MagicalActual::Grabber*& dyn_CJFDOLCPAJO();
    // Get instance field reference: private System.Int32 IGOPFAFMIIP
    [[deprecated("Use field access instead!")]] int& dyn_IGOPFAFMIIP();
    // Get instance field reference: private System.Int32 BKHJIJOKPLF
    [[deprecated("Use field access instead!")]] int& dyn_BKHJIJOKPLF();
    // Get instance field reference: private System.Single MFEENEOGJGH
    [[deprecated("Use field access instead!")]] float& dyn_MFEENEOGJGH();
    // Get instance field reference: private System.Single IDAFGBNBFDN
    [[deprecated("Use field access instead!")]] float& dyn_IDAFGBNBFDN();
    // Get instance field reference: private System.Boolean AGBIINGAONI
    [[deprecated("Use field access instead!")]] bool& dyn_AGBIINGAONI();
    // Get instance field reference: public UnityEngine.Mesh[] typeMeshes
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Mesh*>& dyn_typeMeshes();
    // Get instance field reference: private UnityEngine.MeshFilter LDNPJGPFLBN
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn_LDNPJGPFLBN();
    // Get instance field reference: public UnityEngine.GameObject[] switchVfx
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_switchVfx();
    // private System.Void MILCGHICOIG()
    // Offset: 0x1195EB0
    void MILCGHICOIG();
    // private System.Void GENOAGKDLMG()
    // Offset: 0x1196070
    void GENOAGKDLMG();
    // private System.Void FinishUngrip()
    // Offset: 0x1196208
    void FinishUngrip();
    // public System.Void MCNECNAOLMG()
    // Offset: 0x1196698
    void MCNECNAOLMG();
    // private System.Void ICFANEFPFBJ()
    // Offset: 0x1196730
    void ICFANEFPFBJ();
    // private System.Void BJMOBEBKJKG()
    // Offset: 0x1197B50
    void BJMOBEBKJKG();
    // public System.Void OHGKCNIMODM()
    // Offset: 0x1197C84
    void OHGKCNIMODM();
    // private System.Void PlayerFacing()
    // Offset: 0x11983DC
    void PlayerFacing();
    // public System.Void FGJNLMBBNNJ()
    // Offset: 0x119851C
    void FGJNLMBBNNJ();
    // private System.Void HCINEHCPBOH()
    // Offset: 0x11990B4
    void HCINEHCPBOH();
    // private System.Void ALBPCFDBDND()
    // Offset: 0x1196064
    void ALBPCFDBDND();
    // private System.Void OJMNIIJIFGM(MagicalActual.Grabber BALIAOKIHIC)
    // Offset: 0x119975C
    void OJMNIIJIFGM(::MagicalActual::Grabber* BALIAOKIHIC);
    // private System.Void PlayerStoppedFacing()
    // Offset: 0x1199BEC
    void PlayerStoppedFacing();
    // private System.Void JIIHPABLENA()
    // Offset: 0x1199D8C
    void JIIHPABLENA();
    // public System.Void DLBGLEFAODM(UnityEngine.Vector3 CFPFDCPBBEF)
    // Offset: 0x1199ED8
    void DLBGLEFAODM(::UnityEngine::Vector3 CFPFDCPBBEF);
    // public System.Void CPLNBEMBHAB()
    // Offset: 0x1199EE4
    void CPLNBEMBHAB();
    // private System.Void PhysicsInteractableUngrip(MagicalActual.Grabber BALIAOKIHIC)
    // Offset: 0x119A654
    void PhysicsInteractableUngrip(::MagicalActual::Grabber* BALIAOKIHIC);
    // private System.Void AIDMPCAEMEI()
    // Offset: 0x119A718
    void AIDMPCAEMEI();
    // private System.Void FLLHAGLFBDL()
    // Offset: 0x11983F4
    void FLLHAGLFBDL();
    // private System.Void DDBMPOMJFJJ()
    // Offset: 0x119A72C
    void DDBMPOMJFJJ();
    // public System.Void .ctor()
    // Offset: 0x119A8C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerCompass* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::PlayerCompass::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerCompass*, creationType>()));
    }
    // private System.Void ANKCGGIBCAI()
    // Offset: 0x119A988
    void ANKCGGIBCAI();
    // private System.Void IDDHNKLELDD()
    // Offset: 0x119BF9C
    void IDDHNKLELDD();
    // private System.Void IBJKJHPFKOC(MagicalActual.Grabber BALIAOKIHIC)
    // Offset: 0x119C0E8
    void IBJKJHPFKOC(::MagicalActual::Grabber* BALIAOKIHIC);
    // public System.Void ScanForInterestPoints()
    // Offset: 0x119C1B4
    void ScanForInterestPoints();
    // private System.Void NHIKAIGKDBB()
    // Offset: 0x119CDAC
    void NHIKAIGKDBB();
    // private System.Void OJPMLHNJEDO()
    // Offset: 0x119CDB0
    void OJPMLHNJEDO();
    // public System.Void AFPAOBLCFNC()
    // Offset: 0x119D240
    void AFPAOBLCFNC();
    // public System.Void HPLGDNIJJLG()
    // Offset: 0x119DC7C
    void HPLGDNIJJLG();
    // private System.Void IABCBFDONLK()
    // Offset: 0x119E6BC
    void IABCBFDONLK();
    // private System.Void PhysicsInteractableShake()
    // Offset: 0x119E874
    void PhysicsInteractableShake();
    // public System.Void UpdatePermanentIcons()
    // Offset: 0x119EA28
    void UpdatePermanentIcons();
    // private System.Void Start()
    // Offset: 0x119F404
    void Start();
    // private System.Void DIBOPJJAKDG()
    // Offset: 0x119F574
    void DIBOPJJAKDG();
    // private System.Void MILGJAHIOLC(MagicalActual.Grabber BALIAOKIHIC)
    // Offset: 0x119F580
    void MILGJAHIOLC(::MagicalActual::Grabber* BALIAOKIHIC);
    // public System.Void EBMALOANJNA()
    // Offset: 0x119F958
    void EBMALOANJNA();
    // public System.Void HCJDNCLPNOC()
    // Offset: 0x11A00C8
    void HCJDNCLPNOC();
    // private System.Void FICBIEAEPIF(MagicalActual.Grabber BALIAOKIHIC)
    // Offset: 0x11A07EC
    void FICBIEAEPIF(::MagicalActual::Grabber* BALIAOKIHIC);
    // public System.Void updateOriginalPosition(UnityEngine.Vector3 CFPFDCPBBEF)
    // Offset: 0x11A0BC4
    void updateOriginalPosition(::UnityEngine::Vector3 CFPFDCPBBEF);
    // public System.Void NLECJOGANIG()
    // Offset: 0x11A0BD0
    void NLECJOGANIG();
    // private System.Void PhysicsInteractableGrip(MagicalActual.Grabber BALIAOKIHIC)
    // Offset: 0x11A1340
    void PhysicsInteractableGrip(::MagicalActual::Grabber* BALIAOKIHIC);
    // private System.Void EOMAOAGGJOE()
    // Offset: 0x11A171C
    void EOMAOAGGJOE();
    // public System.Void UpdateJournalNotifications()
    // Offset: 0x1199B30
    void UpdateJournalNotifications();
    // public System.Void UpdatePartyMemberPoints()
    // Offset: 0x11A1868
    void UpdatePartyMemberPoints();
    // private System.Void BKKLBKODIAF()
    // Offset: 0x11995C4
    void BKKLBKODIAF();
    // private System.Void DIFMHHIDPDH()
    // Offset: 0x119E6C0
    void DIFMHHIDPDH();
    // private System.Void OGKMAHNDKKE()
    // Offset: 0x11A1F74
    void OGKMAHNDKKE();
    // private System.Void FIJBKIEEBJG()
    // Offset: 0x11A2110
    void FIJBKIEEBJG();
    // private System.Void PhysicsInteractableTrigger()
    // Offset: 0x11A22A8
    void PhysicsInteractableTrigger();
    // private System.Void OFNMNJHAHMF()
    // Offset: 0x1198C48
    void OFNMNJHAHMF();
    // private System.Void OHKNMEEJMBE()
    // Offset: 0x1199DA4
    void OHKNMEEJMBE();
    // private System.Void NAHOBDFEBEK()
    // Offset: 0x119C900
    void NAHOBDFEBEK();
    // private System.Void MKHEDAAIDIE()
    // Offset: 0x11A22AC
    void MKHEDAAIDIE();
    // private System.Void FixedUpdate()
    // Offset: 0x11A396C
    void FixedUpdate();
    // private System.Void KOKNNFHLOBD()
    // Offset: 0x11A1734
    void KOKNNFHLOBD();
    // private System.Void MJGFEGKILCG()
    // Offset: 0x119BFB4
    void MJGFEGKILCG();
    // private System.Void EKJJDPOKIAD()
    // Offset: 0x1199BF4
    void EKJJDPOKIAD();
  }; // MagicalActual.PlayerCompass
  #pragma pack(pop)
  static check_size<sizeof(PlayerCompass), 312 + sizeof(::ArrayW<::UnityEngine::GameObject*>)> __MagicalActual_PlayerCompassSizeCheck;
  static_assert(sizeof(PlayerCompass) == 0x140);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::MILCGHICOIG
// Il2CppName: MILCGHICOIG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::MILCGHICOIG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "MILCGHICOIG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::GENOAGKDLMG
// Il2CppName: GENOAGKDLMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::GENOAGKDLMG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "GENOAGKDLMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::FinishUngrip
// Il2CppName: FinishUngrip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::FinishUngrip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "FinishUngrip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::MCNECNAOLMG
// Il2CppName: MCNECNAOLMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::MCNECNAOLMG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "MCNECNAOLMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::ICFANEFPFBJ
// Il2CppName: ICFANEFPFBJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::ICFANEFPFBJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "ICFANEFPFBJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::BJMOBEBKJKG
// Il2CppName: BJMOBEBKJKG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::BJMOBEBKJKG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "BJMOBEBKJKG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::OHGKCNIMODM
// Il2CppName: OHGKCNIMODM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::OHGKCNIMODM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "OHGKCNIMODM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::PlayerFacing
// Il2CppName: PlayerFacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::PlayerFacing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "PlayerFacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::FGJNLMBBNNJ
// Il2CppName: FGJNLMBBNNJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::FGJNLMBBNNJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "FGJNLMBBNNJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::HCINEHCPBOH
// Il2CppName: HCINEHCPBOH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::HCINEHCPBOH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "HCINEHCPBOH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::ALBPCFDBDND
// Il2CppName: ALBPCFDBDND
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::ALBPCFDBDND)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "ALBPCFDBDND", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::OJMNIIJIFGM
// Il2CppName: OJMNIIJIFGM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)(::MagicalActual::Grabber*)>(&MagicalActual::PlayerCompass::OJMNIIJIFGM)> {
  static const MethodInfo* get() {
    static auto* BALIAOKIHIC = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "OJMNIIJIFGM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BALIAOKIHIC});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::PlayerStoppedFacing
// Il2CppName: PlayerStoppedFacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::PlayerStoppedFacing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "PlayerStoppedFacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::JIIHPABLENA
// Il2CppName: JIIHPABLENA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::JIIHPABLENA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "JIIHPABLENA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::DLBGLEFAODM
// Il2CppName: DLBGLEFAODM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)(::UnityEngine::Vector3)>(&MagicalActual::PlayerCompass::DLBGLEFAODM)> {
  static const MethodInfo* get() {
    static auto* CFPFDCPBBEF = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "DLBGLEFAODM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFPFDCPBBEF});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::CPLNBEMBHAB
// Il2CppName: CPLNBEMBHAB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::CPLNBEMBHAB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "CPLNBEMBHAB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::PhysicsInteractableUngrip
// Il2CppName: PhysicsInteractableUngrip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)(::MagicalActual::Grabber*)>(&MagicalActual::PlayerCompass::PhysicsInteractableUngrip)> {
  static const MethodInfo* get() {
    static auto* BALIAOKIHIC = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "PhysicsInteractableUngrip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BALIAOKIHIC});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::AIDMPCAEMEI
// Il2CppName: AIDMPCAEMEI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::AIDMPCAEMEI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "AIDMPCAEMEI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::FLLHAGLFBDL
// Il2CppName: FLLHAGLFBDL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::FLLHAGLFBDL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "FLLHAGLFBDL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::DDBMPOMJFJJ
// Il2CppName: DDBMPOMJFJJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::DDBMPOMJFJJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "DDBMPOMJFJJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::ANKCGGIBCAI
// Il2CppName: ANKCGGIBCAI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::ANKCGGIBCAI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "ANKCGGIBCAI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::IDDHNKLELDD
// Il2CppName: IDDHNKLELDD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::IDDHNKLELDD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "IDDHNKLELDD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::IBJKJHPFKOC
// Il2CppName: IBJKJHPFKOC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)(::MagicalActual::Grabber*)>(&MagicalActual::PlayerCompass::IBJKJHPFKOC)> {
  static const MethodInfo* get() {
    static auto* BALIAOKIHIC = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "IBJKJHPFKOC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BALIAOKIHIC});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::ScanForInterestPoints
// Il2CppName: ScanForInterestPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::ScanForInterestPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "ScanForInterestPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::NHIKAIGKDBB
// Il2CppName: NHIKAIGKDBB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::NHIKAIGKDBB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "NHIKAIGKDBB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::OJPMLHNJEDO
// Il2CppName: OJPMLHNJEDO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::OJPMLHNJEDO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "OJPMLHNJEDO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::AFPAOBLCFNC
// Il2CppName: AFPAOBLCFNC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::AFPAOBLCFNC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "AFPAOBLCFNC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::HPLGDNIJJLG
// Il2CppName: HPLGDNIJJLG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::HPLGDNIJJLG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "HPLGDNIJJLG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::IABCBFDONLK
// Il2CppName: IABCBFDONLK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::IABCBFDONLK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "IABCBFDONLK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::PhysicsInteractableShake
// Il2CppName: PhysicsInteractableShake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::PhysicsInteractableShake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "PhysicsInteractableShake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::UpdatePermanentIcons
// Il2CppName: UpdatePermanentIcons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::UpdatePermanentIcons)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "UpdatePermanentIcons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::DIBOPJJAKDG
// Il2CppName: DIBOPJJAKDG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::DIBOPJJAKDG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "DIBOPJJAKDG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::MILGJAHIOLC
// Il2CppName: MILGJAHIOLC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)(::MagicalActual::Grabber*)>(&MagicalActual::PlayerCompass::MILGJAHIOLC)> {
  static const MethodInfo* get() {
    static auto* BALIAOKIHIC = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "MILGJAHIOLC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BALIAOKIHIC});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::EBMALOANJNA
// Il2CppName: EBMALOANJNA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::EBMALOANJNA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "EBMALOANJNA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::HCJDNCLPNOC
// Il2CppName: HCJDNCLPNOC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::HCJDNCLPNOC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "HCJDNCLPNOC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::FICBIEAEPIF
// Il2CppName: FICBIEAEPIF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)(::MagicalActual::Grabber*)>(&MagicalActual::PlayerCompass::FICBIEAEPIF)> {
  static const MethodInfo* get() {
    static auto* BALIAOKIHIC = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "FICBIEAEPIF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BALIAOKIHIC});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::updateOriginalPosition
// Il2CppName: updateOriginalPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)(::UnityEngine::Vector3)>(&MagicalActual::PlayerCompass::updateOriginalPosition)> {
  static const MethodInfo* get() {
    static auto* CFPFDCPBBEF = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "updateOriginalPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CFPFDCPBBEF});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::NLECJOGANIG
// Il2CppName: NLECJOGANIG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::NLECJOGANIG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "NLECJOGANIG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::PhysicsInteractableGrip
// Il2CppName: PhysicsInteractableGrip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)(::MagicalActual::Grabber*)>(&MagicalActual::PlayerCompass::PhysicsInteractableGrip)> {
  static const MethodInfo* get() {
    static auto* BALIAOKIHIC = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "PhysicsInteractableGrip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BALIAOKIHIC});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::EOMAOAGGJOE
// Il2CppName: EOMAOAGGJOE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::EOMAOAGGJOE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "EOMAOAGGJOE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::UpdateJournalNotifications
// Il2CppName: UpdateJournalNotifications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::UpdateJournalNotifications)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "UpdateJournalNotifications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::UpdatePartyMemberPoints
// Il2CppName: UpdatePartyMemberPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::UpdatePartyMemberPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "UpdatePartyMemberPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::BKKLBKODIAF
// Il2CppName: BKKLBKODIAF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::BKKLBKODIAF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "BKKLBKODIAF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::DIFMHHIDPDH
// Il2CppName: DIFMHHIDPDH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::DIFMHHIDPDH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "DIFMHHIDPDH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::OGKMAHNDKKE
// Il2CppName: OGKMAHNDKKE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::OGKMAHNDKKE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "OGKMAHNDKKE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::FIJBKIEEBJG
// Il2CppName: FIJBKIEEBJG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::FIJBKIEEBJG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "FIJBKIEEBJG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::PhysicsInteractableTrigger
// Il2CppName: PhysicsInteractableTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::PhysicsInteractableTrigger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "PhysicsInteractableTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::OFNMNJHAHMF
// Il2CppName: OFNMNJHAHMF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::OFNMNJHAHMF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "OFNMNJHAHMF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::OHKNMEEJMBE
// Il2CppName: OHKNMEEJMBE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::OHKNMEEJMBE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "OHKNMEEJMBE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::NAHOBDFEBEK
// Il2CppName: NAHOBDFEBEK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::NAHOBDFEBEK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "NAHOBDFEBEK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::MKHEDAAIDIE
// Il2CppName: MKHEDAAIDIE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::MKHEDAAIDIE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "MKHEDAAIDIE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::KOKNNFHLOBD
// Il2CppName: KOKNNFHLOBD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::KOKNNFHLOBD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "KOKNNFHLOBD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::MJGFEGKILCG
// Il2CppName: MJGFEGKILCG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::MJGFEGKILCG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "MJGFEGKILCG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PlayerCompass::EKJJDPOKIAD
// Il2CppName: EKJJDPOKIAD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PlayerCompass::*)()>(&MagicalActual::PlayerCompass::EKJJDPOKIAD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PlayerCompass*), "EKJJDPOKIAD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
