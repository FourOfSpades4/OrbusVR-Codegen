// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Monster
  class Monster;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: M_NecroMini
  class M_NecroMini;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::M_NecroMini);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::M_NecroMini*, "MagicalActual", "M_NecroMini");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.M_NecroMini
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD5924
  class M_NecroMini : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MagicalActual.Monster BIIBEOELIHH
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::Monster* BIIBEOELIHH;
    // Field size check
    static_assert(sizeof(::MagicalActual::Monster*) == 0x8);
    // public UnityEngine.GameObject vfxSlash
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* vfxSlash;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject explodeVfx
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* explodeVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x30
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MagicalActual.Monster BIIBEOELIHH
    [[deprecated("Use field access instead!")]] ::MagicalActual::Monster*& dyn_BIIBEOELIHH();
    // Get instance field reference: public UnityEngine.GameObject vfxSlash
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxSlash();
    // Get instance field reference: public UnityEngine.GameObject explodeVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_explodeVfx();
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // public System.Void OKOKNIMANJN()
    // Offset: 0x26F87DC
    void OKOKNIMANJN();
    // public System.Void GBIHGNJDKNE()
    // Offset: 0x26F8908
    void GBIHGNJDKNE();
    // public System.Void HECPKNNELIE()
    // Offset: 0x26F8A34
    void HECPKNNELIE();
    // public System.Void JFDEDDEJJPK()
    // Offset: 0x26F8B60
    void JFDEDDEJJPK();
    // private System.Void GPFBGGFPINB()
    // Offset: 0x26F8D84
    void GPFBGGFPINB();
    // private System.Void NNDKJCJFIAK()
    // Offset: 0x26F8DDC
    void NNDKJCJFIAK();
    // public System.Void PNGJLHALFJH()
    // Offset: 0x26F8E34
    void PNGJLHALFJH();
    // private System.Void IDOCJGNLNFL()
    // Offset: 0x26F8F60
    void IDOCJGNLNFL();
    // public System.Void OBJPGBLCLAJ()
    // Offset: 0x26F8FB8
    void OBJPGBLCLAJ();
    // public System.Void GLJFFHNKKPI()
    // Offset: 0x26F90E4
    void GLJFFHNKKPI();
    // public System.Void MonsterDeath()
    // Offset: 0x26F9308
    void MonsterDeath();
    // private System.Void HKINNMLBMMG()
    // Offset: 0x26F9430
    void HKINNMLBMMG();
    // public System.Void JFBOMHHGFDN()
    // Offset: 0x26F9488
    void JFBOMHHGFDN();
    // private System.Void CBMDGNKFPIO()
    // Offset: 0x26F96AC
    void CBMDGNKFPIO();
    // public System.Void LNICPJBGLOH()
    // Offset: 0x26F9704
    void LNICPJBGLOH();
    // public System.Void IMMNFIIOEGC()
    // Offset: 0x26F9830
    void IMMNFIIOEGC();
    // public System.Void .ctor()
    // Offset: 0x26F995C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static M_NecroMini* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::M_NecroMini::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<M_NecroMini*, creationType>()));
    }
    // private System.Void KBDGAPMJGLG()
    // Offset: 0x26F99B4
    void KBDGAPMJGLG();
    // public System.Void NNFPFHEALFM()
    // Offset: 0x26F9A0C
    void NNFPFHEALFM();
    // public System.Void KBLCHJGCHFG()
    // Offset: 0x26F9B38
    void KBLCHJGCHFG();
    // private System.Void FGIFGGNGKPK()
    // Offset: 0x26F9C64
    void FGIFGGNGKPK();
    // public System.Void Slash()
    // Offset: 0x26F9CBC
    void Slash();
    // public System.Void JPEMEKAMMEH()
    // Offset: 0x26F9ED4
    void JPEMEKAMMEH();
    // public System.Void GILLJBIMGNJ()
    // Offset: 0x26FA000
    void GILLJBIMGNJ();
    // private System.Void Start()
    // Offset: 0x26FA224
    void Start();
    // private System.Void KPOAAAHLGLA()
    // Offset: 0x26FA27C
    void KPOAAAHLGLA();
    // public System.Void BLNOEOOBHIF()
    // Offset: 0x26FA2D4
    void BLNOEOOBHIF();
  }; // MagicalActual.M_NecroMini
  #pragma pack(pop)
  static check_size<sizeof(M_NecroMini), 48 + sizeof(::StringW)> __MagicalActual_M_NecroMiniSizeCheck;
  static_assert(sizeof(M_NecroMini) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::OKOKNIMANJN
// Il2CppName: OKOKNIMANJN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::OKOKNIMANJN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "OKOKNIMANJN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::GBIHGNJDKNE
// Il2CppName: GBIHGNJDKNE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::GBIHGNJDKNE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "GBIHGNJDKNE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::HECPKNNELIE
// Il2CppName: HECPKNNELIE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::HECPKNNELIE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "HECPKNNELIE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::JFDEDDEJJPK
// Il2CppName: JFDEDDEJJPK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::JFDEDDEJJPK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "JFDEDDEJJPK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::GPFBGGFPINB
// Il2CppName: GPFBGGFPINB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::GPFBGGFPINB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "GPFBGGFPINB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::NNDKJCJFIAK
// Il2CppName: NNDKJCJFIAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::NNDKJCJFIAK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "NNDKJCJFIAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::PNGJLHALFJH
// Il2CppName: PNGJLHALFJH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::PNGJLHALFJH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "PNGJLHALFJH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::IDOCJGNLNFL
// Il2CppName: IDOCJGNLNFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::IDOCJGNLNFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "IDOCJGNLNFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::OBJPGBLCLAJ
// Il2CppName: OBJPGBLCLAJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::OBJPGBLCLAJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "OBJPGBLCLAJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::GLJFFHNKKPI
// Il2CppName: GLJFFHNKKPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::GLJFFHNKKPI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "GLJFFHNKKPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::MonsterDeath
// Il2CppName: MonsterDeath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::MonsterDeath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "MonsterDeath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::HKINNMLBMMG
// Il2CppName: HKINNMLBMMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::HKINNMLBMMG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "HKINNMLBMMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::JFBOMHHGFDN
// Il2CppName: JFBOMHHGFDN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::JFBOMHHGFDN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "JFBOMHHGFDN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::CBMDGNKFPIO
// Il2CppName: CBMDGNKFPIO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::CBMDGNKFPIO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "CBMDGNKFPIO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::LNICPJBGLOH
// Il2CppName: LNICPJBGLOH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::LNICPJBGLOH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "LNICPJBGLOH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::IMMNFIIOEGC
// Il2CppName: IMMNFIIOEGC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::IMMNFIIOEGC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "IMMNFIIOEGC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::KBDGAPMJGLG
// Il2CppName: KBDGAPMJGLG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::KBDGAPMJGLG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "KBDGAPMJGLG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::NNFPFHEALFM
// Il2CppName: NNFPFHEALFM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::NNFPFHEALFM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "NNFPFHEALFM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::KBLCHJGCHFG
// Il2CppName: KBLCHJGCHFG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::KBLCHJGCHFG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "KBLCHJGCHFG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::FGIFGGNGKPK
// Il2CppName: FGIFGGNGKPK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::FGIFGGNGKPK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "FGIFGGNGKPK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::Slash
// Il2CppName: Slash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::Slash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "Slash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::JPEMEKAMMEH
// Il2CppName: JPEMEKAMMEH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::JPEMEKAMMEH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "JPEMEKAMMEH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::GILLJBIMGNJ
// Il2CppName: GILLJBIMGNJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::GILLJBIMGNJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "GILLJBIMGNJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::KPOAAAHLGLA
// Il2CppName: KPOAAAHLGLA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::KPOAAAHLGLA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "KPOAAAHLGLA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_NecroMini::BLNOEOOBHIF
// Il2CppName: BLNOEOOBHIF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_NecroMini::*)()>(&MagicalActual::M_NecroMini::BLNOEOOBHIF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_NecroMini*), "BLNOEOOBHIF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
