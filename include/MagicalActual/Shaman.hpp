// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IPlayerClass
#include "GlobalNamespace/IPlayerClass.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: NetEntity
  class NetEntity;
  // Forward declaring type: PlayerClass
  class PlayerClass;
  // Forward declaring type: PlayerAvatar
  class PlayerAvatar;
  // Forward declaring type: PlayerCharacter
  class PlayerCharacter;
  // Forward declaring type: ShamanSpawnedTotem
  class ShamanSpawnedTotem;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: ExtUI
namespace ExtUI {
  // Forward declaring type: InventoryItem
  class InventoryItem;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ClickedEventArgs
  struct ClickedEventArgs;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Shaman
  class Shaman;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::Shaman);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::Shaman*, "MagicalActual", "Shaman");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0xEF
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.Shaman
  // [TokenAttribute] Offset: FFFFFFFF
  class Shaman : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IPlayerClass*/ {
    public:
    // Nested type: ::MagicalActual::Shaman::arrowSpellIdx
    struct arrowSpellIdx;
    // Nested type: ::MagicalActual::Shaman::$$c
    class $$c;
    // Nested type: ::MagicalActual::Shaman::$$c__DisplayClass62_0
    class $$c__DisplayClass62_0;
    // Nested type: ::MagicalActual::Shaman::$$c__DisplayClass71_0
    class $$c__DisplayClass71_0;
    public:
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x18
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private MagicalActual.NetEntity IJJGNKLFGJN
    // Size: 0x8
    // Offset: 0x20
    ::MagicalActual::NetEntity* IJJGNKLFGJN;
    // Field size check
    static_assert(sizeof(::MagicalActual::NetEntity*) == 0x8);
    // private System.Boolean HNFCLAFDJBD
    // Size: 0x1
    // Offset: 0x28
    bool HNFCLAFDJBD;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: HNFCLAFDJBD and: FNINBDEICCD
    char __padding2[0x7] = {};
    // private MagicalActual.PlayerClass FNINBDEICCD
    // Size: 0x8
    // Offset: 0x30
    ::MagicalActual::PlayerClass* FNINBDEICCD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerClass*) == 0x8);
    // private MagicalActual.PlayerAvatar EENJNFDNJBD
    // Size: 0x8
    // Offset: 0x38
    ::MagicalActual::PlayerAvatar* EENJNFDNJBD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerAvatar*) == 0x8);
    // private MagicalActual.PlayerCharacter HCFELEODBLD
    // Size: 0x8
    // Offset: 0x40
    ::MagicalActual::PlayerCharacter* HCFELEODBLD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerCharacter*) == 0x8);
    // private UnityEngine.GameObject JJDMDLCCPDD
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* JJDMDLCCPDD;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject CCEMBLKGKLN
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* CCEMBLKGKLN;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject GKJEHAKEABK
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* GKJEHAKEABK;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Int32 KHIKJLICKKF
    // Size: 0x4
    // Offset: 0x60
    int KHIKJLICKKF;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 FJPBNPLIKHA
    // Size: 0x4
    // Offset: 0x64
    int FJPBNPLIKHA;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.GameObject PPJCBODBHOH
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* PPJCBODBHOH;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject superVfx
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* superVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean GCCMBLOGLBA
    // Size: 0x1
    // Offset: 0x78
    bool GCCMBLOGLBA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean GHBBMIFHKGO
    // Size: 0x1
    // Offset: 0x79
    bool GHBBMIFHKGO;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean HIKIBDCNDAA
    // Size: 0x1
    // Offset: 0x7A
    bool HIKIBDCNDAA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean IMNDEEOEOKA
    // Size: 0x1
    // Offset: 0x7B
    bool IMNDEEOEOKA;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single AMKEKINLGLH
    // Size: 0x4
    // Offset: 0x7C
    float AMKEKINLGLH;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single PJNDMIEHENA
    // Size: 0x4
    // Offset: 0x80
    float PJNDMIEHENA;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single PLLELMKFNDD
    // Size: 0x4
    // Offset: 0x84
    float PLLELMKFNDD;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.GameObject totemHolder
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::GameObject* totemHolder;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject mask
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::GameObject* mask;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject[] LJKGLEOPOFK
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::UnityEngine::GameObject*> LJKGLEOPOFK;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public System.Collections.Generic.List`1<MagicalActual.ShamanSpawnedTotem> activeTotems
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Generic::List_1<::MagicalActual::ShamanSpawnedTotem*>* activeTotems;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::MagicalActual::ShamanSpawnedTotem*>*) == 0x8);
    // private System.Boolean DLIKANCFGGN
    // Size: 0x1
    // Offset: 0xA8
    bool DLIKANCFGGN;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: DLIKANCFGGN and: KEPIOBADOOK
    char __padding24[0x3] = {};
    // private System.Single KEPIOBADOOK
    // Size: 0x4
    // Offset: 0xAC
    float KEPIOBADOOK;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single IAHDAENGLNH
    // Size: 0x4
    // Offset: 0xB0
    float IAHDAENGLNH;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: IAHDAENGLNH and: EPPIPLHANGD
    char __padding26[0x4] = {};
    // private UnityEngine.RaycastHit[] EPPIPLHANGD
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<::UnityEngine::RaycastHit> EPPIPLHANGD;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private UnityEngine.Transform ADKPNHFAGFF
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Transform* ADKPNHFAGFF;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.GameObject EEJLAGDKGFM
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::GameObject* EEJLAGDKGFM;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean GFENBLHLBHH
    // Size: 0x1
    // Offset: 0xD0
    bool GFENBLHLBHH;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean EEEGNIBDONP
    // Size: 0x1
    // Offset: 0xD1
    bool EEEGNIBDONP;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: EEEGNIBDONP and: BKKAHCFNGPH
    char __padding31[0x6] = {};
    // private MagicalActual.ShamanSpawnedTotem BKKAHCFNGPH
    // Size: 0x8
    // Offset: 0xD8
    ::MagicalActual::ShamanSpawnedTotem* BKKAHCFNGPH;
    // Field size check
    static_assert(sizeof(::MagicalActual::ShamanSpawnedTotem*) == 0x8);
    // private MagicalActual.ShamanSpawnedTotem JMJOHLPMIIM
    // Size: 0x8
    // Offset: 0xE0
    ::MagicalActual::ShamanSpawnedTotem* JMJOHLPMIIM;
    // Field size check
    static_assert(sizeof(::MagicalActual::ShamanSpawnedTotem*) == 0x8);
    // private System.Byte AMEHAHENPCD
    // Size: 0x1
    // Offset: 0xE8
    uint8_t AMEHAHENPCD;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte OPOBPKDLAHC
    // Size: 0x1
    // Offset: 0xE9
    uint8_t OPOBPKDLAHC;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte OFLDKIABLBN
    // Size: 0x1
    // Offset: 0xEA
    uint8_t OFLDKIABLBN;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte LONFMBGCIHF
    // Size: 0x1
    // Offset: 0xEB
    uint8_t LONFMBGCIHF;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Boolean KICABPFBLIK
    // Size: 0x1
    // Offset: 0xEC
    bool KICABPFBLIK;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean DNMDJDFOIJM
    // Size: 0x1
    // Offset: 0xED
    bool DNMDJDFOIJM;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean MJBFFAKNMCM
    // Size: 0x1
    // Offset: 0xEE
    bool MJBFFAKNMCM;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IPlayerClass
    operator ::GlobalNamespace::IPlayerClass() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IPlayerClass*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: private MagicalActual.NetEntity IJJGNKLFGJN
    [[deprecated("Use field access instead!")]] ::MagicalActual::NetEntity*& dyn_IJJGNKLFGJN();
    // Get instance field reference: private System.Boolean HNFCLAFDJBD
    [[deprecated("Use field access instead!")]] bool& dyn_HNFCLAFDJBD();
    // Get instance field reference: private MagicalActual.PlayerClass FNINBDEICCD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerClass*& dyn_FNINBDEICCD();
    // Get instance field reference: private MagicalActual.PlayerAvatar EENJNFDNJBD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerAvatar*& dyn_EENJNFDNJBD();
    // Get instance field reference: private MagicalActual.PlayerCharacter HCFELEODBLD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerCharacter*& dyn_HCFELEODBLD();
    // Get instance field reference: private UnityEngine.GameObject JJDMDLCCPDD
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_JJDMDLCCPDD();
    // Get instance field reference: private UnityEngine.GameObject CCEMBLKGKLN
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_CCEMBLKGKLN();
    // Get instance field reference: private UnityEngine.GameObject GKJEHAKEABK
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_GKJEHAKEABK();
    // Get instance field reference: private System.Int32 KHIKJLICKKF
    [[deprecated("Use field access instead!")]] int& dyn_KHIKJLICKKF();
    // Get instance field reference: private System.Int32 FJPBNPLIKHA
    [[deprecated("Use field access instead!")]] int& dyn_FJPBNPLIKHA();
    // Get instance field reference: private UnityEngine.GameObject PPJCBODBHOH
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_PPJCBODBHOH();
    // Get instance field reference: public UnityEngine.GameObject superVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_superVfx();
    // Get instance field reference: private System.Boolean GCCMBLOGLBA
    [[deprecated("Use field access instead!")]] bool& dyn_GCCMBLOGLBA();
    // Get instance field reference: private System.Boolean GHBBMIFHKGO
    [[deprecated("Use field access instead!")]] bool& dyn_GHBBMIFHKGO();
    // Get instance field reference: private System.Boolean HIKIBDCNDAA
    [[deprecated("Use field access instead!")]] bool& dyn_HIKIBDCNDAA();
    // Get instance field reference: private System.Boolean IMNDEEOEOKA
    [[deprecated("Use field access instead!")]] bool& dyn_IMNDEEOEOKA();
    // Get instance field reference: private System.Single AMKEKINLGLH
    [[deprecated("Use field access instead!")]] float& dyn_AMKEKINLGLH();
    // Get instance field reference: private System.Single PJNDMIEHENA
    [[deprecated("Use field access instead!")]] float& dyn_PJNDMIEHENA();
    // Get instance field reference: private System.Single PLLELMKFNDD
    [[deprecated("Use field access instead!")]] float& dyn_PLLELMKFNDD();
    // Get instance field reference: public UnityEngine.GameObject totemHolder
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_totemHolder();
    // Get instance field reference: public UnityEngine.GameObject mask
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_mask();
    // Get instance field reference: private UnityEngine.GameObject[] LJKGLEOPOFK
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_LJKGLEOPOFK();
    // Get instance field reference: public System.Collections.Generic.List`1<MagicalActual.ShamanSpawnedTotem> activeTotems
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::MagicalActual::ShamanSpawnedTotem*>*& dyn_activeTotems();
    // Get instance field reference: private System.Boolean DLIKANCFGGN
    [[deprecated("Use field access instead!")]] bool& dyn_DLIKANCFGGN();
    // Get instance field reference: private System.Single KEPIOBADOOK
    [[deprecated("Use field access instead!")]] float& dyn_KEPIOBADOOK();
    // Get instance field reference: private System.Single IAHDAENGLNH
    [[deprecated("Use field access instead!")]] float& dyn_IAHDAENGLNH();
    // Get instance field reference: private UnityEngine.RaycastHit[] EPPIPLHANGD
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_EPPIPLHANGD();
    // Get instance field reference: private UnityEngine.Transform ADKPNHFAGFF
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_ADKPNHFAGFF();
    // Get instance field reference: private UnityEngine.GameObject EEJLAGDKGFM
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_EEJLAGDKGFM();
    // Get instance field reference: private System.Boolean GFENBLHLBHH
    [[deprecated("Use field access instead!")]] bool& dyn_GFENBLHLBHH();
    // Get instance field reference: private System.Boolean EEEGNIBDONP
    [[deprecated("Use field access instead!")]] bool& dyn_EEEGNIBDONP();
    // Get instance field reference: private MagicalActual.ShamanSpawnedTotem BKKAHCFNGPH
    [[deprecated("Use field access instead!")]] ::MagicalActual::ShamanSpawnedTotem*& dyn_BKKAHCFNGPH();
    // Get instance field reference: private MagicalActual.ShamanSpawnedTotem JMJOHLPMIIM
    [[deprecated("Use field access instead!")]] ::MagicalActual::ShamanSpawnedTotem*& dyn_JMJOHLPMIIM();
    // Get instance field reference: private System.Byte AMEHAHENPCD
    [[deprecated("Use field access instead!")]] uint8_t& dyn_AMEHAHENPCD();
    // Get instance field reference: private System.Byte OPOBPKDLAHC
    [[deprecated("Use field access instead!")]] uint8_t& dyn_OPOBPKDLAHC();
    // Get instance field reference: private System.Byte OFLDKIABLBN
    [[deprecated("Use field access instead!")]] uint8_t& dyn_OFLDKIABLBN();
    // Get instance field reference: private System.Byte LONFMBGCIHF
    [[deprecated("Use field access instead!")]] uint8_t& dyn_LONFMBGCIHF();
    // Get instance field reference: private System.Boolean KICABPFBLIK
    [[deprecated("Use field access instead!")]] bool& dyn_KICABPFBLIK();
    // Get instance field reference: private System.Boolean DNMDJDFOIJM
    [[deprecated("Use field access instead!")]] bool& dyn_DNMDJDFOIJM();
    // Get instance field reference: private System.Boolean MJBFFAKNMCM
    [[deprecated("Use field access instead!")]] bool& dyn_MJBFFAKNMCM();
    // public System.Void WeaponAdjusted()
    // Offset: 0x11F3510
    void WeaponAdjusted();
    // static public ExtUI.InventoryItem HJMOOBJPAHM(System.Byte HGIGDEMGOOD)
    // Offset: 0x11F3514
    static ::ExtUI::InventoryItem* HJMOOBJPAHM(uint8_t HGIGDEMGOOD);
    // private System.Void LEDOANDIKGG(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x11F3580
    void LEDOANDIKGG(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Boolean CIBDJNJGODA()
    // Offset: 0x11F37B8
    bool CIBDJNJGODA();
    // private System.Void CBIKBCKLNNK()
    // Offset: 0x11F3928
    void CBIKBCKLNNK();
    // private System.Boolean LLDFJDHFNDJ()
    // Offset: 0x11F3BF4
    bool LLDFJDHFNDJ();
    // private System.Void Start()
    // Offset: 0x11F3C24
    void Start();
    // public System.Void LHIFOFLHBEM()
    // Offset: 0x11F4198
    void LHIFOFLHBEM();
    // private System.Void IEAKMOHIBDD()
    // Offset: 0x11F37E8
    void IEAKMOHIBDD();
    // private System.Boolean IEHJHIECGEA()
    // Offset: 0x11F42CC
    bool IEHJHIECGEA();
    // private System.Void DisableSecondaryWeapon()
    // Offset: 0x11F42F4
    void DisableSecondaryWeapon();
    // private System.Void CNOBLOPAKPN(System.Int32 ABLOIPMGEJL, System.Byte LNEMPDHOLME)
    // Offset: 0x11F4304
    void CNOBLOPAKPN(int ABLOIPMGEJL, uint8_t LNEMPDHOLME);
    // public System.Void BOPIHJCLCMM()
    // Offset: 0x11F4804
    void BOPIHJCLCMM();
    // public System.Void JOCIAJOCGNM(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x11F4B1C
    void JOCIAJOCGNM(::MagicalActual::NetEntity* CMLIHJCOINC);
    // public System.Void SuperStatusChange(System.Boolean AALBHOKGIOD)
    // Offset: 0x11F4DE8
    void SuperStatusChange(bool AALBHOKGIOD);
    // public System.Void ELCBPPMEBEC()
    // Offset: 0x11F5034
    void ELCBPPMEBEC();
    // private System.Void IGBNIBEBBKB(UnityEngine.GameObject BLGKJJOKCIN)
    // Offset: 0x11F52B4
    void IGBNIBEBBKB(::UnityEngine::GameObject* BLGKJJOKCIN);
    // public System.Void ClassDisabled()
    // Offset: 0x11F57FC
    void ClassDisabled();
    // private System.Void NIHCHDLLAFF(System.Object OMLPNCLFFMJ)
    // Offset: 0x11F5888
    void NIHCHDLLAFF(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void HNPAJGGBJKJ(System.Int32 ABLOIPMGEJL, System.Byte LNEMPDHOLME)
    // Offset: 0x11F5AD4
    void HNPAJGGBJKJ(int ABLOIPMGEJL, uint8_t LNEMPDHOLME);
    // public System.Void AvatarEquipmentChanged()
    // Offset: 0x11F5F7C
    void AvatarEquipmentChanged();
    // private System.Void EnableSecondaryWeapon()
    // Offset: 0x11F61F8
    void EnableSecondaryWeapon();
    // private System.Void GBCHLGNALEH(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x11F631C
    void GBCHLGNALEH(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void Update()
    // Offset: 0x11F6670
    void Update();
    // private System.Void HNPGKNBIBAJ(System.Object OMLPNCLFFMJ)
    // Offset: 0x11F6AE8
    void HNPGKNBIBAJ(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void DHDAKAECJOK(System.Object OMLPNCLFFMJ)
    // Offset: 0x11F6D2C
    void DHDAKAECJOK(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void .ctor()
    // Offset: 0x11F6F78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Shaman* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::Shaman::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Shaman*, creationType>()));
    }
    // public System.Void IMAFNJFFHGA()
    // Offset: 0x11F7008
    void IMAFNJFFHGA();
    // public System.Void ResetTotem(UnityEngine.GameObject HOKGJFGIKGJ)
    // Offset: 0x11F700C
    void ResetTotem(::UnityEngine::GameObject* HOKGJFGIKGJ);
    // public System.Void SpawnTotem(System.Byte HGIGDEMGOOD, UnityEngine.Vector3 NHFBFBMNPFC)
    // Offset: 0x11F71D8
    void SpawnTotem(uint8_t HGIGDEMGOOD, ::UnityEngine::Vector3 NHFBFBMNPFC);
    // private System.Void JJLDHDGIOBN(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x11F72E0
    void JJLDHDGIOBN(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // private System.Void PBLJILOBKKP()
    // Offset: 0x11F7510
    void PBLJILOBKKP();
    // public System.Void orbusNetCleanup(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x11F779C
    void orbusNetCleanup(::MagicalActual::NetEntity* CMLIHJCOINC);
    // public UnityEngine.GameObject GetWeaponObject()
    // Offset: 0x11F77D4
    ::UnityEngine::GameObject* GetWeaponObject();
    // public UnityEngine.GameObject GetWeaponSkin()
    // Offset: 0x11F77DC
    ::UnityEngine::GameObject* GetWeaponSkin();
    // public System.Void UpdateClassBar()
    // Offset: 0x11F77E4
    void UpdateClassBar();
    // private System.Void DisablePrimaryWeapon()
    // Offset: 0x11F4890
    void DisablePrimaryWeapon();
    // private System.Void SwitchWeaponHand(System.Byte DBJMBLGLHIH)
    // Offset: 0x11F408C
    void SwitchWeaponHand(uint8_t DBJMBLGLHIH);
    // private System.Void ENIGECPOHND(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x11F7918
    void ENIGECPOHND(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // public System.Void orbusNetInit(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x11F7C40
    void orbusNetInit(::MagicalActual::NetEntity* CMLIHJCOINC);
    // static public ExtUI.InventoryItem itemForSpellId(System.Byte HGIGDEMGOOD)
    // Offset: 0x11F4798
    static ::ExtUI::InventoryItem* itemForSpellId(uint8_t HGIGDEMGOOD);
    // private System.Void BGIGCDKNJDM(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x11F7EF4
    void BGIGCDKNJDM(::System::Collections::ArrayList* HPEANAHIBAH);
    // public System.Void ClassEnabled()
    // Offset: 0x11F7EFC
    void ClassEnabled();
    // public System.Void IIKADGDEMJG()
    // Offset: 0x11F7F74
    void IIKADGDEMJG();
    // private System.Void POMPDJNJCJE(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x11F7FEC
    void POMPDJNJCJE(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // public System.Void ToggleAdjustWeapon()
    // Offset: 0x11F8310
    void ToggleAdjustWeapon();
    // private System.Void OBMGHHCACMD(System.Object OMLPNCLFFMJ)
    // Offset: 0x11F8314
    void OBMGHHCACMD(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void JFMPOEHFBIN()
    // Offset: 0x11F8560
    void JFMPOEHFBIN();
    // private System.Void OLEKFMBHCPM(System.Object OMLPNCLFFMJ)
    // Offset: 0x11F882C
    void OLEKFMBHCPM(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void JEAAAOFHCCM()
    // Offset: 0x11F8B24
    void JEAAAOFHCCM();
    // private System.Void IIBMKEDKLEI(System.Byte DBJMBLGLHIH)
    // Offset: 0x11F8B9C
    void IIBMKEDKLEI(uint8_t DBJMBLGLHIH);
    // private System.Void EnablePrimaryWeapon()
    // Offset: 0x11F8C90
    void EnablePrimaryWeapon();
    // private System.Void HKINNMLBMMG()
    // Offset: 0x11F8F5C
    void HKINNMLBMMG();
    // private System.Void HBKAIKDAEIL(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x11F93CC
    void HBKAIKDAEIL(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
    // public System.Void NHFPGGIJGMM()
    // Offset: 0x11F95EC
    void NHFPGGIJGMM();
    // private System.Void Awake()
    // Offset: 0x11F9720
    void Awake();
    // private System.Void ICBFACJBNPI()
    // Offset: 0x11F981C
    void ICBFACJBNPI();
    // public System.Void PCBGKJLGEON()
    // Offset: 0x11F9918
    void PCBGKJLGEON();
    // public System.Void OnDestroy()
    // Offset: 0x11F991C
    void OnDestroy();
    // private System.Void MNDPONGKIBM(System.Object FOIEAOKBGLM, ClickedEventArgs LMKCFANDAKH)
    // Offset: 0x11F99F0
    void MNDPONGKIBM(::Il2CppObject* FOIEAOKBGLM, ::GlobalNamespace::ClickedEventArgs LMKCFANDAKH);
  }; // MagicalActual.Shaman
  #pragma pack(pop)
  static check_size<sizeof(Shaman), 238 + sizeof(bool)> __MagicalActual_ShamanSizeCheck;
  static_assert(sizeof(Shaman) == 0xEF);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::Shaman::WeaponAdjusted
// Il2CppName: WeaponAdjusted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::WeaponAdjusted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "WeaponAdjusted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::HJMOOBJPAHM
// Il2CppName: HJMOOBJPAHM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExtUI::InventoryItem* (*)(uint8_t)>(&MagicalActual::Shaman::HJMOOBJPAHM)> {
  static const MethodInfo* get() {
    static auto* HGIGDEMGOOD = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "HJMOOBJPAHM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HGIGDEMGOOD});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::LEDOANDIKGG
// Il2CppName: LEDOANDIKGG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Shaman::LEDOANDIKGG)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "LEDOANDIKGG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::CIBDJNJGODA
// Il2CppName: CIBDJNJGODA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::CIBDJNJGODA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "CIBDJNJGODA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::CBIKBCKLNNK
// Il2CppName: CBIKBCKLNNK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::CBIKBCKLNNK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "CBIKBCKLNNK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::LLDFJDHFNDJ
// Il2CppName: LLDFJDHFNDJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::LLDFJDHFNDJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "LLDFJDHFNDJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::LHIFOFLHBEM
// Il2CppName: LHIFOFLHBEM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::LHIFOFLHBEM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "LHIFOFLHBEM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::IEAKMOHIBDD
// Il2CppName: IEAKMOHIBDD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::IEAKMOHIBDD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "IEAKMOHIBDD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::IEHJHIECGEA
// Il2CppName: IEHJHIECGEA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::IEHJHIECGEA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "IEHJHIECGEA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::DisableSecondaryWeapon
// Il2CppName: DisableSecondaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::DisableSecondaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "DisableSecondaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::CNOBLOPAKPN
// Il2CppName: CNOBLOPAKPN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(int, uint8_t)>(&MagicalActual::Shaman::CNOBLOPAKPN)> {
  static const MethodInfo* get() {
    static auto* ABLOIPMGEJL = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* LNEMPDHOLME = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "CNOBLOPAKPN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ABLOIPMGEJL, LNEMPDHOLME});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::BOPIHJCLCMM
// Il2CppName: BOPIHJCLCMM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::BOPIHJCLCMM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "BOPIHJCLCMM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::JOCIAJOCGNM
// Il2CppName: JOCIAJOCGNM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Shaman::JOCIAJOCGNM)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "JOCIAJOCGNM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::SuperStatusChange
// Il2CppName: SuperStatusChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(bool)>(&MagicalActual::Shaman::SuperStatusChange)> {
  static const MethodInfo* get() {
    static auto* AALBHOKGIOD = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "SuperStatusChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AALBHOKGIOD});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::ELCBPPMEBEC
// Il2CppName: ELCBPPMEBEC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::ELCBPPMEBEC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "ELCBPPMEBEC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::IGBNIBEBBKB
// Il2CppName: IGBNIBEBBKB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::UnityEngine::GameObject*)>(&MagicalActual::Shaman::IGBNIBEBBKB)> {
  static const MethodInfo* get() {
    static auto* BLGKJJOKCIN = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "IGBNIBEBBKB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BLGKJJOKCIN});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::ClassDisabled
// Il2CppName: ClassDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::ClassDisabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "ClassDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::NIHCHDLLAFF
// Il2CppName: NIHCHDLLAFF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::Il2CppObject*)>(&MagicalActual::Shaman::NIHCHDLLAFF)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "NIHCHDLLAFF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::HNPAJGGBJKJ
// Il2CppName: HNPAJGGBJKJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(int, uint8_t)>(&MagicalActual::Shaman::HNPAJGGBJKJ)> {
  static const MethodInfo* get() {
    static auto* ABLOIPMGEJL = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* LNEMPDHOLME = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "HNPAJGGBJKJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ABLOIPMGEJL, LNEMPDHOLME});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::AvatarEquipmentChanged
// Il2CppName: AvatarEquipmentChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::AvatarEquipmentChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "AvatarEquipmentChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::EnableSecondaryWeapon
// Il2CppName: EnableSecondaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::EnableSecondaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "EnableSecondaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::GBCHLGNALEH
// Il2CppName: GBCHLGNALEH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Shaman::GBCHLGNALEH)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "GBCHLGNALEH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::HNPGKNBIBAJ
// Il2CppName: HNPGKNBIBAJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::Il2CppObject*)>(&MagicalActual::Shaman::HNPGKNBIBAJ)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "HNPGKNBIBAJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::DHDAKAECJOK
// Il2CppName: DHDAKAECJOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::Il2CppObject*)>(&MagicalActual::Shaman::DHDAKAECJOK)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "DHDAKAECJOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::Shaman::IMAFNJFFHGA
// Il2CppName: IMAFNJFFHGA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::IMAFNJFFHGA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "IMAFNJFFHGA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::ResetTotem
// Il2CppName: ResetTotem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::UnityEngine::GameObject*)>(&MagicalActual::Shaman::ResetTotem)> {
  static const MethodInfo* get() {
    static auto* HOKGJFGIKGJ = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "ResetTotem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HOKGJFGIKGJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::SpawnTotem
// Il2CppName: SpawnTotem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(uint8_t, ::UnityEngine::Vector3)>(&MagicalActual::Shaman::SpawnTotem)> {
  static const MethodInfo* get() {
    static auto* HGIGDEMGOOD = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* NHFBFBMNPFC = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "SpawnTotem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HGIGDEMGOOD, NHFBFBMNPFC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::JJLDHDGIOBN
// Il2CppName: JJLDHDGIOBN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Shaman::JJLDHDGIOBN)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "JJLDHDGIOBN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::PBLJILOBKKP
// Il2CppName: PBLJILOBKKP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::PBLJILOBKKP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "PBLJILOBKKP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::orbusNetCleanup
// Il2CppName: orbusNetCleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Shaman::orbusNetCleanup)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "orbusNetCleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::GetWeaponObject
// Il2CppName: GetWeaponObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::GetWeaponObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "GetWeaponObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::GetWeaponSkin
// Il2CppName: GetWeaponSkin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::GetWeaponSkin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "GetWeaponSkin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::UpdateClassBar
// Il2CppName: UpdateClassBar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::UpdateClassBar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "UpdateClassBar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::DisablePrimaryWeapon
// Il2CppName: DisablePrimaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::DisablePrimaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "DisablePrimaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::SwitchWeaponHand
// Il2CppName: SwitchWeaponHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(uint8_t)>(&MagicalActual::Shaman::SwitchWeaponHand)> {
  static const MethodInfo* get() {
    static auto* DBJMBLGLHIH = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "SwitchWeaponHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{DBJMBLGLHIH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::ENIGECPOHND
// Il2CppName: ENIGECPOHND
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Shaman::ENIGECPOHND)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "ENIGECPOHND", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::orbusNetInit
// Il2CppName: orbusNetInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Shaman::orbusNetInit)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "orbusNetInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::itemForSpellId
// Il2CppName: itemForSpellId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExtUI::InventoryItem* (*)(uint8_t)>(&MagicalActual::Shaman::itemForSpellId)> {
  static const MethodInfo* get() {
    static auto* HGIGDEMGOOD = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "itemForSpellId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HGIGDEMGOOD});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::BGIGCDKNJDM
// Il2CppName: BGIGCDKNJDM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::System::Collections::ArrayList*)>(&MagicalActual::Shaman::BGIGCDKNJDM)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "BGIGCDKNJDM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::ClassEnabled
// Il2CppName: ClassEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::ClassEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "ClassEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::IIKADGDEMJG
// Il2CppName: IIKADGDEMJG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::IIKADGDEMJG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "IIKADGDEMJG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::POMPDJNJCJE
// Il2CppName: POMPDJNJCJE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Shaman::POMPDJNJCJE)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "POMPDJNJCJE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::ToggleAdjustWeapon
// Il2CppName: ToggleAdjustWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::ToggleAdjustWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "ToggleAdjustWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::OBMGHHCACMD
// Il2CppName: OBMGHHCACMD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::Il2CppObject*)>(&MagicalActual::Shaman::OBMGHHCACMD)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "OBMGHHCACMD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::JFMPOEHFBIN
// Il2CppName: JFMPOEHFBIN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::JFMPOEHFBIN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "JFMPOEHFBIN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::OLEKFMBHCPM
// Il2CppName: OLEKFMBHCPM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::Il2CppObject*)>(&MagicalActual::Shaman::OLEKFMBHCPM)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "OLEKFMBHCPM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::JEAAAOFHCCM
// Il2CppName: JEAAAOFHCCM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::JEAAAOFHCCM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "JEAAAOFHCCM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::IIBMKEDKLEI
// Il2CppName: IIBMKEDKLEI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(uint8_t)>(&MagicalActual::Shaman::IIBMKEDKLEI)> {
  static const MethodInfo* get() {
    static auto* DBJMBLGLHIH = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "IIBMKEDKLEI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{DBJMBLGLHIH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::EnablePrimaryWeapon
// Il2CppName: EnablePrimaryWeapon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::EnablePrimaryWeapon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "EnablePrimaryWeapon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::HKINNMLBMMG
// Il2CppName: HKINNMLBMMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::HKINNMLBMMG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "HKINNMLBMMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::HBKAIKDAEIL
// Il2CppName: HBKAIKDAEIL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Shaman::HBKAIKDAEIL)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "HBKAIKDAEIL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::NHFPGGIJGMM
// Il2CppName: NHFPGGIJGMM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::NHFPGGIJGMM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "NHFPGGIJGMM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::ICBFACJBNPI
// Il2CppName: ICBFACJBNPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::ICBFACJBNPI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "ICBFACJBNPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::PCBGKJLGEON
// Il2CppName: PCBGKJLGEON
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::PCBGKJLGEON)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "PCBGKJLGEON", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)()>(&MagicalActual::Shaman::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Shaman::MNDPONGKIBM
// Il2CppName: MNDPONGKIBM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Shaman::*)(::Il2CppObject*, ::GlobalNamespace::ClickedEventArgs)>(&MagicalActual::Shaman::MNDPONGKIBM)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* LMKCFANDAKH = &::il2cpp_utils::GetClassFromName("", "ClickedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Shaman*), "MNDPONGKIBM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM, LMKCFANDAKH});
  }
};
