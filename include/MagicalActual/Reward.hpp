// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Reward
  class Reward;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::Reward);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::Reward*, "MagicalActual", "Reward");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.Reward
  // [TokenAttribute] Offset: FFFFFFFF
  class Reward : public ::Il2CppObject {
    public:
    public:
    // public System.Single dram
    // Size: 0x4
    // Offset: 0x10
    float dram;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single reputation
    // Size: 0x4
    // Offset: 0x14
    float reputation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single xp
    // Size: 0x4
    // Offset: 0x18
    float xp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single dram
    [[deprecated("Use field access instead!")]] float& dyn_dram();
    // Get instance field reference: public System.Single reputation
    [[deprecated("Use field access instead!")]] float& dyn_reputation();
    // Get instance field reference: public System.Single xp
    [[deprecated("Use field access instead!")]] float& dyn_xp();
    // public System.Void .ctor()
    // Offset: 0x15C039C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Reward* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::Reward::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Reward*, creationType>()));
    }
  }; // MagicalActual.Reward
  #pragma pack(pop)
  static check_size<sizeof(Reward), 24 + sizeof(float)> __MagicalActual_RewardSizeCheck;
  static_assert(sizeof(Reward) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::Reward::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
