// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: PlayerTool
  class PlayerTool;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: BlessedHorn
  class BlessedHorn;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::BlessedHorn);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::BlessedHorn*, "MagicalActual", "BlessedHorn");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.BlessedHorn
  // [TokenAttribute] Offset: FFFFFFFF
  class BlessedHorn : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MagicalActual.PlayerTool FKJHGIFOJKD
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::PlayerTool* FKJHGIFOJKD;
    // Field size check
    static_assert(sizeof(::MagicalActual::PlayerTool*) == 0x8);
    // private System.Boolean IMAFJMEOHIF
    // Size: 0x1
    // Offset: 0x20
    bool IMAFJMEOHIF;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IMAFJMEOHIF and: JGOGJDHABHN
    char __padding1[0x7] = {};
    // private UnityEngine.Collider[] JGOGJDHABHN
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Collider*> JGOGJDHABHN;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private System.String MDEPLFEDDMM
    // Size: 0x8
    // Offset: 0x30
    ::StringW MDEPLFEDDMM;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String JCJPDJBGKPP
    // Size: 0x8
    // Offset: 0x38
    ::StringW JCJPDJBGKPP;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String NNHEANAJJPM
    // Size: 0x8
    // Offset: 0x40
    ::StringW NNHEANAJJPM;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.GameObject activateVfx
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* activateVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MagicalActual.PlayerTool FKJHGIFOJKD
    [[deprecated("Use field access instead!")]] ::MagicalActual::PlayerTool*& dyn_FKJHGIFOJKD();
    // Get instance field reference: private System.Boolean IMAFJMEOHIF
    [[deprecated("Use field access instead!")]] bool& dyn_IMAFJMEOHIF();
    // Get instance field reference: private UnityEngine.Collider[] JGOGJDHABHN
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_JGOGJDHABHN();
    // Get instance field reference: private System.String MDEPLFEDDMM
    [[deprecated("Use field access instead!")]] ::StringW& dyn_MDEPLFEDDMM();
    // Get instance field reference: private System.String JCJPDJBGKPP
    [[deprecated("Use field access instead!")]] ::StringW& dyn_JCJPDJBGKPP();
    // Get instance field reference: private System.String NNHEANAJJPM
    [[deprecated("Use field access instead!")]] ::StringW& dyn_NNHEANAJJPM();
    // Get instance field reference: public UnityEngine.GameObject activateVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_activateVfx();
    // private System.Void JBMANAJHKBI(System.Byte KLIPNGBEELK)
    // Offset: 0x1784B9C
    void JBMANAJHKBI(uint8_t KLIPNGBEELK);
    // private System.Void BLIPCIAAIHI()
    // Offset: 0x1784D28
    void BLIPCIAAIHI();
    // private System.Void BIMCNDAFFJC()
    // Offset: 0x1785564
    void BIMCNDAFFJC();
    // private System.Void HADIPALABDL(System.Byte KLIPNGBEELK)
    // Offset: 0x1785A44
    void HADIPALABDL(uint8_t KLIPNGBEELK);
    // private System.Void LPLGKBGLPOK()
    // Offset: 0x1785BD0
    void LPLGKBGLPOK();
    // private System.Void AMPIHNMIPAE(System.Int32 CLBEPJBCJPK)
    // Offset: 0x178539C
    void AMPIHNMIPAE(int CLBEPJBCJPK);
    // private System.Void CHEMMHEMDCB()
    // Offset: 0x1785C28
    void CHEMMHEMDCB();
    // private System.Void NHADFEMILCC()
    // Offset: 0x17860D8
    void NHADFEMILCC();
    // private System.Void NDAOHLAOCDE()
    // Offset: 0x1786130
    void NDAOHLAOCDE();
    // private System.Void GKIOLADOCOK()
    // Offset: 0x1786188
    void GKIOLADOCOK();
    // private System.Void KCLONJCNDPE(System.Int32 CLBEPJBCJPK)
    // Offset: 0x178587C
    void KCLONJCNDPE(int CLBEPJBCJPK);
    // private System.Void FixedUpdate()
    // Offset: 0x17861E0
    void FixedUpdate();
    // private System.Void SignalReceived(System.Byte KLIPNGBEELK)
    // Offset: 0x17864F0
    void SignalReceived(uint8_t KLIPNGBEELK);
    // public System.Void .ctor()
    // Offset: 0x1786678
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BlessedHorn* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::BlessedHorn::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BlessedHorn*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x17866F0
    void Start();
    // private System.Void LHDKGONHGCM(System.Int32 CLBEPJBCJPK)
    // Offset: 0x1786748
    void LHDKGONHGCM(int CLBEPJBCJPK);
    // private System.Void AFALAKLIBEB(System.Int32 CLBEPJBCJPK)
    // Offset: 0x17851D8
    void AFALAKLIBEB(int CLBEPJBCJPK);
    // private System.Void LLMANFAFLGG(System.Int32 CLBEPJBCJPK)
    // Offset: 0x1785010
    void LLMANFAFLGG(int CLBEPJBCJPK);
    // private System.Void ICBFACJBNPI()
    // Offset: 0x1786910
    void ICBFACJBNPI();
    // private System.Void LACFBAIDCBK()
    // Offset: 0x1786968
    void LACFBAIDCBK();
    // private System.Void DFKIOJBNELC(System.Int32 CLBEPJBCJPK)
    // Offset: 0x1785F10
    void DFKIOJBNELC(int CLBEPJBCJPK);
    // private System.Void CBMDGNKFPIO()
    // Offset: 0x17869C0
    void CBMDGNKFPIO();
    // private System.Void AHMLIMDJCJO()
    // Offset: 0x1786A18
    void AHMLIMDJCJO();
    // private System.Void CNHFEOKMHGF(System.Byte KLIPNGBEELK)
    // Offset: 0x1786D00
    void CNHFEOKMHGF(uint8_t KLIPNGBEELK);
    // private System.Void MEJHMNJLGCB(System.Int32 CLBEPJBCJPK)
    // Offset: 0x1786E8C
    void MEJHMNJLGCB(int CLBEPJBCJPK);
    // private System.Void Awake()
    // Offset: 0x1787050
    void Awake();
    // private System.Void EIIKFEMCNKM()
    // Offset: 0x17870A8
    void EIIKFEMCNKM();
    // private System.Void AMGJNJLJIFO()
    // Offset: 0x1787100
    void AMGJNJLJIFO();
    // private System.Void JFJCCNIMOPO(System.Int32 CLBEPJBCJPK)
    // Offset: 0x17873E8
    void JFJCCNIMOPO(int CLBEPJBCJPK);
    // private System.Void MHKONMHMJOK(System.Byte KLIPNGBEELK)
    // Offset: 0x17875B0
    void MHKONMHMJOK(uint8_t KLIPNGBEELK);
    // private System.Void PJNAFKEPMOC(System.Int32 CLBEPJBCJPK)
    // Offset: 0x178773C
    void PJNAFKEPMOC(int CLBEPJBCJPK);
  }; // MagicalActual.BlessedHorn
  #pragma pack(pop)
  static check_size<sizeof(BlessedHorn), 72 + sizeof(::UnityEngine::GameObject*)> __MagicalActual_BlessedHornSizeCheck;
  static_assert(sizeof(BlessedHorn) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::JBMANAJHKBI
// Il2CppName: JBMANAJHKBI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)(uint8_t)>(&MagicalActual::BlessedHorn::JBMANAJHKBI)> {
  static const MethodInfo* get() {
    static auto* KLIPNGBEELK = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "JBMANAJHKBI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KLIPNGBEELK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::BLIPCIAAIHI
// Il2CppName: BLIPCIAAIHI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::BLIPCIAAIHI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "BLIPCIAAIHI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::BIMCNDAFFJC
// Il2CppName: BIMCNDAFFJC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::BIMCNDAFFJC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "BIMCNDAFFJC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::HADIPALABDL
// Il2CppName: HADIPALABDL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)(uint8_t)>(&MagicalActual::BlessedHorn::HADIPALABDL)> {
  static const MethodInfo* get() {
    static auto* KLIPNGBEELK = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "HADIPALABDL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KLIPNGBEELK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::LPLGKBGLPOK
// Il2CppName: LPLGKBGLPOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::LPLGKBGLPOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "LPLGKBGLPOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::AMPIHNMIPAE
// Il2CppName: AMPIHNMIPAE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)(int)>(&MagicalActual::BlessedHorn::AMPIHNMIPAE)> {
  static const MethodInfo* get() {
    static auto* CLBEPJBCJPK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "AMPIHNMIPAE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CLBEPJBCJPK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::CHEMMHEMDCB
// Il2CppName: CHEMMHEMDCB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::CHEMMHEMDCB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "CHEMMHEMDCB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::NHADFEMILCC
// Il2CppName: NHADFEMILCC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::NHADFEMILCC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "NHADFEMILCC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::NDAOHLAOCDE
// Il2CppName: NDAOHLAOCDE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::NDAOHLAOCDE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "NDAOHLAOCDE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::GKIOLADOCOK
// Il2CppName: GKIOLADOCOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::GKIOLADOCOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "GKIOLADOCOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::KCLONJCNDPE
// Il2CppName: KCLONJCNDPE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)(int)>(&MagicalActual::BlessedHorn::KCLONJCNDPE)> {
  static const MethodInfo* get() {
    static auto* CLBEPJBCJPK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "KCLONJCNDPE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CLBEPJBCJPK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::SignalReceived
// Il2CppName: SignalReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)(uint8_t)>(&MagicalActual::BlessedHorn::SignalReceived)> {
  static const MethodInfo* get() {
    static auto* KLIPNGBEELK = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "SignalReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KLIPNGBEELK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::LHDKGONHGCM
// Il2CppName: LHDKGONHGCM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)(int)>(&MagicalActual::BlessedHorn::LHDKGONHGCM)> {
  static const MethodInfo* get() {
    static auto* CLBEPJBCJPK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "LHDKGONHGCM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CLBEPJBCJPK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::AFALAKLIBEB
// Il2CppName: AFALAKLIBEB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)(int)>(&MagicalActual::BlessedHorn::AFALAKLIBEB)> {
  static const MethodInfo* get() {
    static auto* CLBEPJBCJPK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "AFALAKLIBEB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CLBEPJBCJPK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::LLMANFAFLGG
// Il2CppName: LLMANFAFLGG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)(int)>(&MagicalActual::BlessedHorn::LLMANFAFLGG)> {
  static const MethodInfo* get() {
    static auto* CLBEPJBCJPK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "LLMANFAFLGG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CLBEPJBCJPK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::ICBFACJBNPI
// Il2CppName: ICBFACJBNPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::ICBFACJBNPI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "ICBFACJBNPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::LACFBAIDCBK
// Il2CppName: LACFBAIDCBK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::LACFBAIDCBK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "LACFBAIDCBK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::DFKIOJBNELC
// Il2CppName: DFKIOJBNELC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)(int)>(&MagicalActual::BlessedHorn::DFKIOJBNELC)> {
  static const MethodInfo* get() {
    static auto* CLBEPJBCJPK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "DFKIOJBNELC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CLBEPJBCJPK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::CBMDGNKFPIO
// Il2CppName: CBMDGNKFPIO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::CBMDGNKFPIO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "CBMDGNKFPIO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::AHMLIMDJCJO
// Il2CppName: AHMLIMDJCJO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::AHMLIMDJCJO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "AHMLIMDJCJO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::CNHFEOKMHGF
// Il2CppName: CNHFEOKMHGF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)(uint8_t)>(&MagicalActual::BlessedHorn::CNHFEOKMHGF)> {
  static const MethodInfo* get() {
    static auto* KLIPNGBEELK = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "CNHFEOKMHGF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KLIPNGBEELK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::MEJHMNJLGCB
// Il2CppName: MEJHMNJLGCB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)(int)>(&MagicalActual::BlessedHorn::MEJHMNJLGCB)> {
  static const MethodInfo* get() {
    static auto* CLBEPJBCJPK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "MEJHMNJLGCB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CLBEPJBCJPK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::EIIKFEMCNKM
// Il2CppName: EIIKFEMCNKM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::EIIKFEMCNKM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "EIIKFEMCNKM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::AMGJNJLJIFO
// Il2CppName: AMGJNJLJIFO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)()>(&MagicalActual::BlessedHorn::AMGJNJLJIFO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "AMGJNJLJIFO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::JFJCCNIMOPO
// Il2CppName: JFJCCNIMOPO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)(int)>(&MagicalActual::BlessedHorn::JFJCCNIMOPO)> {
  static const MethodInfo* get() {
    static auto* CLBEPJBCJPK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "JFJCCNIMOPO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CLBEPJBCJPK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::MHKONMHMJOK
// Il2CppName: MHKONMHMJOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)(uint8_t)>(&MagicalActual::BlessedHorn::MHKONMHMJOK)> {
  static const MethodInfo* get() {
    static auto* KLIPNGBEELK = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "MHKONMHMJOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{KLIPNGBEELK});
  }
};
// Writing MetadataGetter for method: MagicalActual::BlessedHorn::PJNAFKEPMOC
// Il2CppName: PJNAFKEPMOC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BlessedHorn::*)(int)>(&MagicalActual::BlessedHorn::PJNAFKEPMOC)> {
  static const MethodInfo* get() {
    static auto* CLBEPJBCJPK = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BlessedHorn*), "PJNAFKEPMOC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CLBEPJBCJPK});
  }
};
