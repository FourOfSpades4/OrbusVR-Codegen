// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Monster
  class Monster;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: M_SquidMini
  class M_SquidMini;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::M_SquidMini);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::M_SquidMini*, "MagicalActual", "M_SquidMini");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.M_SquidMini
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD5F64
  class M_SquidMini : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject vfxSlash
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* vfxSlash;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxExplosion
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* vfxExplosion;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxAppear
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* vfxAppear;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private MagicalActual.Monster BIIBEOELIHH
    // Size: 0x8
    // Offset: 0x30
    ::MagicalActual::Monster* BIIBEOELIHH;
    // Field size check
    static_assert(sizeof(::MagicalActual::Monster*) == 0x8);
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x38
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject vfxSlash
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxSlash();
    // Get instance field reference: public UnityEngine.GameObject vfxExplosion
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxExplosion();
    // Get instance field reference: public UnityEngine.GameObject vfxAppear
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxAppear();
    // Get instance field reference: private MagicalActual.Monster BIIBEOELIHH
    [[deprecated("Use field access instead!")]] ::MagicalActual::Monster*& dyn_BIIBEOELIHH();
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // private System.Void ABIHCGOKNCL()
    // Offset: 0x2746B10
    void ABIHCGOKNCL();
    // public System.Void PHMNKLJAEMC()
    // Offset: 0x2746C54
    void PHMNKLJAEMC();
    // public System.Void CCDCGAALCIK()
    // Offset: 0x2746E78
    void CCDCGAALCIK();
    // private System.Void GECHLDPLPCC()
    // Offset: 0x2746FA4
    void GECHLDPLPCC();
    // public System.Void BIIPJEPNIBH()
    // Offset: 0x27470E8
    void BIIPJEPNIBH();
    // public System.Void MACOPOONGCD()
    // Offset: 0x274730C
    void MACOPOONGCD();
    // private System.Void EPCHNEGNKNF()
    // Offset: 0x2747438
    void EPCHNEGNKNF();
    // public System.Void DKILGFBCKHD()
    // Offset: 0x274757C
    void DKILGFBCKHD();
    // public System.Void KDPEOPPDLLP()
    // Offset: 0x27477A0
    void KDPEOPPDLLP();
    // private System.Void LBIKOKCCILF()
    // Offset: 0x27479C4
    void LBIKOKCCILF();
    // public System.Void Slash()
    // Offset: 0x2747B08
    void Slash();
    // public System.Void DNEFCABLMPG()
    // Offset: 0x2747D20
    void DNEFCABLMPG();
    // private System.Void DGJGAFKDIDK()
    // Offset: 0x2747E4C
    void DGJGAFKDIDK();
    // public System.Void HJADIOCKECN()
    // Offset: 0x2747F90
    void HJADIOCKECN();
    // public System.Void PKINMLEHJFB()
    // Offset: 0x27481B4
    void PKINMLEHJFB();
    // public System.Void HLGKLABMHHD()
    // Offset: 0x27483D8
    void HLGKLABMHHD();
    // private System.Void GKIOLADOCOK()
    // Offset: 0x27485FC
    void GKIOLADOCOK();
    // public System.Void FJPPPPLAACN()
    // Offset: 0x2748740
    void FJPPPPLAACN();
    // public System.Void JMPBEJDKDGJ()
    // Offset: 0x274886C
    void JMPBEJDKDGJ();
    // public System.Void CKKPDDEKAID()
    // Offset: 0x2748A90
    void CKKPDDEKAID();
    // private System.Void FNGLOIECKDG()
    // Offset: 0x2748BBC
    void FNGLOIECKDG();
    // public System.Void LBCKKFAMCIF()
    // Offset: 0x2748D00
    void LBCKKFAMCIF();
    // private System.Void Start()
    // Offset: 0x2748E2C
    void Start();
    // public System.Void MMKPPAEBGFP()
    // Offset: 0x2748F6C
    void MMKPPAEBGFP();
    // private System.Void KPOAAAHLGLA()
    // Offset: 0x2749098
    void KPOAAAHLGLA();
    // public System.Void Explode()
    // Offset: 0x27491DC
    void Explode();
    // private System.Void FGIFGGNGKPK()
    // Offset: 0x2749304
    void FGIFGGNGKPK();
    // public System.Void .ctor()
    // Offset: 0x2749448
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static M_SquidMini* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::M_SquidMini::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<M_SquidMini*, creationType>()));
    }
  }; // MagicalActual.M_SquidMini
  #pragma pack(pop)
  static check_size<sizeof(M_SquidMini), 56 + sizeof(::StringW)> __MagicalActual_M_SquidMiniSizeCheck;
  static_assert(sizeof(M_SquidMini) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::ABIHCGOKNCL
// Il2CppName: ABIHCGOKNCL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::ABIHCGOKNCL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "ABIHCGOKNCL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::PHMNKLJAEMC
// Il2CppName: PHMNKLJAEMC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::PHMNKLJAEMC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "PHMNKLJAEMC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::CCDCGAALCIK
// Il2CppName: CCDCGAALCIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::CCDCGAALCIK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "CCDCGAALCIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::GECHLDPLPCC
// Il2CppName: GECHLDPLPCC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::GECHLDPLPCC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "GECHLDPLPCC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::BIIPJEPNIBH
// Il2CppName: BIIPJEPNIBH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::BIIPJEPNIBH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "BIIPJEPNIBH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::MACOPOONGCD
// Il2CppName: MACOPOONGCD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::MACOPOONGCD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "MACOPOONGCD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::EPCHNEGNKNF
// Il2CppName: EPCHNEGNKNF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::EPCHNEGNKNF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "EPCHNEGNKNF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::DKILGFBCKHD
// Il2CppName: DKILGFBCKHD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::DKILGFBCKHD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "DKILGFBCKHD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::KDPEOPPDLLP
// Il2CppName: KDPEOPPDLLP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::KDPEOPPDLLP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "KDPEOPPDLLP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::LBIKOKCCILF
// Il2CppName: LBIKOKCCILF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::LBIKOKCCILF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "LBIKOKCCILF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::Slash
// Il2CppName: Slash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::Slash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "Slash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::DNEFCABLMPG
// Il2CppName: DNEFCABLMPG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::DNEFCABLMPG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "DNEFCABLMPG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::DGJGAFKDIDK
// Il2CppName: DGJGAFKDIDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::DGJGAFKDIDK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "DGJGAFKDIDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::HJADIOCKECN
// Il2CppName: HJADIOCKECN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::HJADIOCKECN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "HJADIOCKECN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::PKINMLEHJFB
// Il2CppName: PKINMLEHJFB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::PKINMLEHJFB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "PKINMLEHJFB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::HLGKLABMHHD
// Il2CppName: HLGKLABMHHD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::HLGKLABMHHD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "HLGKLABMHHD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::GKIOLADOCOK
// Il2CppName: GKIOLADOCOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::GKIOLADOCOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "GKIOLADOCOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::FJPPPPLAACN
// Il2CppName: FJPPPPLAACN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::FJPPPPLAACN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "FJPPPPLAACN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::JMPBEJDKDGJ
// Il2CppName: JMPBEJDKDGJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::JMPBEJDKDGJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "JMPBEJDKDGJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::CKKPDDEKAID
// Il2CppName: CKKPDDEKAID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::CKKPDDEKAID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "CKKPDDEKAID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::FNGLOIECKDG
// Il2CppName: FNGLOIECKDG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::FNGLOIECKDG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "FNGLOIECKDG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::LBCKKFAMCIF
// Il2CppName: LBCKKFAMCIF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::LBCKKFAMCIF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "LBCKKFAMCIF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::MMKPPAEBGFP
// Il2CppName: MMKPPAEBGFP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::MMKPPAEBGFP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "MMKPPAEBGFP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::KPOAAAHLGLA
// Il2CppName: KPOAAAHLGLA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::KPOAAAHLGLA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "KPOAAAHLGLA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::Explode
// Il2CppName: Explode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::Explode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "Explode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::FGIFGGNGKPK
// Il2CppName: FGIFGGNGKPK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_SquidMini::*)()>(&MagicalActual::M_SquidMini::FGIFGGNGKPK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_SquidMini*), "FGIFGGNGKPK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_SquidMini::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
