// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: NetEntity
  class NetEntity;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PhysicsInteractable
  class PhysicsInteractable;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Portal
  class Portal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::Portal);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::Portal*, "MagicalActual", "Portal");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.Portal
  // [TokenAttribute] Offset: FFFFFFFF
  class Portal : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::MagicalActual::Portal::$$c
    class $$c;
    public:
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x18
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private MagicalActual.NetEntity IJJGNKLFGJN
    // Size: 0x8
    // Offset: 0x20
    ::MagicalActual::NetEntity* IJJGNKLFGJN;
    // Field size check
    static_assert(sizeof(::MagicalActual::NetEntity*) == 0x8);
    // public UnityEngine.ParticleSystem glowEffect
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::ParticleSystem* glowEffect;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public UnityEngine.GameObject sphere
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* sphere;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single HEPHJJICIEG
    // Size: 0x4
    // Offset: 0x38
    float HEPHJJICIEG;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single BHFEPIKPNMM
    // Size: 0x4
    // Offset: 0x3C
    float BHFEPIKPNMM;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AudioSource GHPLEIOBCOD
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AudioSource* GHPLEIOBCOD;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private PhysicsInteractable DKIFGMJGJFK
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::PhysicsInteractable* DKIFGMJGJFK;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PhysicsInteractable*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: private MagicalActual.NetEntity IJJGNKLFGJN
    [[deprecated("Use field access instead!")]] ::MagicalActual::NetEntity*& dyn_IJJGNKLFGJN();
    // Get instance field reference: public UnityEngine.ParticleSystem glowEffect
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_glowEffect();
    // Get instance field reference: public UnityEngine.GameObject sphere
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_sphere();
    // Get instance field reference: private System.Single HEPHJJICIEG
    [[deprecated("Use field access instead!")]] float& dyn_HEPHJJICIEG();
    // Get instance field reference: private System.Single BHFEPIKPNMM
    [[deprecated("Use field access instead!")]] float& dyn_BHFEPIKPNMM();
    // Get instance field reference: private UnityEngine.AudioSource GHPLEIOBCOD
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_GHPLEIOBCOD();
    // Get instance field reference: private PhysicsInteractable DKIFGMJGJFK
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PhysicsInteractable*& dyn_DKIFGMJGJFK();
    // public System.Void JOIENAJAEPE()
    // Offset: 0x1B007C8
    void JOIENAJAEPE();
    // private System.Void GKIOLADOCOK()
    // Offset: 0x1B008D4
    void GKIOLADOCOK();
    // public System.Void GMNDFGNMOHF()
    // Offset: 0x1B00908
    void GMNDFGNMOHF();
    // private System.Void DJIGIJKOPDC()
    // Offset: 0x1B00A14
    void DJIGIJKOPDC();
    // private System.Void AMGJNJLJIFO()
    // Offset: 0x1B00A84
    void AMGJNJLJIFO();
    // private System.Void JNELNIGPBIM()
    // Offset: 0x1B00E98
    void JNELNIGPBIM();
    // public System.Void LJEJCBIHIKK()
    // Offset: 0x1B00F08
    void LJEJCBIHIKK();
    // private System.Void JPHEBENNLCB()
    // Offset: 0x1B01014
    void JPHEBENNLCB();
    // public System.Void IFBDEGJJDAL()
    // Offset: 0x1B01454
    void IFBDEGJJDAL();
    // private System.Void CBMDGNKFPIO()
    // Offset: 0x1B01560
    void CBMDGNKFPIO();
    // public System.Void EKKOEJKBHNI()
    // Offset: 0x1B01348
    void EKKOEJKBHNI();
    // private System.Void Awake()
    // Offset: 0x1B01594
    void Awake();
    // public System.Void orbusNetInit(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1B01604
    void orbusNetInit(::MagicalActual::NetEntity* CMLIHJCOINC);
    // public System.Void RequestTeleport()
    // Offset: 0x1B00D8C
    void RequestTeleport();
    // private System.Void AKONOOIDPDA()
    // Offset: 0x1B0160C
    void AKONOOIDPDA();
    // private System.Void NIGOCBKLOFH()
    // Offset: 0x1B0167C
    void NIGOCBKLOFH();
    // private System.Void Start()
    // Offset: 0x1B0197C
    void Start();
    // public System.Void DNFKKACHKNJ()
    // Offset: 0x1B019B0
    void DNFKKACHKNJ();
    // private System.Void IAMHAELCKHH()
    // Offset: 0x1B01ABC
    void IAMHAELCKHH();
    // public System.Void DKDBFFDLADP(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1B01B2C
    void DKDBFFDLADP(::MagicalActual::NetEntity* CMLIHJCOINC);
    // public System.Void BLBKOOGJNBB(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1B01B34
    void BLBKOOGJNBB(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void FixedUpdate()
    // Offset: 0x1B01B3C
    void FixedUpdate();
    // private System.Void HKINNMLBMMG()
    // Offset: 0x1B01E6C
    void HKINNMLBMMG();
    // private System.Void EDJIILEFNPD()
    // Offset: 0x1B01EA0
    void EDJIILEFNPD();
    // public System.Void JOCIAJOCGNM(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1B01F10
    void JOCIAJOCGNM(::MagicalActual::NetEntity* CMLIHJCOINC);
    // public System.Void JJEJNGMIMOI(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1B01F18
    void JJEJNGMIMOI(::MagicalActual::NetEntity* CMLIHJCOINC);
    // public System.Void .ctor()
    // Offset: 0x1B01F20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Portal* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::Portal::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Portal*, creationType>()));
    }
    // public System.Void KOEODBGEINA()
    // Offset: 0x1B01F80
    void KOEODBGEINA();
  }; // MagicalActual.Portal
  #pragma pack(pop)
  static check_size<sizeof(Portal), 72 + sizeof(::GlobalNamespace::PhysicsInteractable*)> __MagicalActual_PortalSizeCheck;
  static_assert(sizeof(Portal) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::Portal::JOIENAJAEPE
// Il2CppName: JOIENAJAEPE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::JOIENAJAEPE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "JOIENAJAEPE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::GKIOLADOCOK
// Il2CppName: GKIOLADOCOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::GKIOLADOCOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "GKIOLADOCOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::GMNDFGNMOHF
// Il2CppName: GMNDFGNMOHF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::GMNDFGNMOHF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "GMNDFGNMOHF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::DJIGIJKOPDC
// Il2CppName: DJIGIJKOPDC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::DJIGIJKOPDC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "DJIGIJKOPDC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::AMGJNJLJIFO
// Il2CppName: AMGJNJLJIFO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::AMGJNJLJIFO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "AMGJNJLJIFO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::JNELNIGPBIM
// Il2CppName: JNELNIGPBIM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::JNELNIGPBIM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "JNELNIGPBIM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::LJEJCBIHIKK
// Il2CppName: LJEJCBIHIKK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::LJEJCBIHIKK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "LJEJCBIHIKK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::JPHEBENNLCB
// Il2CppName: JPHEBENNLCB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::JPHEBENNLCB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "JPHEBENNLCB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::IFBDEGJJDAL
// Il2CppName: IFBDEGJJDAL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::IFBDEGJJDAL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "IFBDEGJJDAL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::CBMDGNKFPIO
// Il2CppName: CBMDGNKFPIO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::CBMDGNKFPIO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "CBMDGNKFPIO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::EKKOEJKBHNI
// Il2CppName: EKKOEJKBHNI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::EKKOEJKBHNI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "EKKOEJKBHNI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::orbusNetInit
// Il2CppName: orbusNetInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Portal::orbusNetInit)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "orbusNetInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::RequestTeleport
// Il2CppName: RequestTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::RequestTeleport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "RequestTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::AKONOOIDPDA
// Il2CppName: AKONOOIDPDA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::AKONOOIDPDA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "AKONOOIDPDA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::NIGOCBKLOFH
// Il2CppName: NIGOCBKLOFH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::NIGOCBKLOFH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "NIGOCBKLOFH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::DNFKKACHKNJ
// Il2CppName: DNFKKACHKNJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::DNFKKACHKNJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "DNFKKACHKNJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::IAMHAELCKHH
// Il2CppName: IAMHAELCKHH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::IAMHAELCKHH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "IAMHAELCKHH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::DKDBFFDLADP
// Il2CppName: DKDBFFDLADP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Portal::DKDBFFDLADP)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "DKDBFFDLADP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::BLBKOOGJNBB
// Il2CppName: BLBKOOGJNBB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Portal::BLBKOOGJNBB)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "BLBKOOGJNBB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::HKINNMLBMMG
// Il2CppName: HKINNMLBMMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::HKINNMLBMMG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "HKINNMLBMMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::EDJIILEFNPD
// Il2CppName: EDJIILEFNPD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::EDJIILEFNPD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "EDJIILEFNPD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::JOCIAJOCGNM
// Il2CppName: JOCIAJOCGNM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Portal::JOCIAJOCGNM)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "JOCIAJOCGNM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::JJEJNGMIMOI
// Il2CppName: JJEJNGMIMOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)(::MagicalActual::NetEntity*)>(&MagicalActual::Portal::JJEJNGMIMOI)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "JJEJNGMIMOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::Portal::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::Portal::KOEODBGEINA
// Il2CppName: KOEODBGEINA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::Portal::*)()>(&MagicalActual::Portal::KOEODBGEINA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Portal*), "KOEODBGEINA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
