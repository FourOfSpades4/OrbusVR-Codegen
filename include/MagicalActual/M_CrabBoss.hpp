// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Monster
  class Monster;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: M_CrabBoss
  class M_CrabBoss;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::M_CrabBoss);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::M_CrabBoss*, "MagicalActual", "M_CrabBoss");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.M_CrabBoss
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD4BE0
  class M_CrabBoss : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MagicalActual.Monster BIIBEOELIHH
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::Monster* BIIBEOELIHH;
    // Field size check
    static_assert(sizeof(::MagicalActual::Monster*) == 0x8);
    // public UnityEngine.GameObject vfxSlash
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* vfxSlash;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxAoe
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* vfxAoe;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxTankbuster
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* vfxTankbuster;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x38
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MagicalActual.Monster BIIBEOELIHH
    [[deprecated("Use field access instead!")]] ::MagicalActual::Monster*& dyn_BIIBEOELIHH();
    // Get instance field reference: public UnityEngine.GameObject vfxSlash
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxSlash();
    // Get instance field reference: public UnityEngine.GameObject vfxAoe
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxAoe();
    // Get instance field reference: public UnityEngine.GameObject vfxTankbuster
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxTankbuster();
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // public System.Void NDADBACAPEA()
    // Offset: 0x24654F8
    void NDADBACAPEA();
    // public System.Void Aoe()
    // Offset: 0x24656CC
    void Aoe();
    // public System.Void IBMKENLAMGB()
    // Offset: 0x24657F4
    void IBMKENLAMGB();
    // private System.Void NHADFEMILCC()
    // Offset: 0x2465A18
    void NHADFEMILCC();
    // public System.Void .ctor()
    // Offset: 0x2465A70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static M_CrabBoss* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::M_CrabBoss::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<M_CrabBoss*, creationType>()));
    }
    // public System.Void KKLPKKKLAMH()
    // Offset: 0x2465AC8
    void KKLPKKKLAMH();
    // public System.Void BANDAOCNALJ()
    // Offset: 0x2465BF4
    void BANDAOCNALJ();
    // public System.Void TankBuster()
    // Offset: 0x2465DC8
    void TankBuster();
    // public System.Void EGNNAHDGLGO()
    // Offset: 0x2465F94
    void EGNNAHDGLGO();
    // private System.Void LBIKOKCCILF()
    // Offset: 0x2466168
    void LBIKOKCCILF();
    // public System.Void GLJFFHNKKPI()
    // Offset: 0x24661C0
    void GLJFFHNKKPI();
    // public System.Void JMPBEJDKDGJ()
    // Offset: 0x24663E4
    void JMPBEJDKDGJ();
    // private System.Void JENOIOBAEPG()
    // Offset: 0x2466608
    void JENOIOBAEPG();
    // private System.Void EPCHNEGNKNF()
    // Offset: 0x2466660
    void EPCHNEGNKNF();
    // private System.Void EIIKFEMCNKM()
    // Offset: 0x24666B8
    void EIIKFEMCNKM();
    // public System.Void HGKHCNABCOG()
    // Offset: 0x2466710
    void HGKHCNABCOG();
    // public System.Void PIHBGAKGGLP()
    // Offset: 0x24668E4
    void PIHBGAKGGLP();
    // public System.Void JFBOMHHGFDN()
    // Offset: 0x2466AB8
    void JFBOMHHGFDN();
    // public System.Void PJCEHOCIALC()
    // Offset: 0x2466CDC
    void PJCEHOCIALC();
    // public System.Void KBHHAFOPJFK()
    // Offset: 0x2466E04
    void KBHHAFOPJFK();
    // private System.Void Start()
    // Offset: 0x2466F30
    void Start();
    // public System.Void PHMNKLJAEMC()
    // Offset: 0x2466F88
    void PHMNKLJAEMC();
    // public System.Void BKHAKCKPCJG()
    // Offset: 0x24671AC
    void BKHAKCKPCJG();
    // private System.Void IDOCJGNLNFL()
    // Offset: 0x24672D8
    void IDOCJGNLNFL();
    // private System.Void GPFBGGFPINB()
    // Offset: 0x2467330
    void GPFBGGFPINB();
    // public System.Void JFDEDDEJJPK()
    // Offset: 0x2467388
    void JFDEDDEJJPK();
    // public System.Void Slash()
    // Offset: 0x24675AC
    void Slash();
  }; // MagicalActual.M_CrabBoss
  #pragma pack(pop)
  static check_size<sizeof(M_CrabBoss), 56 + sizeof(::StringW)> __MagicalActual_M_CrabBossSizeCheck;
  static_assert(sizeof(M_CrabBoss) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::NDADBACAPEA
// Il2CppName: NDADBACAPEA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::NDADBACAPEA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "NDADBACAPEA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::Aoe
// Il2CppName: Aoe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::Aoe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "Aoe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::IBMKENLAMGB
// Il2CppName: IBMKENLAMGB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::IBMKENLAMGB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "IBMKENLAMGB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::NHADFEMILCC
// Il2CppName: NHADFEMILCC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::NHADFEMILCC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "NHADFEMILCC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::KKLPKKKLAMH
// Il2CppName: KKLPKKKLAMH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::KKLPKKKLAMH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "KKLPKKKLAMH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::BANDAOCNALJ
// Il2CppName: BANDAOCNALJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::BANDAOCNALJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "BANDAOCNALJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::TankBuster
// Il2CppName: TankBuster
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::TankBuster)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "TankBuster", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::EGNNAHDGLGO
// Il2CppName: EGNNAHDGLGO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::EGNNAHDGLGO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "EGNNAHDGLGO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::LBIKOKCCILF
// Il2CppName: LBIKOKCCILF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::LBIKOKCCILF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "LBIKOKCCILF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::GLJFFHNKKPI
// Il2CppName: GLJFFHNKKPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::GLJFFHNKKPI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "GLJFFHNKKPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::JMPBEJDKDGJ
// Il2CppName: JMPBEJDKDGJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::JMPBEJDKDGJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "JMPBEJDKDGJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::JENOIOBAEPG
// Il2CppName: JENOIOBAEPG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::JENOIOBAEPG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "JENOIOBAEPG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::EPCHNEGNKNF
// Il2CppName: EPCHNEGNKNF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::EPCHNEGNKNF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "EPCHNEGNKNF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::EIIKFEMCNKM
// Il2CppName: EIIKFEMCNKM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::EIIKFEMCNKM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "EIIKFEMCNKM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::HGKHCNABCOG
// Il2CppName: HGKHCNABCOG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::HGKHCNABCOG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "HGKHCNABCOG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::PIHBGAKGGLP
// Il2CppName: PIHBGAKGGLP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::PIHBGAKGGLP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "PIHBGAKGGLP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::JFBOMHHGFDN
// Il2CppName: JFBOMHHGFDN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::JFBOMHHGFDN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "JFBOMHHGFDN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::PJCEHOCIALC
// Il2CppName: PJCEHOCIALC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::PJCEHOCIALC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "PJCEHOCIALC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::KBHHAFOPJFK
// Il2CppName: KBHHAFOPJFK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::KBHHAFOPJFK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "KBHHAFOPJFK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::PHMNKLJAEMC
// Il2CppName: PHMNKLJAEMC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::PHMNKLJAEMC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "PHMNKLJAEMC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::BKHAKCKPCJG
// Il2CppName: BKHAKCKPCJG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::BKHAKCKPCJG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "BKHAKCKPCJG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::IDOCJGNLNFL
// Il2CppName: IDOCJGNLNFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::IDOCJGNLNFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "IDOCJGNLNFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::GPFBGGFPINB
// Il2CppName: GPFBGGFPINB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::GPFBGGFPINB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "GPFBGGFPINB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::JFDEDDEJJPK
// Il2CppName: JFDEDDEJJPK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::JFDEDDEJJPK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "JFDEDDEJJPK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_CrabBoss::Slash
// Il2CppName: Slash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_CrabBoss::*)()>(&MagicalActual::M_CrabBoss::Slash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_CrabBoss*), "Slash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
