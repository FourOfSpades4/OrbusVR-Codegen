// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: InstancePortal
  class InstancePortal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::InstancePortal);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::InstancePortal*, "MagicalActual", "InstancePortal");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x59
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.InstancePortal
  // [TokenAttribute] Offset: FFFFFFFF
  class InstancePortal : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x18
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String targetZone
    // Size: 0x8
    // Offset: 0x20
    ::StringW targetZone;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Vector3 targetZoneLocation
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 targetZoneLocation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: targetZoneLocation and: alternateDestinationZone
    char __padding2[0x4] = {};
    // public System.String alternateDestinationZone
    // Size: 0x8
    // Offset: 0x38
    ::StringW alternateDestinationZone;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Vector3 alternateDestinationLocation
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 alternateDestinationLocation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: alternateDestinationLocation and: alternateDestinationQuestFlag
    char __padding4[0x4] = {};
    // public System.String alternateDestinationQuestFlag
    // Size: 0x8
    // Offset: 0x50
    ::StringW alternateDestinationQuestFlag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean softTransition
    // Size: 0x1
    // Offset: 0x58
    bool softTransition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: public System.String targetZone
    [[deprecated("Use field access instead!")]] ::StringW& dyn_targetZone();
    // Get instance field reference: public UnityEngine.Vector3 targetZoneLocation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_targetZoneLocation();
    // Get instance field reference: public System.String alternateDestinationZone
    [[deprecated("Use field access instead!")]] ::StringW& dyn_alternateDestinationZone();
    // Get instance field reference: public UnityEngine.Vector3 alternateDestinationLocation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_alternateDestinationLocation();
    // Get instance field reference: public System.String alternateDestinationQuestFlag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_alternateDestinationQuestFlag();
    // Get instance field reference: public System.Boolean softTransition
    [[deprecated("Use field access instead!")]] bool& dyn_softTransition();
    // public System.Void .ctor()
    // Offset: 0x12617C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InstancePortal* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::InstancePortal::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InstancePortal*, creationType>()));
    }
  }; // MagicalActual.InstancePortal
  #pragma pack(pop)
  static check_size<sizeof(InstancePortal), 88 + sizeof(bool)> __MagicalActual_InstancePortalSizeCheck;
  static_assert(sizeof(InstancePortal) == 0x59);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::InstancePortal::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
