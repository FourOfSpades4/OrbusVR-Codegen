// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MagicalActual.CreatureController
#include "MagicalActual/CreatureController.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: CritterController
  class CritterController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::CritterController);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::CritterController*, "MagicalActual", "CritterController");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.CritterController
  // [TokenAttribute] Offset: FFFFFFFF
  class CritterController : public ::MagicalActual::CreatureController {
    public:
    // Nested type: ::MagicalActual::CritterController::$MoveCreature$d__5
    class $MoveCreature$d__5;
    // Nested type: ::MagicalActual::CritterController::$RandomizeFacingDirection$d__6
    class $RandomizeFacingDirection$d__6;
    // Nested type: ::MagicalActual::CritterController::$MoveForward$d__8
    class $MoveForward$d__8;
    public:
    // private System.Int32 OPKIBGDPDBM
    // Size: 0x4
    // Offset: 0x4C
    int OPKIBGDPDBM;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.RaycastHit DGHNENKOPME
    // Size: 0x2C
    // Offset: 0x50
    ::UnityEngine::RaycastHit DGHNENKOPME;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // private System.Int32 MFJFNPKPKMH
    // Size: 0x4
    // Offset: 0x7C
    int MFJFNPKPKMH;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Int32 OPKIBGDPDBM
    [[deprecated("Use field access instead!")]] int& dyn_OPKIBGDPDBM();
    // Get instance field reference: private UnityEngine.RaycastHit DGHNENKOPME
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_DGHNENKOPME();
    // Get instance field reference: private System.Int32 MFJFNPKPKMH
    [[deprecated("Use field access instead!")]] int& dyn_MFJFNPKPKMH();
    // protected System.Void MIPEOCANMMO()
    // Offset: 0x19A2108
    void MIPEOCANMMO();
    // protected System.Collections.IEnumerator NPNIADFIAKA()
    // Offset: 0x19A2280
    ::System::Collections::IEnumerator* NPNIADFIAKA();
    // protected System.Void DJIGIJKOPDC()
    // Offset: 0x19A2324
    void DJIGIJKOPDC();
    // protected System.Void DGELIHGGOKB()
    // Offset: 0x19A2498
    void DGELIHGGOKB();
    // private System.Collections.IEnumerator JOCMIPOFDLC(System.Single AMHGMOKIEIJ, System.Single PBANLCKPPFN)
    // Offset: 0x19A2610
    ::System::Collections::IEnumerator* JOCMIPOFDLC(float AMHGMOKIEIJ, float PBANLCKPPFN);
    // protected System.Void JNELNIGPBIM()
    // Offset: 0x19A26EC
    void JNELNIGPBIM();
    // protected System.Void HDMHEDEGDFD()
    // Offset: 0x19A2864
    void HDMHEDEGDFD();
    // private System.Collections.IEnumerator MKPGADOJHLI(System.Single AMHGMOKIEIJ, System.Single PBANLCKPPFN)
    // Offset: 0x19A29DC
    ::System::Collections::IEnumerator* MKPGADOJHLI(float AMHGMOKIEIJ, float PBANLCKPPFN);
    // protected System.Collections.IEnumerator LKHCLCCCKNJ()
    // Offset: 0x19A2A90
    ::System::Collections::IEnumerator* LKHCLCCCKNJ();
    // protected System.Collections.IEnumerator JEEPLOHAEKE()
    // Offset: 0x19A2B08
    ::System::Collections::IEnumerator* JEEPLOHAEKE();
    // private System.Void FDLEDKCOFHM()
    // Offset: 0x19A2B7C
    void FDLEDKCOFHM();
    // protected System.Void CNBJHFMDCOE()
    // Offset: 0x19A2D40
    void CNBJHFMDCOE();
    // protected System.Void DAPFFOEMAAM()
    // Offset: 0x19A2EBC
    void DAPFFOEMAAM();
    // protected System.Void BJMMJNDCPLF()
    // Offset: 0x19A3034
    void BJMMJNDCPLF();
    // private System.Collections.IEnumerator OBCIDCFKDIN(System.Single AMHGMOKIEIJ, System.Single PBANLCKPPFN)
    // Offset: 0x19A3374
    ::System::Collections::IEnumerator* OBCIDCFKDIN(float AMHGMOKIEIJ, float PBANLCKPPFN);
    // private System.Collections.IEnumerator ENDLGBKPMIA(System.Single AMHGMOKIEIJ, System.Single PBANLCKPPFN)
    // Offset: 0x19A3428
    ::System::Collections::IEnumerator* ENDLGBKPMIA(float AMHGMOKIEIJ, float PBANLCKPPFN);
    // private System.Collections.IEnumerator DKDNPLPFHCG(System.Single AMHGMOKIEIJ, System.Single PBANLCKPPFN)
    // Offset: 0x19A34D8
    ::System::Collections::IEnumerator* DKDNPLPFHCG(float AMHGMOKIEIJ, float PBANLCKPPFN);
    // protected System.Collections.IEnumerator CMDHIFGJMMN()
    // Offset: 0x19A3588
    ::System::Collections::IEnumerator* CMDHIFGJMMN();
    // private System.Void LCKKIBJCKJA()
    // Offset: 0x19A3600
    void LCKKIBJCKJA();
    // protected System.Void KCEPMBHOMCD()
    // Offset: 0x19A37BC
    void KCEPMBHOMCD();
    // private System.Collections.IEnumerator HJLMAOOOLLM(System.Single AMHGMOKIEIJ, System.Single PBANLCKPPFN)
    // Offset: 0x19A3834
    ::System::Collections::IEnumerator* HJLMAOOOLLM(float AMHGMOKIEIJ, float PBANLCKPPFN);
    // protected System.Collections.IEnumerator LBKMDMJKEPH(System.Single OHOGONAFMPC)
    // Offset: 0x19A38E8
    ::System::Collections::IEnumerator* LBKMDMJKEPH(float OHOGONAFMPC);
    // private System.Void DKDPOJEAPED()
    // Offset: 0x19A3038
    void DKDPOJEAPED();
    // protected System.Void BPEFOMJJHKO()
    // Offset: 0x19A39AC
    void BPEFOMJJHKO();
    // protected System.Void Update()
    // Offset: 0x19A39B0
    void Update();
    // protected System.Collections.IEnumerator LNBCAMKHGDC(System.Single OHOGONAFMPC)
    // Offset: 0x19A39B4
    ::System::Collections::IEnumerator* LNBCAMKHGDC(float OHOGONAFMPC);
    // protected override System.Void Awake()
    // Offset: 0x19A31FC
    // Implemented from: MagicalActual.CreatureController
    // Base method: System.Void CreatureController::Awake()
    void Awake();
    // protected override System.Collections.IEnumerator PKBMEHCLJPD()
    // Offset: 0x19A37C0
    // Implemented from: MagicalActual.CreatureController
    // Base method: System.Collections.IEnumerator CreatureController::PKBMEHCLJPD()
    ::System::Collections::IEnumerator* PKBMEHCLJPD();
    // public System.Void .ctor()
    // Offset: 0x19A3A50
    // Implemented from: MagicalActual.CreatureController
    // Base method: System.Void CreatureController::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CritterController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::CritterController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CritterController*, creationType>()));
    }
  }; // MagicalActual.CritterController
  #pragma pack(pop)
  static check_size<sizeof(CritterController), 124 + sizeof(int)> __MagicalActual_CritterControllerSizeCheck;
  static_assert(sizeof(CritterController) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::CritterController::MIPEOCANMMO
// Il2CppName: MIPEOCANMMO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::MIPEOCANMMO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "MIPEOCANMMO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::NPNIADFIAKA
// Il2CppName: NPNIADFIAKA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::NPNIADFIAKA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "NPNIADFIAKA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::DJIGIJKOPDC
// Il2CppName: DJIGIJKOPDC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::DJIGIJKOPDC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "DJIGIJKOPDC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::DGELIHGGOKB
// Il2CppName: DGELIHGGOKB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::DGELIHGGOKB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "DGELIHGGOKB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::JOCMIPOFDLC
// Il2CppName: JOCMIPOFDLC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::CritterController::*)(float, float)>(&MagicalActual::CritterController::JOCMIPOFDLC)> {
  static const MethodInfo* get() {
    static auto* AMHGMOKIEIJ = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* PBANLCKPPFN = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "JOCMIPOFDLC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AMHGMOKIEIJ, PBANLCKPPFN});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::JNELNIGPBIM
// Il2CppName: JNELNIGPBIM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::JNELNIGPBIM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "JNELNIGPBIM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::HDMHEDEGDFD
// Il2CppName: HDMHEDEGDFD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::HDMHEDEGDFD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "HDMHEDEGDFD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::MKPGADOJHLI
// Il2CppName: MKPGADOJHLI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::CritterController::*)(float, float)>(&MagicalActual::CritterController::MKPGADOJHLI)> {
  static const MethodInfo* get() {
    static auto* AMHGMOKIEIJ = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* PBANLCKPPFN = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "MKPGADOJHLI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AMHGMOKIEIJ, PBANLCKPPFN});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::LKHCLCCCKNJ
// Il2CppName: LKHCLCCCKNJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::LKHCLCCCKNJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "LKHCLCCCKNJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::JEEPLOHAEKE
// Il2CppName: JEEPLOHAEKE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::JEEPLOHAEKE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "JEEPLOHAEKE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::FDLEDKCOFHM
// Il2CppName: FDLEDKCOFHM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::FDLEDKCOFHM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "FDLEDKCOFHM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::CNBJHFMDCOE
// Il2CppName: CNBJHFMDCOE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::CNBJHFMDCOE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "CNBJHFMDCOE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::DAPFFOEMAAM
// Il2CppName: DAPFFOEMAAM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::DAPFFOEMAAM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "DAPFFOEMAAM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::BJMMJNDCPLF
// Il2CppName: BJMMJNDCPLF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::BJMMJNDCPLF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "BJMMJNDCPLF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::OBCIDCFKDIN
// Il2CppName: OBCIDCFKDIN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::CritterController::*)(float, float)>(&MagicalActual::CritterController::OBCIDCFKDIN)> {
  static const MethodInfo* get() {
    static auto* AMHGMOKIEIJ = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* PBANLCKPPFN = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "OBCIDCFKDIN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AMHGMOKIEIJ, PBANLCKPPFN});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::ENDLGBKPMIA
// Il2CppName: ENDLGBKPMIA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::CritterController::*)(float, float)>(&MagicalActual::CritterController::ENDLGBKPMIA)> {
  static const MethodInfo* get() {
    static auto* AMHGMOKIEIJ = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* PBANLCKPPFN = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "ENDLGBKPMIA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AMHGMOKIEIJ, PBANLCKPPFN});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::DKDNPLPFHCG
// Il2CppName: DKDNPLPFHCG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::CritterController::*)(float, float)>(&MagicalActual::CritterController::DKDNPLPFHCG)> {
  static const MethodInfo* get() {
    static auto* AMHGMOKIEIJ = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* PBANLCKPPFN = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "DKDNPLPFHCG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AMHGMOKIEIJ, PBANLCKPPFN});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::CMDHIFGJMMN
// Il2CppName: CMDHIFGJMMN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::CMDHIFGJMMN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "CMDHIFGJMMN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::LCKKIBJCKJA
// Il2CppName: LCKKIBJCKJA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::LCKKIBJCKJA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "LCKKIBJCKJA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::KCEPMBHOMCD
// Il2CppName: KCEPMBHOMCD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::KCEPMBHOMCD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "KCEPMBHOMCD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::HJLMAOOOLLM
// Il2CppName: HJLMAOOOLLM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::CritterController::*)(float, float)>(&MagicalActual::CritterController::HJLMAOOOLLM)> {
  static const MethodInfo* get() {
    static auto* AMHGMOKIEIJ = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* PBANLCKPPFN = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "HJLMAOOOLLM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AMHGMOKIEIJ, PBANLCKPPFN});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::LBKMDMJKEPH
// Il2CppName: LBKMDMJKEPH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::CritterController::*)(float)>(&MagicalActual::CritterController::LBKMDMJKEPH)> {
  static const MethodInfo* get() {
    static auto* OHOGONAFMPC = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "LBKMDMJKEPH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OHOGONAFMPC});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::DKDPOJEAPED
// Il2CppName: DKDPOJEAPED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::DKDPOJEAPED)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "DKDPOJEAPED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::BPEFOMJJHKO
// Il2CppName: BPEFOMJJHKO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::BPEFOMJJHKO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "BPEFOMJJHKO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::LNBCAMKHGDC
// Il2CppName: LNBCAMKHGDC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::CritterController::*)(float)>(&MagicalActual::CritterController::LNBCAMKHGDC)> {
  static const MethodInfo* get() {
    static auto* OHOGONAFMPC = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "LNBCAMKHGDC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OHOGONAFMPC});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::PKBMEHCLJPD
// Il2CppName: PKBMEHCLJPD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (MagicalActual::CritterController::*)()>(&MagicalActual::CritterController::PKBMEHCLJPD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::CritterController*), "PKBMEHCLJPD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::CritterController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
