// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: BezierSpline
  class BezierSpline;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: BezierSplineVelocity
  class BezierSplineVelocity;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::BezierSplineVelocity);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::BezierSplineVelocity*, "MagicalActual", "BezierSplineVelocity");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.BezierSplineVelocity
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD28F4
  class BezierSplineVelocity : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public MagicalActual.BezierSpline spline
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::BezierSpline* spline;
    // Field size check
    static_assert(sizeof(::MagicalActual::BezierSpline*) == 0x8);
    // public System.Single[] velocityPoints
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<float> velocityPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public MagicalActual.BezierSpline spline
    [[deprecated("Use field access instead!")]] ::MagicalActual::BezierSpline*& dyn_spline();
    // Get instance field reference: public System.Single[] velocityPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_velocityPoints();
    // private System.Void NGCGKDPPDBG()
    // Offset: 0x1CAF734
    void NGCGKDPPDBG();
    // public System.Void LBACHOFKJOG()
    // Offset: 0x1CAF738
    void LBACHOFKJOG();
    // public System.Void NMHHGMDOCGG()
    // Offset: 0x1CAF7DC
    void NMHHGMDOCGG();
    // private System.Void BPEFOMJJHKO()
    // Offset: 0x1CAF890
    void BPEFOMJJHKO();
    // public System.Void FCHNAKCEGOE()
    // Offset: 0x1CAF894
    void FCHNAKCEGOE();
    // public System.Void HGANKMBKJGF()
    // Offset: 0x1CAF938
    void HGANKMBKJGF();
    // private System.Void DHCNJHAMIJO()
    // Offset: 0x1CAFA7C
    void DHCNJHAMIJO();
    // public System.Single GJAGHMGJDLA(System.Single FFNMEJOKJID)
    // Offset: 0x1CAFA80
    float GJAGHMGJDLA(float FFNMEJOKJID);
    // public System.Void LKFACPPNPOB()
    // Offset: 0x1CAFBF4
    void LKFACPPNPOB();
    // private System.Void Update()
    // Offset: 0x1CAFD50
    void Update();
    // public System.Single DBCMHLBNDKL(System.Single FFNMEJOKJID)
    // Offset: 0x1CAFD54
    float DBCMHLBNDKL(float FFNMEJOKJID);
    // public System.Void ELLLJBLMEEN()
    // Offset: 0x1CAFECC
    void ELLLJBLMEEN();
    // public System.Single DDBANDPCODM(System.Single FFNMEJOKJID)
    // Offset: 0x1CB0020
    float DDBANDPCODM(float FFNMEJOKJID);
    // private System.Void FNGLOIECKDG()
    // Offset: 0x1CB018C
    void FNGLOIECKDG();
    // public System.Void Reset()
    // Offset: 0x1CB0190
    void Reset();
    // public System.Void PLCMCCHIMMF()
    // Offset: 0x1CB0300
    void PLCMCCHIMMF();
    // public System.Single PKLIAOFOKJC(System.Single FFNMEJOKJID)
    // Offset: 0x1CB0454
    float PKLIAOFOKJC(float FFNMEJOKJID);
    // public System.Void NHJOEDDDLDF()
    // Offset: 0x1CB05C0
    void NHJOEDDDLDF();
    // private System.Void BJMMJNDCPLF()
    // Offset: 0x1CB0718
    void BJMMJNDCPLF();
    // public System.Void .ctor()
    // Offset: 0x1CB071C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BezierSplineVelocity* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::BezierSplineVelocity::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BezierSplineVelocity*, creationType>()));
    }
    // public System.Single LNNDPNHCCKP(System.Single FFNMEJOKJID)
    // Offset: 0x1CB0724
    float LNNDPNHCCKP(float FFNMEJOKJID);
    // private System.Void PBEMGGBBDCK()
    // Offset: 0x1CB0890
    void PBEMGGBBDCK();
    // public System.Single GetVelocity(System.Single FFNMEJOKJID)
    // Offset: 0x1CB0894
    float GetVelocity(float FFNMEJOKJID);
    // private System.Void PFABJJGAOMM()
    // Offset: 0x1CB0A0C
    void PFABJJGAOMM();
    // public System.Void CHCNFFMBLBH()
    // Offset: 0x1CB0A10
    void CHCNFFMBLBH();
    // public System.Single KJFMHFOPFAD(System.Single FFNMEJOKJID)
    // Offset: 0x1CB0B80
    float KJFMHFOPFAD(float FFNMEJOKJID);
    // public System.Void AddVelocityPoint()
    // Offset: 0x1CB0CF8
    void AddVelocityPoint();
    // private System.Void FEIGDJNEHBG()
    // Offset: 0x1CB0DAC
    void FEIGDJNEHBG();
    // private System.Void Start()
    // Offset: 0x1CB0DB0
    void Start();
    // public System.Void LOBMMOMFPEN()
    // Offset: 0x1CB0DB4
    void LOBMMOMFPEN();
    // private System.Void AKGFEENGKJD()
    // Offset: 0x1CB0F24
    void AKGFEENGKJD();
    // public System.Single MFJJIFCJLKM(System.Single FFNMEJOKJID)
    // Offset: 0x1CB0F28
    float MFJJIFCJLKM(float FFNMEJOKJID);
    // private System.Void AFIACGLCIPB()
    // Offset: 0x1CB1098
    void AFIACGLCIPB();
    // public System.Void FFLHIDNIAFO()
    // Offset: 0x1CB109C
    void FFLHIDNIAFO();
  }; // MagicalActual.BezierSplineVelocity
  #pragma pack(pop)
  static check_size<sizeof(BezierSplineVelocity), 32 + sizeof(::ArrayW<float>)> __MagicalActual_BezierSplineVelocitySizeCheck;
  static_assert(sizeof(BezierSplineVelocity) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::NGCGKDPPDBG
// Il2CppName: NGCGKDPPDBG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::NGCGKDPPDBG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "NGCGKDPPDBG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::LBACHOFKJOG
// Il2CppName: LBACHOFKJOG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::LBACHOFKJOG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "LBACHOFKJOG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::NMHHGMDOCGG
// Il2CppName: NMHHGMDOCGG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::NMHHGMDOCGG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "NMHHGMDOCGG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::BPEFOMJJHKO
// Il2CppName: BPEFOMJJHKO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::BPEFOMJJHKO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "BPEFOMJJHKO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::FCHNAKCEGOE
// Il2CppName: FCHNAKCEGOE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::FCHNAKCEGOE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "FCHNAKCEGOE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::HGANKMBKJGF
// Il2CppName: HGANKMBKJGF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::HGANKMBKJGF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "HGANKMBKJGF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::DHCNJHAMIJO
// Il2CppName: DHCNJHAMIJO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::DHCNJHAMIJO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "DHCNJHAMIJO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::GJAGHMGJDLA
// Il2CppName: GJAGHMGJDLA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MagicalActual::BezierSplineVelocity::*)(float)>(&MagicalActual::BezierSplineVelocity::GJAGHMGJDLA)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "GJAGHMGJDLA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::LKFACPPNPOB
// Il2CppName: LKFACPPNPOB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::LKFACPPNPOB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "LKFACPPNPOB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::DBCMHLBNDKL
// Il2CppName: DBCMHLBNDKL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MagicalActual::BezierSplineVelocity::*)(float)>(&MagicalActual::BezierSplineVelocity::DBCMHLBNDKL)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "DBCMHLBNDKL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::ELLLJBLMEEN
// Il2CppName: ELLLJBLMEEN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::ELLLJBLMEEN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "ELLLJBLMEEN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::DDBANDPCODM
// Il2CppName: DDBANDPCODM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MagicalActual::BezierSplineVelocity::*)(float)>(&MagicalActual::BezierSplineVelocity::DDBANDPCODM)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "DDBANDPCODM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::FNGLOIECKDG
// Il2CppName: FNGLOIECKDG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::FNGLOIECKDG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "FNGLOIECKDG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::PLCMCCHIMMF
// Il2CppName: PLCMCCHIMMF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::PLCMCCHIMMF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "PLCMCCHIMMF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::PKLIAOFOKJC
// Il2CppName: PKLIAOFOKJC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MagicalActual::BezierSplineVelocity::*)(float)>(&MagicalActual::BezierSplineVelocity::PKLIAOFOKJC)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "PKLIAOFOKJC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::NHJOEDDDLDF
// Il2CppName: NHJOEDDDLDF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::NHJOEDDDLDF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "NHJOEDDDLDF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::BJMMJNDCPLF
// Il2CppName: BJMMJNDCPLF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::BJMMJNDCPLF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "BJMMJNDCPLF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::LNNDPNHCCKP
// Il2CppName: LNNDPNHCCKP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MagicalActual::BezierSplineVelocity::*)(float)>(&MagicalActual::BezierSplineVelocity::LNNDPNHCCKP)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "LNNDPNHCCKP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::PBEMGGBBDCK
// Il2CppName: PBEMGGBBDCK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::PBEMGGBBDCK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "PBEMGGBBDCK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::GetVelocity
// Il2CppName: GetVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MagicalActual::BezierSplineVelocity::*)(float)>(&MagicalActual::BezierSplineVelocity::GetVelocity)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "GetVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::PFABJJGAOMM
// Il2CppName: PFABJJGAOMM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::PFABJJGAOMM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "PFABJJGAOMM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::CHCNFFMBLBH
// Il2CppName: CHCNFFMBLBH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::CHCNFFMBLBH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "CHCNFFMBLBH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::KJFMHFOPFAD
// Il2CppName: KJFMHFOPFAD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MagicalActual::BezierSplineVelocity::*)(float)>(&MagicalActual::BezierSplineVelocity::KJFMHFOPFAD)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "KJFMHFOPFAD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::AddVelocityPoint
// Il2CppName: AddVelocityPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::AddVelocityPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "AddVelocityPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::FEIGDJNEHBG
// Il2CppName: FEIGDJNEHBG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::FEIGDJNEHBG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "FEIGDJNEHBG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::LOBMMOMFPEN
// Il2CppName: LOBMMOMFPEN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::LOBMMOMFPEN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "LOBMMOMFPEN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::AKGFEENGKJD
// Il2CppName: AKGFEENGKJD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::AKGFEENGKJD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "AKGFEENGKJD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::MFJJIFCJLKM
// Il2CppName: MFJJIFCJLKM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MagicalActual::BezierSplineVelocity::*)(float)>(&MagicalActual::BezierSplineVelocity::MFJJIFCJLKM)> {
  static const MethodInfo* get() {
    static auto* FFNMEJOKJID = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "MFJJIFCJLKM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FFNMEJOKJID});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::AFIACGLCIPB
// Il2CppName: AFIACGLCIPB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::AFIACGLCIPB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "AFIACGLCIPB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::BezierSplineVelocity::FFLHIDNIAFO
// Il2CppName: FFLHIDNIAFO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::BezierSplineVelocity::*)()>(&MagicalActual::BezierSplineVelocity::FFLHIDNIAFO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::BezierSplineVelocity*), "FFLHIDNIAFO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
