// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Monster
  class Monster;
  // Forward declaring type: NetEntity
  class NetEntity;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: M_LightableBrazier
  class M_LightableBrazier;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::M_LightableBrazier);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::M_LightableBrazier*, "MagicalActual", "M_LightableBrazier");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.M_LightableBrazier
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD46AC
  class M_LightableBrazier : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MagicalActual.Monster BIIBEOELIHH
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::Monster* BIIBEOELIHH;
    // Field size check
    static_assert(sizeof(::MagicalActual::Monster*) == 0x8);
    // private MagicalActual.NetEntity IJJGNKLFGJN
    // Size: 0x8
    // Offset: 0x20
    ::MagicalActual::NetEntity* IJJGNKLFGJN;
    // Field size check
    static_assert(sizeof(::MagicalActual::NetEntity*) == 0x8);
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x28
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String reactsToSpell
    // Size: 0x8
    // Offset: 0x30
    ::StringW reactsToSpell;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean OKLBOLAFDEH
    // Size: 0x1
    // Offset: 0x38
    bool OKLBOLAFDEH;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: OKLBOLAFDEH and: vfxFire
    char __padding4[0x7] = {};
    // public UnityEngine.GameObject vfxFire
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* vfxFire;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MagicalActual.Monster BIIBEOELIHH
    [[deprecated("Use field access instead!")]] ::MagicalActual::Monster*& dyn_BIIBEOELIHH();
    // Get instance field reference: private MagicalActual.NetEntity IJJGNKLFGJN
    [[deprecated("Use field access instead!")]] ::MagicalActual::NetEntity*& dyn_IJJGNKLFGJN();
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: public System.String reactsToSpell
    [[deprecated("Use field access instead!")]] ::StringW& dyn_reactsToSpell();
    // Get instance field reference: private System.Boolean OKLBOLAFDEH
    [[deprecated("Use field access instead!")]] bool& dyn_OKLBOLAFDEH();
    // Get instance field reference: public UnityEngine.GameObject vfxFire
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxFire();
    // private System.Void LLAFBMEBMEN(System.Object OMLPNCLFFMJ)
    // Offset: 0x243725C
    void LLAFBMEBMEN(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void IEDNIMMEJBL(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x24372FC
    void IEDNIMMEJBL(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void ADHCBIJICHJ()
    // Offset: 0x24372C8
    void ADHCBIJICHJ();
    // public System.Void AGKHMBHBNFM(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x24373B0
    void AGKHMBHBNFM(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void FBONHOOJHBG()
    // Offset: 0x2437464
    void FBONHOOJHBG();
    // private System.Void BECBLPDEELP(System.Object OMLPNCLFFMJ)
    // Offset: 0x24374BC
    void BECBLPDEELP(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void JMKPALEOOIM()
    // Offset: 0x243755C
    void JMKPALEOOIM();
    // public System.Void JOCIAJOCGNM(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x2437590
    void JOCIAJOCGNM(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void Start()
    // Offset: 0x2437644
    void Start();
    // private System.Void PBEMGGBBDCK()
    // Offset: 0x243769C
    void PBEMGGBBDCK();
    // private System.Void GFKLACKEKJJ()
    // Offset: 0x24376F4
    void GFKLACKEKJJ();
    // private System.Void OKDJKOGJHMB(System.Object OMLPNCLFFMJ)
    // Offset: 0x2437740
    void OKDJKOGJHMB(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void MMJIKEBHBJF(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x24377E0
    void MMJIKEBHBJF(::MagicalActual::NetEntity* CMLIHJCOINC);
    // public System.Void EIHONBBKDNH(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x2437894
    void EIHONBBKDNH(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void DPIEDEJGDAB()
    // Offset: 0x2437528
    void DPIEDEJGDAB();
    // public System.Void NOLENMEIGLN(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x2437948
    void NOLENMEIGLN(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void IEAHKNMINMA()
    // Offset: 0x24379FC
    void IEAHKNMINMA();
    // public System.Void .ctor()
    // Offset: 0x2437A30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static M_LightableBrazier* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::M_LightableBrazier::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<M_LightableBrazier*, creationType>()));
    }
    // public System.Void KEGEKFNLCJD(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x2437A98
    void KEGEKFNLCJD(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void JFLFHMLBCBG(System.Object OMLPNCLFFMJ)
    // Offset: 0x2437B4C
    void JFLFHMLBCBG(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void DNBNLKHIKBC()
    // Offset: 0x2437BB8
    void DNBNLKHIKBC();
    // private System.Void ICEBNGBFCLL(System.Object OMLPNCLFFMJ)
    // Offset: 0x2437BEC
    void ICEBNGBFCLL(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void MHMKOJGKHKE(System.Object OMLPNCLFFMJ)
    // Offset: 0x2437C58
    void MHMKOJGKHKE(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void NNDKJCJFIAK()
    // Offset: 0x2437CC4
    void NNDKJCJFIAK();
    // private System.Void GAOFEAPPLNN(System.Object OMLPNCLFFMJ)
    // Offset: 0x2437D1C
    void GAOFEAPPLNN(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void DGIHGGKOAJC(System.Object OMLPNCLFFMJ)
    // Offset: 0x2437DD4
    void DGIHGGKOAJC(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void KPOAAAHLGLA()
    // Offset: 0x2437E8C
    void KPOAAAHLGLA();
    // private System.Void LBIDGDKEGEH()
    // Offset: 0x2437E40
    void LBIDGDKEGEH();
    // private System.Void CKMDKCEDECO(System.Object OMLPNCLFFMJ)
    // Offset: 0x2437EE4
    void CKMDKCEDECO(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void orbusNetInit(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x2437F50
    void orbusNetInit(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void FPJBAGNKEMH()
    // Offset: 0x2438004
    void FPJBAGNKEMH();
    // private System.Void DFCOAPEIKLN()
    // Offset: 0x2438050
    void DFCOAPEIKLN();
    // private System.Void DBCODAOENIP()
    // Offset: 0x2437D88
    void DBCODAOENIP();
    // private System.Void FBNBNLALDGI(System.Object OMLPNCLFFMJ)
    // Offset: 0x24380A8
    void FBNBNLALDGI(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void CBKHJDHOBFL()
    // Offset: 0x24377AC
    void CBKHJDHOBFL();
    // public System.Void NMPGLDGDDNL(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x2438114
    void NMPGLDGDDNL(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void GPCPAJPCIJJ(System.Object OMLPNCLFFMJ)
    // Offset: 0x24381C8
    void GPCPAJPCIJJ(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void AFIACGLCIPB()
    // Offset: 0x2438234
    void AFIACGLCIPB();
    // private System.Void IPIFMKAGODD()
    // Offset: 0x243828C
    void IPIFMKAGODD();
    // private System.Void KBDGAPMJGLG()
    // Offset: 0x24382E4
    void KBDGAPMJGLG();
    // private System.Void NMBFEFIPONE(System.Object OMLPNCLFFMJ)
    // Offset: 0x243833C
    void NMBFEFIPONE(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void LPLGKBGLPOK()
    // Offset: 0x24383A8
    void LPLGKBGLPOK();
    // private System.Void DGJGAFKDIDK()
    // Offset: 0x2438400
    void DGJGAFKDIDK();
  }; // MagicalActual.M_LightableBrazier
  #pragma pack(pop)
  static check_size<sizeof(M_LightableBrazier), 64 + sizeof(::UnityEngine::GameObject*)> __MagicalActual_M_LightableBrazierSizeCheck;
  static_assert(sizeof(M_LightableBrazier) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::LLAFBMEBMEN
// Il2CppName: LLAFBMEBMEN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::Il2CppObject*)>(&MagicalActual::M_LightableBrazier::LLAFBMEBMEN)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "LLAFBMEBMEN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::IEDNIMMEJBL
// Il2CppName: IEDNIMMEJBL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_LightableBrazier::IEDNIMMEJBL)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "IEDNIMMEJBL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::ADHCBIJICHJ
// Il2CppName: ADHCBIJICHJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::ADHCBIJICHJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "ADHCBIJICHJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::AGKHMBHBNFM
// Il2CppName: AGKHMBHBNFM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_LightableBrazier::AGKHMBHBNFM)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "AGKHMBHBNFM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::FBONHOOJHBG
// Il2CppName: FBONHOOJHBG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::FBONHOOJHBG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "FBONHOOJHBG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::BECBLPDEELP
// Il2CppName: BECBLPDEELP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::Il2CppObject*)>(&MagicalActual::M_LightableBrazier::BECBLPDEELP)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "BECBLPDEELP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::JMKPALEOOIM
// Il2CppName: JMKPALEOOIM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::JMKPALEOOIM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "JMKPALEOOIM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::JOCIAJOCGNM
// Il2CppName: JOCIAJOCGNM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_LightableBrazier::JOCIAJOCGNM)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "JOCIAJOCGNM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::PBEMGGBBDCK
// Il2CppName: PBEMGGBBDCK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::PBEMGGBBDCK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "PBEMGGBBDCK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::GFKLACKEKJJ
// Il2CppName: GFKLACKEKJJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::GFKLACKEKJJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "GFKLACKEKJJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::OKDJKOGJHMB
// Il2CppName: OKDJKOGJHMB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::Il2CppObject*)>(&MagicalActual::M_LightableBrazier::OKDJKOGJHMB)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "OKDJKOGJHMB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::MMJIKEBHBJF
// Il2CppName: MMJIKEBHBJF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_LightableBrazier::MMJIKEBHBJF)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "MMJIKEBHBJF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::EIHONBBKDNH
// Il2CppName: EIHONBBKDNH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_LightableBrazier::EIHONBBKDNH)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "EIHONBBKDNH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::DPIEDEJGDAB
// Il2CppName: DPIEDEJGDAB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::DPIEDEJGDAB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "DPIEDEJGDAB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::NOLENMEIGLN
// Il2CppName: NOLENMEIGLN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_LightableBrazier::NOLENMEIGLN)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "NOLENMEIGLN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::IEAHKNMINMA
// Il2CppName: IEAHKNMINMA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::IEAHKNMINMA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "IEAHKNMINMA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::KEGEKFNLCJD
// Il2CppName: KEGEKFNLCJD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_LightableBrazier::KEGEKFNLCJD)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "KEGEKFNLCJD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::JFLFHMLBCBG
// Il2CppName: JFLFHMLBCBG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::Il2CppObject*)>(&MagicalActual::M_LightableBrazier::JFLFHMLBCBG)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "JFLFHMLBCBG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::DNBNLKHIKBC
// Il2CppName: DNBNLKHIKBC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::DNBNLKHIKBC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "DNBNLKHIKBC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::ICEBNGBFCLL
// Il2CppName: ICEBNGBFCLL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::Il2CppObject*)>(&MagicalActual::M_LightableBrazier::ICEBNGBFCLL)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "ICEBNGBFCLL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::MHMKOJGKHKE
// Il2CppName: MHMKOJGKHKE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::Il2CppObject*)>(&MagicalActual::M_LightableBrazier::MHMKOJGKHKE)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "MHMKOJGKHKE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::NNDKJCJFIAK
// Il2CppName: NNDKJCJFIAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::NNDKJCJFIAK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "NNDKJCJFIAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::GAOFEAPPLNN
// Il2CppName: GAOFEAPPLNN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::Il2CppObject*)>(&MagicalActual::M_LightableBrazier::GAOFEAPPLNN)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "GAOFEAPPLNN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::DGIHGGKOAJC
// Il2CppName: DGIHGGKOAJC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::Il2CppObject*)>(&MagicalActual::M_LightableBrazier::DGIHGGKOAJC)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "DGIHGGKOAJC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::KPOAAAHLGLA
// Il2CppName: KPOAAAHLGLA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::KPOAAAHLGLA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "KPOAAAHLGLA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::LBIDGDKEGEH
// Il2CppName: LBIDGDKEGEH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::LBIDGDKEGEH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "LBIDGDKEGEH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::CKMDKCEDECO
// Il2CppName: CKMDKCEDECO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::Il2CppObject*)>(&MagicalActual::M_LightableBrazier::CKMDKCEDECO)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "CKMDKCEDECO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::orbusNetInit
// Il2CppName: orbusNetInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_LightableBrazier::orbusNetInit)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "orbusNetInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::FPJBAGNKEMH
// Il2CppName: FPJBAGNKEMH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::FPJBAGNKEMH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "FPJBAGNKEMH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::DFCOAPEIKLN
// Il2CppName: DFCOAPEIKLN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::DFCOAPEIKLN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "DFCOAPEIKLN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::DBCODAOENIP
// Il2CppName: DBCODAOENIP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::DBCODAOENIP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "DBCODAOENIP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::FBNBNLALDGI
// Il2CppName: FBNBNLALDGI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::Il2CppObject*)>(&MagicalActual::M_LightableBrazier::FBNBNLALDGI)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "FBNBNLALDGI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::CBKHJDHOBFL
// Il2CppName: CBKHJDHOBFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::CBKHJDHOBFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "CBKHJDHOBFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::NMPGLDGDDNL
// Il2CppName: NMPGLDGDDNL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::MagicalActual::NetEntity*)>(&MagicalActual::M_LightableBrazier::NMPGLDGDDNL)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "NMPGLDGDDNL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::GPCPAJPCIJJ
// Il2CppName: GPCPAJPCIJJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::Il2CppObject*)>(&MagicalActual::M_LightableBrazier::GPCPAJPCIJJ)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "GPCPAJPCIJJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::AFIACGLCIPB
// Il2CppName: AFIACGLCIPB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::AFIACGLCIPB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "AFIACGLCIPB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::IPIFMKAGODD
// Il2CppName: IPIFMKAGODD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::IPIFMKAGODD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "IPIFMKAGODD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::KBDGAPMJGLG
// Il2CppName: KBDGAPMJGLG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::KBDGAPMJGLG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "KBDGAPMJGLG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::NMBFEFIPONE
// Il2CppName: NMBFEFIPONE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)(::Il2CppObject*)>(&MagicalActual::M_LightableBrazier::NMBFEFIPONE)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "NMBFEFIPONE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::LPLGKBGLPOK
// Il2CppName: LPLGKBGLPOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::LPLGKBGLPOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "LPLGKBGLPOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_LightableBrazier::DGJGAFKDIDK
// Il2CppName: DGJGAFKDIDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_LightableBrazier::*)()>(&MagicalActual::M_LightableBrazier::DGJGAFKDIDK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_LightableBrazier*), "DGJGAFKDIDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
