// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Monster
  class Monster;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: M_Piggie
  class M_Piggie;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::M_Piggie);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::M_Piggie*, "MagicalActual", "M_Piggie");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.M_Piggie
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD5A50
  class M_Piggie : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MagicalActual.Monster BIIBEOELIHH
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::Monster* BIIBEOELIHH;
    // Field size check
    static_assert(sizeof(::MagicalActual::Monster*) == 0x8);
    // public UnityEngine.GameObject vfxSlash
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* vfxSlash;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject vfxCharge
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* vfxCharge;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x30
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MagicalActual.Monster BIIBEOELIHH
    [[deprecated("Use field access instead!")]] ::MagicalActual::Monster*& dyn_BIIBEOELIHH();
    // Get instance field reference: public UnityEngine.GameObject vfxSlash
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxSlash();
    // Get instance field reference: public UnityEngine.GameObject vfxCharge
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxCharge();
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // public System.Void PGCKFOCDGMK()
    // Offset: 0x2705118
    void PGCKFOCDGMK();
    // public System.Void ECECFOFOMAD()
    // Offset: 0x270514C
    void ECECFOFOMAD();
    // public System.Void FNAJKCKMHHJ()
    // Offset: 0x2705180
    void FNAJKCKMHHJ();
    // private System.Void GKIOLADOCOK()
    // Offset: 0x27053A4
    void GKIOLADOCOK();
    // public System.Void CEPPICBNJOI()
    // Offset: 0x27053FC
    void CEPPICBNJOI();
    // public System.Void OONLBOKDEKC()
    // Offset: 0x2705620
    void OONLBOKDEKC();
    // public System.Void JMPBEJDKDGJ()
    // Offset: 0x2705654
    void JMPBEJDKDGJ();
    // public System.Void EPFFKCOMEAB()
    // Offset: 0x2705878
    void EPFFKCOMEAB();
    // public System.Void DIDADMBDAAK()
    // Offset: 0x27058AC
    void DIDADMBDAAK();
    // private System.Void IDOCJGNLNFL()
    // Offset: 0x2705AD0
    void IDOCJGNLNFL();
    // public System.Void StatusCharge()
    // Offset: 0x2705B28
    void StatusCharge();
    // public System.Void MFEHDAPHKNI()
    // Offset: 0x2705B5C
    void MFEHDAPHKNI();
    // public System.Void FMFOGAKFJGJ()
    // Offset: 0x2705B90
    void FMFOGAKFJGJ();
    // public System.Void AMLIKCDAEDK()
    // Offset: 0x2705DB4
    void AMLIKCDAEDK();
    // public System.Void KAJGKIMEHOP()
    // Offset: 0x2705DE8
    void KAJGKIMEHOP();
    // public System.Void GILLJBIMGNJ()
    // Offset: 0x2705E1C
    void GILLJBIMGNJ();
    // public System.Void Slash()
    // Offset: 0x2706040
    void Slash();
    // private System.Void Start()
    // Offset: 0x2706258
    void Start();
    // public System.Void BBGJOPAOIPD()
    // Offset: 0x27062B0
    void BBGJOPAOIPD();
    // public System.Void BLKCEGKDLJJ()
    // Offset: 0x27062E4
    void BLKCEGKDLJJ();
    // public System.Void .ctor()
    // Offset: 0x2706318
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static M_Piggie* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::M_Piggie::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<M_Piggie*, creationType>()));
    }
    // public System.Void StatusEndCharge()
    // Offset: 0x2706370
    void StatusEndCharge();
    // private System.Void IPIFMKAGODD()
    // Offset: 0x27063A4
    void IPIFMKAGODD();
    // public System.Void CCOODLILKJD()
    // Offset: 0x27063FC
    void CCOODLILKJD();
    // public System.Void EDCGCBFBNIN()
    // Offset: 0x2706620
    void EDCGCBFBNIN();
    // public System.Void GJIMIKPHINA()
    // Offset: 0x2706654
    void GJIMIKPHINA();
    // public System.Void KIMKDPAHACL()
    // Offset: 0x2706688
    void KIMKDPAHACL();
    // public System.Void MKABNCICGHK()
    // Offset: 0x27066BC
    void MKABNCICGHK();
    // private System.Void NEDFCIDMJBB()
    // Offset: 0x27066F0
    void NEDFCIDMJBB();
    // public System.Void GKKHDPKEKGI()
    // Offset: 0x2706748
    void GKKHDPKEKGI();
    // public System.Void MKAECMFKIEN()
    // Offset: 0x270677C
    void MKAECMFKIEN();
    // public System.Void KLPLAHINIGH()
    // Offset: 0x27069A0
    void KLPLAHINIGH();
    // public System.Void JEGGDIFFCFE()
    // Offset: 0x2706BC4
    void JEGGDIFFCFE();
    // public System.Void CKGBGGPCAGC()
    // Offset: 0x2706BF8
    void CKGBGGPCAGC();
    // public System.Void OCCDFPOFLAM()
    // Offset: 0x2706C2C
    void OCCDFPOFLAM();
  }; // MagicalActual.M_Piggie
  #pragma pack(pop)
  static check_size<sizeof(M_Piggie), 48 + sizeof(::StringW)> __MagicalActual_M_PiggieSizeCheck;
  static_assert(sizeof(M_Piggie) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::M_Piggie::PGCKFOCDGMK
// Il2CppName: PGCKFOCDGMK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::PGCKFOCDGMK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "PGCKFOCDGMK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::ECECFOFOMAD
// Il2CppName: ECECFOFOMAD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::ECECFOFOMAD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "ECECFOFOMAD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::FNAJKCKMHHJ
// Il2CppName: FNAJKCKMHHJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::FNAJKCKMHHJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "FNAJKCKMHHJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::GKIOLADOCOK
// Il2CppName: GKIOLADOCOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::GKIOLADOCOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "GKIOLADOCOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::CEPPICBNJOI
// Il2CppName: CEPPICBNJOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::CEPPICBNJOI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "CEPPICBNJOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::OONLBOKDEKC
// Il2CppName: OONLBOKDEKC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::OONLBOKDEKC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "OONLBOKDEKC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::JMPBEJDKDGJ
// Il2CppName: JMPBEJDKDGJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::JMPBEJDKDGJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "JMPBEJDKDGJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::EPFFKCOMEAB
// Il2CppName: EPFFKCOMEAB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::EPFFKCOMEAB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "EPFFKCOMEAB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::DIDADMBDAAK
// Il2CppName: DIDADMBDAAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::DIDADMBDAAK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "DIDADMBDAAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::IDOCJGNLNFL
// Il2CppName: IDOCJGNLNFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::IDOCJGNLNFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "IDOCJGNLNFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::StatusCharge
// Il2CppName: StatusCharge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::StatusCharge)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "StatusCharge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::MFEHDAPHKNI
// Il2CppName: MFEHDAPHKNI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::MFEHDAPHKNI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "MFEHDAPHKNI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::FMFOGAKFJGJ
// Il2CppName: FMFOGAKFJGJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::FMFOGAKFJGJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "FMFOGAKFJGJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::AMLIKCDAEDK
// Il2CppName: AMLIKCDAEDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::AMLIKCDAEDK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "AMLIKCDAEDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::KAJGKIMEHOP
// Il2CppName: KAJGKIMEHOP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::KAJGKIMEHOP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "KAJGKIMEHOP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::GILLJBIMGNJ
// Il2CppName: GILLJBIMGNJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::GILLJBIMGNJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "GILLJBIMGNJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::Slash
// Il2CppName: Slash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::Slash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "Slash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::BBGJOPAOIPD
// Il2CppName: BBGJOPAOIPD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::BBGJOPAOIPD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "BBGJOPAOIPD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::BLKCEGKDLJJ
// Il2CppName: BLKCEGKDLJJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::BLKCEGKDLJJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "BLKCEGKDLJJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::M_Piggie::StatusEndCharge
// Il2CppName: StatusEndCharge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::StatusEndCharge)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "StatusEndCharge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::IPIFMKAGODD
// Il2CppName: IPIFMKAGODD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::IPIFMKAGODD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "IPIFMKAGODD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::CCOODLILKJD
// Il2CppName: CCOODLILKJD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::CCOODLILKJD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "CCOODLILKJD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::EDCGCBFBNIN
// Il2CppName: EDCGCBFBNIN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::EDCGCBFBNIN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "EDCGCBFBNIN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::GJIMIKPHINA
// Il2CppName: GJIMIKPHINA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::GJIMIKPHINA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "GJIMIKPHINA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::KIMKDPAHACL
// Il2CppName: KIMKDPAHACL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::KIMKDPAHACL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "KIMKDPAHACL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::MKABNCICGHK
// Il2CppName: MKABNCICGHK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::MKABNCICGHK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "MKABNCICGHK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::NEDFCIDMJBB
// Il2CppName: NEDFCIDMJBB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::NEDFCIDMJBB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "NEDFCIDMJBB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::GKKHDPKEKGI
// Il2CppName: GKKHDPKEKGI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::GKKHDPKEKGI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "GKKHDPKEKGI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::MKAECMFKIEN
// Il2CppName: MKAECMFKIEN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::MKAECMFKIEN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "MKAECMFKIEN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::KLPLAHINIGH
// Il2CppName: KLPLAHINIGH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::KLPLAHINIGH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "KLPLAHINIGH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::JEGGDIFFCFE
// Il2CppName: JEGGDIFFCFE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::JEGGDIFFCFE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "JEGGDIFFCFE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::CKGBGGPCAGC
// Il2CppName: CKGBGGPCAGC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::CKGBGGPCAGC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "CKGBGGPCAGC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_Piggie::OCCDFPOFLAM
// Il2CppName: OCCDFPOFLAM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_Piggie::*)()>(&MagicalActual::M_Piggie::OCCDFPOFLAM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_Piggie*), "OCCDFPOFLAM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
