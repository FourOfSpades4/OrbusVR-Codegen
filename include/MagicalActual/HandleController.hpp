// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: NetEntity
  class NetEntity;
  // Forward declaring type: HandleMovedEvent
  class HandleMovedEvent;
  // Forward declaring type: Grabber
  class Grabber;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: HandleController
  class HandleController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::HandleController);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::HandleController*, "MagicalActual", "HandleController");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x8D
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.HandleController
  // [TokenAttribute] Offset: FFFFFFFF
  class HandleController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::MagicalActual::HandleController::CooldownType
    struct CooldownType;
    // Nested type: ::MagicalActual::HandleController::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MagicalActual.HandleController/CooldownType
    // [TokenAttribute] Offset: FFFFFFFF
    struct CooldownType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: CooldownType
      constexpr CooldownType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MagicalActual.HandleController/CooldownType OHBLLENCJHB
      static constexpr const int OHBLLENCJHB = 0;
      // Get static field: static public MagicalActual.HandleController/CooldownType OHBLLENCJHB
      static ::MagicalActual::HandleController::CooldownType _get_OHBLLENCJHB();
      // Set static field: static public MagicalActual.HandleController/CooldownType OHBLLENCJHB
      static void _set_OHBLLENCJHB(::MagicalActual::HandleController::CooldownType value);
      // static field const value: static public MagicalActual.HandleController/CooldownType GAOGLAGLNFN
      static constexpr const int GAOGLAGLNFN = 1;
      // Get static field: static public MagicalActual.HandleController/CooldownType GAOGLAGLNFN
      static ::MagicalActual::HandleController::CooldownType _get_GAOGLAGLNFN();
      // Set static field: static public MagicalActual.HandleController/CooldownType GAOGLAGLNFN
      static void _set_GAOGLAGLNFN(::MagicalActual::HandleController::CooldownType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // MagicalActual.HandleController/CooldownType
    #pragma pack(pop)
    static check_size<sizeof(HandleController::CooldownType), 0 + sizeof(int)> __MagicalActual_HandleController_CooldownTypeSizeCheck;
    static_assert(sizeof(HandleController::CooldownType) == 0x4);
    public:
    // public MagicalActual.HandleController/CooldownType cooldownType
    // Size: 0x4
    // Offset: 0x18
    ::MagicalActual::HandleController::CooldownType cooldownType;
    // Field size check
    static_assert(sizeof(::MagicalActual::HandleController::CooldownType) == 0x4);
    // public System.Single defaultCooldown
    // Size: 0x4
    // Offset: 0x1C
    float defaultCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isPlayerInteractable
    // Size: 0x1
    // Offset: 0x20
    bool isPlayerInteractable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isPlayerInteractable and: OrbusNetComponent
    char __padding2[0x7] = {};
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x28
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private MagicalActual.NetEntity IJJGNKLFGJN
    // Size: 0x8
    // Offset: 0x30
    ::MagicalActual::NetEntity* IJJGNKLFGJN;
    // Field size check
    static_assert(sizeof(::MagicalActual::NetEntity*) == 0x8);
    // private UnityEngine.Transform handleTransform
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* handleTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform hinge
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* hinge;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single angleDistanceToTrigger
    // Size: 0x4
    // Offset: 0x48
    float angleDistanceToTrigger;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: angleDistanceToTrigger and: OnHandleTriggered
    char __padding7[0x4] = {};
    // public UnityEngine.Events.UnityEvent OnHandleTriggered
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Events::UnityEvent* OnHandleTriggered;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public MagicalActual.HandleMovedEvent OnHandleMoved
    // Size: 0x8
    // Offset: 0x58
    ::MagicalActual::HandleMovedEvent* OnHandleMoved;
    // Field size check
    static_assert(sizeof(::MagicalActual::HandleMovedEvent*) == 0x8);
    // private MagicalActual.Grabber CLHMLLOPNJM
    // Size: 0x8
    // Offset: 0x60
    ::MagicalActual::Grabber* CLHMLLOPNJM;
    // Field size check
    static_assert(sizeof(::MagicalActual::Grabber*) == 0x8);
    // private UnityEngine.Vector3 NIMBDKNEPOK
    // Size: 0xC
    // Offset: 0x68
    ::UnityEngine::Vector3 NIMBDKNEPOK;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single DKFENFBLLCP
    // Size: 0x4
    // Offset: 0x74
    float DKFENFBLLCP;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean BBIECHILMPI
    // Size: 0x1
    // Offset: 0x78
    bool BBIECHILMPI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: BBIECHILMPI and: EKCACJLABKI
    char __padding13[0x3] = {};
    // private System.Single EKCACJLABKI
    // Size: 0x4
    // Offset: 0x7C
    float EKCACJLABKI;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single APIDJMHJILI
    // Size: 0x4
    // Offset: 0x80
    float APIDJMHJILI;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single EKIJDEHLIJB
    // Size: 0x4
    // Offset: 0x84
    float EKIJDEHLIJB;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single BGKLNOMANPF
    // Size: 0x4
    // Offset: 0x88
    float BGKLNOMANPF;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean HKIEFJCNGOO
    // Size: 0x1
    // Offset: 0x8C
    bool HKIEFJCNGOO;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public MagicalActual.HandleController/CooldownType cooldownType
    [[deprecated("Use field access instead!")]] ::MagicalActual::HandleController::CooldownType& dyn_cooldownType();
    // Get instance field reference: public System.Single defaultCooldown
    [[deprecated("Use field access instead!")]] float& dyn_defaultCooldown();
    // Get instance field reference: public System.Boolean isPlayerInteractable
    [[deprecated("Use field access instead!")]] bool& dyn_isPlayerInteractable();
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: private MagicalActual.NetEntity IJJGNKLFGJN
    [[deprecated("Use field access instead!")]] ::MagicalActual::NetEntity*& dyn_IJJGNKLFGJN();
    // Get instance field reference: private UnityEngine.Transform handleTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_handleTransform();
    // Get instance field reference: private UnityEngine.Transform hinge
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_hinge();
    // Get instance field reference: private System.Single angleDistanceToTrigger
    [[deprecated("Use field access instead!")]] float& dyn_angleDistanceToTrigger();
    // Get instance field reference: public UnityEngine.Events.UnityEvent OnHandleTriggered
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_OnHandleTriggered();
    // Get instance field reference: public MagicalActual.HandleMovedEvent OnHandleMoved
    [[deprecated("Use field access instead!")]] ::MagicalActual::HandleMovedEvent*& dyn_OnHandleMoved();
    // Get instance field reference: private MagicalActual.Grabber CLHMLLOPNJM
    [[deprecated("Use field access instead!")]] ::MagicalActual::Grabber*& dyn_CLHMLLOPNJM();
    // Get instance field reference: private UnityEngine.Vector3 NIMBDKNEPOK
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_NIMBDKNEPOK();
    // Get instance field reference: private System.Single DKFENFBLLCP
    [[deprecated("Use field access instead!")]] float& dyn_DKFENFBLLCP();
    // Get instance field reference: private System.Boolean BBIECHILMPI
    [[deprecated("Use field access instead!")]] bool& dyn_BBIECHILMPI();
    // Get instance field reference: private System.Single EKCACJLABKI
    [[deprecated("Use field access instead!")]] float& dyn_EKCACJLABKI();
    // Get instance field reference: private System.Single APIDJMHJILI
    [[deprecated("Use field access instead!")]] float& dyn_APIDJMHJILI();
    // Get instance field reference: private System.Single EKIJDEHLIJB
    [[deprecated("Use field access instead!")]] float& dyn_EKIJDEHLIJB();
    // Get instance field reference: private System.Single BGKLNOMANPF
    [[deprecated("Use field access instead!")]] float& dyn_BGKLNOMANPF();
    // Get instance field reference: private System.Boolean HKIEFJCNGOO
    [[deprecated("Use field access instead!")]] bool& dyn_HKIEFJCNGOO();
    // private System.Void FBDBGKLFFOI()
    // Offset: 0x1880128
    void FBDBGKLFFOI();
    // private System.Void INJNMDOBFOI()
    // Offset: 0x18809F4
    void INJNMDOBFOI();
    // public System.Void JGALCCBBKDN(UnityEngine.GameObject FOIEAOKBGLM)
    // Offset: 0x1880DE4
    void JGALCCBBKDN(::UnityEngine::GameObject* FOIEAOKBGLM);
    // private System.Void BCGPJGOOKKN(System.Single PBEBICPLBOE)
    // Offset: 0x18808D4
    void BCGPJGOOKKN(float PBEBICPLBOE);
    // private System.Void IAKEGBCBKFM(System.Single OCOHAOIFMHC)
    // Offset: 0x1880668
    void IAKEGBCBKFM(float OCOHAOIFMHC);
    // private System.Void MIMNJDLAAPM(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x1881060
    void MIMNJDLAAPM(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void MPKBAGHGACI(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x1881144
    void MPKBAGHGACI(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void DPDHPGNHJHC(System.Single PBEBICPLBOE)
    // Offset: 0x188096C
    void DPDHPGNHJHC(float PBEBICPLBOE);
    // public System.Void IIJIPDHNMPC(UnityEngine.GameObject FOIEAOKBGLM)
    // Offset: 0x18812F8
    void IIJIPDHNMPC(::UnityEngine::GameObject* FOIEAOKBGLM);
    // public System.Void HandleTriggered(System.Boolean AMILMHKPFAL)
    // Offset: 0x1881220
    void HandleTriggered(bool AMILMHKPFAL);
    // private System.Single IALCEKPMMBB(MagicalActual.Grabber BALIAOKIHIC)
    // Offset: 0x1880498
    float IALCEKPMMBB(::MagicalActual::Grabber* BALIAOKIHIC);
    // public System.Void .ctor()
    // Offset: 0x1881678
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandleController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::HandleController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandleController*, creationType>()));
    }
    // public System.Void orbusNetInit(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x18816F4
    void orbusNetInit(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void NGDLHIFFIBG(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x188186C
    void NGDLHIFFIBG(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void Update()
    // Offset: 0x1881948
    void Update();
    // public System.Void doUnGripInteraction(UnityEngine.GameObject FOIEAOKBGLM)
    // Offset: 0x1881D28
    void doUnGripInteraction(::UnityEngine::GameObject* FOIEAOKBGLM);
    // public System.Void doGripInteraction(UnityEngine.GameObject FOIEAOKBGLM)
    // Offset: 0x1881E4C
    void doGripInteraction(::UnityEngine::GameObject* FOIEAOKBGLM);
    // private System.Void LPLGKBGLPOK()
    // Offset: 0x1881F44
    void LPLGKBGLPOK();
    // private System.Void IBADKFLMEPH(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x1881FA0
    void IBADKFLMEPH(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void CHMDIDLFIFF(System.Single PBEBICPLBOE)
    // Offset: 0x1881CA0
    void CHMDIDLFIFF(float PBEBICPLBOE);
    // private System.Single PGOFDEFNJEI(MagicalActual.Grabber BALIAOKIHIC)
    // Offset: 0x1882084
    float PGOFDEFNJEI(::MagicalActual::Grabber* BALIAOKIHIC);
    // private System.Void JJNHCABMBIH()
    // Offset: 0x188225C
    void JJNHCABMBIH();
    // private System.Void PNKHLJDEJNA()
    // Offset: 0x18825CC
    void PNKHLJDEJNA();
    // private System.Void CMPJBMKMIOC(System.Boolean FHGBDLJDJCM)
    // Offset: 0x188189C
    void CMPJBMKMIOC(bool FHGBDLJDJCM);
    // private System.Void HDPLKMIHKKE(System.Single PBEBICPLBOE)
    // Offset: 0x1880D5C
    void HDPLKMIHKKE(float PBEBICPLBOE);
    // private System.Void PAOCDEAGGOE(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x188293C
    void PAOCDEAGGOE(::System::Collections::ArrayList* HPEANAHIBAH);
    // private System.Void IDBDJLICDEE(System.Collections.ArrayList HPEANAHIBAH)
    // Offset: 0x1882964
    void IDBDJLICDEE(::System::Collections::ArrayList* HPEANAHIBAH);
    // public System.Void MPAEJMIIJMB(UnityEngine.GameObject FOIEAOKBGLM)
    // Offset: 0x1882994
    void MPAEJMIIJMB(::UnityEngine::GameObject* FOIEAOKBGLM);
    // public System.Void HHGGDBHKFID(System.Boolean AMILMHKPFAL)
    // Offset: 0x1880790
    void HHGGDBHKFID(bool AMILMHKPFAL);
    // public System.Void LLDJMDLDGMD(UnityEngine.GameObject FOIEAOKBGLM)
    // Offset: 0x1882A8C
    void LLDJMDLDGMD(::UnityEngine::GameObject* FOIEAOKBGLM);
    // private System.Void NLNFBMMNFLP(System.Single PBEBICPLBOE)
    // Offset: 0x1880868
    void NLNFBMMNFLP(float PBEBICPLBOE);
    // private System.Void NJKMGGDNBIA(System.Boolean FHGBDLJDJCM)
    // Offset: 0x18815CC
    void NJKMGGDNBIA(bool FHGBDLJDJCM);
    // private System.Void KMGFEJABDEF(System.Single OCOHAOIFMHC)
    // Offset: 0x1880F08
    void KMGFEJABDEF(float OCOHAOIFMHC);
    // private System.Single GLIENBLCAHK(MagicalActual.Grabber BALIAOKIHIC)
    // Offset: 0x18813F0
    float GLIENBLCAHK(::MagicalActual::Grabber* BALIAOKIHIC);
    // private System.Void DPDDNOBAFIP()
    // Offset: 0x1882BB0
    void DPDDNOBAFIP();
    // private System.Void FMCFFLJCCCP()
    // Offset: 0x1882F20
    void FMCFFLJCCCP();
    // private System.Void Start()
    // Offset: 0x1883290
    void Start();
  }; // MagicalActual.HandleController
  #pragma pack(pop)
  static check_size<sizeof(HandleController), 140 + sizeof(bool)> __MagicalActual_HandleControllerSizeCheck;
  static_assert(sizeof(HandleController) == 0x8D);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::HandleController::CooldownType, "MagicalActual", "HandleController/CooldownType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::HandleController::FBDBGKLFFOI
// Il2CppName: FBDBGKLFFOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)()>(&MagicalActual::HandleController::FBDBGKLFFOI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "FBDBGKLFFOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::INJNMDOBFOI
// Il2CppName: INJNMDOBFOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)()>(&MagicalActual::HandleController::INJNMDOBFOI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "INJNMDOBFOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::JGALCCBBKDN
// Il2CppName: JGALCCBBKDN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(::UnityEngine::GameObject*)>(&MagicalActual::HandleController::JGALCCBBKDN)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "JGALCCBBKDN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::BCGPJGOOKKN
// Il2CppName: BCGPJGOOKKN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(float)>(&MagicalActual::HandleController::BCGPJGOOKKN)> {
  static const MethodInfo* get() {
    static auto* PBEBICPLBOE = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "BCGPJGOOKKN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{PBEBICPLBOE});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::IAKEGBCBKFM
// Il2CppName: IAKEGBCBKFM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(float)>(&MagicalActual::HandleController::IAKEGBCBKFM)> {
  static const MethodInfo* get() {
    static auto* OCOHAOIFMHC = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "IAKEGBCBKFM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OCOHAOIFMHC});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::MIMNJDLAAPM
// Il2CppName: MIMNJDLAAPM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(::System::Collections::ArrayList*)>(&MagicalActual::HandleController::MIMNJDLAAPM)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "MIMNJDLAAPM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::MPKBAGHGACI
// Il2CppName: MPKBAGHGACI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(::System::Collections::ArrayList*)>(&MagicalActual::HandleController::MPKBAGHGACI)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "MPKBAGHGACI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::DPDHPGNHJHC
// Il2CppName: DPDHPGNHJHC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(float)>(&MagicalActual::HandleController::DPDHPGNHJHC)> {
  static const MethodInfo* get() {
    static auto* PBEBICPLBOE = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "DPDHPGNHJHC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{PBEBICPLBOE});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::IIJIPDHNMPC
// Il2CppName: IIJIPDHNMPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(::UnityEngine::GameObject*)>(&MagicalActual::HandleController::IIJIPDHNMPC)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "IIJIPDHNMPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::HandleTriggered
// Il2CppName: HandleTriggered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(bool)>(&MagicalActual::HandleController::HandleTriggered)> {
  static const MethodInfo* get() {
    static auto* AMILMHKPFAL = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "HandleTriggered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AMILMHKPFAL});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::IALCEKPMMBB
// Il2CppName: IALCEKPMMBB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MagicalActual::HandleController::*)(::MagicalActual::Grabber*)>(&MagicalActual::HandleController::IALCEKPMMBB)> {
  static const MethodInfo* get() {
    static auto* BALIAOKIHIC = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "IALCEKPMMBB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BALIAOKIHIC});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::HandleController::orbusNetInit
// Il2CppName: orbusNetInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(::MagicalActual::NetEntity*)>(&MagicalActual::HandleController::orbusNetInit)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "orbusNetInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::NGDLHIFFIBG
// Il2CppName: NGDLHIFFIBG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(::System::Collections::ArrayList*)>(&MagicalActual::HandleController::NGDLHIFFIBG)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "NGDLHIFFIBG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)()>(&MagicalActual::HandleController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::doUnGripInteraction
// Il2CppName: doUnGripInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(::UnityEngine::GameObject*)>(&MagicalActual::HandleController::doUnGripInteraction)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "doUnGripInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::doGripInteraction
// Il2CppName: doGripInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(::UnityEngine::GameObject*)>(&MagicalActual::HandleController::doGripInteraction)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "doGripInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::LPLGKBGLPOK
// Il2CppName: LPLGKBGLPOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)()>(&MagicalActual::HandleController::LPLGKBGLPOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "LPLGKBGLPOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::IBADKFLMEPH
// Il2CppName: IBADKFLMEPH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(::System::Collections::ArrayList*)>(&MagicalActual::HandleController::IBADKFLMEPH)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "IBADKFLMEPH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::CHMDIDLFIFF
// Il2CppName: CHMDIDLFIFF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(float)>(&MagicalActual::HandleController::CHMDIDLFIFF)> {
  static const MethodInfo* get() {
    static auto* PBEBICPLBOE = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "CHMDIDLFIFF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{PBEBICPLBOE});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::PGOFDEFNJEI
// Il2CppName: PGOFDEFNJEI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MagicalActual::HandleController::*)(::MagicalActual::Grabber*)>(&MagicalActual::HandleController::PGOFDEFNJEI)> {
  static const MethodInfo* get() {
    static auto* BALIAOKIHIC = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "PGOFDEFNJEI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BALIAOKIHIC});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::JJNHCABMBIH
// Il2CppName: JJNHCABMBIH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)()>(&MagicalActual::HandleController::JJNHCABMBIH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "JJNHCABMBIH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::PNKHLJDEJNA
// Il2CppName: PNKHLJDEJNA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)()>(&MagicalActual::HandleController::PNKHLJDEJNA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "PNKHLJDEJNA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::CMPJBMKMIOC
// Il2CppName: CMPJBMKMIOC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(bool)>(&MagicalActual::HandleController::CMPJBMKMIOC)> {
  static const MethodInfo* get() {
    static auto* FHGBDLJDJCM = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "CMPJBMKMIOC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FHGBDLJDJCM});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::HDPLKMIHKKE
// Il2CppName: HDPLKMIHKKE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(float)>(&MagicalActual::HandleController::HDPLKMIHKKE)> {
  static const MethodInfo* get() {
    static auto* PBEBICPLBOE = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "HDPLKMIHKKE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{PBEBICPLBOE});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::PAOCDEAGGOE
// Il2CppName: PAOCDEAGGOE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(::System::Collections::ArrayList*)>(&MagicalActual::HandleController::PAOCDEAGGOE)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "PAOCDEAGGOE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::IDBDJLICDEE
// Il2CppName: IDBDJLICDEE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(::System::Collections::ArrayList*)>(&MagicalActual::HandleController::IDBDJLICDEE)> {
  static const MethodInfo* get() {
    static auto* HPEANAHIBAH = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "IDBDJLICDEE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{HPEANAHIBAH});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::MPAEJMIIJMB
// Il2CppName: MPAEJMIIJMB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(::UnityEngine::GameObject*)>(&MagicalActual::HandleController::MPAEJMIIJMB)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "MPAEJMIIJMB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::HHGGDBHKFID
// Il2CppName: HHGGDBHKFID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(bool)>(&MagicalActual::HandleController::HHGGDBHKFID)> {
  static const MethodInfo* get() {
    static auto* AMILMHKPFAL = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "HHGGDBHKFID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{AMILMHKPFAL});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::LLDJMDLDGMD
// Il2CppName: LLDJMDLDGMD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(::UnityEngine::GameObject*)>(&MagicalActual::HandleController::LLDJMDLDGMD)> {
  static const MethodInfo* get() {
    static auto* FOIEAOKBGLM = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "LLDJMDLDGMD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FOIEAOKBGLM});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::NLNFBMMNFLP
// Il2CppName: NLNFBMMNFLP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(float)>(&MagicalActual::HandleController::NLNFBMMNFLP)> {
  static const MethodInfo* get() {
    static auto* PBEBICPLBOE = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "NLNFBMMNFLP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{PBEBICPLBOE});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::NJKMGGDNBIA
// Il2CppName: NJKMGGDNBIA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(bool)>(&MagicalActual::HandleController::NJKMGGDNBIA)> {
  static const MethodInfo* get() {
    static auto* FHGBDLJDJCM = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "NJKMGGDNBIA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{FHGBDLJDJCM});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::KMGFEJABDEF
// Il2CppName: KMGFEJABDEF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)(float)>(&MagicalActual::HandleController::KMGFEJABDEF)> {
  static const MethodInfo* get() {
    static auto* OCOHAOIFMHC = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "KMGFEJABDEF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OCOHAOIFMHC});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::GLIENBLCAHK
// Il2CppName: GLIENBLCAHK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MagicalActual::HandleController::*)(::MagicalActual::Grabber*)>(&MagicalActual::HandleController::GLIENBLCAHK)> {
  static const MethodInfo* get() {
    static auto* BALIAOKIHIC = &::il2cpp_utils::GetClassFromName("MagicalActual", "Grabber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "GLIENBLCAHK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BALIAOKIHIC});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::DPDDNOBAFIP
// Il2CppName: DPDDNOBAFIP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)()>(&MagicalActual::HandleController::DPDDNOBAFIP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "DPDDNOBAFIP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::FMCFFLJCCCP
// Il2CppName: FMCFFLJCCCP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)()>(&MagicalActual::HandleController::FMCFFLJCCCP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "FMCFFLJCCCP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::HandleController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::HandleController::*)()>(&MagicalActual::HandleController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::HandleController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
