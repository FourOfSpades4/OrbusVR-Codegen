// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: PegPuzzlePeg
  class PegPuzzlePeg;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::PegPuzzlePeg);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::PegPuzzlePeg*, "MagicalActual", "PegPuzzlePeg");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.PegPuzzlePeg
  // [TokenAttribute] Offset: FFFFFFFF
  class PegPuzzlePeg : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Int32 correctGearNumber
    // Size: 0x4
    // Offset: 0x18
    int correctGearNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Vector3 gearEulerRotation
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 gearEulerRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean isRunning
    // Size: 0x1
    // Offset: 0x28
    bool isRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isCorrect
    // Size: 0x1
    // Offset: 0x29
    bool isCorrect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isCorrect and: BHGNHHOEIMK
    char __padding3[0x2] = {};
    // private System.Single BHGNHHOEIMK
    // Size: 0x4
    // Offset: 0x2C
    float BHGNHHOEIMK;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single IDFMJNCAKDI
    // Size: 0x4
    // Offset: 0x30
    float IDFMJNCAKDI;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean JMMAOLKLDKF
    // Size: 0x1
    // Offset: 0x34
    bool JMMAOLKLDKF;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: JMMAOLKLDKF and: NKKJAAODBOF
    char __padding6[0x3] = {};
    // private UnityEngine.GameObject NKKJAAODBOF
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* NKKJAAODBOF;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Collider[] JGOGJDHABHN
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Collider*> JGOGJDHABHN;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private System.Single AFOJIKKNHMJ
    // Size: 0x4
    // Offset: 0x48
    float AFOJIKKNHMJ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 correctGearNumber
    [[deprecated("Use field access instead!")]] int& dyn_correctGearNumber();
    // Get instance field reference: public UnityEngine.Vector3 gearEulerRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_gearEulerRotation();
    // Get instance field reference: public System.Boolean isRunning
    [[deprecated("Use field access instead!")]] bool& dyn_isRunning();
    // Get instance field reference: public System.Boolean isCorrect
    [[deprecated("Use field access instead!")]] bool& dyn_isCorrect();
    // Get instance field reference: private System.Single BHGNHHOEIMK
    [[deprecated("Use field access instead!")]] float& dyn_BHGNHHOEIMK();
    // Get instance field reference: private System.Single IDFMJNCAKDI
    [[deprecated("Use field access instead!")]] float& dyn_IDFMJNCAKDI();
    // Get instance field reference: private System.Boolean JMMAOLKLDKF
    [[deprecated("Use field access instead!")]] bool& dyn_JMMAOLKLDKF();
    // Get instance field reference: private UnityEngine.GameObject NKKJAAODBOF
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_NKKJAAODBOF();
    // Get instance field reference: private UnityEngine.Collider[] JGOGJDHABHN
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_JGOGJDHABHN();
    // Get instance field reference: private System.Single AFOJIKKNHMJ
    [[deprecated("Use field access instead!")]] float& dyn_AFOJIKKNHMJ();
    // private System.Void JEIAGCBHHHI()
    // Offset: 0x22365A4
    void JEIAGCBHHHI();
    // private System.Void AGOBDBDGJKD()
    // Offset: 0x2236618
    void AGOBDBDGJKD();
    // private System.Void DEGCMEJJNJI()
    // Offset: 0x2236C58
    void DEGCMEJJNJI();
    // private System.Void DDJINHIPKCE()
    // Offset: 0x2236CB0
    void DDJINHIPKCE();
    // private System.Void Start()
    // Offset: 0x2237330
    void Start();
    // private System.Void AMIPIMKIJMO()
    // Offset: 0x2237388
    void AMIPIMKIJMO();
    // private System.Void FBDBGKLFFOI()
    // Offset: 0x2237A0C
    void FBDBGKLFFOI();
    // private System.Void EFEDNMKDDGH()
    // Offset: 0x2237A80
    void EFEDNMKDDGH();
    // private System.Void NEDFCIDMJBB()
    // Offset: 0x22380C4
    void NEDFCIDMJBB();
    // private System.Void EMIJIIFBDLM()
    // Offset: 0x223811C
    void EMIJIIFBDLM();
    // private System.Void FIJGCHFAFHN()
    // Offset: 0x223877C
    void FIJGCHFAFHN();
    // private System.Void AFIACGLCIPB()
    // Offset: 0x2238898
    void AFIACGLCIPB();
    // private System.Void JNHNEBOHOIB()
    // Offset: 0x22388F0
    void JNHNEBOHOIB();
    // private System.Void BPEFOMJJHKO()
    // Offset: 0x2238948
    void BPEFOMJJHKO();
    // private System.Void EFLLEILOGJN()
    // Offset: 0x22389BC
    void EFLLEILOGJN();
    // private System.Void APIMIOELFAJ()
    // Offset: 0x2238A30
    void APIMIOELFAJ();
    // private System.Void JENOIOBAEPG()
    // Offset: 0x2238A88
    void JENOIOBAEPG();
    // private System.Void FixedUpdate()
    // Offset: 0x2238AE0
    void FixedUpdate();
    // private System.Void PBEMGGBBDCK()
    // Offset: 0x2239168
    void PBEMGGBBDCK();
    // private System.Void CHMCEGMCENL()
    // Offset: 0x22391C0
    void CHMCEGMCENL();
    // private System.Void MHHFAOGFAPO()
    // Offset: 0x2239230
    void MHHFAOGFAPO();
    // private System.Void FGGKEEKHDHN()
    // Offset: 0x22392A4
    void FGGKEEKHDHN();
    // private System.Void KBDGAPMJGLG()
    // Offset: 0x22393C0
    void KBDGAPMJGLG();
    // private System.Void DMNMEKAJBNA()
    // Offset: 0x2239418
    void DMNMEKAJBNA();
    // private System.Void IPKKJINNGAF()
    // Offset: 0x2239488
    void IPKKJINNGAF();
    // private System.Void PFABJJGAOMM()
    // Offset: 0x2239B20
    void PFABJJGAOMM();
    // private System.Void ANKCGGIBCAI()
    // Offset: 0x2239B78
    void ANKCGGIBCAI();
    // private System.Void INJNMDOBFOI()
    // Offset: 0x223A220
    void INJNMDOBFOI();
    // private System.Void LLBAENEGEMN()
    // Offset: 0x223A294
    void LLBAENEGEMN();
    // private System.Void JJNHCABMBIH()
    // Offset: 0x223A3B4
    void JJNHCABMBIH();
    // private System.Void Update()
    // Offset: 0x223A428
    void Update();
    // private System.Void IDOCJGNLNFL()
    // Offset: 0x223A490
    void IDOCJGNLNFL();
    // private System.Void CAHEKCFLDHP()
    // Offset: 0x223A4E8
    void CAHEKCFLDHP();
    // private System.Void AKGFEENGKJD()
    // Offset: 0x223AB24
    void AKGFEENGKJD();
    // private System.Void HKINNMLBMMG()
    // Offset: 0x223AB7C
    void HKINNMLBMMG();
    // private System.Void MJKAGCAKHHO()
    // Offset: 0x223ABD4
    void MJKAGCAKHHO();
    // private System.Void DGJGAFKDIDK()
    // Offset: 0x223AC48
    void DGJGAFKDIDK();
    // private System.Void FLJMJKAKNBH()
    // Offset: 0x223ACA0
    void FLJMJKAKNBH();
    // private System.Void GKIOLADOCOK()
    // Offset: 0x223ADBC
    void GKIOLADOCOK();
    // private System.Void PKLDGKBPOAP()
    // Offset: 0x223AE14
    void PKLDGKBPOAP();
    // public System.Void .ctor()
    // Offset: 0x223AE88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PegPuzzlePeg* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::PegPuzzlePeg::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PegPuzzlePeg*, creationType>()));
    }
    // private System.Void FMCFFLJCCCP()
    // Offset: 0x223AEF8
    void FMCFFLJCCCP();
  }; // MagicalActual.PegPuzzlePeg
  #pragma pack(pop)
  static check_size<sizeof(PegPuzzlePeg), 72 + sizeof(float)> __MagicalActual_PegPuzzlePegSizeCheck;
  static_assert(sizeof(PegPuzzlePeg) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::JEIAGCBHHHI
// Il2CppName: JEIAGCBHHHI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::JEIAGCBHHHI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "JEIAGCBHHHI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::AGOBDBDGJKD
// Il2CppName: AGOBDBDGJKD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::AGOBDBDGJKD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "AGOBDBDGJKD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::DEGCMEJJNJI
// Il2CppName: DEGCMEJJNJI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::DEGCMEJJNJI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "DEGCMEJJNJI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::DDJINHIPKCE
// Il2CppName: DDJINHIPKCE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::DDJINHIPKCE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "DDJINHIPKCE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::AMIPIMKIJMO
// Il2CppName: AMIPIMKIJMO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::AMIPIMKIJMO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "AMIPIMKIJMO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::FBDBGKLFFOI
// Il2CppName: FBDBGKLFFOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::FBDBGKLFFOI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "FBDBGKLFFOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::EFEDNMKDDGH
// Il2CppName: EFEDNMKDDGH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::EFEDNMKDDGH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "EFEDNMKDDGH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::NEDFCIDMJBB
// Il2CppName: NEDFCIDMJBB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::NEDFCIDMJBB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "NEDFCIDMJBB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::EMIJIIFBDLM
// Il2CppName: EMIJIIFBDLM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::EMIJIIFBDLM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "EMIJIIFBDLM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::FIJGCHFAFHN
// Il2CppName: FIJGCHFAFHN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::FIJGCHFAFHN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "FIJGCHFAFHN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::AFIACGLCIPB
// Il2CppName: AFIACGLCIPB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::AFIACGLCIPB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "AFIACGLCIPB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::JNHNEBOHOIB
// Il2CppName: JNHNEBOHOIB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::JNHNEBOHOIB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "JNHNEBOHOIB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::BPEFOMJJHKO
// Il2CppName: BPEFOMJJHKO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::BPEFOMJJHKO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "BPEFOMJJHKO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::EFLLEILOGJN
// Il2CppName: EFLLEILOGJN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::EFLLEILOGJN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "EFLLEILOGJN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::APIMIOELFAJ
// Il2CppName: APIMIOELFAJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::APIMIOELFAJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "APIMIOELFAJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::JENOIOBAEPG
// Il2CppName: JENOIOBAEPG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::JENOIOBAEPG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "JENOIOBAEPG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::PBEMGGBBDCK
// Il2CppName: PBEMGGBBDCK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::PBEMGGBBDCK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "PBEMGGBBDCK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::CHMCEGMCENL
// Il2CppName: CHMCEGMCENL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::CHMCEGMCENL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "CHMCEGMCENL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::MHHFAOGFAPO
// Il2CppName: MHHFAOGFAPO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::MHHFAOGFAPO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "MHHFAOGFAPO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::FGGKEEKHDHN
// Il2CppName: FGGKEEKHDHN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::FGGKEEKHDHN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "FGGKEEKHDHN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::KBDGAPMJGLG
// Il2CppName: KBDGAPMJGLG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::KBDGAPMJGLG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "KBDGAPMJGLG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::DMNMEKAJBNA
// Il2CppName: DMNMEKAJBNA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::DMNMEKAJBNA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "DMNMEKAJBNA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::IPKKJINNGAF
// Il2CppName: IPKKJINNGAF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::IPKKJINNGAF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "IPKKJINNGAF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::PFABJJGAOMM
// Il2CppName: PFABJJGAOMM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::PFABJJGAOMM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "PFABJJGAOMM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::ANKCGGIBCAI
// Il2CppName: ANKCGGIBCAI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::ANKCGGIBCAI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "ANKCGGIBCAI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::INJNMDOBFOI
// Il2CppName: INJNMDOBFOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::INJNMDOBFOI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "INJNMDOBFOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::LLBAENEGEMN
// Il2CppName: LLBAENEGEMN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::LLBAENEGEMN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "LLBAENEGEMN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::JJNHCABMBIH
// Il2CppName: JJNHCABMBIH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::JJNHCABMBIH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "JJNHCABMBIH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::IDOCJGNLNFL
// Il2CppName: IDOCJGNLNFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::IDOCJGNLNFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "IDOCJGNLNFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::CAHEKCFLDHP
// Il2CppName: CAHEKCFLDHP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::CAHEKCFLDHP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "CAHEKCFLDHP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::AKGFEENGKJD
// Il2CppName: AKGFEENGKJD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::AKGFEENGKJD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "AKGFEENGKJD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::HKINNMLBMMG
// Il2CppName: HKINNMLBMMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::HKINNMLBMMG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "HKINNMLBMMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::MJKAGCAKHHO
// Il2CppName: MJKAGCAKHHO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::MJKAGCAKHHO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "MJKAGCAKHHO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::DGJGAFKDIDK
// Il2CppName: DGJGAFKDIDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::DGJGAFKDIDK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "DGJGAFKDIDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::FLJMJKAKNBH
// Il2CppName: FLJMJKAKNBH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::FLJMJKAKNBH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "FLJMJKAKNBH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::GKIOLADOCOK
// Il2CppName: GKIOLADOCOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::GKIOLADOCOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "GKIOLADOCOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::PKLDGKBPOAP
// Il2CppName: PKLDGKBPOAP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::PKLDGKBPOAP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "PKLDGKBPOAP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::PegPuzzlePeg::FMCFFLJCCCP
// Il2CppName: FMCFFLJCCCP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::PegPuzzlePeg::*)()>(&MagicalActual::PegPuzzlePeg::FMCFFLJCCCP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::PegPuzzlePeg*), "FMCFFLJCCCP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
