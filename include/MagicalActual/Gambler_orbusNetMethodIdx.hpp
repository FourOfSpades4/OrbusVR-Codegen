// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MagicalActual.Gambler
#include "MagicalActual/Gambler.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::Gambler::orbusNetMethodIdx, "MagicalActual", "Gambler/orbusNetMethodIdx");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.Gambler/orbusNetMethodIdx
  // [TokenAttribute] Offset: FFFFFFFF
  struct Gambler::orbusNetMethodIdx/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: orbusNetMethodIdx
    constexpr orbusNetMethodIdx(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public MagicalActual.Gambler/orbusNetMethodIdx HICIDJAPJHG
    static constexpr const int HICIDJAPJHG = 1;
    // Get static field: static public MagicalActual.Gambler/orbusNetMethodIdx HICIDJAPJHG
    static ::MagicalActual::Gambler::orbusNetMethodIdx _get_HICIDJAPJHG();
    // Set static field: static public MagicalActual.Gambler/orbusNetMethodIdx HICIDJAPJHG
    static void _set_HICIDJAPJHG(::MagicalActual::Gambler::orbusNetMethodIdx value);
    // static field const value: static public MagicalActual.Gambler/orbusNetMethodIdx DDGBIENNLKJ
    static constexpr const int DDGBIENNLKJ = 2;
    // Get static field: static public MagicalActual.Gambler/orbusNetMethodIdx DDGBIENNLKJ
    static ::MagicalActual::Gambler::orbusNetMethodIdx _get_DDGBIENNLKJ();
    // Set static field: static public MagicalActual.Gambler/orbusNetMethodIdx DDGBIENNLKJ
    static void _set_DDGBIENNLKJ(::MagicalActual::Gambler::orbusNetMethodIdx value);
    // static field const value: static public MagicalActual.Gambler/orbusNetMethodIdx DBDNDCOEBGF
    static constexpr const int DBDNDCOEBGF = 3;
    // Get static field: static public MagicalActual.Gambler/orbusNetMethodIdx DBDNDCOEBGF
    static ::MagicalActual::Gambler::orbusNetMethodIdx _get_DBDNDCOEBGF();
    // Set static field: static public MagicalActual.Gambler/orbusNetMethodIdx DBDNDCOEBGF
    static void _set_DBDNDCOEBGF(::MagicalActual::Gambler::orbusNetMethodIdx value);
    // static field const value: static public MagicalActual.Gambler/orbusNetMethodIdx LOBCBJFGFDL
    static constexpr const int LOBCBJFGFDL = 4;
    // Get static field: static public MagicalActual.Gambler/orbusNetMethodIdx LOBCBJFGFDL
    static ::MagicalActual::Gambler::orbusNetMethodIdx _get_LOBCBJFGFDL();
    // Set static field: static public MagicalActual.Gambler/orbusNetMethodIdx LOBCBJFGFDL
    static void _set_LOBCBJFGFDL(::MagicalActual::Gambler::orbusNetMethodIdx value);
    // static field const value: static public MagicalActual.Gambler/orbusNetMethodIdx LGOADGAONEK
    static constexpr const int LGOADGAONEK = 5;
    // Get static field: static public MagicalActual.Gambler/orbusNetMethodIdx LGOADGAONEK
    static ::MagicalActual::Gambler::orbusNetMethodIdx _get_LGOADGAONEK();
    // Set static field: static public MagicalActual.Gambler/orbusNetMethodIdx LGOADGAONEK
    static void _set_LGOADGAONEK(::MagicalActual::Gambler::orbusNetMethodIdx value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // MagicalActual.Gambler/orbusNetMethodIdx
  #pragma pack(pop)
  static check_size<sizeof(Gambler::orbusNetMethodIdx), 0 + sizeof(int)> __MagicalActual_Gambler_orbusNetMethodIdxSizeCheck;
  static_assert(sizeof(Gambler::orbusNetMethodIdx) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
