// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: SpawnManager
  class SpawnManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::SpawnManager);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::SpawnManager*, "MagicalActual", "SpawnManager");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.SpawnManager
  // [TokenAttribute] Offset: FFFFFFFF
  class SpawnManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.String[] groupings
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::StringW> groupings;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // [TooltipAttribute] Offset: 0xAE4E90
    // public System.Single respawnAfterSeconds
    // Size: 0x4
    // Offset: 0x20
    float respawnAfterSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxGroups
    // Size: 0x4
    // Offset: 0x24
    float maxGroups;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.String zoneVariables
    // Size: 0x8
    // Offset: 0x28
    ::StringW zoneVariables;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x30
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String lootTable
    // Size: 0x8
    // Offset: 0x38
    ::StringW lootTable;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String requiredPlayerQuestFlag
    // Size: 0x8
    // Offset: 0x40
    ::StringW requiredPlayerQuestFlag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean autoSpawning
    // Size: 0x1
    // Offset: 0x48
    bool autoSpawning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String[] groupings
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_groupings();
    // Get instance field reference: public System.Single respawnAfterSeconds
    [[deprecated("Use field access instead!")]] float& dyn_respawnAfterSeconds();
    // Get instance field reference: public System.Single maxGroups
    [[deprecated("Use field access instead!")]] float& dyn_maxGroups();
    // Get instance field reference: public System.String zoneVariables
    [[deprecated("Use field access instead!")]] ::StringW& dyn_zoneVariables();
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: public System.String lootTable
    [[deprecated("Use field access instead!")]] ::StringW& dyn_lootTable();
    // Get instance field reference: public System.String requiredPlayerQuestFlag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_requiredPlayerQuestFlag();
    // Get instance field reference: public System.Boolean autoSpawning
    [[deprecated("Use field access instead!")]] bool& dyn_autoSpawning();
    // public System.Void .ctor()
    // Offset: 0x1082A70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpawnManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::SpawnManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpawnManager*, creationType>()));
    }
  }; // MagicalActual.SpawnManager
  #pragma pack(pop)
  static check_size<sizeof(SpawnManager), 72 + sizeof(bool)> __MagicalActual_SpawnManagerSizeCheck;
  static_assert(sizeof(SpawnManager) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::SpawnManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
