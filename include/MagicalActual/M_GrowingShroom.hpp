// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Monster
  class Monster;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: M_GrowingShroom
  class M_GrowingShroom;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::M_GrowingShroom);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::M_GrowingShroom*, "MagicalActual", "M_GrowingShroom");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.M_GrowingShroom
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD4648
  class M_GrowingShroom : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MagicalActual.Monster BIIBEOELIHH
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::Monster* BIIBEOELIHH;
    // Field size check
    static_assert(sizeof(::MagicalActual::Monster*) == 0x8);
    // public UnityEngine.GameObject vfxExplode
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* vfxExplode;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject scaler
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* scaler;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x30
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean BMJGIFPKLDO
    // Size: 0x1
    // Offset: 0x38
    bool BMJGIFPKLDO;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MagicalActual.Monster BIIBEOELIHH
    [[deprecated("Use field access instead!")]] ::MagicalActual::Monster*& dyn_BIIBEOELIHH();
    // Get instance field reference: public UnityEngine.GameObject vfxExplode
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_vfxExplode();
    // Get instance field reference: public UnityEngine.GameObject scaler
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_scaler();
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: private System.Boolean BMJGIFPKLDO
    [[deprecated("Use field access instead!")]] bool& dyn_BMJGIFPKLDO();
    // public System.Void GBFGNCOICEK()
    // Offset: 0x242DF2C
    void GBFGNCOICEK();
    // public System.Void FPCPEJBMEOF()
    // Offset: 0x242E0BC
    void FPCPEJBMEOF();
    // public System.Void PNGJLHALFJH()
    // Offset: 0x242E248
    void PNGJLHALFJH();
    // public System.Void KMCKNPFEBBG()
    // Offset: 0x242E3D8
    void KMCKNPFEBBG();
    // private System.Void IDOCJGNLNFL()
    // Offset: 0x242E568
    void IDOCJGNLNFL();
    // public System.Void IMMNFIIOEGC()
    // Offset: 0x242E5C0
    void IMMNFIIOEGC();
    // public System.Void JFACPMMLICE()
    // Offset: 0x242E750
    void JFACPMMLICE();
    // private System.Void LBIKOKCCILF()
    // Offset: 0x242E8DC
    void LBIKOKCCILF();
    // public System.Void MonsterDeath()
    // Offset: 0x242E934
    void MonsterDeath();
    // public System.Void DCPEGCDKFOJ()
    // Offset: 0x242EAC0
    void DCPEGCDKFOJ();
    // public System.Void LNICPJBGLOH()
    // Offset: 0x242EC50
    void LNICPJBGLOH();
    // private System.Void IPIFMKAGODD()
    // Offset: 0x242EDE0
    void IPIFMKAGODD();
    // private System.Void NNDKJCJFIAK()
    // Offset: 0x242EE38
    void NNDKJCJFIAK();
    // public System.Void KBLCHJGCHFG()
    // Offset: 0x242EE90
    void KBLCHJGCHFG();
    // public System.Void CDDLMEDOEDL()
    // Offset: 0x242F020
    void CDDLMEDOEDL();
    // private System.Void DGJGAFKDIDK()
    // Offset: 0x242F1AC
    void DGJGAFKDIDK();
    // public System.Void BCKHDMEFHBJ()
    // Offset: 0x242F204
    void BCKHDMEFHBJ();
    // private System.Void EIIKFEMCNKM()
    // Offset: 0x242F394
    void EIIKFEMCNKM();
    // public System.Void NIJAFODNDKE()
    // Offset: 0x242F3EC
    void NIJAFODNDKE();
    // public System.Void OKOKNIMANJN()
    // Offset: 0x242F574
    void OKOKNIMANJN();
    // public System.Void COHGCNKNKNA()
    // Offset: 0x242F704
    void COHGCNKNKNA();
    // public System.Void .ctor()
    // Offset: 0x242F890
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static M_GrowingShroom* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::M_GrowingShroom::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<M_GrowingShroom*, creationType>()));
    }
    // public System.Void GAEIKHOHMAK()
    // Offset: 0x242F8E8
    void GAEIKHOHMAK();
    // private System.Void LPLGKBGLPOK()
    // Offset: 0x242FA78
    void LPLGKBGLPOK();
    // private System.Void MLGBKBMHHLE()
    // Offset: 0x242FAD0
    void MLGBKBMHHLE();
    // private System.Void FNGLOIECKDG()
    // Offset: 0x242FB28
    void FNGLOIECKDG();
    // private System.Void Start()
    // Offset: 0x242FB80
    void Start();
    // private System.Void EPCHNEGNKNF()
    // Offset: 0x242FBD8
    void EPCHNEGNKNF();
    // private System.Void BDEDGNGMHMN()
    // Offset: 0x242FC30
    void BDEDGNGMHMN();
  }; // MagicalActual.M_GrowingShroom
  #pragma pack(pop)
  static check_size<sizeof(M_GrowingShroom), 56 + sizeof(bool)> __MagicalActual_M_GrowingShroomSizeCheck;
  static_assert(sizeof(M_GrowingShroom) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::GBFGNCOICEK
// Il2CppName: GBFGNCOICEK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::GBFGNCOICEK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "GBFGNCOICEK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::FPCPEJBMEOF
// Il2CppName: FPCPEJBMEOF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::FPCPEJBMEOF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "FPCPEJBMEOF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::PNGJLHALFJH
// Il2CppName: PNGJLHALFJH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::PNGJLHALFJH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "PNGJLHALFJH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::KMCKNPFEBBG
// Il2CppName: KMCKNPFEBBG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::KMCKNPFEBBG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "KMCKNPFEBBG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::IDOCJGNLNFL
// Il2CppName: IDOCJGNLNFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::IDOCJGNLNFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "IDOCJGNLNFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::IMMNFIIOEGC
// Il2CppName: IMMNFIIOEGC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::IMMNFIIOEGC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "IMMNFIIOEGC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::JFACPMMLICE
// Il2CppName: JFACPMMLICE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::JFACPMMLICE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "JFACPMMLICE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::LBIKOKCCILF
// Il2CppName: LBIKOKCCILF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::LBIKOKCCILF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "LBIKOKCCILF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::MonsterDeath
// Il2CppName: MonsterDeath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::MonsterDeath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "MonsterDeath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::DCPEGCDKFOJ
// Il2CppName: DCPEGCDKFOJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::DCPEGCDKFOJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "DCPEGCDKFOJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::LNICPJBGLOH
// Il2CppName: LNICPJBGLOH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::LNICPJBGLOH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "LNICPJBGLOH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::IPIFMKAGODD
// Il2CppName: IPIFMKAGODD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::IPIFMKAGODD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "IPIFMKAGODD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::NNDKJCJFIAK
// Il2CppName: NNDKJCJFIAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::NNDKJCJFIAK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "NNDKJCJFIAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::KBLCHJGCHFG
// Il2CppName: KBLCHJGCHFG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::KBLCHJGCHFG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "KBLCHJGCHFG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::CDDLMEDOEDL
// Il2CppName: CDDLMEDOEDL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::CDDLMEDOEDL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "CDDLMEDOEDL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::DGJGAFKDIDK
// Il2CppName: DGJGAFKDIDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::DGJGAFKDIDK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "DGJGAFKDIDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::BCKHDMEFHBJ
// Il2CppName: BCKHDMEFHBJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::BCKHDMEFHBJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "BCKHDMEFHBJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::EIIKFEMCNKM
// Il2CppName: EIIKFEMCNKM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::EIIKFEMCNKM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "EIIKFEMCNKM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::NIJAFODNDKE
// Il2CppName: NIJAFODNDKE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::NIJAFODNDKE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "NIJAFODNDKE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::OKOKNIMANJN
// Il2CppName: OKOKNIMANJN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::OKOKNIMANJN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "OKOKNIMANJN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::COHGCNKNKNA
// Il2CppName: COHGCNKNKNA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::COHGCNKNKNA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "COHGCNKNKNA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::GAEIKHOHMAK
// Il2CppName: GAEIKHOHMAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::GAEIKHOHMAK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "GAEIKHOHMAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::LPLGKBGLPOK
// Il2CppName: LPLGKBGLPOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::LPLGKBGLPOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "LPLGKBGLPOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::MLGBKBMHHLE
// Il2CppName: MLGBKBMHHLE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::MLGBKBMHHLE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "MLGBKBMHHLE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::FNGLOIECKDG
// Il2CppName: FNGLOIECKDG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::FNGLOIECKDG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "FNGLOIECKDG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::EPCHNEGNKNF
// Il2CppName: EPCHNEGNKNF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::EPCHNEGNKNF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "EPCHNEGNKNF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_GrowingShroom::BDEDGNGMHMN
// Il2CppName: BDEDGNGMHMN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_GrowingShroom::*)()>(&MagicalActual::M_GrowingShroom::BDEDGNGMHMN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_GrowingShroom*), "BDEDGNGMHMN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
