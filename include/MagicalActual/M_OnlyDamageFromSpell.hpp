// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Monster
  class Monster;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: M_OnlyDamageFromSpell
  class M_OnlyDamageFromSpell;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::M_OnlyDamageFromSpell);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::M_OnlyDamageFromSpell*, "MagicalActual", "M_OnlyDamageFromSpell");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.M_OnlyDamageFromSpell
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: AD483C
  class M_OnlyDamageFromSpell : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MagicalActual.Monster BIIBEOELIHH
    // Size: 0x8
    // Offset: 0x18
    ::MagicalActual::Monster* BIIBEOELIHH;
    // Field size check
    static_assert(sizeof(::MagicalActual::Monster*) == 0x8);
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x20
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String reactsToSpell
    // Size: 0x8
    // Offset: 0x28
    ::StringW reactsToSpell;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MagicalActual.Monster BIIBEOELIHH
    [[deprecated("Use field access instead!")]] ::MagicalActual::Monster*& dyn_BIIBEOELIHH();
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: public System.String reactsToSpell
    [[deprecated("Use field access instead!")]] ::StringW& dyn_reactsToSpell();
    // private System.Void EIIKFEMCNKM()
    // Offset: 0x2700C68
    void EIIKFEMCNKM();
    // private System.Void MLGBKBMHHLE()
    // Offset: 0x2700CC0
    void MLGBKBMHHLE();
    // private System.Void IDOCJGNLNFL()
    // Offset: 0x2700D18
    void IDOCJGNLNFL();
    // private System.Void GECHLDPLPCC()
    // Offset: 0x2700D70
    void GECHLDPLPCC();
    // public System.Void .ctor()
    // Offset: 0x2700DC8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static M_OnlyDamageFromSpell* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::M_OnlyDamageFromSpell::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<M_OnlyDamageFromSpell*, creationType>()));
    }
    // private System.Void CBMDGNKFPIO()
    // Offset: 0x2700E30
    void CBMDGNKFPIO();
    // private System.Void PFABJJGAOMM()
    // Offset: 0x2700E88
    void PFABJJGAOMM();
    // private System.Void IPIFMKAGODD()
    // Offset: 0x2700EE0
    void IPIFMKAGODD();
    // private System.Void KBDGAPMJGLG()
    // Offset: 0x2700F38
    void KBDGAPMJGLG();
    // private System.Void EPCHNEGNKNF()
    // Offset: 0x2700F90
    void EPCHNEGNKNF();
    // private System.Void FGIFGGNGKPK()
    // Offset: 0x2700FE8
    void FGIFGGNGKPK();
    // private System.Void JENOIOBAEPG()
    // Offset: 0x2701040
    void JENOIOBAEPG();
    // private System.Void GPFBGGFPINB()
    // Offset: 0x2701098
    void GPFBGGFPINB();
    // private System.Void GKIOLADOCOK()
    // Offset: 0x27010F0
    void GKIOLADOCOK();
    // private System.Void KPOAAAHLGLA()
    // Offset: 0x2701148
    void KPOAAAHLGLA();
    // private System.Void NNDKJCJFIAK()
    // Offset: 0x27011A0
    void NNDKJCJFIAK();
    // private System.Void BDEDGNGMHMN()
    // Offset: 0x27011F8
    void BDEDGNGMHMN();
    // private System.Void FNGLOIECKDG()
    // Offset: 0x2701250
    void FNGLOIECKDG();
    // private System.Void Start()
    // Offset: 0x27012A8
    void Start();
    // private System.Void DGJGAFKDIDK()
    // Offset: 0x2701300
    void DGJGAFKDIDK();
    // private System.Void HKINNMLBMMG()
    // Offset: 0x2701358
    void HKINNMLBMMG();
    // private System.Void LBIKOKCCILF()
    // Offset: 0x27013B0
    void LBIKOKCCILF();
    // private System.Void ABIHCGOKNCL()
    // Offset: 0x2701408
    void ABIHCGOKNCL();
  }; // MagicalActual.M_OnlyDamageFromSpell
  #pragma pack(pop)
  static check_size<sizeof(M_OnlyDamageFromSpell), 40 + sizeof(::StringW)> __MagicalActual_M_OnlyDamageFromSpellSizeCheck;
  static_assert(sizeof(M_OnlyDamageFromSpell) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::EIIKFEMCNKM
// Il2CppName: EIIKFEMCNKM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::EIIKFEMCNKM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "EIIKFEMCNKM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::MLGBKBMHHLE
// Il2CppName: MLGBKBMHHLE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::MLGBKBMHHLE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "MLGBKBMHHLE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::IDOCJGNLNFL
// Il2CppName: IDOCJGNLNFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::IDOCJGNLNFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "IDOCJGNLNFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::GECHLDPLPCC
// Il2CppName: GECHLDPLPCC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::GECHLDPLPCC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "GECHLDPLPCC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::CBMDGNKFPIO
// Il2CppName: CBMDGNKFPIO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::CBMDGNKFPIO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "CBMDGNKFPIO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::PFABJJGAOMM
// Il2CppName: PFABJJGAOMM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::PFABJJGAOMM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "PFABJJGAOMM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::IPIFMKAGODD
// Il2CppName: IPIFMKAGODD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::IPIFMKAGODD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "IPIFMKAGODD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::KBDGAPMJGLG
// Il2CppName: KBDGAPMJGLG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::KBDGAPMJGLG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "KBDGAPMJGLG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::EPCHNEGNKNF
// Il2CppName: EPCHNEGNKNF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::EPCHNEGNKNF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "EPCHNEGNKNF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::FGIFGGNGKPK
// Il2CppName: FGIFGGNGKPK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::FGIFGGNGKPK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "FGIFGGNGKPK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::JENOIOBAEPG
// Il2CppName: JENOIOBAEPG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::JENOIOBAEPG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "JENOIOBAEPG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::GPFBGGFPINB
// Il2CppName: GPFBGGFPINB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::GPFBGGFPINB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "GPFBGGFPINB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::GKIOLADOCOK
// Il2CppName: GKIOLADOCOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::GKIOLADOCOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "GKIOLADOCOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::KPOAAAHLGLA
// Il2CppName: KPOAAAHLGLA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::KPOAAAHLGLA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "KPOAAAHLGLA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::NNDKJCJFIAK
// Il2CppName: NNDKJCJFIAK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::NNDKJCJFIAK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "NNDKJCJFIAK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::BDEDGNGMHMN
// Il2CppName: BDEDGNGMHMN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::BDEDGNGMHMN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "BDEDGNGMHMN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::FNGLOIECKDG
// Il2CppName: FNGLOIECKDG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::FNGLOIECKDG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "FNGLOIECKDG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::DGJGAFKDIDK
// Il2CppName: DGJGAFKDIDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::DGJGAFKDIDK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "DGJGAFKDIDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::HKINNMLBMMG
// Il2CppName: HKINNMLBMMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::HKINNMLBMMG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "HKINNMLBMMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::LBIKOKCCILF
// Il2CppName: LBIKOKCCILF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::LBIKOKCCILF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "LBIKOKCCILF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::M_OnlyDamageFromSpell::ABIHCGOKNCL
// Il2CppName: ABIHCGOKNCL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::M_OnlyDamageFromSpell::*)()>(&MagicalActual::M_OnlyDamageFromSpell::ABIHCGOKNCL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::M_OnlyDamageFromSpell*), "ABIHCGOKNCL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
