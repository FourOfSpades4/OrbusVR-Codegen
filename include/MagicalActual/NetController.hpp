// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: NetController
  class NetController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::NetController);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::NetController*, "MagicalActual", "NetController");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x4D
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.NetController
  // [TokenAttribute] Offset: FFFFFFFF
  class NetController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean isLocalControlled
    // Size: 0x1
    // Offset: 0x18
    bool isLocalControlled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isLocalControlled and: DMNHBEIHGMA
    char __padding0[0x7] = {};
    // private UnityEngine.Transform DMNHBEIHGMA
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* DMNHBEIHGMA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single OPGLLPIECPF
    // Size: 0x4
    // Offset: 0x28
    float OPGLLPIECPF;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single JCFDPNAKOBK
    // Size: 0x4
    // Offset: 0x2C
    float JCFDPNAKOBK;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single MIPEAJPONKH
    // Size: 0x4
    // Offset: 0x30
    float MIPEAJPONKH;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single JOENIMFPMHO
    // Size: 0x4
    // Offset: 0x34
    float JOENIMFPMHO;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.RaycastHit[] KKGFDGOLBPI
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::RaycastHit> KKGFDGOLBPI;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private UnityEngine.Vector3 IMNKMKBFLNO
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 IMNKMKBFLNO;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean IAMMIIGDNAI
    // Size: 0x1
    // Offset: 0x4C
    bool IAMMIIGDNAI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean isLocalControlled
    [[deprecated("Use field access instead!")]] bool& dyn_isLocalControlled();
    // Get instance field reference: private UnityEngine.Transform DMNHBEIHGMA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_DMNHBEIHGMA();
    // Get instance field reference: private System.Single OPGLLPIECPF
    [[deprecated("Use field access instead!")]] float& dyn_OPGLLPIECPF();
    // Get instance field reference: private System.Single JCFDPNAKOBK
    [[deprecated("Use field access instead!")]] float& dyn_JCFDPNAKOBK();
    // Get instance field reference: private System.Single MIPEAJPONKH
    [[deprecated("Use field access instead!")]] float& dyn_MIPEAJPONKH();
    // Get instance field reference: private System.Single JOENIMFPMHO
    [[deprecated("Use field access instead!")]] float& dyn_JOENIMFPMHO();
    // Get instance field reference: private UnityEngine.RaycastHit[] KKGFDGOLBPI
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_KKGFDGOLBPI();
    // Get instance field reference: private UnityEngine.Vector3 IMNKMKBFLNO
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_IMNKMKBFLNO();
    // Get instance field reference: private System.Boolean IAMMIIGDNAI
    [[deprecated("Use field access instead!")]] bool& dyn_IAMMIIGDNAI();
    // private System.Void JJNHCABMBIH()
    // Offset: 0x1944618
    void JJNHCABMBIH();
    // private System.Void BPEFOMJJHKO()
    // Offset: 0x1944FF8
    void BPEFOMJJHKO();
    // public System.Void .ctor()
    // Offset: 0x19459DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::NetController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetController*, creationType>()));
    }
    // private System.Void GEJIJMPGALF()
    // Offset: 0x19459FC
    void GEJIJMPGALF();
    // private System.Void IDOCJGNLNFL()
    // Offset: 0x19463E4
    void IDOCJGNLNFL();
    // private System.Void FGIFGGNGKPK()
    // Offset: 0x194644C
    void FGIFGGNGKPK();
    // public System.Void LaunchNet(UnityEngine.Vector3 NKJBILNNJNP)
    // Offset: 0x19464B4
    void LaunchNet(::UnityEngine::Vector3 NKJBILNNJNP);
    // private System.Void PNKHLJDEJNA()
    // Offset: 0x19464C8
    void PNKHLJDEJNA();
    // private System.Void Update()
    // Offset: 0x1946A08
    void Update();
    // private System.Void Start()
    // Offset: 0x1946F6C
    void Start();
    // public System.Void NPDHCOEODIN(UnityEngine.Vector3 NKJBILNNJNP)
    // Offset: 0x1946FD4
    void NPDHCOEODIN(::UnityEngine::Vector3 NKJBILNNJNP);
    // private System.Void MHHFAOGFAPO()
    // Offset: 0x1946FE8
    void MHHFAOGFAPO();
    // private System.Void EFLLEILOGJN()
    // Offset: 0x1947984
    void EFLLEILOGJN();
    // private System.Void BDEDGNGMHMN()
    // Offset: 0x1948368
    void BDEDGNGMHMN();
    // private System.Void LJOGIPIJIPF()
    // Offset: 0x19483D0
    void LJOGIPIJIPF();
    // private System.Void LBIKOKCCILF()
    // Offset: 0x1948904
    void LBIKOKCCILF();
    // public System.Void BCEMJADMNKA(UnityEngine.Vector3 NKJBILNNJNP)
    // Offset: 0x194896C
    void BCEMJADMNKA(::UnityEngine::Vector3 NKJBILNNJNP);
    // public System.Void EBFHINJMICN(UnityEngine.Vector3 NKJBILNNJNP)
    // Offset: 0x1948980
    void EBFHINJMICN(::UnityEngine::Vector3 NKJBILNNJNP);
    // public System.Void LDGGOGMHMNM(UnityEngine.Vector3 NKJBILNNJNP)
    // Offset: 0x1948994
    void LDGGOGMHMNM(::UnityEngine::Vector3 NKJBILNNJNP);
    // private System.Void ABIHCGOKNCL()
    // Offset: 0x19489A4
    void ABIHCGOKNCL();
    // public System.Void BKGHCFFBAMK(UnityEngine.Vector3 NKJBILNNJNP)
    // Offset: 0x1948A0C
    void BKGHCFFBAMK(::UnityEngine::Vector3 NKJBILNNJNP);
    // private System.Void DHCNJHAMIJO()
    // Offset: 0x1948A1C
    void DHCNJHAMIJO();
    // public System.Void OADFLFOPEMG(UnityEngine.Vector3 NKJBILNNJNP)
    // Offset: 0x1948F5C
    void OADFLFOPEMG(::UnityEngine::Vector3 NKJBILNNJNP);
    // private System.Void DGJGAFKDIDK()
    // Offset: 0x1948F6C
    void DGJGAFKDIDK();
    // private System.Void LIFGLIHALIG()
    // Offset: 0x1948FD4
    void LIFGLIHALIG();
  }; // MagicalActual.NetController
  #pragma pack(pop)
  static check_size<sizeof(NetController), 76 + sizeof(bool)> __MagicalActual_NetControllerSizeCheck;
  static_assert(sizeof(NetController) == 0x4D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::NetController::JJNHCABMBIH
// Il2CppName: JJNHCABMBIH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::JJNHCABMBIH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "JJNHCABMBIH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::BPEFOMJJHKO
// Il2CppName: BPEFOMJJHKO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::BPEFOMJJHKO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "BPEFOMJJHKO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::NetController::GEJIJMPGALF
// Il2CppName: GEJIJMPGALF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::GEJIJMPGALF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "GEJIJMPGALF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::IDOCJGNLNFL
// Il2CppName: IDOCJGNLNFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::IDOCJGNLNFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "IDOCJGNLNFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::FGIFGGNGKPK
// Il2CppName: FGIFGGNGKPK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::FGIFGGNGKPK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "FGIFGGNGKPK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::LaunchNet
// Il2CppName: LaunchNet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)(::UnityEngine::Vector3)>(&MagicalActual::NetController::LaunchNet)> {
  static const MethodInfo* get() {
    static auto* NKJBILNNJNP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "LaunchNet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{NKJBILNNJNP});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::PNKHLJDEJNA
// Il2CppName: PNKHLJDEJNA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::PNKHLJDEJNA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "PNKHLJDEJNA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::NPDHCOEODIN
// Il2CppName: NPDHCOEODIN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)(::UnityEngine::Vector3)>(&MagicalActual::NetController::NPDHCOEODIN)> {
  static const MethodInfo* get() {
    static auto* NKJBILNNJNP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "NPDHCOEODIN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{NKJBILNNJNP});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::MHHFAOGFAPO
// Il2CppName: MHHFAOGFAPO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::MHHFAOGFAPO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "MHHFAOGFAPO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::EFLLEILOGJN
// Il2CppName: EFLLEILOGJN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::EFLLEILOGJN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "EFLLEILOGJN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::BDEDGNGMHMN
// Il2CppName: BDEDGNGMHMN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::BDEDGNGMHMN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "BDEDGNGMHMN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::LJOGIPIJIPF
// Il2CppName: LJOGIPIJIPF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::LJOGIPIJIPF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "LJOGIPIJIPF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::LBIKOKCCILF
// Il2CppName: LBIKOKCCILF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::LBIKOKCCILF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "LBIKOKCCILF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::BCEMJADMNKA
// Il2CppName: BCEMJADMNKA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)(::UnityEngine::Vector3)>(&MagicalActual::NetController::BCEMJADMNKA)> {
  static const MethodInfo* get() {
    static auto* NKJBILNNJNP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "BCEMJADMNKA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{NKJBILNNJNP});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::EBFHINJMICN
// Il2CppName: EBFHINJMICN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)(::UnityEngine::Vector3)>(&MagicalActual::NetController::EBFHINJMICN)> {
  static const MethodInfo* get() {
    static auto* NKJBILNNJNP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "EBFHINJMICN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{NKJBILNNJNP});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::LDGGOGMHMNM
// Il2CppName: LDGGOGMHMNM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)(::UnityEngine::Vector3)>(&MagicalActual::NetController::LDGGOGMHMNM)> {
  static const MethodInfo* get() {
    static auto* NKJBILNNJNP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "LDGGOGMHMNM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{NKJBILNNJNP});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::ABIHCGOKNCL
// Il2CppName: ABIHCGOKNCL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::ABIHCGOKNCL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "ABIHCGOKNCL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::BKGHCFFBAMK
// Il2CppName: BKGHCFFBAMK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)(::UnityEngine::Vector3)>(&MagicalActual::NetController::BKGHCFFBAMK)> {
  static const MethodInfo* get() {
    static auto* NKJBILNNJNP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "BKGHCFFBAMK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{NKJBILNNJNP});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::DHCNJHAMIJO
// Il2CppName: DHCNJHAMIJO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::DHCNJHAMIJO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "DHCNJHAMIJO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::OADFLFOPEMG
// Il2CppName: OADFLFOPEMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)(::UnityEngine::Vector3)>(&MagicalActual::NetController::OADFLFOPEMG)> {
  static const MethodInfo* get() {
    static auto* NKJBILNNJNP = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "OADFLFOPEMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{NKJBILNNJNP});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::DGJGAFKDIDK
// Il2CppName: DGJGAFKDIDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::DGJGAFKDIDK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "DGJGAFKDIDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::NetController::LIFGLIHALIG
// Il2CppName: LIFGLIHALIG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::NetController::*)()>(&MagicalActual::NetController::LIFGLIHALIG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::NetController*), "LIFGLIHALIG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
