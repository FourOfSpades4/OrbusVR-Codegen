// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: NetEntity
  class NetEntity;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: ClockworkHunter
  class ClockworkHunter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::ClockworkHunter);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::ClockworkHunter*, "MagicalActual", "ClockworkHunter");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.ClockworkHunter
  // [TokenAttribute] Offset: FFFFFFFF
  class ClockworkHunter : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.String OrbusNetComponent
    // Size: 0x8
    // Offset: 0x18
    ::StringW OrbusNetComponent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private MagicalActual.NetEntity IJJGNKLFGJN
    // Size: 0x8
    // Offset: 0x20
    ::MagicalActual::NetEntity* IJJGNKLFGJN;
    // Field size check
    static_assert(sizeof(::MagicalActual::NetEntity*) == 0x8);
    // public UnityEngine.GameObject clockworkBeamPrefab
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* clockworkBeamPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject OHOBCLNOKID
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* OHOBCLNOKID;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject breakShieldVfx
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* breakShieldVfx;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean AKHIIFCMIPL
    // Size: 0x1
    // Offset: 0x40
    bool AKHIIFCMIPL;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String OrbusNetComponent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OrbusNetComponent();
    // Get instance field reference: private MagicalActual.NetEntity IJJGNKLFGJN
    [[deprecated("Use field access instead!")]] ::MagicalActual::NetEntity*& dyn_IJJGNKLFGJN();
    // Get instance field reference: public UnityEngine.GameObject clockworkBeamPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_clockworkBeamPrefab();
    // Get instance field reference: private UnityEngine.GameObject OHOBCLNOKID
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_OHOBCLNOKID();
    // Get instance field reference: public UnityEngine.GameObject breakShieldVfx
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_breakShieldVfx();
    // Get instance field reference: private System.Boolean AKHIIFCMIPL
    [[deprecated("Use field access instead!")]] bool& dyn_AKHIIFCMIPL();
    // private System.Void NNBODOLEAFK()
    // Offset: 0x1D2174C
    void NNBODOLEAFK();
    // private System.Void DGIKKMCHFGM(System.Object OMLPNCLFFMJ)
    // Offset: 0x1D218BC
    void DGIKKMCHFGM(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void AGPEIDHOJPN(System.Object OMLPNCLFFMJ)
    // Offset: 0x1D21944
    void AGPEIDHOJPN(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void JMPPPHNKAFG()
    // Offset: 0x1D219CC
    void JMPPPHNKAFG();
    // private System.Void DDOOFFHBJJN(System.Object OMLPNCLFFMJ)
    // Offset: 0x1D219D0
    void DDOOFFHBJJN(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void KIPDPKEIOEO()
    // Offset: 0x1D21A58
    void KIPDPKEIOEO();
    // private System.Void HKINNMLBMMG()
    // Offset: 0x1D21A5C
    void HKINNMLBMMG();
    // public System.Void OFDMFGNMEOP(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1D21B9C
    void OFDMFGNMEOP(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void MONCBOKMLEA(System.Object OMLPNCLFFMJ)
    // Offset: 0x1D21C50
    void MONCBOKMLEA(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void orbusNetInit(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1D21CD8
    void orbusNetInit(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void BLDNGKHOIID(System.Object OMLPNCLFFMJ)
    // Offset: 0x1D21D8C
    void BLDNGKHOIID(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void LOEFDHDIHGE()
    // Offset: 0x1D21E14
    void LOEFDHDIHGE();
    // private System.Void DPJJHPHGGGB(System.Object OMLPNCLFFMJ)
    // Offset: 0x1D21F84
    void DPJJHPHGGGB(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void EHGHLOMCBAG(System.Object OMLPNCLFFMJ)
    // Offset: 0x1D2200C
    void EHGHLOMCBAG(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void IOOBCJAJKCJ(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1D22094
    void IOOBCJAJKCJ(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void AMGJNJLJIFO()
    // Offset: 0x1D22148
    void AMGJNJLJIFO();
    // private System.Void FixedUpdate()
    // Offset: 0x1D222B8
    void FixedUpdate();
    // private System.Void LOKDCCBIBCM(System.Object OMLPNCLFFMJ)
    // Offset: 0x1D22424
    void LOKDCCBIBCM(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void OHJOGJPPNLI(System.Object OMLPNCLFFMJ)
    // Offset: 0x1D224AC
    void OHJOGJPPNLI(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void PFPDONMFLDH()
    // Offset: 0x1D22534
    void PFPDONMFLDH();
    // private System.Void NEDFCIDMJBB()
    // Offset: 0x1D225E0
    void NEDFCIDMJBB();
    // private System.Void Awake()
    // Offset: 0x1D22724
    void Awake();
    // private System.Void Start()
    // Offset: 0x1D22728
    void Start();
    // private System.Void HHKOFMNJKDA()
    // Offset: 0x1D22868
    void HHKOFMNJKDA();
    // private System.Void BIMCNDAFFJC()
    // Offset: 0x1D229D8
    void BIMCNDAFFJC();
    // public System.Void PPKPHFHCELO(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1D22B48
    void PPKPHFHCELO(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void ANKCGGIBCAI()
    // Offset: 0x1D22BFC
    void ANKCGGIBCAI();
    // private System.Void FAHDGOAALEM()
    // Offset: 0x1D22D6C
    void FAHDGOAALEM();
    // public System.Void KHOMLKJBDGE(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1D22E18
    void KHOMLKJBDGE(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void IDOCJGNLNFL()
    // Offset: 0x1D22ECC
    void IDOCJGNLNFL();
    // private System.Void BIECMCLCPFG(System.Object OMLPNCLFFMJ)
    // Offset: 0x1D23010
    void BIECMCLCPFG(::Il2CppObject* OMLPNCLFFMJ);
    // private System.Void AKONOOIDPDA()
    // Offset: 0x1D23098
    void AKONOOIDPDA();
    // private System.Void HDMHEDEGDFD()
    // Offset: 0x1D2309C
    void HDMHEDEGDFD();
    // public System.Void MMJIKEBHBJF(MagicalActual.NetEntity CMLIHJCOINC)
    // Offset: 0x1D230A0
    void MMJIKEBHBJF(::MagicalActual::NetEntity* CMLIHJCOINC);
    // private System.Void KPOAAAHLGLA()
    // Offset: 0x1D23154
    void KPOAAAHLGLA();
    // private System.Void LBBHKKFNJPA()
    // Offset: 0x1D23298
    void LBBHKKFNJPA();
    // private System.Void JCOEAIILOND()
    // Offset: 0x1D23344
    void JCOEAIILOND();
    // private System.Void LKJDOIJDNMM(System.Object OMLPNCLFFMJ)
    // Offset: 0x1D234B4
    void LKJDOIJDNMM(::Il2CppObject* OMLPNCLFFMJ);
    // public System.Void .ctor()
    // Offset: 0x1D2353C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClockworkHunter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::ClockworkHunter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClockworkHunter*, creationType>()));
    }
    // private System.Void OnDestroy()
    // Offset: 0x1D23594
    void OnDestroy();
    // private System.Void MLGBKBMHHLE()
    // Offset: 0x1D23640
    void MLGBKBMHHLE();
  }; // MagicalActual.ClockworkHunter
  #pragma pack(pop)
  static check_size<sizeof(ClockworkHunter), 64 + sizeof(bool)> __MagicalActual_ClockworkHunterSizeCheck;
  static_assert(sizeof(ClockworkHunter) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::NNBODOLEAFK
// Il2CppName: NNBODOLEAFK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::NNBODOLEAFK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "NNBODOLEAFK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::DGIKKMCHFGM
// Il2CppName: DGIKKMCHFGM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::Il2CppObject*)>(&MagicalActual::ClockworkHunter::DGIKKMCHFGM)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "DGIKKMCHFGM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::AGPEIDHOJPN
// Il2CppName: AGPEIDHOJPN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::Il2CppObject*)>(&MagicalActual::ClockworkHunter::AGPEIDHOJPN)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "AGPEIDHOJPN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::JMPPPHNKAFG
// Il2CppName: JMPPPHNKAFG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::JMPPPHNKAFG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "JMPPPHNKAFG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::DDOOFFHBJJN
// Il2CppName: DDOOFFHBJJN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::Il2CppObject*)>(&MagicalActual::ClockworkHunter::DDOOFFHBJJN)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "DDOOFFHBJJN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::KIPDPKEIOEO
// Il2CppName: KIPDPKEIOEO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::KIPDPKEIOEO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "KIPDPKEIOEO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::HKINNMLBMMG
// Il2CppName: HKINNMLBMMG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::HKINNMLBMMG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "HKINNMLBMMG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::OFDMFGNMEOP
// Il2CppName: OFDMFGNMEOP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::MagicalActual::NetEntity*)>(&MagicalActual::ClockworkHunter::OFDMFGNMEOP)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "OFDMFGNMEOP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::MONCBOKMLEA
// Il2CppName: MONCBOKMLEA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::Il2CppObject*)>(&MagicalActual::ClockworkHunter::MONCBOKMLEA)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "MONCBOKMLEA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::orbusNetInit
// Il2CppName: orbusNetInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::MagicalActual::NetEntity*)>(&MagicalActual::ClockworkHunter::orbusNetInit)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "orbusNetInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::BLDNGKHOIID
// Il2CppName: BLDNGKHOIID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::Il2CppObject*)>(&MagicalActual::ClockworkHunter::BLDNGKHOIID)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "BLDNGKHOIID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::LOEFDHDIHGE
// Il2CppName: LOEFDHDIHGE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::LOEFDHDIHGE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "LOEFDHDIHGE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::DPJJHPHGGGB
// Il2CppName: DPJJHPHGGGB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::Il2CppObject*)>(&MagicalActual::ClockworkHunter::DPJJHPHGGGB)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "DPJJHPHGGGB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::EHGHLOMCBAG
// Il2CppName: EHGHLOMCBAG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::Il2CppObject*)>(&MagicalActual::ClockworkHunter::EHGHLOMCBAG)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "EHGHLOMCBAG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::IOOBCJAJKCJ
// Il2CppName: IOOBCJAJKCJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::MagicalActual::NetEntity*)>(&MagicalActual::ClockworkHunter::IOOBCJAJKCJ)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "IOOBCJAJKCJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::AMGJNJLJIFO
// Il2CppName: AMGJNJLJIFO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::AMGJNJLJIFO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "AMGJNJLJIFO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::LOKDCCBIBCM
// Il2CppName: LOKDCCBIBCM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::Il2CppObject*)>(&MagicalActual::ClockworkHunter::LOKDCCBIBCM)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "LOKDCCBIBCM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::OHJOGJPPNLI
// Il2CppName: OHJOGJPPNLI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::Il2CppObject*)>(&MagicalActual::ClockworkHunter::OHJOGJPPNLI)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "OHJOGJPPNLI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::PFPDONMFLDH
// Il2CppName: PFPDONMFLDH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::PFPDONMFLDH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "PFPDONMFLDH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::NEDFCIDMJBB
// Il2CppName: NEDFCIDMJBB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::NEDFCIDMJBB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "NEDFCIDMJBB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::HHKOFMNJKDA
// Il2CppName: HHKOFMNJKDA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::HHKOFMNJKDA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "HHKOFMNJKDA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::BIMCNDAFFJC
// Il2CppName: BIMCNDAFFJC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::BIMCNDAFFJC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "BIMCNDAFFJC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::PPKPHFHCELO
// Il2CppName: PPKPHFHCELO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::MagicalActual::NetEntity*)>(&MagicalActual::ClockworkHunter::PPKPHFHCELO)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "PPKPHFHCELO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::ANKCGGIBCAI
// Il2CppName: ANKCGGIBCAI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::ANKCGGIBCAI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "ANKCGGIBCAI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::FAHDGOAALEM
// Il2CppName: FAHDGOAALEM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::FAHDGOAALEM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "FAHDGOAALEM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::KHOMLKJBDGE
// Il2CppName: KHOMLKJBDGE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::MagicalActual::NetEntity*)>(&MagicalActual::ClockworkHunter::KHOMLKJBDGE)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "KHOMLKJBDGE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::IDOCJGNLNFL
// Il2CppName: IDOCJGNLNFL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::IDOCJGNLNFL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "IDOCJGNLNFL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::BIECMCLCPFG
// Il2CppName: BIECMCLCPFG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::Il2CppObject*)>(&MagicalActual::ClockworkHunter::BIECMCLCPFG)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "BIECMCLCPFG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::AKONOOIDPDA
// Il2CppName: AKONOOIDPDA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::AKONOOIDPDA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "AKONOOIDPDA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::HDMHEDEGDFD
// Il2CppName: HDMHEDEGDFD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::HDMHEDEGDFD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "HDMHEDEGDFD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::MMJIKEBHBJF
// Il2CppName: MMJIKEBHBJF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::MagicalActual::NetEntity*)>(&MagicalActual::ClockworkHunter::MMJIKEBHBJF)> {
  static const MethodInfo* get() {
    static auto* CMLIHJCOINC = &::il2cpp_utils::GetClassFromName("MagicalActual", "NetEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "MMJIKEBHBJF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{CMLIHJCOINC});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::KPOAAAHLGLA
// Il2CppName: KPOAAAHLGLA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::KPOAAAHLGLA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "KPOAAAHLGLA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::LBBHKKFNJPA
// Il2CppName: LBBHKKFNJPA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::LBBHKKFNJPA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "LBBHKKFNJPA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::JCOEAIILOND
// Il2CppName: JCOEAIILOND
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::JCOEAIILOND)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "JCOEAIILOND", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::LKJDOIJDNMM
// Il2CppName: LKJDOIJDNMM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)(::Il2CppObject*)>(&MagicalActual::ClockworkHunter::LKJDOIJDNMM)> {
  static const MethodInfo* get() {
    static auto* OMLPNCLFFMJ = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "LKJDOIJDNMM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OMLPNCLFFMJ});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::ClockworkHunter::MLGBKBMHHLE
// Il2CppName: MLGBKBMHHLE
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::ClockworkHunter::*)()>(&MagicalActual::ClockworkHunter::MLGBKBMHHLE)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::ClockworkHunter*), "MLGBKBMHHLE", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
