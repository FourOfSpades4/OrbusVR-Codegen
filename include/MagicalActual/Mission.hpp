// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: RewardTier
  class RewardTier;
  // Forward declaring type: ChecklistItem
  class ChecklistItem;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: Mission
  class Mission;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::Mission);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::Mission*, "MagicalActual", "Mission");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.Mission
  // [TokenAttribute] Offset: FFFFFFFF
  class Mission : public ::Il2CppObject {
    public:
    public:
    // public System.String id
    // Size: 0x8
    // Offset: 0x10
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String type
    // Size: 0x8
    // Offset: 0x18
    ::StringW type;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String description
    // Size: 0x8
    // Offset: 0x20
    ::StringW description;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String status
    // Size: 0x8
    // Offset: 0x28
    ::StringW status;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String currentReward
    // Size: 0x8
    // Offset: 0x30
    ::StringW currentReward;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 levelRequirement
    // Size: 0x4
    // Offset: 0x38
    int levelRequirement;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single progress
    // Size: 0x4
    // Offset: 0x3C
    float progress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean pvpBonus
    // Size: 0x1
    // Offset: 0x40
    bool pvpBonus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: pvpBonus and: classLock
    char __padding7[0x7] = {};
    // public System.String classLock
    // Size: 0x8
    // Offset: 0x48
    ::StringW classLock;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public MagicalActual.RewardTier none
    // Size: 0x8
    // Offset: 0x50
    ::MagicalActual::RewardTier* none;
    // Field size check
    static_assert(sizeof(::MagicalActual::RewardTier*) == 0x8);
    // public MagicalActual.RewardTier bronze
    // Size: 0x8
    // Offset: 0x58
    ::MagicalActual::RewardTier* bronze;
    // Field size check
    static_assert(sizeof(::MagicalActual::RewardTier*) == 0x8);
    // public MagicalActual.RewardTier silver
    // Size: 0x8
    // Offset: 0x60
    ::MagicalActual::RewardTier* silver;
    // Field size check
    static_assert(sizeof(::MagicalActual::RewardTier*) == 0x8);
    // public MagicalActual.RewardTier gold
    // Size: 0x8
    // Offset: 0x68
    ::MagicalActual::RewardTier* gold;
    // Field size check
    static_assert(sizeof(::MagicalActual::RewardTier*) == 0x8);
    // public MagicalActual.ChecklistItem[] checklist
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::MagicalActual::ChecklistItem*> checklist;
    // Field size check
    static_assert(sizeof(::ArrayW<::MagicalActual::ChecklistItem*>) == 0x8);
    // public System.String overrideIcon
    // Size: 0x8
    // Offset: 0x78
    ::StringW overrideIcon;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: public System.String type
    [[deprecated("Use field access instead!")]] ::StringW& dyn_type();
    // Get instance field reference: public System.String description
    [[deprecated("Use field access instead!")]] ::StringW& dyn_description();
    // Get instance field reference: public System.String status
    [[deprecated("Use field access instead!")]] ::StringW& dyn_status();
    // Get instance field reference: public System.String currentReward
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currentReward();
    // Get instance field reference: public System.Int32 levelRequirement
    [[deprecated("Use field access instead!")]] int& dyn_levelRequirement();
    // Get instance field reference: public System.Single progress
    [[deprecated("Use field access instead!")]] float& dyn_progress();
    // Get instance field reference: public System.Boolean pvpBonus
    [[deprecated("Use field access instead!")]] bool& dyn_pvpBonus();
    // Get instance field reference: public System.String classLock
    [[deprecated("Use field access instead!")]] ::StringW& dyn_classLock();
    // Get instance field reference: public MagicalActual.RewardTier none
    [[deprecated("Use field access instead!")]] ::MagicalActual::RewardTier*& dyn_none();
    // Get instance field reference: public MagicalActual.RewardTier bronze
    [[deprecated("Use field access instead!")]] ::MagicalActual::RewardTier*& dyn_bronze();
    // Get instance field reference: public MagicalActual.RewardTier silver
    [[deprecated("Use field access instead!")]] ::MagicalActual::RewardTier*& dyn_silver();
    // Get instance field reference: public MagicalActual.RewardTier gold
    [[deprecated("Use field access instead!")]] ::MagicalActual::RewardTier*& dyn_gold();
    // Get instance field reference: public MagicalActual.ChecklistItem[] checklist
    [[deprecated("Use field access instead!")]] ::ArrayW<::MagicalActual::ChecklistItem*>& dyn_checklist();
    // Get instance field reference: public System.String overrideIcon
    [[deprecated("Use field access instead!")]] ::StringW& dyn_overrideIcon();
    // public MagicalActual.RewardTier EBINLLJIINK()
    // Offset: 0x13F2128
    ::MagicalActual::RewardTier* EBINLLJIINK();
    // public MagicalActual.RewardTier get_NextReward()
    // Offset: 0x13F2358
    ::MagicalActual::RewardTier* get_NextReward();
    // public MagicalActual.RewardTier HNHPACMNKPL()
    // Offset: 0x13F252C
    ::MagicalActual::RewardTier* HNHPACMNKPL();
    // public MagicalActual.RewardTier BKCNPNGKCDB()
    // Offset: 0x13F275C
    ::MagicalActual::RewardTier* BKCNPNGKCDB();
    // public MagicalActual.RewardTier EPLJNJAECCL()
    // Offset: 0x13F291C
    ::MagicalActual::RewardTier* EPLJNJAECCL();
    // public MagicalActual.RewardTier AIPFNHJDOJK()
    // Offset: 0x13F2ADC
    ::MagicalActual::RewardTier* AIPFNHJDOJK();
    // public MagicalActual.RewardTier JEHJPMCNJGC()
    // Offset: 0x13F2D10
    ::MagicalActual::RewardTier* JEHJPMCNJGC();
    // public MagicalActual.RewardTier MADAMKNKKNC()
    // Offset: 0x13F2F44
    ::MagicalActual::RewardTier* MADAMKNKKNC();
    // public MagicalActual.RewardTier LNCHLEJBJBN()
    // Offset: 0x13F3104
    ::MagicalActual::RewardTier* LNCHLEJBJBN();
    // public MagicalActual.RewardTier DGDMACJHLHJ()
    // Offset: 0x13F3334
    ::MagicalActual::RewardTier* DGDMACJHLHJ();
    // public MagicalActual.RewardTier NAPBGALDHLI()
    // Offset: 0x13F34F4
    ::MagicalActual::RewardTier* NAPBGALDHLI();
    // public MagicalActual.RewardTier ICFLJDAKNPM()
    // Offset: 0x13F3720
    ::MagicalActual::RewardTier* ICFLJDAKNPM();
    // public System.Void .ctor()
    // Offset: 0x13F3954
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Mission* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::Mission::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Mission*, creationType>()));
    }
    // public MagicalActual.RewardTier IPENDJDGHDK()
    // Offset: 0x13F3A04
    ::MagicalActual::RewardTier* IPENDJDGHDK();
    // public MagicalActual.RewardTier INHCPBKNEDD()
    // Offset: 0x13F3BC4
    ::MagicalActual::RewardTier* INHCPBKNEDD();
    // public MagicalActual.RewardTier IAODAIMLDIO()
    // Offset: 0x13F3D84
    ::MagicalActual::RewardTier* IAODAIMLDIO();
    // public MagicalActual.RewardTier ODGPIBAJLEL()
    // Offset: 0x13F3F44
    ::MagicalActual::RewardTier* ODGPIBAJLEL();
    // public MagicalActual.RewardTier AAHGHHBLLFN()
    // Offset: 0x13F4104
    ::MagicalActual::RewardTier* AAHGHHBLLFN();
    // public MagicalActual.RewardTier JJHAAJKOELF()
    // Offset: 0x13F42C4
    ::MagicalActual::RewardTier* JJHAAJKOELF();
    // public MagicalActual.RewardTier FHMOMLCPDIC()
    // Offset: 0x13F44F4
    ::MagicalActual::RewardTier* FHMOMLCPDIC();
    // public MagicalActual.RewardTier PDJKKJNHFNN()
    // Offset: 0x13F4720
    ::MagicalActual::RewardTier* PDJKKJNHFNN();
    // public MagicalActual.RewardTier OCKABBFOCFP()
    // Offset: 0x13F48E0
    ::MagicalActual::RewardTier* OCKABBFOCFP();
    // public MagicalActual.RewardTier get_CurrentReward()
    // Offset: 0x13F4B0C
    ::MagicalActual::RewardTier* get_CurrentReward();
    // public MagicalActual.RewardTier HHJJIGPBGFK()
    // Offset: 0x13F4CB0
    ::MagicalActual::RewardTier* HHJJIGPBGFK();
    // public MagicalActual.RewardTier MKAPNDNFBHD()
    // Offset: 0x13F4E70
    ::MagicalActual::RewardTier* MKAPNDNFBHD();
  }; // MagicalActual.Mission
  #pragma pack(pop)
  static check_size<sizeof(Mission), 120 + sizeof(::StringW)> __MagicalActual_MissionSizeCheck;
  static_assert(sizeof(Mission) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::Mission::EBINLLJIINK
// Il2CppName: EBINLLJIINK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::EBINLLJIINK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "EBINLLJIINK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::get_NextReward
// Il2CppName: get_NextReward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::get_NextReward)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "get_NextReward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::HNHPACMNKPL
// Il2CppName: HNHPACMNKPL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::HNHPACMNKPL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "HNHPACMNKPL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::BKCNPNGKCDB
// Il2CppName: BKCNPNGKCDB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::BKCNPNGKCDB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "BKCNPNGKCDB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::EPLJNJAECCL
// Il2CppName: EPLJNJAECCL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::EPLJNJAECCL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "EPLJNJAECCL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::AIPFNHJDOJK
// Il2CppName: AIPFNHJDOJK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::AIPFNHJDOJK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "AIPFNHJDOJK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::JEHJPMCNJGC
// Il2CppName: JEHJPMCNJGC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::JEHJPMCNJGC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "JEHJPMCNJGC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::MADAMKNKKNC
// Il2CppName: MADAMKNKKNC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::MADAMKNKKNC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "MADAMKNKKNC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::LNCHLEJBJBN
// Il2CppName: LNCHLEJBJBN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::LNCHLEJBJBN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "LNCHLEJBJBN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::DGDMACJHLHJ
// Il2CppName: DGDMACJHLHJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::DGDMACJHLHJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "DGDMACJHLHJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::NAPBGALDHLI
// Il2CppName: NAPBGALDHLI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::NAPBGALDHLI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "NAPBGALDHLI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::ICFLJDAKNPM
// Il2CppName: ICFLJDAKNPM
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::ICFLJDAKNPM)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "ICFLJDAKNPM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::Mission::IPENDJDGHDK
// Il2CppName: IPENDJDGHDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::IPENDJDGHDK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "IPENDJDGHDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::INHCPBKNEDD
// Il2CppName: INHCPBKNEDD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::INHCPBKNEDD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "INHCPBKNEDD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::IAODAIMLDIO
// Il2CppName: IAODAIMLDIO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::IAODAIMLDIO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "IAODAIMLDIO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::ODGPIBAJLEL
// Il2CppName: ODGPIBAJLEL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::ODGPIBAJLEL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "ODGPIBAJLEL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::AAHGHHBLLFN
// Il2CppName: AAHGHHBLLFN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::AAHGHHBLLFN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "AAHGHHBLLFN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::JJHAAJKOELF
// Il2CppName: JJHAAJKOELF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::JJHAAJKOELF)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "JJHAAJKOELF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::FHMOMLCPDIC
// Il2CppName: FHMOMLCPDIC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::FHMOMLCPDIC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "FHMOMLCPDIC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::PDJKKJNHFNN
// Il2CppName: PDJKKJNHFNN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::PDJKKJNHFNN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "PDJKKJNHFNN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::OCKABBFOCFP
// Il2CppName: OCKABBFOCFP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::OCKABBFOCFP)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "OCKABBFOCFP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::get_CurrentReward
// Il2CppName: get_CurrentReward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::get_CurrentReward)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "get_CurrentReward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::HHJJIGPBGFK
// Il2CppName: HHJJIGPBGFK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::HHJJIGPBGFK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "HHJJIGPBGFK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::Mission::MKAPNDNFBHD
// Il2CppName: MKAPNDNFBHD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::MagicalActual::RewardTier* (MagicalActual::Mission::*)()>(&MagicalActual::Mission::MKAPNDNFBHD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::Mission*), "MKAPNDNFBHD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
