// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: POIMapIcon
  class POIMapIcon;
  // Forward declaring type: POIMapListedItem
  class POIMapListedItem;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: RawImage
  class RawImage;
  // Forward declaring type: Text
  class Text;
  // Forward declaring type: Button
  class Button;
  // Forward declaring type: Slider
  class Slider;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::SceneManagement
namespace UnityEngine::SceneManagement {
  // Forward declaring type: Scene
  struct Scene;
  // Forward declaring type: LoadSceneMode
  struct LoadSceneMode;
}
// Completed forward declares
// Type namespace: MagicalActual
namespace MagicalActual {
  // Forward declaring type: DynamicPlayerMap
  class DynamicPlayerMap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::MagicalActual::DynamicPlayerMap);
DEFINE_IL2CPP_ARG_TYPE(::MagicalActual::DynamicPlayerMap*, "MagicalActual", "DynamicPlayerMap");
// Type namespace: MagicalActual
namespace MagicalActual {
  // Size: 0x198
  #pragma pack(push, 1)
  // Autogenerated type: MagicalActual.DynamicPlayerMap
  // [TokenAttribute] Offset: FFFFFFFF
  class DynamicPlayerMap : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::MagicalActual::DynamicPlayerMap::ZoneID
    struct ZoneID;
    public:
    // private UnityEngine.Transform playerIconPosition
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* playerIconPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform playerMapSize
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* playerMapSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform scaledView
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* scaledView;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform POIListContent
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* POIListContent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.UI.RawImage currentMapImage
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UI::RawImage* currentMapImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::RawImage*) == 0x8);
    // private UnityEngine.GameObject sceneViewTab
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* sceneViewTab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject fullMap
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* fullMap;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject mapIcon
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* mapIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject pointOfInterst
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* pointOfInterst;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject activePOIObjects
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* activePOIObjects;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject POIBeacon
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* POIBeacon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject POIListedItem
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* POIListedItem;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.UI.Text mapIconText
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::UI::Text* mapIconText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text zoneViewText
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::UI::Text* zoneViewText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text overworldViewText
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::UI::Text* overworldViewText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text zoneName
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::UI::Text* zoneName;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Text mapDescription
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::UI::Text* mapDescription;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Button worldViewButton
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::UI::Button* worldViewButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button mapExpandButton
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::UI::Button* mapExpandButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button closeMapButton
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::UI::Button* closeMapButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.Animator mapTransitionAnimator
    // Size: 0x8
    // Offset: 0xB8
    ::UnityEngine::Animator* mapTransitionAnimator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // private UnityEngine.UI.Slider zoomSlider
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::UI::Slider* zoomSlider;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Slider*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Texture> mapTextures
    // Size: 0x8
    // Offset: 0xC8
    ::System::Collections::Generic::List_1<::UnityEngine::Texture*>* mapTextures;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Texture*>*) == 0x8);
    // private System.Boolean DKGAJGOCAAI
    // Size: 0x1
    // Offset: 0xD0
    bool DKGAJGOCAAI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean LCNNFAFPOHO
    // Size: 0x1
    // Offset: 0xD1
    bool LCNNFAFPOHO;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean GCAHBNFJJEP
    // Size: 0x1
    // Offset: 0xD2
    bool GCAHBNFJJEP;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean FENJPIMDFKE
    // Size: 0x1
    // Offset: 0xD3
    bool FENJPIMDFKE;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean PLKINNGJMJG
    // Size: 0x1
    // Offset: 0xD4
    bool PLKINNGJMJG;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean NAJGKECEAJL
    // Size: 0x1
    // Offset: 0xD5
    bool NAJGKECEAJL;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: NAJGKECEAJL and: IBBJDAEBEMG
    char __padding28[0x2] = {};
    // private System.Int32 IBBJDAEBEMG
    // Size: 0x4
    // Offset: 0xD8
    int IBBJDAEBEMG;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 BNMKPIBENBD
    // Size: 0x4
    // Offset: 0xDC
    int BNMKPIBENBD;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single GGMLKJEIAEK
    // Size: 0x4
    // Offset: 0xE0
    float GGMLKJEIAEK;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: GGMLKJEIAEK and: OFFNEIGCLFM
    char __padding31[0x4] = {};
    // private System.String OFFNEIGCLFM
    // Size: 0x8
    // Offset: 0xE8
    ::StringW OFFNEIGCLFM;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Quaternion KCFIONICMFJ
    // Size: 0x10
    // Offset: 0xF0
    ::UnityEngine::Quaternion KCFIONICMFJ;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Color DNDLAJDABDL
    // Size: 0x10
    // Offset: 0x100
    ::UnityEngine::Color DNDLAJDABDL;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color LMBFFGDFBCF
    // Size: 0x10
    // Offset: 0x110
    ::UnityEngine::Color LMBFFGDFBCF;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color BLJNNMLIOMP
    // Size: 0x10
    // Offset: 0x120
    ::UnityEngine::Color BLJNNMLIOMP;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Collections.Generic.List`1<MagicalActual.POIMapIcon> AANBGIIHHFO
    // Size: 0x8
    // Offset: 0x130
    ::System::Collections::Generic::List_1<::MagicalActual::POIMapIcon*>* AANBGIIHHFO;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::MagicalActual::POIMapIcon*>*) == 0x8);
    // private System.Collections.Generic.List`1<MagicalActual.POIMapListedItem> NOJDMPFKPBJ
    // Size: 0x8
    // Offset: 0x138
    ::System::Collections::Generic::List_1<::MagicalActual::POIMapListedItem*>* NOJDMPFKPBJ;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::MagicalActual::POIMapListedItem*>*) == 0x8);
    // private System.Collections.Generic.List`1<MagicalActual.POIMapListedItem> DBKELOFALHK
    // Size: 0x8
    // Offset: 0x140
    ::System::Collections::Generic::List_1<::MagicalActual::POIMapListedItem*>* DBKELOFALHK;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::MagicalActual::POIMapListedItem*>*) == 0x8);
    // private UnityEngine.Vector3 KIHJIJMFPBJ
    // Size: 0xC
    // Offset: 0x148
    ::UnityEngine::Vector3 KIHJIJMFPBJ;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 KAAMKFFOPLA
    // Size: 0xC
    // Offset: 0x154
    ::UnityEngine::Vector3 KAAMKFFOPLA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 LMBCBOEEGEN
    // Size: 0xC
    // Offset: 0x160
    ::UnityEngine::Vector3 LMBCBOEEGEN;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 MFBANLBAHOB
    // Size: 0xC
    // Offset: 0x16C
    ::UnityEngine::Vector3 MFBANLBAHOB;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 HNNDHNNFDED
    // Size: 0xC
    // Offset: 0x178
    ::UnityEngine::Vector3 HNNDHNNFDED;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 OAFJMEDGCEC
    // Size: 0xC
    // Offset: 0x184
    ::UnityEngine::Vector3 OAFJMEDGCEC;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.GameObject HJLHBMEEIGH
    // Size: 0x8
    // Offset: 0x190
    ::UnityEngine::GameObject* HJLHBMEEIGH;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Transform playerIconPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_playerIconPosition();
    // Get instance field reference: private UnityEngine.Transform playerMapSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_playerMapSize();
    // Get instance field reference: private UnityEngine.Transform scaledView
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_scaledView();
    // Get instance field reference: private UnityEngine.Transform POIListContent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_POIListContent();
    // Get instance field reference: private UnityEngine.UI.RawImage currentMapImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::RawImage*& dyn_currentMapImage();
    // Get instance field reference: private UnityEngine.GameObject sceneViewTab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_sceneViewTab();
    // Get instance field reference: private UnityEngine.GameObject fullMap
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_fullMap();
    // Get instance field reference: private UnityEngine.GameObject mapIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_mapIcon();
    // Get instance field reference: private UnityEngine.GameObject pointOfInterst
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_pointOfInterst();
    // Get instance field reference: private UnityEngine.GameObject activePOIObjects
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_activePOIObjects();
    // Get instance field reference: private UnityEngine.GameObject POIBeacon
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_POIBeacon();
    // Get instance field reference: private UnityEngine.GameObject POIListedItem
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_POIListedItem();
    // Get instance field reference: private UnityEngine.UI.Text mapIconText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_mapIconText();
    // Get instance field reference: private UnityEngine.UI.Text zoneViewText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_zoneViewText();
    // Get instance field reference: private UnityEngine.UI.Text overworldViewText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_overworldViewText();
    // Get instance field reference: private UnityEngine.UI.Text zoneName
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_zoneName();
    // Get instance field reference: private UnityEngine.UI.Text mapDescription
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_mapDescription();
    // Get instance field reference: private UnityEngine.UI.Button worldViewButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn_worldViewButton();
    // Get instance field reference: private UnityEngine.UI.Button mapExpandButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn_mapExpandButton();
    // Get instance field reference: private UnityEngine.UI.Button closeMapButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn_closeMapButton();
    // Get instance field reference: private UnityEngine.Animator mapTransitionAnimator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_mapTransitionAnimator();
    // Get instance field reference: private UnityEngine.UI.Slider zoomSlider
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Slider*& dyn_zoomSlider();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Texture> mapTextures
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Texture*>*& dyn_mapTextures();
    // Get instance field reference: private System.Boolean DKGAJGOCAAI
    [[deprecated("Use field access instead!")]] bool& dyn_DKGAJGOCAAI();
    // Get instance field reference: private System.Boolean LCNNFAFPOHO
    [[deprecated("Use field access instead!")]] bool& dyn_LCNNFAFPOHO();
    // Get instance field reference: private System.Boolean GCAHBNFJJEP
    [[deprecated("Use field access instead!")]] bool& dyn_GCAHBNFJJEP();
    // Get instance field reference: private System.Boolean FENJPIMDFKE
    [[deprecated("Use field access instead!")]] bool& dyn_FENJPIMDFKE();
    // Get instance field reference: private System.Boolean PLKINNGJMJG
    [[deprecated("Use field access instead!")]] bool& dyn_PLKINNGJMJG();
    // Get instance field reference: private System.Boolean NAJGKECEAJL
    [[deprecated("Use field access instead!")]] bool& dyn_NAJGKECEAJL();
    // Get instance field reference: private System.Int32 IBBJDAEBEMG
    [[deprecated("Use field access instead!")]] int& dyn_IBBJDAEBEMG();
    // Get instance field reference: private System.Int32 BNMKPIBENBD
    [[deprecated("Use field access instead!")]] int& dyn_BNMKPIBENBD();
    // Get instance field reference: private System.Single GGMLKJEIAEK
    [[deprecated("Use field access instead!")]] float& dyn_GGMLKJEIAEK();
    // Get instance field reference: private System.String OFFNEIGCLFM
    [[deprecated("Use field access instead!")]] ::StringW& dyn_OFFNEIGCLFM();
    // Get instance field reference: private UnityEngine.Quaternion KCFIONICMFJ
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_KCFIONICMFJ();
    // Get instance field reference: private UnityEngine.Color DNDLAJDABDL
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_DNDLAJDABDL();
    // Get instance field reference: private UnityEngine.Color LMBFFGDFBCF
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_LMBFFGDFBCF();
    // Get instance field reference: private UnityEngine.Color BLJNNMLIOMP
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_BLJNNMLIOMP();
    // Get instance field reference: private System.Collections.Generic.List`1<MagicalActual.POIMapIcon> AANBGIIHHFO
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::MagicalActual::POIMapIcon*>*& dyn_AANBGIIHHFO();
    // Get instance field reference: private System.Collections.Generic.List`1<MagicalActual.POIMapListedItem> NOJDMPFKPBJ
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::MagicalActual::POIMapListedItem*>*& dyn_NOJDMPFKPBJ();
    // Get instance field reference: private System.Collections.Generic.List`1<MagicalActual.POIMapListedItem> DBKELOFALHK
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::MagicalActual::POIMapListedItem*>*& dyn_DBKELOFALHK();
    // Get instance field reference: private UnityEngine.Vector3 KIHJIJMFPBJ
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_KIHJIJMFPBJ();
    // Get instance field reference: private UnityEngine.Vector3 KAAMKFFOPLA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_KAAMKFFOPLA();
    // Get instance field reference: private UnityEngine.Vector3 LMBCBOEEGEN
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_LMBCBOEEGEN();
    // Get instance field reference: private UnityEngine.Vector3 MFBANLBAHOB
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_MFBANLBAHOB();
    // Get instance field reference: private UnityEngine.Vector3 HNNDHNNFDED
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_HNNDHNNFDED();
    // Get instance field reference: private UnityEngine.Vector3 OAFJMEDGCEC
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_OAFJMEDGCEC();
    // Get instance field reference: private UnityEngine.GameObject HJLHBMEEIGH
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_HJLHBMEEIGH();
    // public System.Void SetMapForGeneration(UnityEngine.Camera BHJAAGMHDNF, System.String EIGGFAHHBNE, UnityEngine.Vector3 NHFBFBMNPFC)
    // Offset: 0x10F675C
    void SetMapForGeneration(::UnityEngine::Camera* BHJAAGMHDNF, ::StringW EIGGFAHHBNE, ::UnityEngine::Vector3 NHFBFBMNPFC);
    // public System.Void CollapseMap()
    // Offset: 0x10F80A4
    void CollapseMap();
    // private System.Void AFGPAFAPDCD()
    // Offset: 0x10F8170
    void AFGPAFAPDCD();
    // private System.Void GAEOMMPIBML(System.String OINOBCMIFGM, System.Int32 PLCKKKCKAHG)
    // Offset: 0x10F847C
    void GAEOMMPIBML(::StringW OINOBCMIFGM, int PLCKKKCKAHG);
    // public System.Void POISelected(MagicalActual.POIMapIcon IHKHEDAHCJH)
    // Offset: 0x10F8E64
    void POISelected(::MagicalActual::POIMapIcon* IHKHEDAHCJH);
    // public System.Void CNOLANILLLJ()
    // Offset: 0x10F90CC
    void CNOLANILLLJ();
    // public System.Void DisbaleMapIcon()
    // Offset: 0x10F9198
    void DisbaleMapIcon();
    // public System.Void HandleShowMap()
    // Offset: 0x10F91E4
    void HandleShowMap();
    // public System.Void ClearPOI()
    // Offset: 0x10F9218
    void ClearPOI();
    // public System.Void NDHNJHKGLIG(System.Single IACPGDOEFIH)
    // Offset: 0x10F945C
    void NDHNJHKGLIG(float IACPGDOEFIH);
    // public System.Void EKEDCCIDOBI()
    // Offset: 0x10F94BC
    void EKEDCCIDOBI();
    // public System.Void InitPoI()
    // Offset: 0x10F9710
    void InitPoI();
    // private System.Void ILJJIBCMJAC(System.String OINOBCMIFGM, System.Int32 PLCKKKCKAHG)
    // Offset: 0x10FA22C
    void ILJJIBCMJAC(::StringW OINOBCMIFGM, int PLCKKKCKAHG);
    // public System.Void OnDestroy()
    // Offset: 0x10FB2C8
    void OnDestroy();
    // private System.Void NDBJIAEGHOC()
    // Offset: 0x10F9FB4
    void NDBJIAEGHOC();
    // public System.Void .ctor()
    // Offset: 0x10FB524
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DynamicPlayerMap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::MagicalActual::DynamicPlayerMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DynamicPlayerMap*, creationType>()));
    }
    // public System.Void FEIOIEPICJG(System.Single IACPGDOEFIH)
    // Offset: 0x10FB790
    void FEIOIEPICJG(float IACPGDOEFIH);
    // public System.Void ZoneViewTabClicked()
    // Offset: 0x10FB7F0
    void ZoneViewTabClicked();
    // public System.Void IILECIGJIKJ()
    // Offset: 0x10FB9A4
    void IILECIGJIKJ();
    // private System.Void KIPCFLBKGGL(UnityEngine.SceneManagement.Scene OJHNMMDHDOC, UnityEngine.SceneManagement.LoadSceneMode GFAHKBFCGKK)
    // Offset: 0x10FBA70
    void KIPCFLBKGGL(::UnityEngine::SceneManagement::Scene OJHNMMDHDOC, ::UnityEngine::SceneManagement::LoadSceneMode GFAHKBFCGKK);
    // public System.Void GEAEDHPCNIH()
    // Offset: 0x10FBBE8
    void GEAEDHPCNIH();
    // public System.Void PICDLHLDCFJ()
    // Offset: 0x10FBC34
    void PICDLHLDCFJ();
    // public System.Void Start()
    // Offset: 0x10FBD00
    void Start();
    // public System.Void OPHBNHHEJPN()
    // Offset: 0x10FBE88
    void OPHBNHHEJPN();
    // public System.Void DHMKJGABEJK()
    // Offset: 0x10FBEBC
    void DHMKJGABEJK();
    // public System.Void GECHLDPLPCC()
    // Offset: 0x10FBF08
    void GECHLDPLPCC();
    // public System.Void DLOPDFEAEBN()
    // Offset: 0x10FC39C
    void DLOPDFEAEBN();
    // public System.Void OBLFPHPMKIA()
    // Offset: 0x10FC3D0
    void OBLFPHPMKIA();
    // public System.Void OverworldViewTabClicked()
    // Offset: 0x10FC478
    void OverworldViewTabClicked();
    // public System.Void HandleHideMap()
    // Offset: 0x10FC60C
    void HandleHideMap();
    // private System.Void KKLMJNIPKBI()
    // Offset: 0x10FC080
    void KKLMJNIPKBI();
    // public System.Void DisableMap()
    // Offset: 0x10FC698
    void DisableMap();
    // private System.Void IPNNMHDLPIL()
    // Offset: 0x10FC6CC
    void IPNNMHDLPIL();
    // private System.Void NOLIKHEEION()
    // Offset: 0x10FAFAC
    void NOLIKHEEION();
    // public System.Void DHCNJHAMIJO()
    // Offset: 0x10FC93C
    void DHCNJHAMIJO();
    // public System.Void JDIGOOGLJCK()
    // Offset: 0x10FD864
    void JDIGOOGLJCK();
    // public System.Void EnableMap()
    // Offset: 0x10FD898
    void EnableMap();
    // public System.Void ShowFullMap()
    // Offset: 0x10FD8CC
    void ShowFullMap();
    // public System.Void BCPPECIHJMH()
    // Offset: 0x10FD998
    void BCPPECIHJMH();
    // public System.Void OIGBDPMDDKJ(MagicalActual.POIMapIcon IHKHEDAHCJH)
    // Offset: 0x10FD9E4
    void OIGBDPMDDKJ(::MagicalActual::POIMapIcon* IHKHEDAHCJH);
    // public System.Void FBDNGCBGAMC()
    // Offset: 0x10FDC4C
    void FBDNGCBGAMC();
    // private System.Void JDKEPMPHBFO()
    // Offset: 0x10F8B44
    void JDKEPMPHBFO();
    // public System.Void SetMapSize(System.Single IACPGDOEFIH)
    // Offset: 0x10FB944
    void SetMapSize(float IACPGDOEFIH);
    // public System.Void ClearButtonClicked()
    // Offset: 0x10FDC80
    void ClearButtonClicked();
    // public System.Void PFGJCAMMLIK()
    // Offset: 0x10FDD14
    void PFGJCAMMLIK();
    // public System.Void Update()
    // Offset: 0x10FDD48
    void Update();
    // private System.Void IBGOJPOFJKB(System.String OINOBCMIFGM, System.Int32 PLCKKKCKAHG)
    // Offset: 0x10FCFF0
    void IBGOJPOFJKB(::StringW OINOBCMIFGM, int PLCKKKCKAHG);
    // public System.Void NJDJDBBBMEG()
    // Offset: 0x10FE408
    void NJDJDBBBMEG();
    // public System.Void EnableMapIcon()
    // Offset: 0x10FE43C
    void EnableMapIcon();
    // public System.Void GJLFEHABIEG(System.Single IACPGDOEFIH)
    // Offset: 0x10FE488
    void GJLFEHABIEG(float IACPGDOEFIH);
    // private System.Void CCHNNCMLKKO(System.String OINOBCMIFGM, System.Int32 PLCKKKCKAHG)
    // Offset: 0x10F686C
    void CCHNNCMLKKO(::StringW OINOBCMIFGM, int PLCKKKCKAHG);
    // public System.Void OHNLCCMMAMA()
    // Offset: 0x10FE4E8
    void OHNLCCMMAMA();
    // public System.Void JBOFICLPPBH()
    // Offset: 0x10FE71C
    void JBOFICLPPBH();
    // public System.Void IHCMCNONLEA()
    // Offset: 0x10FE7B0
    void IHCMCNONLEA();
    // public System.Void BOGGDKPIAFD()
    // Offset: 0x10FE7E4
    void BOGGDKPIAFD();
    // public System.Void IOLINIIAFBB()
    // Offset: 0x10FE9A4
    void IOLINIIAFBB();
    // public System.Void KIMKJMDDNAH()
    // Offset: 0x10FE9F0
    void KIMKJMDDNAH();
    // public System.Void CGDECLBJDGP(System.Single IACPGDOEFIH)
    // Offset: 0x10FE944
    void CGDECLBJDGP(float IACPGDOEFIH);
  }; // MagicalActual.DynamicPlayerMap
  #pragma pack(pop)
  static check_size<sizeof(DynamicPlayerMap), 400 + sizeof(::UnityEngine::GameObject*)> __MagicalActual_DynamicPlayerMapSizeCheck;
  static_assert(sizeof(DynamicPlayerMap) == 0x198);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::SetMapForGeneration
// Il2CppName: SetMapForGeneration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)(::UnityEngine::Camera*, ::StringW, ::UnityEngine::Vector3)>(&MagicalActual::DynamicPlayerMap::SetMapForGeneration)> {
  static const MethodInfo* get() {
    static auto* BHJAAGMHDNF = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* EIGGFAHHBNE = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* NHFBFBMNPFC = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "SetMapForGeneration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{BHJAAGMHDNF, EIGGFAHHBNE, NHFBFBMNPFC});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::CollapseMap
// Il2CppName: CollapseMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::CollapseMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "CollapseMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::AFGPAFAPDCD
// Il2CppName: AFGPAFAPDCD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::AFGPAFAPDCD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "AFGPAFAPDCD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::GAEOMMPIBML
// Il2CppName: GAEOMMPIBML
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)(::StringW, int)>(&MagicalActual::DynamicPlayerMap::GAEOMMPIBML)> {
  static const MethodInfo* get() {
    static auto* OINOBCMIFGM = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* PLCKKKCKAHG = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "GAEOMMPIBML", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OINOBCMIFGM, PLCKKKCKAHG});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::POISelected
// Il2CppName: POISelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)(::MagicalActual::POIMapIcon*)>(&MagicalActual::DynamicPlayerMap::POISelected)> {
  static const MethodInfo* get() {
    static auto* IHKHEDAHCJH = &::il2cpp_utils::GetClassFromName("MagicalActual", "POIMapIcon")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "POISelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{IHKHEDAHCJH});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::CNOLANILLLJ
// Il2CppName: CNOLANILLLJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::CNOLANILLLJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "CNOLANILLLJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::DisbaleMapIcon
// Il2CppName: DisbaleMapIcon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::DisbaleMapIcon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "DisbaleMapIcon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::HandleShowMap
// Il2CppName: HandleShowMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::HandleShowMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "HandleShowMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::ClearPOI
// Il2CppName: ClearPOI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::ClearPOI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "ClearPOI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::NDHNJHKGLIG
// Il2CppName: NDHNJHKGLIG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)(float)>(&MagicalActual::DynamicPlayerMap::NDHNJHKGLIG)> {
  static const MethodInfo* get() {
    static auto* IACPGDOEFIH = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "NDHNJHKGLIG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{IACPGDOEFIH});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::EKEDCCIDOBI
// Il2CppName: EKEDCCIDOBI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::EKEDCCIDOBI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "EKEDCCIDOBI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::InitPoI
// Il2CppName: InitPoI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::InitPoI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "InitPoI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::ILJJIBCMJAC
// Il2CppName: ILJJIBCMJAC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)(::StringW, int)>(&MagicalActual::DynamicPlayerMap::ILJJIBCMJAC)> {
  static const MethodInfo* get() {
    static auto* OINOBCMIFGM = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* PLCKKKCKAHG = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "ILJJIBCMJAC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OINOBCMIFGM, PLCKKKCKAHG});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::NDBJIAEGHOC
// Il2CppName: NDBJIAEGHOC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::NDBJIAEGHOC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "NDBJIAEGHOC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::FEIOIEPICJG
// Il2CppName: FEIOIEPICJG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)(float)>(&MagicalActual::DynamicPlayerMap::FEIOIEPICJG)> {
  static const MethodInfo* get() {
    static auto* IACPGDOEFIH = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "FEIOIEPICJG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{IACPGDOEFIH});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::ZoneViewTabClicked
// Il2CppName: ZoneViewTabClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::ZoneViewTabClicked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "ZoneViewTabClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::IILECIGJIKJ
// Il2CppName: IILECIGJIKJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::IILECIGJIKJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "IILECIGJIKJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::KIPCFLBKGGL
// Il2CppName: KIPCFLBKGGL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)(::UnityEngine::SceneManagement::Scene, ::UnityEngine::SceneManagement::LoadSceneMode)>(&MagicalActual::DynamicPlayerMap::KIPCFLBKGGL)> {
  static const MethodInfo* get() {
    static auto* OJHNMMDHDOC = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* GFAHKBFCGKK = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "LoadSceneMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "KIPCFLBKGGL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OJHNMMDHDOC, GFAHKBFCGKK});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::GEAEDHPCNIH
// Il2CppName: GEAEDHPCNIH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::GEAEDHPCNIH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "GEAEDHPCNIH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::PICDLHLDCFJ
// Il2CppName: PICDLHLDCFJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::PICDLHLDCFJ)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "PICDLHLDCFJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::OPHBNHHEJPN
// Il2CppName: OPHBNHHEJPN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::OPHBNHHEJPN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "OPHBNHHEJPN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::DHMKJGABEJK
// Il2CppName: DHMKJGABEJK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::DHMKJGABEJK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "DHMKJGABEJK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::GECHLDPLPCC
// Il2CppName: GECHLDPLPCC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::GECHLDPLPCC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "GECHLDPLPCC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::DLOPDFEAEBN
// Il2CppName: DLOPDFEAEBN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::DLOPDFEAEBN)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "DLOPDFEAEBN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::OBLFPHPMKIA
// Il2CppName: OBLFPHPMKIA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::OBLFPHPMKIA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "OBLFPHPMKIA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::OverworldViewTabClicked
// Il2CppName: OverworldViewTabClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::OverworldViewTabClicked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "OverworldViewTabClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::HandleHideMap
// Il2CppName: HandleHideMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::HandleHideMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "HandleHideMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::KKLMJNIPKBI
// Il2CppName: KKLMJNIPKBI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::KKLMJNIPKBI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "KKLMJNIPKBI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::DisableMap
// Il2CppName: DisableMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::DisableMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "DisableMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::IPNNMHDLPIL
// Il2CppName: IPNNMHDLPIL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::IPNNMHDLPIL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "IPNNMHDLPIL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::NOLIKHEEION
// Il2CppName: NOLIKHEEION
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::NOLIKHEEION)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "NOLIKHEEION", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::DHCNJHAMIJO
// Il2CppName: DHCNJHAMIJO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::DHCNJHAMIJO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "DHCNJHAMIJO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::JDIGOOGLJCK
// Il2CppName: JDIGOOGLJCK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::JDIGOOGLJCK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "JDIGOOGLJCK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::EnableMap
// Il2CppName: EnableMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::EnableMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "EnableMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::ShowFullMap
// Il2CppName: ShowFullMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::ShowFullMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "ShowFullMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::BCPPECIHJMH
// Il2CppName: BCPPECIHJMH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::BCPPECIHJMH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "BCPPECIHJMH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::OIGBDPMDDKJ
// Il2CppName: OIGBDPMDDKJ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)(::MagicalActual::POIMapIcon*)>(&MagicalActual::DynamicPlayerMap::OIGBDPMDDKJ)> {
  static const MethodInfo* get() {
    static auto* IHKHEDAHCJH = &::il2cpp_utils::GetClassFromName("MagicalActual", "POIMapIcon")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "OIGBDPMDDKJ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{IHKHEDAHCJH});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::FBDNGCBGAMC
// Il2CppName: FBDNGCBGAMC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::FBDNGCBGAMC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "FBDNGCBGAMC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::JDKEPMPHBFO
// Il2CppName: JDKEPMPHBFO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::JDKEPMPHBFO)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "JDKEPMPHBFO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::SetMapSize
// Il2CppName: SetMapSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)(float)>(&MagicalActual::DynamicPlayerMap::SetMapSize)> {
  static const MethodInfo* get() {
    static auto* IACPGDOEFIH = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "SetMapSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{IACPGDOEFIH});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::ClearButtonClicked
// Il2CppName: ClearButtonClicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::ClearButtonClicked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "ClearButtonClicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::PFGJCAMMLIK
// Il2CppName: PFGJCAMMLIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::PFGJCAMMLIK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "PFGJCAMMLIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::IBGOJPOFJKB
// Il2CppName: IBGOJPOFJKB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)(::StringW, int)>(&MagicalActual::DynamicPlayerMap::IBGOJPOFJKB)> {
  static const MethodInfo* get() {
    static auto* OINOBCMIFGM = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* PLCKKKCKAHG = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "IBGOJPOFJKB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OINOBCMIFGM, PLCKKKCKAHG});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::NJDJDBBBMEG
// Il2CppName: NJDJDBBBMEG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::NJDJDBBBMEG)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "NJDJDBBBMEG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::EnableMapIcon
// Il2CppName: EnableMapIcon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::EnableMapIcon)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "EnableMapIcon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::GJLFEHABIEG
// Il2CppName: GJLFEHABIEG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)(float)>(&MagicalActual::DynamicPlayerMap::GJLFEHABIEG)> {
  static const MethodInfo* get() {
    static auto* IACPGDOEFIH = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "GJLFEHABIEG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{IACPGDOEFIH});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::CCHNNCMLKKO
// Il2CppName: CCHNNCMLKKO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)(::StringW, int)>(&MagicalActual::DynamicPlayerMap::CCHNNCMLKKO)> {
  static const MethodInfo* get() {
    static auto* OINOBCMIFGM = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* PLCKKKCKAHG = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "CCHNNCMLKKO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{OINOBCMIFGM, PLCKKKCKAHG});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::OHNLCCMMAMA
// Il2CppName: OHNLCCMMAMA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::OHNLCCMMAMA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "OHNLCCMMAMA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::JBOFICLPPBH
// Il2CppName: JBOFICLPPBH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::JBOFICLPPBH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "JBOFICLPPBH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::IHCMCNONLEA
// Il2CppName: IHCMCNONLEA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::IHCMCNONLEA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "IHCMCNONLEA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::BOGGDKPIAFD
// Il2CppName: BOGGDKPIAFD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::BOGGDKPIAFD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "BOGGDKPIAFD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::IOLINIIAFBB
// Il2CppName: IOLINIIAFBB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::IOLINIIAFBB)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "IOLINIIAFBB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::KIMKJMDDNAH
// Il2CppName: KIMKJMDDNAH
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)()>(&MagicalActual::DynamicPlayerMap::KIMKJMDDNAH)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "KIMKJMDDNAH", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MagicalActual::DynamicPlayerMap::CGDECLBJDGP
// Il2CppName: CGDECLBJDGP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MagicalActual::DynamicPlayerMap::*)(float)>(&MagicalActual::DynamicPlayerMap::CGDECLBJDGP)> {
  static const MethodInfo* get() {
    static auto* IACPGDOEFIH = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MagicalActual::DynamicPlayerMap*), "CGDECLBJDGP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{IACPGDOEFIH});
  }
};
