// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: WebSocketSharp.LogLevel
#include "WebSocketSharp/LogLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: WebSocketSharp
namespace WebSocketSharp {
  // Forward declaring type: LogData
  class LogData;
}
// Completed forward declares
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Forward declaring type: Logger
  class Logger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::WebSocketSharp::Logger);
DEFINE_IL2CPP_ARG_TYPE(::WebSocketSharp::Logger*, "WebSocketSharp", "Logger");
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: WebSocketSharp.Logger
  // [TokenAttribute] Offset: FFFFFFFF
  class Logger : public ::Il2CppObject {
    public:
    public:
    // private System.String _file
    // Size: 0x8
    // Offset: 0x10
    ::StringW file;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private WebSocketSharp.LogLevel _level
    // Size: 0x4
    // Offset: 0x18
    ::WebSocketSharp::LogLevel level;
    // Field size check
    static_assert(sizeof(::WebSocketSharp::LogLevel) == 0x4);
    // Padding between fields: level and: output_
    char __padding1[0x4] = {};
    // private System.Action`2<WebSocketSharp.LogData,System.String> _output
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_2<::WebSocketSharp::LogData*, ::StringW>* output_;
    // Field size check
    static_assert(sizeof(::System::Action_2<::WebSocketSharp::LogData*, ::StringW>*) == 0x8);
    // private System.Object _sync
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* sync;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // [CompilerGeneratedAttribute] Offset: 0xAC0A5C
    // Get static field: static private System.Action`2<WebSocketSharp.LogData,System.String> <>f__mg$cache0
    static ::System::Action_2<::WebSocketSharp::LogData*, ::StringW>* _get_$$f__mg$cache0();
    // Set static field: static private System.Action`2<WebSocketSharp.LogData,System.String> <>f__mg$cache0
    static void _set_$$f__mg$cache0(::System::Action_2<::WebSocketSharp::LogData*, ::StringW>* value);
    // [CompilerGeneratedAttribute] Offset: 0xAC0A6C
    // Get static field: static private System.Action`2<WebSocketSharp.LogData,System.String> <>f__mg$cache1
    static ::System::Action_2<::WebSocketSharp::LogData*, ::StringW>* _get_$$f__mg$cache1();
    // Set static field: static private System.Action`2<WebSocketSharp.LogData,System.String> <>f__mg$cache1
    static void _set_$$f__mg$cache1(::System::Action_2<::WebSocketSharp::LogData*, ::StringW>* value);
    // Get instance field reference: private System.String _file
    [[deprecated("Use field access instead!")]] ::StringW& dyn__file();
    // Get instance field reference: private WebSocketSharp.LogLevel _level
    [[deprecated("Use field access instead!")]] ::WebSocketSharp::LogLevel& dyn__level();
    // Get instance field reference: private System.Action`2<WebSocketSharp.LogData,System.String> _output
    [[deprecated("Use field access instead!")]] ::System::Action_2<::WebSocketSharp::LogData*, ::StringW>*& dyn__output();
    // Get instance field reference: private System.Object _sync
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__sync();
    // public System.Void .ctor()
    // Offset: 0x1F188BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Logger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::Logger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Logger*, creationType>()));
    }
    // public System.Void .ctor(WebSocketSharp.LogLevel level, System.String file, System.Action`2<WebSocketSharp.LogData,System.String> output)
    // Offset: 0x1F188CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Logger* New_ctor(::WebSocketSharp::LogLevel level, ::StringW file, ::System::Action_2<::WebSocketSharp::LogData*, ::StringW>* output) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::Logger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Logger*, creationType>(level, file, output)));
    }
    // static private System.Void defaultOutput(WebSocketSharp.LogData data, System.String path)
    // Offset: 0x1F189D0
    static void defaultOutput(::WebSocketSharp::LogData* data, ::StringW path);
    // private System.Void output(System.String message, WebSocketSharp.LogLevel level)
    // Offset: 0x1F18D20
    void output(::StringW message, ::WebSocketSharp::LogLevel level);
    // static private System.Void writeToFile(System.String value, System.String path)
    // Offset: 0x1F18A9C
    static void writeToFile(::StringW value, ::StringW path);
    // public System.Void Debug(System.String message)
    // Offset: 0x1F19000
    void Debug(::StringW message);
    // public System.Void Error(System.String message)
    // Offset: 0x1F19054
    void Error(::StringW message);
    // public System.Void Fatal(System.String message)
    // Offset: 0x1F190A8
    void Fatal(::StringW message);
    // public System.Void Info(System.String message)
    // Offset: 0x1F190B0
    void Info(::StringW message);
    // public System.Void Trace(System.String message)
    // Offset: 0x1F19104
    void Trace(::StringW message);
    // public System.Void Warn(System.String message)
    // Offset: 0x1F19158
    void Warn(::StringW message);
  }; // WebSocketSharp.Logger
  #pragma pack(pop)
  static check_size<sizeof(Logger), 40 + sizeof(::Il2CppObject*)> __WebSocketSharp_LoggerSizeCheck;
  static_assert(sizeof(Logger) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: WebSocketSharp::Logger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::Logger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::Logger::defaultOutput
// Il2CppName: defaultOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::WebSocketSharp::LogData*, ::StringW)>(&WebSocketSharp::Logger::defaultOutput)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "LogData")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Logger*), "defaultOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, path});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Logger::output
// Il2CppName: output
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Logger::*)(::StringW, ::WebSocketSharp::LogLevel)>(&WebSocketSharp::Logger::output)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("WebSocketSharp", "LogLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Logger*), "output", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, level});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Logger::writeToFile
// Il2CppName: writeToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW)>(&WebSocketSharp::Logger::writeToFile)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Logger*), "writeToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, path});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Logger::Debug
// Il2CppName: Debug
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Logger::*)(::StringW)>(&WebSocketSharp::Logger::Debug)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Logger*), "Debug", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Logger::Error
// Il2CppName: Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Logger::*)(::StringW)>(&WebSocketSharp::Logger::Error)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Logger*), "Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Logger::Fatal
// Il2CppName: Fatal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Logger::*)(::StringW)>(&WebSocketSharp::Logger::Fatal)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Logger*), "Fatal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Logger::Info
// Il2CppName: Info
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Logger::*)(::StringW)>(&WebSocketSharp::Logger::Info)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Logger*), "Info", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Logger::Trace
// Il2CppName: Trace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Logger::*)(::StringW)>(&WebSocketSharp::Logger::Trace)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Logger*), "Trace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Logger::Warn
// Il2CppName: Warn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Logger::*)(::StringW)>(&WebSocketSharp::Logger::Warn)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Logger*), "Warn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
