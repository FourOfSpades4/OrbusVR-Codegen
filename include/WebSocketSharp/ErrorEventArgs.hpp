// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.EventArgs
#include "System/EventArgs.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Forward declaring type: ErrorEventArgs
  class ErrorEventArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::WebSocketSharp::ErrorEventArgs);
DEFINE_IL2CPP_ARG_TYPE(::WebSocketSharp::ErrorEventArgs*, "WebSocketSharp", "ErrorEventArgs");
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: WebSocketSharp.ErrorEventArgs
  // [TokenAttribute] Offset: FFFFFFFF
  class ErrorEventArgs : public ::System::EventArgs {
    public:
    public:
    // private System.Exception _exception
    // Size: 0x8
    // Offset: 0x10
    ::System::Exception* exception;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    // private System.String _message
    // Size: 0x8
    // Offset: 0x18
    ::StringW message;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.Exception _exception
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn__exception();
    // Get instance field reference: private System.String _message
    [[deprecated("Use field access instead!")]] ::StringW& dyn__message();
    // System.Void .ctor(System.String message, System.Exception exception)
    // Offset: 0x1F11C78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ErrorEventArgs* New_ctor(::StringW message, ::System::Exception* exception) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::ErrorEventArgs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ErrorEventArgs*, creationType>(message, exception)));
    }
    // public System.String get_Message()
    // Offset: 0x1F11CF8
    ::StringW get_Message();
  }; // WebSocketSharp.ErrorEventArgs
  #pragma pack(pop)
  static check_size<sizeof(ErrorEventArgs), 24 + sizeof(::StringW)> __WebSocketSharp_ErrorEventArgsSizeCheck;
  static_assert(sizeof(ErrorEventArgs) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: WebSocketSharp::ErrorEventArgs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::ErrorEventArgs::get_Message
// Il2CppName: get_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::ErrorEventArgs::*)()>(&WebSocketSharp::ErrorEventArgs::get_Message)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::ErrorEventArgs*), "get_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
