// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: WebSocketSharp
namespace WebSocketSharp {
}
// Forward declaring namespace: System::Collections::Specialized
namespace System::Collections::Specialized {
  // Forward declaring type: NameValueCollection
  class NameValueCollection;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Forward declaring type: HttpBase
  class HttpBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::WebSocketSharp::HttpBase);
DEFINE_IL2CPP_ARG_TYPE(::WebSocketSharp::HttpBase*, "WebSocketSharp", "HttpBase");
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: WebSocketSharp.HttpBase
  // [TokenAttribute] Offset: FFFFFFFF
  class HttpBase : public ::Il2CppObject {
    public:
    // Nested type: ::WebSocketSharp::HttpBase::$readHeaders$c__AnonStorey0
    class $readHeaders$c__AnonStorey0;
    // Nested type: ::WebSocketSharp::HttpBase::$Read$c__AnonStorey1_1<T>
    template<typename T>
    class $Read$c__AnonStorey1_1;
    public:
    // private System.Collections.Specialized.NameValueCollection _headers
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Specialized::NameValueCollection* headers;
    // Field size check
    static_assert(sizeof(::System::Collections::Specialized::NameValueCollection*) == 0x8);
    // private System.Version _version
    // Size: 0x8
    // Offset: 0x18
    ::System::Version* version;
    // Field size check
    static_assert(sizeof(::System::Version*) == 0x8);
    // System.Byte[] EntityBodyData
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> EntityBodyData;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Specialized.NameValueCollection _headers
    [[deprecated("Use field access instead!")]] ::System::Collections::Specialized::NameValueCollection*& dyn__headers();
    // Get instance field reference: private System.Version _version
    [[deprecated("Use field access instead!")]] ::System::Version*& dyn__version();
    // Get instance field reference: System.Byte[] EntityBodyData
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_EntityBodyData();
    // protected System.Void .ctor(System.Version version, System.Collections.Specialized.NameValueCollection headers)
    // Offset: 0x1F16134
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpBase* New_ctor(::System::Version* version, ::System::Collections::Specialized::NameValueCollection* headers) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::HttpBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpBase*, creationType>(version, headers)));
    }
    // public System.String get_EntityBody()
    // Offset: 0x1F1616C
    ::StringW get_EntityBody();
    // public System.Collections.Specialized.NameValueCollection get_Headers()
    // Offset: 0x1F163F8
    ::System::Collections::Specialized::NameValueCollection* get_Headers();
    // public System.Version get_ProtocolVersion()
    // Offset: 0x1F16400
    ::System::Version* get_ProtocolVersion();
    // static private System.Byte[] readEntityBody(System.IO.Stream stream, System.String length)
    // Offset: 0x1F16408
    static ::ArrayW<uint8_t> readEntityBody(::System::IO::Stream* stream, ::StringW length);
    // static private System.String[] readHeaders(System.IO.Stream stream, System.Int32 maxLength)
    // Offset: 0x1F16574
    static ::ArrayW<::StringW> readHeaders(::System::IO::Stream* stream, int maxLength);
    // static protected T Read(System.IO.Stream stream, System.Func`2<System.String[],T> parser, System.Int32 millisecondsTimeout)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T Read(::System::IO::Stream* stream, ::System::Func_2<::ArrayW<::StringW>, T>* parser, int millisecondsTimeout) {
      static_assert(std::is_convertible_v<T, ::WebSocketSharp::HttpBase*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::HttpBase::Read");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("WebSocketSharp", "HttpBase", "Read", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(parser), ::il2cpp_utils::ExtractType(millisecondsTimeout)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, stream, parser, millisecondsTimeout);
    }
    // public System.Byte[] ToByteArray()
    // Offset: 0x1F1695C
    ::ArrayW<uint8_t> ToByteArray();
  }; // WebSocketSharp.HttpBase
  #pragma pack(pop)
  static check_size<sizeof(HttpBase), 32 + sizeof(::ArrayW<uint8_t>)> __WebSocketSharp_HttpBaseSizeCheck;
  static_assert(sizeof(HttpBase) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: WebSocketSharp::HttpBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::HttpBase::get_EntityBody
// Il2CppName: get_EntityBody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::HttpBase::*)()>(&WebSocketSharp::HttpBase::get_EntityBody)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::HttpBase*), "get_EntityBody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::HttpBase::get_Headers
// Il2CppName: get_Headers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Specialized::NameValueCollection* (WebSocketSharp::HttpBase::*)()>(&WebSocketSharp::HttpBase::get_Headers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::HttpBase*), "get_Headers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::HttpBase::get_ProtocolVersion
// Il2CppName: get_ProtocolVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (WebSocketSharp::HttpBase::*)()>(&WebSocketSharp::HttpBase::get_ProtocolVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::HttpBase*), "get_ProtocolVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::HttpBase::readEntityBody
// Il2CppName: readEntityBody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::System::IO::Stream*, ::StringW)>(&WebSocketSharp::HttpBase::readEntityBody)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::HttpBase*), "readEntityBody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, length});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::HttpBase::readHeaders
// Il2CppName: readHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (*)(::System::IO::Stream*, int)>(&WebSocketSharp::HttpBase::readHeaders)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* maxLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::HttpBase*), "readHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, maxLength});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::HttpBase::Read
// Il2CppName: Read
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: WebSocketSharp::HttpBase::ToByteArray
// Il2CppName: ToByteArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (WebSocketSharp::HttpBase::*)()>(&WebSocketSharp::HttpBase::ToByteArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::HttpBase*), "ToByteArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
