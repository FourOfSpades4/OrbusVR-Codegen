// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: WebSocketSharp.HttpBase
#include "WebSocketSharp/HttpBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: WebSocketSharp
namespace WebSocketSharp {
  // Forward declaring type: HttpResponse
  class HttpResponse;
}
// Forward declaring namespace: System::Collections::Specialized
namespace System::Collections::Specialized {
  // Forward declaring type: NameValueCollection
  class NameValueCollection;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: WebSocketSharp::Net
namespace WebSocketSharp::Net {
  // Forward declaring type: CookieCollection
  class CookieCollection;
}
// Completed forward declares
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Forward declaring type: HttpRequest
  class HttpRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::WebSocketSharp::HttpRequest);
DEFINE_IL2CPP_ARG_TYPE(::WebSocketSharp::HttpRequest*, "WebSocketSharp", "HttpRequest");
// Type namespace: WebSocketSharp
namespace WebSocketSharp {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: WebSocketSharp.HttpRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class HttpRequest : public ::WebSocketSharp::HttpBase {
    public:
    public:
    // private System.String _method
    // Size: 0x8
    // Offset: 0x28
    ::StringW method;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _uri
    // Size: 0x8
    // Offset: 0x30
    ::StringW uri;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // [CompilerGeneratedAttribute] Offset: 0xAC0A8C
    // Get static field: static private System.Func`2<System.String[],WebSocketSharp.HttpResponse> <>f__mg$cache0
    static ::System::Func_2<::ArrayW<::StringW>, ::WebSocketSharp::HttpResponse*>* _get_$$f__mg$cache0();
    // Set static field: static private System.Func`2<System.String[],WebSocketSharp.HttpResponse> <>f__mg$cache0
    static void _set_$$f__mg$cache0(::System::Func_2<::ArrayW<::StringW>, ::WebSocketSharp::HttpResponse*>* value);
    // Get instance field reference: private System.String _method
    [[deprecated("Use field access instead!")]] ::StringW& dyn__method();
    // Get instance field reference: private System.String _uri
    [[deprecated("Use field access instead!")]] ::StringW& dyn__uri();
    // private System.Void .ctor(System.String method, System.String uri, System.Version version, System.Collections.Specialized.NameValueCollection headers)
    // Offset: 0x1F16A84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpRequest* New_ctor(::StringW method, ::StringW uri, ::System::Version* version, ::System::Collections::Specialized::NameValueCollection* headers) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::HttpRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpRequest*, creationType>(method, uri, version, headers)));
    }
    // System.Void .ctor(System.String method, System.String uri)
    // Offset: 0x1F16AD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpRequest* New_ctor(::StringW method, ::StringW uri) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::HttpRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpRequest*, creationType>(method, uri)));
    }
    // static WebSocketSharp.HttpRequest CreateConnectRequest(System.Uri uri)
    // Offset: 0x1F16BB0
    static ::WebSocketSharp::HttpRequest* CreateConnectRequest(::System::Uri* uri);
    // static WebSocketSharp.HttpRequest CreateWebSocketRequest(System.Uri uri)
    // Offset: 0x1F16D04
    static ::WebSocketSharp::HttpRequest* CreateWebSocketRequest(::System::Uri* uri);
    // WebSocketSharp.HttpResponse GetResponse(System.IO.Stream stream, System.Int32 millisecondsTimeout)
    // Offset: 0x1F16F20
    ::WebSocketSharp::HttpResponse* GetResponse(::System::IO::Stream* stream, int millisecondsTimeout);
    // public System.Void SetCookies(WebSocketSharp.Net.CookieCollection cookies)
    // Offset: 0x1F17030
    void SetCookies(::WebSocketSharp::Net::CookieCollection* cookies);
    // public override System.String ToString()
    // Offset: 0x1F17638
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // WebSocketSharp.HttpRequest
  #pragma pack(pop)
  static check_size<sizeof(HttpRequest), 48 + sizeof(::StringW)> __WebSocketSharp_HttpRequestSizeCheck;
  static_assert(sizeof(HttpRequest) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: WebSocketSharp::HttpRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::HttpRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::HttpRequest::CreateConnectRequest
// Il2CppName: CreateConnectRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::WebSocketSharp::HttpRequest* (*)(::System::Uri*)>(&WebSocketSharp::HttpRequest::CreateConnectRequest)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::HttpRequest*), "CreateConnectRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::HttpRequest::CreateWebSocketRequest
// Il2CppName: CreateWebSocketRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::WebSocketSharp::HttpRequest* (*)(::System::Uri*)>(&WebSocketSharp::HttpRequest::CreateWebSocketRequest)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::HttpRequest*), "CreateWebSocketRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::HttpRequest::GetResponse
// Il2CppName: GetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::WebSocketSharp::HttpResponse* (WebSocketSharp::HttpRequest::*)(::System::IO::Stream*, int)>(&WebSocketSharp::HttpRequest::GetResponse)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* millisecondsTimeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::HttpRequest*), "GetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, millisecondsTimeout});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::HttpRequest::SetCookies
// Il2CppName: SetCookies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::HttpRequest::*)(::WebSocketSharp::Net::CookieCollection*)>(&WebSocketSharp::HttpRequest::SetCookies)> {
  static const MethodInfo* get() {
    static auto* cookies = &::il2cpp_utils::GetClassFromName("WebSocketSharp.Net", "CookieCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::HttpRequest*), "SetCookies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cookies});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::HttpRequest::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::HttpRequest::*)()>(&WebSocketSharp::HttpRequest::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::HttpRequest*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
