// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Security.Authentication.SslProtocols
#include "System/Security/Authentication/SslProtocols.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Security
namespace System::Net::Security {
  // Forward declaring type: LocalCertificateSelectionCallback
  class LocalCertificateSelectionCallback;
  // Forward declaring type: RemoteCertificateValidationCallback
  class RemoteCertificateValidationCallback;
  // Forward declaring type: SslPolicyErrors
  struct SslPolicyErrors;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
  // Forward declaring type: X509Chain
  class X509Chain;
}
// Completed forward declares
// Type namespace: WebSocketSharp.Net
namespace WebSocketSharp::Net {
  // Forward declaring type: SslConfiguration
  class SslConfiguration;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::WebSocketSharp::Net::SslConfiguration);
DEFINE_IL2CPP_ARG_TYPE(::WebSocketSharp::Net::SslConfiguration*, "WebSocketSharp.Net", "SslConfiguration");
// Type namespace: WebSocketSharp.Net
namespace WebSocketSharp::Net {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: WebSocketSharp.Net.SslConfiguration
  // [TokenAttribute] Offset: FFFFFFFF
  class SslConfiguration : public ::Il2CppObject {
    public:
    public:
    // private System.Net.Security.LocalCertificateSelectionCallback _certSelectionCallback
    // Size: 0x8
    // Offset: 0x10
    ::System::Net::Security::LocalCertificateSelectionCallback* certSelectionCallback;
    // Field size check
    static_assert(sizeof(::System::Net::Security::LocalCertificateSelectionCallback*) == 0x8);
    // private System.Net.Security.RemoteCertificateValidationCallback _certValidationCallback
    // Size: 0x8
    // Offset: 0x18
    ::System::Net::Security::RemoteCertificateValidationCallback* certValidationCallback;
    // Field size check
    static_assert(sizeof(::System::Net::Security::RemoteCertificateValidationCallback*) == 0x8);
    // private System.Boolean _checkCertRevocation
    // Size: 0x1
    // Offset: 0x20
    bool checkCertRevocation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: checkCertRevocation and: enabledProtocols
    char __padding2[0x3] = {};
    // private System.Security.Authentication.SslProtocols _enabledProtocols
    // Size: 0x4
    // Offset: 0x24
    ::System::Security::Authentication::SslProtocols enabledProtocols;
    // Field size check
    static_assert(sizeof(::System::Security::Authentication::SslProtocols) == 0x4);
    public:
    // [CompilerGeneratedAttribute] Offset: 0xAC0A9C
    // Get static field: static private System.Net.Security.LocalCertificateSelectionCallback <>f__am$cache0
    static ::System::Net::Security::LocalCertificateSelectionCallback* _get_$$f__am$cache0();
    // Set static field: static private System.Net.Security.LocalCertificateSelectionCallback <>f__am$cache0
    static void _set_$$f__am$cache0(::System::Net::Security::LocalCertificateSelectionCallback* value);
    // [CompilerGeneratedAttribute] Offset: 0xAC0AAC
    // Get static field: static private System.Net.Security.RemoteCertificateValidationCallback <>f__am$cache1
    static ::System::Net::Security::RemoteCertificateValidationCallback* _get_$$f__am$cache1();
    // Set static field: static private System.Net.Security.RemoteCertificateValidationCallback <>f__am$cache1
    static void _set_$$f__am$cache1(::System::Net::Security::RemoteCertificateValidationCallback* value);
    // Get instance field reference: private System.Net.Security.LocalCertificateSelectionCallback _certSelectionCallback
    [[deprecated("Use field access instead!")]] ::System::Net::Security::LocalCertificateSelectionCallback*& dyn__certSelectionCallback();
    // Get instance field reference: private System.Net.Security.RemoteCertificateValidationCallback _certValidationCallback
    [[deprecated("Use field access instead!")]] ::System::Net::Security::RemoteCertificateValidationCallback*& dyn__certValidationCallback();
    // Get instance field reference: private System.Boolean _checkCertRevocation
    [[deprecated("Use field access instead!")]] bool& dyn__checkCertRevocation();
    // Get instance field reference: private System.Security.Authentication.SslProtocols _enabledProtocols
    [[deprecated("Use field access instead!")]] ::System::Security::Authentication::SslProtocols& dyn__enabledProtocols();
    // protected System.Void .ctor(System.Security.Authentication.SslProtocols enabledSslProtocols, System.Boolean checkCertificateRevocation)
    // Offset: 0x1F1B700
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SslConfiguration* New_ctor(::System::Security::Authentication::SslProtocols enabledSslProtocols, bool checkCertificateRevocation) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::Net::SslConfiguration::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SslConfiguration*, creationType>(enabledSslProtocols, checkCertificateRevocation)));
    }
    // protected System.Net.Security.LocalCertificateSelectionCallback get_CertificateSelectionCallback()
    // Offset: 0x1F1B74C
    ::System::Net::Security::LocalCertificateSelectionCallback* get_CertificateSelectionCallback();
    // protected System.Net.Security.RemoteCertificateValidationCallback get_CertificateValidationCallback()
    // Offset: 0x1F1B800
    ::System::Net::Security::RemoteCertificateValidationCallback* get_CertificateValidationCallback();
    // public System.Boolean get_CheckCertificateRevocation()
    // Offset: 0x1F1F178
    bool get_CheckCertificateRevocation();
    // public System.Security.Authentication.SslProtocols get_EnabledSslProtocols()
    // Offset: 0x1F1F180
    ::System::Security::Authentication::SslProtocols get_EnabledSslProtocols();
    // static private System.Security.Cryptography.X509Certificates.X509Certificate <get_CertificateSelectionCallback>m__0(System.Object sender, System.String targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection localCertificates, System.Security.Cryptography.X509Certificates.X509Certificate remoteCertificate, System.String[] acceptableIssuers)
    // Offset: 0x1F1F188
    static ::System::Security::Cryptography::X509Certificates::X509Certificate* $get_CertificateSelectionCallback$m__0(::Il2CppObject* sender, ::StringW targetHost, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* localCertificates, ::System::Security::Cryptography::X509Certificates::X509Certificate* remoteCertificate, ::ArrayW<::StringW> acceptableIssuers);
    // static private System.Boolean <get_CertificateValidationCallback>m__1(System.Object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors)
    // Offset: 0x1F1F190
    static bool $get_CertificateValidationCallback$m__1(::Il2CppObject* sender, ::System::Security::Cryptography::X509Certificates::X509Certificate* certificate, ::System::Security::Cryptography::X509Certificates::X509Chain* chain, ::System::Net::Security::SslPolicyErrors sslPolicyErrors);
  }; // WebSocketSharp.Net.SslConfiguration
  #pragma pack(pop)
  static check_size<sizeof(SslConfiguration), 36 + sizeof(::System::Security::Authentication::SslProtocols)> __WebSocketSharp_Net_SslConfigurationSizeCheck;
  static_assert(sizeof(SslConfiguration) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: WebSocketSharp::Net::SslConfiguration::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::Net::SslConfiguration::get_CertificateSelectionCallback
// Il2CppName: get_CertificateSelectionCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Security::LocalCertificateSelectionCallback* (WebSocketSharp::Net::SslConfiguration::*)()>(&WebSocketSharp::Net::SslConfiguration::get_CertificateSelectionCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::SslConfiguration*), "get_CertificateSelectionCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::SslConfiguration::get_CertificateValidationCallback
// Il2CppName: get_CertificateValidationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Security::RemoteCertificateValidationCallback* (WebSocketSharp::Net::SslConfiguration::*)()>(&WebSocketSharp::Net::SslConfiguration::get_CertificateValidationCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::SslConfiguration*), "get_CertificateValidationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::SslConfiguration::get_CheckCertificateRevocation
// Il2CppName: get_CheckCertificateRevocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebSocketSharp::Net::SslConfiguration::*)()>(&WebSocketSharp::Net::SslConfiguration::get_CheckCertificateRevocation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::SslConfiguration*), "get_CheckCertificateRevocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::SslConfiguration::get_EnabledSslProtocols
// Il2CppName: get_EnabledSslProtocols
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Authentication::SslProtocols (WebSocketSharp::Net::SslConfiguration::*)()>(&WebSocketSharp::Net::SslConfiguration::get_EnabledSslProtocols)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::SslConfiguration*), "get_EnabledSslProtocols", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::SslConfiguration::$get_CertificateSelectionCallback$m__0
// Il2CppName: <get_CertificateSelectionCallback>m__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509Certificate* (*)(::Il2CppObject*, ::StringW, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection*, ::System::Security::Cryptography::X509Certificates::X509Certificate*, ::ArrayW<::StringW>)>(&WebSocketSharp::Net::SslConfiguration::$get_CertificateSelectionCallback$m__0)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* targetHost = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* localCertificates = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509CertificateCollection")->byval_arg;
    static auto* remoteCertificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* acceptableIssuers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::SslConfiguration*), "<get_CertificateSelectionCallback>m__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, targetHost, localCertificates, remoteCertificate, acceptableIssuers});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::SslConfiguration::$get_CertificateValidationCallback$m__1
// Il2CppName: <get_CertificateValidationCallback>m__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*, ::System::Security::Cryptography::X509Certificates::X509Certificate*, ::System::Security::Cryptography::X509Certificates::X509Chain*, ::System::Net::Security::SslPolicyErrors)>(&WebSocketSharp::Net::SslConfiguration::$get_CertificateValidationCallback$m__1)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* certificate = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Certificate")->byval_arg;
    static auto* chain = &::il2cpp_utils::GetClassFromName("System.Security.Cryptography.X509Certificates", "X509Chain")->byval_arg;
    static auto* sslPolicyErrors = &::il2cpp_utils::GetClassFromName("System.Net.Security", "SslPolicyErrors")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::SslConfiguration*), "<get_CertificateValidationCallback>m__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, certificate, chain, sslPolicyErrors});
  }
};
