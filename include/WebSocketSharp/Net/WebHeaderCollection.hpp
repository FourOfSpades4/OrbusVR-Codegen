// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Specialized.NameValueCollection
#include "System/Collections/Specialized/NameValueCollection.hpp"
// Including type: WebSocketSharp.Net.HttpHeaderType
#include "WebSocketSharp/Net/HttpHeaderType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: WebSocketSharp::Net
namespace WebSocketSharp::Net {
  // Forward declaring type: HttpHeaderInfo
  class HttpHeaderInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: WebSocketSharp.Net
namespace WebSocketSharp::Net {
  // Forward declaring type: WebHeaderCollection
  class WebHeaderCollection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::WebSocketSharp::Net::WebHeaderCollection);
DEFINE_IL2CPP_ARG_TYPE(::WebSocketSharp::Net::WebHeaderCollection*, "WebSocketSharp.Net", "WebHeaderCollection");
// Type namespace: WebSocketSharp.Net
namespace WebSocketSharp::Net {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: WebSocketSharp.Net.WebHeaderCollection
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: AC08C0
  // [ComVisibleAttribute] Offset: AC08C0
  class WebHeaderCollection : public ::System::Collections::Specialized::NameValueCollection {
    public:
    // Nested type: ::WebSocketSharp::Net::WebHeaderCollection::$GetObjectData$c__AnonStorey1
    class $GetObjectData$c__AnonStorey1;
    // Nested type: ::WebSocketSharp::Net::WebHeaderCollection::$ToString$c__AnonStorey2
    class $ToString$c__AnonStorey2;
    public:
    // private System.Boolean _internallyUsed
    // Size: 0x1
    // Offset: 0x68
    bool internallyUsed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: internallyUsed and: state
    char __padding0[0x3] = {};
    // private WebSocketSharp.Net.HttpHeaderType _state
    // Size: 0x4
    // Offset: 0x6C
    ::WebSocketSharp::Net::HttpHeaderType state;
    // Field size check
    static_assert(sizeof(::WebSocketSharp::Net::HttpHeaderType) == 0x4);
    public:
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,WebSocketSharp.Net.HttpHeaderInfo> _headers
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::WebSocketSharp::Net::HttpHeaderInfo*>* _get__headers();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,WebSocketSharp.Net.HttpHeaderInfo> _headers
    static void _set__headers(::System::Collections::Generic::Dictionary_2<::StringW, ::WebSocketSharp::Net::HttpHeaderInfo*>* value);
    // Get instance field reference: private System.Boolean _internallyUsed
    [[deprecated("Use field access instead!")]] bool& dyn__internallyUsed();
    // Get instance field reference: private WebSocketSharp.Net.HttpHeaderType _state
    [[deprecated("Use field access instead!")]] ::WebSocketSharp::Net::HttpHeaderType& dyn__state();
    // static private System.Void .cctor()
    // Offset: 0x1F1F198
    static void _cctor();
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x1F20534
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebHeaderCollection* New_ctor(::System::Runtime::Serialization::SerializationInfo* serializationInfo, ::System::Runtime::Serialization::StreamingContext streamingContext) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::Net::WebHeaderCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebHeaderCollection*, creationType>(serializationInfo, streamingContext)));
    }
    // public System.Void .ctor()
    // Offset: 0x1F17FE4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebHeaderCollection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::Net::WebHeaderCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebHeaderCollection*, creationType>()));
    }
    // private System.Void add(System.String name, System.String value, System.Boolean ignoreRestricted)
    // Offset: 0x1F207B0
    void add(::StringW name, ::StringW value, bool ignoreRestricted);
    // private System.Void addWithoutCheckingName(System.String name, System.String value)
    // Offset: 0x1F20AA8
    void addWithoutCheckingName(::StringW name, ::StringW value);
    // private System.Void addWithoutCheckingNameAndRestricted(System.String name, System.String value)
    // Offset: 0x1F20BF4
    void addWithoutCheckingNameAndRestricted(::StringW name, ::StringW value);
    // static private System.Int32 checkColonSeparated(System.String header)
    // Offset: 0x1F20DC8
    static int checkColonSeparated(::StringW header);
    // static private WebSocketSharp.Net.HttpHeaderType checkHeaderType(System.String name)
    // Offset: 0x1F20E7C
    static ::WebSocketSharp::Net::HttpHeaderType checkHeaderType(::StringW name);
    // static private System.String checkName(System.String name)
    // Offset: 0x1F20890
    static ::StringW checkName(::StringW name);
    // private System.Void checkRestricted(System.String name)
    // Offset: 0x1F2114C
    void checkRestricted(::StringW name);
    // private System.Void checkState(System.Boolean response)
    // Offset: 0x1F212AC
    void checkState(bool response);
    // static private System.String checkValue(System.String value)
    // Offset: 0x1F20C7C
    static ::StringW checkValue(::StringW value);
    // private System.Void doWithCheckingState(System.Action`2<System.String,System.String> action, System.String name, System.String value, System.Boolean setState)
    // Offset: 0x1F209A4
    void doWithCheckingState(::System::Action_2<::StringW, ::StringW>* action, ::StringW name, ::StringW value, bool setState);
    // private System.Void doWithCheckingState(System.Action`2<System.String,System.String> action, System.String name, System.String value, System.Boolean response, System.Boolean setState)
    // Offset: 0x1F213DC
    void doWithCheckingState(::System::Action_2<::StringW, ::StringW>* action, ::StringW name, ::StringW value, bool response, bool setState);
    // private System.Void doWithoutCheckingName(System.Action`2<System.String,System.String> action, System.String name, System.String value)
    // Offset: 0x1F20B3C
    void doWithoutCheckingName(::System::Action_2<::StringW, ::StringW>* action, ::StringW name, ::StringW value);
    // static private WebSocketSharp.Net.HttpHeaderInfo getHeaderInfo(System.String name)
    // Offset: 0x1F20F1C
    static ::WebSocketSharp::Net::HttpHeaderInfo* getHeaderInfo(::StringW name);
    // static private System.Boolean isRestricted(System.String name, System.Boolean response)
    // Offset: 0x1F21214
    static bool isRestricted(::StringW name, bool response);
    // private System.Void removeWithoutCheckingName(System.String name, System.String unuse)
    // Offset: 0x1F21498
    void removeWithoutCheckingName(::StringW name, ::StringW unuse);
    // private System.Void setWithoutCheckingName(System.String name, System.String value)
    // Offset: 0x1F214C8
    void setWithoutCheckingName(::StringW name, ::StringW value);
    // System.Void InternalSet(System.String header, System.Boolean response)
    // Offset: 0x1F17FEC
    void InternalSet(::StringW header, bool response);
    // System.Void InternalSet(System.String name, System.String value, System.Boolean response)
    // Offset: 0x1F2155C
    void InternalSet(::StringW name, ::StringW value, bool response);
    // static System.Boolean IsHeaderName(System.String name)
    // Offset: 0x1F210C0
    static bool IsHeaderName(::StringW name);
    // static System.Boolean IsHeaderValue(System.String value)
    // Offset: 0x1F21378
    static bool IsHeaderValue(::StringW value);
    // static System.Boolean IsMultiValue(System.String headerName, System.Boolean response)
    // Offset: 0x1F21628
    static bool IsMultiValue(::StringW headerName, bool response);
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x1F21CA4
    void System_Runtime_Serialization_ISerializable_GetObjectData(::System::Runtime::Serialization::SerializationInfo* serializationInfo, ::System::Runtime::Serialization::StreamingContext streamingContext);
    // public override System.String[] get_AllKeys()
    // Offset: 0x1F207A0
    // Implemented from: System.Collections.Specialized.NameValueCollection
    // Base method: System.String[] NameValueCollection::get_AllKeys()
    ::ArrayW<::StringW> get_AllKeys();
    // public override System.Int32 get_Count()
    // Offset: 0x1F207A8
    // Implemented from: System.Collections.Specialized.NameObjectCollectionBase
    // Base method: System.Int32 NameObjectCollectionBase::get_Count()
    int get_Count();
    // public override System.Void Add(System.String name, System.String value)
    // Offset: 0x1F216E8
    // Implemented from: System.Collections.Specialized.NameValueCollection
    // Base method: System.Void NameValueCollection::Add(System.String name, System.String value)
    void Add(::StringW name, ::StringW value);
    // public override System.String Get(System.Int32 index)
    // Offset: 0x1F216F0
    // Implemented from: System.Collections.Specialized.NameValueCollection
    // Base method: System.String NameValueCollection::Get(System.Int32 index)
    ::StringW Get(int index);
    // public override System.String Get(System.String name)
    // Offset: 0x1F216F8
    // Implemented from: System.Collections.Specialized.NameValueCollection
    // Base method: System.String NameValueCollection::Get(System.String name)
    ::StringW Get(::StringW name);
    // public override System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x1F21700
    // Implemented from: System.Collections.Specialized.NameObjectCollectionBase
    // Base method: System.Collections.IEnumerator NameObjectCollectionBase::GetEnumerator()
    ::System::Collections::IEnumerator* GetEnumerator();
    // public override System.String GetKey(System.Int32 index)
    // Offset: 0x1F21708
    // Implemented from: System.Collections.Specialized.NameValueCollection
    // Base method: System.String NameValueCollection::GetKey(System.Int32 index)
    ::StringW GetKey(int index);
    // public override System.String[] GetValues(System.String header)
    // Offset: 0x1F21710
    // Implemented from: System.Collections.Specialized.NameValueCollection
    // Base method: System.String[] NameValueCollection::GetValues(System.String header)
    ::ArrayW<::StringW> GetValues(::StringW header);
    // public override System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x1F2173C
    // Implemented from: System.Collections.Specialized.NameObjectCollectionBase
    // Base method: System.Void NameObjectCollectionBase::GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* serializationInfo, ::System::Runtime::Serialization::StreamingContext streamingContext);
    // public override System.Void OnDeserialization(System.Object sender)
    // Offset: 0x1F219C0
    // Implemented from: System.Collections.Specialized.NameObjectCollectionBase
    // Base method: System.Void NameObjectCollectionBase::OnDeserialization(System.Object sender)
    void OnDeserialization(::Il2CppObject* sender);
    // public override System.Void Remove(System.String name)
    // Offset: 0x1F219C4
    // Implemented from: System.Collections.Specialized.NameValueCollection
    // Base method: System.Void NameValueCollection::Remove(System.String name)
    void Remove(::StringW name);
    // public override System.Void Set(System.String name, System.String value)
    // Offset: 0x1F21A80
    // Implemented from: System.Collections.Specialized.NameValueCollection
    // Base method: System.Void NameValueCollection::Set(System.String name, System.String value)
    void Set(::StringW name, ::StringW value);
    // public override System.String ToString()
    // Offset: 0x1F21B40
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // WebSocketSharp.Net.WebHeaderCollection
  #pragma pack(pop)
  static check_size<sizeof(WebHeaderCollection), 108 + sizeof(::WebSocketSharp::Net::HttpHeaderType)> __WebSocketSharp_Net_WebHeaderCollectionSizeCheck;
  static_assert(sizeof(WebHeaderCollection) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&WebSocketSharp::Net::WebHeaderCollection::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::add
// Il2CppName: add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::StringW, ::StringW, bool)>(&WebSocketSharp::Net::WebHeaderCollection::add)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ignoreRestricted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value, ignoreRestricted});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::addWithoutCheckingName
// Il2CppName: addWithoutCheckingName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::StringW, ::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::addWithoutCheckingName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "addWithoutCheckingName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::addWithoutCheckingNameAndRestricted
// Il2CppName: addWithoutCheckingNameAndRestricted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::StringW, ::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::addWithoutCheckingNameAndRestricted)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "addWithoutCheckingNameAndRestricted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::checkColonSeparated
// Il2CppName: checkColonSeparated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::checkColonSeparated)> {
  static const MethodInfo* get() {
    static auto* header = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "checkColonSeparated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::checkHeaderType
// Il2CppName: checkHeaderType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::WebSocketSharp::Net::HttpHeaderType (*)(::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::checkHeaderType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "checkHeaderType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::checkName
// Il2CppName: checkName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::checkName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "checkName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::checkRestricted
// Il2CppName: checkRestricted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::checkRestricted)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "checkRestricted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::checkState
// Il2CppName: checkState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(bool)>(&WebSocketSharp::Net::WebHeaderCollection::checkState)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "checkState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::checkValue
// Il2CppName: checkValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::checkValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "checkValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::doWithCheckingState
// Il2CppName: doWithCheckingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::System::Action_2<::StringW, ::StringW>*, ::StringW, ::StringW, bool)>(&WebSocketSharp::Net::WebHeaderCollection::doWithCheckingState)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* setState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "doWithCheckingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action, name, value, setState});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::doWithCheckingState
// Il2CppName: doWithCheckingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::System::Action_2<::StringW, ::StringW>*, ::StringW, ::StringW, bool, bool)>(&WebSocketSharp::Net::WebHeaderCollection::doWithCheckingState)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* setState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "doWithCheckingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action, name, value, response, setState});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::doWithoutCheckingName
// Il2CppName: doWithoutCheckingName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::System::Action_2<::StringW, ::StringW>*, ::StringW, ::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::doWithoutCheckingName)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "doWithoutCheckingName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action, name, value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::getHeaderInfo
// Il2CppName: getHeaderInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::WebSocketSharp::Net::HttpHeaderInfo* (*)(::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::getHeaderInfo)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "getHeaderInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::isRestricted
// Il2CppName: isRestricted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, bool)>(&WebSocketSharp::Net::WebHeaderCollection::isRestricted)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "isRestricted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, response});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::removeWithoutCheckingName
// Il2CppName: removeWithoutCheckingName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::StringW, ::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::removeWithoutCheckingName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* unuse = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "removeWithoutCheckingName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, unuse});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::setWithoutCheckingName
// Il2CppName: setWithoutCheckingName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::StringW, ::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::setWithoutCheckingName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "setWithoutCheckingName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::InternalSet
// Il2CppName: InternalSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::StringW, bool)>(&WebSocketSharp::Net::WebHeaderCollection::InternalSet)> {
  static const MethodInfo* get() {
    static auto* header = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "InternalSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header, response});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::InternalSet
// Il2CppName: InternalSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::StringW, ::StringW, bool)>(&WebSocketSharp::Net::WebHeaderCollection::InternalSet)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "InternalSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value, response});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::IsHeaderName
// Il2CppName: IsHeaderName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::IsHeaderName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "IsHeaderName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::IsHeaderValue
// Il2CppName: IsHeaderValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::IsHeaderValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "IsHeaderValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::IsMultiValue
// Il2CppName: IsMultiValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, bool)>(&WebSocketSharp::Net::WebHeaderCollection::IsMultiValue)> {
  static const MethodInfo* get() {
    static auto* headerName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "IsMultiValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{headerName, response});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::System_Runtime_Serialization_ISerializable_GetObjectData
// Il2CppName: System.Runtime.Serialization.ISerializable.GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&WebSocketSharp::Net::WebHeaderCollection::System_Runtime_Serialization_ISerializable_GetObjectData)> {
  static const MethodInfo* get() {
    static auto* serializationInfo = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* streamingContext = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializationInfo, streamingContext});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::get_AllKeys
// Il2CppName: get_AllKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (WebSocketSharp::Net::WebHeaderCollection::*)()>(&WebSocketSharp::Net::WebHeaderCollection::get_AllKeys)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "get_AllKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (WebSocketSharp::Net::WebHeaderCollection::*)()>(&WebSocketSharp::Net::WebHeaderCollection::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::StringW, ::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::Add)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::Net::WebHeaderCollection::*)(int)>(&WebSocketSharp::Net::WebHeaderCollection::Get)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::Net::WebHeaderCollection::*)(::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::Get)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (WebSocketSharp::Net::WebHeaderCollection::*)()>(&WebSocketSharp::Net::WebHeaderCollection::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::GetKey
// Il2CppName: GetKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::Net::WebHeaderCollection::*)(int)>(&WebSocketSharp::Net::WebHeaderCollection::GetKey)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "GetKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::GetValues
// Il2CppName: GetValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (WebSocketSharp::Net::WebHeaderCollection::*)(::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::GetValues)> {
  static const MethodInfo* get() {
    static auto* header = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "GetValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{header});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&WebSocketSharp::Net::WebHeaderCollection::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* serializationInfo = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* streamingContext = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializationInfo, streamingContext});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::OnDeserialization
// Il2CppName: OnDeserialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::Il2CppObject*)>(&WebSocketSharp::Net::WebHeaderCollection::OnDeserialization)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "OnDeserialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::Remove)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebSocketSharp::Net::WebHeaderCollection::*)(::StringW, ::StringW)>(&WebSocketSharp::Net::WebHeaderCollection::Set)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::WebHeaderCollection::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::Net::WebHeaderCollection::*)()>(&WebSocketSharp::Net::WebHeaderCollection::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::WebHeaderCollection*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
