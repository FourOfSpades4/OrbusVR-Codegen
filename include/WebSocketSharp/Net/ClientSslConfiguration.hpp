// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: WebSocketSharp.Net.SslConfiguration
#include "WebSocketSharp/Net/SslConfiguration.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Forward declaring namespace: System::Net::Security
namespace System::Net::Security {
  // Forward declaring type: LocalCertificateSelectionCallback
  class LocalCertificateSelectionCallback;
  // Forward declaring type: RemoteCertificateValidationCallback
  class RemoteCertificateValidationCallback;
}
// Completed forward declares
// Type namespace: WebSocketSharp.Net
namespace WebSocketSharp::Net {
  // Forward declaring type: ClientSslConfiguration
  class ClientSslConfiguration;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::WebSocketSharp::Net::ClientSslConfiguration);
DEFINE_IL2CPP_ARG_TYPE(::WebSocketSharp::Net::ClientSslConfiguration*, "WebSocketSharp.Net", "ClientSslConfiguration");
// Type namespace: WebSocketSharp.Net
namespace WebSocketSharp::Net {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: WebSocketSharp.Net.ClientSslConfiguration
  // [TokenAttribute] Offset: FFFFFFFF
  class ClientSslConfiguration : public ::WebSocketSharp::Net::SslConfiguration {
    public:
    public:
    // private System.Security.Cryptography.X509Certificates.X509CertificateCollection _certs
    // Size: 0x8
    // Offset: 0x28
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* certs;
    // Field size check
    static_assert(sizeof(::System::Security::Cryptography::X509Certificates::X509CertificateCollection*) == 0x8);
    // private System.String _host
    // Size: 0x8
    // Offset: 0x30
    ::StringW host;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.Security.Cryptography.X509Certificates.X509CertificateCollection _certs
    [[deprecated("Use field access instead!")]] ::System::Security::Cryptography::X509Certificates::X509CertificateCollection*& dyn__certs();
    // Get instance field reference: private System.String _host
    [[deprecated("Use field access instead!")]] ::StringW& dyn__host();
    // public System.Void .ctor(System.String targetHost)
    // Offset: 0x1F1B674
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClientSslConfiguration* New_ctor(::StringW targetHost) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::Net::ClientSslConfiguration::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClientSslConfiguration*, creationType>(targetHost)));
    }
    // public System.Void .ctor(System.String targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, System.Boolean checkCertificateRevocation)
    // Offset: 0x1F1B6AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClientSslConfiguration* New_ctor(::StringW targetHost, ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, ::System::Security::Authentication::SslProtocols enabledSslProtocols, bool checkCertificateRevocation) {
      static auto ___internal__logger = ::Logger::get().WithContext("::WebSocketSharp::Net::ClientSslConfiguration::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClientSslConfiguration*, creationType>(targetHost, clientCertificates, enabledSslProtocols, checkCertificateRevocation)));
    }
    // public System.Security.Cryptography.X509Certificates.X509CertificateCollection get_ClientCertificates()
    // Offset: 0x1F1B740
    ::System::Security::Cryptography::X509Certificates::X509CertificateCollection* get_ClientCertificates();
    // public System.Net.Security.LocalCertificateSelectionCallback get_ClientCertificateSelectionCallback()
    // Offset: 0x1F1B748
    ::System::Net::Security::LocalCertificateSelectionCallback* get_ClientCertificateSelectionCallback();
    // public System.Net.Security.RemoteCertificateValidationCallback get_ServerCertificateValidationCallback()
    // Offset: 0x1F1B7FC
    ::System::Net::Security::RemoteCertificateValidationCallback* get_ServerCertificateValidationCallback();
    // public System.String get_TargetHost()
    // Offset: 0x1F1B8AC
    ::StringW get_TargetHost();
  }; // WebSocketSharp.Net.ClientSslConfiguration
  #pragma pack(pop)
  static check_size<sizeof(ClientSslConfiguration), 48 + sizeof(::StringW)> __WebSocketSharp_Net_ClientSslConfigurationSizeCheck;
  static_assert(sizeof(ClientSslConfiguration) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: WebSocketSharp::Net::ClientSslConfiguration::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::Net::ClientSslConfiguration::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: WebSocketSharp::Net::ClientSslConfiguration::get_ClientCertificates
// Il2CppName: get_ClientCertificates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Security::Cryptography::X509Certificates::X509CertificateCollection* (WebSocketSharp::Net::ClientSslConfiguration::*)()>(&WebSocketSharp::Net::ClientSslConfiguration::get_ClientCertificates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::ClientSslConfiguration*), "get_ClientCertificates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::ClientSslConfiguration::get_ClientCertificateSelectionCallback
// Il2CppName: get_ClientCertificateSelectionCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Security::LocalCertificateSelectionCallback* (WebSocketSharp::Net::ClientSslConfiguration::*)()>(&WebSocketSharp::Net::ClientSslConfiguration::get_ClientCertificateSelectionCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::ClientSslConfiguration*), "get_ClientCertificateSelectionCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::ClientSslConfiguration::get_ServerCertificateValidationCallback
// Il2CppName: get_ServerCertificateValidationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Security::RemoteCertificateValidationCallback* (WebSocketSharp::Net::ClientSslConfiguration::*)()>(&WebSocketSharp::Net::ClientSslConfiguration::get_ServerCertificateValidationCallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::ClientSslConfiguration*), "get_ServerCertificateValidationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WebSocketSharp::Net::ClientSslConfiguration::get_TargetHost
// Il2CppName: get_TargetHost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (WebSocketSharp::Net::ClientSslConfiguration::*)()>(&WebSocketSharp::Net::ClientSslConfiguration::get_TargetHost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WebSocketSharp::Net::ClientSslConfiguration*), "get_TargetHost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
